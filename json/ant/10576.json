[{"authorTime":"2005-03-15 04:08:32","codes":[{"authorDate":"2005-03-15 04:08:32","commitOrder":1,"curCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encode(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n        out.write(\">\");\n    }\n","date":"2005-03-15 04:08:32","endLine":172,"groupId":"31","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"openElement","params":"(Elementelement@Writerout@intindent@StringindentWith)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/8f/7803695c9f1f48f35a15cdb4b81e07765ac429.src","preCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encode(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n        out.write(\">\");\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"},{"authorDate":"2005-03-15 04:08:32","commitOrder":1,"curCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(lSep);\n        out.flush();\n    }\n","date":"2005-03-15 04:08:32","endLine":202,"groupId":"29","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"closeElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/8f/7803695c9f1f48f35a15cdb4b81e07765ac429.src","preCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(lSep);\n        out.flush();\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"B"}],"commitId":"a7900921c30f730f0fda304913f867dee4dcebc5","commitMessage":"@@@Small refactoring to allow a less memory consuming \"streaming mode\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@277962 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2005-03-15 04:08:32","modifiedFileCount":"1","status":"B","submitter":"Stefan Bodewig"},{"authorTime":"2005-03-15 04:08:32","codes":[{"authorDate":"2005-05-25 01:54:47","commitOrder":2,"curCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encode(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            out.write(\" />\");\n            out.write(lSep);\n            out.flush();\n        }\n    }\n","date":"2005-05-25 01:54:47","endLine":197,"groupId":"31","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"openElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ed/9c3bb370ad047714a9d5b16da9352d10c3e53d.src","preCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encode(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n        out.write(\">\");\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"},{"authorDate":"2005-03-15 04:08:32","commitOrder":2,"curCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(lSep);\n        out.flush();\n    }\n","date":"2005-03-15 04:08:32","endLine":202,"groupId":"29","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"closeElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/8f/7803695c9f1f48f35a15cdb4b81e07765ac429.src","preCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(lSep);\n        out.flush();\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"N"}],"commitId":"b746aeaa3768fb8b9fbe7eddd3bdc4eb59bfc13a","commitMessage":"@@@go ahead and close elements with no children\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@278355 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2005-05-25 01:54:47","modifiedFileCount":"2","status":"M","submitter":"Matthew Jason Benson"},{"authorTime":"2005-12-16 12:26:26","codes":[{"authorDate":"2005-12-16 12:26:26","commitOrder":3,"curCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String prefix = (String) nsPrefixMap.get(element.getNamespaceURI());\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(element.getNamespaceURI(), prefix);\n                addNSDefinition(element, element.getNamespaceURI());\n            }\n            if (!\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String prefix =\n                    (String) nsPrefixMap.get(attr.getNamespaceURI());\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(attr.getNamespaceURI(), prefix);\n                    addNSDefinition(element, attr.getNamespaceURI());\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encode(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        ArrayList al = (ArrayList) nsURIByElement.get(element);\n        if (al != null) {\n            Iterator iter = al.iterator();\n            while (iter.hasNext()) {\n                String uri = (String) iter.next();\n                String prefix = (String) nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!\"\".equals(prefix)) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(lSep);\n            out.flush();\n        }\n    }\n","date":"2005-12-16 12:26:26","endLine":347,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"openElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/78/6ac6dd40a3ea76b559a12267f55c8d3816058f.src","preCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encode(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            out.write(\" />\");\n            out.write(lSep);\n            out.flush();\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"},{"authorDate":"2005-12-16 12:26:26","commitOrder":3,"curCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements\n            || namespacePolicy.qualifyAttributes) {\n            String prefix =\n                (String) nsPrefixMap.get(element.getNamespaceURI());\n            if (prefix != null && !\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(lSep);\n        out.flush();\n    }\n","date":"2005-12-16 12:26:26","endLine":387,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"closeElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/78/6ac6dd40a3ea76b559a12267f55c8d3816058f.src","preCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(lSep);\n        out.flush();\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"M"}],"commitId":"b7b59490a82c8b2df3c580a2f2502cc28b8e75d8","commitMessage":"@@@Add NS support to DOMElementWriter\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@357117 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2005-12-16 12:26:26","modifiedFileCount":"2","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2005-12-20 12:50:14","codes":[{"authorDate":"2005-12-20 12:50:14","commitOrder":4,"curCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = (String) nsPrefixMap.get(uri);\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(uri, prefix);\n                addNSDefinition(element, uri);\n            }\n            if (!\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String uri = getNamespaceURI(attr);\n                String prefix = (String) nsPrefixMap.get(uri);\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(uri, prefix);\n                    addNSDefinition(element, uri);\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encode(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        ArrayList al = (ArrayList) nsURIByElement.get(element);\n        if (al != null) {\n            Iterator iter = al.iterator();\n            while (iter.hasNext()) {\n                String uri = (String) iter.next();\n                String prefix = (String) nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!\"\".equals(prefix)) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(lSep);\n            out.flush();\n        }\n    }\n","date":"2005-12-20 12:50:14","endLine":349,"groupId":"2703","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"openElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/a7/b6d6718ec283f26e8b8bbdf8148b98b7dc81f9.src","preCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String prefix = (String) nsPrefixMap.get(element.getNamespaceURI());\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(element.getNamespaceURI(), prefix);\n                addNSDefinition(element, element.getNamespaceURI());\n            }\n            if (!\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String prefix =\n                    (String) nsPrefixMap.get(attr.getNamespaceURI());\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(attr.getNamespaceURI(), prefix);\n                    addNSDefinition(element, attr.getNamespaceURI());\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encode(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        ArrayList al = (ArrayList) nsURIByElement.get(element);\n        if (al != null) {\n            Iterator iter = al.iterator();\n            while (iter.hasNext()) {\n                String uri = (String) iter.next();\n                String prefix = (String) nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!\"\".equals(prefix)) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(lSep);\n            out.flush();\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"},{"authorDate":"2005-12-20 12:50:14","commitOrder":4,"curCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = (String) nsPrefixMap.get(uri);\n            if (prefix != null && !\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(lSep);\n        out.flush();\n    }\n","date":"2005-12-20 12:50:14","endLine":388,"groupId":"3956","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"closeElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/a7/b6d6718ec283f26e8b8bbdf8148b98b7dc81f9.src","preCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements\n            || namespacePolicy.qualifyAttributes) {\n            String prefix =\n                (String) nsPrefixMap.get(element.getNamespaceURI());\n            if (prefix != null && !\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(lSep);\n        out.flush();\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"}],"commitId":"cc6786e6a60a3432bd3e5db472939b21879251ce","commitMessage":"@@@better deal with elements that don't have a namespace URI\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@357908 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2005-12-20 12:50:14","modifiedFileCount":"1","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2005-12-20 12:50:14","codes":[{"authorDate":"2010-06-29 15:46:06","commitOrder":5,"curCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = (String) nsPrefixMap.get(uri);\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(uri, prefix);\n                addNSDefinition(element, uri);\n            }\n            if (!\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String uri = getNamespaceURI(attr);\n                String prefix = (String) nsPrefixMap.get(uri);\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(uri, prefix);\n                    addNSDefinition(element, uri);\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encodeAttributeValue(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        ArrayList al = (ArrayList) nsURIByElement.get(element);\n        if (al != null) {\n            Iterator iter = al.iterator();\n            while (iter.hasNext()) {\n                String uri = (String) iter.next();\n                String prefix = (String) nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!\"\".equals(prefix)) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(lSep);\n            out.flush();\n        }\n    }\n","date":"2010-06-29 15:46:06","endLine":365,"groupId":"2703","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"openElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/c5/d8a84bfa8fd163d8eec7ae1e3075833e87dc8b.src","preCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = (String) nsPrefixMap.get(uri);\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(uri, prefix);\n                addNSDefinition(element, uri);\n            }\n            if (!\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String uri = getNamespaceURI(attr);\n                String prefix = (String) nsPrefixMap.get(uri);\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(uri, prefix);\n                    addNSDefinition(element, uri);\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encode(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        ArrayList al = (ArrayList) nsURIByElement.get(element);\n        if (al != null) {\n            Iterator iter = al.iterator();\n            while (iter.hasNext()) {\n                String uri = (String) iter.next();\n                String prefix = (String) nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!\"\".equals(prefix)) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(lSep);\n            out.flush();\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"},{"authorDate":"2005-12-20 12:50:14","commitOrder":5,"curCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = (String) nsPrefixMap.get(uri);\n            if (prefix != null && !\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(lSep);\n        out.flush();\n    }\n","date":"2005-12-20 12:50:14","endLine":388,"groupId":"3956","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"closeElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/a7/b6d6718ec283f26e8b8bbdf8148b98b7dc81f9.src","preCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = (String) nsPrefixMap.get(uri);\n            if (prefix != null && !\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(lSep);\n        out.flush();\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"N"}],"commitId":"9b19344ae6777673cc093b5882e02fd43fba99f0","commitMessage":"@@@properly encode whitespace in attribute values\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@958857 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-06-29 15:46:06","modifiedFileCount":"2","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2005-12-20 12:50:14","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":6,"curCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = (String) nsPrefixMap.get(uri);\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(uri, prefix);\n                addNSDefinition(element, uri);\n            }\n            if (!\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String uri = getNamespaceURI(attr);\n                String prefix = (String) nsPrefixMap.get(uri);\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(uri, prefix);\n                    addNSDefinition(element, uri);\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encodeAttributeValue(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        List<String> uris = nsURIByElement.get(element);\n        if (uris != null) {\n            for (String uri : uris) {\n                String prefix = nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!\"\".equals(prefix)) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(lSep);\n            out.flush();\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":373,"groupId":"2703","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"openElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7f/6013a608e8584a6da4e0d50e3394486be011d2.src","preCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = (String) nsPrefixMap.get(uri);\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(uri, prefix);\n                addNSDefinition(element, uri);\n            }\n            if (!\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String uri = getNamespaceURI(attr);\n                String prefix = (String) nsPrefixMap.get(uri);\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(uri, prefix);\n                    addNSDefinition(element, uri);\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encodeAttributeValue(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        ArrayList al = (ArrayList) nsURIByElement.get(element);\n        if (al != null) {\n            Iterator iter = al.iterator();\n            while (iter.hasNext()) {\n                String uri = (String) iter.next();\n                String prefix = (String) nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!\"\".equals(prefix)) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(lSep);\n            out.flush();\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2005-12-20 12:50:14","commitOrder":6,"curCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = (String) nsPrefixMap.get(uri);\n            if (prefix != null && !\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(lSep);\n        out.flush();\n    }\n","date":"2005-12-20 12:50:14","endLine":388,"groupId":"3956","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"closeElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/a7/b6d6718ec283f26e8b8bbdf8148b98b7dc81f9.src","preCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = (String) nsPrefixMap.get(uri);\n            if (prefix != null && !\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(lSep);\n        out.flush();\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"N"}],"commitId":"b7d1e9bde44cb8e5233d6e70bb96e14cbb2f3e2d","commitMessage":"@@@java 5-8\n","date":"2017-04-13 23:15:22","modifiedFileCount":"609","status":"M","submitter":"Matt Benson"},{"authorTime":"2018-04-02 02:07:39","codes":[{"authorDate":"2018-04-02 02:07:39","commitOrder":7,"curCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(uri, prefix);\n                addNSDefinition(element, uri);\n            }\n            if (!\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String uri = getNamespaceURI(attr);\n                String prefix = nsPrefixMap.get(uri);\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(uri, prefix);\n                    addNSDefinition(element, uri);\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encodeAttributeValue(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        List<String> uris = nsURIByElement.get(element);\n        if (uris != null) {\n            for (String uri : uris) {\n                String prefix = nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!\"\".equals(prefix)) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(lSep);\n            out.flush();\n        }\n    }\n","date":"2018-04-02 02:07:39","endLine":373,"groupId":"4799","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"openElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ca/da1ae7eefe23c9fd341ef84afbd959f7c5d97e.src","preCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = (String) nsPrefixMap.get(uri);\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(uri, prefix);\n                addNSDefinition(element, uri);\n            }\n            if (!\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String uri = getNamespaceURI(attr);\n                String prefix = (String) nsPrefixMap.get(uri);\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(uri, prefix);\n                    addNSDefinition(element, uri);\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encodeAttributeValue(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        List<String> uris = nsURIByElement.get(element);\n        if (uris != null) {\n            for (String uri : uris) {\n                String prefix = nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!\"\".equals(prefix)) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(lSep);\n            out.flush();\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2018-04-02 02:07:39","commitOrder":7,"curCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix != null && !\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(lSep);\n        out.flush();\n    }\n","date":"2018-04-02 02:07:39","endLine":413,"groupId":"7500","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"closeElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ca/da1ae7eefe23c9fd341ef84afbd959f7c5d97e.src","preCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = (String) nsPrefixMap.get(uri);\n            if (prefix != null && !\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(lSep);\n        out.flush();\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"}],"commitId":"95495d57aa5cca8fc350ebfb10f6d390f40290cb","commitMessage":"@@@Remove extraneous casts and (un)boxing.  tersify logic","date":"2018-04-02 02:07:39","modifiedFileCount":"178","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-04-05 17:32:22","codes":[{"authorDate":"2018-04-05 17:32:22","commitOrder":8,"curCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(uri, prefix);\n                addNSDefinition(element, uri);\n            }\n            if (!\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String uri = getNamespaceURI(attr);\n                String prefix = nsPrefixMap.get(uri);\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(uri, prefix);\n                    addNSDefinition(element, uri);\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encodeAttributeValue(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        List<String> uris = nsURIByElement.get(element);\n        if (uris != null) {\n            for (String uri : uris) {\n                String prefix = nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!\"\".equals(prefix)) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(StringUtils.LINE_SEP);\n            out.flush();\n        }\n    }\n","date":"2018-04-05 17:32:22","endLine":371,"groupId":"4799","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"openElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/01/04c34e1cba2784353b180e0e0623091a464510.src","preCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(uri, prefix);\n                addNSDefinition(element, uri);\n            }\n            if (!\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String uri = getNamespaceURI(attr);\n                String prefix = nsPrefixMap.get(uri);\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(uri, prefix);\n                    addNSDefinition(element, uri);\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encodeAttributeValue(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        List<String> uris = nsURIByElement.get(element);\n        if (uris != null) {\n            for (String uri : uris) {\n                String prefix = nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!\"\".equals(prefix)) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(lSep);\n            out.flush();\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"M"},{"authorDate":"2018-04-05 17:32:22","commitOrder":8,"curCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix != null && !\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(StringUtils.LINE_SEP);\n        out.flush();\n    }\n","date":"2018-04-05 17:32:22","endLine":411,"groupId":"7500","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"closeElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/01/04c34e1cba2784353b180e0e0623091a464510.src","preCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix != null && !\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(lSep);\n        out.flush();\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"}],"commitId":"f2459248f23aa439e2c5ab642d9d9d7e6cffc933","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/ant\n","date":"2018-04-05 17:32:22","modifiedFileCount":"138","status":"M","submitter":"Maarten Coene"},{"authorTime":"2018-04-06 20:50:56","codes":[{"authorDate":"2018-04-05 17:32:22","commitOrder":9,"curCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(uri, prefix);\n                addNSDefinition(element, uri);\n            }\n            if (!\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String uri = getNamespaceURI(attr);\n                String prefix = nsPrefixMap.get(uri);\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(uri, prefix);\n                    addNSDefinition(element, uri);\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encodeAttributeValue(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        List<String> uris = nsURIByElement.get(element);\n        if (uris != null) {\n            for (String uri : uris) {\n                String prefix = nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!\"\".equals(prefix)) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(StringUtils.LINE_SEP);\n            out.flush();\n        }\n    }\n","date":"2018-04-05 17:32:22","endLine":371,"groupId":"4799","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"openElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/01/04c34e1cba2784353b180e0e0623091a464510.src","preCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(uri, prefix);\n                addNSDefinition(element, uri);\n            }\n            if (!\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String uri = getNamespaceURI(attr);\n                String prefix = nsPrefixMap.get(uri);\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(uri, prefix);\n                    addNSDefinition(element, uri);\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encodeAttributeValue(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        List<String> uris = nsURIByElement.get(element);\n        if (uris != null) {\n            for (String uri : uris) {\n                String prefix = nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!\"\".equals(prefix)) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(StringUtils.LINE_SEP);\n            out.flush();\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"N"},{"authorDate":"2018-04-06 20:50:56","commitOrder":9,"curCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix != null && !prefix.isEmpty()) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(StringUtils.LINE_SEP);\n        out.flush();\n    }\n","date":"2018-04-06 20:50:56","endLine":411,"groupId":"4800","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"closeElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/d0/cef7c361e0cad847864fd53497be0da3dc994b.src","preCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix != null && !\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(StringUtils.LINE_SEP);\n        out.flush();\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"}],"commitId":"30f52135af7a18cbf3f140089e90bdb39ceee134","commitMessage":"@@@Use null-or-empty pattern","date":"2018-04-06 20:50:56","modifiedFileCount":"80","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-04-06 20:50:56","codes":[{"authorDate":"2018-04-07 02:10:12","commitOrder":10,"curCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(uri, prefix);\n                addNSDefinition(element, uri);\n            }\n            if (!prefix.isEmpty()) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String uri = getNamespaceURI(attr);\n                String prefix = nsPrefixMap.get(uri);\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(uri, prefix);\n                    addNSDefinition(element, uri);\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encodeAttributeValue(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        List<String> uris = nsURIByElement.get(element);\n        if (uris != null) {\n            for (String uri : uris) {\n                String prefix = nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!prefix.isEmpty()) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(StringUtils.LINE_SEP);\n            out.flush();\n        }\n    }\n","date":"2018-04-07 02:10:12","endLine":371,"groupId":"4799","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"openElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/cc/f2c01647c7617ed5609765ac6b0313bde6f9b5.src","preCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(uri, prefix);\n                addNSDefinition(element, uri);\n            }\n            if (!\"\".equals(prefix)) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String uri = getNamespaceURI(attr);\n                String prefix = nsPrefixMap.get(uri);\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(uri, prefix);\n                    addNSDefinition(element, uri);\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encodeAttributeValue(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        List<String> uris = nsURIByElement.get(element);\n        if (uris != null) {\n            for (String uri : uris) {\n                String prefix = nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!\"\".equals(prefix)) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(StringUtils.LINE_SEP);\n            out.flush();\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"M"},{"authorDate":"2018-04-06 20:50:56","commitOrder":10,"curCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix != null && !prefix.isEmpty()) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(StringUtils.LINE_SEP);\n        out.flush();\n    }\n","date":"2018-04-06 20:50:56","endLine":411,"groupId":"4800","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"closeElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/d0/cef7c361e0cad847864fd53497be0da3dc994b.src","preCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix != null && !prefix.isEmpty()) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(StringUtils.LINE_SEP);\n        out.flush();\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"N"}],"commitId":"c3b91f90f0a91e3a54c1c3b2c0d458ac6d6b5d2a","commitMessage":"@@@More isEmpty()","date":"2018-04-07 02:10:12","modifiedFileCount":"14","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-04-27 15:58:46","codes":[{"authorDate":"2018-04-27 15:58:46","commitOrder":11,"curCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(uri, prefix);\n                addNSDefinition(element, uri);\n            }\n            if (!prefix.isEmpty()) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String uri = getNamespaceURI(attr);\n                String prefix = nsPrefixMap.get(uri);\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(uri, prefix);\n                    addNSDefinition(element, uri);\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encodeAttributeValue(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        List<String> uris = nsURIByElement.get(element);\n        if (uris != null) {\n            for (String uri : uris) {\n                String prefix = nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!prefix.isEmpty()) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(String.format(\" />%n\"));\n            out.flush();\n        }\n    }\n","date":"2018-04-27 22:49:32","endLine":370,"groupId":"10576","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"openElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/28/274677dde9f5fbe82763183ded97da9fa7555e.src","preCode":"    public void openElement(Element element, Writer out, int indent,\n                            String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        for (int i = 0; i < indent; i++) {\n            out.write(indentWith);\n        }\n\n        \r\n        out.write(\"<\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix == null) {\n                if (nsPrefixMap.isEmpty()) {\n                    \r\n                    prefix = \"\";\n                } else {\n                    prefix = NS + (nextPrefix++);\n                }\n                nsPrefixMap.put(uri, prefix);\n                addNSDefinition(element, uri);\n            }\n            if (!prefix.isEmpty()) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n        }\n        out.write(element.getTagName());\n\n        \r\n        NamedNodeMap attrs = element.getAttributes();\n        for (int i = 0; i < attrs.getLength(); i++) {\n            Attr attr = (Attr) attrs.item(i);\n            out.write(\" \");\n            if (namespacePolicy.qualifyAttributes) {\n                String uri = getNamespaceURI(attr);\n                String prefix = nsPrefixMap.get(uri);\n                if (prefix == null) {\n                    prefix = NS + (nextPrefix++);\n                    nsPrefixMap.put(uri, prefix);\n                    addNSDefinition(element, uri);\n                }\n                out.write(prefix);\n                out.write(\":\");\n            }\n            out.write(attr.getName());\n            out.write(\"=\\\"\");\n            out.write(encodeAttributeValue(attr.getValue()));\n            out.write(\"\\\"\");\n        }\n\n        \r\n        List<String> uris = nsURIByElement.get(element);\n        if (uris != null) {\n            for (String uri : uris) {\n                String prefix = nsPrefixMap.get(uri);\n                out.write(\" xmlns\");\n                if (!prefix.isEmpty()) {\n                    out.write(\":\");\n                    out.write(prefix);\n                }\n                out.write(\"=\\\"\");\n                out.write(uri);\n                out.write(\"\\\"\");\n            }\n        }\n\n        if (hasChildren) {\n            out.write(\">\");\n        } else {\n            removeNSDefinitions(element);\n            out.write(\" />\");\n            out.write(StringUtils.LINE_SEP);\n            out.flush();\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"M"},{"authorDate":"2018-04-27 15:58:46","commitOrder":11,"curCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix != null && !prefix.isEmpty()) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(String.format(\">%n\"));\n        out.flush();\n    }\n","date":"2018-04-27 22:49:32","endLine":409,"groupId":"10576","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"closeElement","params":"(Elementelement@Writerout@intindent@StringindentWith@booleanhasChildren)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/28/274677dde9f5fbe82763183ded97da9fa7555e.src","preCode":"    public void closeElement(Element element, Writer out, int indent,\n                             String indentWith, boolean hasChildren)\n        throws IOException {\n        \r\n        \r\n        \r\n        if (hasChildren) {\n            for (int i = 0; i < indent; i++) {\n                out.write(indentWith);\n            }\n        }\n\n        \r\n        out.write(\"</\");\n        if (namespacePolicy.qualifyElements) {\n            String uri = getNamespaceURI(element);\n            String prefix = nsPrefixMap.get(uri);\n            if (prefix != null && !prefix.isEmpty()) {\n                out.write(prefix);\n                out.write(\":\");\n            }\n            removeNSDefinitions(element);\n        }\n        out.write(element.getTagName());\n        out.write(\">\");\n        out.write(StringUtils.LINE_SEP);\n        out.flush();\n    }\n","realPath":"src/main/org/apache/tools/ant/util/DOMElementWriter.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"M"}],"commitId":"03bb68d6baa2323424aaaae932c6278d1c246de3","commitMessage":"@@@Deprecate StringUtils.LINE_SEP","date":"2018-04-27 22:49:32","modifiedFileCount":"43","status":"M","submitter":"Gintas Grigelionis"}]
