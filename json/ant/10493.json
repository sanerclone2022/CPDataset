[{"authorTime":"2008-01-05 01:45:12","codes":[{"authorDate":"2009-08-27 18:14:07","commitOrder":7,"curCode":"    private File findFileName(FTPClient ftp) {\n        FTPFile [] theFiles = null;\n        final int maxIterations = 1000;\n        for (int counter = 1; counter < maxIterations; counter++) {\n            File localFile = FILE_UTILS.createTempFile(\n                                                       \"ant\" + Integer.toString(counter), \".tmp\",\n                                                       null, false, false);\n            String fileName = localFile.getName();\n            boolean found = false;\n            try {\n                if (theFiles == null) {\n                    theFiles = ftp.listFiles();\n                }\n                for (int counter2 = 0; counter2 < theFiles.length; counter2++) {\n                    if (theFiles[counter2] != null\n                        && theFiles[counter2].getName().equals(fileName)) {\n                        found = true;\n                        break;\n                    }\n                }\n            } catch (IOException ioe) {\n                throw new BuildException(ioe, task.getLocation());\n            }\n            if (!found) {\n                localFile.deleteOnExit();\n                return localFile;\n            }\n        }\n        return null;\n    }\n","date":"2009-08-27 18:14:07","endLine":1386,"groupId":"7762","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"findFileName","params":"(FTPClientftp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/3a/490e4782ed37f2c31e237802fb6132e360acca.src","preCode":"    private File findFileName(FTPClient ftp) {\n        FTPFile [] theFiles = null;\n        final int maxIterations = 1000;\n        for (int counter = 1; counter < maxIterations; counter++) {\n            File localFile = FILE_UTILS.createTempFile(\n                                                       \"ant\" + Integer.toString(counter), \".tmp\",\n                                                       null, false, false);\n            String fileName = localFile.getName();\n            boolean found = false;\n            try {\n                if (theFiles == null) {\n                    theFiles = ftp.listFiles();\n                }\n                for (int counter2 = 0; counter2 < theFiles.length; counter2++) {\n                    if (theFiles[counter2] != null\n                        && theFiles[counter2].getName().equals(fileName)) {\n                        found = true;\n                        break;\n                    }\n                }\n            } catch (IOException ioe) {\n                throw new BuildException(ioe, task.getLocation());\n            }\n            if (!found) {\n                localFile.deleteOnExit();\n                return localFile;\n            }\n        }\n        return null;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1357,"status":"B"},{"authorDate":"2008-01-05 01:45:12","commitOrder":7,"curCode":"    private File findFileName(FTPClient ftp) {\n        FTPFile [] theFiles = null;\n        final int maxIterations = 1000;\n        for (int counter = 1; counter < maxIterations; counter++) {\n            File localFile = FILE_UTILS.createTempFile(\n                \"ant\" + Integer.toString(counter), \".tmp\",\n                null, false, false);\n            String fileName = localFile.getName();\n            boolean found = false;\n            try {\n                if (theFiles == null) {\n                    theFiles = ftp.listFiles();\n                }\n                for (int counter2 = 0; counter2 < theFiles.length; counter2++) {\n                    if (theFiles[counter2] != null\n                        && theFiles[counter2].getName().equals(fileName)) {\n                        found = true;\n                        break;\n                    }\n                }\n            } catch (IOException ioe) {\n                throw new BuildException(ioe, getLocation());\n            }\n            if (!found) {\n                localFile.deleteOnExit();\n                return localFile;\n            }\n        }\n        return null;\n    }\n","date":"2008-01-05 01:45:12","endLine":1855,"groupId":"7762","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"findFileName","params":"(FTPClientftp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/56/693aad15b263bb05c5ea834d378ec31ef47b72.src","preCode":"    private File findFileName(FTPClient ftp) {\n        FTPFile [] theFiles = null;\n        final int maxIterations = 1000;\n        for (int counter = 1; counter < maxIterations; counter++) {\n            File localFile = FILE_UTILS.createTempFile(\n                \"ant\" + Integer.toString(counter), \".tmp\",\n                null, false, false);\n            String fileName = localFile.getName();\n            boolean found = false;\n            try {\n                if (theFiles == null) {\n                    theFiles = ftp.listFiles();\n                }\n                for (int counter2 = 0; counter2 < theFiles.length; counter2++) {\n                    if (theFiles[counter2] != null\n                        && theFiles[counter2].getName().equals(fileName)) {\n                        found = true;\n                        break;\n                    }\n                }\n            } catch (IOException ioe) {\n                throw new BuildException(ioe, getLocation());\n            }\n            if (!found) {\n                localFile.deleteOnExit();\n                return localFile;\n            }\n        }\n        return null;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1826,"status":"NB"}],"commitId":"d72413184949c04015b452cf9cdf36bf2107061f","commitMessage":"@@@refactored <ftp> so commons-net may be loaded via a separate classloader.  Based on patch by Greg Roodt in PR 45860.  Not really tested.  yet.  therefore I haven't changed defaults.properties so far\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@808350 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-08-27 18:14:07","modifiedFileCount":"3","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2018-04-01 16:26:49","codes":[{"authorDate":"2018-04-01 16:26:49","commitOrder":8,"curCode":"    private File findFileName(FTPClient ftp) {\n        FTPFile[] files = null;\n        final int maxIterations = 1000;\n        for (int counter = 1; counter < maxIterations; counter++) {\n            File localFile = FILE_UTILS.createTempFile(\n                                                       \"ant\" + Integer.toString(counter), \".tmp\",\n                                                       null, false, false);\n            String fileName = localFile.getName();\n            boolean found = false;\n            try {\n                if (files == null) {\n                    files = ftp.listFiles();\n                }\n                for (FTPFile file : files) {\n                    if (file != null && file.getName().equals(fileName)) {\n                        found = true;\n                        break;\n                    }\n                }\n            } catch (IOException ioe) {\n                throw new BuildException(ioe, task.getLocation());\n            }\n            if (!found) {\n                localFile.deleteOnExit();\n                return localFile;\n            }\n        }\n        return null;\n    }\n","date":"2018-04-01 16:26:49","endLine":1422,"groupId":"3948","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"findFileName","params":"(FTPClientftp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/b6/0bf9514bc2eea0c6093ef137060e37d84b79e9.src","preCode":"    private File findFileName(FTPClient ftp) {\n        FTPFile[] theFiles = null;\n        final int maxIterations = 1000;\n        for (int counter = 1; counter < maxIterations; counter++) {\n            File localFile = FILE_UTILS.createTempFile(\n                                                       \"ant\" + Integer.toString(counter), \".tmp\",\n                                                       null, false, false);\n            String fileName = localFile.getName();\n            boolean found = false;\n            try {\n                if (theFiles == null) {\n                    theFiles = ftp.listFiles();\n                }\n                for (int counter2 = 0; counter2 < theFiles.length; counter2++) {\n                    if (theFiles[counter2] != null\n                        && theFiles[counter2].getName().equals(fileName)) {\n                        found = true;\n                        break;\n                    }\n                }\n            } catch (IOException ioe) {\n                throw new BuildException(ioe, task.getLocation());\n            }\n            if (!found) {\n                localFile.deleteOnExit();\n                return localFile;\n            }\n        }\n        return null;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1394,"status":"M"},{"authorDate":"2018-04-01 16:26:49","commitOrder":8,"curCode":"    private File findFileName(FTPClient ftp) {\n        FTPFile[] files = null;\n        final int maxIterations = 1000;\n        for (int counter = 1; counter < maxIterations; counter++) {\n            File localFile = FILE_UTILS.createTempFile(\n                                                       \"ant\" + Integer.toString(counter), \".tmp\",\n                                                       null, false, false);\n            String fileName = localFile.getName();\n            boolean found = false;\n            try {\n                if (files == null) {\n                    files = ftp.listFiles();\n                }\n                for (FTPFile file : files) {\n                    if (file != null && file.getName().equals(fileName)) {\n                        found = true;\n                        break;\n                    }\n                }\n            } catch (IOException ioe) {\n                throw new BuildException(ioe, getLocation());\n            }\n            if (!found) {\n                localFile.deleteOnExit();\n                return localFile;\n            }\n        }\n        return null;\n    }\n","date":"2018-04-01 16:26:49","endLine":2041,"groupId":"3948","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"findFileName","params":"(FTPClientftp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/81/54a1ddc8b4d4f09f6aa355cde822bf57b434d4.src","preCode":"    private File findFileName(FTPClient ftp) {\n        FTPFile[] theFiles = null;\n        final int maxIterations = 1000;\n        for (int counter = 1; counter < maxIterations; counter++) {\n            File localFile = FILE_UTILS.createTempFile(\n                                                       \"ant\" + Integer.toString(counter), \".tmp\",\n                                                       null, false, false);\n            String fileName = localFile.getName();\n            boolean found = false;\n            try {\n                if (theFiles == null) {\n                    theFiles = ftp.listFiles();\n                }\n                for (int counter2 = 0; counter2 < theFiles.length; counter2++) {\n                    if (theFiles[counter2] != null\n                        && theFiles[counter2].getName().equals(fileName)) {\n                        found = true;\n                        break;\n                    }\n                }\n            } catch (IOException ioe) {\n                throw new BuildException(ioe, getLocation());\n            }\n            if (!found) {\n                localFile.deleteOnExit();\n                return localFile;\n            }\n        }\n        return null;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":2013,"status":"M"}],"commitId":"1c80d507f496dde98869890e671edf635bef8dec","commitMessage":"@@@Use foreach loops","date":"2018-04-01 16:26:49","modifiedFileCount":"123","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2020-05-05 20:51:38","codes":[{"authorDate":"2020-05-05 20:51:38","commitOrder":9,"curCode":"    private File findFileName(FTPClient ftp) {\n        FTPFile[] files = null;\n        final int maxIterations = 1000;\n        for (int counter = 1; counter < maxIterations; counter++) {\n            File localFile = FILE_UTILS.createTempFile(task.getProject(),\n                                                       \"ant\" + Integer.toString(counter), \".tmp\",\n                                                       null, false, false);\n            String fileName = localFile.getName();\n            boolean found = false;\n            try {\n                if (files == null) {\n                    files = ftp.listFiles();\n                }\n                for (FTPFile file : files) {\n                    if (file != null && file.getName().equals(fileName)) {\n                        found = true;\n                        break;\n                    }\n                }\n            } catch (IOException ioe) {\n                throw new BuildException(ioe, task.getLocation());\n            }\n            if (!found) {\n                localFile.deleteOnExit();\n                return localFile;\n            }\n        }\n        return null;\n    }\n","date":"2020-05-05 20:51:38","endLine":1398,"groupId":"10493","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"findFileName","params":"(FTPClientftp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ae/c12cc4230e278d904100b952301670a80e7da0.src","preCode":"    private File findFileName(FTPClient ftp) {\n        FTPFile[] files = null;\n        final int maxIterations = 1000;\n        for (int counter = 1; counter < maxIterations; counter++) {\n            File localFile = FILE_UTILS.createTempFile(\n                                                       \"ant\" + Integer.toString(counter), \".tmp\",\n                                                       null, false, false);\n            String fileName = localFile.getName();\n            boolean found = false;\n            try {\n                if (files == null) {\n                    files = ftp.listFiles();\n                }\n                for (FTPFile file : files) {\n                    if (file != null && file.getName().equals(fileName)) {\n                        found = true;\n                        break;\n                    }\n                }\n            } catch (IOException ioe) {\n                throw new BuildException(ioe, task.getLocation());\n            }\n            if (!found) {\n                localFile.deleteOnExit();\n                return localFile;\n            }\n        }\n        return null;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1370,"status":"M"},{"authorDate":"2020-05-05 20:51:38","commitOrder":9,"curCode":"    private File findFileName(FTPClient ftp) {\n        FTPFile[] files = null;\n        final int maxIterations = 1000;\n        for (int counter = 1; counter < maxIterations; counter++) {\n            File localFile = FILE_UTILS.createTempFile(getProject(),\n                                                       \"ant\" + Integer.toString(counter), \".tmp\",\n                                                       null, false, false);\n            String fileName = localFile.getName();\n            boolean found = false;\n            try {\n                if (files == null) {\n                    files = ftp.listFiles();\n                }\n                for (FTPFile file : files) {\n                    if (file != null && file.getName().equals(fileName)) {\n                        found = true;\n                        break;\n                    }\n                }\n            } catch (IOException ioe) {\n                throw new BuildException(ioe, getLocation());\n            }\n            if (!found) {\n                localFile.deleteOnExit();\n                return localFile;\n            }\n        }\n        return null;\n    }\n","date":"2020-05-05 20:51:38","endLine":2085,"groupId":"10493","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"findFileName","params":"(FTPClientftp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e8/fa600a23c9fb95a6bcf06719a84a56888bff8b.src","preCode":"    private File findFileName(FTPClient ftp) {\n        FTPFile[] files = null;\n        final int maxIterations = 1000;\n        for (int counter = 1; counter < maxIterations; counter++) {\n            File localFile = FILE_UTILS.createTempFile(\n                                                       \"ant\" + Integer.toString(counter), \".tmp\",\n                                                       null, false, false);\n            String fileName = localFile.getName();\n            boolean found = false;\n            try {\n                if (files == null) {\n                    files = ftp.listFiles();\n                }\n                for (FTPFile file : files) {\n                    if (file != null && file.getName().equals(fileName)) {\n                        found = true;\n                        break;\n                    }\n                }\n            } catch (IOException ioe) {\n                throw new BuildException(ioe, getLocation());\n            }\n            if (!found) {\n                localFile.deleteOnExit();\n                return localFile;\n            }\n        }\n        return null;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":2057,"status":"M"}],"commitId":"fe7e9617ed54bb4aeae2e79871d022cbfdddbf3d","commitMessage":"@@@Merge branch '1.9.x'\n","date":"2020-05-05 20:51:38","modifiedFileCount":"20","status":"M","submitter":"Stefan Bodewig"}]
