[{"authorTime":"2008-09-15 16:28:44","codes":[{"authorDate":"2008-09-15 17:54:06","commitOrder":7,"curCode":"    static boolean matchPatternStart(String[] patDirs, String[] strDirs,\n                                     boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = patDirs.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = patDirs[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n\n        \r\n        \r\n        \r\n        if (strIdxStart > strIdxEnd) {\n            \r\n            return true;\n        } else if (patIdxStart > patIdxEnd) {\n            \r\n            return false;\n        } else {\n            \r\n            \r\n            return true;\n        }\n    }\n","date":"2008-09-15 17:54:06","endLine":171,"groupId":"3001","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"matchPatternStart","params":"(String[]patDirs@String[]strDirs@booleanisCaseSensitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7a/6da092a6f2b88389cb915fd09358dc003247a8.src","preCode":"    static boolean matchPatternStart(String[] patDirs, String[] strDirs,\n                                     boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = patDirs.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = patDirs[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n\n        \r\n        \r\n        \r\n        if (strIdxStart > strIdxEnd) {\n            \r\n            return true;\n        } else if (patIdxStart > patIdxEnd) {\n            \r\n            return false;\n        } else {\n            \r\n            \r\n            return true;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"},{"authorDate":"2008-09-15 16:28:44","commitOrder":7,"curCode":"    static boolean matchPath(String[] tokenizedPattern, String str, boolean isCaseSensitive) {\n        String[] strDirs = tokenizePathAsArray(str);\n\n        int patIdxStart = 0;\n        int patIdxEnd = tokenizedPattern.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            if (patIdxStart > patIdxEnd) {\n                \r\n                return false;\n            }\n        }\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxEnd];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxEnd], isCaseSensitive)) {\n                return false;\n            }\n            patIdxEnd--;\n            strIdxEnd--;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n            int patIdxTmp = -1;\n            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {\n                if (tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    patIdxTmp = i;\n                    break;\n                }\n            }\n            if (patIdxTmp == patIdxStart + 1) {\n                \r\n                patIdxStart++;\n                continue;\n            }\n            \r\n            \r\n            int patLength = (patIdxTmp - patIdxStart - 1);\n            int strLength = (strIdxEnd - strIdxStart + 1);\n            int foundIdx = -1;\n            strLoop:\n                        for (int i = 0; i <= strLength - patLength; i++) {\n                            for (int j = 0; j < patLength; j++) {\n                                String subPat = tokenizedPattern[patIdxStart + j + 1];\n                                String subStr = strDirs[strIdxStart + i + j];\n                                if (!match(subPat, subStr, isCaseSensitive)) {\n                                    continue strLoop;\n                                }\n                            }\n\n                            foundIdx = strIdxStart + i;\n                            break;\n                        }\n\n            if (foundIdx == -1) {\n                return false;\n            }\n\n            patIdxStart = patIdxTmp;\n            strIdxStart = foundIdx + patLength;\n        }\n\n        for (int i = patIdxStart; i <= patIdxEnd; i++) {\n            if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n","date":"2008-09-15 16:28:44","endLine":317,"groupId":"6722","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"matchPath","params":"(String[]tokenizedPattern@Stringstr@booleanisCaseSensitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/a4/0f49d24ce788efc84af8d4423db18ee002a9dd.src","preCode":"    static boolean matchPath(String[] tokenizedPattern, String str, boolean isCaseSensitive) {\n        String[] strDirs = tokenizePathAsArray(str);\n\n        int patIdxStart = 0;\n        int patIdxEnd = tokenizedPattern.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            if (patIdxStart > patIdxEnd) {\n                \r\n                return false;\n            }\n        }\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxEnd];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxEnd], isCaseSensitive)) {\n                return false;\n            }\n            patIdxEnd--;\n            strIdxEnd--;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n            int patIdxTmp = -1;\n            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {\n                if (tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    patIdxTmp = i;\n                    break;\n                }\n            }\n            if (patIdxTmp == patIdxStart + 1) {\n                \r\n                patIdxStart++;\n                continue;\n            }\n            \r\n            \r\n            int patLength = (patIdxTmp - patIdxStart - 1);\n            int strLength = (strIdxEnd - strIdxStart + 1);\n            int foundIdx = -1;\n            strLoop:\n                        for (int i = 0; i <= strLength - patLength; i++) {\n                            for (int j = 0; j < patLength; j++) {\n                                String subPat = tokenizedPattern[patIdxStart + j + 1];\n                                String subStr = strDirs[strIdxStart + i + j];\n                                if (!match(subPat, subStr, isCaseSensitive)) {\n                                    continue strLoop;\n                                }\n                            }\n\n                            foundIdx = strIdxStart + i;\n                            break;\n                        }\n\n            if (foundIdx == -1) {\n                return false;\n            }\n\n            patIdxStart = patIdxTmp;\n            strIdxStart = foundIdx + patLength;\n        }\n\n        for (int i = patIdxStart; i <= patIdxEnd; i++) {\n            if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n","realPath":"src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"NB"}],"commitId":"c13dba6d524fe74b1518e3442429ba6e97592edd","commitMessage":"@@@Avoid repeated tokenization.  make DefaultExcludesTest happy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@695402 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-09-15 17:54:06","modifiedFileCount":"3","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2008-09-17 23:11:28","codes":[{"authorDate":"2008-09-15 17:54:06","commitOrder":8,"curCode":"    static boolean matchPatternStart(String[] patDirs, String[] strDirs,\n                                     boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = patDirs.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = patDirs[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n\n        \r\n        \r\n        \r\n        if (strIdxStart > strIdxEnd) {\n            \r\n            return true;\n        } else if (patIdxStart > patIdxEnd) {\n            \r\n            return false;\n        } else {\n            \r\n            \r\n            return true;\n        }\n    }\n","date":"2008-09-15 17:54:06","endLine":171,"groupId":"3001","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"matchPatternStart","params":"(String[]patDirs@String[]strDirs@booleanisCaseSensitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7a/6da092a6f2b88389cb915fd09358dc003247a8.src","preCode":"    static boolean matchPatternStart(String[] patDirs, String[] strDirs,\n                                     boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = patDirs.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = patDirs[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n\n        \r\n        \r\n        \r\n        if (strIdxStart > strIdxEnd) {\n            \r\n            return true;\n        } else if (patIdxStart > patIdxEnd) {\n            \r\n            return false;\n        } else {\n            \r\n            \r\n            return true;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"N"},{"authorDate":"2008-09-17 23:11:28","commitOrder":8,"curCode":"    static boolean matchPath(String[] tokenizedPattern, String[] strDirs,\n                             boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = tokenizedPattern.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            if (patIdxStart > patIdxEnd) {\n                \r\n                return false;\n            }\n        }\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxEnd];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxEnd], isCaseSensitive)) {\n                return false;\n            }\n            patIdxEnd--;\n            strIdxEnd--;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n            int patIdxTmp = -1;\n            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {\n                if (tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    patIdxTmp = i;\n                    break;\n                }\n            }\n            if (patIdxTmp == patIdxStart + 1) {\n                \r\n                patIdxStart++;\n                continue;\n            }\n            \r\n            \r\n            int patLength = (patIdxTmp - patIdxStart - 1);\n            int strLength = (strIdxEnd - strIdxStart + 1);\n            int foundIdx = -1;\n            strLoop:\n                        for (int i = 0; i <= strLength - patLength; i++) {\n                            for (int j = 0; j < patLength; j++) {\n                                String subPat = tokenizedPattern[patIdxStart + j + 1];\n                                String subStr = strDirs[strIdxStart + i + j];\n                                if (!match(subPat, subStr, isCaseSensitive)) {\n                                    continue strLoop;\n                                }\n                            }\n\n                            foundIdx = strIdxStart + i;\n                            break;\n                        }\n\n            if (foundIdx == -1) {\n                return false;\n            }\n\n            patIdxStart = patIdxTmp;\n            strIdxStart = foundIdx + patLength;\n        }\n\n        for (int i = patIdxStart; i <= patIdxEnd; i++) {\n            if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n","date":"2008-09-17 23:11:28","endLine":335,"groupId":"6722","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"matchPath","params":"(String[]tokenizedPattern@String[]strDirs@booleanisCaseSensitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/de/40c1d9dacb9668249cb1413768b5ad35ef6ca3.src","preCode":"    static boolean matchPath(String[] tokenizedPattern, String str, boolean isCaseSensitive) {\n        String[] strDirs = tokenizePathAsArray(str);\n\n        int patIdxStart = 0;\n        int patIdxEnd = tokenizedPattern.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            if (patIdxStart > patIdxEnd) {\n                \r\n                return false;\n            }\n        }\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxEnd];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxEnd], isCaseSensitive)) {\n                return false;\n            }\n            patIdxEnd--;\n            strIdxEnd--;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n            int patIdxTmp = -1;\n            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {\n                if (tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    patIdxTmp = i;\n                    break;\n                }\n            }\n            if (patIdxTmp == patIdxStart + 1) {\n                \r\n                patIdxStart++;\n                continue;\n            }\n            \r\n            \r\n            int patLength = (patIdxTmp - patIdxStart - 1);\n            int strLength = (strIdxEnd - strIdxStart + 1);\n            int foundIdx = -1;\n            strLoop:\n                        for (int i = 0; i <= strLength - patLength; i++) {\n                            for (int j = 0; j < patLength; j++) {\n                                String subPat = tokenizedPattern[patIdxStart + j + 1];\n                                String subStr = strDirs[strIdxStart + i + j];\n                                if (!match(subPat, subStr, isCaseSensitive)) {\n                                    continue strLoop;\n                                }\n                            }\n\n                            foundIdx = strIdxStart + i;\n                            break;\n                        }\n\n            if (foundIdx == -1) {\n                return false;\n            }\n\n            patIdxStart = patIdxTmp;\n            strIdxStart = foundIdx + patLength;\n        }\n\n        for (int i = patIdxStart; i <= patIdxEnd; i++) {\n            if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n","realPath":"src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"}],"commitId":"2c4faa154f069f3f69d6c3c95629409a7b8b0cc4","commitMessage":"@@@avoid redundant tokenization. this is almost complete except for non-wildcard include patterns.  will take care of them next.\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@696336 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-09-17 23:11:28","modifiedFileCount":"4","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":9,"curCode":"    static boolean matchPatternStart(String[] patDirs, String[] strDirs,\n                                     boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = patDirs.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = patDirs[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n\n        \r\n        \r\n        \r\n        if (strIdxStart > strIdxEnd) {\n            \r\n            return true;\n        }\n        if (patIdxStart > patIdxEnd) {\n            \r\n            return false;\n        }\n        \r\n        \r\n        return true;\n    }\n","date":"2017-04-13 23:15:22","endLine":170,"groupId":"3001","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"matchPatternStart","params":"(String[]patDirs@String[]strDirs@booleanisCaseSensitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ba/a79bdbfacb2392882c9fec391c3707931e9668.src","preCode":"    static boolean matchPatternStart(String[] patDirs, String[] strDirs,\n                                     boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = patDirs.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = patDirs[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n\n        \r\n        \r\n        \r\n        if (strIdxStart > strIdxEnd) {\n            \r\n            return true;\n        } else if (patIdxStart > patIdxEnd) {\n            \r\n            return false;\n        } else {\n            \r\n            \r\n            return true;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2017-04-13 23:15:22","commitOrder":9,"curCode":"    static boolean matchPath(String[] tokenizedPattern, String[] strDirs,\n                             boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = tokenizedPattern.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        if (patIdxStart > patIdxEnd) {\n            \r\n            return false;\n        }\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxEnd];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxEnd], isCaseSensitive)) {\n                return false;\n            }\n            patIdxEnd--;\n            strIdxEnd--;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n            int patIdxTmp = -1;\n            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {\n                if (tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    patIdxTmp = i;\n                    break;\n                }\n            }\n            if (patIdxTmp == patIdxStart + 1) {\n                \r\n                patIdxStart++;\n                continue;\n            }\n            \r\n            \r\n            int patLength = (patIdxTmp - patIdxStart - 1);\n            int strLength = (strIdxEnd - strIdxStart + 1);\n            int foundIdx = -1;\n            strLoop:\n            for (int i = 0; i <= strLength - patLength; i++) {\n                for (int j = 0; j < patLength; j++) {\n                    String subPat = tokenizedPattern[patIdxStart + j + 1];\n                    String subStr = strDirs[strIdxStart + i + j];\n                    if (!match(subPat, subStr, isCaseSensitive)) {\n                        continue strLoop;\n                    }\n                }\n                foundIdx = strIdxStart + i;\n                break;\n            }\n            if (foundIdx == -1) {\n                return false;\n            }\n\n            patIdxStart = patIdxTmp;\n            strIdxStart = foundIdx + patLength;\n        }\n\n        for (int i = patIdxStart; i <= patIdxEnd; i++) {\n            if (!DEEP_TREE_MATCH.equals(tokenizedPattern[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n","date":"2017-04-13 23:15:22","endLine":320,"groupId":"4724","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"matchPath","params":"(String[]tokenizedPattern@String[]strDirs@booleanisCaseSensitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ba/a79bdbfacb2392882c9fec391c3707931e9668.src","preCode":"    static boolean matchPath(String[] tokenizedPattern, String[] strDirs,\n                             boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = tokenizedPattern.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            if (patIdxStart > patIdxEnd) {\n                \r\n                return false;\n            }\n        }\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxEnd];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxEnd], isCaseSensitive)) {\n                return false;\n            }\n            patIdxEnd--;\n            strIdxEnd--;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n            int patIdxTmp = -1;\n            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {\n                if (tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    patIdxTmp = i;\n                    break;\n                }\n            }\n            if (patIdxTmp == patIdxStart + 1) {\n                \r\n                patIdxStart++;\n                continue;\n            }\n            \r\n            \r\n            int patLength = (patIdxTmp - patIdxStart - 1);\n            int strLength = (strIdxEnd - strIdxStart + 1);\n            int foundIdx = -1;\n            strLoop:\n                        for (int i = 0; i <= strLength - patLength; i++) {\n                            for (int j = 0; j < patLength; j++) {\n                                String subPat = tokenizedPattern[patIdxStart + j + 1];\n                                String subStr = strDirs[strIdxStart + i + j];\n                                if (!match(subPat, subStr, isCaseSensitive)) {\n                                    continue strLoop;\n                                }\n                            }\n\n                            foundIdx = strIdxStart + i;\n                            break;\n                        }\n\n            if (foundIdx == -1) {\n                return false;\n            }\n\n            patIdxStart = patIdxTmp;\n            strIdxStart = foundIdx + patLength;\n        }\n\n        for (int i = patIdxStart; i <= patIdxEnd; i++) {\n            if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n","realPath":"src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"}],"commitId":"b7d1e9bde44cb8e5233d6e70bb96e14cbb2f3e2d","commitMessage":"@@@java 5-8\n","date":"2017-04-13 23:15:22","modifiedFileCount":"609","status":"M","submitter":"Matt Benson"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2018-04-02 02:07:39","commitOrder":10,"curCode":"    static boolean matchPatternStart(String[] patDirs, String[] strDirs,\n                                     boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = patDirs.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = patDirs[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n\n        \r\n        return strIdxStart > strIdxEnd || patIdxStart <= patIdxEnd;\n    }\n","date":"2018-04-02 02:07:39","endLine":158,"groupId":"3001","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"matchPatternStart","params":"(String[]patDirs@String[]strDirs@booleanisCaseSensitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/bf/a3b169f66bda38fa16be439e257ac123c9e4cc.src","preCode":"    static boolean matchPatternStart(String[] patDirs, String[] strDirs,\n                                     boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = patDirs.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = patDirs[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n\n        \r\n        \r\n        \r\n        if (strIdxStart > strIdxEnd) {\n            \r\n            return true;\n        }\n        if (patIdxStart > patIdxEnd) {\n            \r\n            return false;\n        }\n        \r\n        \r\n        return true;\n    }\n","realPath":"src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2017-04-13 23:15:22","commitOrder":10,"curCode":"    static boolean matchPath(String[] tokenizedPattern, String[] strDirs,\n                             boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = tokenizedPattern.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        if (patIdxStart > patIdxEnd) {\n            \r\n            return false;\n        }\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxEnd];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxEnd], isCaseSensitive)) {\n                return false;\n            }\n            patIdxEnd--;\n            strIdxEnd--;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n            int patIdxTmp = -1;\n            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {\n                if (tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    patIdxTmp = i;\n                    break;\n                }\n            }\n            if (patIdxTmp == patIdxStart + 1) {\n                \r\n                patIdxStart++;\n                continue;\n            }\n            \r\n            \r\n            int patLength = (patIdxTmp - patIdxStart - 1);\n            int strLength = (strIdxEnd - strIdxStart + 1);\n            int foundIdx = -1;\n            strLoop:\n            for (int i = 0; i <= strLength - patLength; i++) {\n                for (int j = 0; j < patLength; j++) {\n                    String subPat = tokenizedPattern[patIdxStart + j + 1];\n                    String subStr = strDirs[strIdxStart + i + j];\n                    if (!match(subPat, subStr, isCaseSensitive)) {\n                        continue strLoop;\n                    }\n                }\n                foundIdx = strIdxStart + i;\n                break;\n            }\n            if (foundIdx == -1) {\n                return false;\n            }\n\n            patIdxStart = patIdxTmp;\n            strIdxStart = foundIdx + patLength;\n        }\n\n        for (int i = patIdxStart; i <= patIdxEnd; i++) {\n            if (!DEEP_TREE_MATCH.equals(tokenizedPattern[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n","date":"2017-04-13 23:15:22","endLine":320,"groupId":"4724","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"matchPath","params":"(String[]tokenizedPattern@String[]strDirs@booleanisCaseSensitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ba/a79bdbfacb2392882c9fec391c3707931e9668.src","preCode":"    static boolean matchPath(String[] tokenizedPattern, String[] strDirs,\n                             boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = tokenizedPattern.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        if (patIdxStart > patIdxEnd) {\n            \r\n            return false;\n        }\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxEnd];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxEnd], isCaseSensitive)) {\n                return false;\n            }\n            patIdxEnd--;\n            strIdxEnd--;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n            int patIdxTmp = -1;\n            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {\n                if (tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    patIdxTmp = i;\n                    break;\n                }\n            }\n            if (patIdxTmp == patIdxStart + 1) {\n                \r\n                patIdxStart++;\n                continue;\n            }\n            \r\n            \r\n            int patLength = (patIdxTmp - patIdxStart - 1);\n            int strLength = (strIdxEnd - strIdxStart + 1);\n            int foundIdx = -1;\n            strLoop:\n            for (int i = 0; i <= strLength - patLength; i++) {\n                for (int j = 0; j < patLength; j++) {\n                    String subPat = tokenizedPattern[patIdxStart + j + 1];\n                    String subStr = strDirs[strIdxStart + i + j];\n                    if (!match(subPat, subStr, isCaseSensitive)) {\n                        continue strLoop;\n                    }\n                }\n                foundIdx = strIdxStart + i;\n                break;\n            }\n            if (foundIdx == -1) {\n                return false;\n            }\n\n            patIdxStart = patIdxTmp;\n            strIdxStart = foundIdx + patLength;\n        }\n\n        for (int i = patIdxStart; i <= patIdxEnd; i++) {\n            if (!DEEP_TREE_MATCH.equals(tokenizedPattern[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n","realPath":"src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"N"}],"commitId":"95495d57aa5cca8fc350ebfb10f6d390f40290cb","commitMessage":"@@@Remove extraneous casts and (un)boxing.  tersify logic","date":"2018-04-02 02:07:39","modifiedFileCount":"178","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-11-04 17:02:42","codes":[{"authorDate":"2018-04-02 02:07:39","commitOrder":11,"curCode":"    static boolean matchPatternStart(String[] patDirs, String[] strDirs,\n                                     boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = patDirs.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = patDirs[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n\n        \r\n        return strIdxStart > strIdxEnd || patIdxStart <= patIdxEnd;\n    }\n","date":"2018-04-02 02:07:39","endLine":158,"groupId":"3001","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"matchPatternStart","params":"(String[]patDirs@String[]strDirs@booleanisCaseSensitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/bf/a3b169f66bda38fa16be439e257ac123c9e4cc.src","preCode":"    static boolean matchPatternStart(String[] patDirs, String[] strDirs,\n                                     boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = patDirs.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = patDirs[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n\n        \r\n        return strIdxStart > strIdxEnd || patIdxStart <= patIdxEnd;\n    }\n","realPath":"src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"N"},{"authorDate":"2018-11-04 17:02:42","commitOrder":11,"curCode":"    static boolean matchPath(String[] tokenizedPattern, String[] strDirs,\n                             boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = tokenizedPattern.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        if (patIdxStart > patIdxEnd) {\n            \r\n            return false;\n        }\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxEnd];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxEnd], isCaseSensitive)) {\n                return false;\n            }\n            patIdxEnd--;\n            strIdxEnd--;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n            int patIdxTmp = -1;\n            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {\n                if (tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    patIdxTmp = i;\n                    break;\n                }\n            }\n            if (patIdxTmp == patIdxStart + 1) {\n                \r\n                patIdxStart++;\n                continue;\n            }\n            \r\n            \r\n            int patLength = patIdxTmp - patIdxStart - 1;\n            int strLength = strIdxEnd - strIdxStart + 1;\n            int foundIdx = -1;\n            strLoop:\n            for (int i = 0; i <= strLength - patLength; i++) {\n                for (int j = 0; j < patLength; j++) {\n                    String subPat = tokenizedPattern[patIdxStart + j + 1];\n                    String subStr = strDirs[strIdxStart + i + j];\n                    if (!match(subPat, subStr, isCaseSensitive)) {\n                        continue strLoop;\n                    }\n                }\n                foundIdx = strIdxStart + i;\n                break;\n            }\n            if (foundIdx == -1) {\n                return false;\n            }\n\n            patIdxStart = patIdxTmp;\n            strIdxStart = foundIdx + patLength;\n        }\n\n        for (int i = patIdxStart; i <= patIdxEnd; i++) {\n            if (!DEEP_TREE_MATCH.equals(tokenizedPattern[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n","date":"2018-11-04 17:03:38","endLine":310,"groupId":"4724","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"matchPath","params":"(String[]tokenizedPattern@String[]strDirs@booleanisCaseSensitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/3c/5f9bbbbf17a0e70e1ed09479c3c7f3626efb4f.src","preCode":"    static boolean matchPath(String[] tokenizedPattern, String[] strDirs,\n                             boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = tokenizedPattern.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        if (patIdxStart > patIdxEnd) {\n            \r\n            return false;\n        }\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxEnd];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxEnd], isCaseSensitive)) {\n                return false;\n            }\n            patIdxEnd--;\n            strIdxEnd--;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n            int patIdxTmp = -1;\n            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {\n                if (tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    patIdxTmp = i;\n                    break;\n                }\n            }\n            if (patIdxTmp == patIdxStart + 1) {\n                \r\n                patIdxStart++;\n                continue;\n            }\n            \r\n            \r\n            int patLength = (patIdxTmp - patIdxStart - 1);\n            int strLength = (strIdxEnd - strIdxStart + 1);\n            int foundIdx = -1;\n            strLoop:\n            for (int i = 0; i <= strLength - patLength; i++) {\n                for (int j = 0; j < patLength; j++) {\n                    String subPat = tokenizedPattern[patIdxStart + j + 1];\n                    String subStr = strDirs[strIdxStart + i + j];\n                    if (!match(subPat, subStr, isCaseSensitive)) {\n                        continue strLoop;\n                    }\n                }\n                foundIdx = strIdxStart + i;\n                break;\n            }\n            if (foundIdx == -1) {\n                return false;\n            }\n\n            patIdxStart = patIdxTmp;\n            strIdxStart = foundIdx + patLength;\n        }\n\n        for (int i = patIdxStart; i <= patIdxEnd; i++) {\n            if (!DEEP_TREE_MATCH.equals(tokenizedPattern[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n","realPath":"src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"}],"commitId":"e2dd6ec79a083901907e35ac4f0cd3631e71ec55","commitMessage":"@@@SonarQube: unnecessary parentheses is a major code smell","date":"2018-11-04 17:03:38","modifiedFileCount":"40","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-11-05 02:45:48","codes":[{"authorDate":"2018-04-02 02:07:39","commitOrder":12,"curCode":"    static boolean matchPatternStart(String[] patDirs, String[] strDirs,\n                                     boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = patDirs.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = patDirs[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n\n        \r\n        return strIdxStart > strIdxEnd || patIdxStart <= patIdxEnd;\n    }\n","date":"2018-04-02 02:07:39","endLine":158,"groupId":"12552","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"matchPatternStart","params":"(String[]patDirs@String[]strDirs@booleanisCaseSensitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/bf/a3b169f66bda38fa16be439e257ac123c9e4cc.src","preCode":"    static boolean matchPatternStart(String[] patDirs, String[] strDirs,\n                                     boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = patDirs.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = patDirs[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n\n        \r\n        return strIdxStart > strIdxEnd || patIdxStart <= patIdxEnd;\n    }\n","realPath":"src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"N"},{"authorDate":"2018-11-05 02:45:48","commitOrder":12,"curCode":"    static boolean matchPath(String[] tokenizedPattern, String[] strDirs,\n                             boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = tokenizedPattern.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        if (patIdxStart > patIdxEnd) {\n            \r\n            return false;\n        }\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxEnd];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxEnd], isCaseSensitive)) {\n                return false;\n            }\n            patIdxEnd--;\n            strIdxEnd--;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n            int patIdxTmp = -1;\n            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {\n                if (tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    patIdxTmp = i;\n                    break;\n                }\n            }\n            if (patIdxTmp == patIdxStart + 1) {\n                \r\n                patIdxStart++;\n                continue;\n            }\n            \r\n            \r\n            int patLength = (patIdxTmp - patIdxStart - 1);\n            int strLength = (strIdxEnd - strIdxStart + 1);\n            int foundIdx = -1;\n            strLoop:\n            for (int i = 0; i <= strLength - patLength; i++) {\n                for (int j = 0; j < patLength; j++) {\n                    String subPat = tokenizedPattern[patIdxStart + j + 1];\n                    String subStr = strDirs[strIdxStart + i + j];\n                    if (!match(subPat, subStr, isCaseSensitive)) {\n                        continue strLoop;\n                    }\n                }\n                foundIdx = strIdxStart + i;\n                break;\n            }\n            if (foundIdx == -1) {\n                return false;\n            }\n\n            patIdxStart = patIdxTmp;\n            strIdxStart = foundIdx + patLength;\n        }\n\n        for (int i = patIdxStart; i <= patIdxEnd; i++) {\n            if (!DEEP_TREE_MATCH.equals(tokenizedPattern[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n","date":"2018-11-05 02:45:48","endLine":310,"groupId":"12552","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"matchPath","params":"(String[]tokenizedPattern@String[]strDirs@booleanisCaseSensitive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f8/aba1d006ac23d1496c332fab1f2d9377cd57f1.src","preCode":"    static boolean matchPath(String[] tokenizedPattern, String[] strDirs,\n                             boolean isCaseSensitive) {\n        int patIdxStart = 0;\n        int patIdxEnd = tokenizedPattern.length - 1;\n        int strIdxStart = 0;\n        int strIdxEnd = strDirs.length - 1;\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxStart];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxStart], isCaseSensitive)) {\n                return false;\n            }\n            patIdxStart++;\n            strIdxStart++;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        if (patIdxStart > patIdxEnd) {\n            \r\n            return false;\n        }\n\n        \r\n        while (patIdxStart <= patIdxEnd && strIdxStart <= strIdxEnd) {\n            String patDir = tokenizedPattern[patIdxEnd];\n            if (patDir.equals(DEEP_TREE_MATCH)) {\n                break;\n            }\n            if (!match(patDir, strDirs[strIdxEnd], isCaseSensitive)) {\n                return false;\n            }\n            patIdxEnd--;\n            strIdxEnd--;\n        }\n        if (strIdxStart > strIdxEnd) {\n            \r\n            for (int i = patIdxStart; i <= patIdxEnd; i++) {\n                if (!tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {\n            int patIdxTmp = -1;\n            for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {\n                if (tokenizedPattern[i].equals(DEEP_TREE_MATCH)) {\n                    patIdxTmp = i;\n                    break;\n                }\n            }\n            if (patIdxTmp == patIdxStart + 1) {\n                \r\n                patIdxStart++;\n                continue;\n            }\n            \r\n            \r\n            int patLength = patIdxTmp - patIdxStart - 1;\n            int strLength = strIdxEnd - strIdxStart + 1;\n            int foundIdx = -1;\n            strLoop:\n            for (int i = 0; i <= strLength - patLength; i++) {\n                for (int j = 0; j < patLength; j++) {\n                    String subPat = tokenizedPattern[patIdxStart + j + 1];\n                    String subStr = strDirs[strIdxStart + i + j];\n                    if (!match(subPat, subStr, isCaseSensitive)) {\n                        continue strLoop;\n                    }\n                }\n                foundIdx = strIdxStart + i;\n                break;\n            }\n            if (foundIdx == -1) {\n                return false;\n            }\n\n            patIdxStart = patIdxTmp;\n            strIdxStart = foundIdx + patLength;\n        }\n\n        for (int i = patIdxStart; i <= patIdxEnd; i++) {\n            if (!DEEP_TREE_MATCH.equals(tokenizedPattern[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n","realPath":"src/main/org/apache/tools/ant/types/selectors/SelectorUtils.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"}],"commitId":"551cb55e328281002810714a9059f34f0502c13d","commitMessage":"@@@Revert last 5 commits","date":"2018-11-05 02:45:48","modifiedFileCount":"103","status":"M","submitter":"Gintas Grigelionis"}]
