[{"authorTime":"2006-09-22 03:10:48","codes":[{"authorDate":"2006-09-22 03:10:48","commitOrder":1,"curCode":"    public void testNoPatternAtAll() {\n        GlobPatternMapper m = new GlobPatternMapper();\n        m.setFrom(\"foobar\");\n        m.setTo(\"baz\");\n        assertNull(\"Shouldn\\'t match foobar\", m.mapFileName(\"plonk\"));\n        String[] result = m.mapFileName(\"foobar\");\n        assertNotNull(\"Should match foobar\", result);\n        assertEquals(\"only one result for foobar\", 1, result.length);\n        assertEquals(\"baz\", result[0]);\n    }\n","date":"2006-09-22 03:10:48","endLine":42,"groupId":"8233","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoPatternAtAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/bc/a05b2e38398fa4a8b684a19b93d38fe64a7c7f.src","preCode":"    public void testNoPatternAtAll() {\n        GlobPatternMapper m = new GlobPatternMapper();\n        m.setFrom(\"foobar\");\n        m.setTo(\"baz\");\n        assertNull(\"Shouldn\\'t match foobar\", m.mapFileName(\"plonk\"));\n        String[] result = m.mapFileName(\"foobar\");\n        assertNotNull(\"Should match foobar\", result);\n        assertEquals(\"only one result for foobar\", 1, result.length);\n        assertEquals(\"baz\", result[0]);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/util/GlobPatternMapperTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"},{"authorDate":"2006-09-22 03:10:48","commitOrder":1,"curCode":"    public void testPreAndPostfix() {\n        GlobPatternMapper m = new GlobPatternMapper();\n        m.setFrom(\"foo*bar\");\n        m.setTo(\"plonk*pling\");\n        assertNull(\"Shouldn\\'t match foo*bar\", m.mapFileName(\"bar.baz\"));\n        String[] result = m.mapFileName(\"foo.bar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foo.bar\", 1, result.length);\n        assertEquals(\"plonk.pling\", result[0]);\n\n        \r\n        result = m.mapFileName(\"foo.baz.bar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foo.baz.bar\", 1, result.length);\n        assertEquals(\"plonk.baz.pling\", result[0]);\n\n        \r\n        result = m.mapFileName(\"foobar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foobar\", 1, result.length);\n        assertEquals(\"plonkpling\", result[0]);\n    }\n","date":"2006-09-22 03:10:48","endLine":97,"groupId":"8233","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreAndPostfix","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/bc/a05b2e38398fa4a8b684a19b93d38fe64a7c7f.src","preCode":"    public void testPreAndPostfix() {\n        GlobPatternMapper m = new GlobPatternMapper();\n        m.setFrom(\"foo*bar\");\n        m.setTo(\"plonk*pling\");\n        assertNull(\"Shouldn\\'t match foo*bar\", m.mapFileName(\"bar.baz\"));\n        String[] result = m.mapFileName(\"foo.bar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foo.bar\", 1, result.length);\n        assertEquals(\"plonk.pling\", result[0]);\n\n        \r\n        result = m.mapFileName(\"foo.baz.bar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foo.baz.bar\", 1, result.length);\n        assertEquals(\"plonk.baz.pling\", result[0]);\n\n        \r\n        result = m.mapFileName(\"foobar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foobar\", 1, result.length);\n        assertEquals(\"plonkpling\", result[0]);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/util/GlobPatternMapperTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"}],"commitId":"73d66d2c6d6e0384fd66eba1f20ef97469c49b18","commitMessage":"@@@Restructuring to allow junit and antunit tests both.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@448636 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-09-22 03:10:48","modifiedFileCount":"0","status":"B","submitter":"Matthew Jason Benson"},{"authorTime":"2018-04-30 00:12:25","codes":[{"authorDate":"2018-04-30 00:12:25","commitOrder":2,"curCode":"    public void testNoPatternAtAll() {\n        m.setFrom(\"foobar\");\n        m.setTo(\"baz\");\n        assertNull(\"Shouldn\\'t match foobar\", m.mapFileName(\"plonk\"));\n        String[] result = m.mapFileName(\"foobar\");\n        assertNotNull(\"Should match foobar\", result);\n        assertEquals(\"only one result for foobar\", 1, result.length);\n        assertEquals(\"baz\", result[0]);\n    }\n","date":"2018-04-30 00:12:25","endLine":50,"groupId":"8233","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNoPatternAtAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e9/fad391f6599ee9525010812708fba8547e9618.src","preCode":"    public void testNoPatternAtAll() {\n        GlobPatternMapper m = new GlobPatternMapper();\n        m.setFrom(\"foobar\");\n        m.setTo(\"baz\");\n        assertNull(\"Shouldn\\'t match foobar\", m.mapFileName(\"plonk\"));\n        String[] result = m.mapFileName(\"foobar\");\n        assertNotNull(\"Should match foobar\", result);\n        assertEquals(\"only one result for foobar\", 1, result.length);\n        assertEquals(\"baz\", result[0]);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/util/GlobPatternMapperTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2018-04-30 00:12:25","commitOrder":2,"curCode":"    public void testPreAndPostfix() {\n        m.setFrom(\"foo*bar\");\n        m.setTo(\"plonk*pling\");\n        assertNull(\"Shouldn\\'t match foo*bar\", m.mapFileName(\"bar.baz\"));\n        String[] result = m.mapFileName(\"foo.bar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foo.bar\", 1, result.length);\n        assertEquals(\"plonk.pling\", result[0]);\n\n        \r\n        result = m.mapFileName(\"foo.baz.bar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foo.baz.bar\", 1, result.length);\n        assertEquals(\"plonk.baz.pling\", result[0]);\n\n        \r\n        result = m.mapFileName(\"foobar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foobar\", 1, result.length);\n        assertEquals(\"plonkpling\", result[0]);\n    }\n","date":"2018-04-30 00:12:25","endLine":105,"groupId":"8233","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreAndPostfix","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e9/fad391f6599ee9525010812708fba8547e9618.src","preCode":"    public void testPreAndPostfix() {\n        GlobPatternMapper m = new GlobPatternMapper();\n        m.setFrom(\"foo*bar\");\n        m.setTo(\"plonk*pling\");\n        assertNull(\"Shouldn\\'t match foo*bar\", m.mapFileName(\"bar.baz\"));\n        String[] result = m.mapFileName(\"foo.bar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foo.bar\", 1, result.length);\n        assertEquals(\"plonk.pling\", result[0]);\n\n        \r\n        result = m.mapFileName(\"foo.baz.bar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foo.baz.bar\", 1, result.length);\n        assertEquals(\"plonk.baz.pling\", result[0]);\n\n        \r\n        result = m.mapFileName(\"foobar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foobar\", 1, result.length);\n        assertEquals(\"plonkpling\", result[0]);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/util/GlobPatternMapperTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"6589c7b1f3ee173351d2b9c1effc68d34390bef6","commitMessage":"@@@Extract fixtures","date":"2018-04-30 00:12:25","modifiedFileCount":"2","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2020-07-29 20:13:37","codes":[{"authorDate":"2020-07-29 20:13:37","commitOrder":3,"curCode":"    public void testNoPatternAtAll() {\n        m.setFrom(\"foobar\");\n        m.setTo(\"baz\");\n        assertNull(\"Shouldn't match foobar\", m.mapFileName(\"plonk\"));\n        String[] result = m.mapFileName(\"foobar\");\n        assertNotNull(\"Should match foobar\", result);\n        assertEquals(\"only one result for foobar\", 1, result.length);\n        assertEquals(\"baz\", result[0]);\n    }\n","date":"2020-07-29 20:13:37","endLine":50,"groupId":"10320","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testNoPatternAtAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/eb/9dc3a0b2bf7fa0493d8610a95224af813de8f1.src","preCode":"    public void testNoPatternAtAll() {\n        m.setFrom(\"foobar\");\n        m.setTo(\"baz\");\n        assertNull(\"Shouldn\\'t match foobar\", m.mapFileName(\"plonk\"));\n        String[] result = m.mapFileName(\"foobar\");\n        assertNotNull(\"Should match foobar\", result);\n        assertEquals(\"only one result for foobar\", 1, result.length);\n        assertEquals(\"baz\", result[0]);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/util/GlobPatternMapperTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2020-07-29 20:13:37","commitOrder":3,"curCode":"    public void testPreAndPostfix() {\n        m.setFrom(\"foo*bar\");\n        m.setTo(\"plonk*pling\");\n        assertNull(\"Shouldn't match foo*bar\", m.mapFileName(\"bar.baz\"));\n        String[] result = m.mapFileName(\"foo.bar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foo.bar\", 1, result.length);\n        assertEquals(\"plonk.pling\", result[0]);\n\n        \r\n        result = m.mapFileName(\"foo.baz.bar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foo.baz.bar\", 1, result.length);\n        assertEquals(\"plonk.baz.pling\", result[0]);\n\n        \r\n        result = m.mapFileName(\"foobar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foobar\", 1, result.length);\n        assertEquals(\"plonkpling\", result[0]);\n    }\n","date":"2020-07-29 20:13:37","endLine":105,"groupId":"10320","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testPreAndPostfix","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/eb/9dc3a0b2bf7fa0493d8610a95224af813de8f1.src","preCode":"    public void testPreAndPostfix() {\n        m.setFrom(\"foo*bar\");\n        m.setTo(\"plonk*pling\");\n        assertNull(\"Shouldn\\'t match foo*bar\", m.mapFileName(\"bar.baz\"));\n        String[] result = m.mapFileName(\"foo.bar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foo.bar\", 1, result.length);\n        assertEquals(\"plonk.pling\", result[0]);\n\n        \r\n        result = m.mapFileName(\"foo.baz.bar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foo.baz.bar\", 1, result.length);\n        assertEquals(\"plonk.baz.pling\", result[0]);\n\n        \r\n        result = m.mapFileName(\"foobar\");\n        assertNotNull(\"Should match foo*bar\", result);\n        assertEquals(\"only one result for foobar\", 1, result.length);\n        assertEquals(\"plonkpling\", result[0]);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/util/GlobPatternMapperTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"1a13b690bc065c957829f3d98218c5fc2b778c4a","commitMessage":"@@@Merge pull request #123 from twogee/useless-escape\n\nSuperfluous escapes","date":"2020-07-29 20:13:37","modifiedFileCount":"36","status":"M","submitter":"Stefan Bodewig"}]
