[{"authorTime":"2005-03-05 06:31:40","codes":[{"authorDate":"2009-08-27 18:14:07","commitOrder":4,"curCode":"        private void checkIncludePatterns() {\n\n            Hashtable newroots = new Hashtable();\n            \r\n            \r\n            for (int icounter = 0; icounter < includes.length; icounter++) {\n                String newpattern =\n                    SelectorUtils.rtrimWildcardTokens(includes[icounter]);\n                newroots.put(newpattern, includes[icounter]);\n            }\n            if (task.getRemotedir() == null) {\n                try {\n                    task.setRemotedir(ftp.printWorkingDirectory());\n                } catch (IOException e) {\n                    throw new BuildException(\"could not read current ftp directory\",\n                                             task.getLocation());\n                }\n            }\n            AntFTPFile baseFTPFile = new AntFTPRootFile(ftp, task.getRemotedir());\n            rootPath = baseFTPFile.getAbsolutePath();\n            \r\n            if (newroots.containsKey(\"\")) {\n                \r\n                scandir(rootPath, \"\", true);\n            } else {\n                \r\n                \r\n                Enumeration enum2 = newroots.keys();\n\n                while (enum2.hasMoreElements()) {\n                    String currentelement = (String) enum2.nextElement();\n                    String originalpattern = (String) newroots.get(currentelement);\n                    AntFTPFile myfile = new AntFTPFile(baseFTPFile, currentelement);\n                    boolean isOK = true;\n                    boolean traversesSymlinks = false;\n                    String path = null;\n\n                    if (myfile.exists()) {\n                        forceRemoteSensitivityCheck();\n                        if (remoteSensitivityChecked\n                            && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                            \r\n                            \r\n                            path = myfile.getFastRelativePath();\n                        } else {\n                            \r\n                            \r\n                            \r\n                            try {\n                                path = myfile.getRelativePath();\n                                traversesSymlinks = myfile.isTraverseSymlinks();\n                            }  catch (IOException be) {\n                                throw new BuildException(be, task.getLocation());\n                            } catch (BuildException be) {\n                                isOK = false;\n                            }\n                        }\n                    } else {\n                        isOK = false;\n                    }\n                    if (isOK) {\n                        currentelement = path.replace(task.getSeparator().charAt(0), File.separatorChar);\n                        if (!isFollowSymlinks()\n                            && traversesSymlinks) {\n                            continue;\n                        }\n\n                        if (myfile.isDirectory()) {\n                            if (isIncluded(currentelement)\n                                && currentelement.length() > 0) {\n                                accountForIncludedDir(currentelement, myfile, true);\n                            }  else {\n                                if (currentelement.length() > 0) {\n                                    if (currentelement.charAt(currentelement\n                                                              .length() - 1)\n                                        != File.separatorChar) {\n                                        currentelement =\n                                            currentelement + File.separatorChar;\n                                    }\n                                }\n                                scandir(myfile.getAbsolutePath(), currentelement, true);\n                            }\n                        } else {\n                            if (isCaseSensitive\n                                && originalpattern.equals(currentelement)) {\n                                accountForIncludedFile(currentelement);\n                            } else if (!isCaseSensitive\n                                       && originalpattern\n                                       .equalsIgnoreCase(currentelement)) {\n                                accountForIncludedFile(currentelement);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n","date":"2009-08-27 18:14:07","endLine":381,"groupId":"3939","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkIncludePatterns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/3a/490e4782ed37f2c31e237802fb6132e360acca.src","preCode":"        private void checkIncludePatterns() {\n\n            Hashtable newroots = new Hashtable();\n            \r\n            \r\n            for (int icounter = 0; icounter < includes.length; icounter++) {\n                String newpattern =\n                    SelectorUtils.rtrimWildcardTokens(includes[icounter]);\n                newroots.put(newpattern, includes[icounter]);\n            }\n            if (task.getRemotedir() == null) {\n                try {\n                    task.setRemotedir(ftp.printWorkingDirectory());\n                } catch (IOException e) {\n                    throw new BuildException(\"could not read current ftp directory\",\n                                             task.getLocation());\n                }\n            }\n            AntFTPFile baseFTPFile = new AntFTPRootFile(ftp, task.getRemotedir());\n            rootPath = baseFTPFile.getAbsolutePath();\n            \r\n            if (newroots.containsKey(\"\")) {\n                \r\n                scandir(rootPath, \"\", true);\n            } else {\n                \r\n                \r\n                Enumeration enum2 = newroots.keys();\n\n                while (enum2.hasMoreElements()) {\n                    String currentelement = (String) enum2.nextElement();\n                    String originalpattern = (String) newroots.get(currentelement);\n                    AntFTPFile myfile = new AntFTPFile(baseFTPFile, currentelement);\n                    boolean isOK = true;\n                    boolean traversesSymlinks = false;\n                    String path = null;\n\n                    if (myfile.exists()) {\n                        forceRemoteSensitivityCheck();\n                        if (remoteSensitivityChecked\n                            && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                            \r\n                            \r\n                            path = myfile.getFastRelativePath();\n                        } else {\n                            \r\n                            \r\n                            \r\n                            try {\n                                path = myfile.getRelativePath();\n                                traversesSymlinks = myfile.isTraverseSymlinks();\n                            }  catch (IOException be) {\n                                throw new BuildException(be, task.getLocation());\n                            } catch (BuildException be) {\n                                isOK = false;\n                            }\n                        }\n                    } else {\n                        isOK = false;\n                    }\n                    if (isOK) {\n                        currentelement = path.replace(task.getSeparator().charAt(0), File.separatorChar);\n                        if (!isFollowSymlinks()\n                            && traversesSymlinks) {\n                            continue;\n                        }\n\n                        if (myfile.isDirectory()) {\n                            if (isIncluded(currentelement)\n                                && currentelement.length() > 0) {\n                                accountForIncludedDir(currentelement, myfile, true);\n                            }  else {\n                                if (currentelement.length() > 0) {\n                                    if (currentelement.charAt(currentelement\n                                                              .length() - 1)\n                                        != File.separatorChar) {\n                                        currentelement =\n                                            currentelement + File.separatorChar;\n                                    }\n                                }\n                                scandir(myfile.getAbsolutePath(), currentelement, true);\n                            }\n                        } else {\n                            if (isCaseSensitive\n                                && originalpattern.equals(currentelement)) {\n                                accountForIncludedFile(currentelement);\n                            } else if (!isCaseSensitive\n                                       && originalpattern\n                                       .equalsIgnoreCase(currentelement)) {\n                                accountForIncludedFile(currentelement);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"B"},{"authorDate":"2005-03-05 06:31:40","commitOrder":4,"curCode":"        private void checkIncludePatterns() {\n\n            Hashtable newroots = new Hashtable();\n            \r\n            \r\n            for (int icounter = 0; icounter < includes.length; icounter++) {\n                String newpattern =\n                    SelectorUtils.rtrimWildcardTokens(includes[icounter]);\n                newroots.put(newpattern, includes[icounter]);\n            }\n            if (remotedir == null) {\n                try {\n                    remotedir = ftp.printWorkingDirectory();\n                } catch (IOException e) {\n                    throw new BuildException(\"could not read current ftp directory\",\n                        getLocation());\n                }\n            }\n            AntFTPFile baseFTPFile = new AntFTPRootFile(ftp, remotedir);\n            rootPath = baseFTPFile.getAbsolutePath();\n            \r\n            if (newroots.containsKey(\"\")) {\n                \r\n                scandir(rootPath, \"\", true);\n            } else {\n                \r\n                \r\n                Enumeration enum2 = newroots.keys();\n\n                while (enum2.hasMoreElements()) {\n                    String currentelement = (String) enum2.nextElement();\n                    String originalpattern = (String) newroots.get(currentelement);\n                    AntFTPFile myfile = new AntFTPFile(baseFTPFile, currentelement);\n                    boolean isOK = true;\n                    boolean traversesSymlinks = false;\n                    String path = null;\n\n                    if (myfile.exists()) {\n                        forceRemoteSensitivityCheck();\n                        if (remoteSensitivityChecked\n                            && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                            \r\n                            \r\n                            path = myfile.getFastRelativePath();\n                        } else {\n                            \r\n                            \r\n                            \r\n                            try {\n                                path = myfile.getRelativePath();\n                                traversesSymlinks = myfile.isTraverseSymlinks();\n                            }  catch (IOException be) {\n                                throw new BuildException(be, getLocation());\n                            } catch (BuildException be) {\n                                isOK = false;\n                            }\n                        }\n                    } else {\n                        isOK = false;\n                    }\n                    if (isOK) {\n                        currentelement = path.replace(remoteFileSep.charAt(0), File.separatorChar);\n                        if (!isFollowSymlinks()\n                            && traversesSymlinks) {\n                            continue;\n                        }\n\n                        if (myfile.isDirectory()) {\n                            if (isIncluded(currentelement)\n                                && currentelement.length() > 0) {\n                                accountForIncludedDir(currentelement, myfile, true);\n                            }  else {\n                                if (currentelement.length() > 0) {\n                                    if (currentelement.charAt(currentelement\n                                                              .length() - 1)\n                                        != File.separatorChar) {\n                                        currentelement =\n                                            currentelement + File.separatorChar;\n                                    }\n                                }\n                                scandir(myfile.getAbsolutePath(), currentelement, true);\n                            }\n                        } else {\n                            if (isCaseSensitive\n                                && originalpattern.equals(currentelement)) {\n                                accountForIncludedFile(currentelement);\n                            } else if (!isCaseSensitive\n                                       && originalpattern\n                                       .equalsIgnoreCase(currentelement)) {\n                                accountForIncludedFile(currentelement);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n","date":"2005-03-05 06:31:40","endLine":308,"groupId":"2133","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkIncludePatterns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/31/e718e38fc96f6ed0ebdc13ecdf47c03a49f2b6.src","preCode":"        private void checkIncludePatterns() {\n\n            Hashtable newroots = new Hashtable();\n            \r\n            \r\n            for (int icounter = 0; icounter < includes.length; icounter++) {\n                String newpattern =\n                    SelectorUtils.rtrimWildcardTokens(includes[icounter]);\n                newroots.put(newpattern, includes[icounter]);\n            }\n            if (remotedir == null) {\n                try {\n                    remotedir = ftp.printWorkingDirectory();\n                } catch (IOException e) {\n                    throw new BuildException(\"could not read current ftp directory\",\n                        getLocation());\n                }\n            }\n            AntFTPFile baseFTPFile = new AntFTPRootFile(ftp, remotedir);\n            rootPath = baseFTPFile.getAbsolutePath();\n            \r\n            if (newroots.containsKey(\"\")) {\n                \r\n                scandir(rootPath, \"\", true);\n            } else {\n                \r\n                \r\n                Enumeration enum2 = newroots.keys();\n\n                while (enum2.hasMoreElements()) {\n                    String currentelement = (String) enum2.nextElement();\n                    String originalpattern = (String) newroots.get(currentelement);\n                    AntFTPFile myfile = new AntFTPFile(baseFTPFile, currentelement);\n                    boolean isOK = true;\n                    boolean traversesSymlinks = false;\n                    String path = null;\n\n                    if (myfile.exists()) {\n                        forceRemoteSensitivityCheck();\n                        if (remoteSensitivityChecked\n                            && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                            \r\n                            \r\n                            path = myfile.getFastRelativePath();\n                        } else {\n                            \r\n                            \r\n                            \r\n                            try {\n                                path = myfile.getRelativePath();\n                                traversesSymlinks = myfile.isTraverseSymlinks();\n                            }  catch (IOException be) {\n                                throw new BuildException(be, getLocation());\n                            } catch (BuildException be) {\n                                isOK = false;\n                            }\n                        }\n                    } else {\n                        isOK = false;\n                    }\n                    if (isOK) {\n                        currentelement = path.replace(remoteFileSep.charAt(0), File.separatorChar);\n                        if (!isFollowSymlinks()\n                            && traversesSymlinks) {\n                            continue;\n                        }\n\n                        if (myfile.isDirectory()) {\n                            if (isIncluded(currentelement)\n                                && currentelement.length() > 0) {\n                                accountForIncludedDir(currentelement, myfile, true);\n                            }  else {\n                                if (currentelement.length() > 0) {\n                                    if (currentelement.charAt(currentelement\n                                                              .length() - 1)\n                                        != File.separatorChar) {\n                                        currentelement =\n                                            currentelement + File.separatorChar;\n                                    }\n                                }\n                                scandir(myfile.getAbsolutePath(), currentelement, true);\n                            }\n                        } else {\n                            if (isCaseSensitive\n                                && originalpattern.equals(currentelement)) {\n                                accountForIncludedFile(currentelement);\n                            } else if (!isCaseSensitive\n                                       && originalpattern\n                                       .equalsIgnoreCase(currentelement)) {\n                                accountForIncludedFile(currentelement);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"NB"}],"commitId":"d72413184949c04015b452cf9cdf36bf2107061f","commitMessage":"@@@refactored <ftp> so commons-net may be loaded via a separate classloader.  Based on patch by Greg Roodt in PR 45860.  Not really tested.  yet.  therefore I haven't changed defaults.properties so far\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@808350 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-08-27 18:14:07","modifiedFileCount":"3","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":5,"curCode":"        private void checkIncludePatterns() {\n\n            Map<String, String> newroots = new Hashtable<>();\n            \r\n            \r\n            for (int icounter = 0; icounter < includes.length; icounter++) {\n                String newpattern =\n                    SelectorUtils.rtrimWildcardTokens(includes[icounter]);\n                newroots.put(newpattern, includes[icounter]);\n            }\n            if (task.getRemotedir() == null) {\n                try {\n                    task.setRemotedir(ftp.printWorkingDirectory());\n                } catch (IOException e) {\n                    throw new BuildException(\"could not read current ftp directory\",\n                                             task.getLocation());\n                }\n            }\n            AntFTPFile baseFTPFile = new AntFTPRootFile(ftp, task.getRemotedir());\n            rootPath = baseFTPFile.getAbsolutePath();\n            \r\n            if (newroots.containsKey(\"\")) {\n                \r\n                scandir(rootPath, \"\", true);\n            } else {\n                \r\n                \r\n                newroots.forEach(\n                    (k, v) -> scanRoot(new AntFTPFile(baseFTPFile, k), v));\n            }\n        }\n","date":"2017-04-13 23:15:22","endLine":320,"groupId":"3939","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkIncludePatterns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f5/46b230ba9f5fd9068433aa8620bc9d58b1f599.src","preCode":"        private void checkIncludePatterns() {\n\n            Hashtable newroots = new Hashtable();\n            \r\n            \r\n            for (int icounter = 0; icounter < includes.length; icounter++) {\n                String newpattern =\n                    SelectorUtils.rtrimWildcardTokens(includes[icounter]);\n                newroots.put(newpattern, includes[icounter]);\n            }\n            if (task.getRemotedir() == null) {\n                try {\n                    task.setRemotedir(ftp.printWorkingDirectory());\n                } catch (IOException e) {\n                    throw new BuildException(\"could not read current ftp directory\",\n                                             task.getLocation());\n                }\n            }\n            AntFTPFile baseFTPFile = new AntFTPRootFile(ftp, task.getRemotedir());\n            rootPath = baseFTPFile.getAbsolutePath();\n            \r\n            if (newroots.containsKey(\"\")) {\n                \r\n                scandir(rootPath, \"\", true);\n            } else {\n                \r\n                \r\n                Enumeration enum2 = newroots.keys();\n\n                while (enum2.hasMoreElements()) {\n                    String currentelement = (String) enum2.nextElement();\n                    String originalpattern = (String) newroots.get(currentelement);\n                    AntFTPFile myfile = new AntFTPFile(baseFTPFile, currentelement);\n                    boolean isOK = true;\n                    boolean traversesSymlinks = false;\n                    String path = null;\n\n                    if (myfile.exists()) {\n                        forceRemoteSensitivityCheck();\n                        if (remoteSensitivityChecked\n                            && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                            \r\n                            \r\n                            path = myfile.getFastRelativePath();\n                        } else {\n                            \r\n                            \r\n                            \r\n                            try {\n                                path = myfile.getRelativePath();\n                                traversesSymlinks = myfile.isTraverseSymlinks();\n                            }  catch (IOException be) {\n                                throw new BuildException(be, task.getLocation());\n                            } catch (BuildException be) {\n                                isOK = false;\n                            }\n                        }\n                    } else {\n                        isOK = false;\n                    }\n                    if (isOK) {\n                        currentelement = path.replace(task.getSeparator().charAt(0), File.separatorChar);\n                        if (!isFollowSymlinks()\n                            && traversesSymlinks) {\n                            continue;\n                        }\n\n                        if (myfile.isDirectory()) {\n                            if (isIncluded(currentelement)\n                                && currentelement.length() > 0) {\n                                accountForIncludedDir(currentelement, myfile, true);\n                            }  else {\n                                if (currentelement.length() > 0) {\n                                    if (currentelement.charAt(currentelement\n                                                              .length() - 1)\n                                        != File.separatorChar) {\n                                        currentelement =\n                                            currentelement + File.separatorChar;\n                                    }\n                                }\n                                scandir(myfile.getAbsolutePath(), currentelement, true);\n                            }\n                        } else {\n                            if (isCaseSensitive\n                                && originalpattern.equals(currentelement)) {\n                                accountForIncludedFile(currentelement);\n                            } else if (!isCaseSensitive\n                                       && originalpattern\n                                       .equalsIgnoreCase(currentelement)) {\n                                accountForIncludedFile(currentelement);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"},{"authorDate":"2017-04-13 23:15:22","commitOrder":5,"curCode":"        private void checkIncludePatterns() {\n\n            Map<String, String> newroots = new HashMap<>();\n            \r\n            \r\n            for (int icounter = 0; icounter < includes.length; icounter++) {\n                String newpattern =\n                    SelectorUtils.rtrimWildcardTokens(includes[icounter]);\n                newroots.put(newpattern, includes[icounter]);\n            }\n            if (remotedir == null) {\n                try {\n                    remotedir = ftp.printWorkingDirectory();\n                } catch (IOException e) {\n                    throw new BuildException(\"could not read current ftp directory\",\n                                             getLocation());\n                }\n            }\n            AntFTPFile baseFTPFile = new AntFTPRootFile(ftp, remotedir);\n            rootPath = baseFTPFile.getAbsolutePath();\n            \r\n            if (newroots.containsKey(\"\")) {\n                \r\n                scandir(rootPath, \"\", true);\n            } else {\n                \r\n                \r\n                newroots.forEach((k,v) -> scanRoots(baseFTPFile, k, v));\n            }\n        }\n","date":"2017-04-13 23:15:22","endLine":429,"groupId":"2133","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkIncludePatterns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/2a/5239022c4fbbf3e893d2c9ad7a4fcdd809cc5c.src","preCode":"        private void checkIncludePatterns() {\n\n            Hashtable newroots = new Hashtable();\n            \r\n            \r\n            for (int icounter = 0; icounter < includes.length; icounter++) {\n                String newpattern =\n                    SelectorUtils.rtrimWildcardTokens(includes[icounter]);\n                newroots.put(newpattern, includes[icounter]);\n            }\n            if (remotedir == null) {\n                try {\n                    remotedir = ftp.printWorkingDirectory();\n                } catch (IOException e) {\n                    throw new BuildException(\"could not read current ftp directory\",\n                                             getLocation());\n                }\n            }\n            AntFTPFile baseFTPFile = new AntFTPRootFile(ftp, remotedir);\n            rootPath = baseFTPFile.getAbsolutePath();\n            \r\n            if (newroots.containsKey(\"\")) {\n                \r\n                scandir(rootPath, \"\", true);\n            } else {\n                \r\n                \r\n                Enumeration enum2 = newroots.keys();\n\n                while (enum2.hasMoreElements()) {\n                    String currentelement = (String) enum2.nextElement();\n                    String originalpattern = (String) newroots.get(currentelement);\n                    AntFTPFile myfile = new AntFTPFile(baseFTPFile, currentelement);\n                    boolean isOK = true;\n                    boolean traversesSymlinks = false;\n                    String path = null;\n\n                    if (myfile.exists()) {\n                        forceRemoteSensitivityCheck();\n                        if (remoteSensitivityChecked\n                            && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                            \r\n                            \r\n                            path = myfile.getFastRelativePath();\n                        } else {\n                            \r\n                            \r\n                            \r\n                            try {\n                                path = myfile.getRelativePath();\n                                traversesSymlinks = myfile.isTraverseSymlinks();\n                            }  catch (IOException be) {\n                                throw new BuildException(be, getLocation());\n                            } catch (BuildException be) {\n                                isOK = false;\n                            }\n                        }\n                    } else {\n                        isOK = false;\n                    }\n                    if (isOK) {\n                        currentelement = path.replace(remoteFileSep.charAt(0), File.separatorChar);\n                        if (!isFollowSymlinks()\n                            && traversesSymlinks) {\n                            continue;\n                        }\n\n                        if (myfile.isDirectory()) {\n                            if (isIncluded(currentelement)\n                                && currentelement.length() > 0) {\n                                accountForIncludedDir(currentelement, myfile, true);\n                            }  else {\n                                if (currentelement.length() > 0) {\n                                    if (currentelement.charAt(currentelement\n                                                              .length() - 1)\n                                        != File.separatorChar) {\n                                        currentelement =\n                                            currentelement + File.separatorChar;\n                                    }\n                                }\n                                scandir(myfile.getAbsolutePath(), currentelement, true);\n                            }\n                        } else {\n                            if (isCaseSensitive\n                                && originalpattern.equals(currentelement)) {\n                                accountForIncludedFile(currentelement);\n                            } else if (!isCaseSensitive\n                                       && originalpattern\n                                       .equalsIgnoreCase(currentelement)) {\n                                accountForIncludedFile(currentelement);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"}],"commitId":"b7d1e9bde44cb8e5233d6e70bb96e14cbb2f3e2d","commitMessage":"@@@java 5-8\n","date":"2017-04-13 23:15:22","modifiedFileCount":"609","status":"M","submitter":"Matt Benson"},{"authorTime":"2018-04-01 16:26:49","codes":[{"authorDate":"2018-04-01 16:26:49","commitOrder":6,"curCode":"        private void checkIncludePatterns() {\n\n            Map<String, String> newroots = new Hashtable<>();\n            \r\n            \r\n            for (String include : includes) {\n                String newpattern =\n                        SelectorUtils.rtrimWildcardTokens(include);\n                newroots.put(newpattern, include);\n            }\n            if (task.getRemotedir() == null) {\n                try {\n                    task.setRemotedir(ftp.printWorkingDirectory());\n                } catch (IOException e) {\n                    throw new BuildException(\"could not read current ftp directory\",\n                                             task.getLocation());\n                }\n            }\n            AntFTPFile baseFTPFile = new AntFTPRootFile(ftp, task.getRemotedir());\n            rootPath = baseFTPFile.getAbsolutePath();\n            \r\n            if (newroots.containsKey(\"\")) {\n                \r\n                scandir(rootPath, \"\", true);\n            } else {\n                \r\n                \r\n                newroots.forEach(\n                    (k, v) -> scanRoot(new AntFTPFile(baseFTPFile, k), v));\n            }\n        }\n","date":"2018-04-01 16:26:49","endLine":323,"groupId":"10476","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkIncludePatterns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/b6/0bf9514bc2eea0c6093ef137060e37d84b79e9.src","preCode":"        private void checkIncludePatterns() {\n\n            Map<String, String> newroots = new Hashtable<>();\n            \r\n            \r\n            for (int icounter = 0; icounter < includes.length; icounter++) {\n                String newpattern =\n                    SelectorUtils.rtrimWildcardTokens(includes[icounter]);\n                newroots.put(newpattern, includes[icounter]);\n            }\n            if (task.getRemotedir() == null) {\n                try {\n                    task.setRemotedir(ftp.printWorkingDirectory());\n                } catch (IOException e) {\n                    throw new BuildException(\"could not read current ftp directory\",\n                                             task.getLocation());\n                }\n            }\n            AntFTPFile baseFTPFile = new AntFTPRootFile(ftp, task.getRemotedir());\n            rootPath = baseFTPFile.getAbsolutePath();\n            \r\n            if (newroots.containsKey(\"\")) {\n                \r\n                scandir(rootPath, \"\", true);\n            } else {\n                \r\n                \r\n                newroots.forEach(\n                    (k, v) -> scanRoot(new AntFTPFile(baseFTPFile, k), v));\n            }\n        }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"},{"authorDate":"2018-04-01 16:26:49","commitOrder":6,"curCode":"        private void checkIncludePatterns() {\n\n            Map<String, String> newroots = new HashMap<>();\n            \r\n            \r\n            for (String include : includes) {\n                String newpattern\n                        = SelectorUtils.rtrimWildcardTokens(include);\n                newroots.put(newpattern, include);\n            }\n            if (remotedir == null) {\n                try {\n                    remotedir = ftp.printWorkingDirectory();\n                } catch (IOException e) {\n                    throw new BuildException(\"could not read current ftp directory\",\n                                             getLocation());\n                }\n            }\n            AntFTPFile baseFTPFile = new AntFTPRootFile(ftp, remotedir);\n            rootPath = baseFTPFile.getAbsolutePath();\n            \r\n            if (newroots.containsKey(\"\")) {\n                \r\n                scandir(rootPath, \"\", true);\n            } else {\n                \r\n                \r\n                newroots.forEach((k, v) -> scanRoots(baseFTPFile, k, v));\n            }\n        }\n","date":"2018-04-01 16:26:49","endLine":432,"groupId":"10476","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkIncludePatterns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/81/54a1ddc8b4d4f09f6aa355cde822bf57b434d4.src","preCode":"        private void checkIncludePatterns() {\n\n            Map<String, String> newroots = new HashMap<>();\n            \r\n            \r\n            for (int icounter = 0; icounter < includes.length; icounter++) {\n                String newpattern =\n                    SelectorUtils.rtrimWildcardTokens(includes[icounter]);\n                newroots.put(newpattern, includes[icounter]);\n            }\n            if (remotedir == null) {\n                try {\n                    remotedir = ftp.printWorkingDirectory();\n                } catch (IOException e) {\n                    throw new BuildException(\"could not read current ftp directory\",\n                                             getLocation());\n                }\n            }\n            AntFTPFile baseFTPFile = new AntFTPRootFile(ftp, remotedir);\n            rootPath = baseFTPFile.getAbsolutePath();\n            \r\n            if (newroots.containsKey(\"\")) {\n                \r\n                scandir(rootPath, \"\", true);\n            } else {\n                \r\n                \r\n                newroots.forEach((k, v) -> scanRoots(baseFTPFile, k, v));\n            }\n        }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":403,"status":"M"}],"commitId":"1c80d507f496dde98869890e671edf635bef8dec","commitMessage":"@@@Use foreach loops","date":"2018-04-01 16:26:49","modifiedFileCount":"123","status":"M","submitter":"Gintas Grigelionis"}]
