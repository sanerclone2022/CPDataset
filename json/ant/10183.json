[{"authorTime":"2006-09-22 03:10:48","codes":[{"authorDate":"2006-09-22 03:10:48","commitOrder":1,"curCode":"    public void testOrder1() throws IOException, ManifestException {\n        executeTarget(\"testOrder1\");\n\n        Manifest manifest = getManifest(EXPANDED_MANIFEST);\n        Enumeration e = manifest.getSectionNames();\n        String section1 = (String)e.nextElement();\n        String section2 = (String)e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test1\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test2\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = (String)e.nextElement();\n        String attr2Key = (String)e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr1\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr2\", attr2);\n    }\n","date":"2006-09-22 03:10:48","endLine":268,"groupId":"8817","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrder1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/57/57f7cfc637b6104e8f177bfac0807bb0c1d486.src","preCode":"    public void testOrder1() throws IOException, ManifestException {\n        executeTarget(\"testOrder1\");\n\n        Manifest manifest = getManifest(EXPANDED_MANIFEST);\n        Enumeration e = manifest.getSectionNames();\n        String section1 = (String)e.nextElement();\n        String section2 = (String)e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test1\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test2\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = (String)e.nextElement();\n        String attr2Key = (String)e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr1\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr2\", attr2);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"B"},{"authorDate":"2006-09-22 03:10:48","commitOrder":1,"curCode":"    public void testOrder2() throws IOException, ManifestException {\n        executeTarget(\"testOrder2\");\n\n        Manifest manifest = getManifest(EXPANDED_MANIFEST);\n        Enumeration e = manifest.getSectionNames();\n        String section1 = (String)e.nextElement();\n        String section2 = (String)e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test2\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test1\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = (String)e.nextElement();\n        String attr2Key = (String)e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr2\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr1\", attr2);\n    }\n","date":"2006-09-22 03:10:48","endLine":291,"groupId":"8817","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrder2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/57/57f7cfc637b6104e8f177bfac0807bb0c1d486.src","preCode":"    public void testOrder2() throws IOException, ManifestException {\n        executeTarget(\"testOrder2\");\n\n        Manifest manifest = getManifest(EXPANDED_MANIFEST);\n        Enumeration e = manifest.getSectionNames();\n        String section1 = (String)e.nextElement();\n        String section2 = (String)e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test2\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test1\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = (String)e.nextElement();\n        String attr2Key = (String)e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr2\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr1\", attr2);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"B"}],"commitId":"73d66d2c6d6e0384fd66eba1f20ef97469c49b18","commitMessage":"@@@Restructuring to allow junit and antunit tests both.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@448636 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-09-22 03:10:48","modifiedFileCount":"0","status":"B","submitter":"Matthew Jason Benson"},{"authorTime":"2014-04-19 05:00:38","codes":[{"authorDate":"2014-04-19 05:00:38","commitOrder":2,"curCode":"    public void testOrder1() throws IOException, ManifestException {\n        buildRule.executeTarget(\"testOrder1\");\n\n        Manifest manifest = getManifest(EXPANDED_MANIFEST);\n        Enumeration e = manifest.getSectionNames();\n        String section1 = (String)e.nextElement();\n        String section2 = (String)e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test1\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test2\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = (String)e.nextElement();\n        String attr2Key = (String)e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr1\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr2\", attr2);\n    }\n","date":"2014-04-19 05:00:38","endLine":331,"groupId":"8817","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrder1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/72/bce1ba8638b5c238a8254a640ba0b734d6e51c.src","preCode":"    public void testOrder1() throws IOException, ManifestException {\n        executeTarget(\"testOrder1\");\n\n        Manifest manifest = getManifest(EXPANDED_MANIFEST);\n        Enumeration e = manifest.getSectionNames();\n        String section1 = (String)e.nextElement();\n        String section2 = (String)e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test1\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test2\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = (String)e.nextElement();\n        String attr2Key = (String)e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr1\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr2\", attr2);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"M"},{"authorDate":"2014-04-19 05:00:38","commitOrder":2,"curCode":"    public void testOrder2() throws IOException, ManifestException {\n        buildRule.executeTarget(\"testOrder2\");\n\n        Manifest manifest = getManifest(EXPANDED_MANIFEST);\n        Enumeration e = manifest.getSectionNames();\n        String section1 = (String)e.nextElement();\n        String section2 = (String)e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test2\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test1\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = (String)e.nextElement();\n        String attr2Key = (String)e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr2\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr1\", attr2);\n    }\n","date":"2014-04-19 05:00:38","endLine":355,"groupId":"8817","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrder2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/72/bce1ba8638b5c238a8254a640ba0b734d6e51c.src","preCode":"    public void testOrder2() throws IOException, ManifestException {\n        executeTarget(\"testOrder2\");\n\n        Manifest manifest = getManifest(EXPANDED_MANIFEST);\n        Enumeration e = manifest.getSectionNames();\n        String section1 = (String)e.nextElement();\n        String section2 = (String)e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test2\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test1\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = (String)e.nextElement();\n        String attr2Key = (String)e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr2\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr1\", attr2);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"M"}],"commitId":"b61c80746dd5df73899390826e197d2656784f91","commitMessage":"@@@Test improvements: convert to JUnit4.  improved error testing and remove sleeps\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@1588563 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-04-19 05:00:38","modifiedFileCount":"268","status":"M","submitter":"mclarke"},{"authorTime":"2014-07-20 02:52:52","codes":[{"authorDate":"2014-07-20 02:52:52","commitOrder":3,"curCode":"    public void testOrder1() throws IOException, ManifestException {\n        buildRule.executeTarget(\"testOrder1\");\n\n        Manifest manifest = getManifest(expandedManifest);\n        Enumeration e = manifest.getSectionNames();\n        String section1 = (String)e.nextElement();\n        String section2 = (String)e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test1\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test2\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = (String)e.nextElement();\n        String attr2Key = (String)e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr1\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr2\", attr2);\n    }\n","date":"2014-07-20 02:52:52","endLine":333,"groupId":"8817","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrder1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/aa/9432c3ad62590bbd7381e824b1fdf80ea79798.src","preCode":"    public void testOrder1() throws IOException, ManifestException {\n        buildRule.executeTarget(\"testOrder1\");\n\n        Manifest manifest = getManifest(EXPANDED_MANIFEST);\n        Enumeration e = manifest.getSectionNames();\n        String section1 = (String)e.nextElement();\n        String section2 = (String)e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test1\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test2\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = (String)e.nextElement();\n        String attr2Key = (String)e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr1\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr2\", attr2);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"},{"authorDate":"2014-07-20 02:52:52","commitOrder":3,"curCode":"    public void testOrder2() throws IOException, ManifestException {\n        buildRule.executeTarget(\"testOrder2\");\n\n        Manifest manifest = getManifest(expandedManifest);\n        Enumeration e = manifest.getSectionNames();\n        String section1 = (String)e.nextElement();\n        String section2 = (String)e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test2\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test1\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = (String)e.nextElement();\n        String attr2Key = (String)e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr2\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr1\", attr2);\n    }\n","date":"2014-07-20 02:52:52","endLine":357,"groupId":"8817","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrder2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/aa/9432c3ad62590bbd7381e824b1fdf80ea79798.src","preCode":"    public void testOrder2() throws IOException, ManifestException {\n        buildRule.executeTarget(\"testOrder2\");\n\n        Manifest manifest = getManifest(EXPANDED_MANIFEST);\n        Enumeration e = manifest.getSectionNames();\n        String section1 = (String)e.nextElement();\n        String section2 = (String)e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test2\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test1\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = (String)e.nextElement();\n        String attr2Key = (String)e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr2\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr1\", attr2);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"M"}],"commitId":"49d1d98452a7d35d5bbec427a2f7ec1e7718cada","commitMessage":"@@@make ManifestTest write its output to the common tmp-dir\n","date":"2014-07-20 02:52:52","modifiedFileCount":"1","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2018-04-03 01:55:27","codes":[{"authorDate":"2018-04-03 01:55:27","commitOrder":4,"curCode":"    public void testOrder1() throws IOException, ManifestException {\n        buildRule.executeTarget(\"testOrder1\");\n\n        Manifest manifest = getManifest(expandedManifest);\n        Enumeration<String> e = manifest.getSectionNames();\n        String section1 = e.nextElement();\n        String section2 = e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test1\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test2\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = e.nextElement();\n        String attr2Key = e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr1\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr2\", attr2);\n    }\n","date":"2018-04-03 01:55:27","endLine":336,"groupId":"10183","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrder1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/69/0d27e71f33eff3c823561b59736c48ca27feb6.src","preCode":"    public void testOrder1() throws IOException, ManifestException {\n        buildRule.executeTarget(\"testOrder1\");\n\n        Manifest manifest = getManifest(expandedManifest);\n        Enumeration e = manifest.getSectionNames();\n        String section1 = (String) e.nextElement();\n        String section2 = (String) e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test1\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test2\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = (String) e.nextElement();\n        String attr2Key = (String) e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr1\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr2\", attr2);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"},{"authorDate":"2018-04-03 01:55:27","commitOrder":4,"curCode":"    public void testOrder2() throws IOException, ManifestException {\n        buildRule.executeTarget(\"testOrder2\");\n\n        Manifest manifest = getManifest(expandedManifest);\n        Enumeration<String> e = manifest.getSectionNames();\n        String section1 = e.nextElement();\n        String section2 = e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test2\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test1\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = e.nextElement();\n        String attr2Key = e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr2\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr1\", attr2);\n    }\n","date":"2018-04-03 01:55:27","endLine":360,"groupId":"10183","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrder2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/69/0d27e71f33eff3c823561b59736c48ca27feb6.src","preCode":"    public void testOrder2() throws IOException, ManifestException {\n        buildRule.executeTarget(\"testOrder2\");\n\n        Manifest manifest = getManifest(expandedManifest);\n        Enumeration e = manifest.getSectionNames();\n        String section1 = (String) e.nextElement();\n        String section2 = (String) e.nextElement();\n        assertEquals(\"First section name unexpected\", \"Test2\", section1);\n        assertEquals(\"Second section name unexpected\", \"Test1\", section2);\n\n        Manifest.Section section = manifest.getSection(\"Test1\");\n        e = section.getAttributeKeys();\n        String attr1Key = (String) e.nextElement();\n        String attr2Key = (String) e.nextElement();\n        String attr1 = section.getAttribute(attr1Key).getName();\n        String attr2 = section.getAttribute(attr2Key).getName();\n        assertEquals(\"First attribute name unexpected\", \"TestAttr2\", attr1);\n        assertEquals(\"Second attribute name unexpected\", \"TestAttr1\", attr2);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/ManifestTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"}],"commitId":"1c9118e27e66b669d46e1600649b57cc87b5a97c","commitMessage":"@@@Generify","date":"2018-04-03 01:55:27","modifiedFileCount":"21","status":"M","submitter":"Gintas Grigelionis"}]
