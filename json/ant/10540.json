[{"authorTime":"2005-10-12 12:22:37","codes":[{"authorDate":"2005-10-12 12:22:37","commitOrder":1,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        TarEntry entry = null;\n        TarInputStream ti = null;\n\n        try {\n            try {\n                ti = new TarInputStream(src.getInputStream());\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            while ((entry = ti.getNextEntry()) != null) {\n                Resource r = new TarResource(src, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem reading \" + srcFile, ex);\n        } finally {\n            if (ti != null) {\n                try {\n                    ti.close();\n                } catch (IOException ex) {\n                    \r\n                }\n            }\n        }\n    }\n","date":"2005-10-12 12:22:37","endLine":89,"groupId":"2935","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@MapfileEntries@MapmatchFileEntries@MapdirEntries@MapmatchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/c4/c2cd094fb15eb611d38a615211bd2f0fe6e840.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        TarEntry entry = null;\n        TarInputStream ti = null;\n\n        try {\n            try {\n                ti = new TarInputStream(src.getInputStream());\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            while ((entry = ti.getNextEntry()) != null) {\n                Resource r = new TarResource(src, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem reading \" + srcFile, ex);\n        } finally {\n            if (ti != null) {\n                try {\n                    ti.close();\n                } catch (IOException ex) {\n                    \r\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/TarScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2005-10-12 12:22:37","commitOrder":1,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        ZipEntry entry = null;\n        ZipFile zf = null;\n\n        File srcFile = null;\n        if (src instanceof FileResource) {\n            srcFile = ((FileResource) src).getFile();\n        } else {\n            throw new BuildException(\"only file resources are supported\");\n        }\n\n        try {\n            try {\n                zf = new ZipFile(srcFile, encoding);\n            } catch (ZipException ex) {\n                throw new BuildException(\"problem reading \" + srcFile, ex);\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            Enumeration e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                entry = (ZipEntry) e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } finally {\n            if (zf != null) {\n                try {\n                    zf.close();\n                } catch (IOException ex) {\n                    \r\n                }\n            }\n        }\n    }\n","date":"2005-10-12 12:22:37","endLine":102,"groupId":"2398","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@MapfileEntries@MapmatchFileEntries@MapdirEntries@MapmatchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/b9/38010962d7eefe7fd2a7c7146599c8f180555e.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        ZipEntry entry = null;\n        ZipFile zf = null;\n\n        File srcFile = null;\n        if (src instanceof FileResource) {\n            srcFile = ((FileResource) src).getFile();\n        } else {\n            throw new BuildException(\"only file resources are supported\");\n        }\n\n        try {\n            try {\n                zf = new ZipFile(srcFile, encoding);\n            } catch (ZipException ex) {\n                throw new BuildException(\"problem reading \" + srcFile, ex);\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            Enumeration e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                entry = (ZipEntry) e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } finally {\n            if (zf != null) {\n                try {\n                    zf.close();\n                } catch (IOException ex) {\n                    \r\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/ZipScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"}],"commitId":"a96627738decba56e1c94e54fa23ecbd7bfdb9a2","commitMessage":"@@@Now that resources become available in more tasks.  throw in a couple of new resources.  including tarfileset\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@314776 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2005-10-12 12:22:37","modifiedFileCount":"5","status":"B","submitter":"Stefan Bodewig"},{"authorTime":"2007-03-14 11:45:19","codes":[{"authorDate":"2007-03-14 11:45:19","commitOrder":2,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        TarEntry entry = null;\n        TarInputStream ti = null;\n\n        try {\n            try {\n                ti = new TarInputStream(src.getInputStream());\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            while ((entry = ti.getNextEntry()) != null) {\n                Resource r = new TarResource(src, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem reading \" + srcFile, ex);\n        } finally {\n            FileUtils.close(ti);\n        }\n    }\n","date":"2007-03-14 11:45:19","endLine":85,"groupId":"2935","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@MapfileEntries@MapmatchFileEntries@MapdirEntries@MapmatchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/5e/b0d68699b62aaf4cf2bf41c15303f27e5f3d4f.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        TarEntry entry = null;\n        TarInputStream ti = null;\n\n        try {\n            try {\n                ti = new TarInputStream(src.getInputStream());\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            while ((entry = ti.getNextEntry()) != null) {\n                Resource r = new TarResource(src, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem reading \" + srcFile, ex);\n        } finally {\n            if (ti != null) {\n                try {\n                    ti.close();\n                } catch (IOException ex) {\n                    \r\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/TarScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2007-03-14 11:45:19","commitOrder":2,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        ZipEntry entry = null;\n        ZipFile zf = null;\n\n        File srcFile = null;\n        if (src instanceof FileResource) {\n            srcFile = ((FileResource) src).getFile();\n        } else {\n            throw new BuildException(\"only file resources are supported\");\n        }\n\n        try {\n            try {\n                zf = new ZipFile(srcFile, encoding);\n            } catch (ZipException ex) {\n                throw new BuildException(\"problem reading \" + srcFile, ex);\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            Enumeration e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                entry = (ZipEntry) e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } finally {\n            ZipFile.closeQuietly(zf);\n        }\n    }\n","date":"2007-03-14 11:45:19","endLine":98,"groupId":"2398","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@MapfileEntries@MapmatchFileEntries@MapdirEntries@MapmatchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/37/95a420c31b532f3052cd636750bcc85a02e98a.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        ZipEntry entry = null;\n        ZipFile zf = null;\n\n        File srcFile = null;\n        if (src instanceof FileResource) {\n            srcFile = ((FileResource) src).getFile();\n        } else {\n            throw new BuildException(\"only file resources are supported\");\n        }\n\n        try {\n            try {\n                zf = new ZipFile(srcFile, encoding);\n            } catch (ZipException ex) {\n                throw new BuildException(\"problem reading \" + srcFile, ex);\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            Enumeration e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                entry = (ZipEntry) e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } finally {\n            if (zf != null) {\n                try {\n                    zf.close();\n                } catch (IOException ex) {\n                    \r\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/ZipScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"929897d24d6b201420c6416ef23c6a1442c05ecf","commitMessage":"@@@-use quiet close methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@517988 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2007-03-14 11:45:19","modifiedFileCount":"2","status":"M","submitter":"Kevin Jackson"},{"authorTime":"2008-11-02 03:49:37","codes":[{"authorDate":"2007-03-14 11:45:19","commitOrder":3,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        TarEntry entry = null;\n        TarInputStream ti = null;\n\n        try {\n            try {\n                ti = new TarInputStream(src.getInputStream());\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            while ((entry = ti.getNextEntry()) != null) {\n                Resource r = new TarResource(src, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem reading \" + srcFile, ex);\n        } finally {\n            FileUtils.close(ti);\n        }\n    }\n","date":"2007-03-14 11:45:19","endLine":85,"groupId":"2935","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@MapfileEntries@MapmatchFileEntries@MapdirEntries@MapmatchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/5e/b0d68699b62aaf4cf2bf41c15303f27e5f3d4f.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        TarEntry entry = null;\n        TarInputStream ti = null;\n\n        try {\n            try {\n                ti = new TarInputStream(src.getInputStream());\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            while ((entry = ti.getNextEntry()) != null) {\n                Resource r = new TarResource(src, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem reading \" + srcFile, ex);\n        } finally {\n            FileUtils.close(ti);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/TarScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"},{"authorDate":"2008-11-02 03:49:37","commitOrder":3,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        ZipEntry entry = null;\n        ZipFile zf = null;\n\n        File srcFile = null;\n        if (src instanceof FileProvider) {\n            srcFile = ((FileProvider) src).getFile();\n        } else {\n            throw new BuildException(\"Only file provider resources are supported\");\n        }\n\n        try {\n            try {\n                zf = new ZipFile(srcFile, encoding);\n            } catch (ZipException ex) {\n                throw new BuildException(\"Problem reading \" + srcFile, ex);\n            } catch (IOException ex) {\n                throw new BuildException(\"Problem opening \" + srcFile, ex);\n            }\n            Enumeration e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                entry = (ZipEntry) e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } finally {\n            ZipFile.closeQuietly(zf);\n        }\n    }\n","date":"2008-11-02 03:49:37","endLine":98,"groupId":"2398","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@MapfileEntries@MapmatchFileEntries@MapdirEntries@MapmatchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/c1/cef09526312c79b638bcb503b2af724ad03d8e.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        ZipEntry entry = null;\n        ZipFile zf = null;\n\n        File srcFile = null;\n        if (src instanceof FileResource) {\n            srcFile = ((FileResource) src).getFile();\n        } else {\n            throw new BuildException(\"only file resources are supported\");\n        }\n\n        try {\n            try {\n                zf = new ZipFile(srcFile, encoding);\n            } catch (ZipException ex) {\n                throw new BuildException(\"problem reading \" + srcFile, ex);\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            Enumeration e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                entry = (ZipEntry) e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } finally {\n            ZipFile.closeQuietly(zf);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/ZipScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"d6cccd3f5e0038c572ee5cfa6e7402b2730c8e00","commitMessage":"@@@Bug 43348: add awareness of FileProvider to ZipScanner; lets us zip from other places.\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@709763 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-11-02 03:49:37","modifiedFileCount":"1","status":"M","submitter":"Steve Loughran"},{"authorTime":"2008-11-18 05:13:04","codes":[{"authorDate":"2007-03-14 11:45:19","commitOrder":4,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        TarEntry entry = null;\n        TarInputStream ti = null;\n\n        try {\n            try {\n                ti = new TarInputStream(src.getInputStream());\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            while ((entry = ti.getNextEntry()) != null) {\n                Resource r = new TarResource(src, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem reading \" + srcFile, ex);\n        } finally {\n            FileUtils.close(ti);\n        }\n    }\n","date":"2007-03-14 11:45:19","endLine":85,"groupId":"2935","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@MapfileEntries@MapmatchFileEntries@MapdirEntries@MapmatchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/5e/b0d68699b62aaf4cf2bf41c15303f27e5f3d4f.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        TarEntry entry = null;\n        TarInputStream ti = null;\n\n        try {\n            try {\n                ti = new TarInputStream(src.getInputStream());\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            while ((entry = ti.getNextEntry()) != null) {\n                Resource r = new TarResource(src, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem reading \" + srcFile, ex);\n        } finally {\n            FileUtils.close(ti);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/TarScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"},{"authorDate":"2008-11-18 05:13:04","commitOrder":4,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        ZipEntry entry = null;\n        ZipFile zf = null;\n\n        File srcFile = null;\n        FileProvider fp = (FileProvider) src.as(FileProvider.class);\n        if (fp != null) {\n            srcFile = fp.getFile();\n        } else {\n            throw new BuildException(\"Only file provider resources are supported\");\n        }\n\n        try {\n            try {\n                zf = new ZipFile(srcFile, encoding);\n            } catch (ZipException ex) {\n                throw new BuildException(\"Problem reading \" + srcFile, ex);\n            } catch (IOException ex) {\n                throw new BuildException(\"Problem opening \" + srcFile, ex);\n            }\n            Enumeration e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                entry = (ZipEntry) e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } finally {\n            ZipFile.closeQuietly(zf);\n        }\n    }\n","date":"2008-11-18 05:13:04","endLine":99,"groupId":"2398","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@MapfileEntries@MapmatchFileEntries@MapdirEntries@MapmatchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/45/3d51f399093659256a8248385cfa4f989d0698.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        ZipEntry entry = null;\n        ZipFile zf = null;\n\n        File srcFile = null;\n        if (src instanceof FileProvider) {\n            srcFile = ((FileProvider) src).getFile();\n        } else {\n            throw new BuildException(\"Only file provider resources are supported\");\n        }\n\n        try {\n            try {\n                zf = new ZipFile(srcFile, encoding);\n            } catch (ZipException ex) {\n                throw new BuildException(\"Problem reading \" + srcFile, ex);\n            } catch (IOException ex) {\n                throw new BuildException(\"Problem opening \" + srcFile, ex);\n            }\n            Enumeration e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                entry = (ZipEntry) e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } finally {\n            ZipFile.closeQuietly(zf);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/ZipScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"edb0dd9582a26bb899aa970735f93049c61d7ce7","commitMessage":"@@@use adapter instead of instanceof checks\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@718387 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-11-18 05:13:04","modifiedFileCount":"31","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2012-04-17 03:30:18","codes":[{"authorDate":"2007-03-14 11:45:19","commitOrder":5,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        TarEntry entry = null;\n        TarInputStream ti = null;\n\n        try {\n            try {\n                ti = new TarInputStream(src.getInputStream());\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            while ((entry = ti.getNextEntry()) != null) {\n                Resource r = new TarResource(src, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem reading \" + srcFile, ex);\n        } finally {\n            FileUtils.close(ti);\n        }\n    }\n","date":"2007-03-14 11:45:19","endLine":85,"groupId":"2935","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@MapfileEntries@MapmatchFileEntries@MapdirEntries@MapmatchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/5e/b0d68699b62aaf4cf2bf41c15303f27e5f3d4f.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        TarEntry entry = null;\n        TarInputStream ti = null;\n\n        try {\n            try {\n                ti = new TarInputStream(src.getInputStream());\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            while ((entry = ti.getNextEntry()) != null) {\n                Resource r = new TarResource(src, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem reading \" + srcFile, ex);\n        } finally {\n            FileUtils.close(ti);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/TarScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"},{"authorDate":"2012-04-17 03:30:18","commitOrder":5,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        ZipEntry entry = null;\n        ZipFile zf = null;\n\n        File srcFile = null;\n        FileProvider fp = src.as(FileProvider.class);\n        if (fp != null) {\n            srcFile = fp.getFile();\n        } else {\n            throw new BuildException(\"Only file provider resources are supported\");\n        }\n\n        try {\n            try {\n                zf = new ZipFile(srcFile, encoding);\n            } catch (ZipException ex) {\n                throw new BuildException(\"Problem reading \" + srcFile, ex);\n            } catch (IOException ex) {\n                throw new BuildException(\"Problem opening \" + srcFile, ex);\n            }\n            Enumeration e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                entry = (ZipEntry) e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } finally {\n            ZipFile.closeQuietly(zf);\n        }\n    }\n","date":"2012-04-17 03:30:18","endLine":98,"groupId":"2398","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@MapfileEntries@MapmatchFileEntries@MapdirEntries@MapmatchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/30/11bef2bf872fc00bbfb44a79f02b17af6847df.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        ZipEntry entry = null;\n        ZipFile zf = null;\n\n        File srcFile = null;\n        FileProvider fp = (FileProvider) src.as(FileProvider.class);\n        if (fp != null) {\n            srcFile = fp.getFile();\n        } else {\n            throw new BuildException(\"Only file provider resources are supported\");\n        }\n\n        try {\n            try {\n                zf = new ZipFile(srcFile, encoding);\n            } catch (ZipException ex) {\n                throw new BuildException(\"Problem reading \" + srcFile, ex);\n            } catch (IOException ex) {\n                throw new BuildException(\"Problem opening \" + srcFile, ex);\n            }\n            Enumeration e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                entry = (ZipEntry) e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } finally {\n            ZipFile.closeQuietly(zf);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/ZipScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"ea33301047ba2de74fa062155df4d6337e5d1392","commitMessage":"@@@#52829: ResourceCollection now Iterable<Resource>.\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@1326760 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-04-17 03:30:18","modifiedFileCount":"81","status":"M","submitter":"Jesse N. Glick"},{"authorTime":"2012-08-22 20:32:43","codes":[{"authorDate":"2012-08-22 20:32:43","commitOrder":6,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n\n        TarEntry entry = null;\n        TarInputStream ti = null;\n\n        try {\n            try {\n                ti = new TarInputStream(src.getInputStream());\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            while ((entry = ti.getNextEntry()) != null) {\n                Resource r = new TarResource(src, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem reading \" + srcFile, ex);\n        } finally {\n            FileUtils.close(ti);\n        }\n    }\n","date":"2012-08-22 20:32:43","endLine":86,"groupId":"2935","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@Map<String@Resource>fileEntries@Map<String@Resource>matchFileEntries@Map<String@Resource>dirEntries@Map<String@Resource>matchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/1b/ac2f404cb9f0113e0c82379b6cc5a709d237aa.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        TarEntry entry = null;\n        TarInputStream ti = null;\n\n        try {\n            try {\n                ti = new TarInputStream(src.getInputStream());\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            while ((entry = ti.getNextEntry()) != null) {\n                Resource r = new TarResource(src, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem reading \" + srcFile, ex);\n        } finally {\n            FileUtils.close(ti);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/TarScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2012-08-22 20:32:43","commitOrder":6,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n        ZipEntry entry = null;\n        ZipFile zf = null;\n\n        File srcFile = null;\n        FileProvider fp = src.as(FileProvider.class);\n        if (fp != null) {\n            srcFile = fp.getFile();\n        } else {\n            throw new BuildException(\"Only file provider resources are supported\");\n        }\n\n        try {\n            try {\n                zf = new ZipFile(srcFile, encoding);\n            } catch (ZipException ex) {\n                throw new BuildException(\"Problem reading \" + srcFile, ex);\n            } catch (IOException ex) {\n                throw new BuildException(\"Problem opening \" + srcFile, ex);\n            }\n            Enumeration<ZipEntry> e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                entry = e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } finally {\n            ZipFile.closeQuietly(zf);\n        }\n    }\n","date":"2012-08-22 20:32:43","endLine":98,"groupId":"6621","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@Map<String@Resource>fileEntries@Map<String@Resource>matchFileEntries@Map<String@Resource>dirEntries@Map<String@Resource>matchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/d0/f7193f86730f86d6d35a0a440d11791ac1e1b6.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n                                       Map fileEntries, Map matchFileEntries,\n                                       Map dirEntries, Map matchDirEntries) {\n        ZipEntry entry = null;\n        ZipFile zf = null;\n\n        File srcFile = null;\n        FileProvider fp = src.as(FileProvider.class);\n        if (fp != null) {\n            srcFile = fp.getFile();\n        } else {\n            throw new BuildException(\"Only file provider resources are supported\");\n        }\n\n        try {\n            try {\n                zf = new ZipFile(srcFile, encoding);\n            } catch (ZipException ex) {\n                throw new BuildException(\"Problem reading \" + srcFile, ex);\n            } catch (IOException ex) {\n                throw new BuildException(\"Problem opening \" + srcFile, ex);\n            }\n            Enumeration e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                entry = (ZipEntry) e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } finally {\n            ZipFile.closeQuietly(zf);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/ZipScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"9caeed5081071d6a2de28844d0a724918f8c6d86","commitMessage":"@@@Java 1.5.  continued\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@1376015 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-08-22 20:32:43","modifiedFileCount":"89","status":"M","submitter":"Matthew Jason Benson"},{"authorTime":"2012-08-22 20:32:43","codes":[{"authorDate":"2015-04-22 03:36:07","commitOrder":7,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n\n        TarEntry entry = null;\n        TarInputStream ti = null;\n\n        try {\n            try {\n                ti = new TarInputStream(src.getInputStream(), encoding);\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            while ((entry = ti.getNextEntry()) != null) {\n                Resource r = new TarResource(src, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem reading \" + srcFile, ex);\n        } finally {\n            FileUtils.close(ti);\n        }\n    }\n","date":"2015-04-22 03:36:07","endLine":86,"groupId":"2935","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@Map<String@Resource>fileEntries@Map<String@Resource>matchFileEntries@Map<String@Resource>dirEntries@Map<String@Resource>matchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/a3/c7f6d521abb3c53e9541a61e0d8f793782d3ee.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n\n        TarEntry entry = null;\n        TarInputStream ti = null;\n\n        try {\n            try {\n                ti = new TarInputStream(src.getInputStream());\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            while ((entry = ti.getNextEntry()) != null) {\n                Resource r = new TarResource(src, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem reading \" + srcFile, ex);\n        } finally {\n            FileUtils.close(ti);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/TarScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2012-08-22 20:32:43","commitOrder":7,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n        ZipEntry entry = null;\n        ZipFile zf = null;\n\n        File srcFile = null;\n        FileProvider fp = src.as(FileProvider.class);\n        if (fp != null) {\n            srcFile = fp.getFile();\n        } else {\n            throw new BuildException(\"Only file provider resources are supported\");\n        }\n\n        try {\n            try {\n                zf = new ZipFile(srcFile, encoding);\n            } catch (ZipException ex) {\n                throw new BuildException(\"Problem reading \" + srcFile, ex);\n            } catch (IOException ex) {\n                throw new BuildException(\"Problem opening \" + srcFile, ex);\n            }\n            Enumeration<ZipEntry> e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                entry = e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } finally {\n            ZipFile.closeQuietly(zf);\n        }\n    }\n","date":"2012-08-22 20:32:43","endLine":98,"groupId":"6621","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@Map<String@Resource>fileEntries@Map<String@Resource>matchFileEntries@Map<String@Resource>dirEntries@Map<String@Resource>matchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/d0/f7193f86730f86d6d35a0a440d11791ac1e1b6.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n        ZipEntry entry = null;\n        ZipFile zf = null;\n\n        File srcFile = null;\n        FileProvider fp = src.as(FileProvider.class);\n        if (fp != null) {\n            srcFile = fp.getFile();\n        } else {\n            throw new BuildException(\"Only file provider resources are supported\");\n        }\n\n        try {\n            try {\n                zf = new ZipFile(srcFile, encoding);\n            } catch (ZipException ex) {\n                throw new BuildException(\"Problem reading \" + srcFile, ex);\n            } catch (IOException ex) {\n                throw new BuildException(\"Problem opening \" + srcFile, ex);\n            }\n            Enumeration<ZipEntry> e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                entry = e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } finally {\n            ZipFile.closeQuietly(zf);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/ZipScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"}],"commitId":"1a584200e27de7867d7f613ff9c910dc0cc9730a","commitMessage":"@@@Add encoding attributes to <tar>.  <untar> and <tarfileset>\n\nThis is a workaround for Bugzilla Issue 57822\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=57822\n","date":"2015-04-22 03:36:07","modifiedFileCount":"8","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":8,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n\n        try (TarInputStream ti = new TarInputStream(src.getInputStream(), encoding)) {\n            try {\n                TarEntry entry = null;\n                while ((entry = ti.getNextEntry()) != null) {\n                    Resource r = new TarResource(src, entry);\n                    String name = entry.getName();\n                    if (entry.isDirectory()) {\n                        name = trimSeparator(name);\n                        dirEntries.put(name, r);\n                        if (match(name)) {\n                            matchDirEntries.put(name, r);\n                        }\n                    } else {\n                        fileEntries.put(name, r);\n                        if (match(name)) {\n                            matchFileEntries.put(name, r);\n                        }\n                    }\n                }\n            } catch (IOException ex) {\n                throw new BuildException(\"problem reading \" + srcFile, ex);\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem opening \" + srcFile, ex);\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":80,"groupId":"2935","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@Map<String@Resource>fileEntries@Map<String@Resource>matchFileEntries@Map<String@Resource>dirEntries@Map<String@Resource>matchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f5/b3a3936767d376a815bb57f453a9c7beb241c6.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n\n        TarEntry entry = null;\n        TarInputStream ti = null;\n\n        try {\n            try {\n                ti = new TarInputStream(src.getInputStream(), encoding);\n            } catch (IOException ex) {\n                throw new BuildException(\"problem opening \" + srcFile, ex);\n            }\n            while ((entry = ti.getNextEntry()) != null) {\n                Resource r = new TarResource(src, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem reading \" + srcFile, ex);\n        } finally {\n            FileUtils.close(ti);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/TarScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2017-04-13 23:15:22","commitOrder":8,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n\n        File srcFile = src.asOptional(FileProvider.class)\n            .map(FileProvider::getFile).orElseThrow(() -> new BuildException(\n                \"Only file provider resources are supported\"));\n        \n        try (ZipFile zf = new ZipFile(srcFile, encoding)) {\n\n            Enumeration<ZipEntry> e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                ZipEntry entry = e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (ZipException ex) {\n            throw new BuildException(\"Problem reading \" + srcFile, ex);\n        } catch (IOException ex) {\n            throw new BuildException(\"Problem opening \" + srcFile, ex);\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":89,"groupId":"2935","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@Map<String@Resource>fileEntries@Map<String@Resource>matchFileEntries@Map<String@Resource>dirEntries@Map<String@Resource>matchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/49/f66ebd952385df5c7aa298e3d888f5ea4a1dcf.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n        ZipEntry entry = null;\n        ZipFile zf = null;\n\n        File srcFile = null;\n        FileProvider fp = src.as(FileProvider.class);\n        if (fp != null) {\n            srcFile = fp.getFile();\n        } else {\n            throw new BuildException(\"Only file provider resources are supported\");\n        }\n\n        try {\n            try {\n                zf = new ZipFile(srcFile, encoding);\n            } catch (ZipException ex) {\n                throw new BuildException(\"Problem reading \" + srcFile, ex);\n            } catch (IOException ex) {\n                throw new BuildException(\"Problem opening \" + srcFile, ex);\n            }\n            Enumeration<ZipEntry> e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                entry = e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } finally {\n            ZipFile.closeQuietly(zf);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/ZipScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"b7d1e9bde44cb8e5233d6e70bb96e14cbb2f3e2d","commitMessage":"@@@java 5-8\n","date":"2017-04-13 23:15:22","modifiedFileCount":"609","status":"M","submitter":"Matt Benson"},{"authorTime":"2018-05-17 00:32:03","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":9,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n\n        try (TarInputStream ti = new TarInputStream(src.getInputStream(), encoding)) {\n            try {\n                TarEntry entry = null;\n                while ((entry = ti.getNextEntry()) != null) {\n                    Resource r = new TarResource(src, entry);\n                    String name = entry.getName();\n                    if (entry.isDirectory()) {\n                        name = trimSeparator(name);\n                        dirEntries.put(name, r);\n                        if (match(name)) {\n                            matchDirEntries.put(name, r);\n                        }\n                    } else {\n                        fileEntries.put(name, r);\n                        if (match(name)) {\n                            matchFileEntries.put(name, r);\n                        }\n                    }\n                }\n            } catch (IOException ex) {\n                throw new BuildException(\"problem reading \" + srcFile, ex);\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem opening \" + srcFile, ex);\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":80,"groupId":"2935","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@Map<String@Resource>fileEntries@Map<String@Resource>matchFileEntries@Map<String@Resource>dirEntries@Map<String@Resource>matchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f5/b3a3936767d376a815bb57f453a9c7beb241c6.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n\n        try (TarInputStream ti = new TarInputStream(src.getInputStream(), encoding)) {\n            try {\n                TarEntry entry = null;\n                while ((entry = ti.getNextEntry()) != null) {\n                    Resource r = new TarResource(src, entry);\n                    String name = entry.getName();\n                    if (entry.isDirectory()) {\n                        name = trimSeparator(name);\n                        dirEntries.put(name, r);\n                        if (match(name)) {\n                            matchDirEntries.put(name, r);\n                        }\n                    } else {\n                        fileEntries.put(name, r);\n                        if (match(name)) {\n                            matchFileEntries.put(name, r);\n                        }\n                    }\n                }\n            } catch (IOException ex) {\n                throw new BuildException(\"problem reading \" + srcFile, ex);\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem opening \" + srcFile, ex);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/TarScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2018-05-17 00:32:03","commitOrder":9,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n\n        File srcFile = src.asOptional(FileProvider.class)\n            .map(FileProvider::getFile).orElseThrow(() -> new BuildException(\n                \"Only file provider resources are supported\"));\n\n        try (ZipFile zf = new ZipFile(srcFile, encoding)) {\n             for (ZipEntry entry : Collections.list(zf.getEntries())) {\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (ZipException ex) {\n            throw new BuildException(\"Problem reading \" + srcFile, ex);\n        } catch (IOException ex) {\n            throw new BuildException(\"Problem opening \" + srcFile, ex);\n        }\n    }\n","date":"2018-05-17 01:13:05","endLine":86,"groupId":"2935","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@Map<String@Resource>fileEntries@Map<String@Resource>matchFileEntries@Map<String@Resource>dirEntries@Map<String@Resource>matchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/56/6715936cd55aa0cf348d863c1b6ac0dc85ac01.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n\n        File srcFile = src.asOptional(FileProvider.class)\n            .map(FileProvider::getFile).orElseThrow(() -> new BuildException(\n                \"Only file provider resources are supported\"));\n\n        try (ZipFile zf = new ZipFile(srcFile, encoding)) {\n\n            Enumeration<ZipEntry> e = zf.getEntries();\n            while (e.hasMoreElements()) {\n                ZipEntry entry = e.nextElement();\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (ZipException ex) {\n            throw new BuildException(\"Problem reading \" + srcFile, ex);\n        } catch (IOException ex) {\n            throw new BuildException(\"Problem opening \" + srcFile, ex);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/ZipScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"070c3bc86f85e8f01cb624fe50ae82f0d11171b2","commitMessage":"@@@Deprecate CollectionUtils and Enumerations;\nreduce explicit use of Enumeration","date":"2018-05-17 01:13:05","modifiedFileCount":"46","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-05-18 02:36:11","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":10,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n\n        try (TarInputStream ti = new TarInputStream(src.getInputStream(), encoding)) {\n            try {\n                TarEntry entry = null;\n                while ((entry = ti.getNextEntry()) != null) {\n                    Resource r = new TarResource(src, entry);\n                    String name = entry.getName();\n                    if (entry.isDirectory()) {\n                        name = trimSeparator(name);\n                        dirEntries.put(name, r);\n                        if (match(name)) {\n                            matchDirEntries.put(name, r);\n                        }\n                    } else {\n                        fileEntries.put(name, r);\n                        if (match(name)) {\n                            matchFileEntries.put(name, r);\n                        }\n                    }\n                }\n            } catch (IOException ex) {\n                throw new BuildException(\"problem reading \" + srcFile, ex);\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem opening \" + srcFile, ex);\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":80,"groupId":"10540","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@Map<String@Resource>fileEntries@Map<String@Resource>matchFileEntries@Map<String@Resource>dirEntries@Map<String@Resource>matchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f5/b3a3936767d376a815bb57f453a9c7beb241c6.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n\n        try (TarInputStream ti = new TarInputStream(src.getInputStream(), encoding)) {\n            try {\n                TarEntry entry = null;\n                while ((entry = ti.getNextEntry()) != null) {\n                    Resource r = new TarResource(src, entry);\n                    String name = entry.getName();\n                    if (entry.isDirectory()) {\n                        name = trimSeparator(name);\n                        dirEntries.put(name, r);\n                        if (match(name)) {\n                            matchDirEntries.put(name, r);\n                        }\n                    } else {\n                        fileEntries.put(name, r);\n                        if (match(name)) {\n                            matchFileEntries.put(name, r);\n                        }\n                    }\n                }\n            } catch (IOException ex) {\n                throw new BuildException(\"problem reading \" + srcFile, ex);\n            }\n        } catch (IOException ex) {\n            throw new BuildException(\"problem opening \" + srcFile, ex);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/TarScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2018-05-18 02:36:11","commitOrder":10,"curCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n\n        File srcFile = src.asOptional(FileProvider.class)\n            .map(FileProvider::getFile).orElseThrow(() -> new BuildException(\n                \"Only file provider resources are supported\"));\n\n        try (ZipFile zf = new ZipFile(srcFile, encoding)) {\n            StreamUtils.enumerationAsStream(zf.getEntries()).forEach(entry -> {\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            });\n        } catch (ZipException ex) {\n            throw new BuildException(\"Problem reading \" + srcFile, ex);\n        } catch (IOException ex) {\n            throw new BuildException(\"Problem opening \" + srcFile, ex);\n        }\n    }\n","date":"2018-05-18 02:36:11","endLine":85,"groupId":"10540","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"fillMapsFromArchive","params":"(Resourcesrc@Stringencoding@Map<String@Resource>fileEntries@Map<String@Resource>matchFileEntries@Map<String@Resource>dirEntries@Map<String@Resource>matchDirEntries)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f4/3fa7c65e19d4330d19a1e163598382ad91c85d.src","preCode":"    protected void fillMapsFromArchive(Resource src, String encoding,\n            Map<String, Resource> fileEntries, Map<String, Resource> matchFileEntries,\n            Map<String, Resource> dirEntries, Map<String, Resource> matchDirEntries) {\n\n        File srcFile = src.asOptional(FileProvider.class)\n            .map(FileProvider::getFile).orElseThrow(() -> new BuildException(\n                \"Only file provider resources are supported\"));\n\n        try (ZipFile zf = new ZipFile(srcFile, encoding)) {\n             for (ZipEntry entry : Collections.list(zf.getEntries())) {\n                Resource r = new ZipResource(srcFile, encoding, entry);\n                String name = entry.getName();\n                if (entry.isDirectory()) {\n                    name = trimSeparator(name);\n                    dirEntries.put(name, r);\n                    if (match(name)) {\n                        matchDirEntries.put(name, r);\n                    }\n                } else {\n                    fileEntries.put(name, r);\n                    if (match(name)) {\n                        matchFileEntries.put(name, r);\n                    }\n                }\n            }\n        } catch (ZipException ex) {\n            throw new BuildException(\"Problem reading \" + srcFile, ex);\n        } catch (IOException ex) {\n            throw new BuildException(\"Problem opening \" + srcFile, ex);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/types/ZipScanner.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"11422630936848e82c7b13ab3fa68a3003e10195","commitMessage":"@@@Avoid Collections.list().stream()\n(for performance sake)","date":"2018-05-18 02:36:11","modifiedFileCount":"29","status":"M","submitter":"Gintas Grigelionis"}]
