[{"authorTime":"2003-08-06 22:12:29","codes":[{"authorDate":"2002-11-08 17:53:22","commitOrder":3,"curCode":"        public InputSource resolveEntity(String publicId,\n                                         String systemId) {\n            InputSource result = null;\n            ResourceLocation matchingEntry = findMatchingEntry(publicId);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for publicId: '\" + \n                    matchingEntry.getPublicId() + \"' location: '\" + \n                    matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                result = filesystemLookup(matchingEntry);\n\n                if (result == null) {\n                    result = classpathLookup(matchingEntry);\n                }\n\n                if (result == null) {\n                    result = urlLookup(matchingEntry);\n                }\n            }\n            return result;\n        }\n","date":"2002-11-08 17:53:22","endLine":798,"groupId":"10383","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"resolveEntity","params":"(StringpublicId@StringsystemId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/b4/03a80d0f70201d57d75245c055734f38b93643.src","preCode":"        public InputSource resolveEntity(String publicId,\n                                         String systemId) {\n            InputSource result = null;\n            ResourceLocation matchingEntry = findMatchingEntry(publicId);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for publicId: '\" + \n                    matchingEntry.getPublicId() + \"' location: '\" + \n                    matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                result = filesystemLookup(matchingEntry);\n\n                if (result == null) {\n                    result = classpathLookup(matchingEntry);\n                }\n\n                if (result == null) {\n                    result = urlLookup(matchingEntry);\n                }\n            }\n            return result;\n        }\n","realPath":"src/main/org/apache/tools/ant/types/XMLCatalog.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":775,"status":"NB"},{"authorDate":"2003-08-06 22:12:29","commitOrder":3,"curCode":"        public InputSource resolveEntity(String publicId,\n                                         String systemId) {\n            InputSource result = null;\n\n            processExternalCatalogs();\n\n            ResourceLocation matchingEntry = findMatchingEntry(publicId);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for publicId: '\"\n                    + matchingEntry.getPublicId() + \"' location: '\"\n                    + matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                result = filesystemLookup(matchingEntry);\n\n                if (result == null) {\n                    result = classpathLookup(matchingEntry);\n                }\n\n                if (result == null) {\n                    try {\n                        result =\n                            (InputSource) resolveEntity.invoke(resolverImpl,\n                                                              new Object[] {publicId, systemId});\n                    } catch (Exception ex) {\n                        throw new BuildException(ex);\n                    }\n                }\n            } else {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                try {\n                    result =\n                        (InputSource) resolveEntity.invoke(resolverImpl,\n                                                          new Object[] {publicId, systemId});\n                } catch (Exception ex) {\n                    throw new BuildException(ex);\n                }\n            }\n\n            return result;\n        }\n","date":"2003-08-06 22:12:29","endLine":1027,"groupId":"10383","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveEntity","params":"(StringpublicId@StringsystemId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/77/8958dea6e736e24ba6f5f678204d519ee45413.src","preCode":"        public InputSource resolveEntity(String publicId,\n                                         String systemId) {\n            InputSource result = null;\n\n            processExternalCatalogs();\n\n            ResourceLocation matchingEntry = findMatchingEntry(publicId);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for publicId: '\"\n                    + matchingEntry.getPublicId() + \"' location: '\"\n                    + matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                result = filesystemLookup(matchingEntry);\n\n                if (result == null) {\n                    result = classpathLookup(matchingEntry);\n                }\n\n                if (result == null) {\n                    try {\n                        result =\n                            (InputSource) resolveEntity.invoke(resolverImpl,\n                                                              new Object[] {publicId, systemId});\n                    } catch (Exception ex) {\n                        throw new BuildException(ex);\n                    }\n                }\n            } else {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                try {\n                    result =\n                        (InputSource) resolveEntity.invoke(resolverImpl,\n                                                          new Object[] {publicId, systemId});\n                } catch (Exception ex) {\n                    throw new BuildException(ex);\n                }\n            }\n\n            return result;\n        }\n","realPath":"src/main/org/apache/tools/ant/types/XMLCatalog.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":978,"status":"B"}],"commitId":"130d4ee759cdd6627262fcf640843c6c5c65a317","commitMessage":"@@@Change the check for the external resolver catalog impl to\nensure it can be loaded by the resolver classes.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@275038 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2003-08-06 22:12:29","modifiedFileCount":"1","status":"M","submitter":"Conor MacNeill"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2002-11-08 17:53:22","commitOrder":4,"curCode":"        public InputSource resolveEntity(String publicId,\n                                         String systemId) {\n            InputSource result = null;\n            ResourceLocation matchingEntry = findMatchingEntry(publicId);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for publicId: '\" + \n                    matchingEntry.getPublicId() + \"' location: '\" + \n                    matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                result = filesystemLookup(matchingEntry);\n\n                if (result == null) {\n                    result = classpathLookup(matchingEntry);\n                }\n\n                if (result == null) {\n                    result = urlLookup(matchingEntry);\n                }\n            }\n            return result;\n        }\n","date":"2002-11-08 17:53:22","endLine":798,"groupId":"11556","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"resolveEntity","params":"(StringpublicId@StringsystemId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/b4/03a80d0f70201d57d75245c055734f38b93643.src","preCode":"        public InputSource resolveEntity(String publicId,\n                                         String systemId) {\n            InputSource result = null;\n            ResourceLocation matchingEntry = findMatchingEntry(publicId);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for publicId: '\" + \n                    matchingEntry.getPublicId() + \"' location: '\" + \n                    matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                result = filesystemLookup(matchingEntry);\n\n                if (result == null) {\n                    result = classpathLookup(matchingEntry);\n                }\n\n                if (result == null) {\n                    result = urlLookup(matchingEntry);\n                }\n            }\n            return result;\n        }\n","realPath":"src/main/org/apache/tools/ant/types/XMLCatalog.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":775,"status":"N"},{"authorDate":"2017-04-13 23:15:22","commitOrder":4,"curCode":"        public InputSource resolveEntity(String publicId,\n                                         String systemId) {\n\n            processExternalCatalogs();\n\n            ResourceLocation matchingEntry = findMatchingEntry(publicId);\n\n            InputSource result;\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for publicId: '\"\n                    + matchingEntry.getPublicId() + \"' location: '\"\n                    + matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                result = filesystemLookup(matchingEntry);\n\n                if (result == null) {\n                    result = classpathLookup(matchingEntry);\n                }\n\n                if (result == null) {\n                    try {\n                        result =\n                            (InputSource) resolveEntity.invoke(resolverImpl,\n                                                              new Object[] {publicId, systemId});\n                    } catch (Exception ex) {\n                        throw new BuildException(ex);\n                    }\n                }\n            } else {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                try {\n                    result =\n                        (InputSource) resolveEntity.invoke(resolverImpl,\n                                                          new Object[] {publicId, systemId});\n                } catch (Exception ex) {\n                    throw new BuildException(ex);\n                }\n            }\n\n            return result;\n        }\n","date":"2017-04-13 23:15:22","endLine":999,"groupId":"11556","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"resolveEntity","params":"(StringpublicId@StringsystemId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/75/3e533c1e3d8851c978c18a25ff6292a76a6171.src","preCode":"        public InputSource resolveEntity(String publicId,\n                                         String systemId) {\n            InputSource result = null;\n\n            processExternalCatalogs();\n\n            ResourceLocation matchingEntry = findMatchingEntry(publicId);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for publicId: '\"\n                    + matchingEntry.getPublicId() + \"' location: '\"\n                    + matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                result = filesystemLookup(matchingEntry);\n\n                if (result == null) {\n                    result = classpathLookup(matchingEntry);\n                }\n\n                if (result == null) {\n                    try {\n                        result =\n                            (InputSource) resolveEntity.invoke(resolverImpl,\n                                                              new Object[] {publicId, systemId});\n                    } catch (Exception ex) {\n                        throw new BuildException(ex);\n                    }\n                }\n            } else {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                try {\n                    result =\n                        (InputSource) resolveEntity.invoke(resolverImpl,\n                                                          new Object[] {publicId, systemId});\n                } catch (Exception ex) {\n                    throw new BuildException(ex);\n                }\n            }\n\n            return result;\n        }\n","realPath":"src/main/org/apache/tools/ant/types/XMLCatalog.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":950,"status":"M"}],"commitId":"b7d1e9bde44cb8e5233d6e70bb96e14cbb2f3e2d","commitMessage":"@@@java 5-8\n","date":"2017-04-13 23:15:22","modifiedFileCount":"609","status":"M","submitter":"Matt Benson"}]
