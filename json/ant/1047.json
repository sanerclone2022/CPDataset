[{"authorTime":"2016-07-14 02:28:32","codes":[{"authorDate":"2016-07-14 02:28:32","commitOrder":1,"curCode":"    public void testJunitOnCpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJCP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path cp = new Path(project);\n            cp.setPath(junit.getAbsolutePath());\n            task.createClasspath().add(cp);\n            final Path mp = new Path(project);\n            mp.setPath(modulesDir.getName());\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"-modulepath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].startsWith(\"-XaddExports:\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            assertEquals(\"Expected classpath\", cp.toString(), resCp);\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","date":"2016-07-14 02:28:32","endLine":493,"groupId":"340","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJunitOnCpArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f0/8860aaf7d69c0d416b7158aada9adf7c79b407.src","preCode":"    public void testJunitOnCpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJCP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path cp = new Path(project);\n            cp.setPath(junit.getAbsolutePath());\n            task.createClasspath().add(cp);\n            final Path mp = new Path(project);\n            mp.setPath(modulesDir.getName());\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"-modulepath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].startsWith(\"-XaddExports:\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            assertEquals(\"Expected classpath\", cp.toString(), resCp);\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"B"},{"authorDate":"2016-07-14 02:28:32","commitOrder":1,"curCode":"    public void testJunitOnMpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJMP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path mp = new Path(project);\n            mp.add(new Path(project, junit.getAbsolutePath()));\n            mp.add(new Path(project, modulesDir.getName()));\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));       \r\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"-modulepath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].startsWith(\"-XaddExports:\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            assertNull(\"No classpath\", resCp);\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","date":"2016-07-14 02:28:32","endLine":547,"groupId":"342","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJunitOnMpArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f0/8860aaf7d69c0d416b7158aada9adf7c79b407.src","preCode":"    public void testJunitOnMpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJMP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path mp = new Path(project);\n            mp.add(new Path(project, junit.getAbsolutePath()));\n            mp.add(new Path(project, modulesDir.getName()));\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));       \r\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"-modulepath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].startsWith(\"-XaddExports:\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            assertNull(\"No classpath\", resCp);\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":496,"status":"B"}],"commitId":"5c85c44601c38541572b756406edbc8d08d11fe0","commitMessage":"@@@JDK9 modules support for JUnit by Tom?? Zezula\n\nthis is the combined patch or #18 which couldn't be applied via `git am`\n","date":"2016-07-14 02:28:32","modifiedFileCount":"2","status":"B","submitter":"Stefan Bodewig"},{"authorTime":"2016-09-09 19:38:55","codes":[{"authorDate":"2016-09-09 19:38:55","commitOrder":2,"curCode":"    public void testJunitOnCpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJCP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path cp = new Path(project);\n            cp.setPath(junit.getAbsolutePath());\n            task.createClasspath().add(cp);\n            final Path mp = new Path(project);\n            mp.setPath(modulesDir.getName());\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"--module-path\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].equals(\"--add-exports\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[++i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            assertEquals(\"Expected classpath\", cp.toString(), resCp);\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","date":"2016-09-09 21:54:39","endLine":493,"groupId":"340","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJunitOnCpArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/d8/17cb10d1ddb091700e61e098fe67962b0b9c20.src","preCode":"    public void testJunitOnCpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJCP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path cp = new Path(project);\n            cp.setPath(junit.getAbsolutePath());\n            task.createClasspath().add(cp);\n            final Path mp = new Path(project);\n            mp.setPath(modulesDir.getName());\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"-modulepath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].startsWith(\"-XaddExports:\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            assertEquals(\"Expected classpath\", cp.toString(), resCp);\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"M"},{"authorDate":"2016-09-09 19:38:55","commitOrder":2,"curCode":"    public void testJunitOnMpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJMP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path mp = new Path(project);\n            mp.add(new Path(project, junit.getAbsolutePath()));\n            mp.add(new Path(project, modulesDir.getName()));\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));       \r\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"--module-path\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].equals(\"--add-exports\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[++i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            assertNull(\"No classpath\", resCp);\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","date":"2016-09-09 21:54:39","endLine":547,"groupId":"342","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJunitOnMpArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/d8/17cb10d1ddb091700e61e098fe67962b0b9c20.src","preCode":"    public void testJunitOnMpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJMP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path mp = new Path(project);\n            mp.add(new Path(project, junit.getAbsolutePath()));\n            mp.add(new Path(project, modulesDir.getName()));\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));       \r\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"-modulepath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].startsWith(\"-XaddExports:\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            assertNull(\"No classpath\", resCp);\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":496,"status":"M"}],"commitId":"8daeb41b0b9f152cc3c9cf23e99ba2c09958f508","commitMessage":"@@@JDK9 command line options updated to JEP 293\n","date":"2016-09-09 21:54:39","modifiedFileCount":"4","status":"M","submitter":"Tomas Zezula"},{"authorTime":"2016-10-23 23:48:10","codes":[{"authorDate":"2016-10-23 23:48:10","commitOrder":3,"curCode":"    public void testJunitOnCpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJCP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path cp = new Path(project);\n            cp.setPath(junit.getAbsolutePath());\n            task.createClasspath().add(cp);\n            final Path mp = new Path(project);\n            mp.setPath(modulesDir.getName());\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"--module-path\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].equals(\"--add-exports\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[++i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            if (System.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null) {\n                assertEquals(\"Expected classpath\", cp.toString(), resCp);\n            }\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","date":"2016-10-23 23:48:10","endLine":495,"groupId":"340","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testJunitOnCpArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7d/1567aecc189da869ef6216a5e2492ab1a9afb7.src","preCode":"    public void testJunitOnCpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJCP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path cp = new Path(project);\n            cp.setPath(junit.getAbsolutePath());\n            task.createClasspath().add(cp);\n            final Path mp = new Path(project);\n            mp.setPath(modulesDir.getName());\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"--module-path\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].equals(\"--add-exports\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[++i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            assertEquals(\"Expected classpath\", cp.toString(), resCp);\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"M"},{"authorDate":"2016-10-23 23:48:10","commitOrder":3,"curCode":"    public void testJunitOnMpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJMP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path mp = new Path(project);\n            mp.add(new Path(project, junit.getAbsolutePath()));\n            mp.add(new Path(project, modulesDir.getName()));\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));       \r\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"--module-path\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].equals(\"--add-exports\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[++i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            if (System.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null) {\n                assertNull(\"No classpath\", resCp);\n            }\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","date":"2016-10-23 23:48:10","endLine":551,"groupId":"342","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJunitOnMpArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7d/1567aecc189da869ef6216a5e2492ab1a9afb7.src","preCode":"    public void testJunitOnMpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJMP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path mp = new Path(project);\n            mp.add(new Path(project, junit.getAbsolutePath()));\n            mp.add(new Path(project, modulesDir.getName()));\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));       \r\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"--module-path\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].equals(\"--add-exports\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[++i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            assertNull(\"No classpath\", resCp);\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":498,"status":"M"}],"commitId":"b923f8f9f4d0c2f2d60c67e61aca5df1fe6f49de","commitMessage":"@@@Merge branch '1.9.x'\n","date":"2016-10-23 23:48:10","modifiedFileCount":"2","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2016-10-24 20:36:12","codes":[{"authorDate":"2016-10-24 20:36:12","commitOrder":4,"curCode":"    public void testJunitOnCpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJCP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path cp = new Path(project);\n            cp.setPath(junit.getAbsolutePath());\n            task.createClasspath().add(cp);\n            final Path mp = new Path(project);\n            mp.setPath(modulesDir.getName());\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"--module-path\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].equals(\"--add-exports\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[++i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            if (project.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null\n                && System.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null) {\n                assertEquals(\"Expected classpath\", cp.toString(), resCp);\n            }\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","date":"2016-10-24 20:36:12","endLine":496,"groupId":"340","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testJunitOnCpArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/db/2172eedcefa5f1dd9fec6b51620d85b791e3f7.src","preCode":"    public void testJunitOnCpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJCP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path cp = new Path(project);\n            cp.setPath(junit.getAbsolutePath());\n            task.createClasspath().add(cp);\n            final Path mp = new Path(project);\n            mp.setPath(modulesDir.getName());\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"--module-path\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].equals(\"--add-exports\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[++i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            if (System.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null) {\n                assertEquals(\"Expected classpath\", cp.toString(), resCp);\n            }\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"M"},{"authorDate":"2016-10-24 20:36:12","commitOrder":4,"curCode":"    public void testJunitOnMpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJMP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path mp = new Path(project);\n            mp.add(new Path(project, junit.getAbsolutePath()));\n            mp.add(new Path(project, modulesDir.getName()));\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));       \r\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"--module-path\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].equals(\"--add-exports\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[++i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            if (project.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null\n                && System.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null) {\n                assertNull(\"No classpath\", resCp);\n            }\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","date":"2016-10-24 20:36:12","endLine":553,"groupId":"342","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testJunitOnMpArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/db/2172eedcefa5f1dd9fec6b51620d85b791e3f7.src","preCode":"    public void testJunitOnMpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJMP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis()/1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir,\"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path mp = new Path(project);\n            mp.add(new Path(project, junit.getAbsolutePath()));\n            mp.add(new Path(project, modulesDir.getName()));\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));       \r\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i< mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"--module-path\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].equals(\"--add-exports\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[++i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            if (System.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null) {\n                assertNull(\"No classpath\", resCp);\n            }\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":499,"status":"M"}],"commitId":"fea1cfe23976999109d6a1922b3d3dc23e60be80","commitMessage":"@@@Merge branch '1.9.x'\n","date":"2016-10-24 20:36:12","modifiedFileCount":"1","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2021-08-21 16:08:42","codes":[{"authorDate":"2021-08-21 16:08:42","commitOrder":5,"curCode":"    public void testJunitOnCpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJCP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis() / 1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir, \"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path cp = new Path(project);\n            cp.setPath(junit.getAbsolutePath());\n            task.createClasspath().add(cp);\n            final Path mp = new Path(project);\n            mp.setPath(modulesDir.getName());\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i < mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"--module-path\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].equals(\"--add-exports\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[++i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            if (project.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null\n                && System.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null\n                && project.getProperty(\"tests.and.ant.share.classloader\") == null) {\n                assertEquals(\"Expected classpath\", cp.toString(), resCp);\n            }\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","date":"2021-08-21 16:08:42","endLine":516,"groupId":"1047","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testJunitOnCpArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/0e/69d9fda0f09e10a0af0ade53b4fd56326014c2.src","preCode":"    public void testJunitOnCpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJCP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis() / 1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir, \"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path cp = new Path(project);\n            cp.setPath(junit.getAbsolutePath());\n            task.createClasspath().add(cp);\n            final Path mp = new Path(project);\n            mp.setPath(modulesDir.getName());\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i < mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"--module-path\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].equals(\"--add-exports\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[++i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            if (project.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null\n                && System.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null) {\n                assertEquals(\"Expected classpath\", cp.toString(), resCp);\n            }\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":459,"status":"M"},{"authorDate":"2021-08-21 16:08:42","commitOrder":5,"curCode":"    public void testJunitOnMpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJMP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis() / 1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir, \"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path mp = new Path(project);\n            mp.add(new Path(project, junit.getAbsolutePath()));\n            mp.add(new Path(project, modulesDir.getName()));\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));       \r\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i < mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"--module-path\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].equals(\"--add-exports\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[++i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            if (project.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null\n                && System.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null\n                && project.getProperty(\"tests.and.ant.share.classloader\") == null) {\n                assertNull(\"No classpath\", resCp);\n            }\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","date":"2021-08-21 16:08:42","endLine":574,"groupId":"1047","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testJunitOnMpArguments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/0e/69d9fda0f09e10a0af0ade53b4fd56326014c2.src","preCode":"    public void testJunitOnMpArguments() throws Exception {\n        final File tmp = new File(System.getProperty(\"java.io.tmpdir\"));    \r\n        final File workDir = new File(tmp, String.format(\"%s_testJMP%d\",    \r\n                getClass().getName(),\n                System.currentTimeMillis() / 1000));\n        workDir.mkdirs();\n        try {\n            final File modulesDir = new File(workDir, \"modules\");    \r\n            modulesDir.mkdirs();\n\n            final Project project = new Project();\n            project.init();\n            project.setBaseDir(workDir);\n            final MockCommandLauncher mockProcLauncher = new MockCommandLauncher();\n            project.addReference(\n                    MagicNames.ANT_VM_LAUNCHER_REF_ID,\n                    mockProcLauncher);\n            JUnitTask task = new JUnitTask();\n            task.setDir(workDir);\n            task.setFork(true);\n            task.setProject(project);\n            final File junit = LoaderUtils.getResourceSource(\n                    JUnitTask.class.getClassLoader(),\n                    \"junit/framework/Test.class\");    \r\n            final Path mp = new Path(project);\n            mp.add(new Path(project, junit.getAbsolutePath()));\n            mp.add(new Path(project, modulesDir.getName()));\n            task.createModulepath().add(mp);\n            task.addTest(new JUnitTest(\"org.apache.tools.ant.taskdefs.optional.junit.TestTest\"));       \r\n            task.execute();\n            assertNotNull(mockProcLauncher.cmd);\n            String resCp = null;\n            String resMp = null;\n            Set<String> resExports = new TreeSet<>();\n            for (int i = 1; i < mockProcLauncher.cmd.length; i++) {\n                if (\"-classpath\".equals(mockProcLauncher.cmd[i])) { \r\n                    resCp = mockProcLauncher.cmd[++i];\n                } else if (\"--module-path\".equals(mockProcLauncher.cmd[i])) { \r\n                    resMp = mockProcLauncher.cmd[++i];\n                } else if (mockProcLauncher.cmd[i].equals(\"--add-exports\")) {   \r\n                    resExports.add(mockProcLauncher.cmd[++i]);\n                } else if (JUnitTestRunner.class.getName().equals(mockProcLauncher.cmd[i])) {\n                    break;\n                }\n            }\n            assertTrue(\"No exports\", resExports.isEmpty());\n            if (project.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null\n                && System.getProperty(MagicNames.BUILD_SYSCLASSPATH) == null) {\n                assertNull(\"No classpath\", resCp);\n            }\n            assertEquals(\"Expected modulepath\", mp.toString(), resMp);\n        } finally {\n            delete(workDir);\n        }\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junit/JUnitTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":519,"status":"M"}],"commitId":"84116f8a5d41fd210b6640fe1b830cf21a8fb84a","commitMessage":"@@@try to make tests pass inside of Gump\n","date":"2021-08-21 16:08:42","modifiedFileCount":"1","status":"M","submitter":"Stefan Bodewig"}]
