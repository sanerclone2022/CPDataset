[{"authorTime":"2007-08-17 17:54:07","codes":[{"authorDate":"2006-09-05 06:49:47","commitOrder":15,"curCode":"    public int executeAsForked(CommandlineJava commandline,\n                               ExecuteWatchdog watchdog) throws BuildException {\n        runtimeClasses = new Path(getProject());\n        addClasspathEntry(\"/jdepend/textui/JDepend.class\");\n\n        \r\n        createClasspath();\n\n        \r\n        \r\n        if (getClasspath().toString().length() > 0) {\n            createJvmarg(commandline).setValue(\"-classpath\");\n            createJvmarg(commandline).setValue(getClasspath().toString());\n        }\n\n        if (includeRuntime) {\n            Vector v = Execute.getProcEnvironment();\n            Enumeration e = v.elements();\n            while (e.hasMoreElements()) {\n                String s = (String) e.nextElement();\n                if (s.startsWith(\"CLASSPATH=\")) {\n                    commandline.createClasspath(getProject()).createPath()\n                        .append(new Path(getProject(),\n                                         s.substring(\"CLASSPATH=\".length()\n                                                     )));\n                }\n            }\n            log(\"Implicitly adding \" + runtimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            commandline.createClasspath(getProject()).createPath()\n                .append(runtimeClasses);\n        }\n\n        if (getOutputFile() != null) {\n            \r\n            \r\n            \r\n            commandline.createArgument().setValue(\"-file\");\n            commandline.createArgument().setValue(outputFile.getPath());\n            \r\n        }\n\n        if (getSourcespath() != null) {\n            \r\n            String[] sP = getSourcespath().list();\n            for (int i = 0; i < sP.length; i++) {\n                File f = new File(sP[i]);\n\n                \r\n                \r\n                if (!f.exists() || !f.isDirectory()) {\n                    throw new BuildException(\"\\\"\" + f.getPath()\n                                             + \"\\\" does not represent a valid\"\n                                             + \" directory. JDepend would\"\n                                             + \" fail.\");\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        }\n\n        if (getClassespath() != null) {\n            \r\n            \r\n            String[] cP = getClassespath().list();\n            for (int i = 0; i < cP.length; i++) {\n                File f = new File(cP[i]);\n                \r\n                \r\n                if (!f.exists()) {\n                    throw new BuildException(\"\\\"\" + f.getPath()\n                                             + \"\\\" does not represent a valid\"\n                                             + \" file or directory. JDepend would\"\n                                             + \" fail.\");\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        }\n\n        Execute execute = new Execute(new LogStreamHandler(this,\n            Project.MSG_INFO, Project.MSG_WARN), watchdog);\n        execute.setCommandline(commandline.getCommandline());\n        if (getDir() != null) {\n            execute.setWorkingDirectory(getDir());\n            execute.setAntRun(getProject());\n        }\n\n        if (getOutputFile() != null) {\n            log(\"Output to be stored in \" + getOutputFile().getPath());\n        }\n        log(commandline.describeCommand(), Project.MSG_VERBOSE);\n        try {\n            return execute.execute();\n        } catch (IOException e) {\n            throw new BuildException(\"Process fork failed.\", e, getLocation());\n        }\n    }\n","date":"2006-09-05 06:49:47","endLine":666,"groupId":"3594","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"executeAsForked","params":"(CommandlineJavacommandline@ExecuteWatchdogwatchdog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/8d/654707e3538811b55b38a2856ad5f4e787145b.src","preCode":"    public int executeAsForked(CommandlineJava commandline,\n                               ExecuteWatchdog watchdog) throws BuildException {\n        runtimeClasses = new Path(getProject());\n        addClasspathEntry(\"/jdepend/textui/JDepend.class\");\n\n        \r\n        createClasspath();\n\n        \r\n        \r\n        if (getClasspath().toString().length() > 0) {\n            createJvmarg(commandline).setValue(\"-classpath\");\n            createJvmarg(commandline).setValue(getClasspath().toString());\n        }\n\n        if (includeRuntime) {\n            Vector v = Execute.getProcEnvironment();\n            Enumeration e = v.elements();\n            while (e.hasMoreElements()) {\n                String s = (String) e.nextElement();\n                if (s.startsWith(\"CLASSPATH=\")) {\n                    commandline.createClasspath(getProject()).createPath()\n                        .append(new Path(getProject(),\n                                         s.substring(\"CLASSPATH=\".length()\n                                                     )));\n                }\n            }\n            log(\"Implicitly adding \" + runtimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            commandline.createClasspath(getProject()).createPath()\n                .append(runtimeClasses);\n        }\n\n        if (getOutputFile() != null) {\n            \r\n            \r\n            \r\n            commandline.createArgument().setValue(\"-file\");\n            commandline.createArgument().setValue(outputFile.getPath());\n            \r\n        }\n\n        if (getSourcespath() != null) {\n            \r\n            String[] sP = getSourcespath().list();\n            for (int i = 0; i < sP.length; i++) {\n                File f = new File(sP[i]);\n\n                \r\n                \r\n                if (!f.exists() || !f.isDirectory()) {\n                    throw new BuildException(\"\\\"\" + f.getPath()\n                                             + \"\\\" does not represent a valid\"\n                                             + \" directory. JDepend would\"\n                                             + \" fail.\");\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        }\n\n        if (getClassespath() != null) {\n            \r\n            \r\n            String[] cP = getClassespath().list();\n            for (int i = 0; i < cP.length; i++) {\n                File f = new File(cP[i]);\n                \r\n                \r\n                if (!f.exists()) {\n                    throw new BuildException(\"\\\"\" + f.getPath()\n                                             + \"\\\" does not represent a valid\"\n                                             + \" file or directory. JDepend would\"\n                                             + \" fail.\");\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        }\n\n        Execute execute = new Execute(new LogStreamHandler(this,\n            Project.MSG_INFO, Project.MSG_WARN), watchdog);\n        execute.setCommandline(commandline.getCommandline());\n        if (getDir() != null) {\n            execute.setWorkingDirectory(getDir());\n            execute.setAntRun(getProject());\n        }\n\n        if (getOutputFile() != null) {\n            log(\"Output to be stored in \" + getOutputFile().getPath());\n        }\n        log(commandline.describeCommand(), Project.MSG_VERBOSE);\n        try {\n            return execute.execute();\n        } catch (IOException e) {\n            throw new BuildException(\"Process fork failed.\", e, getLocation());\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":571,"status":"NB"},{"authorDate":"2007-08-17 17:54:07","commitOrder":15,"curCode":"    private void checkIncludeAntRuntime(CommandlineJava cmd) {\n        if (includeAntRuntime) {\n            Vector v = Execute.getProcEnvironment();\n            Enumeration e = v.elements();\n            while (e.hasMoreElements()) {\n                String s = (String) e.nextElement();\n                if (s.startsWith(CLASSPATH)) {\n                    cmd.createClasspath(getProject()).createPath()\n                        .append(new Path(getProject(),\n                                         s.substring(CLASSPATH.length()\n                                                     )));\n                }\n            }\n            log(\"Implicitly adding \" + antRuntimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            cmd.createClasspath(getProject()).createPath()\n                .append(antRuntimeClasses);\n        }\n    }\n","date":"2007-08-17 17:54:07","endLine":1071,"groupId":"7987","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkIncludeAntRuntime","params":"(CommandlineJavacmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/b5/1745cd096fc10f11f9a11c8e92b759427fdfa7.src","preCode":"    private void checkIncludeAntRuntime(CommandlineJava cmd) {\n        if (includeAntRuntime) {\n            Vector v = Execute.getProcEnvironment();\n            Enumeration e = v.elements();\n            while (e.hasMoreElements()) {\n                String s = (String) e.nextElement();\n                if (s.startsWith(CLASSPATH)) {\n                    cmd.createClasspath(getProject()).createPath()\n                        .append(new Path(getProject(),\n                                         s.substring(CLASSPATH.length()\n                                                     )));\n                }\n            }\n            log(\"Implicitly adding \" + antRuntimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            cmd.createClasspath(getProject()).createPath()\n                .append(antRuntimeClasses);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1053,"status":"B"}],"commitId":"3ef74849efee36e856e6a1a37199a13ee15499a6","commitMessage":"@@@reduce method length\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@566990 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2007-08-17 17:54:07","modifiedFileCount":"2","status":"M","submitter":"Peter Reilly"},{"authorTime":"2010-11-26 23:01:46","codes":[{"authorDate":"2010-11-26 23:01:46","commitOrder":16,"curCode":"    public int executeAsForked(CommandlineJava commandline,\n                               ExecuteWatchdog watchdog) throws BuildException {\n        runtimeClasses = new Path(getProject());\n        addClasspathEntry(\"/jdepend/textui/JDepend.class\");\n\n        \r\n        createClasspath();\n\n        \r\n        \r\n        if (getClasspath().toString().length() > 0) {\n            createJvmarg(commandline).setValue(\"-classpath\");\n            createJvmarg(commandline).setValue(getClasspath().toString());\n        }\n\n        if (includeRuntime) {\n            Map env = Execute.getEnvironmentVariables();\n            String cp = (String) env.get(\"CLASSPATH\");\n            if (cp != null) {\n                commandline.createClasspath(getProject()).createPath()\n                    .append(new Path(getProject(), cp));\n            }\n            log(\"Implicitly adding \" + runtimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            commandline.createClasspath(getProject()).createPath()\n                .append(runtimeClasses);\n        }\n\n        if (getOutputFile() != null) {\n            \r\n            \r\n            \r\n            commandline.createArgument().setValue(\"-file\");\n            commandline.createArgument().setValue(outputFile.getPath());\n            \r\n        }\n\n        if (getSourcespath() != null) {\n            \r\n            String[] sP = getSourcespath().list();\n            for (int i = 0; i < sP.length; i++) {\n                File f = new File(sP[i]);\n\n                \r\n                \r\n                if (!f.exists() || !f.isDirectory()) {\n                    throw new BuildException(\"\\\"\" + f.getPath()\n                                             + \"\\\" does not represent a valid\"\n                                             + \" directory. JDepend would\"\n                                             + \" fail.\");\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        }\n\n        if (getClassespath() != null) {\n            \r\n            \r\n            String[] cP = getClassespath().list();\n            for (int i = 0; i < cP.length; i++) {\n                File f = new File(cP[i]);\n                \r\n                \r\n                if (!f.exists()) {\n                    throw new BuildException(\"\\\"\" + f.getPath()\n                                             + \"\\\" does not represent a valid\"\n                                             + \" file or directory. JDepend would\"\n                                             + \" fail.\");\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        }\n\n        Execute execute = new Execute(new LogStreamHandler(this,\n            Project.MSG_INFO, Project.MSG_WARN), watchdog);\n        execute.setCommandline(commandline.getCommandline());\n        if (getDir() != null) {\n            execute.setWorkingDirectory(getDir());\n            execute.setAntRun(getProject());\n        }\n\n        if (getOutputFile() != null) {\n            log(\"Output to be stored in \" + getOutputFile().getPath());\n        }\n        log(commandline.describeCommand(), Project.MSG_VERBOSE);\n        try {\n            return execute.execute();\n        } catch (IOException e) {\n            throw new BuildException(\"Process fork failed.\", e, getLocation());\n        }\n    }\n","date":"2010-11-26 23:01:46","endLine":670,"groupId":"3594","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"executeAsForked","params":"(CommandlineJavacommandline@ExecuteWatchdogwatchdog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/d7/90792ba879cffa748161fdc4d906afbf94c39e.src","preCode":"    public int executeAsForked(CommandlineJava commandline,\n                               ExecuteWatchdog watchdog) throws BuildException {\n        runtimeClasses = new Path(getProject());\n        addClasspathEntry(\"/jdepend/textui/JDepend.class\");\n\n        \r\n        createClasspath();\n\n        \r\n        \r\n        if (getClasspath().toString().length() > 0) {\n            createJvmarg(commandline).setValue(\"-classpath\");\n            createJvmarg(commandline).setValue(getClasspath().toString());\n        }\n\n        if (includeRuntime) {\n            Vector v = Execute.getProcEnvironment();\n            Enumeration e = v.elements();\n            while (e.hasMoreElements()) {\n                String s = (String) e.nextElement();\n                if (s.startsWith(\"CLASSPATH=\")) {\n                    commandline.createClasspath(getProject()).createPath()\n                        .append(new Path(getProject(),\n                                         s.substring(\"CLASSPATH=\".length()\n                                                     )));\n                }\n            }\n            log(\"Implicitly adding \" + runtimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            commandline.createClasspath(getProject()).createPath()\n                .append(runtimeClasses);\n        }\n\n        if (getOutputFile() != null) {\n            \r\n            \r\n            \r\n            commandline.createArgument().setValue(\"-file\");\n            commandline.createArgument().setValue(outputFile.getPath());\n            \r\n        }\n\n        if (getSourcespath() != null) {\n            \r\n            String[] sP = getSourcespath().list();\n            for (int i = 0; i < sP.length; i++) {\n                File f = new File(sP[i]);\n\n                \r\n                \r\n                if (!f.exists() || !f.isDirectory()) {\n                    throw new BuildException(\"\\\"\" + f.getPath()\n                                             + \"\\\" does not represent a valid\"\n                                             + \" directory. JDepend would\"\n                                             + \" fail.\");\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        }\n\n        if (getClassespath() != null) {\n            \r\n            \r\n            String[] cP = getClassespath().list();\n            for (int i = 0; i < cP.length; i++) {\n                File f = new File(cP[i]);\n                \r\n                \r\n                if (!f.exists()) {\n                    throw new BuildException(\"\\\"\" + f.getPath()\n                                             + \"\\\" does not represent a valid\"\n                                             + \" file or directory. JDepend would\"\n                                             + \" fail.\");\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        }\n\n        Execute execute = new Execute(new LogStreamHandler(this,\n            Project.MSG_INFO, Project.MSG_WARN), watchdog);\n        execute.setCommandline(commandline.getCommandline());\n        if (getDir() != null) {\n            execute.setWorkingDirectory(getDir());\n            execute.setAntRun(getProject());\n        }\n\n        if (getOutputFile() != null) {\n            log(\"Output to be stored in \" + getOutputFile().getPath());\n        }\n        log(commandline.describeCommand(), Project.MSG_VERBOSE);\n        try {\n            return execute.execute();\n        } catch (IOException e) {\n            throw new BuildException(\"Process fork failed.\", e, getLocation());\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":580,"status":"M"},{"authorDate":"2010-11-26 23:01:46","commitOrder":16,"curCode":"    private void checkIncludeAntRuntime(CommandlineJava cmd) {\n        if (includeAntRuntime) {\n            Map env = Execute.getEnvironmentVariables();\n            String cp = (String) env.get(CLASSPATH);\n            if (cp != null) {\n                cmd.createClasspath(getProject()).createPath()\n                    .append(new Path(getProject(), cp));\n            }\n            log(\"Implicitly adding \" + antRuntimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            cmd.createClasspath(getProject()).createPath()\n                .append(antRuntimeClasses);\n        }\n    }\n","date":"2010-11-26 23:01:46","endLine":1128,"groupId":"6158","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkIncludeAntRuntime","params":"(CommandlineJavacmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/58/5806564046ee57f3e5922175e6a919cf730a52.src","preCode":"    private void checkIncludeAntRuntime(CommandlineJava cmd) {\n        if (includeAntRuntime) {\n            Vector v = Execute.getProcEnvironment();\n            Enumeration e = v.elements();\n            while (e.hasMoreElements()) {\n                String s = (String) e.nextElement();\n                if (s.startsWith(CLASSPATH)) {\n                    cmd.createClasspath(getProject()).createPath()\n                        .append(new Path(getProject(),\n                                         s.substring(CLASSPATH.length()\n                                                     )));\n                }\n            }\n            log(\"Implicitly adding \" + antRuntimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            cmd.createClasspath(getProject()).createPath()\n                .append(antRuntimeClasses);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1115,"status":"M"}],"commitId":"ff41336fc19f549bc995898f4543da6d7e9d9bf9","commitMessage":"@@@provide a Map based method to access environment variables and use that.  Don't use System.getenv() on OpenVMS.  PR 49366\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@1039400 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-11-26 23:01:46","modifiedFileCount":"6","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2014-07-04 19:56:55","codes":[{"authorDate":"2010-11-26 23:01:46","commitOrder":17,"curCode":"    public int executeAsForked(CommandlineJava commandline,\n                               ExecuteWatchdog watchdog) throws BuildException {\n        runtimeClasses = new Path(getProject());\n        addClasspathEntry(\"/jdepend/textui/JDepend.class\");\n\n        \r\n        createClasspath();\n\n        \r\n        \r\n        if (getClasspath().toString().length() > 0) {\n            createJvmarg(commandline).setValue(\"-classpath\");\n            createJvmarg(commandline).setValue(getClasspath().toString());\n        }\n\n        if (includeRuntime) {\n            Map env = Execute.getEnvironmentVariables();\n            String cp = (String) env.get(\"CLASSPATH\");\n            if (cp != null) {\n                commandline.createClasspath(getProject()).createPath()\n                    .append(new Path(getProject(), cp));\n            }\n            log(\"Implicitly adding \" + runtimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            commandline.createClasspath(getProject()).createPath()\n                .append(runtimeClasses);\n        }\n\n        if (getOutputFile() != null) {\n            \r\n            \r\n            \r\n            commandline.createArgument().setValue(\"-file\");\n            commandline.createArgument().setValue(outputFile.getPath());\n            \r\n        }\n\n        if (getSourcespath() != null) {\n            \r\n            String[] sP = getSourcespath().list();\n            for (int i = 0; i < sP.length; i++) {\n                File f = new File(sP[i]);\n\n                \r\n                \r\n                if (!f.exists() || !f.isDirectory()) {\n                    throw new BuildException(\"\\\"\" + f.getPath()\n                                             + \"\\\" does not represent a valid\"\n                                             + \" directory. JDepend would\"\n                                             + \" fail.\");\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        }\n\n        if (getClassespath() != null) {\n            \r\n            \r\n            String[] cP = getClassespath().list();\n            for (int i = 0; i < cP.length; i++) {\n                File f = new File(cP[i]);\n                \r\n                \r\n                if (!f.exists()) {\n                    throw new BuildException(\"\\\"\" + f.getPath()\n                                             + \"\\\" does not represent a valid\"\n                                             + \" file or directory. JDepend would\"\n                                             + \" fail.\");\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        }\n\n        Execute execute = new Execute(new LogStreamHandler(this,\n            Project.MSG_INFO, Project.MSG_WARN), watchdog);\n        execute.setCommandline(commandline.getCommandline());\n        if (getDir() != null) {\n            execute.setWorkingDirectory(getDir());\n            execute.setAntRun(getProject());\n        }\n\n        if (getOutputFile() != null) {\n            log(\"Output to be stored in \" + getOutputFile().getPath());\n        }\n        log(commandline.describeCommand(), Project.MSG_VERBOSE);\n        try {\n            return execute.execute();\n        } catch (IOException e) {\n            throw new BuildException(\"Process fork failed.\", e, getLocation());\n        }\n    }\n","date":"2010-11-26 23:01:46","endLine":670,"groupId":"3594","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"executeAsForked","params":"(CommandlineJavacommandline@ExecuteWatchdogwatchdog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/d7/90792ba879cffa748161fdc4d906afbf94c39e.src","preCode":"    public int executeAsForked(CommandlineJava commandline,\n                               ExecuteWatchdog watchdog) throws BuildException {\n        runtimeClasses = new Path(getProject());\n        addClasspathEntry(\"/jdepend/textui/JDepend.class\");\n\n        \r\n        createClasspath();\n\n        \r\n        \r\n        if (getClasspath().toString().length() > 0) {\n            createJvmarg(commandline).setValue(\"-classpath\");\n            createJvmarg(commandline).setValue(getClasspath().toString());\n        }\n\n        if (includeRuntime) {\n            Map env = Execute.getEnvironmentVariables();\n            String cp = (String) env.get(\"CLASSPATH\");\n            if (cp != null) {\n                commandline.createClasspath(getProject()).createPath()\n                    .append(new Path(getProject(), cp));\n            }\n            log(\"Implicitly adding \" + runtimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            commandline.createClasspath(getProject()).createPath()\n                .append(runtimeClasses);\n        }\n\n        if (getOutputFile() != null) {\n            \r\n            \r\n            \r\n            commandline.createArgument().setValue(\"-file\");\n            commandline.createArgument().setValue(outputFile.getPath());\n            \r\n        }\n\n        if (getSourcespath() != null) {\n            \r\n            String[] sP = getSourcespath().list();\n            for (int i = 0; i < sP.length; i++) {\n                File f = new File(sP[i]);\n\n                \r\n                \r\n                if (!f.exists() || !f.isDirectory()) {\n                    throw new BuildException(\"\\\"\" + f.getPath()\n                                             + \"\\\" does not represent a valid\"\n                                             + \" directory. JDepend would\"\n                                             + \" fail.\");\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        }\n\n        if (getClassespath() != null) {\n            \r\n            \r\n            String[] cP = getClassespath().list();\n            for (int i = 0; i < cP.length; i++) {\n                File f = new File(cP[i]);\n                \r\n                \r\n                if (!f.exists()) {\n                    throw new BuildException(\"\\\"\" + f.getPath()\n                                             + \"\\\" does not represent a valid\"\n                                             + \" file or directory. JDepend would\"\n                                             + \" fail.\");\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        }\n\n        Execute execute = new Execute(new LogStreamHandler(this,\n            Project.MSG_INFO, Project.MSG_WARN), watchdog);\n        execute.setCommandline(commandline.getCommandline());\n        if (getDir() != null) {\n            execute.setWorkingDirectory(getDir());\n            execute.setAntRun(getProject());\n        }\n\n        if (getOutputFile() != null) {\n            log(\"Output to be stored in \" + getOutputFile().getPath());\n        }\n        log(commandline.describeCommand(), Project.MSG_VERBOSE);\n        try {\n            return execute.execute();\n        } catch (IOException e) {\n            throw new BuildException(\"Process fork failed.\", e, getLocation());\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":580,"status":"N"},{"authorDate":"2014-07-04 19:56:55","commitOrder":17,"curCode":"    private void checkIncludeAntRuntime(final CommandlineJava cmd) {\n        if (includeAntRuntime) {\n            final Map env = Execute.getEnvironmentVariables();\n            final String cp = (String) env.get(CLASSPATH);\n            if (cp != null) {\n                cmd.createClasspath(getProject()).createPath()\n                    .append(new Path(getProject(), cp));\n            }\n            log(\"Implicitly adding \" + antRuntimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            cmd.createClasspath(getProject()).createPath()\n                .append(antRuntimeClasses);\n        }\n    }\n","date":"2014-07-04 19:56:55","endLine":1325,"groupId":"6158","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkIncludeAntRuntime","params":"(finalCommandlineJavacmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/a0/ce6327d8a370b87c6a81be137bdf766f426dc8.src","preCode":"    private void checkIncludeAntRuntime(CommandlineJava cmd) {\n        if (includeAntRuntime) {\n            Map env = Execute.getEnvironmentVariables();\n            String cp = (String) env.get(CLASSPATH);\n            if (cp != null) {\n                cmd.createClasspath(getProject()).createPath()\n                    .append(new Path(getProject(), cp));\n            }\n            log(\"Implicitly adding \" + antRuntimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            cmd.createClasspath(getProject()).createPath()\n                .append(antRuntimeClasses);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1312,"status":"M"}],"commitId":"13f6d98c9de38c6c53d4d855157c3fad620c3303","commitMessage":"@@@make it compile under Java5 (1.5.0_22-b03)","date":"2014-07-04 19:56:55","modifiedFileCount":"37","status":"M","submitter":"Jan Mat?rne"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":18,"curCode":"    public int executeAsForked(CommandlineJava commandline,\n                               ExecuteWatchdog watchdog) throws BuildException {\n        runtimeClasses = new Path(getProject());\n        addClasspathEntry(\"/jdepend/textui/JDepend.class\");\n\n        \r\n        createClasspath();\n\n        \r\n        \r\n        if (getClasspath().toString().length() > 0) {\n            createJvmarg(commandline).setValue(\"-classpath\");\n            createJvmarg(commandline).setValue(getClasspath().toString());\n        }\n\n        if (includeRuntime) {\n            Map<String, String> env = Execute.getEnvironmentVariables();\n            String cp = env.get(\"CLASSPATH\");\n            if (cp != null) {\n                commandline.createClasspath(getProject()).createPath()\n                    .append(new Path(getProject(), cp));\n            }\n            log(\"Implicitly adding \" + runtimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            commandline.createClasspath(getProject()).createPath()\n                .append(runtimeClasses);\n        }\n\n        if (getOutputFile() != null) {\n            \r\n            \r\n            \r\n            commandline.createArgument().setValue(\"-file\");\n            commandline.createArgument().setValue(outputFile.getPath());\n            \r\n        }\n\n        getWorkingPath().ifPresent(path -> {\n            for (String filepath : path.list()) {\n                File f = new File(filepath);\n                \n                \r\n                \r\n                if (!f.exists() || !f.isDirectory()) {\n                    throw new BuildException(\n                        \"\\\"%s\\\" does not represent a valid directory. JDepend would fail.\",\n                        f.getPath());\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        });\n        Execute execute = new Execute(new LogStreamHandler(this,\n            Project.MSG_INFO, Project.MSG_WARN), watchdog);\n        execute.setCommandline(commandline.getCommandline());\n        if (getDir() != null) {\n            execute.setWorkingDirectory(getDir());\n            execute.setAntRun(getProject());\n        }\n\n        if (getOutputFile() != null) {\n            log(\"Output to be stored in \" + getOutputFile().getPath());\n        }\n        log(commandline.describeCommand(), Project.MSG_VERBOSE);\n        try {\n            return execute.execute();\n        } catch (IOException e) {\n            throw new BuildException(\"Process fork failed.\", e, getLocation());\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":615,"groupId":"8390","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"executeAsForked","params":"(CommandlineJavacommandline@ExecuteWatchdogwatchdog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ab/c52e319bedf7cdb4864f6f645ed686ce4b6a7c.src","preCode":"    public int executeAsForked(CommandlineJava commandline,\n                               ExecuteWatchdog watchdog) throws BuildException {\n        runtimeClasses = new Path(getProject());\n        addClasspathEntry(\"/jdepend/textui/JDepend.class\");\n\n        \r\n        createClasspath();\n\n        \r\n        \r\n        if (getClasspath().toString().length() > 0) {\n            createJvmarg(commandline).setValue(\"-classpath\");\n            createJvmarg(commandline).setValue(getClasspath().toString());\n        }\n\n        if (includeRuntime) {\n            Map env = Execute.getEnvironmentVariables();\n            String cp = (String) env.get(\"CLASSPATH\");\n            if (cp != null) {\n                commandline.createClasspath(getProject()).createPath()\n                    .append(new Path(getProject(), cp));\n            }\n            log(\"Implicitly adding \" + runtimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            commandline.createClasspath(getProject()).createPath()\n                .append(runtimeClasses);\n        }\n\n        if (getOutputFile() != null) {\n            \r\n            \r\n            \r\n            commandline.createArgument().setValue(\"-file\");\n            commandline.createArgument().setValue(outputFile.getPath());\n            \r\n        }\n\n        if (getSourcespath() != null) {\n            \r\n            String[] sP = getSourcespath().list();\n            for (int i = 0; i < sP.length; i++) {\n                File f = new File(sP[i]);\n\n                \r\n                \r\n                if (!f.exists() || !f.isDirectory()) {\n                    throw new BuildException(\"\\\"\" + f.getPath()\n                                             + \"\\\" does not represent a valid\"\n                                             + \" directory. JDepend would\"\n                                             + \" fail.\");\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        }\n\n        if (getClassespath() != null) {\n            \r\n            \r\n            String[] cP = getClassespath().list();\n            for (int i = 0; i < cP.length; i++) {\n                File f = new File(cP[i]);\n                \r\n                \r\n                if (!f.exists()) {\n                    throw new BuildException(\"\\\"\" + f.getPath()\n                                             + \"\\\" does not represent a valid\"\n                                             + \" file or directory. JDepend would\"\n                                             + \" fail.\");\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        }\n\n        Execute execute = new Execute(new LogStreamHandler(this,\n            Project.MSG_INFO, Project.MSG_WARN), watchdog);\n        execute.setCommandline(commandline.getCommandline());\n        if (getDir() != null) {\n            execute.setWorkingDirectory(getDir());\n            execute.setAntRun(getProject());\n        }\n\n        if (getOutputFile() != null) {\n            log(\"Output to be stored in \" + getOutputFile().getPath());\n        }\n        log(commandline.describeCommand(), Project.MSG_VERBOSE);\n        try {\n            return execute.execute();\n        } catch (IOException e) {\n            throw new BuildException(\"Process fork failed.\", e, getLocation());\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":547,"status":"M"},{"authorDate":"2017-04-13 23:15:22","commitOrder":18,"curCode":"    private void checkIncludeAntRuntime(final CommandlineJava cmd) {\n        if (includeAntRuntime) {\n            final Map<String, String> env = Execute.getEnvironmentVariables();\n            final String cp = env.get(CLASSPATH);\n            if (cp != null) {\n                cmd.createClasspath(getProject()).createPath()\n                    .append(new Path(getProject(), cp));\n            }\n            log(\"Implicitly adding \" + antRuntimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            cmd.createClasspath(getProject()).createPath()\n                .append(antRuntimeClasses);\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":1338,"groupId":"6158","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"checkIncludeAntRuntime","params":"(finalCommandlineJavacmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e3/2403c4b573b7510dffe9040af1008e886c4826.src","preCode":"    private void checkIncludeAntRuntime(final CommandlineJava cmd) {\n        if (includeAntRuntime) {\n            final Map env = Execute.getEnvironmentVariables();\n            final String cp = (String) env.get(CLASSPATH);\n            if (cp != null) {\n                cmd.createClasspath(getProject()).createPath()\n                    .append(new Path(getProject(), cp));\n            }\n            log(\"Implicitly adding \" + antRuntimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            cmd.createClasspath(getProject()).createPath()\n                .append(antRuntimeClasses);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1325,"status":"M"}],"commitId":"b7d1e9bde44cb8e5233d6e70bb96e14cbb2f3e2d","commitMessage":"@@@java 5-8\n","date":"2017-04-13 23:15:22","modifiedFileCount":"609","status":"M","submitter":"Matt Benson"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2018-04-06 20:50:56","commitOrder":19,"curCode":"    public int executeAsForked(CommandlineJava commandline,\n                               ExecuteWatchdog watchdog) throws BuildException {\n        runtimeClasses = new Path(getProject());\n        addClasspathEntry(\"/jdepend/textui/JDepend.class\");\n\n        \r\n        createClasspath();\n\n        \r\n        \r\n        if (!getClasspath().toString().isEmpty()) {\n            createJvmarg(commandline).setValue(\"-classpath\");\n            createJvmarg(commandline).setValue(getClasspath().toString());\n        }\n\n        if (includeRuntime) {\n            Map<String, String> env = Execute.getEnvironmentVariables();\n            String cp = env.get(\"CLASSPATH\");\n            if (cp != null) {\n                commandline.createClasspath(getProject()).createPath()\n                    .append(new Path(getProject(), cp));\n            }\n            log(\"Implicitly adding \" + runtimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            commandline.createClasspath(getProject()).createPath()\n                .append(runtimeClasses);\n        }\n\n        if (getOutputFile() != null) {\n            \r\n            \r\n            \r\n            commandline.createArgument().setValue(\"-file\");\n            commandline.createArgument().setValue(outputFile.getPath());\n            \r\n        }\n\n        getWorkingPath().ifPresent(path -> {\n            for (String filepath : path.list()) {\n                File f = new File(filepath);\n\n                \r\n                \r\n                if (!f.exists() || !f.isDirectory()) {\n                    throw new BuildException(\n                        \"\\\"%s\\\" does not represent a valid directory. JDepend would fail.\",\n                        f.getPath());\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        });\n        Execute execute = new Execute(new LogStreamHandler(this,\n            Project.MSG_INFO, Project.MSG_WARN), watchdog);\n        execute.setCommandline(commandline.getCommandline());\n        if (getDir() != null) {\n            execute.setWorkingDirectory(getDir());\n            execute.setAntRun(getProject());\n        }\n\n        if (getOutputFile() != null) {\n            log(\"Output to be stored in \" + getOutputFile().getPath());\n        }\n        log(commandline.describeCommand(), Project.MSG_VERBOSE);\n        try {\n            return execute.execute();\n        } catch (IOException e) {\n            throw new BuildException(\"Process fork failed.\", e, getLocation());\n        }\n    }\n","date":"2018-04-06 20:50:56","endLine":617,"groupId":"10394","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"executeAsForked","params":"(CommandlineJavacommandline@ExecuteWatchdogwatchdog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/17/fd3af335577609df55ba89bf879be48be57385.src","preCode":"    public int executeAsForked(CommandlineJava commandline,\n                               ExecuteWatchdog watchdog) throws BuildException {\n        runtimeClasses = new Path(getProject());\n        addClasspathEntry(\"/jdepend/textui/JDepend.class\");\n\n        \r\n        createClasspath();\n\n        \r\n        \r\n        if (getClasspath().toString().length() > 0) {\n            createJvmarg(commandline).setValue(\"-classpath\");\n            createJvmarg(commandline).setValue(getClasspath().toString());\n        }\n\n        if (includeRuntime) {\n            Map<String, String> env = Execute.getEnvironmentVariables();\n            String cp = env.get(\"CLASSPATH\");\n            if (cp != null) {\n                commandline.createClasspath(getProject()).createPath()\n                    .append(new Path(getProject(), cp));\n            }\n            log(\"Implicitly adding \" + runtimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            commandline.createClasspath(getProject()).createPath()\n                .append(runtimeClasses);\n        }\n\n        if (getOutputFile() != null) {\n            \r\n            \r\n            \r\n            commandline.createArgument().setValue(\"-file\");\n            commandline.createArgument().setValue(outputFile.getPath());\n            \r\n        }\n\n        getWorkingPath().ifPresent(path -> {\n            for (String filepath : path.list()) {\n                File f = new File(filepath);\n\n                \r\n                \r\n                if (!f.exists() || !f.isDirectory()) {\n                    throw new BuildException(\n                        \"\\\"%s\\\" does not represent a valid directory. JDepend would fail.\",\n                        f.getPath());\n                }\n                commandline.createArgument().setValue(f.getPath());\n            }\n        });\n        Execute execute = new Execute(new LogStreamHandler(this,\n            Project.MSG_INFO, Project.MSG_WARN), watchdog);\n        execute.setCommandline(commandline.getCommandline());\n        if (getDir() != null) {\n            execute.setWorkingDirectory(getDir());\n            execute.setAntRun(getProject());\n        }\n\n        if (getOutputFile() != null) {\n            log(\"Output to be stored in \" + getOutputFile().getPath());\n        }\n        log(commandline.describeCommand(), Project.MSG_VERBOSE);\n        try {\n            return execute.execute();\n        } catch (IOException e) {\n            throw new BuildException(\"Process fork failed.\", e, getLocation());\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/jdepend/JDependTask.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":549,"status":"M"},{"authorDate":"2017-04-13 23:15:22","commitOrder":19,"curCode":"    private void checkIncludeAntRuntime(final CommandlineJava cmd) {\n        if (includeAntRuntime) {\n            final Map<String, String> env = Execute.getEnvironmentVariables();\n            final String cp = env.get(CLASSPATH);\n            if (cp != null) {\n                cmd.createClasspath(getProject()).createPath()\n                    .append(new Path(getProject(), cp));\n            }\n            log(\"Implicitly adding \" + antRuntimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            cmd.createClasspath(getProject()).createPath()\n                .append(antRuntimeClasses);\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":1338,"groupId":"10394","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"checkIncludeAntRuntime","params":"(finalCommandlineJavacmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e3/2403c4b573b7510dffe9040af1008e886c4826.src","preCode":"    private void checkIncludeAntRuntime(final CommandlineJava cmd) {\n        if (includeAntRuntime) {\n            final Map<String, String> env = Execute.getEnvironmentVariables();\n            final String cp = env.get(CLASSPATH);\n            if (cp != null) {\n                cmd.createClasspath(getProject()).createPath()\n                    .append(new Path(getProject(), cp));\n            }\n            log(\"Implicitly adding \" + antRuntimeClasses + \" to CLASSPATH\",\n                Project.MSG_VERBOSE);\n            cmd.createClasspath(getProject()).createPath()\n                .append(antRuntimeClasses);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/junit/JUnitTask.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1325,"status":"N"}],"commitId":"30f52135af7a18cbf3f140089e90bdb39ceee134","commitMessage":"@@@Use null-or-empty pattern","date":"2018-04-06 20:50:56","modifiedFileCount":"80","status":"M","submitter":"Gintas Grigelionis"}]
