[{"authorTime":"2016-05-19 12:39:56","codes":[{"authorDate":"2014-04-19 05:00:38","commitOrder":4,"curCode":"    public void testFilesOnlyDoesntCauseRecreate() {\n        buildRule.executeTarget(\"testFilesOnlyDoesntCauseRecreateSetup\");\n        File testFile = new File(buildRule.getOutputDir(), \"test3.zip\");\n        assumeTrue(\"Could not change file modification time\",\n                testFile.setLastModified(testFile.lastModified() - (FileUtils.getFileUtils().getFileTimestampGranularity() * 5)));\n        long l = testFile.lastModified();\n\n        buildRule.executeTarget(\"testFilesOnlyDoesntCauseRecreate\");\n        assertEquals(l, testFile.lastModified());\n    }\n","date":"2014-04-19 05:00:38","endLine":185,"groupId":"4051","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilesOnlyDoesntCauseRecreate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/5a/7a3590515cc7b78270cee40fd8c726f42b8ebd.src","preCode":"    public void testFilesOnlyDoesntCauseRecreate() {\n        buildRule.executeTarget(\"testFilesOnlyDoesntCauseRecreateSetup\");\n        File testFile = new File(buildRule.getOutputDir(), \"test3.zip\");\n        assumeTrue(\"Could not change file modification time\",\n                testFile.setLastModified(testFile.lastModified() - (FileUtils.getFileUtils().getFileTimestampGranularity() * 5)));\n        long l = testFile.lastModified();\n\n        buildRule.executeTarget(\"testFilesOnlyDoesntCauseRecreate\");\n        assertEquals(l, testFile.lastModified());\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/ZipTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"NB"},{"authorDate":"2016-05-19 12:39:56","commitOrder":4,"curCode":"    public void testRegexpMapper() throws IOException {\n        buildRule.executeTarget(\"testRegexpMapper1\");\n        File testFile = new File(buildRule.getOutputDir(), \"regexp.zip\");\n        long l = testFile.lastModified();\n        buildRule.executeTarget(\"testRegexpMapper2\");\n        assertEquals(l, testFile.lastModified());\n    }\n","date":"2016-05-19 12:39:56","endLine":307,"groupId":"2657","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRegexpMapper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ef/a9f77f8ec43204b0d7d75f6fcc12514918ebd6.src","preCode":"    public void testRegexpMapper() throws IOException {\n        buildRule.executeTarget(\"testRegexpMapper1\");\n        File testFile = new File(buildRule.getOutputDir(), \"regexp.zip\");\n        long l = testFile.lastModified();\n        buildRule.executeTarget(\"testRegexpMapper2\");\n        assertEquals(l, testFile.lastModified());\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/ZipTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"B"}],"commitId":"3c37952d6955923f2aca522d63716c184f2e396b","commitMessage":"@@@Merge branch '1.9.x'\n","date":"2016-05-19 12:39:56","modifiedFileCount":"2","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2018-04-02 00:15:26","codes":[{"authorDate":"2014-04-19 05:00:38","commitOrder":5,"curCode":"    public void testFilesOnlyDoesntCauseRecreate() {\n        buildRule.executeTarget(\"testFilesOnlyDoesntCauseRecreateSetup\");\n        File testFile = new File(buildRule.getOutputDir(), \"test3.zip\");\n        assumeTrue(\"Could not change file modification time\",\n                testFile.setLastModified(testFile.lastModified() - (FileUtils.getFileUtils().getFileTimestampGranularity() * 5)));\n        long l = testFile.lastModified();\n\n        buildRule.executeTarget(\"testFilesOnlyDoesntCauseRecreate\");\n        assertEquals(l, testFile.lastModified());\n    }\n","date":"2014-04-19 05:00:38","endLine":185,"groupId":"10145","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilesOnlyDoesntCauseRecreate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/5a/7a3590515cc7b78270cee40fd8c726f42b8ebd.src","preCode":"    public void testFilesOnlyDoesntCauseRecreate() {\n        buildRule.executeTarget(\"testFilesOnlyDoesntCauseRecreateSetup\");\n        File testFile = new File(buildRule.getOutputDir(), \"test3.zip\");\n        assumeTrue(\"Could not change file modification time\",\n                testFile.setLastModified(testFile.lastModified() - (FileUtils.getFileUtils().getFileTimestampGranularity() * 5)));\n        long l = testFile.lastModified();\n\n        buildRule.executeTarget(\"testFilesOnlyDoesntCauseRecreate\");\n        assertEquals(l, testFile.lastModified());\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/ZipTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"N"},{"authorDate":"2018-04-02 00:15:26","commitOrder":5,"curCode":"    public void testRegexpMapper() {\n        buildRule.executeTarget(\"testRegexpMapper1\");\n        File testFile = new File(buildRule.getOutputDir(), \"regexp.zip\");\n        long l = testFile.lastModified();\n        buildRule.executeTarget(\"testRegexpMapper2\");\n        assertEquals(l, testFile.lastModified());\n    }\n","date":"2018-04-02 00:17:25","endLine":310,"groupId":"10145","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRegexpMapper","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/b2/e285847ae40ae67192e24558c7d7143655e4ff.src","preCode":"    public void testRegexpMapper() throws IOException {\n        buildRule.executeTarget(\"testRegexpMapper1\");\n        File testFile = new File(buildRule.getOutputDir(), \"regexp.zip\");\n        long l = testFile.lastModified();\n        buildRule.executeTarget(\"testRegexpMapper2\");\n        assertEquals(l, testFile.lastModified());\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/ZipTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"}],"commitId":"763de3630829131122fbe565b43ab0616aa60ac7","commitMessage":"@@@Remove extraneous exceptions and ?extends Object?","date":"2018-04-02 00:17:25","modifiedFileCount":"54","status":"M","submitter":"Gintas Grigelionis"}]
