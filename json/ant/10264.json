[{"authorTime":"2018-05-23 12:38:49","codes":[{"authorDate":"2018-05-23 12:38:49","commitOrder":2,"curCode":"    public void posixGroupIsTrueForSelf() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.newInstance());\n\n        File file = folder.newFile(\"f.txt\");\n        Map<String, Object> fileAttributes = Files.readAttributes(file.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long actualGid = (int) fileAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, actualGid);\n\n        GroupPrincipal actualGroup = (GroupPrincipal) fileAttributes.get(\"group\");\n        s.setGroup(actualGroup.getName());\n        assertTrue(s.isSelected(null, null, file));\n    }\n","date":"2018-05-23 12:38:49","endLine":68,"groupId":"87","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"posixGroupIsTrueForSelf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/2c/b0a213a461d41960999a8cf05939dd489b4132.src","preCode":"    public void posixGroupIsTrueForSelf() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.newInstance());\n\n        File file = folder.newFile(\"f.txt\");\n        Map<String, Object> fileAttributes = Files.readAttributes(file.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long actualGid = (int) fileAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, actualGid);\n\n        GroupPrincipal actualGroup = (GroupPrincipal) fileAttributes.get(\"group\");\n        s.setGroup(actualGroup.getName());\n        assertTrue(s.isSelected(null, null, file));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/types/selectors/PosixGroupSelectorTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"MB"},{"authorDate":"2018-05-23 12:38:49","commitOrder":2,"curCode":"    public void posixGroupFollowSymlinks() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.newInstance());\n\n        File target = new File(folder.getRoot(), \"link\");\n        Path symbolicLink = Files.createSymbolicLink(target.toPath(), TEST_FILE.toPath());\n        Map<String, Object> linkAttributes = Files.readAttributes(target.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long linkGid = (int) linkAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, linkGid);\n\n        GroupPrincipal targetGroup = Files.readAttributes(target.toPath(),\n                PosixFileAttributes.class).group();\n        GroupPrincipal linkGroup = (GroupPrincipal) linkAttributes.get(\"group\");\n        assertNotEquals(\"Same group name\", linkGroup.getName(),\n                targetGroup.getName());\n\n        s.setGroup(linkGroup.getName());\n        assertTrue(s.isSelected(null, null, symbolicLink.toFile()));\n        s.setFollowLinks(\"yes\");\n        assertFalse(s.isSelected(null, null, symbolicLink.toFile()));\n    }\n","date":"2018-05-23 12:38:49","endLine":92,"groupId":"87","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"posixGroupFollowSymlinks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/2c/b0a213a461d41960999a8cf05939dd489b4132.src","preCode":"    public void posixGroupFollowSymlinks() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.newInstance());\n\n        File target = new File(folder.getRoot(), \"link\");\n        Path symbolicLink = Files.createSymbolicLink(target.toPath(), TEST_FILE.toPath());\n        Map<String, Object> linkAttributes = Files.readAttributes(target.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long linkGid = (int) linkAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, linkGid);\n\n        GroupPrincipal targetGroup = Files.readAttributes(target.toPath(),\n                PosixFileAttributes.class).group();\n        GroupPrincipal linkGroup = (GroupPrincipal) linkAttributes.get(\"group\");\n        assertNotEquals(\"Same group name\", linkGroup.getName(),\n                targetGroup.getName());\n\n        s.setGroup(linkGroup.getName());\n        assertTrue(s.isSelected(null, null, symbolicLink.toFile()));\n        s.setFollowLinks(\"yes\");\n        assertFalse(s.isSelected(null, null, symbolicLink.toFile()));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/types/selectors/PosixGroupSelectorTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"}],"commitId":"35a84fea1a9f73e54de0207a04c12f764ac8821c","commitMessage":"@@@Bz 22370: followlinks attribute","date":"2018-05-23 12:38:49","modifiedFileCount":"6","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-05-24 01:09:18","codes":[{"authorDate":"2018-05-23 12:38:49","commitOrder":3,"curCode":"    public void posixGroupIsTrueForSelf() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.newInstance());\n\n        File file = folder.newFile(\"f.txt\");\n        Map<String, Object> fileAttributes = Files.readAttributes(file.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long actualGid = (int) fileAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, actualGid);\n\n        GroupPrincipal actualGroup = (GroupPrincipal) fileAttributes.get(\"group\");\n        s.setGroup(actualGroup.getName());\n        assertTrue(s.isSelected(null, null, file));\n    }\n","date":"2018-05-23 12:38:49","endLine":68,"groupId":"87","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"posixGroupIsTrueForSelf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/2c/b0a213a461d41960999a8cf05939dd489b4132.src","preCode":"    public void posixGroupIsTrueForSelf() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.newInstance());\n\n        File file = folder.newFile(\"f.txt\");\n        Map<String, Object> fileAttributes = Files.readAttributes(file.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long actualGid = (int) fileAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, actualGid);\n\n        GroupPrincipal actualGroup = (GroupPrincipal) fileAttributes.get(\"group\");\n        s.setGroup(actualGroup.getName());\n        assertTrue(s.isSelected(null, null, file));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/types/selectors/PosixGroupSelectorTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"},{"authorDate":"2018-05-24 01:09:18","commitOrder":3,"curCode":"    public void posixGroupFollowSymlinks() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.newInstance());\n\n        File target = new File(folder.getRoot(), \"link\");\n        Path symbolicLink = Files.createSymbolicLink(target.toPath(), TEST_FILE.toPath());\n        Map<String, Object> linkAttributes = Files.readAttributes(target.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long linkGid = (int) linkAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, linkGid);\n\n        GroupPrincipal targetGroup = Files.readAttributes(target.toPath(),\n                PosixFileAttributes.class).group();\n        GroupPrincipal linkGroup = (GroupPrincipal) linkAttributes.get(\"group\");\n        assertNotEquals(\"Same group name\", linkGroup.getName(),\n                targetGroup.getName());\n\n        s.setGroup(linkGroup.getName());\n        assertTrue(s.isSelected(null, null, symbolicLink.toFile()));\n        s.setFollowSymlinks(\"yes\");\n        assertFalse(s.isSelected(null, null, symbolicLink.toFile()));\n    }\n","date":"2018-05-24 01:09:18","endLine":92,"groupId":"87","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"posixGroupFollowSymlinks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f9/a9d622c1fd9ba0805ea9f44aceb27a19d8ee8e.src","preCode":"    public void posixGroupFollowSymlinks() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.newInstance());\n\n        File target = new File(folder.getRoot(), \"link\");\n        Path symbolicLink = Files.createSymbolicLink(target.toPath(), TEST_FILE.toPath());\n        Map<String, Object> linkAttributes = Files.readAttributes(target.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long linkGid = (int) linkAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, linkGid);\n\n        GroupPrincipal targetGroup = Files.readAttributes(target.toPath(),\n                PosixFileAttributes.class).group();\n        GroupPrincipal linkGroup = (GroupPrincipal) linkAttributes.get(\"group\");\n        assertNotEquals(\"Same group name\", linkGroup.getName(),\n                targetGroup.getName());\n\n        s.setGroup(linkGroup.getName());\n        assertTrue(s.isSelected(null, null, symbolicLink.toFile()));\n        s.setFollowLinks(\"yes\");\n        assertFalse(s.isSelected(null, null, symbolicLink.toFile()));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/types/selectors/PosixGroupSelectorTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"cd1ce377dc769671b46ca6e68adb604b0453b4a3","commitMessage":"@@@Change followlinks to followsymlinks for consistency with fileset","date":"2018-05-24 01:09:18","modifiedFileCount":"7","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-06-01 22:08:42","codes":[{"authorDate":"2018-05-23 12:38:49","commitOrder":4,"curCode":"    public void posixGroupIsTrueForSelf() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.newInstance());\n\n        File file = folder.newFile(\"f.txt\");\n        Map<String, Object> fileAttributes = Files.readAttributes(file.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long actualGid = (int) fileAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, actualGid);\n\n        GroupPrincipal actualGroup = (GroupPrincipal) fileAttributes.get(\"group\");\n        s.setGroup(actualGroup.getName());\n        assertTrue(s.isSelected(null, null, file));\n    }\n","date":"2018-05-23 12:38:49","endLine":68,"groupId":"87","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"posixGroupIsTrueForSelf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/2c/b0a213a461d41960999a8cf05939dd489b4132.src","preCode":"    public void posixGroupIsTrueForSelf() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.newInstance());\n\n        File file = folder.newFile(\"f.txt\");\n        Map<String, Object> fileAttributes = Files.readAttributes(file.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long actualGid = (int) fileAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, actualGid);\n\n        GroupPrincipal actualGroup = (GroupPrincipal) fileAttributes.get(\"group\");\n        s.setGroup(actualGroup.getName());\n        assertTrue(s.isSelected(null, null, file));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/types/selectors/PosixGroupSelectorTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"},{"authorDate":"2018-06-01 22:08:42","commitOrder":4,"curCode":"    public void posixGroupFollowSymlinks() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.newInstance());\n\n        File target = new File(folder.getRoot(), \"link\");\n        Path symbolicLink = Files.createSymbolicLink(target.toPath(), TEST_FILE.toPath());\n        Map<String, Object> linkAttributes = Files.readAttributes(target.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long linkGid = (int) linkAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, linkGid);\n\n        GroupPrincipal targetGroup = Files.readAttributes(target.toPath(),\n                PosixFileAttributes.class).group();\n        GroupPrincipal linkGroup = (GroupPrincipal) linkAttributes.get(\"group\");\n        assertNotEquals(\"Same group name\", linkGroup.getName(),\n                targetGroup.getName());\n\n        s.setGroup(linkGroup.getName());\n        assertFalse(s.isSelected(null, null, symbolicLink.toFile()));\n        s.setFollowSymlinks(false);\n        assertTrue(s.isSelected(null, null, symbolicLink.toFile()));\n    }\n","date":"2018-06-01 22:08:42","endLine":92,"groupId":"87","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"posixGroupFollowSymlinks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/fb/5cce10482c5dd38693520f95fa84a3f3b11909.src","preCode":"    public void posixGroupFollowSymlinks() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.newInstance());\n\n        File target = new File(folder.getRoot(), \"link\");\n        Path symbolicLink = Files.createSymbolicLink(target.toPath(), TEST_FILE.toPath());\n        Map<String, Object> linkAttributes = Files.readAttributes(target.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long linkGid = (int) linkAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, linkGid);\n\n        GroupPrincipal targetGroup = Files.readAttributes(target.toPath(),\n                PosixFileAttributes.class).group();\n        GroupPrincipal linkGroup = (GroupPrincipal) linkAttributes.get(\"group\");\n        assertNotEquals(\"Same group name\", linkGroup.getName(),\n                targetGroup.getName());\n\n        s.setGroup(linkGroup.getName());\n        assertTrue(s.isSelected(null, null, symbolicLink.toFile()));\n        s.setFollowSymlinks(\"yes\");\n        assertFalse(s.isSelected(null, null, symbolicLink.toFile()));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/types/selectors/PosixGroupSelectorTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"f71d39da3cdb277271095145102630f3a97372f1","commitMessage":"@@@Bz 22370: followsymlinks must default to true for consistency","date":"2018-06-01 22:08:42","modifiedFileCount":"6","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2020-07-29 21:41:59","codes":[{"authorDate":"2020-07-29 21:41:59","commitOrder":5,"curCode":"    public void posixGroupIsTrueForSelf() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.getDeclaredConstructor().newInstance());\n\n        File file = folder.newFile(\"f.txt\");\n        Map<String, Object> fileAttributes = Files.readAttributes(file.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long actualGid = (int) fileAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, actualGid);\n\n        GroupPrincipal actualGroup = (GroupPrincipal) fileAttributes.get(\"group\");\n        s.setGroup(actualGroup.getName());\n        assertTrue(s.isSelected(null, null, file));\n    }\n","date":"2020-07-29 21:41:59","endLine":85,"groupId":"10264","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"posixGroupIsTrueForSelf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/9c/05f7e0a1873e5de448967482ff6cf01490e95f.src","preCode":"    public void posixGroupIsTrueForSelf() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.newInstance());\n\n        File file = folder.newFile(\"f.txt\");\n        Map<String, Object> fileAttributes = Files.readAttributes(file.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long actualGid = (int) fileAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, actualGid);\n\n        GroupPrincipal actualGroup = (GroupPrincipal) fileAttributes.get(\"group\");\n        s.setGroup(actualGroup.getName());\n        assertTrue(s.isSelected(null, null, file));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/types/selectors/PosixGroupSelectorTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-07-29 21:41:59","commitOrder":5,"curCode":"    public void posixGroupFollowSymlinks() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.getDeclaredConstructor().newInstance());\n\n        File target = new File(folder.getRoot(), \"link\");\n        Path symbolicLink = Files.createSymbolicLink(target.toPath(), TEST_FILE.toPath());\n        Map<String, Object> linkAttributes = Files.readAttributes(target.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long linkGid = (int) linkAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, linkGid);\n\n        GroupPrincipal targetGroup = Files.readAttributes(target.toPath(),\n                PosixFileAttributes.class).group();\n        GroupPrincipal linkGroup = (GroupPrincipal) linkAttributes.get(\"group\");\n        assertNotEquals(\"Same group name\", linkGroup.getName(),\n                targetGroup.getName());\n\n        s.setGroup(linkGroup.getName());\n        assertFalse(s.isSelected(null, null, symbolicLink.toFile()));\n        s.setFollowSymlinks(false);\n        assertTrue(s.isSelected(null, null, symbolicLink.toFile()));\n    }\n","date":"2020-07-29 21:41:59","endLine":109,"groupId":"10264","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"posixGroupFollowSymlinks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/9c/05f7e0a1873e5de448967482ff6cf01490e95f.src","preCode":"    public void posixGroupFollowSymlinks() throws Exception {\n        long gid = (long) jaasProviderClass.getMethod(GROUP_GETTER)\n                .invoke(jaasProviderClass.newInstance());\n\n        File target = new File(folder.getRoot(), \"link\");\n        Path symbolicLink = Files.createSymbolicLink(target.toPath(), TEST_FILE.toPath());\n        Map<String, Object> linkAttributes = Files.readAttributes(target.toPath(),\n                \"unix:group,gid\", LinkOption.NOFOLLOW_LINKS);\n        long linkGid = (int) linkAttributes.get(\"gid\");\n        assertEquals(\"Different GIDs\", gid, linkGid);\n\n        GroupPrincipal targetGroup = Files.readAttributes(target.toPath(),\n                PosixFileAttributes.class).group();\n        GroupPrincipal linkGroup = (GroupPrincipal) linkAttributes.get(\"group\");\n        assertNotEquals(\"Same group name\", linkGroup.getName(),\n                targetGroup.getName());\n\n        s.setGroup(linkGroup.getName());\n        assertFalse(s.isSelected(null, null, symbolicLink.toFile()));\n        s.setFollowSymlinks(false);\n        assertTrue(s.isSelected(null, null, symbolicLink.toFile()));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/types/selectors/PosixGroupSelectorTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"35d9f3bc9af426f7277b08cbc0452dc65fc586b4","commitMessage":"@@@Merge pull request #133 from twogee/new-instance\n\nClass.newInstance() is deprecated in Java 9+","date":"2020-07-29 21:41:59","modifiedFileCount":"28","status":"M","submitter":"Stefan Bodewig"}]
