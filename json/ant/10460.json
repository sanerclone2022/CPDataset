[{"authorTime":"2018-08-29 17:56:38","codes":[{"authorDate":"2018-08-29 17:56:38","commitOrder":1,"curCode":"    public static List<TestDefinition> fromForkedRepresentation(final XMLStreamReader reader) throws XMLStreamException {\n        reader.require(XMLStreamConstants.START_ELEMENT, null, LD_XML_ELM_TEST_CLASSES);\n        final TestClasses testDefinition = new TestClasses();\n        \r\n        while (reader.nextTag() != XMLStreamConstants.END_ELEMENT) {\n            reader.require(XMLStreamConstants.START_ELEMENT, null, Constants.LD_XML_ELM_TEST);\n            final String testClassName = requireAttributeValue(reader, LD_XML_ATTR_CLASS_NAME);\n            testDefinition.add(new StringResource(testClassName + \".class\"));\n            final String halt = reader.getAttributeValue(null, LD_XML_ATTR_HALT_ON_FAILURE);\n            if (halt != null) {\n                testDefinition.setHaltOnFailure(Boolean.parseBoolean(halt));\n            }\n            final String outDir = reader.getAttributeValue(null, LD_XML_ATTR_OUTPUT_DIRECTORY);\n            if (outDir != null) {\n                testDefinition.setOutputDir(outDir);\n            }\n            final String includeEngs = reader.getAttributeValue(null, LD_XML_ATTR_INCLUDE_ENGINES);\n            if (includeEngs != null) {\n                testDefinition.setIncludeEngines(includeEngs);\n            }\n            final String excludeEngs = reader.getAttributeValue(null, LD_XML_ATTR_EXCLUDE_ENGINES);\n            if (excludeEngs != null) {\n                testDefinition.setExcludeEngines(excludeEngs);\n            }\n            while (reader.nextTag() != XMLStreamConstants.END_ELEMENT) {\n                reader.require(XMLStreamConstants.START_ELEMENT, null, Constants.LD_XML_ELM_LISTENER);\n                testDefinition.addConfiguredListener(ListenerDefinition.fromForkedRepresentation(reader));\n            }\n            reader.require(XMLStreamConstants.END_ELEMENT, null, Constants.LD_XML_ELM_TEST);\n        }\n        reader.require(XMLStreamConstants.END_ELEMENT, null, LD_XML_ELM_TEST_CLASSES);\n        return Collections.singletonList(testDefinition);\n    }\n","date":"2018-10-29 21:18:37","endLine":143,"groupId":"5175","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fromForkedRepresentation","params":"(finalXMLStreamReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f1/19a348b4965af05dcad836ed0f1284c98eda85.src","preCode":"    public static List<TestDefinition> fromForkedRepresentation(final XMLStreamReader reader) throws XMLStreamException {\n        reader.require(XMLStreamConstants.START_ELEMENT, null, LD_XML_ELM_TEST_CLASSES);\n        final TestClasses testDefinition = new TestClasses();\n        \r\n        while (reader.nextTag() != XMLStreamConstants.END_ELEMENT) {\n            reader.require(XMLStreamConstants.START_ELEMENT, null, Constants.LD_XML_ELM_TEST);\n            final String testClassName = requireAttributeValue(reader, LD_XML_ATTR_CLASS_NAME);\n            testDefinition.add(new StringResource(testClassName + \".class\"));\n            final String halt = reader.getAttributeValue(null, LD_XML_ATTR_HALT_ON_FAILURE);\n            if (halt != null) {\n                testDefinition.setHaltOnFailure(Boolean.parseBoolean(halt));\n            }\n            final String outDir = reader.getAttributeValue(null, LD_XML_ATTR_OUTPUT_DIRECTORY);\n            if (outDir != null) {\n                testDefinition.setOutputDir(outDir);\n            }\n            final String includeEngs = reader.getAttributeValue(null, LD_XML_ATTR_INCLUDE_ENGINES);\n            if (includeEngs != null) {\n                testDefinition.setIncludeEngines(includeEngs);\n            }\n            final String excludeEngs = reader.getAttributeValue(null, LD_XML_ATTR_EXCLUDE_ENGINES);\n            if (excludeEngs != null) {\n                testDefinition.setExcludeEngines(excludeEngs);\n            }\n            while (reader.nextTag() != XMLStreamConstants.END_ELEMENT) {\n                reader.require(XMLStreamConstants.START_ELEMENT, null, Constants.LD_XML_ELM_LISTENER);\n                testDefinition.addConfiguredListener(ListenerDefinition.fromForkedRepresentation(reader));\n            }\n            reader.require(XMLStreamConstants.END_ELEMENT, null, Constants.LD_XML_ELM_TEST);\n        }\n        reader.require(XMLStreamConstants.END_ELEMENT, null, LD_XML_ELM_TEST_CLASSES);\n        return Collections.singletonList(testDefinition);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/junitlauncher/confined/TestClasses.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"},{"authorDate":"2018-08-29 17:56:38","commitOrder":1,"curCode":"    public static TestDefinition fromForkedRepresentation(final XMLStreamReader reader) throws XMLStreamException {\n        reader.require(XMLStreamConstants.START_ELEMENT, null, LD_XML_ELM_TEST);\n        final SingleTestClass testDefinition = new SingleTestClass();\n        final String testClassName = requireAttributeValue(reader, LD_XML_ATTR_CLASS_NAME);\n        testDefinition.setName(testClassName);\n        final String methodNames = reader.getAttributeValue(null, LD_XML_ATTR_METHODS);\n        if (methodNames != null) {\n            testDefinition.setMethods(methodNames);\n        }\n        final String halt = reader.getAttributeValue(null, LD_XML_ATTR_HALT_ON_FAILURE);\n        if (halt != null) {\n            testDefinition.setHaltOnFailure(Boolean.parseBoolean(halt));\n        }\n        final String outDir = reader.getAttributeValue(null, LD_XML_ATTR_OUTPUT_DIRECTORY);\n        if (outDir != null) {\n            testDefinition.setOutputDir(outDir);\n        }\n        final String includeEngs = reader.getAttributeValue(null, LD_XML_ATTR_INCLUDE_ENGINES);\n        if (includeEngs != null) {\n            testDefinition.setIncludeEngines(includeEngs);\n        }\n        final String excludeEngs = reader.getAttributeValue(null, LD_XML_ATTR_EXCLUDE_ENGINES);\n        if (excludeEngs != null) {\n            testDefinition.setExcludeEngines(excludeEngs);\n        }\n        while (reader.nextTag() != XMLStreamConstants.END_ELEMENT) {\n            reader.require(XMLStreamConstants.START_ELEMENT, null, Constants.LD_XML_ELM_LISTENER);\n            testDefinition.addConfiguredListener(ListenerDefinition.fromForkedRepresentation(reader));\n        }\n        return testDefinition;\n    }\n","date":"2018-10-29 21:18:37","endLine":162,"groupId":"7144","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fromForkedRepresentation","params":"(finalXMLStreamReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7c/0186ff37f5cf3f14305464811622988f61ec5a.src","preCode":"    public static TestDefinition fromForkedRepresentation(final XMLStreamReader reader) throws XMLStreamException {\n        reader.require(XMLStreamConstants.START_ELEMENT, null, LD_XML_ELM_TEST);\n        final SingleTestClass testDefinition = new SingleTestClass();\n        final String testClassName = requireAttributeValue(reader, LD_XML_ATTR_CLASS_NAME);\n        testDefinition.setName(testClassName);\n        final String methodNames = reader.getAttributeValue(null, LD_XML_ATTR_METHODS);\n        if (methodNames != null) {\n            testDefinition.setMethods(methodNames);\n        }\n        final String halt = reader.getAttributeValue(null, LD_XML_ATTR_HALT_ON_FAILURE);\n        if (halt != null) {\n            testDefinition.setHaltOnFailure(Boolean.parseBoolean(halt));\n        }\n        final String outDir = reader.getAttributeValue(null, LD_XML_ATTR_OUTPUT_DIRECTORY);\n        if (outDir != null) {\n            testDefinition.setOutputDir(outDir);\n        }\n        final String includeEngs = reader.getAttributeValue(null, LD_XML_ATTR_INCLUDE_ENGINES);\n        if (includeEngs != null) {\n            testDefinition.setIncludeEngines(includeEngs);\n        }\n        final String excludeEngs = reader.getAttributeValue(null, LD_XML_ATTR_EXCLUDE_ENGINES);\n        if (excludeEngs != null) {\n            testDefinition.setExcludeEngines(excludeEngs);\n        }\n        while (reader.nextTag() != XMLStreamConstants.END_ELEMENT) {\n            reader.require(XMLStreamConstants.START_ELEMENT, null, Constants.LD_XML_ELM_LISTENER);\n            testDefinition.addConfiguredListener(ListenerDefinition.fromForkedRepresentation(reader));\n        }\n        return testDefinition;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/junitlauncher/confined/SingleTestClass.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"B"}],"commitId":"0cb9d22b77dda1dcabba91d4c2a1616d0042d16c","commitMessage":"@@@[junitlauncher] Allow JUnit libraries to be part of the task's classpath instead of mandating it to be part of Ant's runtime classpath\n","date":"2018-10-29 21:18:37","modifiedFileCount":"5","status":"B","submitter":"Jaikiran Pai"},{"authorTime":"2018-08-29 17:56:38","codes":[{"authorDate":"2019-05-21 17:17:29","commitOrder":2,"curCode":"    public static List<TestDefinition> fromForkedRepresentation(final XMLStreamReader reader) throws XMLStreamException {\n        reader.require(XMLStreamConstants.START_ELEMENT, null, LD_XML_ELM_TEST_CLASSES);\n        final List<TestDefinition> testDefinitions = new ArrayList<>();\n        \r\n        while (reader.nextTag() != XMLStreamConstants.END_ELEMENT) {\n            final SingleTestClass testDefinition = new SingleTestClass();\n            reader.require(XMLStreamConstants.START_ELEMENT, null, Constants.LD_XML_ELM_TEST);\n            final String testClassName = requireAttributeValue(reader, LD_XML_ATTR_CLASS_NAME);\n            testDefinition.setName(testClassName);\n            final String halt = reader.getAttributeValue(null, LD_XML_ATTR_HALT_ON_FAILURE);\n            if (halt != null) {\n                testDefinition.setHaltOnFailure(Boolean.parseBoolean(halt));\n            }\n            final String outDir = reader.getAttributeValue(null, LD_XML_ATTR_OUTPUT_DIRECTORY);\n            if (outDir != null) {\n                testDefinition.setOutputDir(outDir);\n            }\n            final String includeEngs = reader.getAttributeValue(null, LD_XML_ATTR_INCLUDE_ENGINES);\n            if (includeEngs != null) {\n                testDefinition.setIncludeEngines(includeEngs);\n            }\n            final String excludeEngs = reader.getAttributeValue(null, LD_XML_ATTR_EXCLUDE_ENGINES);\n            if (excludeEngs != null) {\n                testDefinition.setExcludeEngines(excludeEngs);\n            }\n            while (reader.nextTag() != XMLStreamConstants.END_ELEMENT) {\n                reader.require(XMLStreamConstants.START_ELEMENT, null, Constants.LD_XML_ELM_LISTENER);\n                testDefinition.addConfiguredListener(ListenerDefinition.fromForkedRepresentation(reader));\n            }\n            reader.require(XMLStreamConstants.END_ELEMENT, null, Constants.LD_XML_ELM_TEST);\n            testDefinitions.add(testDefinition);\n        }\n        reader.require(XMLStreamConstants.END_ELEMENT, null, LD_XML_ELM_TEST_CLASSES);\n        return Collections.unmodifiableList(testDefinitions);\n    }\n","date":"2019-05-21 17:20:49","endLine":145,"groupId":"10460","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fromForkedRepresentation","params":"(finalXMLStreamReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/96/eddcdc841af1ef8de9fcc91ea01307f73bfd3d.src","preCode":"    public static List<TestDefinition> fromForkedRepresentation(final XMLStreamReader reader) throws XMLStreamException {\n        reader.require(XMLStreamConstants.START_ELEMENT, null, LD_XML_ELM_TEST_CLASSES);\n        final TestClasses testDefinition = new TestClasses();\n        \r\n        while (reader.nextTag() != XMLStreamConstants.END_ELEMENT) {\n            reader.require(XMLStreamConstants.START_ELEMENT, null, Constants.LD_XML_ELM_TEST);\n            final String testClassName = requireAttributeValue(reader, LD_XML_ATTR_CLASS_NAME);\n            testDefinition.add(new StringResource(testClassName + \".class\"));\n            final String halt = reader.getAttributeValue(null, LD_XML_ATTR_HALT_ON_FAILURE);\n            if (halt != null) {\n                testDefinition.setHaltOnFailure(Boolean.parseBoolean(halt));\n            }\n            final String outDir = reader.getAttributeValue(null, LD_XML_ATTR_OUTPUT_DIRECTORY);\n            if (outDir != null) {\n                testDefinition.setOutputDir(outDir);\n            }\n            final String includeEngs = reader.getAttributeValue(null, LD_XML_ATTR_INCLUDE_ENGINES);\n            if (includeEngs != null) {\n                testDefinition.setIncludeEngines(includeEngs);\n            }\n            final String excludeEngs = reader.getAttributeValue(null, LD_XML_ATTR_EXCLUDE_ENGINES);\n            if (excludeEngs != null) {\n                testDefinition.setExcludeEngines(excludeEngs);\n            }\n            while (reader.nextTag() != XMLStreamConstants.END_ELEMENT) {\n                reader.require(XMLStreamConstants.START_ELEMENT, null, Constants.LD_XML_ELM_LISTENER);\n                testDefinition.addConfiguredListener(ListenerDefinition.fromForkedRepresentation(reader));\n            }\n            reader.require(XMLStreamConstants.END_ELEMENT, null, Constants.LD_XML_ELM_TEST);\n        }\n        reader.require(XMLStreamConstants.END_ELEMENT, null, LD_XML_ELM_TEST_CLASSES);\n        return Collections.singletonList(testDefinition);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/junitlauncher/confined/TestClasses.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2018-08-29 17:56:38","commitOrder":2,"curCode":"    public static TestDefinition fromForkedRepresentation(final XMLStreamReader reader) throws XMLStreamException {\n        reader.require(XMLStreamConstants.START_ELEMENT, null, LD_XML_ELM_TEST);\n        final SingleTestClass testDefinition = new SingleTestClass();\n        final String testClassName = requireAttributeValue(reader, LD_XML_ATTR_CLASS_NAME);\n        testDefinition.setName(testClassName);\n        final String methodNames = reader.getAttributeValue(null, LD_XML_ATTR_METHODS);\n        if (methodNames != null) {\n            testDefinition.setMethods(methodNames);\n        }\n        final String halt = reader.getAttributeValue(null, LD_XML_ATTR_HALT_ON_FAILURE);\n        if (halt != null) {\n            testDefinition.setHaltOnFailure(Boolean.parseBoolean(halt));\n        }\n        final String outDir = reader.getAttributeValue(null, LD_XML_ATTR_OUTPUT_DIRECTORY);\n        if (outDir != null) {\n            testDefinition.setOutputDir(outDir);\n        }\n        final String includeEngs = reader.getAttributeValue(null, LD_XML_ATTR_INCLUDE_ENGINES);\n        if (includeEngs != null) {\n            testDefinition.setIncludeEngines(includeEngs);\n        }\n        final String excludeEngs = reader.getAttributeValue(null, LD_XML_ATTR_EXCLUDE_ENGINES);\n        if (excludeEngs != null) {\n            testDefinition.setExcludeEngines(excludeEngs);\n        }\n        while (reader.nextTag() != XMLStreamConstants.END_ELEMENT) {\n            reader.require(XMLStreamConstants.START_ELEMENT, null, Constants.LD_XML_ELM_LISTENER);\n            testDefinition.addConfiguredListener(ListenerDefinition.fromForkedRepresentation(reader));\n        }\n        return testDefinition;\n    }\n","date":"2018-10-29 21:18:37","endLine":162,"groupId":"10460","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fromForkedRepresentation","params":"(finalXMLStreamReaderreader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7c/0186ff37f5cf3f14305464811622988f61ec5a.src","preCode":"    public static TestDefinition fromForkedRepresentation(final XMLStreamReader reader) throws XMLStreamException {\n        reader.require(XMLStreamConstants.START_ELEMENT, null, LD_XML_ELM_TEST);\n        final SingleTestClass testDefinition = new SingleTestClass();\n        final String testClassName = requireAttributeValue(reader, LD_XML_ATTR_CLASS_NAME);\n        testDefinition.setName(testClassName);\n        final String methodNames = reader.getAttributeValue(null, LD_XML_ATTR_METHODS);\n        if (methodNames != null) {\n            testDefinition.setMethods(methodNames);\n        }\n        final String halt = reader.getAttributeValue(null, LD_XML_ATTR_HALT_ON_FAILURE);\n        if (halt != null) {\n            testDefinition.setHaltOnFailure(Boolean.parseBoolean(halt));\n        }\n        final String outDir = reader.getAttributeValue(null, LD_XML_ATTR_OUTPUT_DIRECTORY);\n        if (outDir != null) {\n            testDefinition.setOutputDir(outDir);\n        }\n        final String includeEngs = reader.getAttributeValue(null, LD_XML_ATTR_INCLUDE_ENGINES);\n        if (includeEngs != null) {\n            testDefinition.setIncludeEngines(includeEngs);\n        }\n        final String excludeEngs = reader.getAttributeValue(null, LD_XML_ATTR_EXCLUDE_ENGINES);\n        if (excludeEngs != null) {\n            testDefinition.setExcludeEngines(excludeEngs);\n        }\n        while (reader.nextTag() != XMLStreamConstants.END_ELEMENT) {\n            reader.require(XMLStreamConstants.START_ELEMENT, null, Constants.LD_XML_ELM_LISTENER);\n            testDefinition.addConfiguredListener(ListenerDefinition.fromForkedRepresentation(reader));\n        }\n        return testDefinition;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/junitlauncher/confined/SingleTestClass.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"N"}],"commitId":"03a718d88dbc5c15e2085eaa292b160c8608b998","commitMessage":"@@@bz-63446 [junitlauncher] Create the right number of listeners in the test definition representing the fork mode of \"testclasses\"\n\nPatch contributed by mseele@guh-software.de as an attachment to\nthe linked bugzilla\n","date":"2019-05-21 17:20:49","modifiedFileCount":"1","status":"M","submitter":"Jaikiran Pai"}]
