[{"authorTime":"2003-07-23 22:12:12","codes":[{"authorDate":"2003-07-23 22:12:12","commitOrder":10,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument().setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n        \n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\" \n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        File javaFile = null;\n\n        \r\n        if (outputDirectory == null) {\n            javaFile = new File(createOutputFileName(target, outputFile, \n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n \n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n \n            javaFile = new File(createOutputFileName(target, outputFile, \n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome, \n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","date":"2003-07-23 22:12:12","endLine":299,"groupId":"7297","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/d2/ea187b475dbbaf4a59bed949fb2a8fb897c13a.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument().setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n        \n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\" \n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        File javaFile = null;\n\n        \r\n        if (outputDirectory == null) {\n            javaFile = new File(createOutputFileName(target, outputFile, \n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n \n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n \n            javaFile = new File(createOutputFileName(target, outputFile, \n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome, \n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJTree.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"MB"},{"authorDate":"2003-07-23 22:12:12","commitOrder":10,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument()\n                .setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\" \n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(target, outputFile, \n                                                      plainText));\n\n        if (javaFile.exists()\n             && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome, \n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","date":"2003-07-23 22:12:12","endLine":203,"groupId":"910","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/32/60bfd99dac00d2eb09c621af550c17b9e18470.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument()\n                .setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\" \n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(target, outputFile, \n                                                      plainText));\n\n        if (javaFile.exists()\n             && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome, \n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJDoc.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"B"}],"commitId":"2366612c9c9ca8e538fd8faaec24184bc5b96c73","commitMessage":"@@@New task <jjdoc>.\n\nNew attribute outputfile for <jjtree>.\n\nPR: 21526\nSubmitted by:\tJene Jasper <jjasper at abz dot nl>\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@274913 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2003-07-23 22:12:12","modifiedFileCount":"2","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2003-07-25 20:14:44","codes":[{"authorDate":"2003-07-25 20:14:44","commitOrder":11,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument().setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\"\n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        File javaFile = null;\n\n        \r\n        if (outputDirectory == null) {\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome,\n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (Execute.isFailure(process.execute())) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","date":"2003-07-25 20:14:44","endLine":299,"groupId":"7297","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/fa/8002baa72eb52af151fb0e6797b2279639fcb5.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument().setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\"\n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        File javaFile = null;\n\n        \r\n        if (outputDirectory == null) {\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome,\n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJTree.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"},{"authorDate":"2003-07-25 20:14:44","commitOrder":11,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument()\n                .setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\" \n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(target, outputFile, \n                                                      plainText));\n\n        if (javaFile.exists()\n             && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome, \n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (Execute.isFailure(process.execute())) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","date":"2003-07-25 20:14:44","endLine":203,"groupId":"910","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/07/aa534fed9043b4f2dce4060be1c1b049fe734c.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument()\n                .setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\" \n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(target, outputFile, \n                                                      plainText));\n\n        if (javaFile.exists()\n             && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome, \n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJDoc.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"d47dfcbc98b247c96b409f811a8a5a045e58cdc7","commitMessage":"@@@Use Execute.isFailure\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@274951 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2003-07-25 20:14:44","modifiedFileCount":"32","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2003-08-01 18:08:12","codes":[{"authorDate":"2003-08-01 18:08:12","commitOrder":12,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument().setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\"\n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        File javaFile = null;\n\n        \r\n        if (outputDirectory == null) {\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome,\n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","date":"2003-08-01 18:08:12","endLine":299,"groupId":"7297","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/9b/1377973dc786dfe7f75910e987574564c2c310.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument().setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\"\n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        File javaFile = null;\n\n        \r\n        if (outputDirectory == null) {\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome,\n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (Execute.isFailure(process.execute())) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJTree.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"},{"authorDate":"2003-08-01 18:08:12","commitOrder":12,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument()\n                .setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\" \n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(target, outputFile, \n                                                      plainText));\n\n        if (javaFile.exists()\n             && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome, \n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","date":"2003-08-01 18:08:12","endLine":203,"groupId":"910","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/32/60bfd99dac00d2eb09c621af550c17b9e18470.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument()\n                .setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\" \n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(target, outputFile, \n                                                      plainText));\n\n        if (javaFile.exists()\n             && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome, \n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (Execute.isFailure(process.execute())) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJDoc.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"e67a40fbb339967749e3c2f6e20d83cccbb22c58","commitMessage":"@@@Revert part of the commit that made tasks use Execute#isFailure.\n\nOn OpenVMS the Java VM will exit with a return code of 0 on success. \neven though this is going to signal a failure for the OS.  All tasks\nthat spawn new VMs have now been reverted to explicitly check for\nretCode != 0 instead of Execite.isFailure(retCode).\n\nWe could as well introduce Execute#isJavaFailure or something like\nthis in case future VM's on OpenVMS will start to do the right thing.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@275005 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2003-08-01 18:08:12","modifiedFileCount":"9","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2003-08-01 18:08:12","codes":[{"authorDate":"2003-08-14 22:52:42","commitOrder":13,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument().setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        File javaFile = null;\n\n        \r\n        if (outputDirectory == null) {\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + getDefaultOutputDirectory());\n\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\"\n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome,\n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","date":"2003-08-14 22:52:42","endLine":305,"groupId":"7558","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/82/d6e95e7762f51251d6de4070dbd1b25ef2788c.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument().setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\"\n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        File javaFile = null;\n\n        \r\n        if (outputDirectory == null) {\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome,\n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJTree.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"},{"authorDate":"2003-08-01 18:08:12","commitOrder":13,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument()\n                .setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\" \n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(target, outputFile, \n                                                      plainText));\n\n        if (javaFile.exists()\n             && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome, \n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","date":"2003-08-01 18:08:12","endLine":203,"groupId":"910","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/32/60bfd99dac00d2eb09c621af550c17b9e18470.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument()\n                .setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\" \n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(target, outputFile, \n                                                      plainText));\n\n        if (javaFile.exists()\n             && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome, \n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJDoc.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"}],"commitId":"58968aaa63891f65d5a9a7197310471fbc21f4e1","commitMessage":"@@@Make <jjtree>'s outputdirectory and outputfile attributes work as\nexpected (i.e. consistent with the command line of jjtree).\n\nPR: 21526\nSubmitted by:\tJene Jasper <jjasper at abz dot nl>\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@275090 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2003-08-14 22:52:42","modifiedFileCount":"1","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2004-07-30 18:55:34","codes":[{"authorDate":"2004-07-30 18:55:34","commitOrder":14,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument().setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        File javaFile = null;\n\n        \r\n        if (outputDirectory == null) {\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + getDefaultOutputDirectory());\n\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\"\n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        cmdl.setClassname(JavaCC.getMainClass(classpath,\n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","date":"2004-07-30 18:55:34","endLine":265,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ec/9bc460128fa15a8a4cc4e055801a19049d6d85.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument().setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        File javaFile = null;\n\n        \r\n        if (outputDirectory == null) {\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + getDefaultOutputDirectory());\n\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\"\n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome,\n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJTree.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"},{"authorDate":"2004-07-30 18:55:34","commitOrder":14,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument()\n                .setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\"\n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(target, outputFile,\n                                                      plainText));\n\n        if (javaFile.exists()\n             && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n        \n        cmdl.setClassname(JavaCC.getMainClass(classpath,\n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","date":"2004-07-30 18:55:34","endLine":162,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/c9/d786f763ab14a9d3cd541e178654bc0b1976fd.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument()\n                .setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\"\n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(target, outputFile,\n                                                      plainText));\n\n        if (javaFile.exists()\n             && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        cmdl.setClassname(JavaCC.getMainClass(javaccHome,\n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJDoc.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"22b84e3a90aa69d0b0de53d108af5b9caf75a59a","commitMessage":"@@@Base version decision on classpath instead of archive names.  this allows Gump to effectivly ignore javacchome\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@276736 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2004-07-30 18:55:34","modifiedFileCount":"3","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2004-11-15 22:52:27","codes":[{"authorDate":"2004-11-15 22:52:27","commitOrder":15,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument().setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (targetFile == null || !targetFile.isFile()) {\n            throw new BuildException(\"Invalid target: \" + targetFile);\n        }\n\n        File javaFile = null;\n\n        \r\n        if (outputDirectory == null) {\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + getDefaultOutputDirectory());\n\n            javaFile = new File(createOutputFileName(targetFile, outputFile,\n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n\n            javaFile = new File(createOutputFileName(targetFile, outputFile,\n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && targetFile.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + targetFile + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\"\n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        cmdl.createArgument().setValue(targetFile.getAbsolutePath());\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        cmdl.setClassname(JavaCC.getMainClass(classpath,\n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","date":"2004-11-15 22:52:27","endLine":265,"groupId":"6205","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/37/21bc8ba94c064b5bdafa4f98dd452c445a4482.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument().setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        File javaFile = null;\n\n        \r\n        if (outputDirectory == null) {\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + getDefaultOutputDirectory());\n\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n\n            javaFile = new File(createOutputFileName(target, outputFile,\n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\"\n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        cmdl.setClassname(JavaCC.getMainClass(classpath,\n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJTree.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"},{"authorDate":"2004-11-15 22:52:27","commitOrder":15,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument()\n                .setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (targetFile == null || !targetFile.isFile()) {\n            throw new BuildException(\"Invalid target: \" + targetFile);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\"\n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(targetFile, outputFile,\n                                                      plainText));\n\n        if (javaFile.exists()\n             && targetFile.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + targetFile + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(targetFile.getAbsolutePath());\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n        \n        cmdl.setClassname(JavaCC.getMainClass(classpath,\n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","date":"2004-11-15 22:52:27","endLine":162,"groupId":"1843","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f1/3f81b3848657a98e0ae57e1693a79e5ee38956.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument()\n                .setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (target == null || !target.isFile()) {\n            throw new BuildException(\"Invalid target: \" + target);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\"\n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(target, outputFile,\n                                                      plainText));\n\n        if (javaFile.exists()\n             && target.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + target + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(target.getAbsolutePath());\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n        \n        cmdl.setClassname(JavaCC.getMainClass(classpath,\n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJDoc.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"bcc7e3dff34ce66d4f1af34c5d5fbb1603808210","commitMessage":"@@@More Jikes warnings\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@277036 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2004-11-15 22:52:27","modifiedFileCount":"14","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2011-01-05 19:18:26","codes":[{"authorDate":"2011-01-05 19:18:26","commitOrder":16,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument().setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (targetFile == null || !targetFile.isFile()) {\n            throw new BuildException(\"Invalid target: \" + targetFile);\n        }\n\n        File javaFile = null;\n\n        \r\n        if (outputDirectory == null) {\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + getDefaultOutputDirectory());\n\n            javaFile = new File(createOutputFileName(targetFile, outputFile,\n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n\n            javaFile = new File(createOutputFileName(targetFile, outputFile,\n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && targetFile.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + targetFile + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\"\n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        cmdl.createArgument().setValue(targetFile.getAbsolutePath());\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        cmdl.setClassname(JavaCC.getMainClass(classpath,\n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        cmdl.setMaxmemory(maxMemory);\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","date":"2011-01-05 19:18:26","endLine":300,"groupId":"6205","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f9/f23e51b2ea3259ae54e18703577aebfbe7e129.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument().setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (targetFile == null || !targetFile.isFile()) {\n            throw new BuildException(\"Invalid target: \" + targetFile);\n        }\n\n        File javaFile = null;\n\n        \r\n        if (outputDirectory == null) {\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + getDefaultOutputDirectory());\n\n            javaFile = new File(createOutputFileName(targetFile, outputFile,\n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n\n            javaFile = new File(createOutputFileName(targetFile, outputFile,\n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && targetFile.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + targetFile + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\"\n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        cmdl.createArgument().setValue(targetFile.getAbsolutePath());\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        cmdl.setClassname(JavaCC.getMainClass(classpath,\n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJTree.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"},{"authorDate":"2011-01-05 19:18:26","commitOrder":16,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument()\n                .setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (targetFile == null || !targetFile.isFile()) {\n            throw new BuildException(\"Invalid target: \" + targetFile);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\"\n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(targetFile, outputFile,\n                                                      plainText));\n\n        if (javaFile.exists()\n             && targetFile.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + targetFile + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(targetFile.getAbsolutePath());\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        cmdl.setClassname(JavaCC.getMainClass(classpath,\n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        cmdl.setMaxmemory(maxMemory);\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","date":"2011-01-05 19:18:26","endLine":187,"groupId":"1843","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/a4/dc0f4848de661796666c257acdff1c795d47d5.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument()\n                .setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (targetFile == null || !targetFile.isFile()) {\n            throw new BuildException(\"Invalid target: \" + targetFile);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\"\n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(targetFile, outputFile,\n                                                      plainText));\n\n        if (javaFile.exists()\n             && targetFile.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + targetFile + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(targetFile.getAbsolutePath());\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        cmdl.setClassname(JavaCC.getMainClass(classpath,\n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-mx140M\");\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJDoc.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"998309cd5343cfcf3db91c335f4b0bd92073b7e9","commitMessage":"@@@add maxmemory attribute to javacc and friends.  PR 50513\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@1055418 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-01-05 19:18:26","modifiedFileCount":"3","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":17,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        optionalAttrs.forEach((name, value) -> cmdl.createArgument()\n            .setValue(\"-\" + name + \":\" + value.toString()));\n\n        if (targetFile == null || !targetFile.isFile()) {\n            throw new BuildException(\"Invalid target: %s\", targetFile);\n        }\n\n        File javaFile;\n\n        \r\n        if (outputDirectory == null) {\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + getDefaultOutputDirectory());\n\n            javaFile = new File(createOutputFileName(targetFile, outputFile,\n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n\n            javaFile = new File(createOutputFileName(targetFile, outputFile,\n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && targetFile.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + targetFile + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\"\n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        cmdl.createArgument().setValue(targetFile.getAbsolutePath());\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        cmdl.setClassname(JavaCC.getMainClass(classpath,\n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        cmdl.setMaxmemory(maxMemory);\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":297,"groupId":"10464","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e3/bca20ccdebfda0060fd150973e7b229da04f45.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument().setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (targetFile == null || !targetFile.isFile()) {\n            throw new BuildException(\"Invalid target: \" + targetFile);\n        }\n\n        File javaFile = null;\n\n        \r\n        if (outputDirectory == null) {\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + getDefaultOutputDirectory());\n\n            javaFile = new File(createOutputFileName(targetFile, outputFile,\n                                                     null));\n        } else {\n            if (!outputDirectory.isDirectory()) {\n                throw new BuildException(\"'outputdirectory' \" + outputDirectory\n                                         + \" is not a directory.\");\n            }\n\n            \r\n            \r\n            cmdl.createArgument().setValue(\"-OUTPUT_DIRECTORY:\"\n                                           + outputDirectory.getAbsolutePath()\n                                             .replace('\\\\', '/'));\n\n            javaFile = new File(createOutputFileName(targetFile, outputFile,\n                                                     outputDirectory\n                                                     .getPath()));\n        }\n\n        if (javaFile.exists()\n            && targetFile.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + targetFile + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument().setValue(\"-\" + OUTPUT_FILE + \":\"\n                                           + outputFile.replace('\\\\', '/'));\n        }\n\n        cmdl.createArgument().setValue(targetFile.getAbsolutePath());\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        cmdl.setClassname(JavaCC.getMainClass(classpath,\n                                              JavaCC.TASKDEF_TYPE_JJTREE));\n\n        cmdl.setMaxmemory(maxMemory);\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJTree failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJTree\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJTree.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"},{"authorDate":"2017-04-13 23:15:22","commitOrder":17,"curCode":"    public void execute() throws BuildException {\n\n        \r\n        optionalAttrs.forEach((name, value) -> cmdl.createArgument()\n            .setValue(\"-\" + name + \":\" + value.toString()));\n\n        if (targetFile == null || !targetFile.isFile()) {\n            throw new BuildException(\"Invalid target: %s\", targetFile);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\"\n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(targetFile, outputFile,\n                                                      plainText));\n\n        if (javaFile.exists()\n             && targetFile.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + targetFile + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(targetFile.getAbsolutePath());\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        cmdl.setClassname(JavaCC.getMainClass(classpath,\n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        cmdl.setMaxmemory(maxMemory);\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":183,"groupId":"10464","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/d3/aff0840b463ac063be406204c181a56641d427.src","preCode":"    public void execute() throws BuildException {\n\n        \r\n        Enumeration iter = optionalAttrs.keys();\n        while (iter.hasMoreElements()) {\n            String name  = (String) iter.nextElement();\n            Object value = optionalAttrs.get(name);\n            cmdl.createArgument()\n                .setValue(\"-\" + name + \":\" + value.toString());\n        }\n\n        if (targetFile == null || !targetFile.isFile()) {\n            throw new BuildException(\"Invalid target: \" + targetFile);\n        }\n\n        if (outputFile != null) {\n            cmdl.createArgument() .setValue(\"-\" + OUTPUT_FILE + \":\"\n                                            + outputFile.replace('\\\\', '/'));\n        }\n\n        \r\n        File javaFile = new File(createOutputFileName(targetFile, outputFile,\n                                                      plainText));\n\n        if (javaFile.exists()\n             && targetFile.lastModified() < javaFile.lastModified()) {\n            log(\"Target is already built - skipping (\" + targetFile + \")\",\n                Project.MSG_VERBOSE);\n            return;\n        }\n\n        cmdl.createArgument().setValue(targetFile.getAbsolutePath());\n\n        final Path classpath = cmdl.createClasspath(getProject());\n        final File javaccJar = JavaCC.getArchiveFile(javaccHome);\n        classpath.createPathElement().setPath(javaccJar.getAbsolutePath());\n        classpath.addJavaRuntime();\n\n        cmdl.setClassname(JavaCC.getMainClass(classpath,\n                                              JavaCC.TASKDEF_TYPE_JJDOC));\n\n        cmdl.setMaxmemory(maxMemory);\n        final Commandline.Argument arg = cmdl.createVmArgument();\n        arg.setValue(\"-Dinstall.root=\" + javaccHome.getAbsolutePath());\n\n        final Execute process =\n            new Execute(new LogStreamHandler(this,\n                                             Project.MSG_INFO,\n                                             Project.MSG_INFO),\n                        null);\n        log(cmdl.describeCommand(), Project.MSG_VERBOSE);\n        process.setCommandline(cmdl.getCommandline());\n\n        try {\n            if (process.execute() != 0) {\n                throw new BuildException(\"JJDoc failed.\");\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Failed to launch JJDoc\", e);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/javacc/JJDoc.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"b7d1e9bde44cb8e5233d6e70bb96e14cbb2f3e2d","commitMessage":"@@@java 5-8\n","date":"2017-04-13 23:15:22","modifiedFileCount":"609","status":"M","submitter":"Matt Benson"}]
