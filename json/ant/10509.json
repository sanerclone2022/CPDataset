[{"authorTime":"2005-10-06 11:51:48","codes":[{"authorDate":"2003-07-24 21:14:21","commitOrder":17,"curCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Enumeration e = fileCopyMap.keys();\n            while (e.hasMoreElements()) {\n                String fromFile = (String) e.nextElement();\n                String[] toFiles = (String[]) fileCopyMap.get(fromFile);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        fileUtils.copyFile(fromFile, toFile, executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified, inputEncoding,\n                                           outputEncoding, getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + ioe.getMessage();\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        throw new BuildException(msg, ioe, getLocation());\n                    }\n                }\n            }\n        }\n\n        if (includeEmpty) {\n            Enumeration e = dirCopyMap.elements();\n            int createCount = 0;\n            while (e.hasMoreElements()) {\n                String[] dirs = (String[]) e.nextElement();\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!d.mkdirs()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","date":"2003-07-24 21:14:21","endLine":652,"groupId":"4812","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doFileOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/5b/0c53234f02fcc5b9e446bb51a4fe4a2dbf7fdb.src","preCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Enumeration e = fileCopyMap.keys();\n            while (e.hasMoreElements()) {\n                String fromFile = (String) e.nextElement();\n                String[] toFiles = (String[]) fileCopyMap.get(fromFile);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        fileUtils.copyFile(fromFile, toFile, executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified, inputEncoding,\n                                           outputEncoding, getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + ioe.getMessage();\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        throw new BuildException(msg, ioe, getLocation());\n                    }\n                }\n            }\n        }\n\n        if (includeEmpty) {\n            Enumeration e = dirCopyMap.elements();\n            int createCount = 0;\n            while (e.hasMoreElements()) {\n                String[] dirs = (String[]) e.nextElement();\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!d.mkdirs()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"NB"},{"authorDate":"2005-10-06 11:51:48","commitOrder":17,"curCode":"    protected void doResourceOperations(Map map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Iterator iter = map.keySet().iterator();\n            while (iter.hasNext()) {\n                Resource fromResource = (Resource) iter.next();\n                String[] toFiles = (String[]) map.get(fromResource);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + ioe.getMessage();\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        throw new BuildException(msg, ioe, getLocation());\n                    }\n                }\n            }\n        }\n    }\n","date":"2005-10-06 11:51:48","endLine":894,"groupId":"1305","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doResourceOperations","params":"(Mapmap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/a9/b86b775b2d0fe5efef89d8e7387bb1371ef3a5.src","preCode":"    protected void doResourceOperations(Map map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Iterator iter = map.keySet().iterator();\n            while (iter.hasNext()) {\n                Resource fromResource = (Resource) iter.next();\n                String[] toFiles = (String[]) map.get(fromResource);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + ioe.getMessage();\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        throw new BuildException(msg, ioe, getLocation());\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":842,"status":"B"}],"commitId":"5a381558aef54280f925781bed3d4c9ba7ced360","commitMessage":"@@@<copy> and <sync> can now work on non-filesystem resources as well\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@306521 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2005-10-06 11:51:48","modifiedFileCount":"4","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2005-10-06 11:51:48","codes":[{"authorDate":"2006-01-09 23:11:36","commitOrder":18,"curCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Enumeration e = fileCopyMap.keys();\n            while (e.hasMoreElements()) {\n                String fromFile = (String) e.nextElement();\n                String[] toFiles = (String[]) fileCopyMap.get(fromFile);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        fileUtils.copyFile(fromFile, toFile, executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified, inputEncoding,\n                                           outputEncoding, getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + ioe.getMessage();\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            Enumeration e = dirCopyMap.elements();\n            int createCount = 0;\n            while (e.hasMoreElements()) {\n                String[] dirs = (String[]) e.nextElement();\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!d.mkdirs()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","date":"2006-01-09 23:11:36","endLine":837,"groupId":"130","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doFileOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/4b/c0bc4dce2b90c8c3ab2f30d7c4e0ea983a8fc5.src","preCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Enumeration e = fileCopyMap.keys();\n            while (e.hasMoreElements()) {\n                String fromFile = (String) e.nextElement();\n                String[] toFiles = (String[]) fileCopyMap.get(fromFile);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        fileUtils.copyFile(fromFile, toFile, executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified, inputEncoding,\n                                           outputEncoding, getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + ioe.getMessage();\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        throw new BuildException(msg, ioe, getLocation());\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            Enumeration e = dirCopyMap.elements();\n            int createCount = 0;\n            while (e.hasMoreElements()) {\n                String[] dirs = (String[]) e.nextElement();\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!d.mkdirs()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":759,"status":"M"},{"authorDate":"2005-10-06 11:51:48","commitOrder":18,"curCode":"    protected void doResourceOperations(Map map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Iterator iter = map.keySet().iterator();\n            while (iter.hasNext()) {\n                Resource fromResource = (Resource) iter.next();\n                String[] toFiles = (String[]) map.get(fromResource);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + ioe.getMessage();\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        throw new BuildException(msg, ioe, getLocation());\n                    }\n                }\n            }\n        }\n    }\n","date":"2005-10-06 11:51:48","endLine":894,"groupId":"1305","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doResourceOperations","params":"(Mapmap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/a9/b86b775b2d0fe5efef89d8e7387bb1371ef3a5.src","preCode":"    protected void doResourceOperations(Map map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Iterator iter = map.keySet().iterator();\n            while (iter.hasNext()) {\n                Resource fromResource = (Resource) iter.next();\n                String[] toFiles = (String[]) map.get(fromResource);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + ioe.getMessage();\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        throw new BuildException(msg, ioe, getLocation());\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":842,"status":"N"}],"commitId":"c141e2c273180b94186dcb1c98eddf274077ba04","commitMessage":"@@@support failonerror when file locked or similar issue. Bugzilla report 38175.\nSubmitted by Georges-Etienne Legendre.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@367316 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-01-09 23:11:36","modifiedFileCount":"1","status":"M","submitter":"Matthew Jason Benson"},{"authorTime":"2006-01-10 01:22:17","codes":[{"authorDate":"2006-01-09 23:11:36","commitOrder":19,"curCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Enumeration e = fileCopyMap.keys();\n            while (e.hasMoreElements()) {\n                String fromFile = (String) e.nextElement();\n                String[] toFiles = (String[]) fileCopyMap.get(fromFile);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        fileUtils.copyFile(fromFile, toFile, executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified, inputEncoding,\n                                           outputEncoding, getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + ioe.getMessage();\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            Enumeration e = dirCopyMap.elements();\n            int createCount = 0;\n            while (e.hasMoreElements()) {\n                String[] dirs = (String[]) e.nextElement();\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!d.mkdirs()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","date":"2006-01-09 23:11:36","endLine":837,"groupId":"130","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doFileOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/4b/c0bc4dce2b90c8c3ab2f30d7c4e0ea983a8fc5.src","preCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Enumeration e = fileCopyMap.keys();\n            while (e.hasMoreElements()) {\n                String fromFile = (String) e.nextElement();\n                String[] toFiles = (String[]) fileCopyMap.get(fromFile);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        fileUtils.copyFile(fromFile, toFile, executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified, inputEncoding,\n                                           outputEncoding, getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + ioe.getMessage();\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            Enumeration e = dirCopyMap.elements();\n            int createCount = 0;\n            while (e.hasMoreElements()) {\n                String[] dirs = (String[]) e.nextElement();\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!d.mkdirs()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":759,"status":"N"},{"authorDate":"2006-01-10 01:22:17","commitOrder":19,"curCode":"    protected void doResourceOperations(Map map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Iterator iter = map.keySet().iterator();\n            while (iter.hasNext()) {\n                Resource fromResource = (Resource) iter.next();\n                String[] toFiles = (String[]) map.get(fromResource);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + ioe.getMessage();\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","date":"2006-01-10 01:22:17","endLine":900,"groupId":"1305","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doResourceOperations","params":"(Mapmap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/bb/90ac790066b123363f0ea0900ed8844321609e.src","preCode":"    protected void doResourceOperations(Map map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Iterator iter = map.keySet().iterator();\n            while (iter.hasNext()) {\n                Resource fromResource = (Resource) iter.next();\n                String[] toFiles = (String[]) map.get(fromResource);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + ioe.getMessage();\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        throw new BuildException(msg, ioe, getLocation());\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":845,"status":"M"}],"commitId":"f997b40b6a1d5bf6de2cc272700117f9eea1a9ec","commitMessage":"@@@repeat fix for resource operations\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@367342 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-01-10 01:22:17","modifiedFileCount":"1","status":"M","submitter":"Matthew Jason Benson"},{"authorTime":"2006-09-08 07:16:18","codes":[{"authorDate":"2006-09-08 07:16:18","commitOrder":20,"curCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Enumeration e = fileCopyMap.keys();\n            while (e.hasMoreElements()) {\n                String fromFile = (String) e.nextElement();\n                String[] toFiles = (String[]) fileCopyMap.get(fromFile);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        fileUtils.copyFile(fromFile, toFile, executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified, inputEncoding,\n                                           outputEncoding, getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            Enumeration e = dirCopyMap.elements();\n            int createCount = 0;\n            while (e.hasMoreElements()) {\n                String[] dirs = (String[]) e.nextElement();\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!d.mkdirs()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","date":"2006-09-08 07:16:18","endLine":839,"groupId":"130","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doFileOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/94/e1f982ad4ca70e5279b95b6c2ff1eca66acb5b.src","preCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Enumeration e = fileCopyMap.keys();\n            while (e.hasMoreElements()) {\n                String fromFile = (String) e.nextElement();\n                String[] toFiles = (String[]) fileCopyMap.get(fromFile);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        fileUtils.copyFile(fromFile, toFile, executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified, inputEncoding,\n                                           outputEncoding, getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + ioe.getMessage();\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            Enumeration e = dirCopyMap.elements();\n            int createCount = 0;\n            while (e.hasMoreElements()) {\n                String[] dirs = (String[]) e.nextElement();\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!d.mkdirs()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":761,"status":"M"},{"authorDate":"2006-09-08 07:16:18","commitOrder":20,"curCode":"    protected void doResourceOperations(Map map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Iterator iter = map.keySet().iterator();\n            while (iter.hasNext()) {\n                Resource fromResource = (Resource) iter.next();\n                String[] toFiles = (String[]) map.get(fromResource);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","date":"2006-09-08 07:16:18","endLine":902,"groupId":"1305","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doResourceOperations","params":"(Mapmap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/94/e1f982ad4ca70e5279b95b6c2ff1eca66acb5b.src","preCode":"    protected void doResourceOperations(Map map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Iterator iter = map.keySet().iterator();\n            while (iter.hasNext()) {\n                Resource fromResource = (Resource) iter.next();\n                String[] toFiles = (String[]) map.get(fromResource);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + ioe.getMessage();\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":847,"status":"M"}],"commitId":"c5d57a281a3b28f9d711b3f70e900333faa7c457","commitMessage":"@@@Bugzilla 40300: incorrent handling of exceptions in <copy>\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@441294 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-09-08 07:16:18","modifiedFileCount":"3","status":"M","submitter":"Peter Reilly"},{"authorTime":"2010-05-10 22:35:56","codes":[{"authorDate":"2010-05-10 22:35:56","commitOrder":21,"curCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Enumeration e = fileCopyMap.keys();\n            while (e.hasMoreElements()) {\n                String fromFile = (String) e.nextElement();\n                String[] toFiles = (String[]) fileCopyMap.get(fromFile);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           force);\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            Enumeration e = dirCopyMap.elements();\n            int createCount = 0;\n            while (e.hasMoreElements()) {\n                String[] dirs = (String[]) e.nextElement();\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!d.mkdirs()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","date":"2010-05-10 22:35:56","endLine":902,"groupId":"130","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doFileOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/6c/49fe0a2a582437610a3eea645208b075dfecf7.src","preCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Enumeration e = fileCopyMap.keys();\n            while (e.hasMoreElements()) {\n                String fromFile = (String) e.nextElement();\n                String[] toFiles = (String[]) fileCopyMap.get(fromFile);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        fileUtils.copyFile(fromFile, toFile, executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified, inputEncoding,\n                                           outputEncoding, getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            Enumeration e = dirCopyMap.elements();\n            int createCount = 0;\n            while (e.hasMoreElements()) {\n                String[] dirs = (String[]) e.nextElement();\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!d.mkdirs()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":821,"status":"M"},{"authorDate":"2010-05-10 22:35:56","commitOrder":21,"curCode":"    protected void doResourceOperations(Map map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Iterator iter = map.keySet().iterator();\n            while (iter.hasNext()) {\n                Resource fromResource = (Resource) iter.next();\n                String[] toFiles = (String[]) map.get(fromResource);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   force);\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","date":"2010-05-10 22:35:56","endLine":967,"groupId":"1305","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doResourceOperations","params":"(Mapmap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/6c/49fe0a2a582437610a3eea645208b075dfecf7.src","preCode":"    protected void doResourceOperations(Map map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Iterator iter = map.keySet().iterator();\n            while (iter.hasNext()) {\n                Resource fromResource = (Resource) iter.next();\n                String[] toFiles = (String[]) map.get(fromResource);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":910,"status":"M"}],"commitId":"35e9c976aca460e541e62bd67f88fa8482014f1e","commitMessage":"@@@be consistent when it comes to overwriting read-only files.  add an option to do just that to <copy>.  PR 49261\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@942752 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-05-10 22:35:56","modifiedFileCount":"3","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2010-05-11 17:13:27","codes":[{"authorDate":"2010-05-11 17:13:27","commitOrder":22,"curCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Enumeration e = fileCopyMap.keys();\n            while (e.hasMoreElements()) {\n                String fromFile = (String) e.nextElement();\n                String[] toFiles = (String[]) fileCopyMap.get(fromFile);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            Enumeration e = dirCopyMap.elements();\n            int createCount = 0;\n            while (e.hasMoreElements()) {\n                String[] dirs = (String[]) e.nextElement();\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!d.mkdirs()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","date":"2010-05-11 17:13:27","endLine":911,"groupId":"130","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doFileOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/06/dbfed9176c7c88c21a30d5bfbfccd4a8df922f.src","preCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Enumeration e = fileCopyMap.keys();\n            while (e.hasMoreElements()) {\n                String fromFile = (String) e.nextElement();\n                String[] toFiles = (String[]) fileCopyMap.get(fromFile);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           force);\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            Enumeration e = dirCopyMap.elements();\n            int createCount = 0;\n            while (e.hasMoreElements()) {\n                String[] dirs = (String[]) e.nextElement();\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!d.mkdirs()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":830,"status":"M"},{"authorDate":"2010-05-11 17:13:27","commitOrder":22,"curCode":"    protected void doResourceOperations(Map map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Iterator iter = map.keySet().iterator();\n            while (iter.hasNext()) {\n                Resource fromResource = (Resource) iter.next();\n                String[] toFiles = (String[]) map.get(fromResource);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","date":"2010-05-11 17:13:27","endLine":976,"groupId":"1305","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"doResourceOperations","params":"(Mapmap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/06/dbfed9176c7c88c21a30d5bfbfccd4a8df922f.src","preCode":"    protected void doResourceOperations(Map map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Iterator iter = map.keySet().iterator();\n            while (iter.hasNext()) {\n                Resource fromResource = (Resource) iter.next();\n                String[] toFiles = (String[]) map.get(fromResource);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   force);\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":919,"status":"M"}],"commitId":"508bb0dae114778e531d55d849b70e503c7c7edb","commitMessage":"@@@Make <move> behave consistently for read-only destinations.  PR 49261\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@943056 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-05-11 17:13:27","modifiedFileCount":"2","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2012-08-21 22:27:46","codes":[{"authorDate":"2012-08-21 22:27:46","commitOrder":23,"curCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {\n                String fromFile = e.getKey();\n                String[] toFiles = e.getValue();\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            int createCount = 0;\n            for (String[] dirs : dirCopyMap.values()) {\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!d.mkdirs()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","date":"2012-08-21 22:27:46","endLine":937,"groupId":"3353","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"doFileOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/da/95787399a150501ab99c63c6b5495e1976a72c.src","preCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Enumeration e = fileCopyMap.keys();\n            while (e.hasMoreElements()) {\n                String fromFile = (String) e.nextElement();\n                String[] toFiles = (String[]) fileCopyMap.get(fromFile);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            Enumeration e = dirCopyMap.elements();\n            int createCount = 0;\n            while (e.hasMoreElements()) {\n                String[] dirs = (String[]) e.nextElement();\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!d.mkdirs()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":861,"status":"M"},{"authorDate":"2012-08-21 22:27:46","commitOrder":23,"curCode":"    protected void doResourceOperations(Map<Resource, String[]> map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (Map.Entry<Resource, String[]> e : map.entrySet()) {\n                Resource fromResource = e.getKey();\n                for (String toFile : e.getValue()) {\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters = new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","date":"2012-08-21 22:27:46","endLine":994,"groupId":"8924","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"doResourceOperations","params":"(Map<Resource@String[]>map)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/da/95787399a150501ab99c63c6b5495e1976a72c.src","preCode":"    protected void doResourceOperations(Map map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            Iterator iter = map.keySet().iterator();\n            while (iter.hasNext()) {\n                Resource fromResource = (Resource) iter.next();\n                String[] toFiles = (String[]) map.get(fromResource);\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (Enumeration filterEnum = filterSets.elements();\n                            filterEnum.hasMoreElements();) {\n                            executionFilters\n                                .addFilterSet((FilterSet) filterEnum.nextElement());\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":945,"status":"M"}],"commitId":"da5f3bfd256e383926c6ece58dba15a7d4bd5761","commitMessage":"@@@java 5.  continued\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@1375571 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-08-21 22:27:46","modifiedFileCount":"78","status":"M","submitter":"Matthew Jason Benson"},{"authorTime":"2012-08-21 22:27:46","codes":[{"authorDate":"2013-12-31 19:36:53","commitOrder":24,"curCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {\n                String fromFile = e.getKey();\n                String[] toFiles = e.getValue();\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            int createCount = 0;\n            for (String[] dirs : dirCopyMap.values()) {\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!(d.mkdirs() || d.isDirectory())) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","date":"2013-12-31 19:36:53","endLine":937,"groupId":"3353","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"doFileOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/2d/72ed69f22bee311ce08a82cca76f721436bb5c.src","preCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {\n                String fromFile = e.getKey();\n                String[] toFiles = e.getValue();\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            int createCount = 0;\n            for (String[] dirs : dirCopyMap.values()) {\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!d.mkdirs()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":861,"status":"M"},{"authorDate":"2012-08-21 22:27:46","commitOrder":24,"curCode":"    protected void doResourceOperations(Map<Resource, String[]> map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (Map.Entry<Resource, String[]> e : map.entrySet()) {\n                Resource fromResource = e.getKey();\n                for (String toFile : e.getValue()) {\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters = new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","date":"2012-08-21 22:27:46","endLine":994,"groupId":"8924","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"doResourceOperations","params":"(Map<Resource@String[]>map)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/da/95787399a150501ab99c63c6b5495e1976a72c.src","preCode":"    protected void doResourceOperations(Map<Resource, String[]> map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (Map.Entry<Resource, String[]> e : map.entrySet()) {\n                Resource fromResource = e.getKey();\n                for (String toFile : e.getValue()) {\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters = new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":945,"status":"N"}],"commitId":"234c1d9ff4b5e2f04ee8a4fd1cde9c78b9aa3cd8","commitMessage":"@@@weed out race-condition in mkdirs calls inspired by PR 55290 and Matthias Bhend's suggestion\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@1554403 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-12-31 19:36:53","modifiedFileCount":"12","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2014-01-05 00:20:00","codes":[{"authorDate":"2014-01-05 00:20:00","commitOrder":25,"curCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {\n                String fromFile = e.getKey();\n                String[] toFiles = e.getValue();\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            int createCount = 0;\n            for (String[] dirs : dirCopyMap.values()) {\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!(d.mkdirs() || d.isDirectory())) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","date":"2014-01-05 00:20:00","endLine":939,"groupId":"3353","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"doFileOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/2b/c99c22ad92ec524ecd9a12418fc09a1d08ee76.src","preCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {\n                String fromFile = e.getKey();\n                String[] toFiles = e.getValue();\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            int createCount = 0;\n            for (String[] dirs : dirCopyMap.values()) {\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!(d.mkdirs() || d.isDirectory())) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":861,"status":"M"},{"authorDate":"2014-01-05 00:20:00","commitOrder":25,"curCode":"    protected void doResourceOperations(Map<Resource, String[]> map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (Map.Entry<Resource, String[]> e : map.entrySet()) {\n                Resource fromResource = e.getKey();\n                for (String toFile : e.getValue()) {\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters = new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","date":"2014-01-05 00:20:00","endLine":998,"groupId":"8924","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"doResourceOperations","params":"(Map<Resource@String[]>map)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/2b/c99c22ad92ec524ecd9a12418fc09a1d08ee76.src","preCode":"    protected void doResourceOperations(Map<Resource, String[]> map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (Map.Entry<Resource, String[]> e : map.entrySet()) {\n                Resource fromResource = e.getKey();\n                for (String toFile : e.getValue()) {\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters = new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":947,"status":"M"}],"commitId":"e7af303b2632afda99db2ebaf2ebee5fcbe1b13e","commitMessage":"@@@Don't delete the target if copy failed because the target was read-only.  PR 53095\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@1555363 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-05 00:20:00","modifiedFileCount":"2","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2014-07-04 15:14:00","codes":[{"authorDate":"2014-07-04 15:14:00","commitOrder":26,"curCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (final Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {\n                final String fromFile = e.getKey();\n                final String[] toFiles = e.getValue();\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    final String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        final FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (final FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           getForce());\n                    } catch (final IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        final File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            int createCount = 0;\n            for (final String[] dirs : dirCopyMap.values()) {\n                for (int i = 0; i < dirs.length; i++) {\n                    final File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!(d.mkdirs() || d.isDirectory())) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","date":"2014-07-04 15:14:00","endLine":943,"groupId":"3353","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"doFileOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7f/dfaf2f40c76376748b285639668761b0eb820d.src","preCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {\n                String fromFile = e.getKey();\n                String[] toFiles = e.getValue();\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            int createCount = 0;\n            for (String[] dirs : dirCopyMap.values()) {\n                for (int i = 0; i < dirs.length; i++) {\n                    File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!(d.mkdirs() || d.isDirectory())) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":865,"status":"M"},{"authorDate":"2014-07-04 15:14:00","commitOrder":26,"curCode":"    protected void doResourceOperations(final Map<Resource, String[]> map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (final Map.Entry<Resource, String[]> e : map.entrySet()) {\n                final Resource fromResource = e.getKey();\n                for (final String toFile : e.getValue()) {\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        final FilterSetCollection executionFilters = new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (final FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   getForce());\n                    } catch (final IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        final File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","date":"2014-07-04 15:14:00","endLine":1002,"groupId":"8924","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"doResourceOperations","params":"(finalMap<Resource@String[]>map)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7f/dfaf2f40c76376748b285639668761b0eb820d.src","preCode":"    protected void doResourceOperations(Map<Resource, String[]> map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (Map.Entry<Resource, String[]> e : map.entrySet()) {\n                Resource fromResource = e.getKey();\n                for (String toFile : e.getValue()) {\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        FilterSetCollection executionFilters = new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   getForce());\n                    } catch (IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":951,"status":"M"}],"commitId":"1b76f1b6dae88a7a158e50222bb19f6f5ca26d70","commitMessage":"@@@checkstyle","date":"2014-07-04 15:14:00","modifiedFileCount":"117","status":"M","submitter":"Jan Mat?rne"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":27,"curCode":"    protected void doFileOperations() {\n        if (!fileCopyMap.isEmpty()) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (final Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {\n                final String fromFile = e.getKey();\n                final String[] toFiles = e.getValue();\n\n                for (final String toFile : toFiles) {\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        final FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (final FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           getForce());\n                    } catch (final IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        final File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            int createCount = 0;\n            for (final String[] dirs : dirCopyMap.values()) {\n                for (String dir : dirs) {\n                    final File d = new File(dir);\n                    if (!d.exists()) {\n                        if (!(d.mkdirs() || d.isDirectory())) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":933,"groupId":"4207","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"doFileOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/3c/082799ca7709e42a316774e0183636786098a1.src","preCode":"    protected void doFileOperations() {\n        if (fileCopyMap.size() > 0) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (final Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {\n                final String fromFile = e.getKey();\n                final String[] toFiles = e.getValue();\n\n                for (int i = 0; i < toFiles.length; i++) {\n                    final String toFile = toFiles[i];\n\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        final FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (final FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           getForce());\n                    } catch (final IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        final File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            int createCount = 0;\n            for (final String[] dirs : dirCopyMap.values()) {\n                for (int i = 0; i < dirs.length; i++) {\n                    final File d = new File(dirs[i]);\n                    if (!d.exists()) {\n                        if (!(d.mkdirs() || d.isDirectory())) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":857,"status":"M"},{"authorDate":"2017-04-13 23:15:22","commitOrder":27,"curCode":"    protected void doResourceOperations(final Map<Resource, String[]> map) {\n        if (!map.isEmpty()) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (final Map.Entry<Resource, String[]> e : map.entrySet()) {\n                final Resource fromResource = e.getKey();\n                for (final String toFile : e.getValue()) {\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        final FilterSetCollection executionFilters = new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (final FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   getForce());\n                    } catch (final IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        final File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":992,"groupId":"8924","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"doResourceOperations","params":"(finalMap<Resource@String[]>map)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/3c/082799ca7709e42a316774e0183636786098a1.src","preCode":"    protected void doResourceOperations(final Map<Resource, String[]> map) {\n        if (map.size() > 0) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (final Map.Entry<Resource, String[]> e : map.entrySet()) {\n                final Resource fromResource = e.getKey();\n                for (final String toFile : e.getValue()) {\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        final FilterSetCollection executionFilters = new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (final FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   getForce());\n                    } catch (final IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        final File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":941,"status":"M"}],"commitId":"b7d1e9bde44cb8e5233d6e70bb96e14cbb2f3e2d","commitMessage":"@@@java 5-8\n","date":"2017-04-13 23:15:22","modifiedFileCount":"609","status":"M","submitter":"Matt Benson"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2018-04-01 16:26:49","commitOrder":28,"curCode":"    protected void doFileOperations() {\n        if (!fileCopyMap.isEmpty()) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (final Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {\n                final String fromFile = e.getKey();\n\n                for (final String toFile : e.getValue()) {\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        final FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (final FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           getForce());\n                    } catch (final IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        final File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            int createCount = 0;\n            for (final String[] dirs : dirCopyMap.values()) {\n                for (String dir : dirs) {\n                    final File d = new File(dir);\n                    if (!d.exists()) {\n                        if (!(d.mkdirs() || d.isDirectory())) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","date":"2018-04-01 16:26:49","endLine":934,"groupId":"4207","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"doFileOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/de/7badb1daffa453b4ffd203dd3e34473cce652b.src","preCode":"    protected void doFileOperations() {\n        if (!fileCopyMap.isEmpty()) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (final Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {\n                final String fromFile = e.getKey();\n                final String[] toFiles = e.getValue();\n\n                for (final String toFile : toFiles) {\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        final FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (final FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           getForce());\n                    } catch (final IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        final File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            int createCount = 0;\n            for (final String[] dirs : dirCopyMap.values()) {\n                for (String dir : dirs) {\n                    final File d = new File(dir);\n                    if (!d.exists()) {\n                        if (!(d.mkdirs() || d.isDirectory())) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":859,"status":"M"},{"authorDate":"2017-04-13 23:15:22","commitOrder":28,"curCode":"    protected void doResourceOperations(final Map<Resource, String[]> map) {\n        if (!map.isEmpty()) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (final Map.Entry<Resource, String[]> e : map.entrySet()) {\n                final Resource fromResource = e.getKey();\n                for (final String toFile : e.getValue()) {\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        final FilterSetCollection executionFilters = new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (final FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   getForce());\n                    } catch (final IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        final File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":992,"groupId":"8924","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"doResourceOperations","params":"(finalMap<Resource@String[]>map)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/3c/082799ca7709e42a316774e0183636786098a1.src","preCode":"    protected void doResourceOperations(final Map<Resource, String[]> map) {\n        if (!map.isEmpty()) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (final Map.Entry<Resource, String[]> e : map.entrySet()) {\n                final Resource fromResource = e.getKey();\n                for (final String toFile : e.getValue()) {\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        final FilterSetCollection executionFilters = new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (final FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   getForce());\n                    } catch (final IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        final File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":941,"status":"N"}],"commitId":"1c80d507f496dde98869890e671edf635bef8dec","commitMessage":"@@@Use foreach loops","date":"2018-04-01 16:26:49","modifiedFileCount":"123","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2018-04-02 03:46:45","commitOrder":29,"curCode":"    protected void doFileOperations() {\n        if (!fileCopyMap.isEmpty()) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (final Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {\n                final String fromFile = e.getKey();\n\n                for (final String toFile : e.getValue()) {\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        final FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (final FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           getForce());\n                    } catch (final IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        final File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            int createCount = 0;\n            for (final String[] dirs : dirCopyMap.values()) {\n                for (String dir : dirs) {\n                    final File d = new File(dir);\n                    if (!d.exists()) {\n                        if (!d.mkdirs() && !d.isDirectory()) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","date":"2018-04-02 03:46:45","endLine":931,"groupId":"10509","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"doFileOperations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/5a/337050422e847bdf946ff1c5930fbaa16dd504.src","preCode":"    protected void doFileOperations() {\n        if (!fileCopyMap.isEmpty()) {\n            log(\"Copying \" + fileCopyMap.size()\n                + \" file\" + (fileCopyMap.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (final Map.Entry<String, String[]> e : fileCopyMap.entrySet()) {\n                final String fromFile = e.getKey();\n\n                for (final String toFile : e.getValue()) {\n                    if (fromFile.equals(toFile)) {\n                        log(\"Skipping self-copy of \" + fromFile, verbosity);\n                        continue;\n                    }\n                    try {\n                        log(\"Copying \" + fromFile + \" to \" + toFile, verbosity);\n\n                        final FilterSetCollection executionFilters =\n                            new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (final FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        fileUtils.copyFile(new File(fromFile), new File(toFile),\n                                           executionFilters,\n                                           filterChains, forceOverwrite,\n                                           preserveLastModified,\n                                            false, inputEncoding,\n                                           outputEncoding, getProject(),\n                                           getForce());\n                    } catch (final IOException ioe) {\n                        String msg = \"Failed to copy \" + fromFile + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        final File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n        if (includeEmpty) {\n            int createCount = 0;\n            for (final String[] dirs : dirCopyMap.values()) {\n                for (String dir : dirs) {\n                    final File d = new File(dir);\n                    if (!d.exists()) {\n                        if (!(d.mkdirs() || d.isDirectory())) {\n                            log(\"Unable to create directory \"\n                                + d.getAbsolutePath(), Project.MSG_ERR);\n                        } else {\n                            createCount++;\n                        }\n                    }\n                }\n            }\n            if (createCount > 0) {\n                log(\"Copied \" + dirCopyMap.size()\n                    + \" empty director\"\n                    + (dirCopyMap.size() == 1 ? \"y\" : \"ies\")\n                    + \" to \" + createCount\n                    + \" empty director\"\n                    + (createCount == 1 ? \"y\" : \"ies\") + \" under \"\n                    + destDir.getAbsolutePath());\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":856,"status":"M"},{"authorDate":"2017-04-13 23:15:22","commitOrder":29,"curCode":"    protected void doResourceOperations(final Map<Resource, String[]> map) {\n        if (!map.isEmpty()) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (final Map.Entry<Resource, String[]> e : map.entrySet()) {\n                final Resource fromResource = e.getKey();\n                for (final String toFile : e.getValue()) {\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        final FilterSetCollection executionFilters = new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (final FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   getForce());\n                    } catch (final IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        final File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":992,"groupId":"10509","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"doResourceOperations","params":"(finalMap<Resource@String[]>map)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/3c/082799ca7709e42a316774e0183636786098a1.src","preCode":"    protected void doResourceOperations(final Map<Resource, String[]> map) {\n        if (!map.isEmpty()) {\n            log(\"Copying \" + map.size()\n                + \" resource\" + (map.size() == 1 ? \"\" : \"s\")\n                + \" to \" + destDir.getAbsolutePath());\n\n            for (final Map.Entry<Resource, String[]> e : map.entrySet()) {\n                final Resource fromResource = e.getKey();\n                for (final String toFile : e.getValue()) {\n                    try {\n                        log(\"Copying \" + fromResource + \" to \" + toFile,\n                            verbosity);\n\n                        final FilterSetCollection executionFilters = new FilterSetCollection();\n                        if (filtering) {\n                            executionFilters\n                                .addFilterSet(getProject().getGlobalFilterSet());\n                        }\n                        for (final FilterSet filterSet : filterSets) {\n                            executionFilters.addFilterSet(filterSet);\n                        }\n                        ResourceUtils.copyResource(fromResource,\n                                                   new FileResource(destDir,\n                                                                    toFile),\n                                                   executionFilters,\n                                                   filterChains,\n                                                   forceOverwrite,\n                                                   preserveLastModified,\n                                                    false,\n                                                   inputEncoding,\n                                                   outputEncoding,\n                                                   getProject(),\n                                                   getForce());\n                    } catch (final IOException ioe) {\n                        String msg = \"Failed to copy \" + fromResource\n                            + \" to \" + toFile\n                            + \" due to \" + getDueTo(ioe);\n                        final File targetFile = new File(toFile);\n                        if (!(ioe instanceof\n                              ResourceUtils.ReadOnlyTargetFileException)\n                            && targetFile.exists() && !targetFile.delete()) {\n                            msg += \" and I couldn't delete the corrupt \" + toFile;\n                        }\n                        if (failonerror) {\n                            throw new BuildException(msg, ioe, getLocation());\n                        }\n                        log(msg, Project.MSG_ERR);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Copy.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":941,"status":"N"}],"commitId":"9a8a441655a09e6c074f4ec2cfb9c9a4a291809e","commitMessage":"@@@Simplify logic","date":"2018-04-02 03:46:45","modifiedFileCount":"53","status":"M","submitter":"Gintas Grigelionis"}]
