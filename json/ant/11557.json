[{"authorTime":"2003-08-06 22:12:29","codes":[{"authorDate":"2002-11-08 17:53:22","commitOrder":3,"curCode":"        public Source resolve(String href, String base)\n            throws TransformerException {\n\n            SAXSource result = null;\n            InputSource source = null;\n\n            ResourceLocation matchingEntry = findMatchingEntry(href);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for uri: '\" + \n                    matchingEntry.getPublicId() + \"' location: '\" + \n                    matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                ResourceLocation entryCopy = matchingEntry;\n                if (base != null) {\n                    try {\n                        URL baseURL = new URL(base);\n                        entryCopy = new ResourceLocation();\n                        entryCopy.setBase(baseURL);\n                    }\n                    catch (MalformedURLException ex) {\n                        \r\n                    }\n                }\n                entryCopy.setPublicId(matchingEntry.getPublicId());\n                entryCopy.setLocation(matchingEntry.getLocation());\n\n                source = filesystemLookup(entryCopy);\n\n                if (source == null) {\n                    source = classpathLookup(entryCopy);\n                }\n\n                if (source == null) {\n                    source = urlLookup(entryCopy);\n                }\n\n                if (source != null) {\n                    result = new SAXSource(source);\n                }\n            }\n            return result;\n        }\n","date":"2002-11-08 17:53:22","endLine":854,"groupId":"10207","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"resolve","params":"(Stringhref@Stringbase)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/b4/03a80d0f70201d57d75245c055734f38b93643.src","preCode":"        public Source resolve(String href, String base)\n            throws TransformerException {\n\n            SAXSource result = null;\n            InputSource source = null;\n\n            ResourceLocation matchingEntry = findMatchingEntry(href);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for uri: '\" + \n                    matchingEntry.getPublicId() + \"' location: '\" + \n                    matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                ResourceLocation entryCopy = matchingEntry;\n                if (base != null) {\n                    try {\n                        URL baseURL = new URL(base);\n                        entryCopy = new ResourceLocation();\n                        entryCopy.setBase(baseURL);\n                    }\n                    catch (MalformedURLException ex) {\n                        \r\n                    }\n                }\n                entryCopy.setPublicId(matchingEntry.getPublicId());\n                entryCopy.setLocation(matchingEntry.getLocation());\n\n                source = filesystemLookup(entryCopy);\n\n                if (source == null) {\n                    source = classpathLookup(entryCopy);\n                }\n\n                if (source == null) {\n                    source = urlLookup(entryCopy);\n                }\n\n                if (source != null) {\n                    result = new SAXSource(source);\n                }\n            }\n            return result;\n        }\n","realPath":"src/main/org/apache/tools/ant/types/XMLCatalog.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":800,"status":"NB"},{"authorDate":"2003-08-06 22:12:29","commitOrder":3,"curCode":"        public Source resolve(String href, String base)\n            throws TransformerException {\n\n            SAXSource result = null;\n            InputSource source = null;\n\n            processExternalCatalogs();\n\n            ResourceLocation matchingEntry = findMatchingEntry(href);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for uri: '\"\n                    + matchingEntry.getPublicId() + \"' location: '\"\n                    + matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                ResourceLocation entryCopy = matchingEntry;\n                if (base != null) {\n                    try {\n                        URL baseURL = new URL(base);\n                        entryCopy = new ResourceLocation();\n                        entryCopy.setBase(baseURL);\n                    } catch (MalformedURLException ex) {\n                        \r\n                    }\n                }\n                entryCopy.setPublicId(matchingEntry.getPublicId());\n                entryCopy.setLocation(matchingEntry.getLocation());\n\n                source = filesystemLookup(entryCopy);\n\n                if (source == null) {\n                    source = classpathLookup(entryCopy);\n                }\n\n                if (source != null) {\n                    result = new SAXSource(source);\n                } else {\n                    try {\n                        result =\n                            (SAXSource) resolve.invoke(resolverImpl,\n                                                      new Object[] {href, base});\n                    } catch (Exception ex) {\n                        throw new BuildException(ex);\n                    }\n                }\n            } else {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                try {\n                    result =\n                        (SAXSource) resolve.invoke(resolverImpl,\n                                                  new Object[] {href, base});\n                } catch (Exception ex) {\n                    throw new BuildException(ex);\n                }\n            }\n            return result;\n        }\n","date":"2003-08-06 22:12:29","endLine":1106,"groupId":"10207","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"resolve","params":"(Stringhref@Stringbase)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/77/8958dea6e736e24ba6f5f678204d519ee45413.src","preCode":"        public Source resolve(String href, String base)\n            throws TransformerException {\n\n            SAXSource result = null;\n            InputSource source = null;\n\n            processExternalCatalogs();\n\n            ResourceLocation matchingEntry = findMatchingEntry(href);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for uri: '\"\n                    + matchingEntry.getPublicId() + \"' location: '\"\n                    + matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                ResourceLocation entryCopy = matchingEntry;\n                if (base != null) {\n                    try {\n                        URL baseURL = new URL(base);\n                        entryCopy = new ResourceLocation();\n                        entryCopy.setBase(baseURL);\n                    } catch (MalformedURLException ex) {\n                        \r\n                    }\n                }\n                entryCopy.setPublicId(matchingEntry.getPublicId());\n                entryCopy.setLocation(matchingEntry.getLocation());\n\n                source = filesystemLookup(entryCopy);\n\n                if (source == null) {\n                    source = classpathLookup(entryCopy);\n                }\n\n                if (source != null) {\n                    result = new SAXSource(source);\n                } else {\n                    try {\n                        result =\n                            (SAXSource) resolve.invoke(resolverImpl,\n                                                      new Object[] {href, base});\n                    } catch (Exception ex) {\n                        throw new BuildException(ex);\n                    }\n                }\n            } else {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                try {\n                    result =\n                        (SAXSource) resolve.invoke(resolverImpl,\n                                                  new Object[] {href, base});\n                } catch (Exception ex) {\n                    throw new BuildException(ex);\n                }\n            }\n            return result;\n        }\n","realPath":"src/main/org/apache/tools/ant/types/XMLCatalog.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1029,"status":"B"}],"commitId":"130d4ee759cdd6627262fcf640843c6c5c65a317","commitMessage":"@@@Change the check for the external resolver catalog impl to\nensure it can be loaded by the resolver classes.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@275038 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2003-08-06 22:12:29","modifiedFileCount":"1","status":"M","submitter":"Conor MacNeill"},{"authorTime":"2012-02-24 04:42:47","codes":[{"authorDate":"2002-11-08 17:53:22","commitOrder":4,"curCode":"        public Source resolve(String href, String base)\n            throws TransformerException {\n\n            SAXSource result = null;\n            InputSource source = null;\n\n            ResourceLocation matchingEntry = findMatchingEntry(href);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for uri: '\" + \n                    matchingEntry.getPublicId() + \"' location: '\" + \n                    matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                ResourceLocation entryCopy = matchingEntry;\n                if (base != null) {\n                    try {\n                        URL baseURL = new URL(base);\n                        entryCopy = new ResourceLocation();\n                        entryCopy.setBase(baseURL);\n                    }\n                    catch (MalformedURLException ex) {\n                        \r\n                    }\n                }\n                entryCopy.setPublicId(matchingEntry.getPublicId());\n                entryCopy.setLocation(matchingEntry.getLocation());\n\n                source = filesystemLookup(entryCopy);\n\n                if (source == null) {\n                    source = classpathLookup(entryCopy);\n                }\n\n                if (source == null) {\n                    source = urlLookup(entryCopy);\n                }\n\n                if (source != null) {\n                    result = new SAXSource(source);\n                }\n            }\n            return result;\n        }\n","date":"2002-11-08 17:53:22","endLine":854,"groupId":"10207","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"resolve","params":"(Stringhref@Stringbase)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/b4/03a80d0f70201d57d75245c055734f38b93643.src","preCode":"        public Source resolve(String href, String base)\n            throws TransformerException {\n\n            SAXSource result = null;\n            InputSource source = null;\n\n            ResourceLocation matchingEntry = findMatchingEntry(href);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for uri: '\" + \n                    matchingEntry.getPublicId() + \"' location: '\" + \n                    matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                ResourceLocation entryCopy = matchingEntry;\n                if (base != null) {\n                    try {\n                        URL baseURL = new URL(base);\n                        entryCopy = new ResourceLocation();\n                        entryCopy.setBase(baseURL);\n                    }\n                    catch (MalformedURLException ex) {\n                        \r\n                    }\n                }\n                entryCopy.setPublicId(matchingEntry.getPublicId());\n                entryCopy.setLocation(matchingEntry.getLocation());\n\n                source = filesystemLookup(entryCopy);\n\n                if (source == null) {\n                    source = classpathLookup(entryCopy);\n                }\n\n                if (source == null) {\n                    source = urlLookup(entryCopy);\n                }\n\n                if (source != null) {\n                    result = new SAXSource(source);\n                }\n            }\n            return result;\n        }\n","realPath":"src/main/org/apache/tools/ant/types/XMLCatalog.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":800,"status":"N"},{"authorDate":"2012-02-24 04:42:47","commitOrder":4,"curCode":"        public Source resolve(String href, String base)\n            throws TransformerException {\n\n            SAXSource result = null;\n            InputSource source = null;\n\n            processExternalCatalogs();\n\n            ResourceLocation matchingEntry = findMatchingEntry(href);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for uri: '\"\n                    + matchingEntry.getPublicId() + \"' location: '\"\n                    + matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                ResourceLocation entryCopy = matchingEntry;\n                if (base != null) {\n                    try {\n                        URL baseURL = new URL(base);\n                        entryCopy = new ResourceLocation();\n                        entryCopy.setBase(baseURL);\n                    } catch (MalformedURLException ex) {\n                        \r\n                    }\n                }\n                entryCopy.setPublicId(matchingEntry.getPublicId());\n                entryCopy.setLocation(matchingEntry.getLocation());\n\n                source = filesystemLookup(entryCopy);\n\n                if (source == null) {\n                    source = classpathLookup(entryCopy);\n                }\n\n                if (source != null) {\n                    result = new SAXSource(source);\n                } else {\n                    try {\n                        result =\n                            (SAXSource) resolve.invoke(resolverImpl,\n                                                      new Object[] {href, base});\n                    } catch (Exception ex) {\n                        throw new BuildException(ex);\n                    }\n                }\n            } else {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                if (base == null) {\n                    try {\n                        base = FILE_UTILS.getFileURL(getProject().getBaseDir()).toString();\n                    } catch (MalformedURLException x) {\n                        throw new TransformerException(x);\n                    }\n                }\n                try {\n                    result =\n                        (SAXSource) resolve.invoke(resolverImpl,\n                                                  new Object[] {href, base});\n                } catch (Exception ex) {\n                    throw new BuildException(ex);\n                }\n            }\n            return result;\n        }\n","date":"2012-02-24 04:42:47","endLine":1091,"groupId":"10207","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"resolve","params":"(Stringhref@Stringbase)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/1e/dc100115500e460b6ab542a1ab0845258da3a3.src","preCode":"        public Source resolve(String href, String base)\n            throws TransformerException {\n\n            SAXSource result = null;\n            InputSource source = null;\n\n            processExternalCatalogs();\n\n            ResourceLocation matchingEntry = findMatchingEntry(href);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for uri: '\"\n                    + matchingEntry.getPublicId() + \"' location: '\"\n                    + matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                ResourceLocation entryCopy = matchingEntry;\n                if (base != null) {\n                    try {\n                        URL baseURL = new URL(base);\n                        entryCopy = new ResourceLocation();\n                        entryCopy.setBase(baseURL);\n                    } catch (MalformedURLException ex) {\n                        \r\n                    }\n                }\n                entryCopy.setPublicId(matchingEntry.getPublicId());\n                entryCopy.setLocation(matchingEntry.getLocation());\n\n                source = filesystemLookup(entryCopy);\n\n                if (source == null) {\n                    source = classpathLookup(entryCopy);\n                }\n\n                if (source != null) {\n                    result = new SAXSource(source);\n                } else {\n                    try {\n                        result =\n                            (SAXSource) resolve.invoke(resolverImpl,\n                                                      new Object[] {href, base});\n                    } catch (Exception ex) {\n                        throw new BuildException(ex);\n                    }\n                }\n            } else {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                try {\n                    result =\n                        (SAXSource) resolve.invoke(resolverImpl,\n                                                  new Object[] {href, base});\n                } catch (Exception ex) {\n                    throw new BuildException(ex);\n                }\n            }\n            return result;\n        }\n","realPath":"src/main/org/apache/tools/ant/types/XMLCatalog.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1007,"status":"M"}],"commitId":"9140aaae28cde7039a2013b943864802f75a7502","commitMessage":"@@@#52754: correcting basedir for external resolver.\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@1292945 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-02-24 04:42:47","modifiedFileCount":"1","status":"M","submitter":"Jesse N. Glick"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2002-11-08 17:53:22","commitOrder":5,"curCode":"        public Source resolve(String href, String base)\n            throws TransformerException {\n\n            SAXSource result = null;\n            InputSource source = null;\n\n            ResourceLocation matchingEntry = findMatchingEntry(href);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for uri: '\" + \n                    matchingEntry.getPublicId() + \"' location: '\" + \n                    matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                ResourceLocation entryCopy = matchingEntry;\n                if (base != null) {\n                    try {\n                        URL baseURL = new URL(base);\n                        entryCopy = new ResourceLocation();\n                        entryCopy.setBase(baseURL);\n                    }\n                    catch (MalformedURLException ex) {\n                        \r\n                    }\n                }\n                entryCopy.setPublicId(matchingEntry.getPublicId());\n                entryCopy.setLocation(matchingEntry.getLocation());\n\n                source = filesystemLookup(entryCopy);\n\n                if (source == null) {\n                    source = classpathLookup(entryCopy);\n                }\n\n                if (source == null) {\n                    source = urlLookup(entryCopy);\n                }\n\n                if (source != null) {\n                    result = new SAXSource(source);\n                }\n            }\n            return result;\n        }\n","date":"2002-11-08 17:53:22","endLine":854,"groupId":"11557","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"resolve","params":"(Stringhref@Stringbase)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/b4/03a80d0f70201d57d75245c055734f38b93643.src","preCode":"        public Source resolve(String href, String base)\n            throws TransformerException {\n\n            SAXSource result = null;\n            InputSource source = null;\n\n            ResourceLocation matchingEntry = findMatchingEntry(href);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for uri: '\" + \n                    matchingEntry.getPublicId() + \"' location: '\" + \n                    matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                ResourceLocation entryCopy = matchingEntry;\n                if (base != null) {\n                    try {\n                        URL baseURL = new URL(base);\n                        entryCopy = new ResourceLocation();\n                        entryCopy.setBase(baseURL);\n                    }\n                    catch (MalformedURLException ex) {\n                        \r\n                    }\n                }\n                entryCopy.setPublicId(matchingEntry.getPublicId());\n                entryCopy.setLocation(matchingEntry.getLocation());\n\n                source = filesystemLookup(entryCopy);\n\n                if (source == null) {\n                    source = classpathLookup(entryCopy);\n                }\n\n                if (source == null) {\n                    source = urlLookup(entryCopy);\n                }\n\n                if (source != null) {\n                    result = new SAXSource(source);\n                }\n            }\n            return result;\n        }\n","realPath":"src/main/org/apache/tools/ant/types/XMLCatalog.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":800,"status":"N"},{"authorDate":"2017-04-13 23:15:22","commitOrder":5,"curCode":"        public Source resolve(String href, String base)\n            throws TransformerException {\n\n            SAXSource result;\n            InputSource source;\n\n            processExternalCatalogs();\n\n            ResourceLocation matchingEntry = findMatchingEntry(href);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for uri: '\"\n                    + matchingEntry.getPublicId() + \"' location: '\"\n                    + matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                ResourceLocation entryCopy = matchingEntry;\n                if (base != null) {\n                    try {\n                        URL baseURL = new URL(base);\n                        entryCopy = new ResourceLocation();\n                        entryCopy.setBase(baseURL);\n                    } catch (MalformedURLException ex) {\n                        \r\n                    }\n                }\n                entryCopy.setPublicId(matchingEntry.getPublicId());\n                entryCopy.setLocation(matchingEntry.getLocation());\n\n                source = filesystemLookup(entryCopy);\n\n                if (source == null) {\n                    source = classpathLookup(entryCopy);\n                }\n\n                if (source != null) {\n                    result = new SAXSource(source);\n                } else {\n                    try {\n                        result =\n                            (SAXSource) resolve.invoke(resolverImpl,\n                                                      new Object[] {href, base});\n                    } catch (Exception ex) {\n                        throw new BuildException(ex);\n                    }\n                }\n            } else {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                if (base == null) {\n                    try {\n                        base = FILE_UTILS.getFileURL(getProject().getBaseDir()).toString();\n                    } catch (MalformedURLException x) {\n                        throw new TransformerException(x);\n                    }\n                }\n                try {\n                    result =\n                        (SAXSource) resolve.invoke(resolverImpl,\n                                                  new Object[] {href, base});\n                } catch (Exception ex) {\n                    throw new BuildException(ex);\n                }\n            }\n            return result;\n        }\n","date":"2017-04-13 23:15:22","endLine":1086,"groupId":"11557","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"resolve","params":"(Stringhref@Stringbase)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/75/3e533c1e3d8851c978c18a25ff6292a76a6171.src","preCode":"        public Source resolve(String href, String base)\n            throws TransformerException {\n\n            SAXSource result = null;\n            InputSource source = null;\n\n            processExternalCatalogs();\n\n            ResourceLocation matchingEntry = findMatchingEntry(href);\n\n            if (matchingEntry != null) {\n\n                log(\"Matching catalog entry found for uri: '\"\n                    + matchingEntry.getPublicId() + \"' location: '\"\n                    + matchingEntry.getLocation() + \"'\",\n                    Project.MSG_DEBUG);\n\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                ResourceLocation entryCopy = matchingEntry;\n                if (base != null) {\n                    try {\n                        URL baseURL = new URL(base);\n                        entryCopy = new ResourceLocation();\n                        entryCopy.setBase(baseURL);\n                    } catch (MalformedURLException ex) {\n                        \r\n                    }\n                }\n                entryCopy.setPublicId(matchingEntry.getPublicId());\n                entryCopy.setLocation(matchingEntry.getLocation());\n\n                source = filesystemLookup(entryCopy);\n\n                if (source == null) {\n                    source = classpathLookup(entryCopy);\n                }\n\n                if (source != null) {\n                    result = new SAXSource(source);\n                } else {\n                    try {\n                        result =\n                            (SAXSource) resolve.invoke(resolverImpl,\n                                                      new Object[] {href, base});\n                    } catch (Exception ex) {\n                        throw new BuildException(ex);\n                    }\n                }\n            } else {\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                if (base == null) {\n                    try {\n                        base = FILE_UTILS.getFileURL(getProject().getBaseDir()).toString();\n                    } catch (MalformedURLException x) {\n                        throw new TransformerException(x);\n                    }\n                }\n                try {\n                    result =\n                        (SAXSource) resolve.invoke(resolverImpl,\n                                                  new Object[] {href, base});\n                } catch (Exception ex) {\n                    throw new BuildException(ex);\n                }\n            }\n            return result;\n        }\n","realPath":"src/main/org/apache/tools/ant/types/XMLCatalog.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1002,"status":"M"}],"commitId":"b7d1e9bde44cb8e5233d6e70bb96e14cbb2f3e2d","commitMessage":"@@@java 5-8\n","date":"2017-04-13 23:15:22","modifiedFileCount":"609","status":"M","submitter":"Matt Benson"}]
