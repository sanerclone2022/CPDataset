[{"authorTime":"2014-07-04 19:56:55","codes":[{"authorDate":"2014-07-04 19:56:55","commitOrder":11,"curCode":"    protected ArchiveState getResourcesToAdd(final FileSet[] filesets,\n                                             final File zipFile,\n                                             boolean needsUpdate)\n        throws BuildException {\n\n        final Resource[][] initialResources = grabResources(filesets);\n        if (isEmpty(initialResources)) {\n            if (Boolean.FALSE.equals(HAVE_NON_FILE_SET_RESOURCES_TO_ADD.get())) {\n                if (needsUpdate && doUpdate) {\n                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                    return new ArchiveState(true, initialResources);\n                }\n\n                if (emptyBehavior.equals(\"skip\")) {\n                    if (doUpdate) {\n                        logWhenWriting(archiveType + \" archive \" + zipFile\n                                       + \" not updated because no new files were\"\n                                       + \" included.\", Project.MSG_VERBOSE);\n                    } else {\n                        logWhenWriting(\"Warning: skipping \" + archiveType\n                                       + \" archive \" + zipFile\n                                       + \" because no files were included.\",\n                                       Project.MSG_WARN);\n                    }\n                } else if (emptyBehavior.equals(\"fail\")) {\n                    throw new BuildException(\"Cannot create \" + archiveType\n                                             + \" archive \" + zipFile\n                                             + \": no files were included.\",\n                                             getLocation());\n                } else {\n                    \r\n                    if (!zipFile.exists())  {\n                        needsUpdate = true;\n                    }\n                }\n            }\n\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[filesets.length][];\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (!(fileset instanceof ZipFileSet)\n                || ((ZipFileSet) fileset).getSrc(getProject()) == null) {\n                final File base = filesets[i].getDir(getProject());\n\n                for (int j = 0; j < initialResources[i].length; j++) {\n                    final File resourceAsFile =\n                        FILE_UTILS.resolveFile(base,\n                                              initialResources[i][j].getName());\n                    if (resourceAsFile.equals(zipFile)) {\n                        throw new BuildException(\"A zip file cannot include \"\n                                                 + \"itself\", getLocation());\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            FileNameMapper myMapper = new IdentityMapper();\n            if (filesets[i] instanceof ZipFileSet) {\n                final ZipFileSet zfs = (ZipFileSet) filesets[i];\n                if (zfs.getFullpath(getProject()) != null\n                    && !zfs.getFullpath(getProject()).equals(\"\")) {\n                    \r\n                    \r\n                    \r\n                    final MergingMapper fm = new MergingMapper();\n                    fm.setTo(zfs.getFullpath(getProject()));\n                    myMapper = fm;\n\n                } else if (zfs.getPrefix(getProject()) != null\n                           && !zfs.getPrefix(getProject()).equals(\"\")) {\n                    final GlobPatternMapper gm = new GlobPatternMapper();\n                    gm.setFrom(\"*\");\n                    String prefix = zfs.getPrefix(getProject());\n                    if (!prefix.endsWith(\"/\") && !prefix.endsWith(\"\\\\\")) {\n                        prefix += \"/\";\n                    }\n                    gm.setTo(prefix + \"*\");\n                    myMapper = gm;\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         myMapper);\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","date":"2014-07-04 19:56:55","endLine":1457,"groupId":"9425","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getResourcesToAdd","params":"(finalFileSet[]filesets@finalFilezipFile@booleanneedsUpdate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ae/d943eb97edaa24147c4598b0af568735f7fe17.src","preCode":"    protected ArchiveState getResourcesToAdd(final FileSet[] filesets,\n                                             final File zipFile,\n                                             boolean needsUpdate)\n        throws BuildException {\n\n        final Resource[][] initialResources = grabResources(filesets);\n        if (isEmpty(initialResources)) {\n            if (Boolean.FALSE.equals(HAVE_NON_FILE_SET_RESOURCES_TO_ADD.get())) {\n                if (needsUpdate && doUpdate) {\n                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                    return new ArchiveState(true, initialResources);\n                }\n\n                if (emptyBehavior.equals(\"skip\")) {\n                    if (doUpdate) {\n                        logWhenWriting(archiveType + \" archive \" + zipFile\n                                       + \" not updated because no new files were\"\n                                       + \" included.\", Project.MSG_VERBOSE);\n                    } else {\n                        logWhenWriting(\"Warning: skipping \" + archiveType\n                                       + \" archive \" + zipFile\n                                       + \" because no files were included.\",\n                                       Project.MSG_WARN);\n                    }\n                } else if (emptyBehavior.equals(\"fail\")) {\n                    throw new BuildException(\"Cannot create \" + archiveType\n                                             + \" archive \" + zipFile\n                                             + \": no files were included.\",\n                                             getLocation());\n                } else {\n                    \r\n                    if (!zipFile.exists())  {\n                        needsUpdate = true;\n                    }\n                }\n            }\n\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[filesets.length][];\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (!(fileset instanceof ZipFileSet)\n                || ((ZipFileSet) fileset).getSrc(getProject()) == null) {\n                final File base = filesets[i].getDir(getProject());\n\n                for (int j = 0; j < initialResources[i].length; j++) {\n                    final File resourceAsFile =\n                        FILE_UTILS.resolveFile(base,\n                                              initialResources[i][j].getName());\n                    if (resourceAsFile.equals(zipFile)) {\n                        throw new BuildException(\"A zip file cannot include \"\n                                                 + \"itself\", getLocation());\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            FileNameMapper myMapper = new IdentityMapper();\n            if (filesets[i] instanceof ZipFileSet) {\n                final ZipFileSet zfs = (ZipFileSet) filesets[i];\n                if (zfs.getFullpath(getProject()) != null\n                    && !zfs.getFullpath(getProject()).equals(\"\")) {\n                    \r\n                    \r\n                    \r\n                    final MergingMapper fm = new MergingMapper();\n                    fm.setTo(zfs.getFullpath(getProject()));\n                    myMapper = fm;\n\n                } else if (zfs.getPrefix(getProject()) != null\n                           && !zfs.getPrefix(getProject()).equals(\"\")) {\n                    final GlobPatternMapper gm = new GlobPatternMapper();\n                    gm.setFrom(\"*\");\n                    String prefix = zfs.getPrefix(getProject());\n                    if (!prefix.endsWith(\"/\") && !prefix.endsWith(\"\\\\\")) {\n                        prefix += \"/\";\n                    }\n                    gm.setTo(prefix + \"*\");\n                    myMapper = gm;\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         myMapper);\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Zip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1320,"status":"B"},{"authorDate":"2014-07-04 19:56:55","commitOrder":11,"curCode":"    protected ArchiveState getNonFileSetResourcesToAdd(final ResourceCollection[] rcs,\n                                                       final File zipFile,\n                                                       boolean needsUpdate)\n        throws BuildException {\n        \r\n\r\n\r\n\n\n        final Resource[][] initialResources = grabNonFileSetResources(rcs);\n        final boolean empty = isEmpty(initialResources);\n        HAVE_NON_FILE_SET_RESOURCES_TO_ADD.set(Boolean.valueOf(!empty));\n        if (empty) {\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[rcs.length][];\n\n        for (int i = 0; i < rcs.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            for (int j = 0; j < initialResources[i].length; j++) {\n                final FileProvider fp =\n                    initialResources[i][j].as(FileProvider.class);\n                if (fp != null && zipFile.equals(fp.getFile())) {\n                    throw new BuildException(\"A zip file cannot include \"\n                                             + \"itself\", getLocation());\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         new IdentityMapper());\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","date":"2014-07-04 19:56:55","endLine":1544,"groupId":"633","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getNonFileSetResourcesToAdd","params":"(finalResourceCollection[]rcs@finalFilezipFile@booleanneedsUpdate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ae/d943eb97edaa24147c4598b0af568735f7fe17.src","preCode":"    protected ArchiveState getNonFileSetResourcesToAdd(final ResourceCollection[] rcs,\n                                                       final File zipFile,\n                                                       boolean needsUpdate)\n        throws BuildException {\n        \r\n\r\n\r\n\n\n        final Resource[][] initialResources = grabNonFileSetResources(rcs);\n        final boolean empty = isEmpty(initialResources);\n        HAVE_NON_FILE_SET_RESOURCES_TO_ADD.set(Boolean.valueOf(!empty));\n        if (empty) {\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[rcs.length][];\n\n        for (int i = 0; i < rcs.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            for (int j = 0; j < initialResources[i].length; j++) {\n                final FileProvider fp =\n                    initialResources[i][j].as(FileProvider.class);\n                if (fp != null && zipFile.equals(fp.getFile())) {\n                    throw new BuildException(\"A zip file cannot include \"\n                                             + \"itself\", getLocation());\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         new IdentityMapper());\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Zip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1481,"status":"MB"}],"commitId":"13f6d98c9de38c6c53d4d855157c3fad620c3303","commitMessage":"@@@make it compile under Java5 (1.5.0_22-b03)","date":"2014-07-04 19:56:55","modifiedFileCount":"37","status":"M","submitter":"Jan Mat?rne"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":12,"curCode":"    protected ArchiveState getResourcesToAdd(final FileSet[] filesets,\n                                             final File zipFile,\n                                             boolean needsUpdate)\n        throws BuildException {\n\n        final Resource[][] initialResources = grabResources(filesets);\n        if (isEmpty(initialResources)) {\n            if (Boolean.FALSE.equals(HAVE_NON_FILE_SET_RESOURCES_TO_ADD.get())) {\n                if (needsUpdate && doUpdate) {\n                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                    return new ArchiveState(true, initialResources);\n                }\n\n                if (\"skip\".equals(emptyBehavior)) {\n                    if (doUpdate) {\n                        logWhenWriting(archiveType + \" archive \" + zipFile\n                                       + \" not updated because no new files were\"\n                                       + \" included.\", Project.MSG_VERBOSE);\n                    } else {\n                        logWhenWriting(\"Warning: skipping \" + archiveType\n                                       + \" archive \" + zipFile\n                                       + \" because no files were included.\",\n                                       Project.MSG_WARN);\n                    }\n                } else if (\"fail\".equals(emptyBehavior)) {\n                    throw new BuildException(\"Cannot create \" + archiveType\n                                             + \" archive \" + zipFile\n                                             + \": no files were included.\",\n                                             getLocation());\n                } else {\n                    \r\n                    if (!zipFile.exists())  {\n                        needsUpdate = true;\n                    }\n                }\n            }\n\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[filesets.length][];\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (!(fileset instanceof ZipFileSet)\n                || ((ZipFileSet) fileset).getSrc(getProject()) == null) {\n                final File base = filesets[i].getDir(getProject());\n\n                for (int j = 0; j < initialResources[i].length; j++) {\n                    final File resourceAsFile =\n                        FILE_UTILS.resolveFile(base,\n                                              initialResources[i][j].getName());\n                    if (resourceAsFile.equals(zipFile)) {\n                        throw new BuildException(\"A zip file cannot include \"\n                                                 + \"itself\", getLocation());\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            FileNameMapper myMapper = new IdentityMapper();\n            if (filesets[i] instanceof ZipFileSet) {\n                final ZipFileSet zfs = (ZipFileSet) filesets[i];\n                if (zfs.getFullpath(getProject()) != null\n                    && !zfs.getFullpath(getProject()).equals(\"\")) {\n                    \r\n                    \r\n                    \r\n                    final MergingMapper fm = new MergingMapper();\n                    fm.setTo(zfs.getFullpath(getProject()));\n                    myMapper = fm;\n\n                } else if (zfs.getPrefix(getProject()) != null\n                           && !zfs.getPrefix(getProject()).equals(\"\")) {\n                    final GlobPatternMapper gm = new GlobPatternMapper();\n                    gm.setFrom(\"*\");\n                    String prefix = zfs.getPrefix(getProject());\n                    if (!prefix.endsWith(\"/\") && !prefix.endsWith(\"\\\\\")) {\n                        prefix += \"/\";\n                    }\n                    gm.setTo(prefix + \"*\");\n                    myMapper = gm;\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         myMapper);\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","date":"2017-04-13 23:15:22","endLine":1417,"groupId":"9425","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getResourcesToAdd","params":"(finalFileSet[]filesets@finalFilezipFile@booleanneedsUpdate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ff/720147c115fee11709fdad087767143bd69291.src","preCode":"    protected ArchiveState getResourcesToAdd(final FileSet[] filesets,\n                                             final File zipFile,\n                                             boolean needsUpdate)\n        throws BuildException {\n\n        final Resource[][] initialResources = grabResources(filesets);\n        if (isEmpty(initialResources)) {\n            if (Boolean.FALSE.equals(HAVE_NON_FILE_SET_RESOURCES_TO_ADD.get())) {\n                if (needsUpdate && doUpdate) {\n                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                    return new ArchiveState(true, initialResources);\n                }\n\n                if (emptyBehavior.equals(\"skip\")) {\n                    if (doUpdate) {\n                        logWhenWriting(archiveType + \" archive \" + zipFile\n                                       + \" not updated because no new files were\"\n                                       + \" included.\", Project.MSG_VERBOSE);\n                    } else {\n                        logWhenWriting(\"Warning: skipping \" + archiveType\n                                       + \" archive \" + zipFile\n                                       + \" because no files were included.\",\n                                       Project.MSG_WARN);\n                    }\n                } else if (emptyBehavior.equals(\"fail\")) {\n                    throw new BuildException(\"Cannot create \" + archiveType\n                                             + \" archive \" + zipFile\n                                             + \": no files were included.\",\n                                             getLocation());\n                } else {\n                    \r\n                    if (!zipFile.exists())  {\n                        needsUpdate = true;\n                    }\n                }\n            }\n\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[filesets.length][];\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (!(fileset instanceof ZipFileSet)\n                || ((ZipFileSet) fileset).getSrc(getProject()) == null) {\n                final File base = filesets[i].getDir(getProject());\n\n                for (int j = 0; j < initialResources[i].length; j++) {\n                    final File resourceAsFile =\n                        FILE_UTILS.resolveFile(base,\n                                              initialResources[i][j].getName());\n                    if (resourceAsFile.equals(zipFile)) {\n                        throw new BuildException(\"A zip file cannot include \"\n                                                 + \"itself\", getLocation());\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            FileNameMapper myMapper = new IdentityMapper();\n            if (filesets[i] instanceof ZipFileSet) {\n                final ZipFileSet zfs = (ZipFileSet) filesets[i];\n                if (zfs.getFullpath(getProject()) != null\n                    && !zfs.getFullpath(getProject()).equals(\"\")) {\n                    \r\n                    \r\n                    \r\n                    final MergingMapper fm = new MergingMapper();\n                    fm.setTo(zfs.getFullpath(getProject()));\n                    myMapper = fm;\n\n                } else if (zfs.getPrefix(getProject()) != null\n                           && !zfs.getPrefix(getProject()).equals(\"\")) {\n                    final GlobPatternMapper gm = new GlobPatternMapper();\n                    gm.setFrom(\"*\");\n                    String prefix = zfs.getPrefix(getProject());\n                    if (!prefix.endsWith(\"/\") && !prefix.endsWith(\"\\\\\")) {\n                        prefix += \"/\";\n                    }\n                    gm.setTo(prefix + \"*\");\n                    myMapper = gm;\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         myMapper);\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Zip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1280,"status":"M"},{"authorDate":"2017-04-13 23:15:22","commitOrder":12,"curCode":"    protected ArchiveState getNonFileSetResourcesToAdd(final ResourceCollection[] rcs,\n                                                       final File zipFile,\n                                                       boolean needsUpdate)\n        throws BuildException {\n        \r\n\r\n\r\n\n\n        final Resource[][] initialResources = grabNonFileSetResources(rcs);\n        final boolean empty = isEmpty(initialResources);\n        HAVE_NON_FILE_SET_RESOURCES_TO_ADD.set(Boolean.valueOf(!empty));\n        if (empty) {\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[rcs.length][];\n\n        for (int i = 0; i < rcs.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            for (int j = 0; j < initialResources[i].length; j++) {\n                final FileProvider fp =\n                    initialResources[i][j].as(FileProvider.class);\n                if (fp != null && zipFile.equals(fp.getFile())) {\n                    throw new BuildException(\"A zip file cannot include itself\",\n                        getLocation());\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         new IdentityMapper());\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","date":"2017-04-13 23:15:22","endLine":1504,"groupId":"633","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getNonFileSetResourcesToAdd","params":"(finalResourceCollection[]rcs@finalFilezipFile@booleanneedsUpdate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ff/720147c115fee11709fdad087767143bd69291.src","preCode":"    protected ArchiveState getNonFileSetResourcesToAdd(final ResourceCollection[] rcs,\n                                                       final File zipFile,\n                                                       boolean needsUpdate)\n        throws BuildException {\n        \r\n\r\n\r\n\n\n        final Resource[][] initialResources = grabNonFileSetResources(rcs);\n        final boolean empty = isEmpty(initialResources);\n        HAVE_NON_FILE_SET_RESOURCES_TO_ADD.set(Boolean.valueOf(!empty));\n        if (empty) {\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[rcs.length][];\n\n        for (int i = 0; i < rcs.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            for (int j = 0; j < initialResources[i].length; j++) {\n                final FileProvider fp =\n                    initialResources[i][j].as(FileProvider.class);\n                if (fp != null && zipFile.equals(fp.getFile())) {\n                    throw new BuildException(\"A zip file cannot include \"\n                                             + \"itself\", getLocation());\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         new IdentityMapper());\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Zip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1441,"status":"M"}],"commitId":"b7d1e9bde44cb8e5233d6e70bb96e14cbb2f3e2d","commitMessage":"@@@java 5-8\n","date":"2017-04-13 23:15:22","modifiedFileCount":"609","status":"M","submitter":"Matt Benson"},{"authorTime":"2018-04-02 02:07:39","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":13,"curCode":"    protected ArchiveState getResourcesToAdd(final FileSet[] filesets,\n                                             final File zipFile,\n                                             boolean needsUpdate)\n        throws BuildException {\n\n        final Resource[][] initialResources = grabResources(filesets);\n        if (isEmpty(initialResources)) {\n            if (Boolean.FALSE.equals(HAVE_NON_FILE_SET_RESOURCES_TO_ADD.get())) {\n                if (needsUpdate && doUpdate) {\n                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                    return new ArchiveState(true, initialResources);\n                }\n\n                if (\"skip\".equals(emptyBehavior)) {\n                    if (doUpdate) {\n                        logWhenWriting(archiveType + \" archive \" + zipFile\n                                       + \" not updated because no new files were\"\n                                       + \" included.\", Project.MSG_VERBOSE);\n                    } else {\n                        logWhenWriting(\"Warning: skipping \" + archiveType\n                                       + \" archive \" + zipFile\n                                       + \" because no files were included.\",\n                                       Project.MSG_WARN);\n                    }\n                } else if (\"fail\".equals(emptyBehavior)) {\n                    throw new BuildException(\"Cannot create \" + archiveType\n                                             + \" archive \" + zipFile\n                                             + \": no files were included.\",\n                                             getLocation());\n                } else {\n                    \r\n                    if (!zipFile.exists())  {\n                        needsUpdate = true;\n                    }\n                }\n            }\n\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[filesets.length][];\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (!(fileset instanceof ZipFileSet)\n                || ((ZipFileSet) fileset).getSrc(getProject()) == null) {\n                final File base = filesets[i].getDir(getProject());\n\n                for (int j = 0; j < initialResources[i].length; j++) {\n                    final File resourceAsFile =\n                        FILE_UTILS.resolveFile(base,\n                                              initialResources[i][j].getName());\n                    if (resourceAsFile.equals(zipFile)) {\n                        throw new BuildException(\"A zip file cannot include \"\n                                                 + \"itself\", getLocation());\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            FileNameMapper myMapper = new IdentityMapper();\n            if (filesets[i] instanceof ZipFileSet) {\n                final ZipFileSet zfs = (ZipFileSet) filesets[i];\n                if (zfs.getFullpath(getProject()) != null\n                    && !zfs.getFullpath(getProject()).equals(\"\")) {\n                    \r\n                    \r\n                    \r\n                    final MergingMapper fm = new MergingMapper();\n                    fm.setTo(zfs.getFullpath(getProject()));\n                    myMapper = fm;\n\n                } else if (zfs.getPrefix(getProject()) != null\n                           && !zfs.getPrefix(getProject()).equals(\"\")) {\n                    final GlobPatternMapper gm = new GlobPatternMapper();\n                    gm.setFrom(\"*\");\n                    String prefix = zfs.getPrefix(getProject());\n                    if (!prefix.endsWith(\"/\") && !prefix.endsWith(\"\\\\\")) {\n                        prefix += \"/\";\n                    }\n                    gm.setTo(prefix + \"*\");\n                    myMapper = gm;\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         myMapper);\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","date":"2017-04-13 23:15:22","endLine":1417,"groupId":"9425","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getResourcesToAdd","params":"(finalFileSet[]filesets@finalFilezipFile@booleanneedsUpdate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ff/720147c115fee11709fdad087767143bd69291.src","preCode":"    protected ArchiveState getResourcesToAdd(final FileSet[] filesets,\n                                             final File zipFile,\n                                             boolean needsUpdate)\n        throws BuildException {\n\n        final Resource[][] initialResources = grabResources(filesets);\n        if (isEmpty(initialResources)) {\n            if (Boolean.FALSE.equals(HAVE_NON_FILE_SET_RESOURCES_TO_ADD.get())) {\n                if (needsUpdate && doUpdate) {\n                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                    return new ArchiveState(true, initialResources);\n                }\n\n                if (\"skip\".equals(emptyBehavior)) {\n                    if (doUpdate) {\n                        logWhenWriting(archiveType + \" archive \" + zipFile\n                                       + \" not updated because no new files were\"\n                                       + \" included.\", Project.MSG_VERBOSE);\n                    } else {\n                        logWhenWriting(\"Warning: skipping \" + archiveType\n                                       + \" archive \" + zipFile\n                                       + \" because no files were included.\",\n                                       Project.MSG_WARN);\n                    }\n                } else if (\"fail\".equals(emptyBehavior)) {\n                    throw new BuildException(\"Cannot create \" + archiveType\n                                             + \" archive \" + zipFile\n                                             + \": no files were included.\",\n                                             getLocation());\n                } else {\n                    \r\n                    if (!zipFile.exists())  {\n                        needsUpdate = true;\n                    }\n                }\n            }\n\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[filesets.length][];\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (!(fileset instanceof ZipFileSet)\n                || ((ZipFileSet) fileset).getSrc(getProject()) == null) {\n                final File base = filesets[i].getDir(getProject());\n\n                for (int j = 0; j < initialResources[i].length; j++) {\n                    final File resourceAsFile =\n                        FILE_UTILS.resolveFile(base,\n                                              initialResources[i][j].getName());\n                    if (resourceAsFile.equals(zipFile)) {\n                        throw new BuildException(\"A zip file cannot include \"\n                                                 + \"itself\", getLocation());\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            FileNameMapper myMapper = new IdentityMapper();\n            if (filesets[i] instanceof ZipFileSet) {\n                final ZipFileSet zfs = (ZipFileSet) filesets[i];\n                if (zfs.getFullpath(getProject()) != null\n                    && !zfs.getFullpath(getProject()).equals(\"\")) {\n                    \r\n                    \r\n                    \r\n                    final MergingMapper fm = new MergingMapper();\n                    fm.setTo(zfs.getFullpath(getProject()));\n                    myMapper = fm;\n\n                } else if (zfs.getPrefix(getProject()) != null\n                           && !zfs.getPrefix(getProject()).equals(\"\")) {\n                    final GlobPatternMapper gm = new GlobPatternMapper();\n                    gm.setFrom(\"*\");\n                    String prefix = zfs.getPrefix(getProject());\n                    if (!prefix.endsWith(\"/\") && !prefix.endsWith(\"\\\\\")) {\n                        prefix += \"/\";\n                    }\n                    gm.setTo(prefix + \"*\");\n                    myMapper = gm;\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         myMapper);\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Zip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1280,"status":"N"},{"authorDate":"2018-04-02 02:07:39","commitOrder":13,"curCode":"    protected ArchiveState getNonFileSetResourcesToAdd(final ResourceCollection[] rcs,\n                                                       final File zipFile,\n                                                       boolean needsUpdate)\n        throws BuildException {\n        \r\n\r\n\r\n\n\n        final Resource[][] initialResources = grabNonFileSetResources(rcs);\n        final boolean empty = isEmpty(initialResources);\n        HAVE_NON_FILE_SET_RESOURCES_TO_ADD.set(!empty);\n        if (empty) {\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[rcs.length][];\n\n        for (int i = 0; i < rcs.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            for (int j = 0; j < initialResources[i].length; j++) {\n                final FileProvider fp =\n                    initialResources[i][j].as(FileProvider.class);\n                if (fp != null && zipFile.equals(fp.getFile())) {\n                    throw new BuildException(\"A zip file cannot include itself\",\n                        getLocation());\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         new IdentityMapper());\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","date":"2018-04-02 02:07:39","endLine":1552,"groupId":"633","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getNonFileSetResourcesToAdd","params":"(finalResourceCollection[]rcs@finalFilezipFile@booleanneedsUpdate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/07/8c21a7565a9e4b06bde4637902f0fec344d820.src","preCode":"    protected ArchiveState getNonFileSetResourcesToAdd(final ResourceCollection[] rcs,\n                                                       final File zipFile,\n                                                       boolean needsUpdate)\n        throws BuildException {\n        \r\n\r\n\r\n\n\n        final Resource[][] initialResources = grabNonFileSetResources(rcs);\n        final boolean empty = isEmpty(initialResources);\n        HAVE_NON_FILE_SET_RESOURCES_TO_ADD.set(Boolean.valueOf(!empty));\n        if (empty) {\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[rcs.length][];\n\n        for (int i = 0; i < rcs.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            for (int j = 0; j < initialResources[i].length; j++) {\n                final FileProvider fp =\n                    initialResources[i][j].as(FileProvider.class);\n                if (fp != null && zipFile.equals(fp.getFile())) {\n                    throw new BuildException(\"A zip file cannot include itself\",\n                        getLocation());\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         new IdentityMapper());\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Zip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1489,"status":"M"}],"commitId":"95495d57aa5cca8fc350ebfb10f6d390f40290cb","commitMessage":"@@@Remove extraneous casts and (un)boxing.  tersify logic","date":"2018-04-02 02:07:39","modifiedFileCount":"178","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-04-02 02:07:39","codes":[{"authorDate":"2018-04-15 15:21:31","commitOrder":14,"curCode":"    protected ArchiveState getResourcesToAdd(final FileSet[] filesets,\n                                             final File zipFile,\n                                             boolean needsUpdate)\n        throws BuildException {\n\n        final Resource[][] initialResources = grabResources(filesets);\n        if (isEmpty(initialResources)) {\n            if (Boolean.FALSE.equals(HAVE_NON_FILE_SET_RESOURCES_TO_ADD.get())) {\n                if (needsUpdate && doUpdate) {\n                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                    return new ArchiveState(true, initialResources);\n                }\n\n                if (\"skip\".equals(emptyBehavior)) {\n                    if (doUpdate) {\n                        logWhenWriting(archiveType + \" archive \" + zipFile\n                                       + \" not updated because no new files were\"\n                                       + \" included.\", Project.MSG_VERBOSE);\n                    } else {\n                        logWhenWriting(\"Warning: skipping \" + archiveType\n                                       + \" archive \" + zipFile\n                                       + \" because no files were included.\",\n                                       Project.MSG_WARN);\n                    }\n                } else if (\"fail\".equals(emptyBehavior)) {\n                    throw new BuildException(\"Cannot create \" + archiveType\n                                             + \" archive \" + zipFile\n                                             + \": no files were included.\",\n                                             getLocation());\n                } else {\n                    \r\n                    if (!zipFile.exists())  {\n                        needsUpdate = true;\n                    }\n                }\n            }\n\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[filesets.length][];\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (!(fileset instanceof ZipFileSet)\n                || ((ZipFileSet) fileset).getSrc(getProject()) == null) {\n                final File base = filesets[i].getDir(getProject());\n\n                for (int j = 0; j < initialResources[i].length; j++) {\n                    final File resourceAsFile =\n                        FILE_UTILS.resolveFile(base,\n                                              initialResources[i][j].getName());\n                    if (resourceAsFile.equals(zipFile)) {\n                        throw new BuildException(\"A zip file cannot include \"\n                                                 + \"itself\", getLocation());\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            FileNameMapper myMapper = new IdentityMapper();\n            if (filesets[i] instanceof ZipFileSet) {\n                final ZipFileSet zfs = (ZipFileSet) filesets[i];\n                if (zfs.getFullpath(getProject()) != null\n                    && !zfs.getFullpath(getProject()).isEmpty()) {\n                    \r\n                    \r\n                    \r\n                    final MergingMapper fm = new MergingMapper();\n                    fm.setTo(zfs.getFullpath(getProject()));\n                    myMapper = fm;\n\n                } else if (zfs.getPrefix(getProject()) != null\n                           && !zfs.getPrefix(getProject()).isEmpty()) {\n                    final GlobPatternMapper gm = new GlobPatternMapper();\n                    gm.setFrom(\"*\");\n                    String prefix = zfs.getPrefix(getProject());\n                    if (!prefix.endsWith(\"/\") && !prefix.endsWith(\"\\\\\")) {\n                        prefix += \"/\";\n                    }\n                    gm.setTo(prefix + \"*\");\n                    myMapper = gm;\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         myMapper);\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","date":"2018-04-15 15:22:13","endLine":1459,"groupId":"12500","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getResourcesToAdd","params":"(finalFileSet[]filesets@finalFilezipFile@booleanneedsUpdate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/bf/61812fd76abe5accafad39cb603038747a6a72.src","preCode":"    protected ArchiveState getResourcesToAdd(final FileSet[] filesets,\n                                             final File zipFile,\n                                             boolean needsUpdate)\n        throws BuildException {\n\n        final Resource[][] initialResources = grabResources(filesets);\n        if (isEmpty(initialResources)) {\n            if (Boolean.FALSE.equals(HAVE_NON_FILE_SET_RESOURCES_TO_ADD.get())) {\n                if (needsUpdate && doUpdate) {\n                    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                    return new ArchiveState(true, initialResources);\n                }\n\n                if (\"skip\".equals(emptyBehavior)) {\n                    if (doUpdate) {\n                        logWhenWriting(archiveType + \" archive \" + zipFile\n                                       + \" not updated because no new files were\"\n                                       + \" included.\", Project.MSG_VERBOSE);\n                    } else {\n                        logWhenWriting(\"Warning: skipping \" + archiveType\n                                       + \" archive \" + zipFile\n                                       + \" because no files were included.\",\n                                       Project.MSG_WARN);\n                    }\n                } else if (\"fail\".equals(emptyBehavior)) {\n                    throw new BuildException(\"Cannot create \" + archiveType\n                                             + \" archive \" + zipFile\n                                             + \": no files were included.\",\n                                             getLocation());\n                } else {\n                    \r\n                    if (!zipFile.exists())  {\n                        needsUpdate = true;\n                    }\n                }\n            }\n\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[filesets.length][];\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (!(fileset instanceof ZipFileSet)\n                || ((ZipFileSet) fileset).getSrc(getProject()) == null) {\n                final File base = filesets[i].getDir(getProject());\n\n                for (int j = 0; j < initialResources[i].length; j++) {\n                    final File resourceAsFile =\n                        FILE_UTILS.resolveFile(base,\n                                              initialResources[i][j].getName());\n                    if (resourceAsFile.equals(zipFile)) {\n                        throw new BuildException(\"A zip file cannot include \"\n                                                 + \"itself\", getLocation());\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < filesets.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            FileNameMapper myMapper = new IdentityMapper();\n            if (filesets[i] instanceof ZipFileSet) {\n                final ZipFileSet zfs = (ZipFileSet) filesets[i];\n                if (zfs.getFullpath(getProject()) != null\n                    && !zfs.getFullpath(getProject()).equals(\"\")) {\n                    \r\n                    \r\n                    \r\n                    final MergingMapper fm = new MergingMapper();\n                    fm.setTo(zfs.getFullpath(getProject()));\n                    myMapper = fm;\n\n                } else if (zfs.getPrefix(getProject()) != null\n                           && !zfs.getPrefix(getProject()).equals(\"\")) {\n                    final GlobPatternMapper gm = new GlobPatternMapper();\n                    gm.setFrom(\"*\");\n                    String prefix = zfs.getPrefix(getProject());\n                    if (!prefix.endsWith(\"/\") && !prefix.endsWith(\"\\\\\")) {\n                        prefix += \"/\";\n                    }\n                    gm.setTo(prefix + \"*\");\n                    myMapper = gm;\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         myMapper);\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Zip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1322,"status":"M"},{"authorDate":"2018-04-02 02:07:39","commitOrder":14,"curCode":"    protected ArchiveState getNonFileSetResourcesToAdd(final ResourceCollection[] rcs,\n                                                       final File zipFile,\n                                                       boolean needsUpdate)\n        throws BuildException {\n        \r\n\r\n\r\n\n\n        final Resource[][] initialResources = grabNonFileSetResources(rcs);\n        final boolean empty = isEmpty(initialResources);\n        HAVE_NON_FILE_SET_RESOURCES_TO_ADD.set(!empty);\n        if (empty) {\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[rcs.length][];\n\n        for (int i = 0; i < rcs.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            for (int j = 0; j < initialResources[i].length; j++) {\n                final FileProvider fp =\n                    initialResources[i][j].as(FileProvider.class);\n                if (fp != null && zipFile.equals(fp.getFile())) {\n                    throw new BuildException(\"A zip file cannot include itself\",\n                        getLocation());\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         new IdentityMapper());\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","date":"2018-04-02 02:07:39","endLine":1552,"groupId":"12500","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getNonFileSetResourcesToAdd","params":"(finalResourceCollection[]rcs@finalFilezipFile@booleanneedsUpdate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/07/8c21a7565a9e4b06bde4637902f0fec344d820.src","preCode":"    protected ArchiveState getNonFileSetResourcesToAdd(final ResourceCollection[] rcs,\n                                                       final File zipFile,\n                                                       boolean needsUpdate)\n        throws BuildException {\n        \r\n\r\n\r\n\n\n        final Resource[][] initialResources = grabNonFileSetResources(rcs);\n        final boolean empty = isEmpty(initialResources);\n        HAVE_NON_FILE_SET_RESOURCES_TO_ADD.set(!empty);\n        if (empty) {\n            \r\n            \r\n            return new ArchiveState(needsUpdate, initialResources);\n        }\n\n        \r\n\n        if (!zipFile.exists()) {\n            return new ArchiveState(true, initialResources);\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        final Resource[][] newerResources = new Resource[rcs.length][];\n\n        for (int i = 0; i < rcs.length; i++) {\n            if (initialResources[i].length == 0) {\n                newerResources[i] = new Resource[] {};\n                continue;\n            }\n\n            for (int j = 0; j < initialResources[i].length; j++) {\n                final FileProvider fp =\n                    initialResources[i][j].as(FileProvider.class);\n                if (fp != null && zipFile.equals(fp.getFile())) {\n                    throw new BuildException(\"A zip file cannot include itself\",\n                        getLocation());\n                }\n            }\n\n            newerResources[i] = selectOutOfDateResources(initialResources[i],\n                                                         new IdentityMapper());\n            needsUpdate = needsUpdate || (newerResources[i].length > 0);\n\n            if (needsUpdate && !doUpdate) {\n                \r\n                \r\n                break;\n            }\n        }\n\n        if (needsUpdate && !doUpdate) {\n            \r\n            return new ArchiveState(true, initialResources);\n        }\n\n        return new ArchiveState(needsUpdate, newerResources);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Zip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1489,"status":"N"}],"commitId":"547d7a8b886d1f1a7fc5eae8d42b6981bfd38cc4","commitMessage":"@@@Yet more isEmpty()","date":"2018-04-15 15:22:13","modifiedFileCount":"6","status":"M","submitter":"Gintas Grigelionis"}]
