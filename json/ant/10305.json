[{"authorTime":"2014-03-31 07:40:53","codes":[{"authorDate":"2014-03-31 07:40:53","commitOrder":2,"curCode":"    public void testReplaceRegex() throws IOException {\n        if (! hasRegex(\"testReplaceRegex\"))\n            return;\n        String contents = getFileString(\n            \"replaceregex\", getProject().getProperty(\"output\") + \"/replaceregex\");\n        assertStringContains(contents, \"world world world world\");\n        assertStringContains(contents, \"dog Cat dog\");\n        assertStringContains(contents, \"moon Sun Sun\");\n        assertStringContains(contents, \"found WhiteSpace\");\n        assertStringContains(contents, \"Found digits [1234]\");\n        assertStringNotContains(contents, \"This is a line with digits\");\n    }\n","date":"2014-03-31 07:40:53","endLine":104,"groupId":"5069","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplaceRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/00/aa66abbc6218c4217a216e7e6b5a47d19f5f1c.src","preCode":"    public void testReplaceRegex() throws IOException {\n        if (! hasRegex(\"testReplaceRegex\"))\n            return;\n        String contents = getFileString(\n            \"replaceregex\", getProject().getProperty(\"output\") + \"/replaceregex\");\n        assertStringContains(contents, \"world world world world\");\n        assertStringContains(contents, \"dog Cat dog\");\n        assertStringContains(contents, \"moon Sun Sun\");\n        assertStringContains(contents, \"found WhiteSpace\");\n        assertStringContains(contents, \"Found digits [1234]\");\n        assertStringNotContains(contents, \"This is a line with digits\");\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"MB"},{"authorDate":"2014-03-31 07:40:53","commitOrder":2,"curCode":"    public void testContainsRegex() throws IOException {\n        if (! hasRegex(\"testContainsRegex\"))\n            return;\n        String contents = getFileString(\n            \"containsregex\", getProject().getProperty(\"output\") + \"/containsregex\");\n        assertStringContains(contents, \"hello world\");\n        assertStringNotContains(contents, \"this is the moon\");\n        assertStringContains(contents, \"World here\");\n    }\n","date":"2014-03-31 07:40:53","endLine":155,"groupId":"5069","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainsRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/00/aa66abbc6218c4217a216e7e6b5a47d19f5f1c.src","preCode":"    public void testContainsRegex() throws IOException {\n        if (! hasRegex(\"testContainsRegex\"))\n            return;\n        String contents = getFileString(\n            \"containsregex\", getProject().getProperty(\"output\") + \"/containsregex\");\n        assertStringContains(contents, \"hello world\");\n        assertStringNotContains(contents, \"this is the moon\");\n        assertStringContains(contents, \"World here\");\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"B"}],"commitId":"b44a63dfe95420e9b9080a97822041d9db8debca","commitMessage":"@@@starting to change the test cases to make them use unique temporary directories to be able to run the test cases in multiple threads.\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@1583223 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-31 07:40:53","modifiedFileCount":"24","status":"M","submitter":"Antoine Levy-Lambert"},{"authorTime":"2014-04-19 05:00:38","codes":[{"authorDate":"2014-04-19 05:00:38","commitOrder":3,"curCode":"    public void testReplaceRegex() throws IOException {\n\n    \tbuildRule.executeTarget(\"hasregex\");\n        Assume.assumeTrue(\"Regex not present\",\n                getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));\n\n        buildRule.executeTarget(\"replaceregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\");\n        assertContains(\"world world world world\", contents);\n        assertContains(\"dog Cat dog\", contents);\n        assertContains(\"moon Sun Sun\", contents);\n        assertContains(\"found WhiteSpace\", contents);\n        assertContains(\"Found digits [1234]\", contents);\n        assertNotContains(\"This is a line with digits\", contents);\n    }\n","date":"2014-04-19 05:00:38","endLine":129,"groupId":"2307","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplaceRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f0/db15a0c41a44d20f7a40d32e84eb8339549b09.src","preCode":"    public void testReplaceRegex() throws IOException {\n        if (! hasRegex(\"testReplaceRegex\"))\n            return;\n        String contents = getFileString(\n            \"replaceregex\", getProject().getProperty(\"output\") + \"/replaceregex\");\n        assertStringContains(contents, \"world world world world\");\n        assertStringContains(contents, \"dog Cat dog\");\n        assertStringContains(contents, \"moon Sun Sun\");\n        assertStringContains(contents, \"found WhiteSpace\");\n        assertStringContains(contents, \"Found digits [1234]\");\n        assertStringNotContains(contents, \"This is a line with digits\");\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2014-04-19 05:00:38","commitOrder":3,"curCode":"    public void testContainsRegex() throws IOException {\n    \tbuildRule.executeTarget(\"hasregex\");\n        Assume.assumeTrue(\"Regex not present\", getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));\n\n        \r\n\n        buildRule.executeTarget(\"containsregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\");\n        assertContains(\"hello world\", contents);\n        assertNotContains(\"this is the moon\", contents);\n        assertContains(\"World here\", contents);\n    }\n","date":"2014-04-19 05:00:38","endLine":195,"groupId":"2307","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainsRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f0/db15a0c41a44d20f7a40d32e84eb8339549b09.src","preCode":"    public void testContainsRegex() throws IOException {\n        if (! hasRegex(\"testContainsRegex\"))\n            return;\n        String contents = getFileString(\n            \"containsregex\", getProject().getProperty(\"output\") + \"/containsregex\");\n        assertStringContains(contents, \"hello world\");\n        assertStringNotContains(contents, \"this is the moon\");\n        assertStringContains(contents, \"World here\");\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"}],"commitId":"b61c80746dd5df73899390826e197d2656784f91","commitMessage":"@@@Test improvements: convert to JUnit4.  improved error testing and remove sleeps\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@1588563 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-04-19 05:00:38","modifiedFileCount":"268","status":"M","submitter":"mclarke"},{"authorTime":"2018-04-03 02:11:31","codes":[{"authorDate":"2018-04-03 02:11:31","commitOrder":4,"curCode":"    public void testReplaceRegex() throws IOException {\n\n        buildRule.executeTarget(\"hasregex\");\n        assumeTrue(\"Regex not present\",\n                getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));\n\n        buildRule.executeTarget(\"replaceregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\");\n        assertContains(\"world world world world\", contents);\n        assertContains(\"dog Cat dog\", contents);\n        assertContains(\"moon Sun Sun\", contents);\n        assertContains(\"found WhiteSpace\", contents);\n        assertContains(\"Found digits [1234]\", contents);\n        assertNotContains(\"This is a line with digits\", contents);\n    }\n","date":"2018-04-03 02:11:31","endLine":129,"groupId":"2307","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplaceRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/66/36615b52220f1e14336e7531dc89fa89c1b2b1.src","preCode":"    public void testReplaceRegex() throws IOException {\n\n        buildRule.executeTarget(\"hasregex\");\n        Assume.assumeTrue(\"Regex not present\",\n                getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));\n\n        buildRule.executeTarget(\"replaceregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\");\n        assertContains(\"world world world world\", contents);\n        assertContains(\"dog Cat dog\", contents);\n        assertContains(\"moon Sun Sun\", contents);\n        assertContains(\"found WhiteSpace\", contents);\n        assertContains(\"Found digits [1234]\", contents);\n        assertNotContains(\"This is a line with digits\", contents);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2018-04-03 02:11:31","commitOrder":4,"curCode":"    public void testContainsRegex() throws IOException {\n        buildRule.executeTarget(\"hasregex\");\n        assumeTrue(\"Regex not present\", getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));\n\n        \r\n\n        buildRule.executeTarget(\"containsregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\");\n        assertContains(\"hello world\", contents);\n        assertNotContains(\"this is the moon\", contents);\n        assertContains(\"World here\", contents);\n    }\n","date":"2018-04-03 02:11:31","endLine":195,"groupId":"2307","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainsRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/66/36615b52220f1e14336e7531dc89fa89c1b2b1.src","preCode":"    public void testContainsRegex() throws IOException {\n        buildRule.executeTarget(\"hasregex\");\n        Assume.assumeTrue(\"Regex not present\", getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));\n\n        \r\n\n        buildRule.executeTarget(\"containsregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\");\n        assertContains(\"hello world\", contents);\n        assertNotContains(\"this is the moon\", contents);\n        assertContains(\"World here\", contents);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"}],"commitId":"805b6eb058e79a6013c970034fe9cbf98e398ddf","commitMessage":"@@@Import assumptions statically","date":"2018-04-03 02:11:31","modifiedFileCount":"24","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-04-14 20:36:57","codes":[{"authorDate":"2018-04-14 20:36:57","commitOrder":5,"curCode":"    public void testReplaceRegex() throws IOException {\n\n        buildRule.executeTarget(\"hasregex\");\n        assumeTrue(\"Regex not present\",\n                getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));\n\n        buildRule.executeTarget(\"replaceregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\");\n        assertThat(contents, containsString(\"world world world world\"));\n        assertThat(contents, containsString(\"dog Cat dog\"));\n        assertThat(contents, containsString(\"moon Sun Sun\"));\n        assertThat(contents, containsString(\"found WhiteSpace\"));\n        assertThat(contents, containsString(\"Found digits [1234]\"));\n        assertThat(contents, not(containsString(\"This is a line with digits\")));\n    }\n","date":"2018-04-14 20:41:24","endLine":130,"groupId":"2307","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplaceRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/fb/60f2c8de25dd3e86bc340eb32a5c916b326554.src","preCode":"    public void testReplaceRegex() throws IOException {\n\n        buildRule.executeTarget(\"hasregex\");\n        assumeTrue(\"Regex not present\",\n                getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));\n\n        buildRule.executeTarget(\"replaceregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\");\n        assertContains(\"world world world world\", contents);\n        assertContains(\"dog Cat dog\", contents);\n        assertContains(\"moon Sun Sun\", contents);\n        assertContains(\"found WhiteSpace\", contents);\n        assertContains(\"Found digits [1234]\", contents);\n        assertNotContains(\"This is a line with digits\", contents);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2018-04-14 20:36:57","commitOrder":5,"curCode":"    public void testContainsRegex() throws IOException {\n        buildRule.executeTarget(\"hasregex\");\n        assumeTrue(\"Regex not present\", getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));\n\n        \r\n\n        buildRule.executeTarget(\"containsregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\");\n        assertThat(contents, containsString(\"hello world\"));\n        assertThat(contents, not(containsString(\"this is the moon\")));\n        assertThat(contents, containsString(\"World here\"));\n    }\n","date":"2018-04-14 20:41:24","endLine":197,"groupId":"2307","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainsRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/fb/60f2c8de25dd3e86bc340eb32a5c916b326554.src","preCode":"    public void testContainsRegex() throws IOException {\n        buildRule.executeTarget(\"hasregex\");\n        assumeTrue(\"Regex not present\", getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));\n\n        \r\n\n        buildRule.executeTarget(\"containsregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\");\n        assertContains(\"hello world\", contents);\n        assertNotContains(\"this is the moon\", contents);\n        assertContains(\"World here\", contents);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"81c3e6e3ddf5b1ef4e66018f1047e1b2ae8b3173","commitMessage":"@@@Deprecate AntAssert","date":"2018-04-14 20:41:24","modifiedFileCount":"75","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-04-23 05:55:41","codes":[{"authorDate":"2018-04-23 05:55:41","commitOrder":6,"curCode":"    public void testReplaceRegex() throws IOException {\n\n        buildRule.executeTarget(\"hasregex\");\n        assumeThat(\"Regex not present\",\n                getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\"),\n                containsString(\"bye world\"));\n\n        buildRule.executeTarget(\"replaceregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\");\n        assertThat(contents, containsString(\"world world world world\"));\n        assertThat(contents, containsString(\"dog Cat dog\"));\n        assertThat(contents, containsString(\"moon Sun Sun\"));\n        assertThat(contents, containsString(\"found WhiteSpace\"));\n        assertThat(contents, containsString(\"Found digits [1234]\"));\n        assertThat(contents, not(containsString(\"This is a line with digits\")));\n    }\n","date":"2018-04-23 05:55:41","endLine":131,"groupId":"2307","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplaceRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/af/f9de8192a0128b1452f0fe81cd03a125fb25b3.src","preCode":"    public void testReplaceRegex() throws IOException {\n\n        buildRule.executeTarget(\"hasregex\");\n        assumeTrue(\"Regex not present\",\n                getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));\n\n        buildRule.executeTarget(\"replaceregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\");\n        assertThat(contents, containsString(\"world world world world\"));\n        assertThat(contents, containsString(\"dog Cat dog\"));\n        assertThat(contents, containsString(\"moon Sun Sun\"));\n        assertThat(contents, containsString(\"found WhiteSpace\"));\n        assertThat(contents, containsString(\"Found digits [1234]\"));\n        assertThat(contents, not(containsString(\"This is a line with digits\")));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2018-04-23 05:55:41","commitOrder":6,"curCode":"    public void testContainsRegex() throws IOException {\n        buildRule.executeTarget(\"hasregex\");\n        assertThat(\"Regex not present\",\n                getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\"),\n                containsString(\"bye world\"));\n\n        \r\n        \r\n\n        buildRule.executeTarget(\"containsregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\");\n        assertThat(contents, containsString(\"hello world\"));\n        assertThat(contents, not(containsString(\"this is the moon\")));\n        assertThat(contents, containsString(\"World here\"));\n    }\n","date":"2018-04-23 05:55:41","endLine":203,"groupId":"2307","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainsRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/af/f9de8192a0128b1452f0fe81cd03a125fb25b3.src","preCode":"    public void testContainsRegex() throws IOException {\n        buildRule.executeTarget(\"hasregex\");\n        assumeTrue(\"Regex not present\", getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\").contains(\"bye world\"));\n\n        \r\n\n        buildRule.executeTarget(\"containsregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\");\n        assertThat(contents, containsString(\"hello world\"));\n        assertThat(contents, not(containsString(\"this is the moon\")));\n        assertThat(contents, containsString(\"World here\"));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"4b1d9ae3a6bf6ebdec5fd1d6e347da2f286cbb7a","commitMessage":"@@@More matchers/fixtures/optimizations","date":"2018-04-23 05:55:41","modifiedFileCount":"20","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-04-23 13:05:52","codes":[{"authorDate":"2018-04-23 05:55:41","commitOrder":7,"curCode":"    public void testReplaceRegex() throws IOException {\n\n        buildRule.executeTarget(\"hasregex\");\n        assumeThat(\"Regex not present\",\n                getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\"),\n                containsString(\"bye world\"));\n\n        buildRule.executeTarget(\"replaceregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\");\n        assertThat(contents, containsString(\"world world world world\"));\n        assertThat(contents, containsString(\"dog Cat dog\"));\n        assertThat(contents, containsString(\"moon Sun Sun\"));\n        assertThat(contents, containsString(\"found WhiteSpace\"));\n        assertThat(contents, containsString(\"Found digits [1234]\"));\n        assertThat(contents, not(containsString(\"This is a line with digits\")));\n    }\n","date":"2018-04-23 05:55:41","endLine":131,"groupId":"10305","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testReplaceRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/af/f9de8192a0128b1452f0fe81cd03a125fb25b3.src","preCode":"    public void testReplaceRegex() throws IOException {\n\n        buildRule.executeTarget(\"hasregex\");\n        assumeThat(\"Regex not present\",\n                getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\"),\n                containsString(\"bye world\"));\n\n        buildRule.executeTarget(\"replaceregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregex\");\n        assertThat(contents, containsString(\"world world world world\"));\n        assertThat(contents, containsString(\"dog Cat dog\"));\n        assertThat(contents, containsString(\"moon Sun Sun\"));\n        assertThat(contents, containsString(\"found WhiteSpace\"));\n        assertThat(contents, containsString(\"Found digits [1234]\"));\n        assertThat(contents, not(containsString(\"This is a line with digits\")));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"N"},{"authorDate":"2018-04-23 13:05:52","commitOrder":7,"curCode":"    public void testContainsRegex() throws IOException {\n        buildRule.executeTarget(\"hasregex\");\n        assumeThat(\"Regex not present\",\n                getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\"),\n                containsString(\"bye world\"));\n\n        \r\n        \r\n\n        buildRule.executeTarget(\"containsregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\");\n        assertThat(contents, containsString(\"hello world\"));\n        assertThat(contents, not(containsString(\"this is the moon\")));\n        assertThat(contents, containsString(\"World here\"));\n    }\n","date":"2018-04-23 13:05:52","endLine":203,"groupId":"10305","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testContainsRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/92/8348b526c77e308f757d1add931fe2f64c7bb7.src","preCode":"    public void testContainsRegex() throws IOException {\n        buildRule.executeTarget(\"hasregex\");\n        assertThat(\"Regex not present\",\n                getFileString(buildRule.getProject().getProperty(\"output\") + \"/replaceregexp\"),\n                containsString(\"bye world\"));\n\n        \r\n        \r\n\n        buildRule.executeTarget(\"containsregex\");\n        String contents = getFileString(buildRule.getProject().getProperty(\"output\") + \"/containsregex\");\n        assertThat(contents, containsString(\"hello world\"));\n        assertThat(contents, not(containsString(\"this is the moon\")));\n        assertThat(contents, containsString(\"World here\"));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/filters/TokenFilterTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"025ec7bfa4df95a2add8c30c5ef85f3b06872240","commitMessage":"@@@Fix: assumption became assertion by mistake","date":"2018-04-23 13:05:52","modifiedFileCount":"1","status":"M","submitter":"Gintas Grigelionis"}]
