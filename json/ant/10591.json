[{"authorTime":"2006-12-28 07:48:39","codes":[{"authorDate":"2006-12-28 07:48:39","commitOrder":13,"curCode":"    public String diagnoseCreationFailure(String componentName, String type) {\n        StringWriter errorText = new StringWriter();\n        PrintWriter out = new PrintWriter(errorText);\n        out.println(\"Problem: failed to create \" + type + \" \" + componentName);\n        \r\n        boolean lowlevel = false;\n        boolean jars = false;\n        boolean definitions = false;\n        boolean antTask;\n        String home = System.getProperty(Launcher.USER_HOMEDIR);\n        File libDir = new File(home, Launcher.USER_LIBDIR);\n        String antHomeLib;\n        boolean probablyIDE = false;\n        String anthome = System.getProperty(MagicNames.ANT_HOME);\n        if (anthome != null) {\n            File antHomeLibDir = new File(anthome, \"lib\");\n            antHomeLib = antHomeLibDir.getAbsolutePath();\n        } else {\n            \r\n            probablyIDE = true;\n            antHomeLib = \"ANT_HOME\" + File.separatorChar + \"lib\";\n        }\n        StringBuffer dirListingText = new StringBuffer();\n        final String tab = \"        -\";\n        dirListingText.append(tab);\n        dirListingText.append(antHomeLib);\n        dirListingText.append('\\n');\n        if (probablyIDE) {\n            dirListingText.append(tab);\n            dirListingText.append(\"the IDE Ant configuration dialogs\");\n        } else {\n            dirListingText.append(tab);\n            dirListingText.append(libDir);\n            dirListingText.append('\\n');\n            dirListingText.append(tab);\n            dirListingText.append(\n                    \"a directory added on the command line with the -lib argument\");\n        }\n\n        String dirListing = dirListingText.toString();\n\n        \r\n        AntTypeDefinition def = getDefinition(componentName);\n        if (def == null) {\n            \r\n            printUnknownDefinition(out, componentName, dirListing);\n            definitions = true;\n        } else {\n            \r\n            final String classname = def.getClassName();\n            antTask = classname.startsWith(\"org.apache.tools.ant.\");\n            boolean optional = classname.startsWith(\"org.apache.tools.ant.taskdefs.optional\");\n            optional |= classname.startsWith(\"org.apache.tools.ant.types.optional\");\n\n            \r\n            Class clazz = null;\n            try {\n                clazz = def.innerGetTypeClass();\n            } catch (ClassNotFoundException e) {\n                jars = true;\n                if (!optional) {\n                    definitions = true;\n                }\n                printClassNotFound(out, classname, optional, dirListing);\n            } catch (NoClassDefFoundError ncdfe) {\n                jars = true;\n                printNotLoadDependentClass(out, optional, ncdfe, dirListing);\n            }\n            \r\n            if (clazz != null) {\n                \r\n                try {\n                    def.innerCreateAndSet(clazz, project);\n                    \r\n                    out.println(\"The component could be instantiated.\");\n                } catch (NoSuchMethodException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" has no compatible constructor.\");\n\n                } catch (InstantiationException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" is abstract and cannot be instantiated.\");\n                } catch (IllegalAccessException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The constructor for \" + classname\n                            + \" is private and cannot be invoked.\");\n                } catch (InvocationTargetException ex) {\n                    lowlevel = true;\n                    Throwable t = ex.getTargetException();\n                    out.println(\"Cause: The constructor threw the exception\");\n                    out.println(t.toString());\n                    t.printStackTrace(out);\n                }  catch (NoClassDefFoundError ncdfe) {\n                    jars = true;\n                    out.println(\"Cause:  A class needed by class \"\n                            + classname + \" cannot be found: \");\n                    out.println(\"       \" + ncdfe.getMessage());\n                    out.println(\"Action: Determine what extra JAR files are\"\n                                + \" needed, and place them in:\");\n                    out.println(dirListing);\n                }\n            }\n            out.println();\n            out.println(\"Do not panic, this is a common problem.\");\n            if (definitions) {\n                out.println(\"It may just be a typographical error in the build file \"\n                        + \"or the task/type declaration.\");\n            }\n            if (jars) {\n                out.println(\"The commonest cause is a missing JAR.\");\n            }\n            if (lowlevel) {\n                out.println(\"This is quite a low level problem, which may need \"\n                        + \"consultation with the author of the task.\");\n                if (antTask) {\n                    out.println(\"This may be the Ant team. Please file a \"\n                            + \"defect or contact the developer team.\");\n                } else {\n                    out.println(\"This does not appear to be a task bundled with Ant.\");\n                    out.println(\"Please take it up with the supplier of the third-party \"\n                            + type + \".\");\n                    out.println(\"If you have written it yourself, you probably have a bug to fix.\");\n                }\n            } else {\n                out.println();\n                out.println(\"This is not a bug; it is a configuration problem\");\n            }\n        }\n        out.flush();\n        out.close();\n        return errorText.toString();\n    }\n","date":"2006-12-28 07:48:39","endLine":944,"groupId":"2611","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"diagnoseCreationFailure","params":"(StringcomponentName@Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/35/5e11aa2e99607a7cc6f95e1307fb5c173897af.src","preCode":"    public String diagnoseCreationFailure(String componentName, String type) {\n        StringWriter errorText = new StringWriter();\n        PrintWriter out = new PrintWriter(errorText);\n        out.println(\"Problem: failed to create \" + type + \" \" + componentName);\n        \r\n        boolean lowlevel = false;\n        boolean jars = false;\n        boolean definitions = false;\n        boolean antTask;\n        String home = System.getProperty(Launcher.USER_HOMEDIR);\n        File libDir = new File(home, Launcher.USER_LIBDIR);\n        String antHomeLib;\n        boolean probablyIDE = false;\n        String anthome = System.getProperty(MagicNames.ANT_HOME);\n        if (anthome != null) {\n            File antHomeLibDir = new File(anthome, \"lib\");\n            antHomeLib = antHomeLibDir.getAbsolutePath();\n        } else {\n            \r\n            probablyIDE = true;\n            antHomeLib = \"ANT_HOME\" + File.separatorChar + \"lib\";\n        }\n        StringBuffer dirListingText = new StringBuffer();\n        final String tab = \"        -\";\n        dirListingText.append(tab);\n        dirListingText.append(antHomeLib);\n        dirListingText.append('\\n');\n        if (probablyIDE) {\n            dirListingText.append(tab);\n            dirListingText.append(\"the IDE Ant configuration dialogs\");\n        } else {\n            dirListingText.append(tab);\n            dirListingText.append(libDir);\n            dirListingText.append('\\n');\n            dirListingText.append(tab);\n            dirListingText.append(\n                    \"a directory added on the command line with the -lib argument\");\n        }\n\n        String dirListing = dirListingText.toString();\n\n        \r\n        AntTypeDefinition def = getDefinition(componentName);\n        if (def == null) {\n            \r\n            printUnknownDefinition(out, componentName, dirListing);\n            definitions = true;\n        } else {\n            \r\n            final String classname = def.getClassName();\n            antTask = classname.startsWith(\"org.apache.tools.ant.\");\n            boolean optional = classname.startsWith(\"org.apache.tools.ant.taskdefs.optional\");\n            optional |= classname.startsWith(\"org.apache.tools.ant.types.optional\");\n\n            \r\n            Class clazz = null;\n            try {\n                clazz = def.innerGetTypeClass();\n            } catch (ClassNotFoundException e) {\n                jars = true;\n                if (!optional) {\n                    definitions = true;\n                }\n                printClassNotFound(out, classname, optional, dirListing);\n            } catch (NoClassDefFoundError ncdfe) {\n                jars = true;\n                printNotLoadDependentClass(out, optional, ncdfe, dirListing);\n            }\n            \r\n            if (clazz != null) {\n                \r\n                try {\n                    def.innerCreateAndSet(clazz, project);\n                    \r\n                    out.println(\"The component could be instantiated.\");\n                } catch (NoSuchMethodException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" has no compatible constructor.\");\n\n                } catch (InstantiationException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" is abstract and cannot be instantiated.\");\n                } catch (IllegalAccessException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The constructor for \" + classname\n                            + \" is private and cannot be invoked.\");\n                } catch (InvocationTargetException ex) {\n                    lowlevel = true;\n                    Throwable t = ex.getTargetException();\n                    out.println(\"Cause: The constructor threw the exception\");\n                    out.println(t.toString());\n                    t.printStackTrace(out);\n                }  catch (NoClassDefFoundError ncdfe) {\n                    jars = true;\n                    out.println(\"Cause:  A class needed by class \"\n                            + classname + \" cannot be found: \");\n                    out.println(\"       \" + ncdfe.getMessage());\n                    out.println(\"Action: Determine what extra JAR files are\"\n                                + \" needed, and place them in:\");\n                    out.println(dirListing);\n                }\n            }\n            out.println();\n            out.println(\"Do not panic, this is a common problem.\");\n            if (definitions) {\n                out.println(\"It may just be a typographical error in the build file \"\n                        + \"or the task/type declaration.\");\n            }\n            if (jars) {\n                out.println(\"The commonest cause is a missing JAR.\");\n            }\n            if (lowlevel) {\n                out.println(\"This is quite a low level problem, which may need \"\n                        + \"consultation with the author of the task.\");\n                if (antTask) {\n                    out.println(\"This may be the Ant team. Please file a \"\n                            + \"defect or contact the developer team.\");\n                } else {\n                    out.println(\"This does not appear to be a task bundled with Ant.\");\n                    out.println(\"Please take it up with the supplier of the third-party \"\n                            + type + \".\");\n                    out.println(\"If you have written it yourself, you probably have a bug to fix.\");\n                }\n            } else {\n                out.println();\n                out.println(\"This is not a bug; it is a configuration problem\");\n            }\n        }\n        out.flush();\n        out.close();\n        return errorText.toString();\n    }\n","realPath":"src/main/org/apache/tools/ant/ComponentHelper.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":811,"status":"MB"},{"authorDate":"2006-12-28 07:48:39","commitOrder":13,"curCode":"    private void printClassNotFound(\n        PrintWriter out, String classname, boolean optional,\n        String dirListing) {\n        out.println(\"Cause: the class \" + classname + \" was not found.\");\n        if (optional) {\n            out.println(\"        This looks like one of Ant's optional components.\");\n            out.println(\"Action: Check that the appropriate optional JAR exists in\");\n            out.println(dirListing);\n        } else {\n            out.println(\"Action: Check that the component has been correctly declared\");\n            out.println(\"        and that the implementing JAR is in one of:\");\n            out.println(dirListing);\n        }\n    }\n","date":"2006-12-28 07:48:39","endLine":981,"groupId":"5338","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"printClassNotFound","params":"(PrintWriterout@Stringclassname@booleanoptional@StringdirListing)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/35/5e11aa2e99607a7cc6f95e1307fb5c173897af.src","preCode":"    private void printClassNotFound(\n        PrintWriter out, String classname, boolean optional,\n        String dirListing) {\n        out.println(\"Cause: the class \" + classname + \" was not found.\");\n        if (optional) {\n            out.println(\"        This looks like one of Ant's optional components.\");\n            out.println(\"Action: Check that the appropriate optional JAR exists in\");\n            out.println(dirListing);\n        } else {\n            out.println(\"Action: Check that the component has been correctly declared\");\n            out.println(\"        and that the implementing JAR is in one of:\");\n            out.println(dirListing);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/ComponentHelper.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":968,"status":"B"}],"commitId":"cdadcda40f178fa306bcb336bacaff34f3a0d026","commitMessage":"@@@checkstyle: make method a little smaller\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@490604 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-12-28 07:48:39","modifiedFileCount":"1","status":"M","submitter":"Peter Reilly"},{"authorTime":"2006-12-28 07:48:39","codes":[{"authorDate":"2012-08-21 01:49:13","commitOrder":14,"curCode":"    public String diagnoseCreationFailure(String componentName, String type) {\n        StringWriter errorText = new StringWriter();\n        PrintWriter out = new PrintWriter(errorText);\n        out.println(\"Problem: failed to create \" + type + \" \" + componentName);\n        \r\n        boolean lowlevel = false;\n        boolean jars = false;\n        boolean definitions = false;\n        boolean antTask;\n        String home = System.getProperty(Launcher.USER_HOMEDIR);\n        File libDir = new File(home, Launcher.USER_LIBDIR);\n        String antHomeLib;\n        boolean probablyIDE = false;\n        String anthome = System.getProperty(MagicNames.ANT_HOME);\n        if (anthome != null) {\n            File antHomeLibDir = new File(anthome, \"lib\");\n            antHomeLib = antHomeLibDir.getAbsolutePath();\n        } else {\n            \r\n            probablyIDE = true;\n            antHomeLib = \"ANT_HOME\" + File.separatorChar + \"lib\";\n        }\n        StringBuffer dirListingText = new StringBuffer();\n        final String tab = \"        -\";\n        dirListingText.append(tab);\n        dirListingText.append(antHomeLib);\n        dirListingText.append('\\n');\n        if (probablyIDE) {\n            dirListingText.append(tab);\n            dirListingText.append(\"the IDE Ant configuration dialogs\");\n        } else {\n            dirListingText.append(tab);\n            dirListingText.append(libDir);\n            dirListingText.append('\\n');\n            dirListingText.append(tab);\n            dirListingText.append(\"a directory added on the command line with the -lib argument\");\n        }\n        String dirListing = dirListingText.toString();\n\n        \r\n        AntTypeDefinition def = getDefinition(componentName);\n        if (def == null) {\n            \r\n            printUnknownDefinition(out, componentName, dirListing);\n            definitions = true;\n        } else {\n            \r\n            final String classname = def.getClassName();\n            antTask = classname.startsWith(\"org.apache.tools.ant.\");\n            boolean optional = classname.startsWith(\"org.apache.tools.ant.taskdefs.optional\");\n            optional |= classname.startsWith(\"org.apache.tools.ant.types.optional\");\n\n            \r\n            Class<?> clazz = null;\n            try {\n                clazz = def.innerGetTypeClass();\n            } catch (ClassNotFoundException e) {\n                jars = true;\n                if (!optional) {\n                    definitions = true;\n                }\n                printClassNotFound(out, classname, optional, dirListing);\n            } catch (NoClassDefFoundError ncdfe) {\n                jars = true;\n                printNotLoadDependentClass(out, optional, ncdfe, dirListing);\n            }\n            \r\n            if (clazz != null) {\n                \r\n                try {\n                    def.innerCreateAndSet(clazz, project);\n                    \r\n                    out.println(\"The component could be instantiated.\");\n                } catch (NoSuchMethodException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" has no compatible constructor.\");\n\n                } catch (InstantiationException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" is abstract and cannot be instantiated.\");\n                } catch (IllegalAccessException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The constructor for \" + classname\n                            + \" is private and cannot be invoked.\");\n                } catch (InvocationTargetException ex) {\n                    lowlevel = true;\n                    Throwable t = ex.getTargetException();\n                    out.println(\"Cause: The constructor threw the exception\");\n                    out.println(t.toString());\n                    t.printStackTrace(out);\n                }  catch (NoClassDefFoundError ncdfe) {\n                    jars = true;\n                    out.println(\"Cause:  A class needed by class \" + classname\n                            + \" cannot be found: \");\n                    out.println(\"       \" + ncdfe.getMessage());\n                    out.println(\"Action: Determine what extra JAR files are\"\n                            + \" needed, and place them in:\");\n                    out.println(dirListing);\n                }\n            }\n            out.println();\n            out.println(\"Do not panic, this is a common problem.\");\n            if (definitions) {\n                out.println(\"It may just be a typographical error in the build file \"\n                        + \"or the task/type declaration.\");\n            }\n            if (jars) {\n                out.println(\"The commonest cause is a missing JAR.\");\n            }\n            if (lowlevel) {\n                out.println(\"This is quite a low level problem, which may need \"\n                        + \"consultation with the author of the task.\");\n                if (antTask) {\n                    out.println(\"This may be the Ant team. Please file a \"\n                            + \"defect or contact the developer team.\");\n                } else {\n                    out.println(\"This does not appear to be a task bundled with Ant.\");\n                    out.println(\"Please take it up with the supplier of the third-party \" + type\n                            + \".\");\n                    out.println(\"If you have written it yourself, you probably have a bug to fix.\");\n                }\n            } else {\n                out.println();\n                out.println(\"This is not a bug; it is a configuration problem\");\n            }\n        }\n        out.flush();\n        out.close();\n        return errorText.toString();\n    }\n","date":"2012-08-21 01:49:13","endLine":1013,"groupId":"2611","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"diagnoseCreationFailure","params":"(StringcomponentName@Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/c5/823d1b8958e09072e53e4bb26c45515eb42257.src","preCode":"    public String diagnoseCreationFailure(String componentName, String type) {\n        StringWriter errorText = new StringWriter();\n        PrintWriter out = new PrintWriter(errorText);\n        out.println(\"Problem: failed to create \" + type + \" \" + componentName);\n        \r\n        boolean lowlevel = false;\n        boolean jars = false;\n        boolean definitions = false;\n        boolean antTask;\n        String home = System.getProperty(Launcher.USER_HOMEDIR);\n        File libDir = new File(home, Launcher.USER_LIBDIR);\n        String antHomeLib;\n        boolean probablyIDE = false;\n        String anthome = System.getProperty(MagicNames.ANT_HOME);\n        if (anthome != null) {\n            File antHomeLibDir = new File(anthome, \"lib\");\n            antHomeLib = antHomeLibDir.getAbsolutePath();\n        } else {\n            \r\n            probablyIDE = true;\n            antHomeLib = \"ANT_HOME\" + File.separatorChar + \"lib\";\n        }\n        StringBuffer dirListingText = new StringBuffer();\n        final String tab = \"        -\";\n        dirListingText.append(tab);\n        dirListingText.append(antHomeLib);\n        dirListingText.append('\\n');\n        if (probablyIDE) {\n            dirListingText.append(tab);\n            dirListingText.append(\"the IDE Ant configuration dialogs\");\n        } else {\n            dirListingText.append(tab);\n            dirListingText.append(libDir);\n            dirListingText.append('\\n');\n            dirListingText.append(tab);\n            dirListingText.append(\"a directory added on the command line with the -lib argument\");\n        }\n        String dirListing = dirListingText.toString();\n\n        \r\n        AntTypeDefinition def = getDefinition(componentName);\n        if (def == null) {\n            \r\n            printUnknownDefinition(out, componentName, dirListing);\n            definitions = true;\n        } else {\n            \r\n            final String classname = def.getClassName();\n            antTask = classname.startsWith(\"org.apache.tools.ant.\");\n            boolean optional = classname.startsWith(\"org.apache.tools.ant.taskdefs.optional\");\n            optional |= classname.startsWith(\"org.apache.tools.ant.types.optional\");\n\n            \r\n            Class clazz = null;\n            try {\n                clazz = def.innerGetTypeClass();\n            } catch (ClassNotFoundException e) {\n                jars = true;\n                if (!optional) {\n                    definitions = true;\n                }\n                printClassNotFound(out, classname, optional, dirListing);\n            } catch (NoClassDefFoundError ncdfe) {\n                jars = true;\n                printNotLoadDependentClass(out, optional, ncdfe, dirListing);\n            }\n            \r\n            if (clazz != null) {\n                \r\n                try {\n                    def.innerCreateAndSet(clazz, project);\n                    \r\n                    out.println(\"The component could be instantiated.\");\n                } catch (NoSuchMethodException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" has no compatible constructor.\");\n\n                } catch (InstantiationException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" is abstract and cannot be instantiated.\");\n                } catch (IllegalAccessException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The constructor for \" + classname\n                            + \" is private and cannot be invoked.\");\n                } catch (InvocationTargetException ex) {\n                    lowlevel = true;\n                    Throwable t = ex.getTargetException();\n                    out.println(\"Cause: The constructor threw the exception\");\n                    out.println(t.toString());\n                    t.printStackTrace(out);\n                }  catch (NoClassDefFoundError ncdfe) {\n                    jars = true;\n                    out.println(\"Cause:  A class needed by class \" + classname\n                            + \" cannot be found: \");\n                    out.println(\"       \" + ncdfe.getMessage());\n                    out.println(\"Action: Determine what extra JAR files are\"\n                            + \" needed, and place them in:\");\n                    out.println(dirListing);\n                }\n            }\n            out.println();\n            out.println(\"Do not panic, this is a common problem.\");\n            if (definitions) {\n                out.println(\"It may just be a typographical error in the build file \"\n                        + \"or the task/type declaration.\");\n            }\n            if (jars) {\n                out.println(\"The commonest cause is a missing JAR.\");\n            }\n            if (lowlevel) {\n                out.println(\"This is quite a low level problem, which may need \"\n                        + \"consultation with the author of the task.\");\n                if (antTask) {\n                    out.println(\"This may be the Ant team. Please file a \"\n                            + \"defect or contact the developer team.\");\n                } else {\n                    out.println(\"This does not appear to be a task bundled with Ant.\");\n                    out.println(\"Please take it up with the supplier of the third-party \" + type\n                            + \".\");\n                    out.println(\"If you have written it yourself, you probably have a bug to fix.\");\n                }\n            } else {\n                out.println();\n                out.println(\"This is not a bug; it is a configuration problem\");\n            }\n        }\n        out.flush();\n        out.close();\n        return errorText.toString();\n    }\n","realPath":"src/main/org/apache/tools/ant/ComponentHelper.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":882,"status":"M"},{"authorDate":"2006-12-28 07:48:39","commitOrder":14,"curCode":"    private void printClassNotFound(\n        PrintWriter out, String classname, boolean optional,\n        String dirListing) {\n        out.println(\"Cause: the class \" + classname + \" was not found.\");\n        if (optional) {\n            out.println(\"        This looks like one of Ant's optional components.\");\n            out.println(\"Action: Check that the appropriate optional JAR exists in\");\n            out.println(dirListing);\n        } else {\n            out.println(\"Action: Check that the component has been correctly declared\");\n            out.println(\"        and that the implementing JAR is in one of:\");\n            out.println(dirListing);\n        }\n    }\n","date":"2006-12-28 07:48:39","endLine":981,"groupId":"5338","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"printClassNotFound","params":"(PrintWriterout@Stringclassname@booleanoptional@StringdirListing)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/35/5e11aa2e99607a7cc6f95e1307fb5c173897af.src","preCode":"    private void printClassNotFound(\n        PrintWriter out, String classname, boolean optional,\n        String dirListing) {\n        out.println(\"Cause: the class \" + classname + \" was not found.\");\n        if (optional) {\n            out.println(\"        This looks like one of Ant's optional components.\");\n            out.println(\"Action: Check that the appropriate optional JAR exists in\");\n            out.println(dirListing);\n        } else {\n            out.println(\"Action: Check that the component has been correctly declared\");\n            out.println(\"        and that the implementing JAR is in one of:\");\n            out.println(dirListing);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/ComponentHelper.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":968,"status":"N"}],"commitId":"3d706ab8188a674936880b6f4530b0cf3991758b","commitMessage":"@@@java 5 updates\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@1375137 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-08-21 01:49:13","modifiedFileCount":"29","status":"M","submitter":"Matthew Jason Benson"},{"authorTime":"2006-12-28 07:48:39","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":15,"curCode":"    public String diagnoseCreationFailure(String componentName, String type) {\n        StringWriter errorText = new StringWriter();\n        PrintWriter out = new PrintWriter(errorText);\n        out.println(\"Problem: failed to create \" + type + \" \" + componentName);\n        \r\n        boolean lowlevel = false;\n        boolean jars = false;\n        boolean definitions = false;\n        boolean antTask;\n        String home = System.getProperty(Launcher.USER_HOMEDIR);\n        File libDir = new File(home, Launcher.USER_LIBDIR);\n        String antHomeLib;\n        boolean probablyIDE = false;\n        String anthome = System.getProperty(MagicNames.ANT_HOME);\n        if (anthome != null) {\n            File antHomeLibDir = new File(anthome, \"lib\");\n            antHomeLib = antHomeLibDir.getAbsolutePath();\n        } else {\n            \r\n            probablyIDE = true;\n            antHomeLib = \"ANT_HOME\" + File.separatorChar + \"lib\";\n        }\n        StringBuilder dirListingText = new StringBuilder();\n        final String tab = \"        -\";\n        dirListingText.append(tab);\n        dirListingText.append(antHomeLib);\n        dirListingText.append('\\n');\n        if (probablyIDE) {\n            dirListingText.append(tab);\n            dirListingText.append(\"the IDE Ant configuration dialogs\");\n        } else {\n            dirListingText.append(tab);\n            dirListingText.append(libDir);\n            dirListingText.append('\\n');\n            dirListingText.append(tab);\n            dirListingText.append(\"a directory added on the command line with the -lib argument\");\n        }\n        String dirListing = dirListingText.toString();\n\n        \r\n        AntTypeDefinition def = getDefinition(componentName);\n        if (def == null) {\n            \r\n            printUnknownDefinition(out, componentName, dirListing);\n            definitions = true;\n        } else {\n            \r\n            final String classname = def.getClassName();\n            antTask = classname.startsWith(\"org.apache.tools.ant.\");\n            boolean optional = classname.startsWith(\"org.apache.tools.ant.taskdefs.optional\");\n            optional |= classname.startsWith(\"org.apache.tools.ant.types.optional\");\n\n            \r\n            Class<?> clazz = null;\n            try {\n                clazz = def.innerGetTypeClass();\n            } catch (ClassNotFoundException e) {\n                jars = true;\n                if (!optional) {\n                    definitions = true;\n                }\n                printClassNotFound(out, classname, optional, dirListing);\n            } catch (NoClassDefFoundError ncdfe) {\n                jars = true;\n                printNotLoadDependentClass(out, optional, ncdfe, dirListing);\n            }\n            \r\n            if (clazz != null) {\n                \r\n                try {\n                    def.innerCreateAndSet(clazz, project);\n                    \r\n                    out.println(\"The component could be instantiated.\");\n                } catch (NoSuchMethodException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" has no compatible constructor.\");\n\n                } catch (InstantiationException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" is abstract and cannot be instantiated.\");\n                } catch (IllegalAccessException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The constructor for \" + classname\n                            + \" is private and cannot be invoked.\");\n                } catch (InvocationTargetException ex) {\n                    lowlevel = true;\n                    Throwable t = ex.getTargetException();\n                    out.println(\"Cause: The constructor threw the exception\");\n                    out.println(t.toString());\n                    t.printStackTrace(out); \r\n                }  catch (NoClassDefFoundError ncdfe) {\n                    jars = true;\n                    out.println(\"Cause:  A class needed by class \" + classname\n                            + \" cannot be found: \");\n                    out.println(\"       \" + ncdfe.getMessage());\n                    out.println(\"Action: Determine what extra JAR files are\"\n                            + \" needed, and place them in:\");\n                    out.println(dirListing);\n                }\n            }\n            out.println();\n            out.println(\"Do not panic, this is a common problem.\");\n            if (definitions) {\n                out.println(\"It may just be a typographical error in the build file \"\n                        + \"or the task/type declaration.\");\n            }\n            if (jars) {\n                out.println(\"The commonest cause is a missing JAR.\");\n            }\n            if (lowlevel) {\n                out.println(\"This is quite a low level problem, which may need \"\n                        + \"consultation with the author of the task.\");\n                if (antTask) {\n                    out.println(\"This may be the Ant team. Please file a \"\n                            + \"defect or contact the developer team.\");\n                } else {\n                    out.println(\"This does not appear to be a task bundled with Ant.\");\n                    out.println(\"Please take it up with the supplier of the third-party \" + type\n                            + \".\");\n                    out.println(\"If you have written it yourself, you probably have a bug to fix.\");\n                }\n            } else {\n                out.println();\n                out.println(\"This is not a bug; it is a configuration problem\");\n            }\n        }\n        out.flush();\n        out.close();\n        return errorText.toString();\n    }\n","date":"2017-04-13 23:15:22","endLine":1011,"groupId":"2611","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"diagnoseCreationFailure","params":"(StringcomponentName@Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/c7/72d1b944ecc46dfa8686fc92de8a44bc4f26e4.src","preCode":"    public String diagnoseCreationFailure(String componentName, String type) {\n        StringWriter errorText = new StringWriter();\n        PrintWriter out = new PrintWriter(errorText);\n        out.println(\"Problem: failed to create \" + type + \" \" + componentName);\n        \r\n        boolean lowlevel = false;\n        boolean jars = false;\n        boolean definitions = false;\n        boolean antTask;\n        String home = System.getProperty(Launcher.USER_HOMEDIR);\n        File libDir = new File(home, Launcher.USER_LIBDIR);\n        String antHomeLib;\n        boolean probablyIDE = false;\n        String anthome = System.getProperty(MagicNames.ANT_HOME);\n        if (anthome != null) {\n            File antHomeLibDir = new File(anthome, \"lib\");\n            antHomeLib = antHomeLibDir.getAbsolutePath();\n        } else {\n            \r\n            probablyIDE = true;\n            antHomeLib = \"ANT_HOME\" + File.separatorChar + \"lib\";\n        }\n        StringBuffer dirListingText = new StringBuffer();\n        final String tab = \"        -\";\n        dirListingText.append(tab);\n        dirListingText.append(antHomeLib);\n        dirListingText.append('\\n');\n        if (probablyIDE) {\n            dirListingText.append(tab);\n            dirListingText.append(\"the IDE Ant configuration dialogs\");\n        } else {\n            dirListingText.append(tab);\n            dirListingText.append(libDir);\n            dirListingText.append('\\n');\n            dirListingText.append(tab);\n            dirListingText.append(\"a directory added on the command line with the -lib argument\");\n        }\n        String dirListing = dirListingText.toString();\n\n        \r\n        AntTypeDefinition def = getDefinition(componentName);\n        if (def == null) {\n            \r\n            printUnknownDefinition(out, componentName, dirListing);\n            definitions = true;\n        } else {\n            \r\n            final String classname = def.getClassName();\n            antTask = classname.startsWith(\"org.apache.tools.ant.\");\n            boolean optional = classname.startsWith(\"org.apache.tools.ant.taskdefs.optional\");\n            optional |= classname.startsWith(\"org.apache.tools.ant.types.optional\");\n\n            \r\n            Class<?> clazz = null;\n            try {\n                clazz = def.innerGetTypeClass();\n            } catch (ClassNotFoundException e) {\n                jars = true;\n                if (!optional) {\n                    definitions = true;\n                }\n                printClassNotFound(out, classname, optional, dirListing);\n            } catch (NoClassDefFoundError ncdfe) {\n                jars = true;\n                printNotLoadDependentClass(out, optional, ncdfe, dirListing);\n            }\n            \r\n            if (clazz != null) {\n                \r\n                try {\n                    def.innerCreateAndSet(clazz, project);\n                    \r\n                    out.println(\"The component could be instantiated.\");\n                } catch (NoSuchMethodException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" has no compatible constructor.\");\n\n                } catch (InstantiationException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" is abstract and cannot be instantiated.\");\n                } catch (IllegalAccessException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The constructor for \" + classname\n                            + \" is private and cannot be invoked.\");\n                } catch (InvocationTargetException ex) {\n                    lowlevel = true;\n                    Throwable t = ex.getTargetException();\n                    out.println(\"Cause: The constructor threw the exception\");\n                    out.println(t.toString());\n                    t.printStackTrace(out); \r\n                }  catch (NoClassDefFoundError ncdfe) {\n                    jars = true;\n                    out.println(\"Cause:  A class needed by class \" + classname\n                            + \" cannot be found: \");\n                    out.println(\"       \" + ncdfe.getMessage());\n                    out.println(\"Action: Determine what extra JAR files are\"\n                            + \" needed, and place them in:\");\n                    out.println(dirListing);\n                }\n            }\n            out.println();\n            out.println(\"Do not panic, this is a common problem.\");\n            if (definitions) {\n                out.println(\"It may just be a typographical error in the build file \"\n                        + \"or the task/type declaration.\");\n            }\n            if (jars) {\n                out.println(\"The commonest cause is a missing JAR.\");\n            }\n            if (lowlevel) {\n                out.println(\"This is quite a low level problem, which may need \"\n                        + \"consultation with the author of the task.\");\n                if (antTask) {\n                    out.println(\"This may be the Ant team. Please file a \"\n                            + \"defect or contact the developer team.\");\n                } else {\n                    out.println(\"This does not appear to be a task bundled with Ant.\");\n                    out.println(\"Please take it up with the supplier of the third-party \" + type\n                            + \".\");\n                    out.println(\"If you have written it yourself, you probably have a bug to fix.\");\n                }\n            } else {\n                out.println();\n                out.println(\"This is not a bug; it is a configuration problem\");\n            }\n        }\n        out.flush();\n        out.close();\n        return errorText.toString();\n    }\n","realPath":"src/main/org/apache/tools/ant/ComponentHelper.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":880,"status":"M"},{"authorDate":"2006-12-28 07:48:39","commitOrder":15,"curCode":"    private void printClassNotFound(\n        PrintWriter out, String classname, boolean optional,\n        String dirListing) {\n        out.println(\"Cause: the class \" + classname + \" was not found.\");\n        if (optional) {\n            out.println(\"        This looks like one of Ant's optional components.\");\n            out.println(\"Action: Check that the appropriate optional JAR exists in\");\n            out.println(dirListing);\n        } else {\n            out.println(\"Action: Check that the component has been correctly declared\");\n            out.println(\"        and that the implementing JAR is in one of:\");\n            out.println(dirListing);\n        }\n    }\n","date":"2006-12-28 07:48:39","endLine":981,"groupId":"5338","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"printClassNotFound","params":"(PrintWriterout@Stringclassname@booleanoptional@StringdirListing)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/35/5e11aa2e99607a7cc6f95e1307fb5c173897af.src","preCode":"    private void printClassNotFound(\n        PrintWriter out, String classname, boolean optional,\n        String dirListing) {\n        out.println(\"Cause: the class \" + classname + \" was not found.\");\n        if (optional) {\n            out.println(\"        This looks like one of Ant's optional components.\");\n            out.println(\"Action: Check that the appropriate optional JAR exists in\");\n            out.println(dirListing);\n        } else {\n            out.println(\"Action: Check that the component has been correctly declared\");\n            out.println(\"        and that the implementing JAR is in one of:\");\n            out.println(dirListing);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/ComponentHelper.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":968,"status":"N"}],"commitId":"b7d1e9bde44cb8e5233d6e70bb96e14cbb2f3e2d","commitMessage":"@@@java 5-8\n","date":"2017-04-13 23:15:22","modifiedFileCount":"609","status":"M","submitter":"Matt Benson"},{"authorTime":"2006-12-28 07:48:39","codes":[{"authorDate":"2020-07-29 18:45:00","commitOrder":16,"curCode":"    public String diagnoseCreationFailure(String componentName, String type) {\n        StringWriter errorText = new StringWriter();\n        PrintWriter out = new PrintWriter(errorText);\n        out.println(\"Problem: failed to create \" + type + \" \" + componentName);\n        \r\n        boolean lowlevel = false;\n        boolean jars = false;\n        boolean definitions = false;\n        boolean antTask;\n        String home = System.getProperty(Launcher.USER_HOMEDIR);\n        File libDir = new File(home, Launcher.USER_LIBDIR);\n        String antHomeLib;\n        boolean probablyIDE = false;\n        String anthome = System.getProperty(MagicNames.ANT_HOME);\n        if (anthome != null) {\n            File antHomeLibDir = new File(anthome, \"lib\");\n            antHomeLib = antHomeLibDir.getAbsolutePath();\n        } else {\n            \r\n            probablyIDE = true;\n            antHomeLib = \"ANT_HOME\" + File.separatorChar + \"lib\";\n        }\n        StringBuilder dirListingText = new StringBuilder();\n        final String tab = \"        -\";\n        dirListingText.append(tab);\n        dirListingText.append(antHomeLib);\n        dirListingText.append('\\n');\n        if (probablyIDE) {\n            dirListingText.append(tab);\n            dirListingText.append(\"the IDE Ant configuration dialogs\");\n        } else {\n            dirListingText.append(tab);\n            dirListingText.append(libDir);\n            dirListingText.append('\\n');\n            dirListingText.append(tab);\n            dirListingText.append(\"a directory added on the command line with the -lib argument\");\n        }\n        String dirListing = dirListingText.toString();\n\n        \r\n        AntTypeDefinition def = getDefinition(componentName);\n        if (def == null) {\n            \r\n            printUnknownDefinition(out, componentName, dirListing);\n            definitions = true;\n        } else {\n            \r\n            final String classname = def.getClassName();\n            antTask = classname.startsWith(MagicNames.ANT_CORE_PACKAGE + \".\");\n            boolean optional = classname.startsWith(MagicNames.ANT_CORE_PACKAGE + \".types.optional\")\n                    || classname.startsWith(MagicNames.ANT_CORE_PACKAGE + \".taskdefs.optional\");\n\n            \r\n            Class<?> clazz = null;\n            try {\n                clazz = def.innerGetTypeClass();\n            } catch (ClassNotFoundException e) {\n                jars = true;\n                if (!optional) {\n                    definitions = true;\n                }\n                printClassNotFound(out, classname, optional, dirListing);\n            } catch (NoClassDefFoundError ncdfe) {\n                jars = true;\n                printNotLoadDependentClass(out, optional, ncdfe, dirListing);\n            }\n            \r\n            if (clazz != null) {\n                \r\n                try {\n                    def.innerCreateAndSet(clazz, project);\n                    \r\n                    out.println(\"The component could be instantiated.\");\n                } catch (NoSuchMethodException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" has no compatible constructor.\");\n\n                } catch (InstantiationException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" is abstract and cannot be instantiated.\");\n                } catch (IllegalAccessException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The constructor for \" + classname\n                            + \" is private and cannot be invoked.\");\n                } catch (InvocationTargetException ex) {\n                    lowlevel = true;\n                    Throwable t = ex.getTargetException();\n                    out.println(\"Cause: The constructor threw the exception\");\n                    out.println(t.toString());\n                    t.printStackTrace(out); \r\n                } catch (NoClassDefFoundError ncdfe) {\n                    jars = true;\n                    out.println(\"Cause:  A class needed by class \" + classname\n                            + \" cannot be found: \");\n                    out.println(\"       \" + ncdfe.getMessage());\n                    out.println(\"Action: Determine what extra JAR files are\"\n                            + \" needed, and place them in:\");\n                    out.println(dirListing);\n                }\n            }\n            out.println();\n            out.println(\"Do not panic, this is a common problem.\");\n            if (definitions) {\n                out.println(\"It may just be a typographical error in the build file \"\n                        + \"or the task/type declaration.\");\n            }\n            if (jars) {\n                out.println(\"The commonest cause is a missing JAR.\");\n            }\n            if (lowlevel) {\n                out.println(\"This is quite a low level problem, which may need \"\n                        + \"consultation with the author of the task.\");\n                if (antTask) {\n                    out.println(\"This may be the Ant team. Please file a \"\n                            + \"defect or contact the developer team.\");\n                } else {\n                    out.println(\"This does not appear to be a task bundled with Ant.\");\n                    out.println(\"Please take it up with the supplier of the third-party \" + type\n                            + \".\");\n                    out.println(\"If you have written it yourself, you probably have a bug to fix.\");\n                }\n            } else {\n                out.println();\n                out.println(\"This is not a bug; it is a configuration problem\");\n            }\n        }\n        out.flush();\n        out.close();\n        return errorText.toString();\n    }\n","date":"2020-07-29 18:45:00","endLine":993,"groupId":"10591","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"diagnoseCreationFailure","params":"(StringcomponentName@Stringtype)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/00/11c19c882550808b4cedcbe2ec1d2b73929d0b.src","preCode":"    public String diagnoseCreationFailure(String componentName, String type) {\n        StringWriter errorText = new StringWriter();\n        PrintWriter out = new PrintWriter(errorText);\n        out.println(\"Problem: failed to create \" + type + \" \" + componentName);\n        \r\n        boolean lowlevel = false;\n        boolean jars = false;\n        boolean definitions = false;\n        boolean antTask;\n        String home = System.getProperty(Launcher.USER_HOMEDIR);\n        File libDir = new File(home, Launcher.USER_LIBDIR);\n        String antHomeLib;\n        boolean probablyIDE = false;\n        String anthome = System.getProperty(MagicNames.ANT_HOME);\n        if (anthome != null) {\n            File antHomeLibDir = new File(anthome, \"lib\");\n            antHomeLib = antHomeLibDir.getAbsolutePath();\n        } else {\n            \r\n            probablyIDE = true;\n            antHomeLib = \"ANT_HOME\" + File.separatorChar + \"lib\";\n        }\n        StringBuilder dirListingText = new StringBuilder();\n        final String tab = \"        -\";\n        dirListingText.append(tab);\n        dirListingText.append(antHomeLib);\n        dirListingText.append('\\n');\n        if (probablyIDE) {\n            dirListingText.append(tab);\n            dirListingText.append(\"the IDE Ant configuration dialogs\");\n        } else {\n            dirListingText.append(tab);\n            dirListingText.append(libDir);\n            dirListingText.append('\\n');\n            dirListingText.append(tab);\n            dirListingText.append(\"a directory added on the command line with the -lib argument\");\n        }\n        String dirListing = dirListingText.toString();\n\n        \r\n        AntTypeDefinition def = getDefinition(componentName);\n        if (def == null) {\n            \r\n            printUnknownDefinition(out, componentName, dirListing);\n            definitions = true;\n        } else {\n            \r\n            final String classname = def.getClassName();\n            antTask = classname.startsWith(\"org.apache.tools.ant.\");\n            boolean optional = classname.startsWith(\"org.apache.tools.ant.taskdefs.optional\");\n            optional |= classname.startsWith(\"org.apache.tools.ant.types.optional\");\n\n            \r\n            Class<?> clazz = null;\n            try {\n                clazz = def.innerGetTypeClass();\n            } catch (ClassNotFoundException e) {\n                jars = true;\n                if (!optional) {\n                    definitions = true;\n                }\n                printClassNotFound(out, classname, optional, dirListing);\n            } catch (NoClassDefFoundError ncdfe) {\n                jars = true;\n                printNotLoadDependentClass(out, optional, ncdfe, dirListing);\n            }\n            \r\n            if (clazz != null) {\n                \r\n                try {\n                    def.innerCreateAndSet(clazz, project);\n                    \r\n                    out.println(\"The component could be instantiated.\");\n                } catch (NoSuchMethodException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" has no compatible constructor.\");\n\n                } catch (InstantiationException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The class \" + classname\n                            + \" is abstract and cannot be instantiated.\");\n                } catch (IllegalAccessException e) {\n                    lowlevel = true;\n                    out.println(\"Cause: The constructor for \" + classname\n                            + \" is private and cannot be invoked.\");\n                } catch (InvocationTargetException ex) {\n                    lowlevel = true;\n                    Throwable t = ex.getTargetException();\n                    out.println(\"Cause: The constructor threw the exception\");\n                    out.println(t.toString());\n                    t.printStackTrace(out); \r\n                } catch (NoClassDefFoundError ncdfe) {\n                    jars = true;\n                    out.println(\"Cause:  A class needed by class \" + classname\n                            + \" cannot be found: \");\n                    out.println(\"       \" + ncdfe.getMessage());\n                    out.println(\"Action: Determine what extra JAR files are\"\n                            + \" needed, and place them in:\");\n                    out.println(dirListing);\n                }\n            }\n            out.println();\n            out.println(\"Do not panic, this is a common problem.\");\n            if (definitions) {\n                out.println(\"It may just be a typographical error in the build file \"\n                        + \"or the task/type declaration.\");\n            }\n            if (jars) {\n                out.println(\"The commonest cause is a missing JAR.\");\n            }\n            if (lowlevel) {\n                out.println(\"This is quite a low level problem, which may need \"\n                        + \"consultation with the author of the task.\");\n                if (antTask) {\n                    out.println(\"This may be the Ant team. Please file a \"\n                            + \"defect or contact the developer team.\");\n                } else {\n                    out.println(\"This does not appear to be a task bundled with Ant.\");\n                    out.println(\"Please take it up with the supplier of the third-party \" + type\n                            + \".\");\n                    out.println(\"If you have written it yourself, you probably have a bug to fix.\");\n                }\n            } else {\n                out.println();\n                out.println(\"This is not a bug; it is a configuration problem\");\n            }\n        }\n        out.flush();\n        out.close();\n        return errorText.toString();\n    }\n","realPath":"src/main/org/apache/tools/ant/ComponentHelper.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":862,"status":"M"},{"authorDate":"2006-12-28 07:48:39","commitOrder":16,"curCode":"    private void printClassNotFound(\n        PrintWriter out, String classname, boolean optional,\n        String dirListing) {\n        out.println(\"Cause: the class \" + classname + \" was not found.\");\n        if (optional) {\n            out.println(\"        This looks like one of Ant's optional components.\");\n            out.println(\"Action: Check that the appropriate optional JAR exists in\");\n            out.println(dirListing);\n        } else {\n            out.println(\"Action: Check that the component has been correctly declared\");\n            out.println(\"        and that the implementing JAR is in one of:\");\n            out.println(dirListing);\n        }\n    }\n","date":"2006-12-28 07:48:39","endLine":981,"groupId":"10591","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"printClassNotFound","params":"(PrintWriterout@Stringclassname@booleanoptional@StringdirListing)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/35/5e11aa2e99607a7cc6f95e1307fb5c173897af.src","preCode":"    private void printClassNotFound(\n        PrintWriter out, String classname, boolean optional,\n        String dirListing) {\n        out.println(\"Cause: the class \" + classname + \" was not found.\");\n        if (optional) {\n            out.println(\"        This looks like one of Ant's optional components.\");\n            out.println(\"Action: Check that the appropriate optional JAR exists in\");\n            out.println(dirListing);\n        } else {\n            out.println(\"Action: Check that the component has been correctly declared\");\n            out.println(\"        and that the implementing JAR is in one of:\");\n            out.println(dirListing);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/ComponentHelper.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":968,"status":"N"}],"commitId":"c8ea918a7b160195603f04788d0d2739449f9965","commitMessage":"@@@Merge pull request #132 from twogee/magic-names-redux\n\nMore MagicNames","date":"2020-07-29 18:45:00","modifiedFileCount":"19","status":"M","submitter":"Stefan Bodewig"}]
