[{"authorTime":"2001-07-18 21:32:03","codes":[{"authorDate":"2001-12-11 22:18:52","commitOrder":6,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile)\n\n    {\n\n\tboolean rebuild = false;\n\n\t\n\n\tJarFile genericJar = null;\n\n\tJarFile wasJar = null;\n\n\tFile newwasJarFile = null;\n\n\tJarOutputStream newJarStream = null;\n\n\t\t\n\n\ttry\n\n\t    {\n\n\t\tlog(\"Checking if websphere Jar needs to be rebuilt for jar \" + websphereJarFile.getName(),\n\n\t\t    Project.MSG_VERBOSE);\n\n\t\t\r\n\n\t\tif (genericJarFile.exists() && genericJarFile.isFile()\n\n\t\t    && websphereJarFile.exists() && websphereJarFile.isFile())\n\n\t\t    {\n\n\t\t\t\t\r\n\n\t\t\tgenericJar = new JarFile(genericJarFile);\n\n\t\t\twasJar = new JarFile(websphereJarFile);\n\n\t\t\t\t\n\n\t\t\tHashtable genericEntries = new Hashtable();\n\n\t\t\tHashtable wasEntries = new Hashtable();\n\n\t\t\tHashtable replaceEntries = new Hashtable();\n\n\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\tfor (Enumeration e = genericJar.entries(); e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\tgenericEntries.put(je.getName().replace('\\\\', '/'), je);\n\n\t\t\t    }\n\n\t\t\t\t\r\n\n\t\t\tfor (Enumeration e = wasJar.entries() ; e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\twasEntries.put(je.getName(), je);\n\n\t\t\t    }\n\n\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\tClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n\t\t\tfor (Enumeration e = genericEntries.keys(); e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tString filepath = (String)e.nextElement();\n\n\t\t\t\tif (wasEntries.containsKey(filepath))    \r\n\n\t\t\t\t    {\n\n\t\t\t\t\t\r\n\n\t\t\t\t\tJarEntry genericEntry = (JarEntry)genericEntries.get(filepath);\n\n\t\t\t\t\tJarEntry wasEntry = (JarEntry)wasEntries.get(filepath);\n\n\t\t\t\t\tif ((genericEntry.getCrc() !=  wasEntry.getCrc())  || \r\n\n\t\t\t\t\t    (genericEntry.getSize() != wasEntry.getSize()) ) \r\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tif (genericEntry.getName().endsWith(\".class\"))\n\n\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\tString classname = genericEntry.getName().replace(File.separatorChar,'.');\n\n\t\t\t\t\t\t\tclassname = classname.substring(0,classname.lastIndexOf(\".class\"));\n\n\t\t\t\t\t\t\tClass genclass = genericLoader.loadClass(classname);\n\n\t\t\t\t\t\t\tif (genclass.isInterface())\n\n\t\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\t\tlog(\"Interface \" + genclass.getName() + \" has changed\",Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\t\trebuild = true;\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\t\treplaceEntries.put(filepath, genericEntry);\n\n\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\telse\n\n\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\tif (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n\n\t\t\t\t\t\t\t    \r\n\n\t\t\t\t\t\t\t    log(\"Non class file \" + genericEntry.getName() + \" has changed\",Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\t    rebuild = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t    }\n\n\t\t\t\t    }\n\n\t\t\t\telse \r\n\n\t\t\t\t    {\n\n\t\t\t\t\tlog(\"File \" + filepath + \" not present in websphere jar\",Project.MSG_VERBOSE);\n\n\t\t\t\t\trebuild =  true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t    }\n\n\t\t\t    }\n\n\t\t\t\t\n\n\t\t\tif (!rebuild)\n\n\t\t\t    {\n\n\t\t\t\tlog(\"No rebuild needed - updating jar\",Project.MSG_VERBOSE);\n\n\t\t\t\tnewwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n\n\t\t\t\tif (newwasJarFile.exists()) {\n\n\t\t\t\t    newwasJarFile.delete();\n\n\t\t\t\t}\n\n\t\t\t\t\t\n\n\t\t\t\tnewJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n\n\t\t\t\tnewJarStream.setLevel(0);\n\n\t\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\t\tfor (Enumeration e = wasEntries.elements() ; e.hasMoreElements();)\n\n\t\t\t\t    {\n\n\t\t\t\t\tbyte[] buffer = new byte[1024];\n\n\t\t\t\t\tint bytesRead;\n\n\t\t\t\t\tInputStream is;\n\n\t\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\t\tif (je.getCompressedSize() == -1 ||\n\n\t\t\t\t\t    je.getCompressedSize() == je.getSize()) {\n\n\t\t\t\t\t    newJarStream.setLevel(0);\n\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\n\t\t\t\t\t    newJarStream.setLevel(9);\n\n\t\t\t\t\t}\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t\r\n\n\t\t\t\t\tif (replaceEntries.containsKey(je.getName()))\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tlog(\"Updating Bean class from generic Jar \" + je.getName(),\n\n\t\t\t\t\t\t    Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\r\n\n\t\t\t\t\t\tje = (JarEntry)replaceEntries.get(je.getName());\n\n\t\t\t\t\t\tis = genericJar.getInputStream(je);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\telse  \r\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tis = wasJar.getInputStream(je);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\tnewJarStream.putNextEntry(new JarEntry(je.getName()));\n\n\t\t\t\t\t\t\n\n\t\t\t\t\twhile ((bytesRead = is.read(buffer)) != -1)\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tnewJarStream.write(buffer,0,bytesRead);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\tis.close();\n\n\t\t\t\t    }\n\n\t\t\t    }\n\n\t\t\telse\n\n\t\t\t    {\n\n\t\t\t\tlog(\"websphere Jar rebuild needed due to changed interface or XML\",Project.MSG_VERBOSE);\n\n\t\t\t    }\n\n\t\t    }\n\n\t\telse\n\n\t\t    {\n\n\t\t\trebuild = true;\n\n\t\t    }\n\n\t    }\n\n\tcatch(ClassNotFoundException cnfe)\n\n\t    {\n\n\t\tString cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n\n\t\t    + \". Details: \"\n\n\t\t    + cnfe.getMessage();\n\n\t\tthrow new BuildException(cnfmsg, cnfe);\n\n\t    }\n\n\tcatch(IOException ioe) {\n\n\t    String msg = \"IOException while processing ejb-jar file \"\n\n\t\t+ \". Details: \"\n\n\t\t+ ioe.getMessage();\n\n\t    throw new BuildException(msg, ioe);\n\n\t}\n\n\tfinally {\n\n\t    \r\n\n\t    if (genericJar != null) {\n\n\t\ttry {\n\n\t\t    genericJar.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t    }\n\n\t\t\t\n\n\t    if (wasJar != null) {\n\n\t\ttry {\n\n\t\t    wasJar.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t    }\n\n\t\t\t\n\n\t    if (newJarStream != null) {\n\n\t\ttry {\n\n\t\t    newJarStream.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t\t\t\t\n\n\t\twebsphereJarFile.delete();\n\n\t\tnewwasJarFile.renameTo(websphereJarFile);\n\n\t\tif (!websphereJarFile.exists()) {\n\n\t\t    rebuild = true;\n\n\t\t}\n\n\t    }\n\n\t}\n\n\t\t\n\n\treturn rebuild;\n\n    }\n","date":"2001-12-11 22:18:52","endLine":1671,"groupId":"4687","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/25/a4d3eb2fb1f101acefc3e52dc9b859a5b9a589.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile)\n\n    {\n\n\tboolean rebuild = false;\n\n\t\n\n\tJarFile genericJar = null;\n\n\tJarFile wasJar = null;\n\n\tFile newwasJarFile = null;\n\n\tJarOutputStream newJarStream = null;\n\n\t\t\n\n\ttry\n\n\t    {\n\n\t\tlog(\"Checking if websphere Jar needs to be rebuilt for jar \" + websphereJarFile.getName(),\n\n\t\t    Project.MSG_VERBOSE);\n\n\t\t\r\n\n\t\tif (genericJarFile.exists() && genericJarFile.isFile()\n\n\t\t    && websphereJarFile.exists() && websphereJarFile.isFile())\n\n\t\t    {\n\n\t\t\t\t\r\n\n\t\t\tgenericJar = new JarFile(genericJarFile);\n\n\t\t\twasJar = new JarFile(websphereJarFile);\n\n\t\t\t\t\n\n\t\t\tHashtable genericEntries = new Hashtable();\n\n\t\t\tHashtable wasEntries = new Hashtable();\n\n\t\t\tHashtable replaceEntries = new Hashtable();\n\n\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\tfor (Enumeration e = genericJar.entries(); e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\tgenericEntries.put(je.getName().replace('\\\\', '/'), je);\n\n\t\t\t    }\n\n\t\t\t\t\r\n\n\t\t\tfor (Enumeration e = wasJar.entries() ; e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\twasEntries.put(je.getName(), je);\n\n\t\t\t    }\n\n\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\tClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n\t\t\tfor (Enumeration e = genericEntries.keys(); e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tString filepath = (String)e.nextElement();\n\n\t\t\t\tif (wasEntries.containsKey(filepath))    \r\n\n\t\t\t\t    {\n\n\t\t\t\t\t\r\n\n\t\t\t\t\tJarEntry genericEntry = (JarEntry)genericEntries.get(filepath);\n\n\t\t\t\t\tJarEntry wasEntry = (JarEntry)wasEntries.get(filepath);\n\n\t\t\t\t\tif ((genericEntry.getCrc() !=  wasEntry.getCrc())  || \r\n\n\t\t\t\t\t    (genericEntry.getSize() != wasEntry.getSize()) ) \r\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tif (genericEntry.getName().endsWith(\".class\"))\n\n\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\tString classname = genericEntry.getName().replace(File.separatorChar,'.');\n\n\t\t\t\t\t\t\tclassname = classname.substring(0,classname.lastIndexOf(\".class\"));\n\n\t\t\t\t\t\t\tClass genclass = genericLoader.loadClass(classname);\n\n\t\t\t\t\t\t\tif (genclass.isInterface())\n\n\t\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\t\tlog(\"Interface \" + genclass.getName() + \" has changed\",Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\t\trebuild = true;\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\t\treplaceEntries.put(filepath, genericEntry);\n\n\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\telse\n\n\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\tif (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n\n\t\t\t\t\t\t\t    \r\n\n\t\t\t\t\t\t\t    log(\"Non class file \" + genericEntry.getName() + \" has changed\",Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\t    rebuild = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t    }\n\n\t\t\t\t    }\n\n\t\t\t\telse \r\n\n\t\t\t\t    {\n\n\t\t\t\t\tlog(\"File \" + filepath + \" not present in websphere jar\",Project.MSG_VERBOSE);\n\n\t\t\t\t\trebuild =  true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t    }\n\n\t\t\t    }\n\n\t\t\t\t\n\n\t\t\tif (!rebuild)\n\n\t\t\t    {\n\n\t\t\t\tlog(\"No rebuild needed - updating jar\",Project.MSG_VERBOSE);\n\n\t\t\t\tnewwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n\n\t\t\t\tif (newwasJarFile.exists()) {\n\n\t\t\t\t    newwasJarFile.delete();\n\n\t\t\t\t}\n\n\t\t\t\t\t\n\n\t\t\t\tnewJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n\n\t\t\t\tnewJarStream.setLevel(0);\n\n\t\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\t\tfor (Enumeration e = wasEntries.elements() ; e.hasMoreElements();)\n\n\t\t\t\t    {\n\n\t\t\t\t\tbyte[] buffer = new byte[1024];\n\n\t\t\t\t\tint bytesRead;\n\n\t\t\t\t\tInputStream is;\n\n\t\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\t\tif (je.getCompressedSize() == -1 ||\n\n\t\t\t\t\t    je.getCompressedSize() == je.getSize()) {\n\n\t\t\t\t\t    newJarStream.setLevel(0);\n\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\n\t\t\t\t\t    newJarStream.setLevel(9);\n\n\t\t\t\t\t}\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t\r\n\n\t\t\t\t\tif (replaceEntries.containsKey(je.getName()))\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tlog(\"Updating Bean class from generic Jar \" + je.getName(),\n\n\t\t\t\t\t\t    Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\r\n\n\t\t\t\t\t\tje = (JarEntry)replaceEntries.get(je.getName());\n\n\t\t\t\t\t\tis = genericJar.getInputStream(je);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\telse  \r\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tis = wasJar.getInputStream(je);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\tnewJarStream.putNextEntry(new JarEntry(je.getName()));\n\n\t\t\t\t\t\t\n\n\t\t\t\t\twhile ((bytesRead = is.read(buffer)) != -1)\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tnewJarStream.write(buffer,0,bytesRead);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\tis.close();\n\n\t\t\t\t    }\n\n\t\t\t    }\n\n\t\t\telse\n\n\t\t\t    {\n\n\t\t\t\tlog(\"websphere Jar rebuild needed due to changed interface or XML\",Project.MSG_VERBOSE);\n\n\t\t\t    }\n\n\t\t    }\n\n\t\telse\n\n\t\t    {\n\n\t\t\trebuild = true;\n\n\t\t    }\n\n\t    }\n\n\tcatch(ClassNotFoundException cnfe)\n\n\t    {\n\n\t\tString cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n\n\t\t    + \". Details: \"\n\n\t\t    + cnfe.getMessage();\n\n\t\tthrow new BuildException(cnfmsg, cnfe);\n\n\t    }\n\n\tcatch(IOException ioe) {\n\n\t    String msg = \"IOException while processing ejb-jar file \"\n\n\t\t+ \". Details: \"\n\n\t\t+ ioe.getMessage();\n\n\t    throw new BuildException(msg, ioe);\n\n\t}\n\n\tfinally {\n\n\t    \r\n\n\t    if (genericJar != null) {\n\n\t\ttry {\n\n\t\t    genericJar.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t    }\n\n\t\t\t\n\n\t    if (wasJar != null) {\n\n\t\ttry {\n\n\t\t    wasJar.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t    }\n\n\t\t\t\n\n\t    if (newJarStream != null) {\n\n\t\ttry {\n\n\t\t    newJarStream.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t\t\t\t\n\n\t\twebsphereJarFile.delete();\n\n\t\tnewwasJarFile.renameTo(websphereJarFile);\n\n\t\tif (!websphereJarFile.exists()) {\n\n\t\t    rebuild = true;\n\n\t\t}\n\n\t    }\n\n\t}\n\n\t\t\n\n\treturn rebuild;\n\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1287,"status":"B"},{"authorDate":"2001-07-18 21:32:03","commitOrder":6,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile)\n    {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        \n        try \n        {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile() \n                && weblogicJarFile.exists() && weblogicJarFile.isFile())\n            {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n                \n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();)\n                {\n                    JarEntry je = (JarEntry)e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries() ; e.hasMoreElements();)\n                {\n                    JarEntry je = (JarEntry)e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();)\n                {\n                    String filepath = (String)e.nextElement();\n                    if (wlEntries.containsKey(filepath))    \r\n                    {\n                        \r\n                        JarEntry genericEntry = (JarEntry)genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry)wlEntries.get(filepath);\n                        if ((genericEntry.getCrc() !=  wlEntry.getCrc())  || \r\n                            (genericEntry.getSize() != wlEntry.getSize()) ) \r\n                        {\n                            if (genericEntry.getName().endsWith(\".class\"))\n                            {\n                                \r\n                                String classname = genericEntry.getName().replace(File.separatorChar,'.');\n                                classname = classname.substring(0,classname.lastIndexOf(\".class\"));\n                                Class genclass = genericLoader.loadClass(classname);\n                                if (genclass.isInterface())\n                                {\n                                    \r\n                                    log(\"Interface \" + genclass.getName() + \" has changed\",Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                else\n                                {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            }\n                            else\n                            {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\",Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    else \r\n                    {\n                        log(\"File \" + filepath + \" not present in weblogic jar\",Project.MSG_VERBOSE);\n                        rebuild =  true;\n                        break;\n                    }\n                }\n                \n                if (!rebuild)\n                {\n                    log(\"No rebuild needed - updating jar\",Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n                    \n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n                    \n                    \r\n                    for (Enumeration e = wlEntries.elements() ; e.hasMoreElements();)\n                    {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry)e.nextElement();\n                        if (je.getCompressedSize() == -1 ||\n                                je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        }\n                        else {\n                            newJarStream.setLevel(9);\n                        }\n                            \n                        \r\n                        if (replaceEntries.containsKey(je.getName()))\n                        {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry)replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        }   \n                        else  \r\n                        {\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1)\n                        {\n                            newJarStream.write(buffer,0,bytesRead);\n                        }\n                        is.close();\n                    }\n                }\n                else\n                {\n                    log(\"Weblogic Jar rebuild needed due to changed interface or XML\",Project.MSG_VERBOSE);\n                }       \n            }\n            else\n            {\n                rebuild = true;\n            }\n        }\n        catch(ClassNotFoundException cnfe)\n        {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                + \". Details: \"\n                + cnfe.getMessage();\n            throw new BuildException(cnfmsg, cnfe);\n        }\n        catch(IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                + \". Details: \"\n                + ioe.getMessage();\n            throw new BuildException(msg, ioe);\n        }\n        finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                }\n                catch (IOException closeException) {}\n            }\n            \n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                }\n                catch (IOException closeException) {}\n            }\n            \n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                }\n                catch (IOException closeException) {}\n\n                weblogicJarFile.delete();\n                newWLJarFile.renameTo(weblogicJarFile);\n                if (!weblogicJarFile.exists()) {\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2001-07-18 21:32:03","endLine":696,"groupId":"4687","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/6d/5451ad53ed0e0637ebc855c0d7e796e681888a.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile)\n    {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        \n        try \n        {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile() \n                && weblogicJarFile.exists() && weblogicJarFile.isFile())\n            {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n                \n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();)\n                {\n                    JarEntry je = (JarEntry)e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries() ; e.hasMoreElements();)\n                {\n                    JarEntry je = (JarEntry)e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();)\n                {\n                    String filepath = (String)e.nextElement();\n                    if (wlEntries.containsKey(filepath))    \r\n                    {\n                        \r\n                        JarEntry genericEntry = (JarEntry)genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry)wlEntries.get(filepath);\n                        if ((genericEntry.getCrc() !=  wlEntry.getCrc())  || \r\n                            (genericEntry.getSize() != wlEntry.getSize()) ) \r\n                        {\n                            if (genericEntry.getName().endsWith(\".class\"))\n                            {\n                                \r\n                                String classname = genericEntry.getName().replace(File.separatorChar,'.');\n                                classname = classname.substring(0,classname.lastIndexOf(\".class\"));\n                                Class genclass = genericLoader.loadClass(classname);\n                                if (genclass.isInterface())\n                                {\n                                    \r\n                                    log(\"Interface \" + genclass.getName() + \" has changed\",Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                else\n                                {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            }\n                            else\n                            {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\",Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    else \r\n                    {\n                        log(\"File \" + filepath + \" not present in weblogic jar\",Project.MSG_VERBOSE);\n                        rebuild =  true;\n                        break;\n                    }\n                }\n                \n                if (!rebuild)\n                {\n                    log(\"No rebuild needed - updating jar\",Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n                    \n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n                    \n                    \r\n                    for (Enumeration e = wlEntries.elements() ; e.hasMoreElements();)\n                    {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry)e.nextElement();\n                        if (je.getCompressedSize() == -1 ||\n                                je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        }\n                        else {\n                            newJarStream.setLevel(9);\n                        }\n                            \n                        \r\n                        if (replaceEntries.containsKey(je.getName()))\n                        {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry)replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        }   \n                        else  \r\n                        {\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1)\n                        {\n                            newJarStream.write(buffer,0,bytesRead);\n                        }\n                        is.close();\n                    }\n                }\n                else\n                {\n                    log(\"Weblogic Jar rebuild needed due to changed interface or XML\",Project.MSG_VERBOSE);\n                }       \n            }\n            else\n            {\n                rebuild = true;\n            }\n        }\n        catch(ClassNotFoundException cnfe)\n        {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                + \". Details: \"\n                + cnfe.getMessage();\n            throw new BuildException(cnfmsg, cnfe);\n        }\n        catch(IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                + \". Details: \"\n                + ioe.getMessage();\n            throw new BuildException(msg, ioe);\n        }\n        finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                }\n                catch (IOException closeException) {}\n            }\n            \n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                }\n                catch (IOException closeException) {}\n            }\n            \n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                }\n                catch (IOException closeException) {}\n\n                weblogicJarFile.delete();\n                newWLJarFile.renameTo(weblogicJarFile);\n                if (!weblogicJarFile.exists()) {\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":505,"status":"NB"}],"commitId":"8303dd1fd643ab7369de8a3125f5a1e3b6a72968","commitMessage":"@@@Remove the old mechanism of adding super classes and super interfaces to EJB jars\nand replace with a general class dependnecy check. This should allow ejb jars\nto be much more complete as per the spec.\n\nejbjar now depends on BCEL.\n\nAdd support for Websphere.\n\nSubmitted by:\tHolger Engels <hengels@mercatis.de>\n\t\tManeesh Sahu <msahu@interkeel.com> (Original Websphere support)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@270118 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2001-12-11 22:18:52","modifiedFileCount":"2","status":"M","submitter":"Conor MacNeill"},{"authorTime":"2002-04-14 19:16:19","codes":[{"authorDate":"2001-12-11 22:18:52","commitOrder":7,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile)\n\n    {\n\n\tboolean rebuild = false;\n\n\t\n\n\tJarFile genericJar = null;\n\n\tJarFile wasJar = null;\n\n\tFile newwasJarFile = null;\n\n\tJarOutputStream newJarStream = null;\n\n\t\t\n\n\ttry\n\n\t    {\n\n\t\tlog(\"Checking if websphere Jar needs to be rebuilt for jar \" + websphereJarFile.getName(),\n\n\t\t    Project.MSG_VERBOSE);\n\n\t\t\r\n\n\t\tif (genericJarFile.exists() && genericJarFile.isFile()\n\n\t\t    && websphereJarFile.exists() && websphereJarFile.isFile())\n\n\t\t    {\n\n\t\t\t\t\r\n\n\t\t\tgenericJar = new JarFile(genericJarFile);\n\n\t\t\twasJar = new JarFile(websphereJarFile);\n\n\t\t\t\t\n\n\t\t\tHashtable genericEntries = new Hashtable();\n\n\t\t\tHashtable wasEntries = new Hashtable();\n\n\t\t\tHashtable replaceEntries = new Hashtable();\n\n\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\tfor (Enumeration e = genericJar.entries(); e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\tgenericEntries.put(je.getName().replace('\\\\', '/'), je);\n\n\t\t\t    }\n\n\t\t\t\t\r\n\n\t\t\tfor (Enumeration e = wasJar.entries() ; e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\twasEntries.put(je.getName(), je);\n\n\t\t\t    }\n\n\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\tClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n\t\t\tfor (Enumeration e = genericEntries.keys(); e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tString filepath = (String)e.nextElement();\n\n\t\t\t\tif (wasEntries.containsKey(filepath))    \r\n\n\t\t\t\t    {\n\n\t\t\t\t\t\r\n\n\t\t\t\t\tJarEntry genericEntry = (JarEntry)genericEntries.get(filepath);\n\n\t\t\t\t\tJarEntry wasEntry = (JarEntry)wasEntries.get(filepath);\n\n\t\t\t\t\tif ((genericEntry.getCrc() !=  wasEntry.getCrc())  || \r\n\n\t\t\t\t\t    (genericEntry.getSize() != wasEntry.getSize()) ) \r\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tif (genericEntry.getName().endsWith(\".class\"))\n\n\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\tString classname = genericEntry.getName().replace(File.separatorChar,'.');\n\n\t\t\t\t\t\t\tclassname = classname.substring(0,classname.lastIndexOf(\".class\"));\n\n\t\t\t\t\t\t\tClass genclass = genericLoader.loadClass(classname);\n\n\t\t\t\t\t\t\tif (genclass.isInterface())\n\n\t\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\t\tlog(\"Interface \" + genclass.getName() + \" has changed\",Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\t\trebuild = true;\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\t\treplaceEntries.put(filepath, genericEntry);\n\n\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\telse\n\n\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\tif (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n\n\t\t\t\t\t\t\t    \r\n\n\t\t\t\t\t\t\t    log(\"Non class file \" + genericEntry.getName() + \" has changed\",Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\t    rebuild = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t    }\n\n\t\t\t\t    }\n\n\t\t\t\telse \r\n\n\t\t\t\t    {\n\n\t\t\t\t\tlog(\"File \" + filepath + \" not present in websphere jar\",Project.MSG_VERBOSE);\n\n\t\t\t\t\trebuild =  true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t    }\n\n\t\t\t    }\n\n\t\t\t\t\n\n\t\t\tif (!rebuild)\n\n\t\t\t    {\n\n\t\t\t\tlog(\"No rebuild needed - updating jar\",Project.MSG_VERBOSE);\n\n\t\t\t\tnewwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n\n\t\t\t\tif (newwasJarFile.exists()) {\n\n\t\t\t\t    newwasJarFile.delete();\n\n\t\t\t\t}\n\n\t\t\t\t\t\n\n\t\t\t\tnewJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n\n\t\t\t\tnewJarStream.setLevel(0);\n\n\t\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\t\tfor (Enumeration e = wasEntries.elements() ; e.hasMoreElements();)\n\n\t\t\t\t    {\n\n\t\t\t\t\tbyte[] buffer = new byte[1024];\n\n\t\t\t\t\tint bytesRead;\n\n\t\t\t\t\tInputStream is;\n\n\t\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\t\tif (je.getCompressedSize() == -1 ||\n\n\t\t\t\t\t    je.getCompressedSize() == je.getSize()) {\n\n\t\t\t\t\t    newJarStream.setLevel(0);\n\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\n\t\t\t\t\t    newJarStream.setLevel(9);\n\n\t\t\t\t\t}\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t\r\n\n\t\t\t\t\tif (replaceEntries.containsKey(je.getName()))\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tlog(\"Updating Bean class from generic Jar \" + je.getName(),\n\n\t\t\t\t\t\t    Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\r\n\n\t\t\t\t\t\tje = (JarEntry)replaceEntries.get(je.getName());\n\n\t\t\t\t\t\tis = genericJar.getInputStream(je);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\telse  \r\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tis = wasJar.getInputStream(je);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\tnewJarStream.putNextEntry(new JarEntry(je.getName()));\n\n\t\t\t\t\t\t\n\n\t\t\t\t\twhile ((bytesRead = is.read(buffer)) != -1)\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tnewJarStream.write(buffer,0,bytesRead);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\tis.close();\n\n\t\t\t\t    }\n\n\t\t\t    }\n\n\t\t\telse\n\n\t\t\t    {\n\n\t\t\t\tlog(\"websphere Jar rebuild needed due to changed interface or XML\",Project.MSG_VERBOSE);\n\n\t\t\t    }\n\n\t\t    }\n\n\t\telse\n\n\t\t    {\n\n\t\t\trebuild = true;\n\n\t\t    }\n\n\t    }\n\n\tcatch(ClassNotFoundException cnfe)\n\n\t    {\n\n\t\tString cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n\n\t\t    + \". Details: \"\n\n\t\t    + cnfe.getMessage();\n\n\t\tthrow new BuildException(cnfmsg, cnfe);\n\n\t    }\n\n\tcatch(IOException ioe) {\n\n\t    String msg = \"IOException while processing ejb-jar file \"\n\n\t\t+ \". Details: \"\n\n\t\t+ ioe.getMessage();\n\n\t    throw new BuildException(msg, ioe);\n\n\t}\n\n\tfinally {\n\n\t    \r\n\n\t    if (genericJar != null) {\n\n\t\ttry {\n\n\t\t    genericJar.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t    }\n\n\t\t\t\n\n\t    if (wasJar != null) {\n\n\t\ttry {\n\n\t\t    wasJar.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t    }\n\n\t\t\t\n\n\t    if (newJarStream != null) {\n\n\t\ttry {\n\n\t\t    newJarStream.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t\t\t\t\n\n\t\twebsphereJarFile.delete();\n\n\t\tnewwasJarFile.renameTo(websphereJarFile);\n\n\t\tif (!websphereJarFile.exists()) {\n\n\t\t    rebuild = true;\n\n\t\t}\n\n\t    }\n\n\t}\n\n\t\t\n\n\treturn rebuild;\n\n    }\n","date":"2001-12-11 22:18:52","endLine":1671,"groupId":"4687","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/25/a4d3eb2fb1f101acefc3e52dc9b859a5b9a589.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile)\n\n    {\n\n\tboolean rebuild = false;\n\n\t\n\n\tJarFile genericJar = null;\n\n\tJarFile wasJar = null;\n\n\tFile newwasJarFile = null;\n\n\tJarOutputStream newJarStream = null;\n\n\t\t\n\n\ttry\n\n\t    {\n\n\t\tlog(\"Checking if websphere Jar needs to be rebuilt for jar \" + websphereJarFile.getName(),\n\n\t\t    Project.MSG_VERBOSE);\n\n\t\t\r\n\n\t\tif (genericJarFile.exists() && genericJarFile.isFile()\n\n\t\t    && websphereJarFile.exists() && websphereJarFile.isFile())\n\n\t\t    {\n\n\t\t\t\t\r\n\n\t\t\tgenericJar = new JarFile(genericJarFile);\n\n\t\t\twasJar = new JarFile(websphereJarFile);\n\n\t\t\t\t\n\n\t\t\tHashtable genericEntries = new Hashtable();\n\n\t\t\tHashtable wasEntries = new Hashtable();\n\n\t\t\tHashtable replaceEntries = new Hashtable();\n\n\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\tfor (Enumeration e = genericJar.entries(); e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\tgenericEntries.put(je.getName().replace('\\\\', '/'), je);\n\n\t\t\t    }\n\n\t\t\t\t\r\n\n\t\t\tfor (Enumeration e = wasJar.entries() ; e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\twasEntries.put(je.getName(), je);\n\n\t\t\t    }\n\n\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\tClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n\t\t\tfor (Enumeration e = genericEntries.keys(); e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tString filepath = (String)e.nextElement();\n\n\t\t\t\tif (wasEntries.containsKey(filepath))    \r\n\n\t\t\t\t    {\n\n\t\t\t\t\t\r\n\n\t\t\t\t\tJarEntry genericEntry = (JarEntry)genericEntries.get(filepath);\n\n\t\t\t\t\tJarEntry wasEntry = (JarEntry)wasEntries.get(filepath);\n\n\t\t\t\t\tif ((genericEntry.getCrc() !=  wasEntry.getCrc())  || \r\n\n\t\t\t\t\t    (genericEntry.getSize() != wasEntry.getSize()) ) \r\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tif (genericEntry.getName().endsWith(\".class\"))\n\n\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\tString classname = genericEntry.getName().replace(File.separatorChar,'.');\n\n\t\t\t\t\t\t\tclassname = classname.substring(0,classname.lastIndexOf(\".class\"));\n\n\t\t\t\t\t\t\tClass genclass = genericLoader.loadClass(classname);\n\n\t\t\t\t\t\t\tif (genclass.isInterface())\n\n\t\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\t\tlog(\"Interface \" + genclass.getName() + \" has changed\",Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\t\trebuild = true;\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\t\treplaceEntries.put(filepath, genericEntry);\n\n\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\telse\n\n\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\tif (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n\n\t\t\t\t\t\t\t    \r\n\n\t\t\t\t\t\t\t    log(\"Non class file \" + genericEntry.getName() + \" has changed\",Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\t    rebuild = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t    }\n\n\t\t\t\t    }\n\n\t\t\t\telse \r\n\n\t\t\t\t    {\n\n\t\t\t\t\tlog(\"File \" + filepath + \" not present in websphere jar\",Project.MSG_VERBOSE);\n\n\t\t\t\t\trebuild =  true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t    }\n\n\t\t\t    }\n\n\t\t\t\t\n\n\t\t\tif (!rebuild)\n\n\t\t\t    {\n\n\t\t\t\tlog(\"No rebuild needed - updating jar\",Project.MSG_VERBOSE);\n\n\t\t\t\tnewwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n\n\t\t\t\tif (newwasJarFile.exists()) {\n\n\t\t\t\t    newwasJarFile.delete();\n\n\t\t\t\t}\n\n\t\t\t\t\t\n\n\t\t\t\tnewJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n\n\t\t\t\tnewJarStream.setLevel(0);\n\n\t\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\t\tfor (Enumeration e = wasEntries.elements() ; e.hasMoreElements();)\n\n\t\t\t\t    {\n\n\t\t\t\t\tbyte[] buffer = new byte[1024];\n\n\t\t\t\t\tint bytesRead;\n\n\t\t\t\t\tInputStream is;\n\n\t\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\t\tif (je.getCompressedSize() == -1 ||\n\n\t\t\t\t\t    je.getCompressedSize() == je.getSize()) {\n\n\t\t\t\t\t    newJarStream.setLevel(0);\n\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\n\t\t\t\t\t    newJarStream.setLevel(9);\n\n\t\t\t\t\t}\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t\r\n\n\t\t\t\t\tif (replaceEntries.containsKey(je.getName()))\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tlog(\"Updating Bean class from generic Jar \" + je.getName(),\n\n\t\t\t\t\t\t    Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\r\n\n\t\t\t\t\t\tje = (JarEntry)replaceEntries.get(je.getName());\n\n\t\t\t\t\t\tis = genericJar.getInputStream(je);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\telse  \r\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tis = wasJar.getInputStream(je);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\tnewJarStream.putNextEntry(new JarEntry(je.getName()));\n\n\t\t\t\t\t\t\n\n\t\t\t\t\twhile ((bytesRead = is.read(buffer)) != -1)\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tnewJarStream.write(buffer,0,bytesRead);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\tis.close();\n\n\t\t\t\t    }\n\n\t\t\t    }\n\n\t\t\telse\n\n\t\t\t    {\n\n\t\t\t\tlog(\"websphere Jar rebuild needed due to changed interface or XML\",Project.MSG_VERBOSE);\n\n\t\t\t    }\n\n\t\t    }\n\n\t\telse\n\n\t\t    {\n\n\t\t\trebuild = true;\n\n\t\t    }\n\n\t    }\n\n\tcatch(ClassNotFoundException cnfe)\n\n\t    {\n\n\t\tString cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n\n\t\t    + \". Details: \"\n\n\t\t    + cnfe.getMessage();\n\n\t\tthrow new BuildException(cnfmsg, cnfe);\n\n\t    }\n\n\tcatch(IOException ioe) {\n\n\t    String msg = \"IOException while processing ejb-jar file \"\n\n\t\t+ \". Details: \"\n\n\t\t+ ioe.getMessage();\n\n\t    throw new BuildException(msg, ioe);\n\n\t}\n\n\tfinally {\n\n\t    \r\n\n\t    if (genericJar != null) {\n\n\t\ttry {\n\n\t\t    genericJar.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t    }\n\n\t\t\t\n\n\t    if (wasJar != null) {\n\n\t\ttry {\n\n\t\t    wasJar.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t    }\n\n\t\t\t\n\n\t    if (newJarStream != null) {\n\n\t\ttry {\n\n\t\t    newJarStream.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t\t\t\t\n\n\t\twebsphereJarFile.delete();\n\n\t\tnewwasJarFile.renameTo(websphereJarFile);\n\n\t\tif (!websphereJarFile.exists()) {\n\n\t\t    rebuild = true;\n\n\t\t}\n\n\t    }\n\n\t}\n\n\t\t\n\n\treturn rebuild;\n\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1287,"status":"N"},{"authorDate":"2002-04-14 19:16:19","commitOrder":7,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc()) || \r\n                        (genericEntry.getSize() != wlEntry.getSize())) {\r\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\", Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1 ||\n                            je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                weblogicJarFile.delete();\n                newWLJarFile.renameTo(weblogicJarFile);\n                if (!weblogicJarFile.exists()) {\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2002-04-14 19:16:19","endLine":751,"groupId":"4687","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e6/cc05d8deee17318ecbc606bc3dc6c61c63f6d8.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile)\n    {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try\n        {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                && weblogicJarFile.exists() && weblogicJarFile.isFile())\n            {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();)\n                {\n                    JarEntry je = (JarEntry)e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries() ; e.hasMoreElements();)\n                {\n                    JarEntry je = (JarEntry)e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();)\n                {\n                    String filepath = (String)e.nextElement();\n                    if (wlEntries.containsKey(filepath))    \r\n                    {\n                        \r\n                        JarEntry genericEntry = (JarEntry)genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry)wlEntries.get(filepath);\n                        if ((genericEntry.getCrc() !=  wlEntry.getCrc())  || \r\n                            (genericEntry.getSize() != wlEntry.getSize()) ) \r\n                        {\n                            if (genericEntry.getName().endsWith(\".class\"))\n                            {\n                                \r\n                                String classname = genericEntry.getName().replace(File.separatorChar,'.');\n                                classname = classname.substring(0,classname.lastIndexOf(\".class\"));\n                                Class genclass = genericLoader.loadClass(classname);\n                                if (genclass.isInterface())\n                                {\n                                    \r\n                                    log(\"Interface \" + genclass.getName() + \" has changed\",Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                else\n                                {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            }\n                            else\n                            {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\",Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    else \r\n                    {\n                        log(\"File \" + filepath + \" not present in weblogic jar\",Project.MSG_VERBOSE);\n                        rebuild =  true;\n                        break;\n                    }\n                }\n\n                if (!rebuild)\n                {\n                    log(\"No rebuild needed - updating jar\",Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements() ; e.hasMoreElements();)\n                    {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry)e.nextElement();\n                        if (je.getCompressedSize() == -1 ||\n                                je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        }\n                        else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName()))\n                        {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry)replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        }\n                        else  \r\n                        {\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1)\n                        {\n                            newJarStream.write(buffer,0,bytesRead);\n                        }\n                        is.close();\n                    }\n                }\n                else\n                {\n                    log(\"Weblogic Jar rebuild needed due to changed interface or XML\",Project.MSG_VERBOSE);\n                }\n            }\n            else\n            {\n                rebuild = true;\n            }\n        }\n        catch(ClassNotFoundException cnfe)\n        {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                + \". Details: \"\n                + cnfe.getMessage();\n            throw new BuildException(cnfmsg, cnfe);\n        }\n        catch(IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                + \". Details: \"\n                + ioe.getMessage();\n            throw new BuildException(msg, ioe);\n        }\n        finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                }\n                catch (IOException closeException) {}\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                }\n                catch (IOException closeException) {}\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                }\n                catch (IOException closeException) {}\n\n                weblogicJarFile.delete();\n                newWLJarFile.renameTo(weblogicJarFile);\n                if (!weblogicJarFile.exists()) {\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"M"}],"commitId":"c6c232893c39257745a8f7a618bcdb5c59791cae","commitMessage":"@@@Various coding standard fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@272418 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2002-04-14 19:16:19","modifiedFileCount":"134","status":"M","submitter":"Conor MacNeill"},{"authorTime":"2002-04-24 14:16:46","codes":[{"authorDate":"2001-12-11 22:18:52","commitOrder":8,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile)\n\n    {\n\n\tboolean rebuild = false;\n\n\t\n\n\tJarFile genericJar = null;\n\n\tJarFile wasJar = null;\n\n\tFile newwasJarFile = null;\n\n\tJarOutputStream newJarStream = null;\n\n\t\t\n\n\ttry\n\n\t    {\n\n\t\tlog(\"Checking if websphere Jar needs to be rebuilt for jar \" + websphereJarFile.getName(),\n\n\t\t    Project.MSG_VERBOSE);\n\n\t\t\r\n\n\t\tif (genericJarFile.exists() && genericJarFile.isFile()\n\n\t\t    && websphereJarFile.exists() && websphereJarFile.isFile())\n\n\t\t    {\n\n\t\t\t\t\r\n\n\t\t\tgenericJar = new JarFile(genericJarFile);\n\n\t\t\twasJar = new JarFile(websphereJarFile);\n\n\t\t\t\t\n\n\t\t\tHashtable genericEntries = new Hashtable();\n\n\t\t\tHashtable wasEntries = new Hashtable();\n\n\t\t\tHashtable replaceEntries = new Hashtable();\n\n\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\tfor (Enumeration e = genericJar.entries(); e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\tgenericEntries.put(je.getName().replace('\\\\', '/'), je);\n\n\t\t\t    }\n\n\t\t\t\t\r\n\n\t\t\tfor (Enumeration e = wasJar.entries() ; e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\twasEntries.put(je.getName(), je);\n\n\t\t\t    }\n\n\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\tClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n\t\t\tfor (Enumeration e = genericEntries.keys(); e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tString filepath = (String)e.nextElement();\n\n\t\t\t\tif (wasEntries.containsKey(filepath))    \r\n\n\t\t\t\t    {\n\n\t\t\t\t\t\r\n\n\t\t\t\t\tJarEntry genericEntry = (JarEntry)genericEntries.get(filepath);\n\n\t\t\t\t\tJarEntry wasEntry = (JarEntry)wasEntries.get(filepath);\n\n\t\t\t\t\tif ((genericEntry.getCrc() !=  wasEntry.getCrc())  || \r\n\n\t\t\t\t\t    (genericEntry.getSize() != wasEntry.getSize()) ) \r\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tif (genericEntry.getName().endsWith(\".class\"))\n\n\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\tString classname = genericEntry.getName().replace(File.separatorChar,'.');\n\n\t\t\t\t\t\t\tclassname = classname.substring(0,classname.lastIndexOf(\".class\"));\n\n\t\t\t\t\t\t\tClass genclass = genericLoader.loadClass(classname);\n\n\t\t\t\t\t\t\tif (genclass.isInterface())\n\n\t\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\t\tlog(\"Interface \" + genclass.getName() + \" has changed\",Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\t\trebuild = true;\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\t\treplaceEntries.put(filepath, genericEntry);\n\n\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\telse\n\n\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\tif (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n\n\t\t\t\t\t\t\t    \r\n\n\t\t\t\t\t\t\t    log(\"Non class file \" + genericEntry.getName() + \" has changed\",Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\t    rebuild = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t    }\n\n\t\t\t\t    }\n\n\t\t\t\telse \r\n\n\t\t\t\t    {\n\n\t\t\t\t\tlog(\"File \" + filepath + \" not present in websphere jar\",Project.MSG_VERBOSE);\n\n\t\t\t\t\trebuild =  true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t    }\n\n\t\t\t    }\n\n\t\t\t\t\n\n\t\t\tif (!rebuild)\n\n\t\t\t    {\n\n\t\t\t\tlog(\"No rebuild needed - updating jar\",Project.MSG_VERBOSE);\n\n\t\t\t\tnewwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n\n\t\t\t\tif (newwasJarFile.exists()) {\n\n\t\t\t\t    newwasJarFile.delete();\n\n\t\t\t\t}\n\n\t\t\t\t\t\n\n\t\t\t\tnewJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n\n\t\t\t\tnewJarStream.setLevel(0);\n\n\t\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\t\tfor (Enumeration e = wasEntries.elements() ; e.hasMoreElements();)\n\n\t\t\t\t    {\n\n\t\t\t\t\tbyte[] buffer = new byte[1024];\n\n\t\t\t\t\tint bytesRead;\n\n\t\t\t\t\tInputStream is;\n\n\t\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\t\tif (je.getCompressedSize() == -1 ||\n\n\t\t\t\t\t    je.getCompressedSize() == je.getSize()) {\n\n\t\t\t\t\t    newJarStream.setLevel(0);\n\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\n\t\t\t\t\t    newJarStream.setLevel(9);\n\n\t\t\t\t\t}\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t\r\n\n\t\t\t\t\tif (replaceEntries.containsKey(je.getName()))\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tlog(\"Updating Bean class from generic Jar \" + je.getName(),\n\n\t\t\t\t\t\t    Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\r\n\n\t\t\t\t\t\tje = (JarEntry)replaceEntries.get(je.getName());\n\n\t\t\t\t\t\tis = genericJar.getInputStream(je);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\telse  \r\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tis = wasJar.getInputStream(je);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\tnewJarStream.putNextEntry(new JarEntry(je.getName()));\n\n\t\t\t\t\t\t\n\n\t\t\t\t\twhile ((bytesRead = is.read(buffer)) != -1)\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tnewJarStream.write(buffer,0,bytesRead);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\tis.close();\n\n\t\t\t\t    }\n\n\t\t\t    }\n\n\t\t\telse\n\n\t\t\t    {\n\n\t\t\t\tlog(\"websphere Jar rebuild needed due to changed interface or XML\",Project.MSG_VERBOSE);\n\n\t\t\t    }\n\n\t\t    }\n\n\t\telse\n\n\t\t    {\n\n\t\t\trebuild = true;\n\n\t\t    }\n\n\t    }\n\n\tcatch(ClassNotFoundException cnfe)\n\n\t    {\n\n\t\tString cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n\n\t\t    + \". Details: \"\n\n\t\t    + cnfe.getMessage();\n\n\t\tthrow new BuildException(cnfmsg, cnfe);\n\n\t    }\n\n\tcatch(IOException ioe) {\n\n\t    String msg = \"IOException while processing ejb-jar file \"\n\n\t\t+ \". Details: \"\n\n\t\t+ ioe.getMessage();\n\n\t    throw new BuildException(msg, ioe);\n\n\t}\n\n\tfinally {\n\n\t    \r\n\n\t    if (genericJar != null) {\n\n\t\ttry {\n\n\t\t    genericJar.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t    }\n\n\t\t\t\n\n\t    if (wasJar != null) {\n\n\t\ttry {\n\n\t\t    wasJar.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t    }\n\n\t\t\t\n\n\t    if (newJarStream != null) {\n\n\t\ttry {\n\n\t\t    newJarStream.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t\t\t\t\n\n\t\twebsphereJarFile.delete();\n\n\t\tnewwasJarFile.renameTo(websphereJarFile);\n\n\t\tif (!websphereJarFile.exists()) {\n\n\t\t    rebuild = true;\n\n\t\t}\n\n\t    }\n\n\t}\n\n\t\t\n\n\treturn rebuild;\n\n    }\n","date":"2001-12-11 22:18:52","endLine":1671,"groupId":"4687","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/25/a4d3eb2fb1f101acefc3e52dc9b859a5b9a589.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile)\n\n    {\n\n\tboolean rebuild = false;\n\n\t\n\n\tJarFile genericJar = null;\n\n\tJarFile wasJar = null;\n\n\tFile newwasJarFile = null;\n\n\tJarOutputStream newJarStream = null;\n\n\t\t\n\n\ttry\n\n\t    {\n\n\t\tlog(\"Checking if websphere Jar needs to be rebuilt for jar \" + websphereJarFile.getName(),\n\n\t\t    Project.MSG_VERBOSE);\n\n\t\t\r\n\n\t\tif (genericJarFile.exists() && genericJarFile.isFile()\n\n\t\t    && websphereJarFile.exists() && websphereJarFile.isFile())\n\n\t\t    {\n\n\t\t\t\t\r\n\n\t\t\tgenericJar = new JarFile(genericJarFile);\n\n\t\t\twasJar = new JarFile(websphereJarFile);\n\n\t\t\t\t\n\n\t\t\tHashtable genericEntries = new Hashtable();\n\n\t\t\tHashtable wasEntries = new Hashtable();\n\n\t\t\tHashtable replaceEntries = new Hashtable();\n\n\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\tfor (Enumeration e = genericJar.entries(); e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\tgenericEntries.put(je.getName().replace('\\\\', '/'), je);\n\n\t\t\t    }\n\n\t\t\t\t\r\n\n\t\t\tfor (Enumeration e = wasJar.entries() ; e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\twasEntries.put(je.getName(), je);\n\n\t\t\t    }\n\n\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\tClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n\t\t\tfor (Enumeration e = genericEntries.keys(); e.hasMoreElements();)\n\n\t\t\t    {\n\n\t\t\t\tString filepath = (String)e.nextElement();\n\n\t\t\t\tif (wasEntries.containsKey(filepath))    \r\n\n\t\t\t\t    {\n\n\t\t\t\t\t\r\n\n\t\t\t\t\tJarEntry genericEntry = (JarEntry)genericEntries.get(filepath);\n\n\t\t\t\t\tJarEntry wasEntry = (JarEntry)wasEntries.get(filepath);\n\n\t\t\t\t\tif ((genericEntry.getCrc() !=  wasEntry.getCrc())  || \r\n\n\t\t\t\t\t    (genericEntry.getSize() != wasEntry.getSize()) ) \r\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tif (genericEntry.getName().endsWith(\".class\"))\n\n\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\tString classname = genericEntry.getName().replace(File.separatorChar,'.');\n\n\t\t\t\t\t\t\tclassname = classname.substring(0,classname.lastIndexOf(\".class\"));\n\n\t\t\t\t\t\t\tClass genclass = genericLoader.loadClass(classname);\n\n\t\t\t\t\t\t\tif (genclass.isInterface())\n\n\t\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\t\tlog(\"Interface \" + genclass.getName() + \" has changed\",Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\t\trebuild = true;\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t\telse\n\n\t\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\t\treplaceEntries.put(filepath, genericEntry);\n\n\t\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\telse\n\n\t\t\t\t\t\t    {\n\n\t\t\t\t\t\t\t\r\n\n\t\t\t\t\t\t\tif (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n\n\t\t\t\t\t\t\t    \r\n\n\t\t\t\t\t\t\t    log(\"Non class file \" + genericEntry.getName() + \" has changed\",Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\t    rebuild = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t    }\n\n\t\t\t\t    }\n\n\t\t\t\telse \r\n\n\t\t\t\t    {\n\n\t\t\t\t\tlog(\"File \" + filepath + \" not present in websphere jar\",Project.MSG_VERBOSE);\n\n\t\t\t\t\trebuild =  true;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t    }\n\n\t\t\t    }\n\n\t\t\t\t\n\n\t\t\tif (!rebuild)\n\n\t\t\t    {\n\n\t\t\t\tlog(\"No rebuild needed - updating jar\",Project.MSG_VERBOSE);\n\n\t\t\t\tnewwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n\n\t\t\t\tif (newwasJarFile.exists()) {\n\n\t\t\t\t    newwasJarFile.delete();\n\n\t\t\t\t}\n\n\t\t\t\t\t\n\n\t\t\t\tnewJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n\n\t\t\t\tnewJarStream.setLevel(0);\n\n\t\t\t\t\t\n\n\t\t\t\t\r\n\n\t\t\t\tfor (Enumeration e = wasEntries.elements() ; e.hasMoreElements();)\n\n\t\t\t\t    {\n\n\t\t\t\t\tbyte[] buffer = new byte[1024];\n\n\t\t\t\t\tint bytesRead;\n\n\t\t\t\t\tInputStream is;\n\n\t\t\t\t\tJarEntry je = (JarEntry)e.nextElement();\n\n\t\t\t\t\tif (je.getCompressedSize() == -1 ||\n\n\t\t\t\t\t    je.getCompressedSize() == je.getSize()) {\n\n\t\t\t\t\t    newJarStream.setLevel(0);\n\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\n\t\t\t\t\t    newJarStream.setLevel(9);\n\n\t\t\t\t\t}\n\n\t\t\t\t\t\t\n\n\t\t\t\t\t\r\n\n\t\t\t\t\tif (replaceEntries.containsKey(je.getName()))\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tlog(\"Updating Bean class from generic Jar \" + je.getName(),\n\n\t\t\t\t\t\t    Project.MSG_VERBOSE);\n\n\t\t\t\t\t\t\r\n\n\t\t\t\t\t\tje = (JarEntry)replaceEntries.get(je.getName());\n\n\t\t\t\t\t\tis = genericJar.getInputStream(je);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\telse  \r\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tis = wasJar.getInputStream(je);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\tnewJarStream.putNextEntry(new JarEntry(je.getName()));\n\n\t\t\t\t\t\t\n\n\t\t\t\t\twhile ((bytesRead = is.read(buffer)) != -1)\n\n\t\t\t\t\t    {\n\n\t\t\t\t\t\tnewJarStream.write(buffer,0,bytesRead);\n\n\t\t\t\t\t    }\n\n\t\t\t\t\tis.close();\n\n\t\t\t\t    }\n\n\t\t\t    }\n\n\t\t\telse\n\n\t\t\t    {\n\n\t\t\t\tlog(\"websphere Jar rebuild needed due to changed interface or XML\",Project.MSG_VERBOSE);\n\n\t\t\t    }\n\n\t\t    }\n\n\t\telse\n\n\t\t    {\n\n\t\t\trebuild = true;\n\n\t\t    }\n\n\t    }\n\n\tcatch(ClassNotFoundException cnfe)\n\n\t    {\n\n\t\tString cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n\n\t\t    + \". Details: \"\n\n\t\t    + cnfe.getMessage();\n\n\t\tthrow new BuildException(cnfmsg, cnfe);\n\n\t    }\n\n\tcatch(IOException ioe) {\n\n\t    String msg = \"IOException while processing ejb-jar file \"\n\n\t\t+ \". Details: \"\n\n\t\t+ ioe.getMessage();\n\n\t    throw new BuildException(msg, ioe);\n\n\t}\n\n\tfinally {\n\n\t    \r\n\n\t    if (genericJar != null) {\n\n\t\ttry {\n\n\t\t    genericJar.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t    }\n\n\t\t\t\n\n\t    if (wasJar != null) {\n\n\t\ttry {\n\n\t\t    wasJar.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t    }\n\n\t\t\t\n\n\t    if (newJarStream != null) {\n\n\t\ttry {\n\n\t\t    newJarStream.close();\n\n\t\t}\n\n\t\tcatch (IOException closeException) {}\n\n\t\t\t\t\n\n\t\twebsphereJarFile.delete();\n\n\t\tnewwasJarFile.renameTo(websphereJarFile);\n\n\t\tif (!websphereJarFile.exists()) {\n\n\t\t    rebuild = true;\n\n\t\t}\n\n\t    }\n\n\t}\n\n\t\t\n\n\treturn rebuild;\n\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":1287,"status":"N"},{"authorDate":"2002-04-24 14:16:46","commitOrder":8,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader \n                    = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc()) || \r\n                        (genericEntry.getSize() != wlEntry.getSize())) {\r\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\", Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1 ||\n                            je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n                \n                if (genericLoader instanceof AntClassLoader) {\n                    AntClassLoader loader = (AntClassLoader)genericLoader;\n                    loader.cleanup();\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                weblogicJarFile.delete();\n                newWLJarFile.renameTo(weblogicJarFile);\n                if (!weblogicJarFile.exists()) {\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2002-04-24 14:16:46","endLine":757,"groupId":"4687","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/78/3aa42a57931db5d9d39dae82732b8b893679de.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc()) || \r\n                        (genericEntry.getSize() != wlEntry.getSize())) {\r\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\", Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1 ||\n                            je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                weblogicJarFile.delete();\n                newWLJarFile.renameTo(weblogicJarFile);\n                if (!weblogicJarFile.exists()) {\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"M"}],"commitId":"e2e194c8543e4e70514a4f19ca5d256f9c307439","commitMessage":"@@@Make sure generic jar is not help open by loader\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@272563 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2002-04-24 14:16:46","modifiedFileCount":"2","status":"M","submitter":"Conor MacNeill"},{"authorTime":"2003-06-25 19:52:47","codes":[{"authorDate":"2003-06-25 19:52:47","commitOrder":9,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \" + websphereJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc()) ||\n                            (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\", Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1 ||\n                            je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wasJar != null) {\n                try {\n                    wasJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                try {\n                    FileUtils.newFileUtils().rename(newwasJarFile, \n                                                    websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2003-06-25 19:52:47","endLine":886,"groupId":"4687","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ef/56cdf36865c2468c6e493695e8a594ad2cf501.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \" + websphereJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc()) ||\n                            (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\", Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1 ||\n                            je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wasJar != null) {\n                try {\n                    wasJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                websphereJarFile.delete();\n                newwasJarFile.renameTo(websphereJarFile);\n                if (!websphereJarFile.exists()) {\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":708,"status":"M"},{"authorDate":"2003-06-25 19:52:47","commitOrder":9,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader\n                    = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc()) || \r\n                        (genericEntry.getSize() != wlEntry.getSize())) {\r\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\", Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1 ||\n                            je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n\n                if (genericLoader instanceof AntClassLoader) {\n                    AntClassLoader loader = (AntClassLoader)genericLoader;\n                    loader.cleanup();\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                try {\n                    fileUtils.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2003-06-25 19:52:47","endLine":877,"groupId":"4687","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/c0/d74c4d63177f1063862ca6922b9a50663d7be5.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader\n                    = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc()) || \r\n                        (genericEntry.getSize() != wlEntry.getSize())) {\r\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\", Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1 ||\n                            je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n\n                if (genericLoader instanceof AntClassLoader) {\n                    AntClassLoader loader = (AntClassLoader)genericLoader;\n                    loader.cleanup();\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                weblogicJarFile.delete();\n                newWLJarFile.renameTo(weblogicJarFile);\n                if (!weblogicJarFile.exists()) {\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":694,"status":"M"}],"commitId":"b498a4535a2ffe115717d13666573de1be0724f1","commitMessage":"@@@Use the new FileUtils#rename method\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@274714 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2003-06-25 19:52:47","modifiedFileCount":"7","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2003-06-25 19:52:47","codes":[{"authorDate":"2003-07-19 19:20:23","commitOrder":10,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wasJar != null) {\n                try {\n                    wasJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                try {\n                    FileUtils.newFileUtils().rename(newwasJarFile,\n                                                    websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2003-07-19 19:20:23","endLine":891,"groupId":"4687","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/05/105a18d2220d82578663afccc32a7ea45995e7.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \" + websphereJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc()) ||\n                            (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\", Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1 ||\n                            je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wasJar != null) {\n                try {\n                    wasJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                try {\n                    FileUtils.newFileUtils().rename(newwasJarFile,\n                                                    websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":706,"status":"M"},{"authorDate":"2003-06-25 19:52:47","commitOrder":10,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader\n                    = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc()) || \r\n                        (genericEntry.getSize() != wlEntry.getSize())) {\r\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\", Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1 ||\n                            je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n\n                if (genericLoader instanceof AntClassLoader) {\n                    AntClassLoader loader = (AntClassLoader)genericLoader;\n                    loader.cleanup();\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                try {\n                    fileUtils.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2003-06-25 19:52:47","endLine":877,"groupId":"4687","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/c0/d74c4d63177f1063862ca6922b9a50663d7be5.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader\n                    = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc()) || \r\n                        (genericEntry.getSize() != wlEntry.getSize())) {\r\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName() + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\", Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1 ||\n                            je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n\n                if (genericLoader instanceof AntClassLoader) {\n                    AntClassLoader loader = (AntClassLoader)genericLoader;\n                    loader.cleanup();\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                try {\n                    fileUtils.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":694,"status":"N"}],"commitId":"24eb5693d6b7363262ea941cac63d15230aa1aab","commitMessage":"@@@Coding conventions\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@274859 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2003-07-19 19:20:23","modifiedFileCount":"127","status":"M","submitter":"Conor MacNeill"},{"authorTime":"2005-01-06 20:05:10","codes":[{"authorDate":"2005-01-06 20:05:10","commitOrder":11,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wasJar != null) {\n                try {\n                    wasJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2005-01-06 20:05:10","endLine":854,"groupId":"4687","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/72/8493bd36345a09dd10435e4af778a9d345ed18.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wasJar != null) {\n                try {\n                    wasJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                try {\n                    FileUtils.newFileUtils().rename(newwasJarFile,\n                                                    websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"M"},{"authorDate":"2005-01-06 20:05:10","commitOrder":11,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader\n                    = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n\n                if (genericLoader instanceof AntClassLoader) {\n                    AntClassLoader loader = (AntClassLoader) genericLoader;\n                    loader.cleanup();\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2005-01-06 20:05:10","endLine":852,"groupId":"4687","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f4/59b6ebb975d8ed3dbed818c088a4fa83210d7c.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader\n                    = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n\n                if (genericLoader instanceof AntClassLoader) {\n                    AntClassLoader loader = (AntClassLoader) genericLoader;\n                    loader.cleanup();\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                try {\n                    fileUtils.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":661,"status":"M"}],"commitId":"257dadeaf0fb8588b80fa71b24ee3aca38ea19b7","commitMessage":"@@@Make use of FileUtils in a uniform way via the getFileUtils method and a static final reference in the using files.\nAlso removed unused/* imports along the way.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@277295 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2005-01-06 20:05:10","modifiedFileCount":"93","status":"M","submitter":"Jacobus Martinus Kruithof"},{"authorTime":"2006-01-31 13:26:03","codes":[{"authorDate":"2005-01-06 20:05:10","commitOrder":12,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wasJar != null) {\n                try {\n                    wasJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2005-01-06 20:05:10","endLine":854,"groupId":"4687","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/72/8493bd36345a09dd10435e4af778a9d345ed18.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wasJar != null) {\n                try {\n                    wasJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"N"},{"authorDate":"2006-01-31 13:26:03","commitOrder":12,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2006-01-31 13:26:03","endLine":852,"groupId":"4687","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/85/06fc0712685b25067153f0b4c28b6268a8a939.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader\n                    = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n\n                if (genericLoader instanceof AntClassLoader) {\n                    AntClassLoader loader = (AntClassLoader) genericLoader;\n                    loader.cleanup();\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                }\n\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":661,"status":"M"}],"commitId":"bd8be1a39f046143367a70949344ea96a3a29ee3","commitMessage":"@@@make sure classloader cleans up resources in any case.  PR 38260.  submitted by Stephan Michels\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@373714 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-01-31 13:26:03","modifiedFileCount":"2","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2006-11-15 08:13:36","codes":[{"authorDate":"2006-11-15 08:13:36","commitOrder":13,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (wasJar != null) {\n                try {\n                    wasJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2006-11-15 08:13:36","endLine":866,"groupId":"5599","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/c4/6aaf62be2955a320bbdd5f5c5e4a28ac1dae23.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (wasJar != null) {\n                try {\n                    wasJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":679,"status":"M"},{"authorDate":"2006-11-15 08:13:36","commitOrder":13,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2006-11-15 08:13:36","endLine":903,"groupId":"5599","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/cc/73b0563c258d19d04b85a3b46667285a5575a8.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(9);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":709,"status":"M"}],"commitId":"4b62dd00017c5be577d5e8cd4615e691e207bf8b","commitMessage":"@@@checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@475080 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-11-15 08:13:36","modifiedFileCount":"14","status":"M","submitter":"Peter Reilly"},{"authorTime":"2009-08-18 22:13:27","codes":[{"authorDate":"2006-11-15 08:13:36","commitOrder":14,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (wasJar != null) {\n                try {\n                    wasJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2006-11-15 08:13:36","endLine":866,"groupId":"5599","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/c4/6aaf62be2955a320bbdd5f5c5e4a28ac1dae23.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (wasJar != null) {\n                try {\n                    wasJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":679,"status":"N"},{"authorDate":"2009-08-18 22:13:27","commitOrder":14,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2009-08-18 22:13:27","endLine":906,"groupId":"247","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e1/ce5553e8128d8148a08319bb086248b21f06a5.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":710,"status":"M"}],"commitId":"9244de5a11723c598b0099c3f4069ca5cd049aa6","commitMessage":"@@@zips and jars use / as separator.  so weblogicdeploymenttool may fail on Windows.  PR 35649\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@805423 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-08-18 22:13:27","modifiedFileCount":"1","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2009-08-18 22:13:27","codes":[{"authorDate":"2009-09-04 23:02:39","commitOrder":15,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (wasJar != null) {\n                try {\n                    wasJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2009-09-04 23:02:39","endLine":872,"groupId":"5599","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ec/721b556a20284bd6aadbd8a72045cc564fab68.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                ClassLoader genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (wasJar != null) {\n                try {\n                    wasJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":679,"status":"M"},{"authorDate":"2009-08-18 22:13:27","commitOrder":15,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2009-08-18 22:13:27","endLine":906,"groupId":"247","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e1/ce5553e8128d8148a08319bb086248b21f06a5.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":710,"status":"N"}],"commitId":"e931e7bad1b82f459c34b7de1ba191d269322d3b","commitMessage":"@@@plug some more classloader leaks and mark those places where a leak remains and I don't see an obvious way to fix it\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@811435 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-09-04 23:02:39","modifiedFileCount":"20","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2016-03-28 18:36:29","codes":[{"authorDate":"2016-03-28 18:36:29","commitOrder":16,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2016-03-28 18:36:29","endLine":855,"groupId":"5599","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/da/84f245fb47711148719c7208816cb775d36443.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (wasJar != null) {\n                try {\n                    wasJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":680,"status":"M"},{"authorDate":"2016-03-28 18:36:29","commitOrder":16,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2016-03-28 18:36:29","endLine":889,"groupId":"247","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/64/95e97dd6c8900c73e7c8618af85dc7c125ed5b.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            if (genericJar != null) {\n                try {\n                    genericJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (wlJar != null) {\n                try {\n                    wlJar.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n            }\n\n            if (newJarStream != null) {\n                try {\n                    newJarStream.close();\n                } catch (IOException closeException) {\n                    \r\n                }\n\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":712,"status":"M"}],"commitId":"4af291c5805c26fcfbecd527862bb27727bcc0d6","commitMessage":"@@@embrace AutoCloseable\n","date":"2016-03-28 18:36:29","modifiedFileCount":"22","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2017-04-12 12:54:09","codes":[{"authorDate":"2017-04-12 12:54:09","commitOrder":17,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2017-04-12 12:54:09","endLine":855,"groupId":"0","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/63/caf5075c4c514af083c26d9188d88ddcffc715.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newwasJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":680,"status":"M"},{"authorDate":"2017-04-12 12:54:09","commitOrder":17,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","date":"2017-04-12 12:54:09","endLine":887,"groupId":"247","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/cc/1bd90aadf1353ac845d3f99d3e844c4d914c64.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(new FileOutputStream(newWLJarFile));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":710,"status":"M"}],"commitId":"af74d1f6b882cef5f4167d972638ad886d12d58c","commitMessage":"@@@reduce GC pressure by replacing File(In|Out)putStream\n","date":"2017-04-12 12:54:09","modifiedFileCount":"84","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":18,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wasEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wasEntry = wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wasEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new BuildException(\n                \"ClassNotFoundException while processing ejb-jar file. Details: \"\n                    + cnfe.getMessage(),\n                cnfe);\n        } catch (IOException ioe) {\n            throw new BuildException(\n                \"IOException while processing ejb-jar file . Details: \"\n                    + ioe.getMessage(),\n                ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2017-04-13 23:15:22","endLine":823,"groupId":"7320","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/6a/cdc4781b45ddb025af16b9edb233f14df4cc36.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wasEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wasEntry = (JarEntry) wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wasEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"M"},{"authorDate":"2017-04-13 23:15:22","commitOrder":18,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wlEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wlEntry = wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else if (!genericEntry.getName()\n                                .equals(\"META-INF/MANIFEST.MF\")) {\n                                \r\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wlEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2017-04-13 23:15:22","endLine":842,"groupId":"7320","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/4b/0116d2bd5b8e47585cc6dec34a09d61af6d38b.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable genericEntries = new Hashtable();\n                Hashtable wlEntries = new Hashtable();\n                Hashtable replaceEntries = new Hashtable();\n\n                \r\n                for (Enumeration e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = (JarEntry) e.nextElement();\n\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = (String) e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = (JarEntry) genericEntries.get(filepath);\n                        JarEntry wlEntry = (JarEntry) wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                } else {\n                                    \r\n                                    replaceEntries.put(filepath, genericEntry);\n                                }\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration e = wlEntries.elements(); e.hasMoreElements();) {\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        InputStream is;\n                        JarEntry je = (JarEntry) e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = (JarEntry) replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"M"}],"commitId":"b7d1e9bde44cb8e5233d6e70bb96e14cbb2f3e2d","commitMessage":"@@@java 5-8\n","date":"2017-04-13 23:15:22","modifiedFileCount":"609","status":"M","submitter":"Matt Benson"},{"authorTime":"2018-02-14 03:32:07","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":19,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wasEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wasEntry = wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wasEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new BuildException(\n                \"ClassNotFoundException while processing ejb-jar file. Details: \"\n                    + cnfe.getMessage(),\n                cnfe);\n        } catch (IOException ioe) {\n            throw new BuildException(\n                \"IOException while processing ejb-jar file . Details: \"\n                    + ioe.getMessage(),\n                ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2017-04-13 23:15:22","endLine":823,"groupId":"7320","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/6a/cdc4781b45ddb025af16b9edb233f14df4cc36.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wasEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wasEntry = wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wasEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new BuildException(\n                \"ClassNotFoundException while processing ejb-jar file. Details: \"\n                    + cnfe.getMessage(),\n                cnfe);\n        } catch (IOException ioe) {\n            throw new BuildException(\n                \"IOException while processing ejb-jar file . Details: \"\n                    + ioe.getMessage(),\n                ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"N"},{"authorDate":"2018-02-14 03:32:07","commitOrder":19,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wlEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wlEntry = wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else if (!\"META-INF/MANIFEST.MF\".equals(genericEntry.getName())) {\n                                \r\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wlEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2018-02-14 03:32:07","endLine":841,"groupId":"7334","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/2e/ba14d5f49ea28d808a0b3ac2b45c44be3c822d.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wlEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wlEntry = wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else if (!genericEntry.getName()\n                                .equals(\"META-INF/MANIFEST.MF\")) {\n                                \r\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wlEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"M"}],"commitId":"6850ad2e61257a0a8aaf2034f186af8e15d3b42b","commitMessage":"@@@rephrase comment after it has been moved\n","date":"2018-02-14 03:32:07","modifiedFileCount":"1","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2018-04-02 02:07:39","codes":[{"authorDate":"2018-04-02 02:07:39","commitOrder":20,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wasEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wasEntry = wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wasEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new BuildException(\n                \"ClassNotFoundException while processing ejb-jar file. Details: \"\n                    + cnfe.getMessage(),\n                cnfe);\n        } catch (IOException ioe) {\n            throw new BuildException(\n                \"IOException while processing ejb-jar file . Details: \"\n                    + ioe.getMessage(),\n                ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2018-04-02 02:07:39","endLine":822,"groupId":"7320","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/0a/af5caa3f35ab04643a7a06f8d2eaa167bd4f73.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wasEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wasEntry = wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wasEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new BuildException(\n                \"ClassNotFoundException while processing ejb-jar file. Details: \"\n                    + cnfe.getMessage(),\n                cnfe);\n        } catch (IOException ioe) {\n            throw new BuildException(\n                \"IOException while processing ejb-jar file . Details: \"\n                    + ioe.getMessage(),\n                ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"M"},{"authorDate":"2018-04-02 02:07:39","commitOrder":20,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wlEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wlEntry = wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else if (!\"META-INF/MANIFEST.MF\".equals(genericEntry.getName())) {\n                                \r\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wlEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2018-04-02 02:07:39","endLine":840,"groupId":"7334","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/83/56471c6bd4954f8206c123bd0ad65bc4338a8a.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wlEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wlEntry = wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else if (!\"META-INF/MANIFEST.MF\".equals(genericEntry.getName())) {\n                                \r\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wlEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader != null\n                && genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"M"}],"commitId":"95495d57aa5cca8fc350ebfb10f6d390f40290cb","commitMessage":"@@@Remove extraneous casts and (un)boxing.  tersify logic","date":"2018-04-02 02:07:39","modifiedFileCount":"178","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-04-06 13:23:28","codes":[{"authorDate":"2018-04-06 13:23:28","commitOrder":21,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wasEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wasEntry = wasEntries.get(filepath);\n\n                        if (genericEntry.getCrc() != wasEntry.getCrc()\n                            || genericEntry.getSize() != wasEntry.getSize()) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wasEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new BuildException(\n                \"ClassNotFoundException while processing ejb-jar file. Details: \"\n                    + cnfe.getMessage(),\n                cnfe);\n        } catch (IOException ioe) {\n            throw new BuildException(\n                \"IOException while processing ejb-jar file . Details: \"\n                    + ioe.getMessage(),\n                ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2018-04-06 13:53:30","endLine":822,"groupId":"2325","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/40/cdc23e8e995ac55555310111487f1d17420d5f.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wasEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wasEntry = wasEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wasEntry.getCrc())\n                            || (genericEntry.getSize() != wasEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wasEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new BuildException(\n                \"ClassNotFoundException while processing ejb-jar file. Details: \"\n                    + cnfe.getMessage(),\n                cnfe);\n        } catch (IOException ioe) {\n            throw new BuildException(\n                \"IOException while processing ejb-jar file . Details: \"\n                    + ioe.getMessage(),\n                ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"M"},{"authorDate":"2018-04-06 13:23:28","commitOrder":21,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wlEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wlEntry = wlEntries.get(filepath);\n\n                        if (genericEntry.getCrc() != wlEntry.getCrc()\n                            || genericEntry.getSize() != wlEntry.getSize()) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else if (!\"META-INF/MANIFEST.MF\".equals(genericEntry.getName())) {\n                                \r\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wlEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2018-04-06 13:53:30","endLine":840,"groupId":"2027","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e8/a868e2f6a4ea357e2582992fb535f364991907.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wlEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wlEntry = wlEntries.get(filepath);\n\n                        if ((genericEntry.getCrc() != wlEntry.getCrc())\n                            || (genericEntry.getSize() != wlEntry.getSize())) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else if (!\"META-INF/MANIFEST.MF\".equals(genericEntry.getName())) {\n                                \r\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wlEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"M"}],"commitId":"095aaaef7556a63bab3b8ac80993722a54ed28b6","commitMessage":"@@@Chop extraneous parentheses","date":"2018-04-06 13:53:30","modifiedFileCount":"36","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-05-17 00:32:03","codes":[{"authorDate":"2018-05-17 00:32:03","commitOrder":22,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                \r\n                Hashtable<String, JarEntry> genericEntries = Collections.list(genericJar.entries()).stream()\n                        .collect(Collectors.toMap(je -> je.getName().replace('\\\\', '/'),\n                                je -> je, (a, b) -> b, Hashtable::new));\n\n                \r\n                Hashtable<String, JarEntry> wasEntries = Collections.list(wasJar.entries()).stream()\n                        .collect(Collectors.toMap(ZipEntry::getName, je -> je, (a, b) -> b, Hashtable::new));\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n                for (String filepath : genericEntries.keySet()) {\n                    if (!wasEntries.containsKey(filepath)) {\n                        \r\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                    \r\n                    \r\n                    JarEntry genericEntry = genericEntries.get(filepath);\n                    JarEntry wasEntry = wasEntries.get(filepath);\n\n                    if (genericEntry.getCrc() != wasEntry.getCrc()\n                        || genericEntry.getSize() != wasEntry.getSize()) {\n\n                        if (genericEntry.getName().endsWith(\".class\")) {\n                            \r\n                            String classname\n                                = genericEntry.getName().replace(File.separatorChar, '.');\n\n                            classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                            Class<?> genclass = genericLoader.loadClass(classname);\n\n                            if (genclass.isInterface()) {\n                                \r\n                                log(\"Interface \" + genclass.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                            \r\n                            replaceEntries.put(filepath, genericEntry);\n                        } else {\n                            \r\n                            if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                            }\n                            break;\n                        }\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (JarEntry je : Collections.list(wasEntries.elements())) {\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new BuildException(\n                \"ClassNotFoundException while processing ejb-jar file. Details: \"\n                    + cnfe.getMessage(),\n                cnfe);\n        } catch (IOException ioe) {\n            throw new BuildException(\n                \"IOException while processing ejb-jar file . Details: \"\n                    + ioe.getMessage(),\n                ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2018-05-17 01:13:05","endLine":808,"groupId":"3436","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/45/bb25e2922063943984a15790ed504d8e35f1d9.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wasEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wasJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wasEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wasEntries.containsKey(filepath)) {\n                        \r\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wasEntry = wasEntries.get(filepath);\n\n                        if (genericEntry.getCrc() != wasEntry.getCrc()\n                            || genericEntry.getSize() != wasEntry.getSize()) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName().replace(File.separatorChar, '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else {\n                                \r\n                                if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                    \r\n                                    log(\"Non class file \" + genericEntry.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                }\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wasEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new BuildException(\n                \"ClassNotFoundException while processing ejb-jar file. Details: \"\n                    + cnfe.getMessage(),\n                cnfe);\n        } catch (IOException ioe) {\n            throw new BuildException(\n                \"IOException while processing ejb-jar file . Details: \"\n                    + ioe.getMessage(),\n                ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":650,"status":"M"},{"authorDate":"2018-05-17 00:32:03","commitOrder":22,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wlEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wlEntry = wlEntries.get(filepath);\n\n                        if (genericEntry.getCrc() != wlEntry.getCrc()\n                            || genericEntry.getSize() != wlEntry.getSize()) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else if (!\"META-INF/MANIFEST.MF\".equals(genericEntry.getName())) {\n                                \r\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (JarEntry je : wlEntries.values()) {\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2018-05-17 01:13:05","endLine":838,"groupId":"0","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/c4/4aea478ffe4c7d2432a8841d75d8dc1fb2e415.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wlEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wlEntry = wlEntries.get(filepath);\n\n                        if (genericEntry.getCrc() != wlEntry.getCrc()\n                            || genericEntry.getSize() != wlEntry.getSize()) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else if (!\"META-INF/MANIFEST.MF\".equals(genericEntry.getName())) {\n                                \r\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (Enumeration<JarEntry> e = wlEntries.elements(); e.hasMoreElements();) {\n                        JarEntry je = e.nextElement();\n\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"M"}],"commitId":"070c3bc86f85e8f01cb624fe50ae82f0d11171b2","commitMessage":"@@@Deprecate CollectionUtils and Enumerations;\nreduce explicit use of Enumeration","date":"2018-05-17 01:13:05","modifiedFileCount":"46","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-05-17 00:32:03","codes":[{"authorDate":"2018-05-17 03:43:02","commitOrder":23,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                \r\n                Hashtable<String, JarEntry> genericEntries = Collections.list(genericJar.entries()).stream()\n                        .collect(Collectors.toMap(je -> je.getName().replace('\\\\', '/'),\n                                je -> je, (a, b) -> b, Hashtable::new));\n\n                \r\n                Hashtable<String, JarEntry> wasEntries = Collections.list(wasJar.entries()).stream()\n                        .collect(Collectors.toMap(ZipEntry::getName, je -> je, (a, b) -> b, Hashtable::new));\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n                for (String filepath : genericEntries.keySet()) {\n                    if (!wasEntries.containsKey(filepath)) {\n                        \r\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                    \r\n                    \r\n                    JarEntry genericEntry = genericEntries.get(filepath);\n                    JarEntry wasEntry = wasEntries.get(filepath);\n\n                    if (genericEntry.getCrc() != wasEntry.getCrc()\n                        || genericEntry.getSize() != wasEntry.getSize()) {\n\n                        if (genericEntry.getName().endsWith(\".class\")) {\n                            \r\n                            String classname\n                                = genericEntry.getName().replace(File.separatorChar, '.');\n\n                            classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                            Class<?> genclass = genericLoader.loadClass(classname);\n\n                            if (genclass.isInterface()) {\n                                \r\n                                log(\"Interface \" + genclass.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                            \r\n                            replaceEntries.put(filepath, genericEntry);\n                        } else {\n                            \r\n                            if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                            }\n                            break;\n                        }\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (JarEntry je : wasEntries.values()) {\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new BuildException(\n                \"ClassNotFoundException while processing ejb-jar file. Details: \"\n                    + cnfe.getMessage(),\n                cnfe);\n        } catch (IOException ioe) {\n            throw new BuildException(\n                \"IOException while processing ejb-jar file . Details: \"\n                    + ioe.getMessage(),\n                ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2018-05-17 03:43:02","endLine":808,"groupId":"3436","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ee/d93772433c491c1e5f9bda6001285525275ed5.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                \r\n                Hashtable<String, JarEntry> genericEntries = Collections.list(genericJar.entries()).stream()\n                        .collect(Collectors.toMap(je -> je.getName().replace('\\\\', '/'),\n                                je -> je, (a, b) -> b, Hashtable::new));\n\n                \r\n                Hashtable<String, JarEntry> wasEntries = Collections.list(wasJar.entries()).stream()\n                        .collect(Collectors.toMap(ZipEntry::getName, je -> je, (a, b) -> b, Hashtable::new));\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n                for (String filepath : genericEntries.keySet()) {\n                    if (!wasEntries.containsKey(filepath)) {\n                        \r\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                    \r\n                    \r\n                    JarEntry genericEntry = genericEntries.get(filepath);\n                    JarEntry wasEntry = wasEntries.get(filepath);\n\n                    if (genericEntry.getCrc() != wasEntry.getCrc()\n                        || genericEntry.getSize() != wasEntry.getSize()) {\n\n                        if (genericEntry.getName().endsWith(\".class\")) {\n                            \r\n                            String classname\n                                = genericEntry.getName().replace(File.separatorChar, '.');\n\n                            classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                            Class<?> genclass = genericLoader.loadClass(classname);\n\n                            if (genclass.isInterface()) {\n                                \r\n                                log(\"Interface \" + genclass.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                            \r\n                            replaceEntries.put(filepath, genericEntry);\n                        } else {\n                            \r\n                            if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                            }\n                            break;\n                        }\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (JarEntry je : Collections.list(wasEntries.elements())) {\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new BuildException(\n                \"ClassNotFoundException while processing ejb-jar file. Details: \"\n                    + cnfe.getMessage(),\n                cnfe);\n        } catch (IOException ioe) {\n            throw new BuildException(\n                \"IOException while processing ejb-jar file . Details: \"\n                    + ioe.getMessage(),\n                ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":650,"status":"M"},{"authorDate":"2018-05-17 00:32:03","commitOrder":23,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wlEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wlEntry = wlEntries.get(filepath);\n\n                        if (genericEntry.getCrc() != wlEntry.getCrc()\n                            || genericEntry.getSize() != wlEntry.getSize()) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else if (!\"META-INF/MANIFEST.MF\".equals(genericEntry.getName())) {\n                                \r\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (JarEntry je : wlEntries.values()) {\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2018-05-17 01:13:05","endLine":838,"groupId":"0","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/c4/4aea478ffe4c7d2432a8841d75d8dc1fb2e415.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wlEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wlEntry = wlEntries.get(filepath);\n\n                        if (genericEntry.getCrc() != wlEntry.getCrc()\n                            || genericEntry.getSize() != wlEntry.getSize()) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else if (!\"META-INF/MANIFEST.MF\".equals(genericEntry.getName())) {\n                                \r\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (JarEntry je : wlEntries.values()) {\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"N"}],"commitId":"0020d1a16ba4207289d2380dc6981c85455b617f","commitMessage":"@@@Vector is iterable","date":"2018-05-17 03:43:02","modifiedFileCount":"3","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-05-17 00:32:03","codes":[{"authorDate":"2018-05-18 02:36:11","commitOrder":24,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                \r\n                Hashtable<String, JarEntry> genericEntries\n                        = StreamUtils.enumerationAsStream(genericJar.entries())\n                        .collect(Collectors.toMap(je -> je.getName().replace('\\\\', '/'),\n                                je -> je, (a, b) -> b, Hashtable::new));\n\n                \r\n                Hashtable<String, JarEntry> wasEntries\n                        = StreamUtils.enumerationAsStream(wasJar.entries())\n                        .collect(Collectors.toMap(ZipEntry::getName,\n                                je -> je, (a, b) -> b, Hashtable::new));\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n                for (String filepath : genericEntries.keySet()) {\n                    if (!wasEntries.containsKey(filepath)) {\n                        \r\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                    \r\n                    \r\n                    JarEntry genericEntry = genericEntries.get(filepath);\n                    JarEntry wasEntry = wasEntries.get(filepath);\n\n                    if (genericEntry.getCrc() != wasEntry.getCrc()\n                        || genericEntry.getSize() != wasEntry.getSize()) {\n\n                        if (genericEntry.getName().endsWith(\".class\")) {\n                            \r\n                            String classname\n                                = genericEntry.getName().replace(File.separatorChar, '.');\n\n                            classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                            Class<?> genclass = genericLoader.loadClass(classname);\n\n                            if (genclass.isInterface()) {\n                                \r\n                                log(\"Interface \" + genclass.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                            \r\n                            replaceEntries.put(filepath, genericEntry);\n                        } else {\n                            \r\n                            if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                            }\n                            break;\n                        }\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (JarEntry je : wasEntries.values()) {\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new BuildException(\n                \"ClassNotFoundException while processing ejb-jar file. Details: \"\n                    + cnfe.getMessage(),\n                cnfe);\n        } catch (IOException ioe) {\n            throw new BuildException(\n                \"IOException while processing ejb-jar file . Details: \"\n                    + ioe.getMessage(),\n                ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2018-05-18 02:36:11","endLine":811,"groupId":"3436","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/cc/a7716512e813f96d7bc72265117c0eeaf36922.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                \r\n                Hashtable<String, JarEntry> genericEntries = Collections.list(genericJar.entries()).stream()\n                        .collect(Collectors.toMap(je -> je.getName().replace('\\\\', '/'),\n                                je -> je, (a, b) -> b, Hashtable::new));\n\n                \r\n                Hashtable<String, JarEntry> wasEntries = Collections.list(wasJar.entries()).stream()\n                        .collect(Collectors.toMap(ZipEntry::getName, je -> je, (a, b) -> b, Hashtable::new));\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n                for (String filepath : genericEntries.keySet()) {\n                    if (!wasEntries.containsKey(filepath)) {\n                        \r\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                    \r\n                    \r\n                    JarEntry genericEntry = genericEntries.get(filepath);\n                    JarEntry wasEntry = wasEntries.get(filepath);\n\n                    if (genericEntry.getCrc() != wasEntry.getCrc()\n                        || genericEntry.getSize() != wasEntry.getSize()) {\n\n                        if (genericEntry.getName().endsWith(\".class\")) {\n                            \r\n                            String classname\n                                = genericEntry.getName().replace(File.separatorChar, '.');\n\n                            classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                            Class<?> genclass = genericLoader.loadClass(classname);\n\n                            if (genclass.isInterface()) {\n                                \r\n                                log(\"Interface \" + genclass.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                            \r\n                            replaceEntries.put(filepath, genericEntry);\n                        } else {\n                            \r\n                            if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                            }\n                            break;\n                        }\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (JarEntry je : wasEntries.values()) {\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new BuildException(\n                \"ClassNotFoundException while processing ejb-jar file. Details: \"\n                    + cnfe.getMessage(),\n                cnfe);\n        } catch (IOException ioe) {\n            throw new BuildException(\n                \"IOException while processing ejb-jar file . Details: \"\n                    + ioe.getMessage(),\n                ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":650,"status":"M"},{"authorDate":"2018-05-17 00:32:03","commitOrder":24,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wlEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wlEntry = wlEntries.get(filepath);\n\n                        if (genericEntry.getCrc() != wlEntry.getCrc()\n                            || genericEntry.getSize() != wlEntry.getSize()) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else if (!\"META-INF/MANIFEST.MF\".equals(genericEntry.getName())) {\n                                \r\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (JarEntry je : wlEntries.values()) {\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2018-05-17 01:13:05","endLine":838,"groupId":"0","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/c4/4aea478ffe4c7d2432a8841d75d8dc1fb2e415.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wlEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wlEntry = wlEntries.get(filepath);\n\n                        if (genericEntry.getCrc() != wlEntry.getCrc()\n                            || genericEntry.getSize() != wlEntry.getSize()) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else if (!\"META-INF/MANIFEST.MF\".equals(genericEntry.getName())) {\n                                \r\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (JarEntry je : wlEntries.values()) {\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"N"}],"commitId":"11422630936848e82c7b13ab3fa68a3003e10195","commitMessage":"@@@Avoid Collections.list().stream()\n(for performance sake)","date":"2018-05-18 02:36:11","modifiedFileCount":"29","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-05-20 21:53:04","codes":[{"authorDate":"2018-05-20 21:53:04","commitOrder":25,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                \r\n                Map<String, JarEntry> genericEntries = genericJar.stream()\n                        .collect(Collectors.toMap(je -> je.getName().replace('\\\\', '/'),\n                                je -> je, (a, b) -> b));\n\n                \r\n                Map<String, JarEntry> wasEntries = wasJar.stream()\n                        .collect(Collectors.toMap(ZipEntry::getName, je -> je, (a, b) -> b));\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                Map<String, JarEntry> replaceEntries = new HashMap<>();\n                for (String filepath : genericEntries.keySet()) {\n                    if (!wasEntries.containsKey(filepath)) {\n                        \r\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                    \r\n                    \r\n                    JarEntry genericEntry = genericEntries.get(filepath);\n                    JarEntry wasEntry = wasEntries.get(filepath);\n\n                    if (genericEntry.getCrc() != wasEntry.getCrc()\n                        || genericEntry.getSize() != wasEntry.getSize()) {\n\n                        if (genericEntry.getName().endsWith(\".class\")) {\n                            \r\n                            String classname\n                                = genericEntry.getName().replace(File.separatorChar, '.');\n\n                            classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                            Class<?> genclass = genericLoader.loadClass(classname);\n\n                            if (genclass.isInterface()) {\n                                \r\n                                log(\"Interface \" + genclass.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                            \r\n                            replaceEntries.put(filepath, genericEntry);\n                        } else {\n                            \r\n                            if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                            }\n                            break;\n                        }\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (JarEntry je : wasEntries.values()) {\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new BuildException(\n                \"ClassNotFoundException while processing ejb-jar file. Details: \"\n                    + cnfe.getMessage(),\n                cnfe);\n        } catch (IOException ioe) {\n            throw new BuildException(\n                \"IOException while processing ejb-jar file . Details: \"\n                    + ioe.getMessage(),\n                ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2018-05-20 21:56:02","endLine":809,"groupId":"10428","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FilewebsphereJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/4a/9400758096a240bf2a6079c12a47d943e9d9c4.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File websphereJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wasJar = null;\n        File newwasJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if websphere Jar needs to be rebuilt for jar \"\n                + websphereJarFile.getName(), Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && websphereJarFile.exists() && websphereJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wasJar = new JarFile(websphereJarFile);\n\n                \r\n                Hashtable<String, JarEntry> genericEntries\n                        = StreamUtils.enumerationAsStream(genericJar.entries())\n                        .collect(Collectors.toMap(je -> je.getName().replace('\\\\', '/'),\n                                je -> je, (a, b) -> b, Hashtable::new));\n\n                \r\n                Hashtable<String, JarEntry> wasEntries\n                        = StreamUtils.enumerationAsStream(wasJar.entries())\n                        .collect(Collectors.toMap(ZipEntry::getName,\n                                je -> je, (a, b) -> b, Hashtable::new));\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n                for (String filepath : genericEntries.keySet()) {\n                    if (!wasEntries.containsKey(filepath)) {\n                        \r\n                        log(\"File \" + filepath + \" not present in websphere jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                    \r\n                    \r\n                    JarEntry genericEntry = genericEntries.get(filepath);\n                    JarEntry wasEntry = wasEntries.get(filepath);\n\n                    if (genericEntry.getCrc() != wasEntry.getCrc()\n                        || genericEntry.getSize() != wasEntry.getSize()) {\n\n                        if (genericEntry.getName().endsWith(\".class\")) {\n                            \r\n                            String classname\n                                = genericEntry.getName().replace(File.separatorChar, '.');\n\n                            classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                            Class<?> genclass = genericLoader.loadClass(classname);\n\n                            if (genclass.isInterface()) {\n                                \r\n                                log(\"Interface \" + genclass.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                            \r\n                            replaceEntries.put(filepath, genericEntry);\n                        } else {\n                            \r\n                            if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                            }\n                            break;\n                        }\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newwasJarFile = new File(websphereJarFile.getAbsolutePath() + \".temp\");\n                    if (newwasJarFile.exists()) {\n                        newwasJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newwasJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (JarEntry je : wasEntries.values()) {\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \" + je.getName(),\n                                Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wasJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"websphere Jar rebuild needed due to changed \"\n                        + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            throw new BuildException(\n                \"ClassNotFoundException while processing ejb-jar file. Details: \"\n                    + cnfe.getMessage(),\n                cnfe);\n        } catch (IOException ioe) {\n            throw new BuildException(\n                \"IOException while processing ejb-jar file . Details: \"\n                    + ioe.getMessage(),\n                ioe);\n        } finally {\n            \r\n            FileUtils.close(genericJar);\n            FileUtils.close(wasJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newwasJarFile, websphereJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WebsphereDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":651,"status":"M"},{"authorDate":"2018-05-20 21:53:04","commitOrder":25,"curCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Map<String, JarEntry> replaceEntries = new HashMap<>();\n\n                \r\n                Map<String, JarEntry> genericEntries = genericJar.stream()\n                        .collect(Collectors.toMap(je -> je.getName().replace('\\\\', '/'),\n                                je -> je, (a, b) -> b));\n                \r\n                Map<String, JarEntry> wlEntries = wlJar.stream().collect(Collectors.toMap(ZipEntry::getName,\n                        je -> je, (a, b) -> b));\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (String filepath : genericEntries.keySet()) {\n                    if (!wlEntries.containsKey(filepath)) {\n                        \r\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                    \r\n                    \r\n                    JarEntry genericEntry = genericEntries.get(filepath);\n                    JarEntry wlEntry = wlEntries.get(filepath);\n\n                    if (genericEntry.getCrc() != wlEntry.getCrc()\n                        || genericEntry.getSize() != wlEntry.getSize()) {\n\n                        if (genericEntry.getName().endsWith(\".class\")) {\n                            \r\n                            String classname = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                            classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                            Class<?> genclass = genericLoader.loadClass(classname);\n\n                            if (genclass.isInterface()) {\n                                \r\n                                log(\"Interface \" + genclass.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                            \r\n                            replaceEntries.put(filepath, genericEntry);\n                        } else if (!genericEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                            \r\n                            \r\n                            log(\"Non class file \" + genericEntry.getName()\n                                + \" has changed\", Project.MSG_VERBOSE);\n                            rebuild = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (JarEntry je : wlEntries.values()) {\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","date":"2018-05-20 21:56:02","endLine":827,"groupId":"10428","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"isRebuildRequired","params":"(FilegenericJarFile@FileweblogicJarFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/59/61eca224d133b8d393c1ed349857525f79e20a.src","preCode":"    protected boolean isRebuildRequired(File genericJarFile, File weblogicJarFile) {\n        boolean rebuild = false;\n\n        JarFile genericJar = null;\n        JarFile wlJar = null;\n        File newWLJarFile = null;\n        JarOutputStream newJarStream = null;\n        ClassLoader genericLoader = null;\n\n        try {\n            log(\"Checking if weblogic Jar needs to be rebuilt for jar \" + weblogicJarFile.getName(),\n                Project.MSG_VERBOSE);\n            \r\n            if (genericJarFile.exists() && genericJarFile.isFile()\n                 && weblogicJarFile.exists() && weblogicJarFile.isFile()) {\n                \r\n                genericJar = new JarFile(genericJarFile);\n                wlJar = new JarFile(weblogicJarFile);\n\n                Hashtable<String, JarEntry> genericEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> wlEntries = new Hashtable<>();\n                Hashtable<String, JarEntry> replaceEntries = new Hashtable<>();\n\n                \r\n                for (Enumeration<JarEntry> e = genericJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    genericEntries.put(je.getName().replace('\\\\', '/'), je);\n                }\n                \r\n                for (Enumeration<JarEntry> e = wlJar.entries(); e.hasMoreElements();) {\n                    JarEntry je = e.nextElement();\n                    wlEntries.put(je.getName(), je);\n                }\n\n                \r\n                genericLoader = getClassLoaderFromJar(genericJarFile);\n\n                for (Enumeration<String> e = genericEntries.keys(); e.hasMoreElements();) {\n                    String filepath = e.nextElement();\n\n                    if (wlEntries.containsKey(filepath)) {\n                        \r\n\n                        \r\n                        JarEntry genericEntry = genericEntries.get(filepath);\n                        JarEntry wlEntry = wlEntries.get(filepath);\n\n                        if (genericEntry.getCrc() != wlEntry.getCrc()\n                            || genericEntry.getSize() != wlEntry.getSize()) {\n\n                            if (genericEntry.getName().endsWith(\".class\")) {\n                                \r\n                                String classname\n                                    = genericEntry.getName()\n                                    .replace(File.separatorChar, '.')\n                                    .replace('/', '.');\n\n                                classname = classname.substring(0, classname.lastIndexOf(\".class\"));\n\n                                Class<?> genclass = genericLoader.loadClass(classname);\n\n                                if (genclass.isInterface()) {\n                                    \r\n                                    log(\"Interface \" + genclass.getName()\n                                        + \" has changed\", Project.MSG_VERBOSE);\n                                    rebuild = true;\n                                    break;\n                                }\n                                \r\n                                replaceEntries.put(filepath, genericEntry);\n                            } else if (!\"META-INF/MANIFEST.MF\".equals(genericEntry.getName())) {\n                                \r\n                                \r\n                                log(\"Non class file \" + genericEntry.getName()\n                                    + \" has changed\", Project.MSG_VERBOSE);\n                                rebuild = true;\n                                break;\n                            }\n                        }\n                    } else {\n                        \r\n\n                        log(\"File \" + filepath + \" not present in weblogic jar\",\n                            Project.MSG_VERBOSE);\n                        rebuild = true;\n                        break;\n                    }\n                }\n\n                if (!rebuild) {\n                    log(\"No rebuild needed - updating jar\", Project.MSG_VERBOSE);\n                    newWLJarFile = new File(weblogicJarFile.getAbsolutePath() + \".temp\");\n                    if (newWLJarFile.exists()) {\n                        newWLJarFile.delete();\n                    }\n\n                    newJarStream = new JarOutputStream(Files.newOutputStream(newWLJarFile.toPath()));\n                    newJarStream.setLevel(0);\n\n                    \r\n                    for (JarEntry je : wlEntries.values()) {\n                        if (je.getCompressedSize() == -1\n                            || je.getCompressedSize() == je.getSize()) {\n                            newJarStream.setLevel(0);\n                        } else {\n                            newJarStream.setLevel(JAR_COMPRESS_LEVEL);\n                        }\n\n                        InputStream is;\n                        \r\n                        if (replaceEntries.containsKey(je.getName())) {\n                            log(\"Updating Bean class from generic Jar \"\n                                + je.getName(), Project.MSG_VERBOSE);\n                            \r\n                            je = replaceEntries.get(je.getName());\n                            is = genericJar.getInputStream(je);\n                        } else {\n                            \r\n\n                            is = wlJar.getInputStream(je);\n                        }\n                        newJarStream.putNextEntry(new JarEntry(je.getName()));\n\n                        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            newJarStream.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                    }\n                } else {\n                    log(\"Weblogic Jar rebuild needed due to changed \"\n                         + \"interface or XML\", Project.MSG_VERBOSE);\n                }\n            } else {\n                rebuild = true;\n            }\n        } catch (ClassNotFoundException cnfe) {\n            String cnfmsg = \"ClassNotFoundException while processing ejb-jar file\"\n                 + \". Details: \"\n                 + cnfe.getMessage();\n\n            throw new BuildException(cnfmsg, cnfe);\n        } catch (IOException ioe) {\n            String msg = \"IOException while processing ejb-jar file \"\n                 + \". Details: \"\n                 + ioe.getMessage();\n\n            throw new BuildException(msg, ioe);\n        } finally {\n            FileUtils.close(genericJar);\n            FileUtils.close(wlJar);\n            FileUtils.close(newJarStream);\n\n            if (newJarStream != null) {\n                try {\n                    FILE_UTILS.rename(newWLJarFile, weblogicJarFile);\n                } catch (IOException renameException) {\n                    log(renameException.getMessage(), Project.MSG_WARN);\n                    rebuild = true;\n                }\n            }\n            if (genericLoader instanceof AntClassLoader) {\n                @SuppressWarnings(\"resource\")\n                AntClassLoader loader = (AntClassLoader) genericLoader;\n                loader.cleanup();\n            }\n        }\n        return rebuild;\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/ejb/WeblogicDeploymentTool.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"M"}],"commitId":"70da75c5053a3f2e5f7905e2d8bfeb4e998edcec","commitMessage":"@@@More Streams (less StreamUtils)","date":"2018-05-20 21:56:02","modifiedFileCount":"9","status":"M","submitter":"Gintas Grigelionis"}]
