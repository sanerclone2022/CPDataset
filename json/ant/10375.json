[{"authorTime":"2017-01-11 03:55:45","codes":[{"authorDate":"2015-04-22 03:36:07","commitOrder":28,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        final Vector<TarFileSet> savedFileSets = (Vector<TarFileSet>) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                final TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for(final TarFileSet tfs : filesets) {\n                upToDate &= check(tfs);\n            }\n            for(final ResourceCollection rcol : resourceCollections) {\n                upToDate &= check(rcol);\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            final File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory()\n                && !(parent.mkdirs() || parent.isDirectory())) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))),\n                    encoding);\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (final TarFileSet tfs : filesets) {\n                    tar(tfs, tOut);\n                }\n                for (final ResourceCollection rcol : resourceCollections) {\n                    tar(rcol, tOut);\n                }\n            } catch (final IOException ioe) {\n                final String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2015-04-22 03:36:07","endLine":358,"groupId":"5117","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/97/547022d5b3bce42c32b5d83f4e0b845f724512.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        final Vector<TarFileSet> savedFileSets = (Vector<TarFileSet>) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                final TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for(final TarFileSet tfs : filesets) {\n                upToDate &= check(tfs);\n            }\n            for(final ResourceCollection rcol : resourceCollections) {\n                upToDate &= check(rcol);\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            final File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory()\n                && !(parent.mkdirs() || parent.isDirectory())) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))),\n                    encoding);\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (final TarFileSet tfs : filesets) {\n                    tar(tfs, tOut);\n                }\n                for (final ResourceCollection rcol : resourceCollections) {\n                    tar(rcol, tOut);\n                }\n            } catch (final IOException ioe) {\n                final String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"NB"},{"authorDate":"2017-01-11 03:55:45","commitOrder":28,"curCode":"    protected void pack() {\n        XZOutputStream zOut = null;\n        try {\n            zOut = new XZOutputStream(new FileOutputStream(zipFile),\n                                      new LZMA2Options());\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating xz \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","date":"2017-01-11 03:55:45","endLine":56,"groupId":"2127","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/d8/8f91052da9ee9c830e01287d160d37bfb2e95a.src","preCode":"    protected void pack() {\n        XZOutputStream zOut = null;\n        try {\n            zOut = new XZOutputStream(new FileOutputStream(zipFile),\n                                      new LZMA2Options());\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating xz \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/xz/Xz.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"}],"commitId":"d1e64cc7fe5eef61094dbb643096cada4b880f72","commitMessage":"@@@infrastructure for XZ compression support - PR 60350\n","date":"2017-01-11 03:55:45","modifiedFileCount":"0","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2017-04-12 12:54:09","codes":[{"authorDate":"2017-04-12 12:54:09","commitOrder":29,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        final Vector<TarFileSet> savedFileSets = (Vector<TarFileSet>) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                final TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for(final TarFileSet tfs : filesets) {\n                upToDate &= check(tfs);\n            }\n            for(final ResourceCollection rcol : resourceCollections) {\n                upToDate &= check(rcol);\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            final File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory()\n                && !(parent.mkdirs() || parent.isDirectory())) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            Files.newOutputStream(tarFile.toPath()))),\n                    encoding);\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (final TarFileSet tfs : filesets) {\n                    tar(tfs, tOut);\n                }\n                for (final ResourceCollection rcol : resourceCollections) {\n                    tar(rcol, tOut);\n                }\n            } catch (final IOException ioe) {\n                final String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2017-04-12 12:54:09","endLine":361,"groupId":"5117","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/65/3cc5b37e138775f700ab7a095ea4d43caa5b21.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        final Vector<TarFileSet> savedFileSets = (Vector<TarFileSet>) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                final TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for(final TarFileSet tfs : filesets) {\n                upToDate &= check(tfs);\n            }\n            for(final ResourceCollection rcol : resourceCollections) {\n                upToDate &= check(rcol);\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            final File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory()\n                && !(parent.mkdirs() || parent.isDirectory())) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))),\n                    encoding);\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (final TarFileSet tfs : filesets) {\n                    tar(tfs, tOut);\n                }\n                for (final ResourceCollection rcol : resourceCollections) {\n                    tar(rcol, tOut);\n                }\n            } catch (final IOException ioe) {\n                final String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2017-04-12 12:54:09","commitOrder":29,"curCode":"    protected void pack() {\n        XZOutputStream zOut = null;\n        try {\n            zOut = new XZOutputStream(Files.newOutputStream(zipFile.toPath()),\n                                      new LZMA2Options());\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating xz \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","date":"2017-04-12 12:54:09","endLine":56,"groupId":"2127","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/76/031921ca6681a8c82a2b1a1f4ab6e821564e82.src","preCode":"    protected void pack() {\n        XZOutputStream zOut = null;\n        try {\n            zOut = new XZOutputStream(new FileOutputStream(zipFile),\n                                      new LZMA2Options());\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating xz \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/xz/Xz.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"af74d1f6b882cef5f4167d972638ad886d12d58c","commitMessage":"@@@reduce GC pressure by replacing File(In|Out)putStream\n","date":"2017-04-12 12:54:09","modifiedFileCount":"84","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":30,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        final Vector<TarFileSet> savedFileSets = new Vector<>(filesets);\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                final TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.isEmpty() && resourceCollections.isEmpty()) {\n                throw new BuildException(\n                    \"You must supply either a basedir attribute or some nested resource collections.\",\n                    getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (final TarFileSet tfs : filesets) {\n                upToDate &= check(tfs);\n            }\n            for (final ResourceCollection rcol : resourceCollections) {\n                upToDate &= check(rcol);\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            final File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory()\n                && !(parent.mkdirs() || parent.isDirectory())) {\n                throw new BuildException(\n                    \"Failed to create missing parent directory for %s\",\n                    tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            try (TarOutputStream tOut = new TarOutputStream(\n                compression.compress(new BufferedOutputStream(\n                    Files.newOutputStream(tarFile.toPath()))),\n                encoding)) {\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (final TarFileSet tfs : filesets) {\n                    tar(tfs, tOut);\n                }\n                for (final ResourceCollection rcol : resourceCollections) {\n                    tar(rcol, tOut);\n                }\n            } catch (final IOException ioe) {\n                final String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":353,"groupId":"10375","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f5/1a056d801bf0fb8d45e6700d90a7995d02e52a.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        final Vector<TarFileSet> savedFileSets = (Vector<TarFileSet>) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                final TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for(final TarFileSet tfs : filesets) {\n                upToDate &= check(tfs);\n            }\n            for(final ResourceCollection rcol : resourceCollections) {\n                upToDate &= check(rcol);\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            final File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory()\n                && !(parent.mkdirs() || parent.isDirectory())) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            Files.newOutputStream(tarFile.toPath()))),\n                    encoding);\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (final TarFileSet tfs : filesets) {\n                    tar(tfs, tOut);\n                }\n                for (final ResourceCollection rcol : resourceCollections) {\n                    tar(rcol, tOut);\n                }\n            } catch (final IOException ioe) {\n                final String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"},{"authorDate":"2017-04-13 23:15:22","commitOrder":30,"curCode":"    protected void pack() {\n        try (XZOutputStream zOut = new XZOutputStream(\n            Files.newOutputStream(zipFile.toPath()), new LZMA2Options())) {\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating xz \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":51,"groupId":"10375","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/58/cff61c959f7b615dfb0153901b540cc6b49698.src","preCode":"    protected void pack() {\n        XZOutputStream zOut = null;\n        try {\n            zOut = new XZOutputStream(Files.newOutputStream(zipFile.toPath()),\n                                      new LZMA2Options());\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating xz \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/xz/Xz.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"b7d1e9bde44cb8e5233d6e70bb96e14cbb2f3e2d","commitMessage":"@@@java 5-8\n","date":"2017-04-13 23:15:22","modifiedFileCount":"609","status":"M","submitter":"Matt Benson"}]
