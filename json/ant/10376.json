[{"authorTime":"2001-11-15 17:14:10","codes":[{"authorDate":"2001-05-03 21:10:30","commitOrder":14,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\", \n                                     location);\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\", \n                                     location);\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\", \n                                     location);\n        }\n\n        if (baseDir != null) {\n            if (!baseDir.exists()) {\n                throw new BuildException(\"basedir does not exist!\", location);\n            }\n            \n            \r\n            TarFileSet mainFileSet = new TarFileSet(fileset);\n            mainFileSet.setDir(baseDir);\n            filesets.addElement(mainFileSet);\n        }\n        \n        if (filesets.size() == 0) {\n            throw new BuildException(\"You must supply either a basdir attribute or some nested filesets.\", \n                                     location);\n        }\n        \n        \r\n        \r\n        boolean upToDate = true;\n        for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n            TarFileSet fs = (TarFileSet)e.nextElement();\n            String[] files = fs.getFiles(project);\n            \n            if (!archiveIsUpToDate(files)) {\n                upToDate = false;\n            }\n            \n            for (int i = 0; i < files.length; ++i) {\n                if (tarFile.equals(new File(fs.getDir(project), files[i]))) {\n                    throw new BuildException(\"A tar file cannot include itself\", location);\n                }\n            }\n        }\n\n        if (upToDate) {\n            log(\"Nothing to do: \"+tarFile.getAbsolutePath()+\" is up to date.\",\n                Project.MSG_INFO);\n            return;\n        }\n\n        log(\"Building tar: \"+ tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n        TarOutputStream tOut = null;\n        try {\n            tOut = new TarOutputStream(new FileOutputStream(tarFile));\n            tOut.setDebug(true);\n            if (longFileMode.equalsIgnoreCase(TRUNCATE)) {\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n            }\n            else if (longFileMode.equalsIgnoreCase(FAIL) ||\n                     longFileMode.equalsIgnoreCase(OMIT)) {\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n            }\n            else {\n                \r\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n            }\n        \n            longWarningGiven = false;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet)e.nextElement();\n                String[] files = fs.getFiles(project);\n                for (int i = 0; i < files.length; i++) {\n                    File f = new File(fs.getDir(project), files[i]);\n                    String name = files[i].replace(File.separatorChar,'/');\n                    tarFile(f, tOut, name, fs);\n                }\n            }\n        } catch (IOException ioe) {\n            String msg = \"Problem creating TAR: \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (tOut != null) {\n                try {\n                    \r\n                    tOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","date":"2001-05-03 21:10:30","endLine":232,"groupId":"8721","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/5b/4a80ef43d526d03bc0b65a2461847ad2b28f32.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\", \n                                     location);\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\", \n                                     location);\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\", \n                                     location);\n        }\n\n        if (baseDir != null) {\n            if (!baseDir.exists()) {\n                throw new BuildException(\"basedir does not exist!\", location);\n            }\n            \n            \r\n            TarFileSet mainFileSet = new TarFileSet(fileset);\n            mainFileSet.setDir(baseDir);\n            filesets.addElement(mainFileSet);\n        }\n        \n        if (filesets.size() == 0) {\n            throw new BuildException(\"You must supply either a basdir attribute or some nested filesets.\", \n                                     location);\n        }\n        \n        \r\n        \r\n        boolean upToDate = true;\n        for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n            TarFileSet fs = (TarFileSet)e.nextElement();\n            String[] files = fs.getFiles(project);\n            \n            if (!archiveIsUpToDate(files)) {\n                upToDate = false;\n            }\n            \n            for (int i = 0; i < files.length; ++i) {\n                if (tarFile.equals(new File(fs.getDir(project), files[i]))) {\n                    throw new BuildException(\"A tar file cannot include itself\", location);\n                }\n            }\n        }\n\n        if (upToDate) {\n            log(\"Nothing to do: \"+tarFile.getAbsolutePath()+\" is up to date.\",\n                Project.MSG_INFO);\n            return;\n        }\n\n        log(\"Building tar: \"+ tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n        TarOutputStream tOut = null;\n        try {\n            tOut = new TarOutputStream(new FileOutputStream(tarFile));\n            tOut.setDebug(true);\n            if (longFileMode.equalsIgnoreCase(TRUNCATE)) {\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n            }\n            else if (longFileMode.equalsIgnoreCase(FAIL) ||\n                     longFileMode.equalsIgnoreCase(OMIT)) {\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n            }\n            else {\n                \r\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n            }\n        \n            longWarningGiven = false;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet)e.nextElement();\n                String[] files = fs.getFiles(project);\n                for (int i = 0; i < files.length; i++) {\n                    File f = new File(fs.getDir(project), files[i]);\n                    String name = files[i].replace(File.separatorChar,'/');\n                    tarFile(f, tOut, name, fs);\n                }\n            }\n        } catch (IOException ioe) {\n            String msg = \"Problem creating TAR: \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (tOut != null) {\n                try {\n                    \r\n                    tOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"NB"},{"authorDate":"2001-11-15 17:14:10","commitOrder":14,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","date":"2001-11-15 17:14:10","endLine":91,"groupId":"7929","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7d/0bc468a803cb5a507a2fca81c5334e5d39eb77.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"c657b5ef73c02bd2d60b146fcf1d80cafa977e62","commitMessage":"@@@\nHere are two new ant tasks - BZip2 and BUnzip2. ?These\ntwo tasks use the BZip2 compression algorithm (Visit:\nhttp://sourceware.cygnus.com/bzip2/?for more info.) for\npacking and unpacking.\n\nThese tasks resemble GZip and GUnzip tasks in input. \ninput validation.  etc. ?Hence.  I refactored GZip and\nGUnzip tasks as well so that the tasks GZip and BZip2\nextend from a common base class named Pack.  and\nGUnzip and BUnzip2 extend from a common base class named\nUnpack. ?This lays the foundation for creating more Pack\ntasks based on different algorithms like lzop.  etc. in\nthe future.\n\nThe BZip2 and BUnzip2 tasks depend upon 4 classes:\nBZip2Constants.java\nCBZip2InputStream.java\nCBZip2OutputStream.java\nCRC.java\n\nKeiron Liddle (keiron@aftexsw.com) has graciously\naccepted to contribute the above code files he has\nauthored.  under ASF license - many thanks to him. ?I\nhave packaged them under org.apache.tools.bzip2. \nmimicking the package naming style that has been used\nfor zip and tar tools we already have. ?I have also\ngiven proper credits to him in the code. ?Perhaps.  this\nneeds to exist under jakarta-commons.  as Stefan had\nsuggested.  but till then...\n\nSubmitted by: \"Magesh Umasankar\" <umagesh@rediffmail.com>\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@269919 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2001-11-15 17:14:10","modifiedFileCount":"2","status":"M","submitter":"Peter Donald"},{"authorTime":"2001-11-15 17:14:10","codes":[{"authorDate":"2001-12-05 09:15:57","commitOrder":15,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     location);\n        }\n\n        if (baseDir != null) {\n            if (!baseDir.exists()) {\n                throw new BuildException(\"basedir does not exist!\", location);\n            }\n\n            \r\n            TarFileSet mainFileSet = new TarFileSet(fileset);\n            mainFileSet.setDir(baseDir);\n            filesets.addElement(mainFileSet);\n        }\n\n        if (filesets.size() == 0) {\n            throw new BuildException(\"You must supply either a basdir attribute or some nested filesets.\",\n                                     location);\n        }\n\n        \r\n        \r\n        boolean upToDate = true;\n        for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n            TarFileSet fs = (TarFileSet)e.nextElement();\n            String[] files = fs.getFiles(project);\n\n            if (!archiveIsUpToDate(files)) {\n                upToDate = false;\n            }\n\n            for (int i = 0; i < files.length; ++i) {\n                if (tarFile.equals(new File(fs.getDir(project), files[i]))) {\n                    throw new BuildException(\"A tar file cannot include itself\", location);\n                }\n            }\n        }\n\n        if (upToDate) {\n            log(\"Nothing to do: \"+tarFile.getAbsolutePath()+\" is up to date.\",\n                Project.MSG_INFO);\n            return;\n        }\n\n        log(\"Building tar: \"+ tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n        TarOutputStream tOut = null;\n        try {\n            tOut = new TarOutputStream(new FileOutputStream(tarFile));\n            tOut.setDebug(true);\n            if (longFileMode.isTruncateMode()) {\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n            }\n            else if (longFileMode.isFailMode() ||\n                     longFileMode.isOmitMode()) {\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n            }\n            else {\n                \r\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n            }\n\n            longWarningGiven = false;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet)e.nextElement();\n                String[] files = fs.getFiles(project);\n                for (int i = 0; i < files.length; i++) {\n                    File f = new File(fs.getDir(project), files[i]);\n                    String name = files[i].replace(File.separatorChar,'/');\n                    tarFile(f, tOut, name, fs);\n                }\n            }\n        } catch (IOException ioe) {\n            String msg = \"Problem creating TAR: \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (tOut != null) {\n                try {\n                    \r\n                    tOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","date":"2001-12-05 09:15:57","endLine":275,"groupId":"8721","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/36/0592d03c9bf04f63906033dd0b7574f0f259c6.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\", \n                                     location);\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\", \n                                     location);\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\", \n                                     location);\n        }\n\n        if (baseDir != null) {\n            if (!baseDir.exists()) {\n                throw new BuildException(\"basedir does not exist!\", location);\n            }\n            \n            \r\n            TarFileSet mainFileSet = new TarFileSet(fileset);\n            mainFileSet.setDir(baseDir);\n            filesets.addElement(mainFileSet);\n        }\n        \n        if (filesets.size() == 0) {\n            throw new BuildException(\"You must supply either a basdir attribute or some nested filesets.\", \n                                     location);\n        }\n        \n        \r\n        \r\n        boolean upToDate = true;\n        for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n            TarFileSet fs = (TarFileSet)e.nextElement();\n            String[] files = fs.getFiles(project);\n            \n            if (!archiveIsUpToDate(files)) {\n                upToDate = false;\n            }\n            \n            for (int i = 0; i < files.length; ++i) {\n                if (tarFile.equals(new File(fs.getDir(project), files[i]))) {\n                    throw new BuildException(\"A tar file cannot include itself\", location);\n                }\n            }\n        }\n\n        if (upToDate) {\n            log(\"Nothing to do: \"+tarFile.getAbsolutePath()+\" is up to date.\",\n                Project.MSG_INFO);\n            return;\n        }\n\n        log(\"Building tar: \"+ tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n        TarOutputStream tOut = null;\n        try {\n            tOut = new TarOutputStream(new FileOutputStream(tarFile));\n            tOut.setDebug(true);\n            if (longFileMode.equalsIgnoreCase(TRUNCATE)) {\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n            }\n            else if (longFileMode.equalsIgnoreCase(FAIL) ||\n                     longFileMode.equalsIgnoreCase(OMIT)) {\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n            }\n            else {\n                \r\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n            }\n        \n            longWarningGiven = false;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet)e.nextElement();\n                String[] files = fs.getFiles(project);\n                for (int i = 0; i < files.length; i++) {\n                    File f = new File(fs.getDir(project), files[i]);\n                    String name = files[i].replace(File.separatorChar,'/');\n                    tarFile(f, tOut, name, fs);\n                }\n            }\n        } catch (IOException ioe) {\n            String msg = \"Problem creating TAR: \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (tOut != null) {\n                try {\n                    \r\n                    tOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"},{"authorDate":"2001-11-15 17:14:10","commitOrder":15,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","date":"2001-11-15 17:14:10","endLine":91,"groupId":"7929","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7d/0bc468a803cb5a507a2fca81c5334e5d39eb77.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"e503ebd4c7a3603efb6119fec72b3bbe3e9a4f58","commitMessage":"@@@setFoo(String) replaced with setFoo(ExtendedEnumeratedAttribute) for certain attributes of these tasks:\nAvailable.java\nTar.java\nTstamp.java\nsetFoo(String) has been deprecated for the affected attributes.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@270071 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2001-12-05 09:15:57","modifiedFileCount":"5","status":"M","submitter":"Magesh Umasankar"},{"authorTime":"2001-11-15 17:14:10","codes":[{"authorDate":"2002-02-05 04:44:16","commitOrder":16,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     location);\n        }\n\n        if (baseDir != null) {\n            if (!baseDir.exists()) {\n                throw new BuildException(\"basedir does not exist!\", location);\n            }\n\n            \r\n            TarFileSet mainFileSet = new TarFileSet(fileset);\n            mainFileSet.setDir(baseDir);\n            filesets.addElement(mainFileSet);\n        }\n\n        if (filesets.size() == 0) {\n            throw new BuildException(\"You must supply either a basdir attribute or some nested filesets.\",\n                                     location);\n        }\n\n        \r\n        \r\n        boolean upToDate = true;\n        for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n            TarFileSet fs = (TarFileSet)e.nextElement();\n            String[] files = fs.getFiles(project);\n\n            if (!archiveIsUpToDate(files)) {\n                upToDate = false;\n            }\n\n            for (int i = 0; i < files.length; ++i) {\n                if (tarFile.equals(new File(fs.getDir(project), files[i]))) {\n                    throw new BuildException(\"A tar file cannot include itself\", location);\n                }\n            }\n        }\n\n        if (upToDate) {\n            log(\"Nothing to do: \"+tarFile.getAbsolutePath()+\" is up to date.\",\n                Project.MSG_INFO);\n            return;\n        }\n\n        log(\"Building tar: \"+ tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n        TarOutputStream tOut = null;\n        try {\n            tOut = new TarOutputStream(new FileOutputStream(tarFile));\n            tOut.setDebug(true);\n            if (longFileMode.isTruncateMode()) {\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n            }\n            else if (longFileMode.isFailMode() ||\n                     longFileMode.isOmitMode()) {\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n            }\n            else {\n                \r\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n            }\n\n            longWarningGiven = false;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet)e.nextElement();\n                String[] files = fs.getFiles(project);\n                if (files.length > 1 && fs.getFullpath().length() > 0) {\n                    throw new BuildException(\"fullpath attribute may only be specified for \" +\n                                             \"filesets that specify a single file.\");\n                }\n                for (int i = 0; i < files.length; i++) {\n                    File f = new File(fs.getDir(project), files[i]);\n                    String name = files[i].replace(File.separatorChar,'/');\n                    tarFile(f, tOut, name, fs);\n                }\n            }\n        } catch (IOException ioe) {\n            String msg = \"Problem creating TAR: \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (tOut != null) {\n                try {\n                    \r\n                    tOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","date":"2002-02-05 04:44:16","endLine":290,"groupId":"8721","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/11/1812c924a0ed7b1ab616e9964ec1f63d901fc0.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     location);\n        }\n\n        if (baseDir != null) {\n            if (!baseDir.exists()) {\n                throw new BuildException(\"basedir does not exist!\", location);\n            }\n\n            \r\n            TarFileSet mainFileSet = new TarFileSet(fileset);\n            mainFileSet.setDir(baseDir);\n            filesets.addElement(mainFileSet);\n        }\n\n        if (filesets.size() == 0) {\n            throw new BuildException(\"You must supply either a basdir attribute or some nested filesets.\",\n                                     location);\n        }\n\n        \r\n        \r\n        boolean upToDate = true;\n        for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n            TarFileSet fs = (TarFileSet)e.nextElement();\n            String[] files = fs.getFiles(project);\n\n            if (!archiveIsUpToDate(files)) {\n                upToDate = false;\n            }\n\n            for (int i = 0; i < files.length; ++i) {\n                if (tarFile.equals(new File(fs.getDir(project), files[i]))) {\n                    throw new BuildException(\"A tar file cannot include itself\", location);\n                }\n            }\n        }\n\n        if (upToDate) {\n            log(\"Nothing to do: \"+tarFile.getAbsolutePath()+\" is up to date.\",\n                Project.MSG_INFO);\n            return;\n        }\n\n        log(\"Building tar: \"+ tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n        TarOutputStream tOut = null;\n        try {\n            tOut = new TarOutputStream(new FileOutputStream(tarFile));\n            tOut.setDebug(true);\n            if (longFileMode.isTruncateMode()) {\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n            }\n            else if (longFileMode.isFailMode() ||\n                     longFileMode.isOmitMode()) {\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n            }\n            else {\n                \r\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n            }\n\n            longWarningGiven = false;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet)e.nextElement();\n                String[] files = fs.getFiles(project);\n                for (int i = 0; i < files.length; i++) {\n                    File f = new File(fs.getDir(project), files[i]);\n                    String name = files[i].replace(File.separatorChar,'/');\n                    tarFile(f, tOut, name, fs);\n                }\n            }\n        } catch (IOException ioe) {\n            String msg = \"Problem creating TAR: \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (tOut != null) {\n                try {\n                    \r\n                    tOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"},{"authorDate":"2001-11-15 17:14:10","commitOrder":16,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","date":"2001-11-15 17:14:10","endLine":91,"groupId":"7929","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7d/0bc468a803cb5a507a2fca81c5334e5d39eb77.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"8fa296bb51a8598af096eddbae69d1886c7b1ea7","commitMessage":"@@@New attributes to tarfileset to allow equivalent of tar -P option\n\nPR: 5874\n\nSubmitted by: Stefan Heimann (mail@stefanheimann.net)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@271139 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2002-02-05 04:44:16","modifiedFileCount":"2","status":"M","submitter":"Magesh Umasankar"},{"authorTime":"2001-11-15 17:14:10","codes":[{"authorDate":"2002-04-12 21:32:27","commitOrder":17,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     location);\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\", \n                                             location);\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested filesets.\",\n                                         location);\n            }\n            \n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet)e.nextElement();\n                String[] files = fs.getFiles(project);\n\n                if (!archiveIsUpToDate(files)) {\n                    upToDate = false;\n                }\n\n                for (int i = 0; i < files.length; ++i) {\n                    if (tarFile.equals(new File(fs.getDir(project), \n                                                files[i]))) {\n                        throw new BuildException(\"A tar file cannot include \"\n                                                 + \"itself\", location);\n                    }\n                }\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \"+tarFile.getAbsolutePath()\n                    +\" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \"+ tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(new FileOutputStream(tarFile));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                }\n                else if (longFileMode.isFailMode() ||\n                         longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                }\n                else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements(); \n                     e.hasMoreElements();) {\n                    TarFileSet fs = (TarFileSet)e.nextElement();\n                    String[] files = fs.getFiles(project);\n                    if (files.length > 1 && fs.getFullpath().length() > 0) {\n                        throw new BuildException(\"fullpath attribute may only \"\n                                                 + \"be specified for \" \n                                                 + \"filesets that specify a \"\n                                                 + \"single file.\");\n                    }\n                    for (int i = 0; i < files.length; i++) {\n                        File f = new File(fs.getDir(project), files[i]);\n                        String name = files[i].replace(File.separatorChar,'/');\n                        tarFile(f, tOut, name, fs);\n                    }\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, location);\n            } finally {\n                if (tOut != null) {\n                    try {\n                        \r\n                        tOut.close();\n                    }\n                    catch (IOException e) {}\n                }\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2002-04-12 21:32:27","endLine":306,"groupId":"3542","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/d9/8fd211101eddbe9a9268fb17a87d4bfa539a16.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     location);\n        }\n\n        if (baseDir != null) {\n            if (!baseDir.exists()) {\n                throw new BuildException(\"basedir does not exist!\", location);\n            }\n\n            \r\n            TarFileSet mainFileSet = new TarFileSet(fileset);\n            mainFileSet.setDir(baseDir);\n            filesets.addElement(mainFileSet);\n        }\n\n        if (filesets.size() == 0) {\n            throw new BuildException(\"You must supply either a basdir attribute or some nested filesets.\",\n                                     location);\n        }\n\n        \r\n        \r\n        boolean upToDate = true;\n        for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n            TarFileSet fs = (TarFileSet)e.nextElement();\n            String[] files = fs.getFiles(project);\n\n            if (!archiveIsUpToDate(files)) {\n                upToDate = false;\n            }\n\n            for (int i = 0; i < files.length; ++i) {\n                if (tarFile.equals(new File(fs.getDir(project), files[i]))) {\n                    throw new BuildException(\"A tar file cannot include itself\", location);\n                }\n            }\n        }\n\n        if (upToDate) {\n            log(\"Nothing to do: \"+tarFile.getAbsolutePath()+\" is up to date.\",\n                Project.MSG_INFO);\n            return;\n        }\n\n        log(\"Building tar: \"+ tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n        TarOutputStream tOut = null;\n        try {\n            tOut = new TarOutputStream(new FileOutputStream(tarFile));\n            tOut.setDebug(true);\n            if (longFileMode.isTruncateMode()) {\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n            }\n            else if (longFileMode.isFailMode() ||\n                     longFileMode.isOmitMode()) {\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n            }\n            else {\n                \r\n                tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n            }\n\n            longWarningGiven = false;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet)e.nextElement();\n                String[] files = fs.getFiles(project);\n                if (files.length > 1 && fs.getFullpath().length() > 0) {\n                    throw new BuildException(\"fullpath attribute may only be specified for \" +\n                                             \"filesets that specify a single file.\");\n                }\n                for (int i = 0; i < files.length; i++) {\n                    File f = new File(fs.getDir(project), files[i]);\n                    String name = files[i].replace(File.separatorChar,'/');\n                    tarFile(f, tOut, name, fs);\n                }\n            }\n        } catch (IOException ioe) {\n            String msg = \"Problem creating TAR: \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (tOut != null) {\n                try {\n                    \r\n                    tOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2001-11-15 17:14:10","commitOrder":17,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","date":"2001-11-15 17:14:10","endLine":91,"groupId":"7929","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7d/0bc468a803cb5a507a2fca81c5334e5d39eb77.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"7efc06af49ac85c35b17dff638c8f28ca73eba78","commitMessage":"@@@Make sure <tar> resets its state.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@272405 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2002-04-12 21:32:27","modifiedFileCount":"3","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2001-11-15 17:14:10","codes":[{"authorDate":"2002-04-24 11:09:06","commitOrder":18,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     location);\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             location);\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested filesets.\",\n                                         location);\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet) e.nextElement();\n                String[] files = fs.getFiles(project);\n\n                if (!archiveIsUpToDate(files)) {\n                    upToDate = false;\n                }\n\n                for (int i = 0; i < files.length; ++i) {\n                    if (tarFile.equals(new File(fs.getDir(project),\n                                                files[i]))) {\n                        throw new BuildException(\"A tar file cannot include \"\n                                                 + \"itself\", location);\n                    }\n                }\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode() ||\n                         longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    TarFileSet fs = (TarFileSet) e.nextElement();\n                    String[] files = fs.getFiles(project);\n                    if (files.length > 1 && fs.getFullpath().length() > 0) {\n                        throw new BuildException(\"fullpath attribute may only \"\n                                                 + \"be specified for \"\n                                                 + \"filesets that specify a \"\n                                                 + \"single file.\");\n                    }\n                    for (int i = 0; i < files.length; i++) {\n                        File f = new File(fs.getDir(project), files[i]);\n                        String name = files[i].replace(File.separatorChar, '/');\n                        tarFile(f, tOut, name, fs);\n                    }\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, location);\n            } finally {\n                if (tOut != null) {\n                    try {\n                        \r\n                        tOut.close();\n                    } catch (IOException e) {}\n                }\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2002-04-24 11:09:06","endLine":326,"groupId":"7813","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/3f/01ae1476440215aec98119ff2e4175d33d8bac.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     location);\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\", \n                                             location);\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested filesets.\",\n                                         location);\n            }\n            \n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet) e.nextElement();\n                String[] files = fs.getFiles(project);\n\n                if (!archiveIsUpToDate(files)) {\n                    upToDate = false;\n                }\n\n                for (int i = 0; i < files.length; ++i) {\n                    if (tarFile.equals(new File(fs.getDir(project), \n                                                files[i]))) {\n                        throw new BuildException(\"A tar file cannot include \"\n                                                 + \"itself\", location);\n                    }\n                }\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(new FileOutputStream(tarFile));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode() ||\n                         longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements(); \n                     e.hasMoreElements();) {\n                    TarFileSet fs = (TarFileSet) e.nextElement();\n                    String[] files = fs.getFiles(project);\n                    if (files.length > 1 && fs.getFullpath().length() > 0) {\n                        throw new BuildException(\"fullpath attribute may only \"\n                                                 + \"be specified for \" \n                                                 + \"filesets that specify a \"\n                                                 + \"single file.\");\n                    }\n                    for (int i = 0; i < files.length; i++) {\n                        File f = new File(fs.getDir(project), files[i]);\n                        String name = files[i].replace(File.separatorChar, '/');\n                        tarFile(f, tOut, name, fs);\n                    }\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, location);\n            } finally {\n                if (tOut != null) {\n                    try {\n                        \r\n                        tOut.close();\n                    } catch (IOException e) {}\n                }\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2001-11-15 17:14:10","commitOrder":18,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","date":"2001-11-15 17:14:10","endLine":91,"groupId":"7929","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7d/0bc468a803cb5a507a2fca81c5334e5d39eb77.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"ccef0f89820b6a6613fd587d00c6bab48e6f45ff","commitMessage":"@@@Implement and document a compression attribute for the tar and untar tasks.\n\nSubmitted by: Curt Arnold <carnold@houston.rr.com>\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@272562 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2002-04-24 11:09:06","modifiedFileCount":"5","status":"M","submitter":"Magesh Umasankar"},{"authorTime":"2001-11-15 17:14:10","codes":[{"authorDate":"2002-07-23 15:54:56","commitOrder":19,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     location);\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             location);\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested filesets.\",\n                                         location);\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet) e.nextElement();\n                String[] files = fs.getFiles(getProject());\n\n                if (!archiveIsUpToDate(files)) {\n                    upToDate = false;\n                }\n\n                for (int i = 0; i < files.length; ++i) {\n                    if (tarFile.equals(new File(fs.getDir(getProject()),\n                                                files[i]))) {\n                        throw new BuildException(\"A tar file cannot include \"\n                                                 + \"itself\", location);\n                    }\n                }\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode() ||\n                         longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    TarFileSet fs = (TarFileSet) e.nextElement();\n                    String[] files = fs.getFiles(getProject());\n                    if (files.length > 1 && fs.getFullpath().length() > 0) {\n                        throw new BuildException(\"fullpath attribute may only \"\n                                                 + \"be specified for \"\n                                                 + \"filesets that specify a \"\n                                                 + \"single file.\");\n                    }\n                    for (int i = 0; i < files.length; i++) {\n                        File f = new File(fs.getDir(getProject()), files[i]);\n                        String name = files[i].replace(File.separatorChar, '/');\n                        tarFile(f, tOut, name, fs);\n                    }\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, location);\n            } finally {\n                if (tOut != null) {\n                    try {\n                        \r\n                        tOut.close();\n                    } catch (IOException e) {}\n                }\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2002-07-23 15:54:56","endLine":339,"groupId":"6087","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/6a/a84eca91e99e7d086821fe844ed1be6c3a51cc.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     location);\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             location);\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested filesets.\",\n                                         location);\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet) e.nextElement();\n                String[] files = fs.getFiles(project);\n\n                if (!archiveIsUpToDate(files)) {\n                    upToDate = false;\n                }\n\n                for (int i = 0; i < files.length; ++i) {\n                    if (tarFile.equals(new File(fs.getDir(project),\n                                                files[i]))) {\n                        throw new BuildException(\"A tar file cannot include \"\n                                                 + \"itself\", location);\n                    }\n                }\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode() ||\n                         longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    TarFileSet fs = (TarFileSet) e.nextElement();\n                    String[] files = fs.getFiles(project);\n                    if (files.length > 1 && fs.getFullpath().length() > 0) {\n                        throw new BuildException(\"fullpath attribute may only \"\n                                                 + \"be specified for \"\n                                                 + \"filesets that specify a \"\n                                                 + \"single file.\");\n                    }\n                    for (int i = 0; i < files.length; i++) {\n                        File f = new File(fs.getDir(project), files[i]);\n                        String name = files[i].replace(File.separatorChar, '/');\n                        tarFile(f, tOut, name, fs);\n                    }\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, location);\n            } finally {\n                if (tOut != null) {\n                    try {\n                        \r\n                        tOut.close();\n                    } catch (IOException e) {}\n                }\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2001-11-15 17:14:10","commitOrder":19,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","date":"2001-11-15 17:14:10","endLine":91,"groupId":"7929","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/7d/0bc468a803cb5a507a2fca81c5334e5d39eb77.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                }\n                catch (IOException e) {}\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"28b68ab7d0689dbc35dbdf26d2308786549b8985","commitMessage":"@@@Encapsulate usage of project object rather than allowing objects 7 subclasses acessing a protected variable of their super super super .... class.\n\nDeprecated the variable so that that anyone directly referencing variable will get warning and suggestion to use the accessor.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@273155 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2002-07-23 15:54:56","modifiedFileCount":"106","status":"M","submitter":"Peter Donald"},{"authorTime":"2002-07-23 16:39:59","codes":[{"authorDate":"2002-07-23 16:39:59","commitOrder":20,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested filesets.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet) e.nextElement();\n                String[] files = fs.getFiles(getProject());\n\n                if (!archiveIsUpToDate(files)) {\n                    upToDate = false;\n                }\n\n                for (int i = 0; i < files.length; ++i) {\n                    if (tarFile.equals(new File(fs.getDir(getProject()),\n                                                files[i]))) {\n                        throw new BuildException(\"A tar file cannot include \"\n                                                 + \"itself\", getLocation());\n                    }\n                }\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode() ||\n                         longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    TarFileSet fs = (TarFileSet) e.nextElement();\n                    String[] files = fs.getFiles(getProject());\n                    if (files.length > 1 && fs.getFullpath().length() > 0) {\n                        throw new BuildException(\"fullpath attribute may only \"\n                                                 + \"be specified for \"\n                                                 + \"filesets that specify a \"\n                                                 + \"single file.\");\n                    }\n                    for (int i = 0; i < files.length; i++) {\n                        File f = new File(fs.getDir(getProject()), files[i]);\n                        String name = files[i].replace(File.separatorChar, '/');\n                        tarFile(f, tOut, name, fs);\n                    }\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                if (tOut != null) {\n                    try {\n                        \r\n                        tOut.close();\n                    } catch (IOException e) {}\n                }\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2002-07-23 16:39:59","endLine":339,"groupId":"6087","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/11/885248306e82cef556fff79d8698ac07ac2c95.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     location);\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     location);\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             location);\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested filesets.\",\n                                         location);\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet) e.nextElement();\n                String[] files = fs.getFiles(getProject());\n\n                if (!archiveIsUpToDate(files)) {\n                    upToDate = false;\n                }\n\n                for (int i = 0; i < files.length; ++i) {\n                    if (tarFile.equals(new File(fs.getDir(getProject()),\n                                                files[i]))) {\n                        throw new BuildException(\"A tar file cannot include \"\n                                                 + \"itself\", location);\n                    }\n                }\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode() ||\n                         longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    TarFileSet fs = (TarFileSet) e.nextElement();\n                    String[] files = fs.getFiles(getProject());\n                    if (files.length > 1 && fs.getFullpath().length() > 0) {\n                        throw new BuildException(\"fullpath attribute may only \"\n                                                 + \"be specified for \"\n                                                 + \"filesets that specify a \"\n                                                 + \"single file.\");\n                    }\n                    for (int i = 0; i < files.length; i++) {\n                        File f = new File(fs.getDir(getProject()), files[i]);\n                        String name = files[i].replace(File.separatorChar, '/');\n                        tarFile(f, tOut, name, fs);\n                    }\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, location);\n            } finally {\n                if (tOut != null) {\n                    try {\n                        \r\n                        tOut.close();\n                    } catch (IOException e) {}\n                }\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2002-07-23 16:39:59","commitOrder":20,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n    }\n","date":"2002-07-23 16:39:59","endLine":95,"groupId":"7929","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/6c/9c598903c2745ae693f6fb4f71c80efe70afcd.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, location);\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"f9121ee81e58e6cb4369a4e043e0a88cbfe3e503","commitMessage":"@@@Encapsulate some fields in Task and add some deprecation warnings to coresponding fields.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@273157 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2002-07-23 16:39:59","modifiedFileCount":"95","status":"M","submitter":"Peter Donald"},{"authorTime":"2002-07-23 16:39:59","codes":[{"authorDate":"2003-01-28 00:19:02","commitOrder":21,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested filesets.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet) e.nextElement();\n                String[] files = fs.getFiles(getProject());\n\n                if (!archiveIsUpToDate(files, fs.getDir(getProject()))) {\n                    upToDate = false;\n                }\n\n                for (int i = 0; i < files.length; ++i) {\n                    if (tarFile.equals(new File(fs.getDir(getProject()),\n                                                files[i]))) {\n                        throw new BuildException(\"A tar file cannot include \"\n                                                 + \"itself\", getLocation());\n                    }\n                }\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode() ||\n                         longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    TarFileSet fs = (TarFileSet) e.nextElement();\n                    String[] files = fs.getFiles(getProject());\n                    if (files.length > 1 && fs.getFullpath().length() > 0) {\n                        throw new BuildException(\"fullpath attribute may only \"\n                                                 + \"be specified for \"\n                                                 + \"filesets that specify a \"\n                                                 + \"single file.\");\n                    }\n                    for (int i = 0; i < files.length; i++) {\n                        File f = new File(fs.getDir(getProject()), files[i]);\n                        String name = files[i].replace(File.separatorChar, '/');\n                        tarFile(f, tOut, name, fs);\n                    }\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                if (tOut != null) {\n                    try {\n                        \r\n                        tOut.close();\n                    } catch (IOException e) {}\n                }\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2003-01-28 00:19:02","endLine":338,"groupId":"3440","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/58/0909f6945e19466d9d46b57f66c5f827ebfe40.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested filesets.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet) e.nextElement();\n                String[] files = fs.getFiles(getProject());\n\n                if (!archiveIsUpToDate(files)) {\n                    upToDate = false;\n                }\n\n                for (int i = 0; i < files.length; ++i) {\n                    if (tarFile.equals(new File(fs.getDir(getProject()),\n                                                files[i]))) {\n                        throw new BuildException(\"A tar file cannot include \"\n                                                 + \"itself\", getLocation());\n                    }\n                }\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode() ||\n                         longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    TarFileSet fs = (TarFileSet) e.nextElement();\n                    String[] files = fs.getFiles(getProject());\n                    if (files.length > 1 && fs.getFullpath().length() > 0) {\n                        throw new BuildException(\"fullpath attribute may only \"\n                                                 + \"be specified for \"\n                                                 + \"filesets that specify a \"\n                                                 + \"single file.\");\n                    }\n                    for (int i = 0; i < files.length; i++) {\n                        File f = new File(fs.getDir(getProject()), files[i]);\n                        String name = files[i].replace(File.separatorChar, '/');\n                        tarFile(f, tOut, name, fs);\n                    }\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                if (tOut != null) {\n                    try {\n                        \r\n                        tOut.close();\n                    } catch (IOException e) {}\n                }\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"},{"authorDate":"2002-07-23 16:39:59","commitOrder":21,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n    }\n","date":"2002-07-23 16:39:59","endLine":95,"groupId":"7929","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/6c/9c598903c2745ae693f6fb4f71c80efe70afcd.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"56d0c2f91a32a2067a6810bede57cbd0187c4190","commitMessage":"@@@<tar>'s up-to-date check didn't work for nested filesets.\n\nPR: 14995\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@273898 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2003-01-28 00:19:02","modifiedFileCount":"1","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2002-07-23 16:39:59","codes":[{"authorDate":"2005-10-20 02:40:56","commitOrder":22,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                upToDate &= check((TarFileSet) e.nextElement());\n            }\n            for (Enumeration e = resourceCollections.elements();\n                 e.hasMoreElements();) {\n                upToDate &= check((ResourceCollection) e.nextElement());\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    tar((TarFileSet) e.nextElement(), tOut);\n                }\n                for (Enumeration e = resourceCollections.elements();\n                     e.hasMoreElements();) {\n                    tar((ResourceCollection) e.nextElement(), tOut);\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                if (tOut != null) {\n                    try {\n                        \r\n                        tOut.close();\n                    } catch (IOException e) {\n                        \r\n                    }\n                }\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2005-10-20 02:40:56","endLine":313,"groupId":"10961","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/06/999d7ceac74fcbf665c099a30acc902c3fc608.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested filesets.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                TarFileSet fs = (TarFileSet) e.nextElement();\n                String[] files = fs.getFiles(getProject());\n\n                if (!archiveIsUpToDate(files, fs.getDir(getProject()))) {\n                    upToDate = false;\n                }\n\n                for (int i = 0; i < files.length; ++i) {\n                    if (tarFile.equals(new File(fs.getDir(getProject()),\n                                                files[i]))) {\n                        throw new BuildException(\"A tar file cannot include \"\n                                                 + \"itself\", getLocation());\n                    }\n                }\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    TarFileSet fs = (TarFileSet) e.nextElement();\n                    String[] files = fs.getFiles(getProject());\n                    if (files.length > 1 && fs.getFullpath().length() > 0) {\n                        throw new BuildException(\"fullpath attribute may only \"\n                                                 + \"be specified for \"\n                                                 + \"filesets that specify a \"\n                                                 + \"single file.\");\n                    }\n                    for (int i = 0; i < files.length; i++) {\n                        File f = new File(fs.getDir(getProject()), files[i]);\n                        String name = files[i].replace(File.separatorChar, '/');\n                        tarFile(f, tOut, name, fs);\n                    }\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                if (tOut != null) {\n                    try {\n                        \r\n                        tOut.close();\n                    } catch (IOException e) {\n                        \r\n                    }\n                }\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2002-07-23 16:39:59","commitOrder":22,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n    }\n","date":"2002-07-23 16:39:59","endLine":95,"groupId":"7929","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/6c/9c598903c2745ae693f6fb4f71c80efe70afcd.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"b5fcf10604f56a8061d10f332570342b34cc7a9d","commitMessage":"@@@add resource collection support to tar\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@326643 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2005-10-20 02:40:56","modifiedFileCount":"8","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2005-11-15 16:31:19","codes":[{"authorDate":"2005-10-20 02:40:56","commitOrder":23,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                upToDate &= check((TarFileSet) e.nextElement());\n            }\n            for (Enumeration e = resourceCollections.elements();\n                 e.hasMoreElements();) {\n                upToDate &= check((ResourceCollection) e.nextElement());\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    tar((TarFileSet) e.nextElement(), tOut);\n                }\n                for (Enumeration e = resourceCollections.elements();\n                     e.hasMoreElements();) {\n                    tar((ResourceCollection) e.nextElement(), tOut);\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                if (tOut != null) {\n                    try {\n                        \r\n                        tOut.close();\n                    } catch (IOException e) {\n                        \r\n                    }\n                }\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2005-10-20 02:40:56","endLine":313,"groupId":"10961","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/06/999d7ceac74fcbf665c099a30acc902c3fc608.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                upToDate &= check((TarFileSet) e.nextElement());\n            }\n            for (Enumeration e = resourceCollections.elements();\n                 e.hasMoreElements();) {\n                upToDate &= check((ResourceCollection) e.nextElement());\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    tar((TarFileSet) e.nextElement(), tOut);\n                }\n                for (Enumeration e = resourceCollections.elements();\n                     e.hasMoreElements();) {\n                    tar((ResourceCollection) e.nextElement(), tOut);\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                if (tOut != null) {\n                    try {\n                        \r\n                        tOut.close();\n                    } catch (IOException e) {\n                        \r\n                    }\n                }\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"N"},{"authorDate":"2005-11-15 16:31:19","commitOrder":23,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","date":"2005-11-15 16:31:19","endLine":50,"groupId":"2127","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e7/28bd8268bf3d6f53f0efe24e7dfc2d31f549b9.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipFile(source, zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            if (zOut != null) {\n                try {\n                    \r\n                    zOut.close();\n                } catch (IOException e) {\n                    \r\n                }\n            }\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"5e407c51a757b889049faa96156769872c829654","commitMessage":"@@@add resource support to gzip/bzip2\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@344334 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2005-11-15 16:31:19","modifiedFileCount":"5","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2005-11-15 16:31:19","codes":[{"authorDate":"2006-01-08 15:09:45","commitOrder":24,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                upToDate &= check((TarFileSet) e.nextElement());\n            }\n            for (Enumeration e = resourceCollections.elements();\n                 e.hasMoreElements();) {\n                upToDate &= check((ResourceCollection) e.nextElement());\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    tar((TarFileSet) e.nextElement(), tOut);\n                }\n                for (Enumeration e = resourceCollections.elements();\n                     e.hasMoreElements();) {\n                    tar((ResourceCollection) e.nextElement(), tOut);\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2006-01-08 15:09:45","endLine":305,"groupId":"10961","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/72/0ccb5a7607d382ae665f4c30ee3c9186fbdbd3.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                upToDate &= check((TarFileSet) e.nextElement());\n            }\n            for (Enumeration e = resourceCollections.elements();\n                 e.hasMoreElements();) {\n                upToDate &= check((ResourceCollection) e.nextElement());\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    tar((TarFileSet) e.nextElement(), tOut);\n                }\n                for (Enumeration e = resourceCollections.elements();\n                     e.hasMoreElements();) {\n                    tar((ResourceCollection) e.nextElement(), tOut);\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                if (tOut != null) {\n                    try {\n                        \r\n                        tOut.close();\n                    } catch (IOException e) {\n                        \r\n                    }\n                }\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2005-11-15 16:31:19","commitOrder":24,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","date":"2005-11-15 16:31:19","endLine":50,"groupId":"2127","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e7/28bd8268bf3d6f53f0efe24e7dfc2d31f549b9.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"ac060429f9790f7923a6b3e70bfdf29d7b79e7d5","commitMessage":"@@@removed deprecated method calls.  changed date\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@367002 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-01-08 15:09:45","modifiedFileCount":"1","status":"M","submitter":"Kevin Jackson"},{"authorTime":"2005-11-15 16:31:19","codes":[{"authorDate":"2009-08-26 19:03:10","commitOrder":25,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                upToDate &= check((TarFileSet) e.nextElement());\n            }\n            for (Enumeration e = resourceCollections.elements();\n                 e.hasMoreElements();) {\n                upToDate &= check((ResourceCollection) e.nextElement());\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory() && !parent.mkdirs()) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    tar((TarFileSet) e.nextElement(), tOut);\n                }\n                for (Enumeration e = resourceCollections.elements();\n                     e.hasMoreElements();) {\n                    tar((ResourceCollection) e.nextElement(), tOut);\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2009-08-26 19:03:10","endLine":325,"groupId":"1502","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/2e/89c4d196aa1df2ace70c956fc51b93564e3e8b.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                upToDate &= check((TarFileSet) e.nextElement());\n            }\n            for (Enumeration e = resourceCollections.elements();\n                 e.hasMoreElements();) {\n                upToDate &= check((ResourceCollection) e.nextElement());\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    tar((TarFileSet) e.nextElement(), tOut);\n                }\n                for (Enumeration e = resourceCollections.elements();\n                     e.hasMoreElements();) {\n                    tar((ResourceCollection) e.nextElement(), tOut);\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"},{"authorDate":"2005-11-15 16:31:19","commitOrder":25,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","date":"2005-11-15 16:31:19","endLine":50,"groupId":"2127","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e7/28bd8268bf3d6f53f0efe24e7dfc2d31f549b9.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"f2d99c202b5aaa3f387784d14d9882ea6e4d3d41","commitMessage":"@@@create parent directory of archive in <zip> and <tar> if needed.  PR 45377.  Based on patch by Remie Bolte\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@807960 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-08-26 19:03:10","modifiedFileCount":"2","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2005-11-15 16:31:19","codes":[{"authorDate":"2012-06-16 18:31:00","commitOrder":26,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                upToDate &= check((TarFileSet) e.nextElement());\n            }\n            for (Enumeration e = resourceCollections.elements();\n                 e.hasMoreElements();) {\n                upToDate &= check((ResourceCollection) e.nextElement());\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory() && !parent.mkdirs()) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    tar((TarFileSet) e.nextElement(), tOut);\n                }\n                for (Enumeration e = resourceCollections.elements();\n                     e.hasMoreElements();) {\n                    tar((ResourceCollection) e.nextElement(), tOut);\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2012-06-16 18:31:00","endLine":328,"groupId":"1502","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/00/0f2f41504d4963dcc9f4c0477c600f3c249a0d.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                upToDate &= check((TarFileSet) e.nextElement());\n            }\n            for (Enumeration e = resourceCollections.elements();\n                 e.hasMoreElements();) {\n                upToDate &= check((ResourceCollection) e.nextElement());\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory() && !parent.mkdirs()) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    tar((TarFileSet) e.nextElement(), tOut);\n                }\n                for (Enumeration e = resourceCollections.elements();\n                     e.hasMoreElements();) {\n                    tar((ResourceCollection) e.nextElement(), tOut);\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"},{"authorDate":"2005-11-15 16:31:19","commitOrder":26,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","date":"2005-11-15 16:31:19","endLine":50,"groupId":"2127","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e7/28bd8268bf3d6f53f0efe24e7dfc2d31f549b9.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"ca10b52e340d4ce2018e7426920e964ceaf1307a","commitMessage":"@@@Add a longfile='posix' option to tar task\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@1350904 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-06-16 18:31:00","modifiedFileCount":"2","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2005-11-15 16:31:19","codes":[{"authorDate":"2013-12-31 19:36:53","commitOrder":27,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                upToDate &= check((TarFileSet) e.nextElement());\n            }\n            for (Enumeration e = resourceCollections.elements();\n                 e.hasMoreElements();) {\n                upToDate &= check((ResourceCollection) e.nextElement());\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory()\n                && !(parent.mkdirs() || parent.isDirectory())) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    tar((TarFileSet) e.nextElement(), tOut);\n                }\n                for (Enumeration e = resourceCollections.elements();\n                     e.hasMoreElements();) {\n                    tar((ResourceCollection) e.nextElement(), tOut);\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2013-12-31 19:36:53","endLine":329,"groupId":"1502","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/a0/230dcd4f9d50e409050cadf105645f951162b1.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                upToDate &= check((TarFileSet) e.nextElement());\n            }\n            for (Enumeration e = resourceCollections.elements();\n                 e.hasMoreElements();) {\n                upToDate &= check((ResourceCollection) e.nextElement());\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory() && !parent.mkdirs()) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    tar((TarFileSet) e.nextElement(), tOut);\n                }\n                for (Enumeration e = resourceCollections.elements();\n                     e.hasMoreElements();) {\n                    tar((ResourceCollection) e.nextElement(), tOut);\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"},{"authorDate":"2005-11-15 16:31:19","commitOrder":27,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","date":"2005-11-15 16:31:19","endLine":50,"groupId":"2127","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e7/28bd8268bf3d6f53f0efe24e7dfc2d31f549b9.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"234c1d9ff4b5e2f04ee8a4fd1cde9c78b9aa3cd8","commitMessage":"@@@weed out race-condition in mkdirs calls inspired by PR 55290 and Matthias Bhend's suggestion\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@1554403 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-12-31 19:36:53","modifiedFileCount":"12","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2005-11-15 16:31:19","codes":[{"authorDate":"2014-07-04 19:56:55","commitOrder":28,"curCode":"\tpublic void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        @SuppressWarnings(\"unchecked\")\n\t\tfinal Vector<TarFileSet> savedFileSets = (Vector<TarFileSet>) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                final TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for(final TarFileSet tfs : filesets) {\n            \tupToDate &= check(tfs);\n            }\n            for(final ResourceCollection rcol : resourceCollections) {\n            \tupToDate &= check(rcol);\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            final File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory()\n                && !(parent.mkdirs() || parent.isDirectory())) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for(final TarFileSet tfs : filesets) {\n                \ttar(tfs, tOut);\n                }\n                for(final ResourceCollection rcol : resourceCollections) {\n                \ttar(rcol, tOut);\n                }\n            } catch (final IOException ioe) {\n                final String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2014-07-04 19:56:55","endLine":337,"groupId":"2537","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/26/8e660ab40d623dddb9d7a11cc6817bb30a5c1f.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        Vector savedFileSets = (Vector) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (Enumeration e = filesets.elements(); e.hasMoreElements();) {\n                upToDate &= check((TarFileSet) e.nextElement());\n            }\n            for (Enumeration e = resourceCollections.elements();\n                 e.hasMoreElements();) {\n                upToDate &= check((ResourceCollection) e.nextElement());\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory()\n                && !(parent.mkdirs() || parent.isDirectory())) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (Enumeration e = filesets.elements();\n                     e.hasMoreElements();) {\n                    tar((TarFileSet) e.nextElement(), tOut);\n                }\n                for (Enumeration e = resourceCollections.elements();\n                     e.hasMoreElements();) {\n                    tar((ResourceCollection) e.nextElement(), tOut);\n                }\n            } catch (IOException ioe) {\n                String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2005-11-15 16:31:19","commitOrder":28,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","date":"2005-11-15 16:31:19","endLine":50,"groupId":"2127","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e7/28bd8268bf3d6f53f0efe24e7dfc2d31f549b9.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"13f6d98c9de38c6c53d4d855157c3fad620c3303","commitMessage":"@@@make it compile under Java5 (1.5.0_22-b03)","date":"2014-07-04 19:56:55","modifiedFileCount":"37","status":"M","submitter":"Jan Mat?rne"},{"authorTime":"2005-11-15 16:31:19","codes":[{"authorDate":"2015-04-22 03:36:07","commitOrder":29,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        final Vector<TarFileSet> savedFileSets = (Vector<TarFileSet>) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                final TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for(final TarFileSet tfs : filesets) {\n                upToDate &= check(tfs);\n            }\n            for(final ResourceCollection rcol : resourceCollections) {\n                upToDate &= check(rcol);\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            final File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory()\n                && !(parent.mkdirs() || parent.isDirectory())) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))),\n                    encoding);\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (final TarFileSet tfs : filesets) {\n                    tar(tfs, tOut);\n                }\n                for (final ResourceCollection rcol : resourceCollections) {\n                    tar(rcol, tOut);\n                }\n            } catch (final IOException ioe) {\n                final String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2015-04-22 03:36:07","endLine":358,"groupId":"5117","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/97/547022d5b3bce42c32b5d83f4e0b845f724512.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        final Vector<TarFileSet> savedFileSets = (Vector<TarFileSet>) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                final TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for(final TarFileSet tfs : filesets) {\n                upToDate &= check(tfs);\n            }\n            for(final ResourceCollection rcol : resourceCollections) {\n                upToDate &= check(rcol);\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            final File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory()\n                && !(parent.mkdirs() || parent.isDirectory())) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))));\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (final TarFileSet tfs : filesets) {\n                    tar(tfs, tOut);\n                }\n                for (final ResourceCollection rcol : resourceCollections) {\n                    tar(rcol, tOut);\n                }\n            } catch (final IOException ioe) {\n                final String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"},{"authorDate":"2005-11-15 16:31:19","commitOrder":29,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","date":"2005-11-15 16:31:19","endLine":50,"groupId":"2127","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e7/28bd8268bf3d6f53f0efe24e7dfc2d31f549b9.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"1a584200e27de7867d7f613ff9c910dc0cc9730a","commitMessage":"@@@Add encoding attributes to <tar>.  <untar> and <tarfileset>\n\nThis is a workaround for Bugzilla Issue 57822\nhttps://bz.apache.org/bugzilla/show_bug.cgi?id=57822\n","date":"2015-04-22 03:36:07","modifiedFileCount":"8","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2017-04-12 12:54:09","codes":[{"authorDate":"2017-04-12 12:54:09","commitOrder":30,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        final Vector<TarFileSet> savedFileSets = (Vector<TarFileSet>) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                final TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for(final TarFileSet tfs : filesets) {\n                upToDate &= check(tfs);\n            }\n            for(final ResourceCollection rcol : resourceCollections) {\n                upToDate &= check(rcol);\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            final File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory()\n                && !(parent.mkdirs() || parent.isDirectory())) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            Files.newOutputStream(tarFile.toPath()))),\n                    encoding);\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (final TarFileSet tfs : filesets) {\n                    tar(tfs, tOut);\n                }\n                for (final ResourceCollection rcol : resourceCollections) {\n                    tar(rcol, tOut);\n                }\n            } catch (final IOException ioe) {\n                final String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2017-04-12 12:54:09","endLine":361,"groupId":"5117","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/65/3cc5b37e138775f700ab7a095ea4d43caa5b21.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        final Vector<TarFileSet> savedFileSets = (Vector<TarFileSet>) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                final TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for(final TarFileSet tfs : filesets) {\n                upToDate &= check(tfs);\n            }\n            for(final ResourceCollection rcol : resourceCollections) {\n                upToDate &= check(rcol);\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            final File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory()\n                && !(parent.mkdirs() || parent.isDirectory())) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            new FileOutputStream(tarFile))),\n                    encoding);\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (final TarFileSet tfs : filesets) {\n                    tar(tfs, tOut);\n                }\n                for (final ResourceCollection rcol : resourceCollections) {\n                    tar(rcol, tOut);\n                }\n            } catch (final IOException ioe) {\n                final String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2017-04-12 12:54:09","commitOrder":30,"curCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(Files.newOutputStream(zipFile.toPath()));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","date":"2017-04-12 12:54:09","endLine":53,"groupId":"2127","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/4d/7be1f62c00d0c7b79cbb0403866de956ca44a9.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(new FileOutputStream(zipFile));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"af74d1f6b882cef5f4167d972638ad886d12d58c","commitMessage":"@@@reduce GC pressure by replacing File(In|Out)putStream\n","date":"2017-04-12 12:54:09","modifiedFileCount":"84","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":31,"curCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        final Vector<TarFileSet> savedFileSets = new Vector<>(filesets);\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                final TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.isEmpty() && resourceCollections.isEmpty()) {\n                throw new BuildException(\n                    \"You must supply either a basedir attribute or some nested resource collections.\",\n                    getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for (final TarFileSet tfs : filesets) {\n                upToDate &= check(tfs);\n            }\n            for (final ResourceCollection rcol : resourceCollections) {\n                upToDate &= check(rcol);\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            final File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory()\n                && !(parent.mkdirs() || parent.isDirectory())) {\n                throw new BuildException(\n                    \"Failed to create missing parent directory for %s\",\n                    tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            try (TarOutputStream tOut = new TarOutputStream(\n                compression.compress(new BufferedOutputStream(\n                    Files.newOutputStream(tarFile.toPath()))),\n                encoding)) {\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (final TarFileSet tfs : filesets) {\n                    tar(tfs, tOut);\n                }\n                for (final ResourceCollection rcol : resourceCollections) {\n                    tar(rcol, tOut);\n                }\n            } catch (final IOException ioe) {\n                final String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":353,"groupId":"10376","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"execute","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f5/1a056d801bf0fb8d45e6700d90a7995d02e52a.src","preCode":"    public void execute() throws BuildException {\n        if (tarFile == null) {\n            throw new BuildException(\"tarfile attribute must be set!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && tarFile.isDirectory()) {\n            throw new BuildException(\"tarfile is a directory!\",\n                                     getLocation());\n        }\n\n        if (tarFile.exists() && !tarFile.canWrite()) {\n            throw new BuildException(\"Can not write to the specified tarfile!\",\n                                     getLocation());\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        final Vector<TarFileSet> savedFileSets = (Vector<TarFileSet>) filesets.clone();\n        try {\n            if (baseDir != null) {\n                if (!baseDir.exists()) {\n                    throw new BuildException(\"basedir does not exist!\",\n                                             getLocation());\n                }\n\n                \r\n                final TarFileSet mainFileSet = new TarFileSet(fileset);\n                mainFileSet.setDir(baseDir);\n                filesets.addElement(mainFileSet);\n            }\n\n            if (filesets.size() == 0 && resourceCollections.size() == 0) {\n                throw new BuildException(\"You must supply either a basedir \"\n                                         + \"attribute or some nested resource\"\n                                         + \" collections.\",\n                                         getLocation());\n            }\n\n            \r\n            \r\n            boolean upToDate = true;\n            for(final TarFileSet tfs : filesets) {\n                upToDate &= check(tfs);\n            }\n            for(final ResourceCollection rcol : resourceCollections) {\n                upToDate &= check(rcol);\n            }\n\n            if (upToDate) {\n                log(\"Nothing to do: \" + tarFile.getAbsolutePath()\n                    + \" is up to date.\", Project.MSG_INFO);\n                return;\n            }\n\n            final File parent = tarFile.getParentFile();\n            if (parent != null && !parent.isDirectory()\n                && !(parent.mkdirs() || parent.isDirectory())) {\n                throw new BuildException(\"Failed to create missing parent\"\n                                         + \" directory for \" + tarFile);\n            }\n\n            log(\"Building tar: \" + tarFile.getAbsolutePath(), Project.MSG_INFO);\n\n            TarOutputStream tOut = null;\n            try {\n                tOut = new TarOutputStream(\n                    compression.compress(\n                        new BufferedOutputStream(\n                            Files.newOutputStream(tarFile.toPath()))),\n                    encoding);\n                tOut.setDebug(true);\n                if (longFileMode.isTruncateMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_TRUNCATE);\n                } else if (longFileMode.isFailMode()\n                            || longFileMode.isOmitMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_ERROR);\n                } else if (longFileMode.isPosixMode()) {\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_POSIX);\n                } else {\n                    \r\n                    tOut.setLongFileMode(TarOutputStream.LONGFILE_GNU);\n                }\n\n                longWarningGiven = false;\n                for (final TarFileSet tfs : filesets) {\n                    tar(tfs, tOut);\n                }\n                for (final ResourceCollection rcol : resourceCollections) {\n                    tar(rcol, tOut);\n                }\n            } catch (final IOException ioe) {\n                final String msg = \"Problem creating TAR: \" + ioe.getMessage();\n                throw new BuildException(msg, ioe, getLocation());\n            } finally {\n                FileUtils.close(tOut);\n            }\n        } finally {\n            filesets = savedFileSets;\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"},{"authorDate":"2017-04-13 23:15:22","commitOrder":31,"curCode":"    protected void pack() {\n        try (GZIPOutputStream zOut =\n            new GZIPOutputStream(Files.newOutputStream(zipFile.toPath()))) {\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        }\n    }\n","date":"2017-04-13 23:15:22","endLine":49,"groupId":"10376","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"pack","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/88/0364745b309ddc211852ac458cf299c882b440.src","preCode":"    protected void pack() {\n        GZIPOutputStream zOut = null;\n        try {\n            zOut = new GZIPOutputStream(Files.newOutputStream(zipFile.toPath()));\n            zipResource(getSrcResource(), zOut);\n        } catch (IOException ioe) {\n            String msg = \"Problem creating gzip \" + ioe.getMessage();\n            throw new BuildException(msg, ioe, getLocation());\n        } finally {\n            FileUtils.close(zOut);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/GZip.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"b7d1e9bde44cb8e5233d6e70bb96e14cbb2f3e2d","commitMessage":"@@@java 5-8\n","date":"2017-04-13 23:15:22","modifiedFileCount":"609","status":"M","submitter":"Matt Benson"}]
