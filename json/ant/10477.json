[{"authorTime":"2017-04-13 23:15:22","codes":[{"authorDate":"2017-04-13 23:15:22","commitOrder":1,"curCode":"        private void scanRoot(AntFTPFile myfile, String originalpattern) {\n            String currentelement;\n            boolean isOK = true;\n            boolean traversesSymlinks = false;\n            String path = null;\n\n            if (myfile.exists()) {\n                forceRemoteSensitivityCheck();\n                if (remoteSensitivityChecked\n                    && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                    \r\n                    \r\n                    path = myfile.getFastRelativePath();\n                } else {\n                    \r\n                    \r\n                    \r\n                    try {\n                        path = myfile.getRelativePath();\n                        traversesSymlinks = myfile.isTraverseSymlinks();\n                    }  catch (IOException be) {\n                        throw new BuildException(be, task.getLocation());\n                    } catch (BuildException be) {\n                        isOK = false;\n                    }\n                }\n            } else {\n                isOK = false;\n            }\n            if (isOK) {\n                currentelement = path.replace(task.getSeparator().charAt(0), File.separatorChar);\n                if (!isFollowSymlinks()\n                    && traversesSymlinks) {\n                    return;\n                }\n\n                if (myfile.isDirectory()) {\n                    if (isIncluded(currentelement)\n                        && currentelement.length() > 0) {\n                        accountForIncludedDir(currentelement, myfile, true);\n                    }  else {\n                        if (currentelement.length() > 0) {\n                            if (currentelement.charAt(currentelement\n                                                      .length() - 1)\n                                != File.separatorChar) {\n                                currentelement =\n                                    currentelement + File.separatorChar;\n                            }\n                        }\n                        scandir(myfile.getAbsolutePath(), currentelement, true);\n                    }\n                } else if (isCaseSensitive\n                    && originalpattern.equals(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                } else if (!isCaseSensitive\n                           && originalpattern\n                           .equalsIgnoreCase(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                }\n            }\n        }\n","date":"2017-04-13 23:15:22","endLine":382,"groupId":"7127","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"scanRoot","params":"(AntFTPFilemyfile@Stringoriginalpattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f5/46b230ba9f5fd9068433aa8620bc9d58b1f599.src","preCode":"        private void scanRoot(AntFTPFile myfile, String originalpattern) {\n            String currentelement;\n            boolean isOK = true;\n            boolean traversesSymlinks = false;\n            String path = null;\n\n            if (myfile.exists()) {\n                forceRemoteSensitivityCheck();\n                if (remoteSensitivityChecked\n                    && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                    \r\n                    \r\n                    path = myfile.getFastRelativePath();\n                } else {\n                    \r\n                    \r\n                    \r\n                    try {\n                        path = myfile.getRelativePath();\n                        traversesSymlinks = myfile.isTraverseSymlinks();\n                    }  catch (IOException be) {\n                        throw new BuildException(be, task.getLocation());\n                    } catch (BuildException be) {\n                        isOK = false;\n                    }\n                }\n            } else {\n                isOK = false;\n            }\n            if (isOK) {\n                currentelement = path.replace(task.getSeparator().charAt(0), File.separatorChar);\n                if (!isFollowSymlinks()\n                    && traversesSymlinks) {\n                    return;\n                }\n\n                if (myfile.isDirectory()) {\n                    if (isIncluded(currentelement)\n                        && currentelement.length() > 0) {\n                        accountForIncludedDir(currentelement, myfile, true);\n                    }  else {\n                        if (currentelement.length() > 0) {\n                            if (currentelement.charAt(currentelement\n                                                      .length() - 1)\n                                != File.separatorChar) {\n                                currentelement =\n                                    currentelement + File.separatorChar;\n                            }\n                        }\n                        scandir(myfile.getAbsolutePath(), currentelement, true);\n                    }\n                } else if (isCaseSensitive\n                    && originalpattern.equals(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                } else if (!isCaseSensitive\n                           && originalpattern\n                           .equalsIgnoreCase(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                }\n            }\n        }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"B"},{"authorDate":"2017-04-13 23:15:22","commitOrder":1,"curCode":"        private void scanRoots(AntFTPFile baseFTPFile, String currentelement, String originalpattern) {\n            AntFTPFile myfile = new AntFTPFile(baseFTPFile, currentelement);\n            boolean isOK = true;\n            boolean traversesSymlinks = false;\n            String path = null;\n\n            if (myfile.exists()) {\n                forceRemoteSensitivityCheck();\n                if (remoteSensitivityChecked\n                    && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                    \r\n                    \r\n                    path = myfile.getFastRelativePath();\n                } else {\n                    \r\n                    \r\n                    \r\n                    try {\n                        path = myfile.getRelativePath();\n                        traversesSymlinks = myfile.isTraverseSymlinks();\n                    }  catch (IOException be) {\n                        throw new BuildException(be, getLocation());\n                    } catch (BuildException be) {\n                        isOK = false;\n                    }\n                }\n            } else {\n                isOK = false;\n            }\n            if (isOK) {\n                currentelement = path.replace(remoteFileSep.charAt(0), File.separatorChar);\n                if (!isFollowSymlinks() && traversesSymlinks) {\n                    return;\n                }\n\n                if (myfile.isDirectory()) {\n                    if (isIncluded(currentelement)\n                        && currentelement.length() > 0) {\n                        accountForIncludedDir(currentelement, myfile, true);\n                    }  else {\n                        if (currentelement.length() > 0) {\n                            if (currentelement.charAt(currentelement\n                                                      .length() - 1)\n                                != File.separatorChar) {\n                                currentelement =\n                                    currentelement + File.separatorChar;\n                            }\n                        }\n                        scandir(myfile.getAbsolutePath(), currentelement, true);\n                    }\n                } else if (isCaseSensitive\n                    && originalpattern.equals(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                } else if (!isCaseSensitive && originalpattern\n                    .equalsIgnoreCase(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                }\n            }\n        }\n","date":"2017-04-13 23:15:22","endLine":489,"groupId":"2979","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"scanRoots","params":"(AntFTPFilebaseFTPFile@Stringcurrentelement@Stringoriginalpattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/2a/5239022c4fbbf3e893d2c9ad7a4fcdd809cc5c.src","preCode":"        private void scanRoots(AntFTPFile baseFTPFile, String currentelement, String originalpattern) {\n            AntFTPFile myfile = new AntFTPFile(baseFTPFile, currentelement);\n            boolean isOK = true;\n            boolean traversesSymlinks = false;\n            String path = null;\n\n            if (myfile.exists()) {\n                forceRemoteSensitivityCheck();\n                if (remoteSensitivityChecked\n                    && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                    \r\n                    \r\n                    path = myfile.getFastRelativePath();\n                } else {\n                    \r\n                    \r\n                    \r\n                    try {\n                        path = myfile.getRelativePath();\n                        traversesSymlinks = myfile.isTraverseSymlinks();\n                    }  catch (IOException be) {\n                        throw new BuildException(be, getLocation());\n                    } catch (BuildException be) {\n                        isOK = false;\n                    }\n                }\n            } else {\n                isOK = false;\n            }\n            if (isOK) {\n                currentelement = path.replace(remoteFileSep.charAt(0), File.separatorChar);\n                if (!isFollowSymlinks() && traversesSymlinks) {\n                    return;\n                }\n\n                if (myfile.isDirectory()) {\n                    if (isIncluded(currentelement)\n                        && currentelement.length() > 0) {\n                        accountForIncludedDir(currentelement, myfile, true);\n                    }  else {\n                        if (currentelement.length() > 0) {\n                            if (currentelement.charAt(currentelement\n                                                      .length() - 1)\n                                != File.separatorChar) {\n                                currentelement =\n                                    currentelement + File.separatorChar;\n                            }\n                        }\n                        scandir(myfile.getAbsolutePath(), currentelement, true);\n                    }\n                } else if (isCaseSensitive\n                    && originalpattern.equals(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                } else if (!isCaseSensitive && originalpattern\n                    .equalsIgnoreCase(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                }\n            }\n        }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"B"}],"commitId":"b7d1e9bde44cb8e5233d6e70bb96e14cbb2f3e2d","commitMessage":"@@@java 5-8\n","date":"2017-04-13 23:15:22","modifiedFileCount":"609","status":"B","submitter":"Matt Benson"},{"authorTime":"2018-04-06 14:32:31","codes":[{"authorDate":"2018-04-06 14:32:31","commitOrder":2,"curCode":"        private void scanRoot(AntFTPFile myfile, String originalpattern) {\n            String currentelement;\n            boolean isOK = true;\n            boolean traversesSymlinks = false;\n            String path = null;\n\n            if (myfile.exists()) {\n                forceRemoteSensitivityCheck();\n                if (remoteSensitivityChecked\n                    && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                    \r\n                    \r\n                    path = myfile.getFastRelativePath();\n                } else {\n                    \r\n                    \r\n                    \r\n                    try {\n                        path = myfile.getRelativePath();\n                        traversesSymlinks = myfile.isTraverseSymlinks();\n                    } catch (IOException be) {\n                        throw new BuildException(be, task.getLocation());\n                    } catch (BuildException be) {\n                        isOK = false;\n                    }\n                }\n            } else {\n                isOK = false;\n            }\n            if (isOK) {\n                currentelement = path.replace(task.getSeparator().charAt(0), File.separatorChar);\n                if (!isFollowSymlinks()\n                    && traversesSymlinks) {\n                    return;\n                }\n\n                if (myfile.isDirectory()) {\n                    if (isIncluded(currentelement)\n                        && currentelement.length() > 0) {\n                        accountForIncludedDir(currentelement, myfile, true);\n                    }  else {\n                        if (currentelement.length() > 0\n                                && currentelement.charAt(currentelement.length() - 1)\n                                != File.separatorChar) {\n                            currentelement += File.separatorChar;\n                        }\n                        scandir(myfile.getAbsolutePath(), currentelement, true);\n                    }\n                } else if (isCaseSensitive\n                    && originalpattern.equals(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                } else if (!isCaseSensitive\n                           && originalpattern\n                           .equalsIgnoreCase(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                }\n            }\n        }\n","date":"2018-04-06 14:48:19","endLine":382,"groupId":"7127","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"scanRoot","params":"(AntFTPFilemyfile@Stringoriginalpattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/1a/16b80aed1ce59463970a16bd563895ace92f97.src","preCode":"        private void scanRoot(AntFTPFile myfile, String originalpattern) {\n            String currentelement;\n            boolean isOK = true;\n            boolean traversesSymlinks = false;\n            String path = null;\n\n            if (myfile.exists()) {\n                forceRemoteSensitivityCheck();\n                if (remoteSensitivityChecked\n                    && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                    \r\n                    \r\n                    path = myfile.getFastRelativePath();\n                } else {\n                    \r\n                    \r\n                    \r\n                    try {\n                        path = myfile.getRelativePath();\n                        traversesSymlinks = myfile.isTraverseSymlinks();\n                    } catch (IOException be) {\n                        throw new BuildException(be, task.getLocation());\n                    } catch (BuildException be) {\n                        isOK = false;\n                    }\n                }\n            } else {\n                isOK = false;\n            }\n            if (isOK) {\n                currentelement = path.replace(task.getSeparator().charAt(0), File.separatorChar);\n                if (!isFollowSymlinks()\n                    && traversesSymlinks) {\n                    return;\n                }\n\n                if (myfile.isDirectory()) {\n                    if (isIncluded(currentelement)\n                        && currentelement.length() > 0) {\n                        accountForIncludedDir(currentelement, myfile, true);\n                    }  else {\n                        if (currentelement.length() > 0) {\n                            if (currentelement.charAt(currentelement\n                                                      .length() - 1)\n                                != File.separatorChar) {\n                                currentelement =\n                                    currentelement + File.separatorChar;\n                            }\n                        }\n                        scandir(myfile.getAbsolutePath(), currentelement, true);\n                    }\n                } else if (isCaseSensitive\n                    && originalpattern.equals(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                } else if (!isCaseSensitive\n                           && originalpattern\n                           .equalsIgnoreCase(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                }\n            }\n        }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"},{"authorDate":"2018-04-06 14:32:31","commitOrder":2,"curCode":"        private void scanRoots(AntFTPFile baseFTPFile, String currentelement, String originalpattern) {\n            AntFTPFile myfile = new AntFTPFile(baseFTPFile, currentelement);\n            boolean isOK = true;\n            boolean traversesSymlinks = false;\n            String path = null;\n\n            if (myfile.exists()) {\n                forceRemoteSensitivityCheck();\n                if (remoteSensitivityChecked\n                    && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                    \r\n                    \r\n                    path = myfile.getFastRelativePath();\n                } else {\n                    \r\n                    \r\n                    \r\n                    try {\n                        path = myfile.getRelativePath();\n                        traversesSymlinks = myfile.isTraverseSymlinks();\n                    } catch (IOException be) {\n                        throw new BuildException(be, getLocation());\n                    } catch (BuildException be) {\n                        isOK = false;\n                    }\n                }\n            } else {\n                isOK = false;\n            }\n            if (isOK) {\n                currentelement = path.replace(remoteFileSep.charAt(0), File.separatorChar);\n                if (!isFollowSymlinks() && traversesSymlinks) {\n                    return;\n                }\n\n                if (myfile.isDirectory()) {\n                    if (isIncluded(currentelement)\n                        && currentelement.length() > 0) {\n                        accountForIncludedDir(currentelement, myfile, true);\n                    }  else {\n                        if (currentelement.length() > 0\n                                && currentelement.charAt(currentelement.length() - 1)\n                                != File.separatorChar) {\n                            currentelement += File.separatorChar;\n                        }\n                        scandir(myfile.getAbsolutePath(), currentelement, true);\n                    }\n                } else if (isCaseSensitive\n                    && originalpattern.equals(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                } else if (!isCaseSensitive && originalpattern\n                    .equalsIgnoreCase(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                }\n            }\n        }\n","date":"2018-04-06 14:48:19","endLine":489,"groupId":"2979","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"scanRoots","params":"(AntFTPFilebaseFTPFile@Stringcurrentelement@Stringoriginalpattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/f9/a4a95b232c71ad2c2f2f8c3032c2dbd52219fa.src","preCode":"        private void scanRoots(AntFTPFile baseFTPFile, String currentelement, String originalpattern) {\n            AntFTPFile myfile = new AntFTPFile(baseFTPFile, currentelement);\n            boolean isOK = true;\n            boolean traversesSymlinks = false;\n            String path = null;\n\n            if (myfile.exists()) {\n                forceRemoteSensitivityCheck();\n                if (remoteSensitivityChecked\n                    && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                    \r\n                    \r\n                    path = myfile.getFastRelativePath();\n                } else {\n                    \r\n                    \r\n                    \r\n                    try {\n                        path = myfile.getRelativePath();\n                        traversesSymlinks = myfile.isTraverseSymlinks();\n                    } catch (IOException be) {\n                        throw new BuildException(be, getLocation());\n                    } catch (BuildException be) {\n                        isOK = false;\n                    }\n                }\n            } else {\n                isOK = false;\n            }\n            if (isOK) {\n                currentelement = path.replace(remoteFileSep.charAt(0), File.separatorChar);\n                if (!isFollowSymlinks() && traversesSymlinks) {\n                    return;\n                }\n\n                if (myfile.isDirectory()) {\n                    if (isIncluded(currentelement)\n                        && currentelement.length() > 0) {\n                        accountForIncludedDir(currentelement, myfile, true);\n                    }  else {\n                        if (currentelement.length() > 0) {\n                            if (currentelement.charAt(currentelement\n                                                      .length() - 1)\n                                != File.separatorChar) {\n                                currentelement =\n                                    currentelement + File.separatorChar;\n                            }\n                        }\n                        scandir(myfile.getAbsolutePath(), currentelement, true);\n                    }\n                } else if (isCaseSensitive\n                    && originalpattern.equals(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                } else if (!isCaseSensitive && originalpattern\n                    .equalsIgnoreCase(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                }\n            }\n        }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"M"}],"commitId":"4b14d85f11b9a7728dcd2d9420551fd28bf8f45e","commitMessage":"@@@Avoid repetition","date":"2018-04-06 14:48:19","modifiedFileCount":"28","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-04-06 20:50:56","codes":[{"authorDate":"2018-04-06 20:50:56","commitOrder":3,"curCode":"        private void scanRoot(AntFTPFile myfile, String originalpattern) {\n            String currentelement;\n            boolean isOK = true;\n            boolean traversesSymlinks = false;\n            String path = null;\n\n            if (myfile.exists()) {\n                forceRemoteSensitivityCheck();\n                if (remoteSensitivityChecked\n                    && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                    \r\n                    \r\n                    path = myfile.getFastRelativePath();\n                } else {\n                    \r\n                    \r\n                    \r\n                    try {\n                        path = myfile.getRelativePath();\n                        traversesSymlinks = myfile.isTraverseSymlinks();\n                    } catch (IOException be) {\n                        throw new BuildException(be, task.getLocation());\n                    } catch (BuildException be) {\n                        isOK = false;\n                    }\n                }\n            } else {\n                isOK = false;\n            }\n            if (isOK) {\n                currentelement = path.replace(task.getSeparator().charAt(0), File.separatorChar);\n                if (!isFollowSymlinks()\n                    && traversesSymlinks) {\n                    return;\n                }\n\n                if (myfile.isDirectory()) {\n                    if (isIncluded(currentelement) && !currentelement.isEmpty()) {\n                        accountForIncludedDir(currentelement, myfile, true);\n                    } else {\n                        if (!currentelement.isEmpty() && currentelement.charAt(currentelement.length() - 1)\n                                != File.separatorChar) {\n                            currentelement += File.separatorChar;\n                        }\n                        scandir(myfile.getAbsolutePath(), currentelement, true);\n                    }\n                } else if (isCaseSensitive\n                    && originalpattern.equals(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                } else if (!isCaseSensitive\n                           && originalpattern\n                           .equalsIgnoreCase(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                }\n            }\n        }\n","date":"2018-04-06 20:50:56","endLine":380,"groupId":"10477","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"scanRoot","params":"(AntFTPFilemyfile@Stringoriginalpattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/63/1e73b9dfac55812c533857c3e8b819abe0d4fa.src","preCode":"        private void scanRoot(AntFTPFile myfile, String originalpattern) {\n            String currentelement;\n            boolean isOK = true;\n            boolean traversesSymlinks = false;\n            String path = null;\n\n            if (myfile.exists()) {\n                forceRemoteSensitivityCheck();\n                if (remoteSensitivityChecked\n                    && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                    \r\n                    \r\n                    path = myfile.getFastRelativePath();\n                } else {\n                    \r\n                    \r\n                    \r\n                    try {\n                        path = myfile.getRelativePath();\n                        traversesSymlinks = myfile.isTraverseSymlinks();\n                    } catch (IOException be) {\n                        throw new BuildException(be, task.getLocation());\n                    } catch (BuildException be) {\n                        isOK = false;\n                    }\n                }\n            } else {\n                isOK = false;\n            }\n            if (isOK) {\n                currentelement = path.replace(task.getSeparator().charAt(0), File.separatorChar);\n                if (!isFollowSymlinks()\n                    && traversesSymlinks) {\n                    return;\n                }\n\n                if (myfile.isDirectory()) {\n                    if (isIncluded(currentelement)\n                        && currentelement.length() > 0) {\n                        accountForIncludedDir(currentelement, myfile, true);\n                    }  else {\n                        if (currentelement.length() > 0\n                                && currentelement.charAt(currentelement.length() - 1)\n                                != File.separatorChar) {\n                            currentelement += File.separatorChar;\n                        }\n                        scandir(myfile.getAbsolutePath(), currentelement, true);\n                    }\n                } else if (isCaseSensitive\n                    && originalpattern.equals(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                } else if (!isCaseSensitive\n                           && originalpattern\n                           .equalsIgnoreCase(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                }\n            }\n        }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTPTaskMirrorImpl.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"},{"authorDate":"2018-04-06 20:50:56","commitOrder":3,"curCode":"        private void scanRoots(AntFTPFile baseFTPFile, String currentelement, String originalpattern) {\n            AntFTPFile myfile = new AntFTPFile(baseFTPFile, currentelement);\n            boolean isOK = true;\n            boolean traversesSymlinks = false;\n            String path = null;\n\n            if (myfile.exists()) {\n                forceRemoteSensitivityCheck();\n                if (remoteSensitivityChecked\n                    && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                    \r\n                    \r\n                    path = myfile.getFastRelativePath();\n                } else {\n                    \r\n                    \r\n                    \r\n                    try {\n                        path = myfile.getRelativePath();\n                        traversesSymlinks = myfile.isTraverseSymlinks();\n                    } catch (IOException be) {\n                        throw new BuildException(be, getLocation());\n                    } catch (BuildException be) {\n                        isOK = false;\n                    }\n                }\n            } else {\n                isOK = false;\n            }\n            if (isOK) {\n                currentelement = path.replace(remoteFileSep.charAt(0), File.separatorChar);\n                if (!isFollowSymlinks() && traversesSymlinks) {\n                    return;\n                }\n\n                if (myfile.isDirectory()) {\n                    if (isIncluded(currentelement) && !currentelement.isEmpty()) {\n                        accountForIncludedDir(currentelement, myfile, true);\n                    } else {\n                        if (!currentelement.isEmpty()\n                                && currentelement.charAt(currentelement.length() - 1)\n                                != File.separatorChar) {\n                            currentelement += File.separatorChar;\n                        }\n                        scandir(myfile.getAbsolutePath(), currentelement, true);\n                    }\n                } else if (isCaseSensitive && originalpattern.equals(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                } else if (!isCaseSensitive && originalpattern.equalsIgnoreCase(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                }\n            }\n        }\n","date":"2018-04-06 20:50:56","endLine":486,"groupId":"10477","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"scanRoots","params":"(AntFTPFilebaseFTPFile@Stringcurrentelement@Stringoriginalpattern)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/c2/3ffbc9b06b9ef295bcfe3dbba6d059eacc3ac3.src","preCode":"        private void scanRoots(AntFTPFile baseFTPFile, String currentelement, String originalpattern) {\n            AntFTPFile myfile = new AntFTPFile(baseFTPFile, currentelement);\n            boolean isOK = true;\n            boolean traversesSymlinks = false;\n            String path = null;\n\n            if (myfile.exists()) {\n                forceRemoteSensitivityCheck();\n                if (remoteSensitivityChecked\n                    && remoteSystemCaseSensitive && isFollowSymlinks()) {\n                    \r\n                    \r\n                    path = myfile.getFastRelativePath();\n                } else {\n                    \r\n                    \r\n                    \r\n                    try {\n                        path = myfile.getRelativePath();\n                        traversesSymlinks = myfile.isTraverseSymlinks();\n                    } catch (IOException be) {\n                        throw new BuildException(be, getLocation());\n                    } catch (BuildException be) {\n                        isOK = false;\n                    }\n                }\n            } else {\n                isOK = false;\n            }\n            if (isOK) {\n                currentelement = path.replace(remoteFileSep.charAt(0), File.separatorChar);\n                if (!isFollowSymlinks() && traversesSymlinks) {\n                    return;\n                }\n\n                if (myfile.isDirectory()) {\n                    if (isIncluded(currentelement)\n                        && currentelement.length() > 0) {\n                        accountForIncludedDir(currentelement, myfile, true);\n                    }  else {\n                        if (currentelement.length() > 0\n                                && currentelement.charAt(currentelement.length() - 1)\n                                != File.separatorChar) {\n                            currentelement += File.separatorChar;\n                        }\n                        scandir(myfile.getAbsolutePath(), currentelement, true);\n                    }\n                } else if (isCaseSensitive\n                    && originalpattern.equals(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                } else if (!isCaseSensitive && originalpattern\n                    .equalsIgnoreCase(currentelement)) {\n                    accountForIncludedFile(currentelement);\n                }\n            }\n        }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/optional/net/FTP.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"M"}],"commitId":"30f52135af7a18cbf3f140089e90bdb39ceee134","commitMessage":"@@@Use null-or-empty pattern","date":"2018-04-06 20:50:56","modifiedFileCount":"80","status":"M","submitter":"Gintas Grigelionis"}]
