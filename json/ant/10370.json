[{"authorTime":"2001-11-15 17:14:10","codes":[{"authorDate":"2005-10-20 02:40:56","commitOrder":2,"curCode":"    protected void tarResource(Resource r, TarOutputStream tOut, String vPath,\n                               TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        if (tarFileSet != null) {\n            String fullpath = tarFileSet.getFullpath();\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix();\n                \r\n                if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {\n                    prefix = prefix + \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            if (vPath.startsWith(\"/\")\n                && !tarFileSet.getPreserveLeadingSlashes()) {\n                int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        TarEntry te = new TarEntry(vPath);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\"Resource: \" + r + \" larger than \" +\n                                         TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode());\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                byte[] buffer = new byte[8 * 1024];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","date":"2005-10-20 02:40:56","endLine":465,"groupId":"8194","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"tarResource","params":"(Resourcer@TarOutputStreamtOut@StringvPath@TarFileSettarFileSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/06/999d7ceac74fcbf665c099a30acc902c3fc608.src","preCode":"    protected void tarResource(Resource r, TarOutputStream tOut, String vPath,\n                               TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        if (tarFileSet != null) {\n            String fullpath = tarFileSet.getFullpath();\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix();\n                \r\n                if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {\n                    prefix = prefix + \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            if (vPath.startsWith(\"/\")\n                && !tarFileSet.getPreserveLeadingSlashes()) {\n                int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        TarEntry te = new TarEntry(vPath);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\"Resource: \" + r + \" larger than \" +\n                                         TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode());\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                byte[] buffer = new byte[8 * 1024];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"B"},{"authorDate":"2001-11-15 17:14:10","commitOrder":2,"curCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException\n    {\n        byte[] buffer = new byte[8 * 1024];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","date":"2001-11-15 17:14:10","endLine":115,"groupId":"2600","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"zipFile","params":"(InputStreamin@OutputStreamzOut)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/96/e01cb06e79c2decd4f9d6825adfc9ae59d3f7c.src","preCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException\n    {\n        byte[] buffer = new byte[8 * 1024];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Pack.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"NB"}],"commitId":"b5fcf10604f56a8061d10f332570342b34cc7a9d","commitMessage":"@@@add resource collection support to tar\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@326643 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2005-10-20 02:40:56","modifiedFileCount":"8","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2001-11-15 17:14:10","codes":[{"authorDate":"2006-01-08 15:09:45","commitOrder":3,"curCode":"    protected void tarResource(Resource r, TarOutputStream tOut, String vPath,\n                               TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        if (tarFileSet != null) {\n            String fullpath = tarFileSet.getFullpath(this.getProject());\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix(this.getProject());\n                \r\n                if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {\n                    prefix = prefix + \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            if (vPath.startsWith(\"/\")\n                && !tarFileSet.getPreserveLeadingSlashes()) {\n                int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        TarEntry te = new TarEntry(vPath);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\"Resource: \" + r + \" larger than \" +\n                                         TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode(this.getProject()));\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                byte[] buffer = new byte[8 * 1024];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","date":"2006-01-08 15:09:45","endLine":469,"groupId":"8194","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"tarResource","params":"(Resourcer@TarOutputStreamtOut@StringvPath@TarFileSettarFileSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/72/0ccb5a7607d382ae665f4c30ee3c9186fbdbd3.src","preCode":"    protected void tarResource(Resource r, TarOutputStream tOut, String vPath,\n                               TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        if (tarFileSet != null) {\n            String fullpath = tarFileSet.getFullpath();\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix();\n                \r\n                if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {\n                    prefix = prefix + \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            if (vPath.startsWith(\"/\")\n                && !tarFileSet.getPreserveLeadingSlashes()) {\n                int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        TarEntry te = new TarEntry(vPath);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\"Resource: \" + r + \" larger than \" +\n                                         TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode());\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                byte[] buffer = new byte[8 * 1024];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2001-11-15 17:14:10","commitOrder":3,"curCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException\n    {\n        byte[] buffer = new byte[8 * 1024];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","date":"2001-11-15 17:14:10","endLine":115,"groupId":"2600","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"zipFile","params":"(InputStreamin@OutputStreamzOut)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/96/e01cb06e79c2decd4f9d6825adfc9ae59d3f7c.src","preCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException\n    {\n        byte[] buffer = new byte[8 * 1024];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Pack.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"}],"commitId":"ac060429f9790f7923a6b3e70bfdf29d7b79e7d5","commitMessage":"@@@removed deprecated method calls.  changed date\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@367002 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-01-08 15:09:45","modifiedFileCount":"1","status":"M","submitter":"Kevin Jackson"},{"authorTime":"2007-09-17 19:13:48","codes":[{"authorDate":"2006-01-08 15:09:45","commitOrder":4,"curCode":"    protected void tarResource(Resource r, TarOutputStream tOut, String vPath,\n                               TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        if (tarFileSet != null) {\n            String fullpath = tarFileSet.getFullpath(this.getProject());\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix(this.getProject());\n                \r\n                if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {\n                    prefix = prefix + \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            if (vPath.startsWith(\"/\")\n                && !tarFileSet.getPreserveLeadingSlashes()) {\n                int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        TarEntry te = new TarEntry(vPath);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\"Resource: \" + r + \" larger than \" +\n                                         TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode(this.getProject()));\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                byte[] buffer = new byte[8 * 1024];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","date":"2006-01-08 15:09:45","endLine":469,"groupId":"8194","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"tarResource","params":"(Resourcer@TarOutputStreamtOut@StringvPath@TarFileSettarFileSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/72/0ccb5a7607d382ae665f4c30ee3c9186fbdbd3.src","preCode":"    protected void tarResource(Resource r, TarOutputStream tOut, String vPath,\n                               TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        if (tarFileSet != null) {\n            String fullpath = tarFileSet.getFullpath(this.getProject());\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix(this.getProject());\n                \r\n                if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {\n                    prefix = prefix + \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            if (vPath.startsWith(\"/\")\n                && !tarFileSet.getPreserveLeadingSlashes()) {\n                int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        TarEntry te = new TarEntry(vPath);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\"Resource: \" + r + \" larger than \" +\n                                         TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode(this.getProject()));\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                byte[] buffer = new byte[8 * 1024];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"N"},{"authorDate":"2007-09-17 19:13:48","commitOrder":4,"curCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException {\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","date":"2007-09-17 19:13:48","endLine":157,"groupId":"2600","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"zipFile","params":"(InputStreamin@OutputStreamzOut)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/77/35666c54dc042657c616357361cacc260e799b.src","preCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException {\n        byte[] buffer = new byte[8 * 1024];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Pack.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"f3e4a4790e917dbb1ba838de047c6826810e09b9","commitMessage":"@@@magic numbers\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@576370 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2007-09-17 19:13:48","modifiedFileCount":"8","status":"M","submitter":"Peter Reilly"},{"authorTime":"2007-09-17 19:13:48","codes":[{"authorDate":"2007-09-19 22:07:35","commitOrder":5,"curCode":"    protected void tarResource(Resource r, TarOutputStream tOut, String vPath,\n                               TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        if (tarFileSet != null) {\n            String fullpath = tarFileSet.getFullpath(this.getProject());\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix(this.getProject());\n                \r\n                if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {\n                    prefix = prefix + \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            if (vPath.startsWith(\"/\")\n                && !tarFileSet.getPreserveLeadingSlashes()) {\n                int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        TarEntry te = new TarEntry(vPath);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\n                    \"Resource: \" + r + \" larger than \"\n                    + TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode(this.getProject()));\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                byte[] buffer = new byte[BUFFER_SIZE];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","date":"2007-09-19 22:07:35","endLine":482,"groupId":"8194","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"tarResource","params":"(Resourcer@TarOutputStreamtOut@StringvPath@TarFileSettarFileSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/4a/08a6dabd2906d3809341420bf3e8ccc385dd50.src","preCode":"    protected void tarResource(Resource r, TarOutputStream tOut, String vPath,\n                               TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        if (tarFileSet != null) {\n            String fullpath = tarFileSet.getFullpath(this.getProject());\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix(this.getProject());\n                \r\n                if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {\n                    prefix = prefix + \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            if (vPath.startsWith(\"/\")\n                && !tarFileSet.getPreserveLeadingSlashes()) {\n                int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        TarEntry te = new TarEntry(vPath);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\n                    \"Resource: \" + r + \" larger than \"\n                    + TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode(this.getProject()));\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                byte[] buffer = new byte[8 * 1024];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"},{"authorDate":"2007-09-17 19:13:48","commitOrder":5,"curCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException {\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","date":"2007-09-17 19:13:48","endLine":157,"groupId":"2600","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"zipFile","params":"(InputStreamin@OutputStreamzOut)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/77/35666c54dc042657c616357361cacc260e799b.src","preCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException {\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Pack.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"}],"commitId":"a914355da299130eb773b14adfd1cf51a19f9a52","commitMessage":"@@@more magic numbers\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@577308 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2007-09-19 22:07:35","modifiedFileCount":"7","status":"M","submitter":"Peter Reilly"},{"authorTime":"2007-09-17 19:13:48","codes":[{"authorDate":"2009-08-25 16:04:14","commitOrder":6,"curCode":"    protected void tarResource(Resource r, TarOutputStream tOut, String vPath,\n                               TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        boolean preserveLeadingSlashes = false;\n\n        if (tarFileSet != null) {\n            String fullpath = tarFileSet.getFullpath(this.getProject());\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix(this.getProject());\n                \r\n                if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {\n                    prefix = prefix + \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            preserveLeadingSlashes = tarFileSet.getPreserveLeadingSlashes();\n\n            if (vPath.startsWith(\"/\") && !preserveLeadingSlashes) {\n                int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        TarEntry te = new TarEntry(vPath, preserveLeadingSlashes);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\n                    \"Resource: \" + r + \" larger than \"\n                    + TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode(this.getProject()));\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                byte[] buffer = new byte[BUFFER_SIZE];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","date":"2009-08-25 16:04:14","endLine":487,"groupId":"2600","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"tarResource","params":"(Resourcer@TarOutputStreamtOut@StringvPath@TarFileSettarFileSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/31/bea1329324fe6e3139189f7ed7d7b021c8589f.src","preCode":"    protected void tarResource(Resource r, TarOutputStream tOut, String vPath,\n                               TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        if (tarFileSet != null) {\n            String fullpath = tarFileSet.getFullpath(this.getProject());\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix(this.getProject());\n                \r\n                if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {\n                    prefix = prefix + \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            if (vPath.startsWith(\"/\")\n                && !tarFileSet.getPreserveLeadingSlashes()) {\n                int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        TarEntry te = new TarEntry(vPath);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\n                    \"Resource: \" + r + \" larger than \"\n                    + TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode(this.getProject()));\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                byte[] buffer = new byte[BUFFER_SIZE];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"M"},{"authorDate":"2007-09-17 19:13:48","commitOrder":6,"curCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException {\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","date":"2007-09-17 19:13:48","endLine":157,"groupId":"2600","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"zipFile","params":"(InputStreamin@OutputStreamzOut)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/77/35666c54dc042657c616357361cacc260e799b.src","preCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException {\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Pack.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"}],"commitId":"8741512d8c2e4cad30f0c6e6134d9a793f00d4b7","commitMessage":"@@@Make preserveLeadingSlashes in tar work again.  was broken by revision 755231\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@807513 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2009-08-25 16:04:14","modifiedFileCount":"2","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2007-09-17 19:13:48","codes":[{"authorDate":"2014-07-04 19:56:55","commitOrder":7,"curCode":"    protected void tarResource(final Resource r, final TarOutputStream tOut, String vPath,\n                               final TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        boolean preserveLeadingSlashes = false;\n\n        if (tarFileSet != null) {\n            final String fullpath = tarFileSet.getFullpath(this.getProject());\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix(this.getProject());\n                \r\n                if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {\n                    prefix = prefix + \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            preserveLeadingSlashes = tarFileSet.getPreserveLeadingSlashes();\n\n            if (vPath.startsWith(\"/\") && !preserveLeadingSlashes) {\n                final int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        final TarEntry te = new TarEntry(vPath, preserveLeadingSlashes);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            final ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                final TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\n                    \"Resource: \" + r + \" larger than \"\n                    + TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode(this.getProject()));\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                final byte[] buffer = new byte[BUFFER_SIZE];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","date":"2014-07-04 19:56:55","endLine":505,"groupId":"2600","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"tarResource","params":"(finalResourcer@finalTarOutputStreamtOut@StringvPath@finalTarFileSettarFileSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/26/8e660ab40d623dddb9d7a11cc6817bb30a5c1f.src","preCode":"    protected void tarResource(Resource r, TarOutputStream tOut, String vPath,\n                               TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        boolean preserveLeadingSlashes = false;\n\n        if (tarFileSet != null) {\n            String fullpath = tarFileSet.getFullpath(this.getProject());\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix(this.getProject());\n                \r\n                if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {\n                    prefix = prefix + \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            preserveLeadingSlashes = tarFileSet.getPreserveLeadingSlashes();\n\n            if (vPath.startsWith(\"/\") && !preserveLeadingSlashes) {\n                int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        TarEntry te = new TarEntry(vPath, preserveLeadingSlashes);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\n                    \"Resource: \" + r + \" larger than \"\n                    + TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode(this.getProject()));\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                byte[] buffer = new byte[BUFFER_SIZE];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":374,"status":"M"},{"authorDate":"2007-09-17 19:13:48","commitOrder":7,"curCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException {\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","date":"2007-09-17 19:13:48","endLine":157,"groupId":"2600","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"zipFile","params":"(InputStreamin@OutputStreamzOut)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/77/35666c54dc042657c616357361cacc260e799b.src","preCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException {\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Pack.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"}],"commitId":"13f6d98c9de38c6c53d4d855157c3fad620c3303","commitMessage":"@@@make it compile under Java5 (1.5.0_22-b03)","date":"2014-07-04 19:56:55","modifiedFileCount":"37","status":"M","submitter":"Jan Mat?rne"},{"authorTime":"2007-09-17 19:13:48","codes":[{"authorDate":"2018-04-05 17:32:22","commitOrder":8,"curCode":"    protected void tarResource(final Resource r, final TarOutputStream tOut, String vPath,\n                               final TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        boolean preserveLeadingSlashes = false;\n\n        if (tarFileSet != null) {\n            final String fullpath = tarFileSet.getFullpath(this.getProject());\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix(this.getProject());\n                \r\n                if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {\n                    prefix = prefix + \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            preserveLeadingSlashes = tarFileSet.getPreserveLeadingSlashes();\n\n            if (vPath.startsWith(\"/\") && !preserveLeadingSlashes) {\n                final int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        final TarEntry te = new TarEntry(vPath, preserveLeadingSlashes);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            final ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                final TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getLongUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getLongGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\n                    \"Resource: \" + r + \" larger than \"\n                    + TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode(this.getProject()));\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                final byte[] buffer = new byte[BUFFER_SIZE];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","date":"2018-04-05 17:32:22","endLine":521,"groupId":"2600","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"tarResource","params":"(finalResourcer@finalTarOutputStreamtOut@StringvPath@finalTarFileSettarFileSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/73/7e68cfd9486f0fc4864cb84982c90e92a0a8b4.src","preCode":"    protected void tarResource(final Resource r, final TarOutputStream tOut, String vPath,\n                               final TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        boolean preserveLeadingSlashes = false;\n\n        if (tarFileSet != null) {\n            final String fullpath = tarFileSet.getFullpath(this.getProject());\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix(this.getProject());\n                \r\n                if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {\n                    prefix = prefix + \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            preserveLeadingSlashes = tarFileSet.getPreserveLeadingSlashes();\n\n            if (vPath.startsWith(\"/\") && !preserveLeadingSlashes) {\n                final int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        final TarEntry te = new TarEntry(vPath, preserveLeadingSlashes);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            final ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                final TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\n                    \"Resource: \" + r + \" larger than \"\n                    + TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode(this.getProject()));\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                final byte[] buffer = new byte[BUFFER_SIZE];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"M"},{"authorDate":"2007-09-17 19:13:48","commitOrder":8,"curCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException {\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","date":"2007-09-17 19:13:48","endLine":157,"groupId":"2600","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"zipFile","params":"(InputStreamin@OutputStreamzOut)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/77/35666c54dc042657c616357361cacc260e799b.src","preCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException {\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Pack.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"}],"commitId":"f2459248f23aa439e2c5ab642d9d9d7e6cffc933","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/ant\n","date":"2018-04-05 17:32:22","modifiedFileCount":"138","status":"M","submitter":"Maarten Coene"},{"authorTime":"2007-09-17 19:13:48","codes":[{"authorDate":"2018-04-06 14:32:31","commitOrder":9,"curCode":"    protected void tarResource(final Resource r, final TarOutputStream tOut, String vPath,\n                               final TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        boolean preserveLeadingSlashes = false;\n\n        if (tarFileSet != null) {\n            final String fullpath = tarFileSet.getFullpath(this.getProject());\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix(this.getProject());\n                \r\n                if (!prefix.isEmpty() && !prefix.endsWith(\"/\")) {\n                    prefix += \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            preserveLeadingSlashes = tarFileSet.getPreserveLeadingSlashes();\n\n            if (vPath.startsWith(\"/\") && !preserveLeadingSlashes) {\n                final int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        final TarEntry te = new TarEntry(vPath, preserveLeadingSlashes);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            final ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                final TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getLongUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getLongGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\n                    \"Resource: \" + r + \" larger than \"\n                    + TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode(this.getProject()));\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                final byte[] buffer = new byte[BUFFER_SIZE];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","date":"2018-04-06 14:48:19","endLine":521,"groupId":"2600","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"tarResource","params":"(finalResourcer@finalTarOutputStreamtOut@StringvPath@finalTarFileSettarFileSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/97/8b7b54aa414f5d542e385d0032926598a08c90.src","preCode":"    protected void tarResource(final Resource r, final TarOutputStream tOut, String vPath,\n                               final TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        boolean preserveLeadingSlashes = false;\n\n        if (tarFileSet != null) {\n            final String fullpath = tarFileSet.getFullpath(this.getProject());\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix(this.getProject());\n                \r\n                if (prefix.length() > 0 && !prefix.endsWith(\"/\")) {\n                    prefix = prefix + \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            preserveLeadingSlashes = tarFileSet.getPreserveLeadingSlashes();\n\n            if (vPath.startsWith(\"/\") && !preserveLeadingSlashes) {\n                final int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        final TarEntry te = new TarEntry(vPath, preserveLeadingSlashes);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            final ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                final TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getLongUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getLongGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\n                    \"Resource: \" + r + \" larger than \"\n                    + TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode(this.getProject()));\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                final byte[] buffer = new byte[BUFFER_SIZE];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"M"},{"authorDate":"2007-09-17 19:13:48","commitOrder":9,"curCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException {\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","date":"2007-09-17 19:13:48","endLine":157,"groupId":"2600","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"zipFile","params":"(InputStreamin@OutputStreamzOut)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/77/35666c54dc042657c616357361cacc260e799b.src","preCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException {\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Pack.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"}],"commitId":"4b14d85f11b9a7728dcd2d9420551fd28bf8f45e","commitMessage":"@@@Avoid repetition","date":"2018-04-06 14:48:19","modifiedFileCount":"28","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2007-09-17 19:13:48","codes":[{"authorDate":"2018-04-06 20:50:56","commitOrder":10,"curCode":"    protected void tarResource(final Resource r, final TarOutputStream tOut, String vPath,\n                               final TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        boolean preserveLeadingSlashes = false;\n\n        if (tarFileSet != null) {\n            final String fullpath = tarFileSet.getFullpath(this.getProject());\n            if (fullpath.isEmpty()) {\n                \r\n                if (vPath.isEmpty()) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix(this.getProject());\n                \r\n                if (!prefix.isEmpty() && !prefix.endsWith(\"/\")) {\n                    prefix += \"/\";\n                }\n                vPath = prefix + vPath;\n            } else {\n                vPath = fullpath;\n            }\n\n            preserveLeadingSlashes = tarFileSet.getPreserveLeadingSlashes();\n\n            if (vPath.startsWith(\"/\") && !preserveLeadingSlashes) {\n                final int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        final TarEntry te = new TarEntry(vPath, preserveLeadingSlashes);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            final ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                final TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getLongUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getLongGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\n                    \"Resource: \" + r + \" larger than \"\n                    + TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode(this.getProject()));\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                final byte[] buffer = new byte[BUFFER_SIZE];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","date":"2018-04-06 20:50:56","endLine":521,"groupId":"10370","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"tarResource","params":"(finalResourcer@finalTarOutputStreamtOut@StringvPath@finalTarFileSettarFileSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/51/12c5ccce8d30643bfed4b4f3f37d6d17b26c5b.src","preCode":"    protected void tarResource(final Resource r, final TarOutputStream tOut, String vPath,\n                               final TarFileSet tarFileSet)\n        throws IOException {\n\n        if (!r.isExists()) {\n            return;\n        }\n\n        boolean preserveLeadingSlashes = false;\n\n        if (tarFileSet != null) {\n            final String fullpath = tarFileSet.getFullpath(this.getProject());\n            if (fullpath.length() > 0) {\n                vPath = fullpath;\n            } else {\n                \r\n                if (vPath.length() <= 0) {\n                    return;\n                }\n\n                String prefix = tarFileSet.getPrefix(this.getProject());\n                \r\n                if (!prefix.isEmpty() && !prefix.endsWith(\"/\")) {\n                    prefix += \"/\";\n                }\n                vPath = prefix + vPath;\n            }\n\n            preserveLeadingSlashes = tarFileSet.getPreserveLeadingSlashes();\n\n            if (vPath.startsWith(\"/\") && !preserveLeadingSlashes) {\n                final int l = vPath.length();\n                if (l <= 1) {\n                    \r\n                    return;\n                }\n                vPath = vPath.substring(1, l);\n            }\n        }\n\n        if (r.isDirectory() && !vPath.endsWith(\"/\")) {\n            vPath += \"/\";\n        }\n\n        if (vPath.length() >= TarConstants.NAMELEN) {\n            if (longFileMode.isOmitMode()) {\n                log(\"Omitting: \" + vPath, Project.MSG_INFO);\n                return;\n            } else if (longFileMode.isWarnMode()) {\n                log(\"Entry: \" + vPath + \" longer than \"\n                    + TarConstants.NAMELEN + \" characters.\",\n                    Project.MSG_WARN);\n                if (!longWarningGiven) {\n                    log(\"Resulting tar file can only be processed \"\n                        + \"successfully by GNU compatible tar commands\",\n                        Project.MSG_WARN);\n                    longWarningGiven = true;\n                }\n            } else if (longFileMode.isFailMode()) {\n                throw new BuildException(\"Entry: \" + vPath\n                        + \" longer than \" + TarConstants.NAMELEN\n                        + \"characters.\", getLocation());\n            }\n        }\n\n        final TarEntry te = new TarEntry(vPath, preserveLeadingSlashes);\n        te.setModTime(r.getLastModified());\n        \r\n        if (r instanceof ArchiveResource) {\n            final ArchiveResource ar = (ArchiveResource) r;\n            te.setMode(ar.getMode());\n            if (r instanceof TarResource) {\n                final TarResource tr = (TarResource) r;\n                te.setUserName(tr.getUserName());\n                te.setUserId(tr.getLongUid());\n                te.setGroupName(tr.getGroup());\n                te.setGroupId(tr.getLongGid());\n            }\n        }\n\n        if (!r.isDirectory()) {\n            if (r.size() > TarConstants.MAXSIZE) {\n                throw new BuildException(\n                    \"Resource: \" + r + \" larger than \"\n                    + TarConstants.MAXSIZE + \" bytes.\");\n            }\n            te.setSize(r.getSize());\n            \r\n            if (tarFileSet != null && tarFileSet.hasFileModeBeenSet()) {\n                te.setMode(tarFileSet.getMode());\n            }\n        } else if (tarFileSet != null && tarFileSet.hasDirModeBeenSet()) {\n            \r\n            te.setMode(tarFileSet.getDirMode(this.getProject()));\n        }\n\n        if (tarFileSet != null) {\n            \r\n            if (tarFileSet.hasUserNameBeenSet()) {\n                te.setUserName(tarFileSet.getUserName());\n            }\n            if (tarFileSet.hasGroupBeenSet()) {\n                te.setGroupName(tarFileSet.getGroup());\n            }\n            if (tarFileSet.hasUserIdBeenSet()) {\n                te.setUserId(tarFileSet.getUid());\n            }\n            if (tarFileSet.hasGroupIdBeenSet()) {\n                te.setGroupId(tarFileSet.getGid());\n            }\n        }\n\n        InputStream in = null;\n        try {\n            tOut.putNextEntry(te);\n\n            if (!r.isDirectory()) {\n                in = r.getInputStream();\n\n                final byte[] buffer = new byte[BUFFER_SIZE];\n                int count = 0;\n                do {\n                    tOut.write(buffer, 0, count);\n                    count = in.read(buffer, 0, buffer.length);\n                } while (count != -1);\n            }\n\n            tOut.closeEntry();\n        } finally {\n            FileUtils.close(in);\n        }\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Tar.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"M"},{"authorDate":"2007-09-17 19:13:48","commitOrder":10,"curCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException {\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","date":"2007-09-17 19:13:48","endLine":157,"groupId":"10370","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"zipFile","params":"(InputStreamin@OutputStreamzOut)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/77/35666c54dc042657c616357361cacc260e799b.src","preCode":"    private void zipFile(InputStream in, OutputStream zOut)\n        throws IOException {\n        byte[] buffer = new byte[BUFFER_SIZE];\n        int count = 0;\n        do {\n            zOut.write(buffer, 0, count);\n            count = in.read(buffer, 0, buffer.length);\n        } while (count != -1);\n    }\n","realPath":"src/main/org/apache/tools/ant/taskdefs/Pack.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"}],"commitId":"30f52135af7a18cbf3f140089e90bdb39ceee134","commitMessage":"@@@Use null-or-empty pattern","date":"2018-04-06 20:50:56","modifiedFileCount":"80","status":"M","submitter":"Gintas Grigelionis"}]
