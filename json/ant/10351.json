[{"authorTime":"2006-09-22 03:10:48","codes":[{"authorDate":"2006-09-22 03:10:48","commitOrder":1,"curCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (org.apache.tools.ant.BuildException ex) {\n            buildException = ex;\n            if ((null != msg) && (!ex.getMessage().equals(msg))) {\n                fail(\"Should throw BuildException because '\" + cause\n                        + \"' with message '\" + msg\n                        + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2006-09-22 03:10:48","endLine":323,"groupId":"8493","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"expectSpecificBuildException","params":"(Stringtarget@Stringcause@Stringmsg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/0b/55ce7c031d4a0225a3a5a2164206456cddd451.src","preCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (org.apache.tools.ant.BuildException ex) {\n            buildException = ex;\n            if ((null != msg) && (!ex.getMessage().equals(msg))) {\n                fail(\"Should throw BuildException because '\" + cause\n                        + \"' with message '\" + msg\n                        + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"B"},{"authorDate":"2006-09-22 03:10:48","commitOrder":1,"curCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (org.apache.tools.ant.BuildException ex) {\n            buildException = ex;\n            if ((null != contains) && (ex.getMessage().indexOf(contains) == -1)) {\n                fail(\"Should throw BuildException because '\" + cause + \"' with message containing '\" + contains + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2006-09-22 03:10:48","endLine":344,"groupId":"2838","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"expectBuildExceptionContaining","params":"(Stringtarget@Stringcause@Stringcontains)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/0b/55ce7c031d4a0225a3a5a2164206456cddd451.src","preCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (org.apache.tools.ant.BuildException ex) {\n            buildException = ex;\n            if ((null != contains) && (ex.getMessage().indexOf(contains) == -1)) {\n                fail(\"Should throw BuildException because '\" + cause + \"' with message containing '\" + contains + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"B"}],"commitId":"73d66d2c6d6e0384fd66eba1f20ef97469c49b18","commitMessage":"@@@Restructuring to allow junit and antunit tests both.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ant/core/trunk@448636 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2006-09-22 03:10:48","modifiedFileCount":"0","status":"B","submitter":"Matthew Jason Benson"},{"authorTime":"2006-09-22 03:10:48","codes":[{"authorDate":"2017-12-12 06:30:20","commitOrder":2,"curCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            if ((null != msg) && (!ex.getMessage().equals(msg))) {\n                fail(\"Should throw BuildException because '\" + cause\n                        + \"' with message '\" + msg\n                        + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2017-12-12 06:43:32","endLine":413,"groupId":"8493","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"expectSpecificBuildException","params":"(Stringtarget@Stringcause@Stringmsg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e8/21bae6d52534b07727960d72205832f8939acc.src","preCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (org.apache.tools.ant.BuildException ex) {\n            buildException = ex;\n            if ((null != msg) && (!ex.getMessage().equals(msg))) {\n                fail(\"Should throw BuildException because '\" + cause\n                        + \"' with message '\" + msg\n                        + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"},{"authorDate":"2006-09-22 03:10:48","commitOrder":2,"curCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (org.apache.tools.ant.BuildException ex) {\n            buildException = ex;\n            if ((null != contains) && (ex.getMessage().indexOf(contains) == -1)) {\n                fail(\"Should throw BuildException because '\" + cause + \"' with message containing '\" + contains + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2006-09-22 03:10:48","endLine":344,"groupId":"2838","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"expectBuildExceptionContaining","params":"(Stringtarget@Stringcause@Stringcontains)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/0b/55ce7c031d4a0225a3a5a2164206456cddd451.src","preCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (org.apache.tools.ant.BuildException ex) {\n            buildException = ex;\n            if ((null != contains) && (ex.getMessage().indexOf(contains) == -1)) {\n                fail(\"Should throw BuildException because '\" + cause + \"' with message containing '\" + contains + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"N"}],"commitId":"7f1e7628b357082fb1f786d1f58156a336db45e3","commitMessage":"@@@Checkstyle: whitespace.  line continuation and modifier idiosyncrasies","date":"2017-12-12 06:43:32","modifiedFileCount":"251","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-04-01 16:48:33","codes":[{"authorDate":"2017-12-12 06:30:20","commitOrder":3,"curCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            if ((null != msg) && (!ex.getMessage().equals(msg))) {\n                fail(\"Should throw BuildException because '\" + cause\n                        + \"' with message '\" + msg\n                        + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2017-12-12 06:43:32","endLine":413,"groupId":"8493","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"expectSpecificBuildException","params":"(Stringtarget@Stringcause@Stringmsg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e8/21bae6d52534b07727960d72205832f8939acc.src","preCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            if ((null != msg) && (!ex.getMessage().equals(msg))) {\n                fail(\"Should throw BuildException because '\" + cause\n                        + \"' with message '\" + msg\n                        + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"N"},{"authorDate":"2018-04-01 16:48:33","commitOrder":3,"curCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (org.apache.tools.ant.BuildException ex) {\n            buildException = ex;\n            if ((null != contains) && (!ex.getMessage().contains(contains))) {\n                fail(\"Should throw BuildException because '\" + cause + \"' with message containing '\" + contains + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2018-04-01 16:48:33","endLine":434,"groupId":"6738","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"expectBuildExceptionContaining","params":"(Stringtarget@Stringcause@Stringcontains)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/60/bf68b8413e0d580929fb69ab4e6849439216b9.src","preCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (org.apache.tools.ant.BuildException ex) {\n            buildException = ex;\n            if ((null != contains) && (ex.getMessage().indexOf(contains) == -1)) {\n                fail(\"Should throw BuildException because '\" + cause + \"' with message containing '\" + contains + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"M"}],"commitId":"92f18cff48482b512e6510464150ba9beb719935","commitMessage":"@@@Use String.contains()","date":"2018-04-01 16:48:33","modifiedFileCount":"59","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-04-03 15:27:18","codes":[{"authorDate":"2017-12-12 06:30:20","commitOrder":4,"curCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            if ((null != msg) && (!ex.getMessage().equals(msg))) {\n                fail(\"Should throw BuildException because '\" + cause\n                        + \"' with message '\" + msg\n                        + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2017-12-12 06:43:32","endLine":413,"groupId":"8493","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"expectSpecificBuildException","params":"(Stringtarget@Stringcause@Stringmsg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/e8/21bae6d52534b07727960d72205832f8939acc.src","preCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            if ((null != msg) && (!ex.getMessage().equals(msg))) {\n                fail(\"Should throw BuildException because '\" + cause\n                        + \"' with message '\" + msg\n                        + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"N"},{"authorDate":"2018-04-03 15:27:18","commitOrder":4,"curCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (org.apache.tools.ant.BuildException ex) {\n            buildException = ex;\n            if (null != contains && !ex.getMessage().contains(contains)) {\n                fail(\"Should throw BuildException because '\" + cause + \"' with message containing '\" + contains + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2018-04-03 15:27:18","endLine":434,"groupId":"5988","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"expectBuildExceptionContaining","params":"(Stringtarget@Stringcause@Stringcontains)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/72/e18a71459a36fd0d46c5e4bd4139c64ffe9009.src","preCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (org.apache.tools.ant.BuildException ex) {\n            buildException = ex;\n            if ((null != contains) && (!ex.getMessage().contains(contains))) {\n                fail(\"Should throw BuildException because '\" + cause + \"' with message containing '\" + contains + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"M"}],"commitId":"bd56d7b9c60bce356ee27a5684f44ff87b68ddb2","commitMessage":"@@@Simplify assertions","date":"2018-04-03 15:27:18","modifiedFileCount":"38","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-04-03 15:27:18","codes":[{"authorDate":"2018-04-06 13:23:28","commitOrder":5,"curCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            if (null != msg && !ex.getMessage().equals(msg)) {\n                fail(\"Should throw BuildException because '\" + cause\n                        + \"' with message '\" + msg\n                        + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2018-04-06 13:53:30","endLine":413,"groupId":"8493","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"expectSpecificBuildException","params":"(Stringtarget@Stringcause@Stringmsg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/28/ca2bd3770fd6e3f56dea25e38bb69f547e64b3.src","preCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            if ((null != msg) && (!ex.getMessage().equals(msg))) {\n                fail(\"Should throw BuildException because '\" + cause\n                        + \"' with message '\" + msg\n                        + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"},{"authorDate":"2018-04-03 15:27:18","commitOrder":5,"curCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (org.apache.tools.ant.BuildException ex) {\n            buildException = ex;\n            if (null != contains && !ex.getMessage().contains(contains)) {\n                fail(\"Should throw BuildException because '\" + cause + \"' with message containing '\" + contains + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2018-04-03 15:27:18","endLine":434,"groupId":"5988","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"expectBuildExceptionContaining","params":"(Stringtarget@Stringcause@Stringcontains)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/72/e18a71459a36fd0d46c5e4bd4139c64ffe9009.src","preCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (org.apache.tools.ant.BuildException ex) {\n            buildException = ex;\n            if (null != contains && !ex.getMessage().contains(contains)) {\n                fail(\"Should throw BuildException because '\" + cause + \"' with message containing '\" + contains + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"N"}],"commitId":"095aaaef7556a63bab3b8ac80993722a54ed28b6","commitMessage":"@@@Chop extraneous parentheses","date":"2018-04-06 13:53:30","modifiedFileCount":"36","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-04-23 06:17:24","codes":[{"authorDate":"2018-04-23 06:17:24","commitOrder":6,"curCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            assertTrue(\"Should throw BuildException because '\" + cause\n                    + \"' with message '\" + msg + \"' (actual message '\"\n                            + ex.getMessage() + \"' instead)\",\n                    msg != null && !ex.getMessage().equals(msg));\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2018-04-23 06:17:24","endLine":412,"groupId":"1853","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"expectSpecificBuildException","params":"(Stringtarget@Stringcause@Stringmsg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ac/d7471a73eb5835ad164fe96ed2a9cab3de48f2.src","preCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            if (null != msg && !ex.getMessage().equals(msg)) {\n                fail(\"Should throw BuildException because '\" + cause\n                        + \"' with message '\" + msg\n                        + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"},{"authorDate":"2018-04-23 06:17:24","commitOrder":6,"curCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            assertTrue(\"Should throw BuildException because '\" + cause\n                    + \"' with message containing '\" + contains + \"' (actual message '\"\n                            + ex.getMessage() + \"' instead)\",\n                    null != contains && !ex.getMessage().contains(contains));\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2018-04-23 06:17:24","endLine":434,"groupId":"0","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"expectBuildExceptionContaining","params":"(Stringtarget@Stringcause@Stringcontains)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/ac/d7471a73eb5835ad164fe96ed2a9cab3de48f2.src","preCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (org.apache.tools.ant.BuildException ex) {\n            buildException = ex;\n            if (null != contains && !ex.getMessage().contains(contains)) {\n                fail(\"Should throw BuildException because '\" + cause + \"' with message containing '\" + contains + \"' (actual message '\" + ex.getMessage() + \"' instead)\");\n            }\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"M"}],"commitId":"8a3b1658ca76b57709b135877bc478fdb041f835","commitMessage":"@@@Don?t fail.  assert","date":"2018-04-23 06:17:24","modifiedFileCount":"9","status":"M","submitter":"Gintas Grigelionis"},{"authorTime":"2018-04-23 12:30:31","codes":[{"authorDate":"2018-04-23 12:30:31","commitOrder":7,"curCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            assertTrue(\"Should throw BuildException because '\" + cause\n                    + \"' with message '\" + msg + \"' (actual message '\"\n                            + ex.getMessage() + \"' instead)\",\n                    msg != null && ex.getMessage().equals(msg));\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2018-04-23 12:30:31","endLine":412,"groupId":"1853","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"expectSpecificBuildException","params":"(Stringtarget@Stringcause@Stringmsg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/a3/e5ad1a686224f5c2a7a84e8c320395d0435e66.src","preCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            assertTrue(\"Should throw BuildException because '\" + cause\n                    + \"' with message '\" + msg + \"' (actual message '\"\n                            + ex.getMessage() + \"' instead)\",\n                    msg != null && !ex.getMessage().equals(msg));\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"},{"authorDate":"2018-04-23 12:30:31","commitOrder":7,"curCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            assertTrue(\"Should throw BuildException because '\" + cause\n                    + \"' with message containing '\" + contains + \"' (actual message '\"\n                            + ex.getMessage() + \"' instead)\",\n                    null != contains && ex.getMessage().contains(contains));\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2018-04-23 12:30:31","endLine":434,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"expectBuildExceptionContaining","params":"(Stringtarget@Stringcause@Stringcontains)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/a3/e5ad1a686224f5c2a7a84e8c320395d0435e66.src","preCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            assertTrue(\"Should throw BuildException because '\" + cause\n                    + \"' with message containing '\" + contains + \"' (actual message '\"\n                            + ex.getMessage() + \"' instead)\",\n                    null != contains && !ex.getMessage().contains(contains));\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"M"}],"commitId":"1fd0352294a50a6c4815e50404cd8ee6806ed854","commitMessage":"@@@test logic got reversed\n","date":"2018-04-23 12:30:31","modifiedFileCount":"1","status":"M","submitter":"Stefan Bodewig"},{"authorTime":"2018-04-23 12:49:01","codes":[{"authorDate":"2018-04-23 12:49:01","commitOrder":8,"curCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            assertTrue(\"Should throw BuildException because '\" + cause\n                    + \"' with message '\" + msg + \"' (actual message '\"\n                            + ex.getMessage() + \"' instead)\",\n                    msg == null || ex.getMessage().equals(msg));\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2018-04-23 12:49:01","endLine":412,"groupId":"10351","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"expectSpecificBuildException","params":"(Stringtarget@Stringcause@Stringmsg)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/dd/c15044b5fb4361195417d00416896757abbb16.src","preCode":"    public void expectSpecificBuildException(String target, String cause, String msg) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            assertTrue(\"Should throw BuildException because '\" + cause\n                    + \"' with message '\" + msg + \"' (actual message '\"\n                            + ex.getMessage() + \"' instead)\",\n                    msg != null && ex.getMessage().equals(msg));\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"},{"authorDate":"2018-04-23 12:49:01","commitOrder":8,"curCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            assertTrue(\"Should throw BuildException because '\" + cause\n                    + \"' with message containing '\" + contains + \"' (actual message '\"\n                            + ex.getMessage() + \"' instead)\",\n                    null == contains || ex.getMessage().contains(contains));\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","date":"2018-04-23 12:49:01","endLine":434,"groupId":"10351","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"expectBuildExceptionContaining","params":"(Stringtarget@Stringcause@Stringcontains)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/dd/c15044b5fb4361195417d00416896757abbb16.src","preCode":"    public void expectBuildExceptionContaining(String target, String cause, String contains) {\n        try {\n            executeTarget(target);\n        } catch (BuildException ex) {\n            buildException = ex;\n            assertTrue(\"Should throw BuildException because '\" + cause\n                    + \"' with message containing '\" + contains + \"' (actual message '\"\n                            + ex.getMessage() + \"' instead)\",\n                    null != contains && ex.getMessage().contains(contains));\n            return;\n        }\n        fail(\"Should throw BuildException because: \" + cause);\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/BuildFileTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"M"}],"commitId":"8c5b5edfaf426223bd1a920846442de858a3b7f2","commitMessage":"@@@matching on the exception message used to be optional\n","date":"2018-04-23 12:49:01","modifiedFileCount":"1","status":"M","submitter":"Stefan Bodewig"}]
