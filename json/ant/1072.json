[{"authorTime":"2018-08-27 20:16:12","codes":[{"authorDate":"2018-08-27 20:16:12","commitOrder":1,"curCode":"    public void testExcludeJUnitPlatformLibs() throws Exception {\n        final String targetName = \"test-junit-platform-lib-excluded\";\n        try {\n            buildRule.executeTarget(targetName);\n            Assert.fail(targetName + \" was expected to fail since JUnit platform libraries \" +\n                    \"weren't included in the classpath of the forked JVM\");\n        } catch (BuildException be) {\n            \r\n            final String cnfeMessage = ClassNotFoundException.class.getName() + \": org.junit.platform\";\n            if (!buildRule.getFullLog().contains(cnfeMessage)) {\n                throw be;\n            }\n        }\n        final String exlusionLogMsg = \"Excluding JUnit platform libraries\";\n        Assert.assertTrue(\"JUnit platform libraries weren't excluded from classpath\", buildRule.getFullLog().contains(exlusionLogMsg));\n    }\n","date":"2018-08-27 20:18:53","endLine":213,"groupId":"10747","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExcludeJUnitPlatformLibs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/cd/ae304d21e76ad857ff85b60fcab350f296f211.src","preCode":"    public void testExcludeJUnitPlatformLibs() throws Exception {\n        final String targetName = \"test-junit-platform-lib-excluded\";\n        try {\n            buildRule.executeTarget(targetName);\n            Assert.fail(targetName + \" was expected to fail since JUnit platform libraries \" +\n                    \"weren't included in the classpath of the forked JVM\");\n        } catch (BuildException be) {\n            \r\n            final String cnfeMessage = ClassNotFoundException.class.getName() + \": org.junit.platform\";\n            if (!buildRule.getFullLog().contains(cnfeMessage)) {\n                throw be;\n            }\n        }\n        final String exlusionLogMsg = \"Excluding JUnit platform libraries\";\n        Assert.assertTrue(\"JUnit platform libraries weren't excluded from classpath\", buildRule.getFullLog().contains(exlusionLogMsg));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junitlauncher/JUnitLauncherTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"B"},{"authorDate":"2018-08-27 20:16:12","commitOrder":1,"curCode":"    public void testExcludeAntRuntimeLibs() throws Exception {\n        final String targetName = \"test-junit-ant-runtime-lib-excluded\";\n        try {\n            buildRule.executeTarget(targetName);\n            Assert.fail(targetName + \" was expected to fail since JUnit platform libraries \" +\n                    \"weren't included in the classpath of the forked JVM\");\n        } catch (BuildException be) {\n            \r\n            \r\n            final String missingMainClass = \"Could not find or load main class \" + StandaloneLauncher.class.getName();\n            if (!buildRule.getFullLog().contains(missingMainClass)) {\n                throw be;\n            }\n        }\n        final String exlusionLogMsg = \"Excluding Ant runtime libraries\";\n        Assert.assertTrue(\"Ant runtime libraries weren't excluded from classpath\", buildRule.getFullLog().contains(exlusionLogMsg));\n    }\n","date":"2018-08-27 20:18:53","endLine":239,"groupId":"5911","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExcludeAntRuntimeLibs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/cd/ae304d21e76ad857ff85b60fcab350f296f211.src","preCode":"    public void testExcludeAntRuntimeLibs() throws Exception {\n        final String targetName = \"test-junit-ant-runtime-lib-excluded\";\n        try {\n            buildRule.executeTarget(targetName);\n            Assert.fail(targetName + \" was expected to fail since JUnit platform libraries \" +\n                    \"weren't included in the classpath of the forked JVM\");\n        } catch (BuildException be) {\n            \r\n            \r\n            final String missingMainClass = \"Could not find or load main class \" + StandaloneLauncher.class.getName();\n            if (!buildRule.getFullLog().contains(missingMainClass)) {\n                throw be;\n            }\n        }\n        final String exlusionLogMsg = \"Excluding Ant runtime libraries\";\n        Assert.assertTrue(\"Ant runtime libraries weren't excluded from classpath\", buildRule.getFullLog().contains(exlusionLogMsg));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junitlauncher/JUnitLauncherTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"B"}],"commitId":"8590e1539af7e5057d02941911c44d887ba3caca","commitMessage":"@@@[junitlauncher] More fine-grained control over classpath for forked tests in junitlauncher\n\n- Allows Ant runtime libraries to be excluded and thus letting the user have control over where those library jars come from\n- Allows JUnit platform libraries to be excluded and thus letting the user have control over where those library jars come from\n\nPlus added testcases to verify this feature\n","date":"2018-08-27 20:18:53","modifiedFileCount":"4","status":"B","submitter":"Jaikiran Pai"},{"authorTime":"2018-08-27 21:20:15","codes":[{"authorDate":"2018-08-27 21:20:15","commitOrder":2,"curCode":"    public void testExcludeJUnitPlatformLibs() throws Exception {\n        final String targetName = \"test-junit-platform-lib-excluded\";\n        try {\n            buildRule.executeTarget(targetName);\n            Assert.fail(targetName + \" was expected to fail since JUnit platform libraries \" +\n                    \"weren't included in the classpath of the forked JVM\");\n        } catch (BuildException be) {\n            \r\n            final String cnfeMessage = ClassNotFoundException.class.getName() + \": org.junit.platform\";\n            if (!buildRule.getFullLog().contains(cnfeMessage)) {\n                throw be;\n            }\n        }\n        final String exclusionLogMsg = \"Excluding JUnit platform libraries\";\n        Assert.assertTrue(\"JUnit platform libraries weren't excluded from classpath\", buildRule.getFullLog().contains(exclusionLogMsg));\n    }\n","date":"2018-08-27 21:20:15","endLine":216,"groupId":"10747","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExcludeJUnitPlatformLibs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/97/a40c184a6f438e05d2e54f26aeb1346a905faf.src","preCode":"    public void testExcludeJUnitPlatformLibs() throws Exception {\n        final String targetName = \"test-junit-platform-lib-excluded\";\n        try {\n            buildRule.executeTarget(targetName);\n            Assert.fail(targetName + \" was expected to fail since JUnit platform libraries \" +\n                    \"weren't included in the classpath of the forked JVM\");\n        } catch (BuildException be) {\n            \r\n            final String cnfeMessage = ClassNotFoundException.class.getName() + \": org.junit.platform\";\n            if (!buildRule.getFullLog().contains(cnfeMessage)) {\n                throw be;\n            }\n        }\n        final String exlusionLogMsg = \"Excluding JUnit platform libraries\";\n        Assert.assertTrue(\"JUnit platform libraries weren't excluded from classpath\", buildRule.getFullLog().contains(exlusionLogMsg));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junitlauncher/JUnitLauncherTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2018-08-27 21:20:15","commitOrder":2,"curCode":"    public void testExcludeAntRuntimeLibs() throws Exception {\n        final String targetName = \"test-junit-ant-runtime-lib-excluded\";\n        try {\n            buildRule.executeTarget(targetName);\n            Assert.fail(targetName + \" was expected to fail since JUnit platform libraries \" +\n                    \"weren't included in the classpath of the forked JVM\");\n        } catch (BuildException be) {\n            \r\n            \r\n            final String missingMainClass = \"Could not find or load main class \" + StandaloneLauncher.class.getName();\n            if (!buildRule.getFullLog().contains(missingMainClass)) {\n                throw be;\n            }\n        }\n        final String exclusionLogMsg = \"Excluding Ant runtime libraries\";\n        Assert.assertTrue(\"Ant runtime libraries weren't excluded from classpath\", buildRule.getFullLog().contains(exclusionLogMsg));\n    }\n","date":"2018-08-27 21:20:15","endLine":242,"groupId":"5911","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExcludeAntRuntimeLibs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/97/a40c184a6f438e05d2e54f26aeb1346a905faf.src","preCode":"    public void testExcludeAntRuntimeLibs() throws Exception {\n        final String targetName = \"test-junit-ant-runtime-lib-excluded\";\n        try {\n            buildRule.executeTarget(targetName);\n            Assert.fail(targetName + \" was expected to fail since JUnit platform libraries \" +\n                    \"weren't included in the classpath of the forked JVM\");\n        } catch (BuildException be) {\n            \r\n            \r\n            final String missingMainClass = \"Could not find or load main class \" + StandaloneLauncher.class.getName();\n            if (!buildRule.getFullLog().contains(missingMainClass)) {\n                throw be;\n            }\n        }\n        final String exlusionLogMsg = \"Excluding Ant runtime libraries\";\n        Assert.assertTrue(\"Ant runtime libraries weren't excluded from classpath\", buildRule.getFullLog().contains(exlusionLogMsg));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junitlauncher/JUnitLauncherTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"}],"commitId":"d7c518584ecf5dc4b586dd4a1a9a20dec50a1a20","commitMessage":"@@@[junitlauncher] add some more tests to verify exclusion of Ant runtime and JUnit platform libraries from the forked JVM classpath of junitlauncher task\n","date":"2018-08-27 21:20:15","modifiedFileCount":"1","status":"M","submitter":"Jaikiran Pai"},{"authorTime":"2019-05-21 21:44:39","codes":[{"authorDate":"2018-08-27 21:20:15","commitOrder":3,"curCode":"    public void testExcludeJUnitPlatformLibs() throws Exception {\n        final String targetName = \"test-junit-platform-lib-excluded\";\n        try {\n            buildRule.executeTarget(targetName);\n            Assert.fail(targetName + \" was expected to fail since JUnit platform libraries \" +\n                    \"weren't included in the classpath of the forked JVM\");\n        } catch (BuildException be) {\n            \r\n            final String cnfeMessage = ClassNotFoundException.class.getName() + \": org.junit.platform\";\n            if (!buildRule.getFullLog().contains(cnfeMessage)) {\n                throw be;\n            }\n        }\n        final String exclusionLogMsg = \"Excluding JUnit platform libraries\";\n        Assert.assertTrue(\"JUnit platform libraries weren't excluded from classpath\", buildRule.getFullLog().contains(exclusionLogMsg));\n    }\n","date":"2018-08-27 21:20:15","endLine":216,"groupId":"1072","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExcludeJUnitPlatformLibs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/97/a40c184a6f438e05d2e54f26aeb1346a905faf.src","preCode":"    public void testExcludeJUnitPlatformLibs() throws Exception {\n        final String targetName = \"test-junit-platform-lib-excluded\";\n        try {\n            buildRule.executeTarget(targetName);\n            Assert.fail(targetName + \" was expected to fail since JUnit platform libraries \" +\n                    \"weren't included in the classpath of the forked JVM\");\n        } catch (BuildException be) {\n            \r\n            final String cnfeMessage = ClassNotFoundException.class.getName() + \": org.junit.platform\";\n            if (!buildRule.getFullLog().contains(cnfeMessage)) {\n                throw be;\n            }\n        }\n        final String exclusionLogMsg = \"Excluding JUnit platform libraries\";\n        Assert.assertTrue(\"JUnit platform libraries weren't excluded from classpath\", buildRule.getFullLog().contains(exclusionLogMsg));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junitlauncher/JUnitLauncherTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"N"},{"authorDate":"2019-05-21 21:44:39","commitOrder":3,"curCode":"    public void testExcludeAntRuntimeLibs() throws Exception {\n        final String targetName = \"test-junit-ant-runtime-lib-excluded\";\n        try {\n            buildRule.executeTarget(targetName);\n            Assert.fail(targetName + \" was expected to fail since Ant runtime libraries \" +\n                    \"weren't included in the classpath of the forked JVM\");\n        } catch (BuildException be) {\n            \r\n            \r\n            final String missingMainClass = \"Could not find or load main class \" + StandaloneLauncher.class.getName();\n            if (!buildRule.getFullLog().contains(missingMainClass)) {\n                throw be;\n            }\n        }\n        final String exclusionLogMsg = \"Excluding Ant runtime libraries\";\n        Assert.assertTrue(\"Ant runtime libraries weren't excluded from classpath\", buildRule.getFullLog().contains(exclusionLogMsg));\n    }\n","date":"2019-05-22 13:37:25","endLine":245,"groupId":"1072","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExcludeAntRuntimeLibs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-ant-10-0.7/blobInfo/CC_OUT/blobs/32/ca3c22e045926b745f54259eb69f7c09f743b3.src","preCode":"    public void testExcludeAntRuntimeLibs() throws Exception {\n        final String targetName = \"test-junit-ant-runtime-lib-excluded\";\n        try {\n            buildRule.executeTarget(targetName);\n            Assert.fail(targetName + \" was expected to fail since JUnit platform libraries \" +\n                    \"weren't included in the classpath of the forked JVM\");\n        } catch (BuildException be) {\n            \r\n            \r\n            final String missingMainClass = \"Could not find or load main class \" + StandaloneLauncher.class.getName();\n            if (!buildRule.getFullLog().contains(missingMainClass)) {\n                throw be;\n            }\n        }\n        final String exclusionLogMsg = \"Excluding Ant runtime libraries\";\n        Assert.assertTrue(\"Ant runtime libraries weren't excluded from classpath\", buildRule.getFullLog().contains(exclusionLogMsg));\n    }\n","realPath":"src/tests/junit/org/apache/tools/ant/taskdefs/optional/junitlauncher/JUnitLauncherTaskTest.java","repoName":"ant","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"b8451922b6f3293d221c3718fa867b6d3a9278de","commitMessage":"@@@[junitlauncher] Add support for selecting tests based on JUnit-5 tag functionality\n\nThis closes #93 pull request at github/apache/ant repo\n","date":"2019-05-22 13:37:25","modifiedFileCount":"7","status":"M","submitter":"Matthias Gutheil"}]
