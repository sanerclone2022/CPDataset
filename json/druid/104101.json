[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    root.addServlet(buildServletHolder(asyncQueryForwardingServlet, routerHttpClientConfig), \"/druid/v2/*\");\n\n    if (managementProxyConfig.isEnabled()) {\n      ServletHolder managementForwardingServletHolder = buildServletHolder(\n          asyncManagementForwardingServlet, globalHttpClientConfig\n      );\n      root.addServlet(managementForwardingServletHolder, \"/druid/coordinator/*\");\n      root.addServlet(managementForwardingServletHolder, \"/druid/indexer/*\");\n      root.addServlet(managementForwardingServletHolder, \"/proxy/*\");\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    \r\n    root.addFilter(GuiceFilter.class, \"/status/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid/router/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            )\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","date":"2018-08-31 00:56:26","endLine":149,"groupId":"20313","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/25/e70bf0cf556f7fd9b3c2bec6e3f9ca6f4346bf.src","preCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    root.addServlet(buildServletHolder(asyncQueryForwardingServlet, routerHttpClientConfig), \"/druid/v2/*\");\n\n    if (managementProxyConfig.isEnabled()) {\n      ServletHolder managementForwardingServletHolder = buildServletHolder(\n          asyncManagementForwardingServlet, globalHttpClientConfig\n      );\n      root.addServlet(managementForwardingServletHolder, \"/druid/coordinator/*\");\n      root.addServlet(managementForwardingServletHolder, \"/druid/indexer/*\");\n      root.addServlet(managementForwardingServletHolder, \"/proxy/*\");\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    \r\n    root.addFilter(GuiceFilter.class, \"/status/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid/router/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            )\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/RouterJettyServerInitializer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"    public void initialize(Server server, Injector injector)\n    {\n      final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n      root.setWelcomeFiles(new String[]{\"index.html\", \"console.html\"});\n\n      ServletHolder holderPwd = new ServletHolder(\"default\", DefaultServlet.class);\n\n      root.addServlet(holderPwd, \"/\");\n      root.setBaseResource(\n          new ResourceCollection(\n              new String[]{\n                  TaskMaster.class.getClassLoader().getResource(\"static\").toExternalForm(),\n                  TaskMaster.class.getClassLoader().getResource(\"indexer_static\").toExternalForm()\n              }\n          )\n      );\n\n      final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n      final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n      AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n      \r\n      AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n      AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n      final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n      AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n      AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n      JettyServerInitUtils.addExtensionFilters(root, injector);\n\n\n      \r\n      AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n          root,\n          authenticators,\n          jsonMapper\n      );\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/status/*\", null);\n      root.addFilter(GuiceFilter.class, \"/druid-internal/*\", null);\n\n      \r\n      root.addFilter(new FilterHolder(injector.getInstance(RedirectFilter.class)), \"/*\", null);\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/druid/*\", null);\n\n      root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n      HandlerList handlerList = new HandlerList();\n      handlerList.setHandlers(\n          new Handler[]{\n              JettyServerInitUtils.getJettyRequestLogHandler(),\n              JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                  root,\n                  serverConfig.getInflateBufferSize(),\n                  serverConfig.getCompressionLevel()\n              )\n          }\n      );\n\n      server.setHandler(handlerList);\n    }\n","date":"2018-08-31 00:56:26","endLine":411,"groupId":"3841","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d2/2e1f87e5ab6dfb9e85a01c45b8ffdbb74351f8.src","preCode":"    public void initialize(Server server, Injector injector)\n    {\n      final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n      root.setWelcomeFiles(new String[]{\"index.html\", \"console.html\"});\n\n      ServletHolder holderPwd = new ServletHolder(\"default\", DefaultServlet.class);\n\n      root.addServlet(holderPwd, \"/\");\n      root.setBaseResource(\n          new ResourceCollection(\n              new String[]{\n                  TaskMaster.class.getClassLoader().getResource(\"static\").toExternalForm(),\n                  TaskMaster.class.getClassLoader().getResource(\"indexer_static\").toExternalForm()\n              }\n          )\n      );\n\n      final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n      final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n      AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n      \r\n      AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n      AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n      final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n      AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n      AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n      JettyServerInitUtils.addExtensionFilters(root, injector);\n\n\n      \r\n      AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n          root,\n          authenticators,\n          jsonMapper\n      );\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/status/*\", null);\n      root.addFilter(GuiceFilter.class, \"/druid-internal/*\", null);\n\n      \r\n      root.addFilter(new FilterHolder(injector.getInstance(RedirectFilter.class)), \"/*\", null);\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/druid/*\", null);\n\n      root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n      HandlerList handlerList = new HandlerList();\n      handlerList.setHandlers(\n          new Handler[]{\n              JettyServerInitUtils.getJettyRequestLogHandler(),\n              JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                  root,\n                  serverConfig.getInflateBufferSize(),\n                  serverConfig.getCompressionLevel()\n              )\n          }\n      );\n\n      server.setHandler(handlerList);\n    }\n","realPath":"services/src/main/java/org/apache/druid/cli/CliOverlord.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-02-01 09:26:41","codes":[{"authorDate":"2019-02-01 09:26:41","commitOrder":2,"curCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n    \r\n    root.setWelcomeFiles(new String[]{\"unified-console.html\", \"index.html\"});\n\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    root.addServlet(buildServletHolder(asyncQueryForwardingServlet, routerHttpClientConfig), \"/druid/v2/*\");\n\n    if (managementProxyConfig.isEnabled()) {\n      ServletHolder managementForwardingServletHolder = buildServletHolder(\n          asyncManagementForwardingServlet,\n          globalHttpClientConfig\n      );\n      root.addServlet(managementForwardingServletHolder, \"/druid/coordinator/*\");\n      root.addServlet(managementForwardingServletHolder, \"/druid/indexer/*\");\n      root.addServlet(managementForwardingServletHolder, \"/proxy/*\");\n    }\n\n    if (managementProxyConfig.isEnabled()) {\n      root.setBaseResource(Resource.newClassPathResource(\"org/apache/druid/console\"));\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    if (managementProxyConfig.isEnabled()) {\n      AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS_FOR_UI);\n    }\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    \r\n    root.addFilter(GuiceFilter.class, \"/status/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid/router/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            )\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","date":"2019-02-01 09:26:41","endLine":175,"groupId":"6117","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/b6cbbd2e78813c316574f94d9252831c8bd343.src","preCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    root.addServlet(buildServletHolder(asyncQueryForwardingServlet, routerHttpClientConfig), \"/druid/v2/*\");\n\n    if (managementProxyConfig.isEnabled()) {\n      ServletHolder managementForwardingServletHolder = buildServletHolder(\n          asyncManagementForwardingServlet,\n          globalHttpClientConfig\n      );\n      root.addServlet(managementForwardingServletHolder, \"/druid/coordinator/*\");\n      root.addServlet(managementForwardingServletHolder, \"/druid/indexer/*\");\n      root.addServlet(managementForwardingServletHolder, \"/proxy/*\");\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    \r\n    root.addFilter(GuiceFilter.class, \"/status/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid/router/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            )\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/RouterJettyServerInitializer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2019-02-01 09:26:41","commitOrder":2,"curCode":"    public void initialize(Server server, Injector injector)\n    {\n      final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n      root.setWelcomeFiles(new String[]{\"console.html\"});\n\n      ServletHolder holderPwd = new ServletHolder(\"default\", DefaultServlet.class);\n\n      root.addServlet(holderPwd, \"/\");\n      root.setBaseResource(\n          new ResourceCollection(\n              Resource.newClassPathResource(\"org/apache/druid/console\")\n          )\n      );\n\n      final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n      final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n      AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n      \r\n      AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n      AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n      final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n      AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n      AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n      JettyServerInitUtils.addExtensionFilters(root, injector);\n\n\n      \r\n      AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n          root,\n          authenticators,\n          jsonMapper\n      );\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/status/*\", null);\n      root.addFilter(GuiceFilter.class, \"/druid-internal/*\", null);\n\n      \r\n      root.addFilter(new FilterHolder(injector.getInstance(RedirectFilter.class)), \"/*\", null);\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/druid/*\", null);\n\n      root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n      HandlerList handlerList = new HandlerList();\n      handlerList.setHandlers(\n          new Handler[]{\n              JettyServerInitUtils.getJettyRequestLogHandler(),\n              JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                  root,\n                  serverConfig.getInflateBufferSize(),\n                  serverConfig.getCompressionLevel()\n              )\n          }\n      );\n\n      server.setHandler(handlerList);\n    }\n","date":"2019-02-01 09:26:41","endLine":418,"groupId":"3841","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4a/1c22a92a61ca77d592d4d10132dea7d22d87a5.src","preCode":"    public void initialize(Server server, Injector injector)\n    {\n      final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n      root.setWelcomeFiles(new String[]{\"index.html\", \"console.html\"});\n\n      ServletHolder holderPwd = new ServletHolder(\"default\", DefaultServlet.class);\n\n      root.addServlet(holderPwd, \"/\");\n      root.setBaseResource(\n          new ResourceCollection(\n              new String[]{\n                  TaskMaster.class.getClassLoader().getResource(\"static\").toExternalForm(),\n                  TaskMaster.class.getClassLoader().getResource(\"indexer_static\").toExternalForm()\n              }\n          )\n      );\n\n      final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n      final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n      AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n      \r\n      AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n      AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n      final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n      AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n      AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n      JettyServerInitUtils.addExtensionFilters(root, injector);\n\n\n      \r\n      AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n          root,\n          authenticators,\n          jsonMapper\n      );\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/status/*\", null);\n      root.addFilter(GuiceFilter.class, \"/druid-internal/*\", null);\n\n      \r\n      root.addFilter(new FilterHolder(injector.getInstance(RedirectFilter.class)), \"/*\", null);\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/druid/*\", null);\n\n      root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n      HandlerList handlerList = new HandlerList();\n      handlerList.setHandlers(\n          new Handler[]{\n              JettyServerInitUtils.getJettyRequestLogHandler(),\n              JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                  root,\n                  serverConfig.getInflateBufferSize(),\n                  serverConfig.getCompressionLevel()\n              )\n          }\n      );\n\n      server.setHandler(handlerList);\n    }\n","realPath":"services/src/main/java/org/apache/druid/cli/CliOverlord.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"M"}],"commitId":"7f1b19bfb11bdb715bf5816f06f54113e198b448","commitMessage":"@@@Adding a Unified web console. (#6923)\n\n* Adding new web console.\n\n* fixed css\n\n* fix form height\n\n* fix typo\n\n* do import custom react-table css\n\n* added repo field so npm does not complain\n\n* ask travis for node 10\n\n* move indexing-service/src/main/resources/indexer_static into web-console\n\n* fix resource names and paths\n\n* add licenses\n\n* fix exclude file\n\n* add licenses to misc files and tidy up\n\n* remove rebase marker\n\n* fix link\n\n* updated env variable name\n\n* tidy up licenses and surface errors\n\n* cleanup\n\n* remove unused code.  fix missing await\n\n* TeamCity does not like the name aux\n\n* add more links to tasks view\n\n* rm pages\n\n* update gitignore\n\n* update readme to be accurate\n\n* make clean script\n\n* removed old console dependancy\n\n* update Jetty routes\n\n* add a comment for welcome files for coordinator\n\n* do not show inital notifaction for now\n\n* renamed overlord console back to console.html\n\n* fix coordinator console\n\n* rename coordinator-console.html to index.html\n","date":"2019-02-01 09:26:41","modifiedFileCount":"4","status":"M","submitter":"Vadim Ogievetsky"},{"authorTime":"2019-02-01 09:26:41","codes":[{"authorDate":"2019-04-06 05:49:41","commitOrder":3,"curCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n    \r\n    root.setWelcomeFiles(new String[]{\"unified-console.html\", \"index.html\"});\n\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    ServletHolder queryServletHolder = buildServletHolder(asyncQueryForwardingServlet, routerHttpClientConfig);\n    root.addServlet(queryServletHolder, \"/druid/v2/*\");\n    root.addServlet(queryServletHolder, \"/druid/v1/lookups/*\");\n\n    if (managementProxyConfig.isEnabled()) {\n      ServletHolder managementForwardingServletHolder = buildServletHolder(\n          asyncManagementForwardingServlet,\n          globalHttpClientConfig\n      );\n      root.addServlet(managementForwardingServletHolder, \"/druid/coordinator/*\");\n      root.addServlet(managementForwardingServletHolder, \"/druid/indexer/*\");\n      root.addServlet(managementForwardingServletHolder, \"/proxy/*\");\n    }\n\n    if (managementProxyConfig.isEnabled()) {\n      root.setBaseResource(Resource.newClassPathResource(\"org/apache/druid/console\"));\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    if (managementProxyConfig.isEnabled()) {\n      AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS_FOR_UI);\n    }\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    \r\n    root.addFilter(GuiceFilter.class, \"/status/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid/router/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            )\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","date":"2019-04-06 05:49:41","endLine":177,"groupId":"6117","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/55/9cadec90b09508fa00cc7d604f618a4db762f0.src","preCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n    \r\n    root.setWelcomeFiles(new String[]{\"unified-console.html\", \"index.html\"});\n\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    root.addServlet(buildServletHolder(asyncQueryForwardingServlet, routerHttpClientConfig), \"/druid/v2/*\");\n\n    if (managementProxyConfig.isEnabled()) {\n      ServletHolder managementForwardingServletHolder = buildServletHolder(\n          asyncManagementForwardingServlet,\n          globalHttpClientConfig\n      );\n      root.addServlet(managementForwardingServletHolder, \"/druid/coordinator/*\");\n      root.addServlet(managementForwardingServletHolder, \"/druid/indexer/*\");\n      root.addServlet(managementForwardingServletHolder, \"/proxy/*\");\n    }\n\n    if (managementProxyConfig.isEnabled()) {\n      root.setBaseResource(Resource.newClassPathResource(\"org/apache/druid/console\"));\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    if (managementProxyConfig.isEnabled()) {\n      AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS_FOR_UI);\n    }\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    \r\n    root.addFilter(GuiceFilter.class, \"/status/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid/router/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            )\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/RouterJettyServerInitializer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2019-02-01 09:26:41","commitOrder":3,"curCode":"    public void initialize(Server server, Injector injector)\n    {\n      final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n      root.setWelcomeFiles(new String[]{\"console.html\"});\n\n      ServletHolder holderPwd = new ServletHolder(\"default\", DefaultServlet.class);\n\n      root.addServlet(holderPwd, \"/\");\n      root.setBaseResource(\n          new ResourceCollection(\n              Resource.newClassPathResource(\"org/apache/druid/console\")\n          )\n      );\n\n      final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n      final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n      AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n      \r\n      AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n      AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n      final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n      AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n      AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n      JettyServerInitUtils.addExtensionFilters(root, injector);\n\n\n      \r\n      AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n          root,\n          authenticators,\n          jsonMapper\n      );\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/status/*\", null);\n      root.addFilter(GuiceFilter.class, \"/druid-internal/*\", null);\n\n      \r\n      root.addFilter(new FilterHolder(injector.getInstance(RedirectFilter.class)), \"/*\", null);\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/druid/*\", null);\n\n      root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n      HandlerList handlerList = new HandlerList();\n      handlerList.setHandlers(\n          new Handler[]{\n              JettyServerInitUtils.getJettyRequestLogHandler(),\n              JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                  root,\n                  serverConfig.getInflateBufferSize(),\n                  serverConfig.getCompressionLevel()\n              )\n          }\n      );\n\n      server.setHandler(handlerList);\n    }\n","date":"2019-02-01 09:26:41","endLine":418,"groupId":"3841","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4a/1c22a92a61ca77d592d4d10132dea7d22d87a5.src","preCode":"    public void initialize(Server server, Injector injector)\n    {\n      final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n      root.setWelcomeFiles(new String[]{\"console.html\"});\n\n      ServletHolder holderPwd = new ServletHolder(\"default\", DefaultServlet.class);\n\n      root.addServlet(holderPwd, \"/\");\n      root.setBaseResource(\n          new ResourceCollection(\n              Resource.newClassPathResource(\"org/apache/druid/console\")\n          )\n      );\n\n      final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n      final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n      AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n      \r\n      AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n      AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n      final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n      AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n      AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n      JettyServerInitUtils.addExtensionFilters(root, injector);\n\n\n      \r\n      AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n          root,\n          authenticators,\n          jsonMapper\n      );\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/status/*\", null);\n      root.addFilter(GuiceFilter.class, \"/druid-internal/*\", null);\n\n      \r\n      root.addFilter(new FilterHolder(injector.getInstance(RedirectFilter.class)), \"/*\", null);\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/druid/*\", null);\n\n      root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n      HandlerList handlerList = new HandlerList();\n      handlerList.setHandlers(\n          new Handler[]{\n              JettyServerInitUtils.getJettyRequestLogHandler(),\n              JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                  root,\n                  serverConfig.getInflateBufferSize(),\n                  serverConfig.getCompressionLevel()\n              )\n          }\n      );\n\n      server.setHandler(handlerList);\n    }\n","realPath":"services/src/main/java/org/apache/druid/cli/CliOverlord.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"N"}],"commitId":"76b4a5c62e47775715fb619bd4f19da5db1b5b6a","commitMessage":"@@@refactor lookups to be more chill to router (#7222)\n\n* refactor lookups to be more chill to router\n\n* remove accidental change\n\n* fix and combine LookupIntrospectionResourceTest\n\n* fix inspection\n\n* rename RouterLookupModule to LookupSerdeModule and RouterLookupExtractorFactoryContainerProvider to NoopLookupExtractorFactoryContainerProvider\n\n* make comment generic\n\n* use ConfigResourceFilter instead of StateResourceFilter\n\n* fix indentation\n\n* unused import\n\n* another unused import\n\n* refactor some stuff into processing module.  split up LookupModule.java classes into their own files\n","date":"2019-04-06 05:49:41","modifiedFileCount":"17","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-07-09 15:51:36","codes":[{"authorDate":"2019-07-09 15:51:36","commitOrder":4,"curCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n    \r\n    root.setWelcomeFiles(new String[]{\"unified-console.html\", \"index.html\"});\n\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    ServletHolder queryServletHolder = buildServletHolder(asyncQueryForwardingServlet, routerHttpClientConfig);\n    root.addServlet(queryServletHolder, \"/druid/v2/*\");\n    root.addServlet(queryServletHolder, \"/druid/v1/lookups/*\");\n\n    if (managementProxyConfig.isEnabled()) {\n      ServletHolder managementForwardingServletHolder = buildServletHolder(\n          asyncManagementForwardingServlet,\n          globalHttpClientConfig\n      );\n      root.addServlet(managementForwardingServletHolder, \"/druid/coordinator/*\");\n      root.addServlet(managementForwardingServletHolder, \"/druid/indexer/*\");\n      root.addServlet(managementForwardingServletHolder, \"/proxy/*\");\n    }\n\n    if (managementProxyConfig.isEnabled()) {\n      root.setBaseResource(Resource.newClassPathResource(\"org/apache/druid/console\"));\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n    if (managementProxyConfig.isEnabled()) {\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS_FOR_UI);\n    }\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    \r\n    root.addFilter(GuiceFilter.class, \"/status/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid/router/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            )\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","date":"2019-07-09 15:51:36","endLine":179,"groupId":"6117","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/22/4d57a9a7ac231edc051d7983f76b559108e12c.src","preCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n    \r\n    root.setWelcomeFiles(new String[]{\"unified-console.html\", \"index.html\"});\n\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    ServletHolder queryServletHolder = buildServletHolder(asyncQueryForwardingServlet, routerHttpClientConfig);\n    root.addServlet(queryServletHolder, \"/druid/v2/*\");\n    root.addServlet(queryServletHolder, \"/druid/v1/lookups/*\");\n\n    if (managementProxyConfig.isEnabled()) {\n      ServletHolder managementForwardingServletHolder = buildServletHolder(\n          asyncManagementForwardingServlet,\n          globalHttpClientConfig\n      );\n      root.addServlet(managementForwardingServletHolder, \"/druid/coordinator/*\");\n      root.addServlet(managementForwardingServletHolder, \"/druid/indexer/*\");\n      root.addServlet(managementForwardingServletHolder, \"/proxy/*\");\n    }\n\n    if (managementProxyConfig.isEnabled()) {\n      root.setBaseResource(Resource.newClassPathResource(\"org/apache/druid/console\"));\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    if (managementProxyConfig.isEnabled()) {\n      AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS_FOR_UI);\n    }\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    \r\n    root.addFilter(GuiceFilter.class, \"/status/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid/router/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            )\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/RouterJettyServerInitializer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2019-07-09 15:51:36","commitOrder":4,"curCode":"    public void initialize(Server server, Injector injector)\n    {\n      final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n      root.setWelcomeFiles(new String[]{\"console.html\"});\n\n      ServletHolder holderPwd = new ServletHolder(\"default\", DefaultServlet.class);\n\n      root.addServlet(holderPwd, \"/\");\n      root.setBaseResource(\n          new ResourceCollection(\n              Resource.newClassPathResource(\"org/apache/druid/console\")\n          )\n      );\n\n      final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n      final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n      AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n      \r\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n      final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n      AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n      AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n      JettyServerInitUtils.addExtensionFilters(root, injector);\n\n\n      \r\n      AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n          root,\n          authenticators,\n          jsonMapper\n      );\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/status/*\", null);\n      root.addFilter(GuiceFilter.class, \"/druid-internal/*\", null);\n\n      \r\n      root.addFilter(new FilterHolder(injector.getInstance(RedirectFilter.class)), \"/*\", null);\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/druid/*\", null);\n\n      root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n      HandlerList handlerList = new HandlerList();\n      handlerList.setHandlers(\n          new Handler[]{\n              JettyServerInitUtils.getJettyRequestLogHandler(),\n              JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                  root,\n                  serverConfig.getInflateBufferSize(),\n                  serverConfig.getCompressionLevel()\n              )\n          }\n      );\n\n      server.setHandler(handlerList);\n    }\n","date":"2019-07-09 15:51:36","endLine":426,"groupId":"3841","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/db/103b3ec49ba11aee5f644df13e957b70348e0d.src","preCode":"    public void initialize(Server server, Injector injector)\n    {\n      final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n      root.setWelcomeFiles(new String[]{\"console.html\"});\n\n      ServletHolder holderPwd = new ServletHolder(\"default\", DefaultServlet.class);\n\n      root.addServlet(holderPwd, \"/\");\n      root.setBaseResource(\n          new ResourceCollection(\n              Resource.newClassPathResource(\"org/apache/druid/console\")\n          )\n      );\n\n      final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n      final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n      AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n      \r\n      AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n      AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n      final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n      AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n      AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n      JettyServerInitUtils.addExtensionFilters(root, injector);\n\n\n      \r\n      AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n          root,\n          authenticators,\n          jsonMapper\n      );\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/status/*\", null);\n      root.addFilter(GuiceFilter.class, \"/druid-internal/*\", null);\n\n      \r\n      root.addFilter(new FilterHolder(injector.getInstance(RedirectFilter.class)), \"/*\", null);\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/druid/*\", null);\n\n      root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n      HandlerList handlerList = new HandlerList();\n      handlerList.setHandlers(\n          new Handler[]{\n              JettyServerInitUtils.getJettyRequestLogHandler(),\n              JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                  root,\n                  serverConfig.getInflateBufferSize(),\n                  serverConfig.getCompressionLevel()\n              )\n          }\n      );\n\n      server.setHandler(handlerList);\n    }\n","realPath":"services/src/main/java/org/apache/druid/cli/CliOverlord.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"}],"commitId":"027291a90d08780d16035cbca171310c499663fc","commitMessage":"@@@set DRUID_AUTHORIZATION_CHECKED attribute for router endpoints (#8026)\n\n* add state resource filter to router endpoints\n\n* add RouterResource to ResourceFilter test framework\n","date":"2019-07-09 15:51:36","modifiedFileCount":"9","status":"M","submitter":"Parag Jain"},{"authorTime":"2019-07-09 15:51:36","codes":[{"authorDate":"2019-11-01 12:15:40","commitOrder":5,"curCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n    \r\n    root.setWelcomeFiles(new String[]{\"unified-console.html\", \"index.html\"});\n\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    ServletHolder queryServletHolder = buildServletHolder(asyncQueryForwardingServlet, routerHttpClientConfig);\n    root.addServlet(queryServletHolder, \"/druid/v2/*\");\n    root.addServlet(queryServletHolder, \"/druid/v1/lookups/*\");\n\n    if (managementProxyConfig.isEnabled()) {\n      ServletHolder managementForwardingServletHolder = buildServletHolder(\n          asyncManagementForwardingServlet,\n          globalHttpClientConfig\n      );\n      root.addServlet(managementForwardingServletHolder, \"/druid/coordinator/*\");\n      root.addServlet(managementForwardingServletHolder, \"/druid/indexer/*\");\n      root.addServlet(managementForwardingServletHolder, \"/proxy/*\");\n    }\n\n    root.setBaseResource(Resource.newClassPathResource(\"org/apache/druid/console\"));\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS_FOR_UI);\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    \r\n    root.addFilter(GuiceFilter.class, \"/status/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid/router/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            )\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","date":"2019-11-01 12:15:40","endLine":175,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8e/95b766cf7dc7081c3ac593fb9e398e6c481420.src","preCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n    \r\n    root.setWelcomeFiles(new String[]{\"unified-console.html\", \"index.html\"});\n\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    ServletHolder queryServletHolder = buildServletHolder(asyncQueryForwardingServlet, routerHttpClientConfig);\n    root.addServlet(queryServletHolder, \"/druid/v2/*\");\n    root.addServlet(queryServletHolder, \"/druid/v1/lookups/*\");\n\n    if (managementProxyConfig.isEnabled()) {\n      ServletHolder managementForwardingServletHolder = buildServletHolder(\n          asyncManagementForwardingServlet,\n          globalHttpClientConfig\n      );\n      root.addServlet(managementForwardingServletHolder, \"/druid/coordinator/*\");\n      root.addServlet(managementForwardingServletHolder, \"/druid/indexer/*\");\n      root.addServlet(managementForwardingServletHolder, \"/proxy/*\");\n    }\n\n    if (managementProxyConfig.isEnabled()) {\n      root.setBaseResource(Resource.newClassPathResource(\"org/apache/druid/console\"));\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n    if (managementProxyConfig.isEnabled()) {\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS_FOR_UI);\n    }\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    \r\n    root.addFilter(GuiceFilter.class, \"/status/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid/router/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            )\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/RouterJettyServerInitializer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2019-07-09 15:51:36","commitOrder":5,"curCode":"    public void initialize(Server server, Injector injector)\n    {\n      final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n      root.setWelcomeFiles(new String[]{\"console.html\"});\n\n      ServletHolder holderPwd = new ServletHolder(\"default\", DefaultServlet.class);\n\n      root.addServlet(holderPwd, \"/\");\n      root.setBaseResource(\n          new ResourceCollection(\n              Resource.newClassPathResource(\"org/apache/druid/console\")\n          )\n      );\n\n      final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n      final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n      AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n      \r\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n      final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n      AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n      AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n      JettyServerInitUtils.addExtensionFilters(root, injector);\n\n\n      \r\n      AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n          root,\n          authenticators,\n          jsonMapper\n      );\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/status/*\", null);\n      root.addFilter(GuiceFilter.class, \"/druid-internal/*\", null);\n\n      \r\n      root.addFilter(new FilterHolder(injector.getInstance(RedirectFilter.class)), \"/*\", null);\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/druid/*\", null);\n\n      root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n      HandlerList handlerList = new HandlerList();\n      handlerList.setHandlers(\n          new Handler[]{\n              JettyServerInitUtils.getJettyRequestLogHandler(),\n              JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                  root,\n                  serverConfig.getInflateBufferSize(),\n                  serverConfig.getCompressionLevel()\n              )\n          }\n      );\n\n      server.setHandler(handlerList);\n    }\n","date":"2019-07-09 15:51:36","endLine":426,"groupId":"3841","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/db/103b3ec49ba11aee5f644df13e957b70348e0d.src","preCode":"    public void initialize(Server server, Injector injector)\n    {\n      final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n      root.setWelcomeFiles(new String[]{\"console.html\"});\n\n      ServletHolder holderPwd = new ServletHolder(\"default\", DefaultServlet.class);\n\n      root.addServlet(holderPwd, \"/\");\n      root.setBaseResource(\n          new ResourceCollection(\n              Resource.newClassPathResource(\"org/apache/druid/console\")\n          )\n      );\n\n      final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n      final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n      AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n      \r\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n      final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n      AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n      AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n      JettyServerInitUtils.addExtensionFilters(root, injector);\n\n\n      \r\n      AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n          root,\n          authenticators,\n          jsonMapper\n      );\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/status/*\", null);\n      root.addFilter(GuiceFilter.class, \"/druid-internal/*\", null);\n\n      \r\n      root.addFilter(new FilterHolder(injector.getInstance(RedirectFilter.class)), \"/*\", null);\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/druid/*\", null);\n\n      root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n      HandlerList handlerList = new HandlerList();\n      handlerList.setHandlers(\n          new Handler[]{\n              JettyServerInitUtils.getJettyRequestLogHandler(),\n              JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                  root,\n                  serverConfig.getInflateBufferSize(),\n                  serverConfig.getCompressionLevel()\n              )\n          }\n      );\n\n      server.setHandler(handlerList);\n    }\n","realPath":"services/src/main/java/org/apache/druid/cli/CliOverlord.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"N"}],"commitId":"49bd16766fb347e1aad222b8da7f83bb9e951cde","commitMessage":"@@@serve web-console even if router management proxy is not enabled (#8797)\n\n","date":"2019-11-01 12:15:40","modifiedFileCount":"1","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-11-16 11:45:14","codes":[{"authorDate":"2019-11-16 11:45:14","commitOrder":6,"curCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    ServletHolder queryServletHolder = buildServletHolder(asyncQueryForwardingServlet, routerHttpClientConfig);\n    root.addServlet(queryServletHolder, \"/druid/v2/*\");\n    root.addServlet(queryServletHolder, \"/druid/v1/lookups/*\");\n\n    if (managementProxyConfig.isEnabled()) {\n      ServletHolder managementForwardingServletHolder = buildServletHolder(\n          asyncManagementForwardingServlet,\n          globalHttpClientConfig\n      );\n      root.addServlet(managementForwardingServletHolder, \"/druid/coordinator/*\");\n      root.addServlet(managementForwardingServletHolder, \"/druid/indexer/*\");\n      root.addServlet(managementForwardingServletHolder, \"/proxy/*\");\n    }\n\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n    WebConsoleJettyServerInitializer.intializeServerForWebConsoleRoot(root);\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    \r\n    root.addFilter(GuiceFilter.class, \"/status/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid/router/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            WebConsoleJettyServerInitializer.createWebConsoleRewriteHandler(),\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            )\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","date":"2019-11-16 11:45:14","endLine":156,"groupId":"14143","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cd/2afd5349b084847592fb8c8f0bf11fcdb991f7.src","preCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n    \r\n    root.setWelcomeFiles(new String[]{\"unified-console.html\", \"index.html\"});\n\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    ServletHolder queryServletHolder = buildServletHolder(asyncQueryForwardingServlet, routerHttpClientConfig);\n    root.addServlet(queryServletHolder, \"/druid/v2/*\");\n    root.addServlet(queryServletHolder, \"/druid/v1/lookups/*\");\n\n    if (managementProxyConfig.isEnabled()) {\n      ServletHolder managementForwardingServletHolder = buildServletHolder(\n          asyncManagementForwardingServlet,\n          globalHttpClientConfig\n      );\n      root.addServlet(managementForwardingServletHolder, \"/druid/coordinator/*\");\n      root.addServlet(managementForwardingServletHolder, \"/druid/indexer/*\");\n      root.addServlet(managementForwardingServletHolder, \"/proxy/*\");\n    }\n\n    root.setBaseResource(Resource.newClassPathResource(\"org/apache/druid/console\"));\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS_FOR_UI);\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    \r\n    root.addFilter(GuiceFilter.class, \"/status/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid/router/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            )\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/RouterJettyServerInitializer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2019-11-16 11:45:14","commitOrder":6,"curCode":"    public void initialize(Server server, Injector injector)\n    {\n      final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n\n      ServletHolder holderPwd = new ServletHolder(\"default\", DefaultServlet.class);\n\n      root.addServlet(holderPwd, \"/\");\n\n      final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n      final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n      AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n      \r\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n      WebConsoleJettyServerInitializer.intializeServerForWebConsoleRoot(root);\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n      final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n      AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n      AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n      JettyServerInitUtils.addExtensionFilters(root, injector);\n\n\n      \r\n      AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n          root,\n          authenticators,\n          jsonMapper\n      );\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/status/*\", null);\n      root.addFilter(GuiceFilter.class, \"/druid-internal/*\", null);\n\n      \r\n      root.addFilter(new FilterHolder(injector.getInstance(RedirectFilter.class)), \"/*\", null);\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/druid/*\", null);\n\n      root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n      HandlerList handlerList = new HandlerList();\n      handlerList.setHandlers(\n          new Handler[]{\n              WebConsoleJettyServerInitializer.createWebConsoleRewriteHandler(),\n              JettyServerInitUtils.getJettyRequestLogHandler(),\n              JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                  root,\n                  serverConfig.getInflateBufferSize(),\n                  serverConfig.getCompressionLevel()\n              )\n          }\n      );\n\n      server.setHandler(handlerList);\n    }\n","date":"2019-11-16 11:45:14","endLine":422,"groupId":"14143","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0c/d3730de43abce27125e8eba9fb0a2e72136094.src","preCode":"    public void initialize(Server server, Injector injector)\n    {\n      final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.redirectWelcome\", \"true\");\n      root.setWelcomeFiles(new String[]{\"console.html\"});\n\n      ServletHolder holderPwd = new ServletHolder(\"default\", DefaultServlet.class);\n\n      root.addServlet(holderPwd, \"/\");\n      root.setBaseResource(\n          new ResourceCollection(\n              Resource.newClassPathResource(\"org/apache/druid/console\")\n          )\n      );\n\n      final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n      final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n      AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n      \r\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n      final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n      AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n      AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n      JettyServerInitUtils.addExtensionFilters(root, injector);\n\n\n      \r\n      AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n          root,\n          authenticators,\n          jsonMapper\n      );\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/status/*\", null);\n      root.addFilter(GuiceFilter.class, \"/druid-internal/*\", null);\n\n      \r\n      root.addFilter(new FilterHolder(injector.getInstance(RedirectFilter.class)), \"/*\", null);\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/druid/*\", null);\n\n      root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n      HandlerList handlerList = new HandlerList();\n      handlerList.setHandlers(\n          new Handler[]{\n              JettyServerInitUtils.getJettyRequestLogHandler(),\n              JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                  root,\n                  serverConfig.getInflateBufferSize(),\n                  serverConfig.getCompressionLevel()\n              )\n          }\n      );\n\n      server.setHandler(handlerList);\n    }\n","realPath":"services/src/main/java/org/apache/druid/cli/CliOverlord.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"M"}],"commitId":"17d773dca2e10529912d0e645170fe0eb5a13d35","commitMessage":"@@@Web console: replace (and remove) old consoles (#8838)\n\n* first steps\n\n* clean licenses\n\n* fix capabilities\n\n* fix specs\n\n* more tests\n\n* new web console on coordinator and overlord.  remove setup for old consoles.  old configs\n\n* better message\n\n* update licenses\n\n* sync license files\n\n* more button\n\n* fix tslint issue\n\n* jetty-rewrite dependency to add redirects for old console paths\n\n* put dependency in the right place\n\n* fix overlord detection\n\n* fix notices.  dedupe licenses\n\n* make segment timeline work in no SQL mode\n\n* update license\n\n* revert hard coded coordinator mode from testing\n\n* update restricted mode copy\n","date":"2019-11-16 11:45:14","modifiedFileCount":"12","status":"M","submitter":"Vadim Ogievetsky"},{"authorTime":"2020-06-30 07:59:31","codes":[{"authorDate":"2020-06-30 07:59:31","commitOrder":7,"curCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    ServletHolder queryServletHolder = buildServletHolder(asyncQueryForwardingServlet, routerHttpClientConfig);\n    root.addServlet(queryServletHolder, \"/druid/v2/*\");\n    root.addServlet(queryServletHolder, \"/druid/v1/lookups/*\");\n\n    if (managementProxyConfig.isEnabled()) {\n      ServletHolder managementForwardingServletHolder = buildServletHolder(\n          asyncManagementForwardingServlet,\n          globalHttpClientConfig\n      );\n      root.addServlet(managementForwardingServletHolder, \"/druid/coordinator/*\");\n      root.addServlet(managementForwardingServletHolder, \"/druid/indexer/*\");\n      root.addServlet(managementForwardingServletHolder, \"/proxy/*\");\n    }\n\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n    WebConsoleJettyServerInitializer.intializeServerForWebConsoleRoot(root);\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n    JettyServerInitUtils.addAllowHttpMethodsFilter(root, serverConfig.getAllowedHttpMethods());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    \r\n    root.addFilter(GuiceFilter.class, \"/status/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid/router/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            WebConsoleJettyServerInitializer.createWebConsoleRewriteHandler(),\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            )\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","date":"2020-06-30 07:59:31","endLine":157,"groupId":"104101","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/40/f3f0c08853677ad16a31a1d9d853972255e081.src","preCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    ServletHolder queryServletHolder = buildServletHolder(asyncQueryForwardingServlet, routerHttpClientConfig);\n    root.addServlet(queryServletHolder, \"/druid/v2/*\");\n    root.addServlet(queryServletHolder, \"/druid/v1/lookups/*\");\n\n    if (managementProxyConfig.isEnabled()) {\n      ServletHolder managementForwardingServletHolder = buildServletHolder(\n          asyncManagementForwardingServlet,\n          globalHttpClientConfig\n      );\n      root.addServlet(managementForwardingServletHolder, \"/druid/coordinator/*\");\n      root.addServlet(managementForwardingServletHolder, \"/druid/indexer/*\");\n      root.addServlet(managementForwardingServletHolder, \"/proxy/*\");\n    }\n\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n    WebConsoleJettyServerInitializer.intializeServerForWebConsoleRoot(root);\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    \r\n    root.addFilter(GuiceFilter.class, \"/status/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid/router/*\", null);\n    root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            WebConsoleJettyServerInitializer.createWebConsoleRewriteHandler(),\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            )\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/RouterJettyServerInitializer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2020-06-30 07:59:31","commitOrder":7,"curCode":"    public void initialize(Server server, Injector injector)\n    {\n      final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n\n      ServletHolder holderPwd = new ServletHolder(\"default\", DefaultServlet.class);\n\n      root.addServlet(holderPwd, \"/\");\n\n      final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n      final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n      AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n      \r\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n      WebConsoleJettyServerInitializer.intializeServerForWebConsoleRoot(root);\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n      final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n      AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n      AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n      JettyServerInitUtils.addAllowHttpMethodsFilter(root, serverConfig.getAllowedHttpMethods());\n\n      JettyServerInitUtils.addExtensionFilters(root, injector);\n\n\n      \r\n      AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n          root,\n          authenticators,\n          jsonMapper\n      );\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/status/*\", null);\n      root.addFilter(GuiceFilter.class, \"/druid-internal/*\", null);\n\n      \r\n      root.addFilter(new FilterHolder(injector.getInstance(RedirectFilter.class)), \"/*\", null);\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/druid/*\", null);\n\n      root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n      HandlerList handlerList = new HandlerList();\n      handlerList.setHandlers(\n          new Handler[]{\n              WebConsoleJettyServerInitializer.createWebConsoleRewriteHandler(),\n              JettyServerInitUtils.getJettyRequestLogHandler(),\n              JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                  root,\n                  serverConfig.getInflateBufferSize(),\n                  serverConfig.getCompressionLevel()\n              )\n          }\n      );\n\n      server.setHandler(handlerList);\n    }\n","date":"2020-06-30 07:59:31","endLine":434,"groupId":"104101","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/79/10ba6ad3fa81cd795b35e0d894ae4e13c6ace3.src","preCode":"    public void initialize(Server server, Injector injector)\n    {\n      final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n      root.setInitParameter(\"org.eclipse.jetty.servlet.Default.dirAllowed\", \"false\");\n\n      ServletHolder holderPwd = new ServletHolder(\"default\", DefaultServlet.class);\n\n      root.addServlet(holderPwd, \"/\");\n\n      final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n      final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n      AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n      \r\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n      WebConsoleJettyServerInitializer.intializeServerForWebConsoleRoot(root);\n      AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n      final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n      AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n      AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n      JettyServerInitUtils.addExtensionFilters(root, injector);\n\n\n      \r\n      AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n          root,\n          authenticators,\n          jsonMapper\n      );\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/status/*\", null);\n      root.addFilter(GuiceFilter.class, \"/druid-internal/*\", null);\n\n      \r\n      root.addFilter(new FilterHolder(injector.getInstance(RedirectFilter.class)), \"/*\", null);\n\n      \r\n      root.addFilter(GuiceFilter.class, \"/druid/*\", null);\n\n      root.addFilter(GuiceFilter.class, \"/druid-ext/*\", null);\n\n      HandlerList handlerList = new HandlerList();\n      handlerList.setHandlers(\n          new Handler[]{\n              WebConsoleJettyServerInitializer.createWebConsoleRewriteHandler(),\n              JettyServerInitUtils.getJettyRequestLogHandler(),\n              JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                  root,\n                  serverConfig.getInflateBufferSize(),\n                  serverConfig.getCompressionLevel()\n              )\n          }\n      );\n\n      server.setHandler(handlerList);\n    }\n","realPath":"services/src/main/java/org/apache/druid/cli/CliOverlord.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"M"}],"commitId":"15a0b4ffe21a39d830504153033529523e3d69c6","commitMessage":"@@@Filter http requests by http method (#10085)\n\n* Filter http requests by http method\n\nAdd a config that allows a user which http methods to allow against their\nDruid server.\n\nDruid will only accept http requests with the method: GET.  PUT.  POST.  DELETE\nand OPTIONS.\nIf a Druid admin wants to allow other methods.  they can do so by using the\nServerConfig#allowedHttpMethods config.\n\nIf a Druid user would like to disallow OPTIONS.  this can be done by changing\nthe AuthConfig#allowUnauthenticatedHttpOptions config\n\n* Exclude OPTIONS from always supported HTTP methods\n\nAdd HEAD as an allowed method for web console e2e tests\n\n* fix docs\n\n* fix security IT\n\n* Actually fix the web console e2e tests\n\n* Ignore icode coverage for nitialization classes\n\n* code review","date":"2020-06-30 07:59:31","modifiedFileCount":"8","status":"M","submitter":"Suneet Saldanha"}]
