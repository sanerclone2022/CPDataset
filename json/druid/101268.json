[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void start() throws Exception\n  {\n    synchronized (lifecycleLock) {\n      if (!lifecycleLock.canStart()) {\n        throw new ISE(\"can't start.\");\n      }\n\n      log.info(\"Starting HttpServerInventoryView.\");\n\n      try {\n        executor = ScheduledExecutors.fixed(\n            config.getNumThreads(),\n            \"HttpServerInventoryView-%s\"\n        );\n\n        DruidNodeDiscovery druidNodeDiscovery = druidNodeDiscoveryProvider.getForService(DataNodeService.DISCOVERY_SERVICE_KEY);\n        druidNodeDiscovery.registerListener(\n            new DruidNodeDiscovery.Listener()\n            {\n              private final AtomicBoolean initialized = new AtomicBoolean(false);\n\n              @Override\n              public void nodesAdded(List<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(\n                    node -> serverAdded(toDruidServer(node))\n                );\n\n                if (!initialized.getAndSet(true)) {\n                  executor.execute(HttpServerInventoryView.this::serverInventoryInitialized);\n                }\n              }\n\n              @Override\n              public void nodesRemoved(List<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(\n                    node -> serverRemoved(toDruidServer(node))\n                );\n              }\n\n              private DruidServer toDruidServer(DiscoveryDruidNode node)\n              {\n\n                return new DruidServer(\n                    node.getDruidNode().getHostAndPortToUse(),\n                    node.getDruidNode().getHostAndPort(),\n                    node.getDruidNode().getHostAndTlsPort(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getMaxSize(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getType(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getTier(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getPriority()\n                );\n              }\n            }\n        );\n\n        scheduleSyncMonitoring();\n\n        lifecycleLock.started();\n      }\n      finally {\n        lifecycleLock.exitStart();\n      }\n\n      log.info(\"Waiting for Server Inventory Initialization...\");\n\n      while (!inventoryInitializationLatch.await(1, TimeUnit.MINUTES)) {\n        log.info(\"Still waiting for Server Inventory Initialization...\");\n      }\n\n      log.info(\"Started HttpServerInventoryView.\");\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":207,"groupId":"1109","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/05f157b0c6bb7a37cd07940d379120cf07b681.src","preCode":"  public void start() throws Exception\n  {\n    synchronized (lifecycleLock) {\n      if (!lifecycleLock.canStart()) {\n        throw new ISE(\"can't start.\");\n      }\n\n      log.info(\"Starting HttpServerInventoryView.\");\n\n      try {\n        executor = ScheduledExecutors.fixed(\n            config.getNumThreads(),\n            \"HttpServerInventoryView-%s\"\n        );\n\n        DruidNodeDiscovery druidNodeDiscovery = druidNodeDiscoveryProvider.getForService(DataNodeService.DISCOVERY_SERVICE_KEY);\n        druidNodeDiscovery.registerListener(\n            new DruidNodeDiscovery.Listener()\n            {\n              private final AtomicBoolean initialized = new AtomicBoolean(false);\n\n              @Override\n              public void nodesAdded(List<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(\n                    node -> serverAdded(toDruidServer(node))\n                );\n\n                if (!initialized.getAndSet(true)) {\n                  executor.execute(HttpServerInventoryView.this::serverInventoryInitialized);\n                }\n              }\n\n              @Override\n              public void nodesRemoved(List<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(\n                    node -> serverRemoved(toDruidServer(node))\n                );\n              }\n\n              private DruidServer toDruidServer(DiscoveryDruidNode node)\n              {\n\n                return new DruidServer(\n                    node.getDruidNode().getHostAndPortToUse(),\n                    node.getDruidNode().getHostAndPort(),\n                    node.getDruidNode().getHostAndTlsPort(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getMaxSize(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getType(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getTier(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getPriority()\n                );\n              }\n            }\n        );\n\n        scheduleSyncMonitoring();\n\n        lifecycleLock.started();\n      }\n      finally {\n        lifecycleLock.exitStart();\n      }\n\n      log.info(\"Waiting for Server Inventory Initialization...\");\n\n      while (!inventoryInitializationLatch.await(1, TimeUnit.MINUTES)) {\n        log.info(\"Still waiting for Server Inventory Initialization...\");\n      }\n\n      log.info(\"Started HttpServerInventoryView.\");\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/client/HttpServerInventoryView.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private Worker toWorker(DiscoveryDruidNode node)\n  {\n    return new Worker(\n        node.getDruidNode().getServiceScheme(),\n        node.getDruidNode().getHostAndPortToUse(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getIp(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getCapacity(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getVersion()\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":498,"groupId":"5752","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toWorker","params":"(DiscoveryDruidNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ae/8cd0ddd86c2ac57c4b82064904af624e730c5e.src","preCode":"  private Worker toWorker(DiscoveryDruidNode node)\n  {\n    return new Worker(\n        node.getDruidNode().getServiceScheme(),\n        node.getDruidNode().getHostAndPortToUse(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getIp(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getCapacity(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getVersion()\n    );\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-12-01 08:12:56","commitOrder":2,"curCode":"  public void start() throws Exception\n  {\n    synchronized (lifecycleLock) {\n      if (!lifecycleLock.canStart()) {\n        throw new ISE(\"can't start.\");\n      }\n\n      log.info(\"Starting HttpServerInventoryView.\");\n\n      try {\n        executor = ScheduledExecutors.fixed(\n            config.getNumThreads(),\n            \"HttpServerInventoryView-%s\"\n        );\n\n        DruidNodeDiscovery druidNodeDiscovery = druidNodeDiscoveryProvider.getForService(DataNodeService.DISCOVERY_SERVICE_KEY);\n        druidNodeDiscovery.registerListener(\n            new DruidNodeDiscovery.Listener()\n            {\n              private final AtomicBoolean initialized = new AtomicBoolean(false);\n\n              @Override\n              public void nodesAdded(Collection<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(node -> serverAdded(toDruidServer(node)));\n              }\n\n              @Override\n              public void nodesRemoved(Collection<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(node -> serverRemoved(toDruidServer(node)));\n              }\n\n              @Override\n              public void nodeViewInitialized()\n              {\n                if (!initialized.getAndSet(true)) {\n                  executor.execute(HttpServerInventoryView.this::serverInventoryInitialized);\n                }\n              }\n\n              private DruidServer toDruidServer(DiscoveryDruidNode node)\n              {\n\n                return new DruidServer(\n                    node.getDruidNode().getHostAndPortToUse(),\n                    node.getDruidNode().getHostAndPort(),\n                    node.getDruidNode().getHostAndTlsPort(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getMaxSize(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getType(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getTier(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getPriority()\n                );\n              }\n            }\n        );\n\n        scheduleSyncMonitoring();\n\n        lifecycleLock.started();\n      }\n      finally {\n        lifecycleLock.exitStart();\n      }\n\n      log.info(\"Waiting for Server Inventory Initialization...\");\n\n      while (!inventoryInitializationLatch.await(1, TimeUnit.MINUTES)) {\n        log.info(\"Still waiting for Server Inventory Initialization...\");\n      }\n\n      log.info(\"Started HttpServerInventoryView.\");\n    }\n  }\n","date":"2018-12-01 08:12:56","endLine":206,"groupId":"5752","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bf/0d1237d425577922284586068ebe3512503303.src","preCode":"  public void start() throws Exception\n  {\n    synchronized (lifecycleLock) {\n      if (!lifecycleLock.canStart()) {\n        throw new ISE(\"can't start.\");\n      }\n\n      log.info(\"Starting HttpServerInventoryView.\");\n\n      try {\n        executor = ScheduledExecutors.fixed(\n            config.getNumThreads(),\n            \"HttpServerInventoryView-%s\"\n        );\n\n        DruidNodeDiscovery druidNodeDiscovery = druidNodeDiscoveryProvider.getForService(DataNodeService.DISCOVERY_SERVICE_KEY);\n        druidNodeDiscovery.registerListener(\n            new DruidNodeDiscovery.Listener()\n            {\n              private final AtomicBoolean initialized = new AtomicBoolean(false);\n\n              @Override\n              public void nodesAdded(List<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(\n                    node -> serverAdded(toDruidServer(node))\n                );\n\n                if (!initialized.getAndSet(true)) {\n                  executor.execute(HttpServerInventoryView.this::serverInventoryInitialized);\n                }\n              }\n\n              @Override\n              public void nodesRemoved(List<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(\n                    node -> serverRemoved(toDruidServer(node))\n                );\n              }\n\n              private DruidServer toDruidServer(DiscoveryDruidNode node)\n              {\n\n                return new DruidServer(\n                    node.getDruidNode().getHostAndPortToUse(),\n                    node.getDruidNode().getHostAndPort(),\n                    node.getDruidNode().getHostAndTlsPort(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getMaxSize(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getType(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getTier(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getPriority()\n                );\n              }\n            }\n        );\n\n        scheduleSyncMonitoring();\n\n        lifecycleLock.started();\n      }\n      finally {\n        lifecycleLock.exitStart();\n      }\n\n      log.info(\"Waiting for Server Inventory Initialization...\");\n\n      while (!inventoryInitializationLatch.await(1, TimeUnit.MINUTES)) {\n        log.info(\"Still waiting for Server Inventory Initialization...\");\n      }\n\n      log.info(\"Started HttpServerInventoryView.\");\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/client/HttpServerInventoryView.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  private Worker toWorker(DiscoveryDruidNode node)\n  {\n    return new Worker(\n        node.getDruidNode().getServiceScheme(),\n        node.getDruidNode().getHostAndPortToUse(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getIp(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getCapacity(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getVersion()\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":498,"groupId":"5752","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toWorker","params":"(DiscoveryDruidNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ae/8cd0ddd86c2ac57c4b82064904af624e730c5e.src","preCode":"  private Worker toWorker(DiscoveryDruidNode node)\n  {\n    return new Worker(\n        node.getDruidNode().getServiceScheme(),\n        node.getDruidNode().getHostAndPortToUse(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getIp(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getCapacity(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getVersion()\n    );\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"N"}],"commitId":"ec38df75756b975461bf1234e26cd195c462107d","commitMessage":"@@@Simplify DruidNodeDiscoveryProvider; add DruidNodeDiscovery.Listener.nodeViewInitialized() (#6606)\n\n* Simplify DruidNodeDiscoveryProvider; add DruidNodeDiscovery.Listener.nodeViewInitialized() method; prohibit and eliminate some suboptimal Java 8 patterns\n\n* Fix style\n\n* Fix HttpEmitterTest.timeoutEmptyQueue()\n\n* Add DruidNodeDiscovery.Listener.nodeViewInitialized() calls in tests\n\n* Clarify code\n","date":"2018-12-01 08:12:56","modifiedFileCount":"25","status":"M","submitter":"Roman Leventov"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2019-02-21 03:56:23","commitOrder":3,"curCode":"  public void start()\n  {\n    synchronized (lifecycleLock) {\n      if (!lifecycleLock.canStart()) {\n        throw new ISE(\"can't start.\");\n      }\n\n      log.info(\"Starting HttpServerInventoryView.\");\n\n      try {\n        executor = ScheduledExecutors.fixed(\n            config.getNumThreads(),\n            \"HttpServerInventoryView-%s\"\n        );\n\n        DruidNodeDiscovery druidNodeDiscovery = druidNodeDiscoveryProvider.getForService(DataNodeService.DISCOVERY_SERVICE_KEY);\n        druidNodeDiscovery.registerListener(\n            new DruidNodeDiscovery.Listener()\n            {\n              private final AtomicBoolean initialized = new AtomicBoolean(false);\n\n              @Override\n              public void nodesAdded(Collection<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(node -> serverAdded(toDruidServer(node)));\n              }\n\n              @Override\n              public void nodesRemoved(Collection<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(node -> serverRemoved(toDruidServer(node)));\n              }\n\n              @Override\n              public void nodeViewInitialized()\n              {\n                if (!initialized.getAndSet(true)) {\n                  executor.execute(HttpServerInventoryView.this::serverInventoryInitialized);\n                }\n              }\n\n              private DruidServer toDruidServer(DiscoveryDruidNode node)\n              {\n\n                return new DruidServer(\n                    node.getDruidNode().getHostAndPortToUse(),\n                    node.getDruidNode().getHostAndPort(),\n                    node.getDruidNode().getHostAndTlsPort(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getMaxSize(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getType(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getTier(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getPriority()\n                );\n              }\n            }\n        );\n\n        scheduleSyncMonitoring();\n\n        lifecycleLock.started();\n      }\n      finally {\n        lifecycleLock.exitStart();\n      }\n\n      log.info(\"Started HttpServerInventoryView.\");\n    }\n  }\n","date":"2019-02-21 03:56:23","endLine":199,"groupId":"5752","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/12/79b3af41c336de0cefeacbb36ee54c616d6144.src","preCode":"  public void start() throws Exception\n  {\n    synchronized (lifecycleLock) {\n      if (!lifecycleLock.canStart()) {\n        throw new ISE(\"can't start.\");\n      }\n\n      log.info(\"Starting HttpServerInventoryView.\");\n\n      try {\n        executor = ScheduledExecutors.fixed(\n            config.getNumThreads(),\n            \"HttpServerInventoryView-%s\"\n        );\n\n        DruidNodeDiscovery druidNodeDiscovery = druidNodeDiscoveryProvider.getForService(DataNodeService.DISCOVERY_SERVICE_KEY);\n        druidNodeDiscovery.registerListener(\n            new DruidNodeDiscovery.Listener()\n            {\n              private final AtomicBoolean initialized = new AtomicBoolean(false);\n\n              @Override\n              public void nodesAdded(Collection<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(node -> serverAdded(toDruidServer(node)));\n              }\n\n              @Override\n              public void nodesRemoved(Collection<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(node -> serverRemoved(toDruidServer(node)));\n              }\n\n              @Override\n              public void nodeViewInitialized()\n              {\n                if (!initialized.getAndSet(true)) {\n                  executor.execute(HttpServerInventoryView.this::serverInventoryInitialized);\n                }\n              }\n\n              private DruidServer toDruidServer(DiscoveryDruidNode node)\n              {\n\n                return new DruidServer(\n                    node.getDruidNode().getHostAndPortToUse(),\n                    node.getDruidNode().getHostAndPort(),\n                    node.getDruidNode().getHostAndTlsPort(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getMaxSize(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getType(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getTier(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getPriority()\n                );\n              }\n            }\n        );\n\n        scheduleSyncMonitoring();\n\n        lifecycleLock.started();\n      }\n      finally {\n        lifecycleLock.exitStart();\n      }\n\n      log.info(\"Waiting for Server Inventory Initialization...\");\n\n      while (!inventoryInitializationLatch.await(1, TimeUnit.MINUTES)) {\n        log.info(\"Still waiting for Server Inventory Initialization...\");\n      }\n\n      log.info(\"Started HttpServerInventoryView.\");\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/client/HttpServerInventoryView.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":3,"curCode":"  private Worker toWorker(DiscoveryDruidNode node)\n  {\n    return new Worker(\n        node.getDruidNode().getServiceScheme(),\n        node.getDruidNode().getHostAndPortToUse(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getIp(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getCapacity(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getVersion()\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":498,"groupId":"5752","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"toWorker","params":"(DiscoveryDruidNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ae/8cd0ddd86c2ac57c4b82064904af624e730c5e.src","preCode":"  private Worker toWorker(DiscoveryDruidNode node)\n  {\n    return new Worker(\n        node.getDruidNode().getServiceScheme(),\n        node.getDruidNode().getHostAndPortToUse(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getIp(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getCapacity(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getVersion()\n    );\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"N"}],"commitId":"dd34691004ca87128e775136ac99be404191f897","commitMessage":"@@@Coordinator await initialization before finishing startup (#6847)\n\n* Curator server inventory await initialization\n\n* address comments\n\n* print exception object in log\n\n* remove throws ISE\n\n* cachingCost awaitInitialization default to false\n","date":"2019-02-21 03:56:23","modifiedFileCount":"6","status":"M","submitter":"Mingming Qiu"},{"authorTime":"2019-10-18 03:57:19","codes":[{"authorDate":"2019-02-21 03:56:23","commitOrder":4,"curCode":"  public void start()\n  {\n    synchronized (lifecycleLock) {\n      if (!lifecycleLock.canStart()) {\n        throw new ISE(\"can't start.\");\n      }\n\n      log.info(\"Starting HttpServerInventoryView.\");\n\n      try {\n        executor = ScheduledExecutors.fixed(\n            config.getNumThreads(),\n            \"HttpServerInventoryView-%s\"\n        );\n\n        DruidNodeDiscovery druidNodeDiscovery = druidNodeDiscoveryProvider.getForService(DataNodeService.DISCOVERY_SERVICE_KEY);\n        druidNodeDiscovery.registerListener(\n            new DruidNodeDiscovery.Listener()\n            {\n              private final AtomicBoolean initialized = new AtomicBoolean(false);\n\n              @Override\n              public void nodesAdded(Collection<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(node -> serverAdded(toDruidServer(node)));\n              }\n\n              @Override\n              public void nodesRemoved(Collection<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(node -> serverRemoved(toDruidServer(node)));\n              }\n\n              @Override\n              public void nodeViewInitialized()\n              {\n                if (!initialized.getAndSet(true)) {\n                  executor.execute(HttpServerInventoryView.this::serverInventoryInitialized);\n                }\n              }\n\n              private DruidServer toDruidServer(DiscoveryDruidNode node)\n              {\n\n                return new DruidServer(\n                    node.getDruidNode().getHostAndPortToUse(),\n                    node.getDruidNode().getHostAndPort(),\n                    node.getDruidNode().getHostAndTlsPort(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getMaxSize(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getType(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getTier(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getPriority()\n                );\n              }\n            }\n        );\n\n        scheduleSyncMonitoring();\n\n        lifecycleLock.started();\n      }\n      finally {\n        lifecycleLock.exitStart();\n      }\n\n      log.info(\"Started HttpServerInventoryView.\");\n    }\n  }\n","date":"2019-02-21 03:56:23","endLine":199,"groupId":"101268","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/12/79b3af41c336de0cefeacbb36ee54c616d6144.src","preCode":"  public void start()\n  {\n    synchronized (lifecycleLock) {\n      if (!lifecycleLock.canStart()) {\n        throw new ISE(\"can't start.\");\n      }\n\n      log.info(\"Starting HttpServerInventoryView.\");\n\n      try {\n        executor = ScheduledExecutors.fixed(\n            config.getNumThreads(),\n            \"HttpServerInventoryView-%s\"\n        );\n\n        DruidNodeDiscovery druidNodeDiscovery = druidNodeDiscoveryProvider.getForService(DataNodeService.DISCOVERY_SERVICE_KEY);\n        druidNodeDiscovery.registerListener(\n            new DruidNodeDiscovery.Listener()\n            {\n              private final AtomicBoolean initialized = new AtomicBoolean(false);\n\n              @Override\n              public void nodesAdded(Collection<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(node -> serverAdded(toDruidServer(node)));\n              }\n\n              @Override\n              public void nodesRemoved(Collection<DiscoveryDruidNode> nodes)\n              {\n                nodes.forEach(node -> serverRemoved(toDruidServer(node)));\n              }\n\n              @Override\n              public void nodeViewInitialized()\n              {\n                if (!initialized.getAndSet(true)) {\n                  executor.execute(HttpServerInventoryView.this::serverInventoryInitialized);\n                }\n              }\n\n              private DruidServer toDruidServer(DiscoveryDruidNode node)\n              {\n\n                return new DruidServer(\n                    node.getDruidNode().getHostAndPortToUse(),\n                    node.getDruidNode().getHostAndPort(),\n                    node.getDruidNode().getHostAndTlsPort(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getMaxSize(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getType(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getTier(),\n                    ((DataNodeService) node.getServices().get(DataNodeService.DISCOVERY_SERVICE_KEY)).getPriority()\n                );\n              }\n            }\n        );\n\n        scheduleSyncMonitoring();\n\n        lifecycleLock.started();\n      }\n      finally {\n        lifecycleLock.exitStart();\n      }\n\n      log.info(\"Started HttpServerInventoryView.\");\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/client/HttpServerInventoryView.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"N"},{"authorDate":"2019-10-18 03:57:19","commitOrder":4,"curCode":"  private Worker toWorker(DiscoveryDruidNode node)\n  {\n    return new Worker(\n        node.getDruidNode().getServiceScheme(),\n        node.getDruidNode().getHostAndPortToUse(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getIp(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getCapacity(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getVersion(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getCategory()\n    );\n  }\n","date":"2019-10-18 03:57:19","endLine":491,"groupId":"101268","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"toWorker","params":"(DiscoveryDruidNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/bdbd75b410337e6df37fe7774126cc57f529c3.src","preCode":"  private Worker toWorker(DiscoveryDruidNode node)\n  {\n    return new Worker(\n        node.getDruidNode().getServiceScheme(),\n        node.getDruidNode().getHostAndPortToUse(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getIp(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getCapacity(),\n        ((WorkerNodeService) node.getServices().get(WorkerNodeService.DISCOVERY_SERVICE_KEY)).getVersion()\n    );\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":481,"status":"M"}],"commitId":"2c758ef5ff07891619b7ffedfb28dc31a6850c59","commitMessage":"@@@Support assign tasks to run on different categories of MiddleManagers (#7066)\n\n* Support assign tasks to run on different tiers of MiddleManagers\n\n* address comments\n\n* address comments\n\n* rename tier to category and docs\n\n* doc\n\n* fix doc\n\n* fix spelling errors\n\n* docs\n","date":"2019-10-18 03:57:19","modifiedFileCount":"27","status":"M","submitter":"Mingming Qiu"}]
