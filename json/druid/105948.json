[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private List<String> selectColumnValuesMatchingFilter(final DimFilter filter, final String selectColumn)\n  {\n    final Sequence<Cursor> cursors = makeCursorSequence(makeFilter(filter));\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        new Function<Cursor, List<String>>()\n        {\n          @Override\n          public List<String> apply(Cursor input)\n          {\n            final DimensionSelector selector = input\n                .getColumnSelectorFactory()\n                .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n            final List<String> values = Lists.newArrayList();\n\n            while (!input.isDone()) {\n              IndexedInts row = selector.getRow();\n              Preconditions.checkState(row.size() == 1);\n              values.add(selector.lookupName(row.get(0)));\n              input.advance();\n            }\n\n            return values;\n          }\n        }\n    );\n    return seq.toList().get(0);\n  }\n","date":"2018-08-31 00:56:26","endLine":331,"groupId":"11392","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"selectColumnValuesMatchingFilter","params":"(finalDimFilterfilter@finalStringselectColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9f/1bac8f21c290adcf196b439d4ba9092c8110b8.src","preCode":"  private List<String> selectColumnValuesMatchingFilter(final DimFilter filter, final String selectColumn)\n  {\n    final Sequence<Cursor> cursors = makeCursorSequence(makeFilter(filter));\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        new Function<Cursor, List<String>>()\n        {\n          @Override\n          public List<String> apply(Cursor input)\n          {\n            final DimensionSelector selector = input\n                .getColumnSelectorFactory()\n                .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n            final List<String> values = Lists.newArrayList();\n\n            while (!input.isDone()) {\n              IndexedInts row = selector.getRow();\n              Preconditions.checkState(row.size() == 1);\n              values.add(selector.lookupName(row.get(0)));\n              input.advance();\n            }\n\n            return values;\n          }\n        }\n    );\n    return seq.toList().get(0);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/BaseFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private List<String> selectColumnValuesMatchingFilterUsingPostFiltering(\n      final DimFilter filter,\n      final String selectColumn\n  )\n  {\n    final Filter theFilter = makeFilter(filter);\n    final Filter postFilteringFilter = new Filter()\n    {\n      @Override\n      public <T> T getBitmapResult(BitmapIndexSelector selector, BitmapResultFactory<T> bitmapResultFactory)\n      {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public ValueMatcher makeMatcher(ColumnSelectorFactory factory)\n      {\n        return theFilter.makeMatcher(factory);\n      }\n\n      @Override\n      public boolean supportsBitmapIndex(BitmapIndexSelector selector)\n      {\n        return false;\n      }\n\n      @Override\n      public boolean supportsSelectivityEstimation(\n          ColumnSelector columnSelector, BitmapIndexSelector indexSelector\n      )\n      {\n        return false;\n      }\n\n      @Override\n      public double estimateSelectivity(BitmapIndexSelector indexSelector)\n      {\n        return 1.0;\n      }\n    };\n\n    final Sequence<Cursor> cursors = makeCursorSequence(postFilteringFilter);\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        new Function<Cursor, List<String>>()\n        {\n          @Override\n          public List<String> apply(Cursor input)\n          {\n            final DimensionSelector selector = input\n                .getColumnSelectorFactory()\n                .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n            final List<String> values = Lists.newArrayList();\n\n            while (!input.isDone()) {\n              IndexedInts row = selector.getRow();\n              Preconditions.checkState(row.size() == 1);\n              values.add(selector.lookupName(row.get(0)));\n              input.advance();\n            }\n\n            return values;\n          }\n        }\n    );\n    return seq.toList().get(0);\n  }\n","date":"2018-08-31 00:56:26","endLine":426,"groupId":"11392","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"selectColumnValuesMatchingFilterUsingPostFiltering","params":"(finalDimFilterfilter@finalStringselectColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9f/1bac8f21c290adcf196b439d4ba9092c8110b8.src","preCode":"  private List<String> selectColumnValuesMatchingFilterUsingPostFiltering(\n      final DimFilter filter,\n      final String selectColumn\n  )\n  {\n    final Filter theFilter = makeFilter(filter);\n    final Filter postFilteringFilter = new Filter()\n    {\n      @Override\n      public <T> T getBitmapResult(BitmapIndexSelector selector, BitmapResultFactory<T> bitmapResultFactory)\n      {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public ValueMatcher makeMatcher(ColumnSelectorFactory factory)\n      {\n        return theFilter.makeMatcher(factory);\n      }\n\n      @Override\n      public boolean supportsBitmapIndex(BitmapIndexSelector selector)\n      {\n        return false;\n      }\n\n      @Override\n      public boolean supportsSelectivityEstimation(\n          ColumnSelector columnSelector, BitmapIndexSelector indexSelector\n      )\n      {\n        return false;\n      }\n\n      @Override\n      public double estimateSelectivity(BitmapIndexSelector indexSelector)\n      {\n        return 1.0;\n      }\n    };\n\n    final Sequence<Cursor> cursors = makeCursorSequence(postFilteringFilter);\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        new Function<Cursor, List<String>>()\n        {\n          @Override\n          public List<String> apply(Cursor input)\n          {\n            final DimensionSelector selector = input\n                .getColumnSelectorFactory()\n                .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n            final List<String> values = Lists.newArrayList();\n\n            while (!input.isDone()) {\n              IndexedInts row = selector.getRow();\n              Preconditions.checkState(row.size() == 1);\n              values.add(selector.lookupName(row.get(0)));\n              input.advance();\n            }\n\n            return values;\n          }\n        }\n    );\n    return seq.toList().get(0);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/BaseFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  private List<String> selectColumnValuesMatchingFilter(final DimFilter filter, final String selectColumn)\n  {\n    final Sequence<Cursor> cursors = makeCursorSequence(makeFilter(filter));\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        new Function<Cursor, List<String>>()\n        {\n          @Override\n          public List<String> apply(Cursor input)\n          {\n            final DimensionSelector selector = input\n                .getColumnSelectorFactory()\n                .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n            final List<String> values = new ArrayList<>();\n\n            while (!input.isDone()) {\n              IndexedInts row = selector.getRow();\n              Preconditions.checkState(row.size() == 1);\n              values.add(selector.lookupName(row.get(0)));\n              input.advance();\n            }\n\n            return values;\n          }\n        }\n    );\n    return seq.toList().get(0);\n  }\n","date":"2018-10-29 20:02:43","endLine":290,"groupId":"11392","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"selectColumnValuesMatchingFilter","params":"(finalDimFilterfilter@finalStringselectColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/10/0adf053aea4420720be29b4904efc0b8bacc1e.src","preCode":"  private List<String> selectColumnValuesMatchingFilter(final DimFilter filter, final String selectColumn)\n  {\n    final Sequence<Cursor> cursors = makeCursorSequence(makeFilter(filter));\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        new Function<Cursor, List<String>>()\n        {\n          @Override\n          public List<String> apply(Cursor input)\n          {\n            final DimensionSelector selector = input\n                .getColumnSelectorFactory()\n                .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n            final List<String> values = Lists.newArrayList();\n\n            while (!input.isDone()) {\n              IndexedInts row = selector.getRow();\n              Preconditions.checkState(row.size() == 1);\n              values.add(selector.lookupName(row.get(0)));\n              input.advance();\n            }\n\n            return values;\n          }\n        }\n    );\n    return seq.toList().get(0);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/BaseFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  private List<String> selectColumnValuesMatchingFilterUsingPostFiltering(\n      final DimFilter filter,\n      final String selectColumn\n  )\n  {\n    final Filter theFilter = makeFilter(filter);\n    final Filter postFilteringFilter = new Filter()\n    {\n      @Override\n      public <T> T getBitmapResult(BitmapIndexSelector selector, BitmapResultFactory<T> bitmapResultFactory)\n      {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public ValueMatcher makeMatcher(ColumnSelectorFactory factory)\n      {\n        return theFilter.makeMatcher(factory);\n      }\n\n      @Override\n      public boolean supportsBitmapIndex(BitmapIndexSelector selector)\n      {\n        return false;\n      }\n\n      @Override\n      public boolean supportsSelectivityEstimation(ColumnSelector columnSelector, BitmapIndexSelector indexSelector)\n      {\n        return false;\n      }\n\n      @Override\n      public double estimateSelectivity(BitmapIndexSelector indexSelector)\n      {\n        return 1.0;\n      }\n    };\n\n    final Sequence<Cursor> cursors = makeCursorSequence(postFilteringFilter);\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        new Function<Cursor, List<String>>()\n        {\n          @Override\n          public List<String> apply(Cursor input)\n          {\n            final DimensionSelector selector = input\n                .getColumnSelectorFactory()\n                .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n            final List<String> values = new ArrayList<>();\n\n            while (!input.isDone()) {\n              IndexedInts row = selector.getRow();\n              Preconditions.checkState(row.size() == 1);\n              values.add(selector.lookupName(row.get(0)));\n              input.advance();\n            }\n\n            return values;\n          }\n        }\n    );\n    return seq.toList().get(0);\n  }\n","date":"2018-10-29 20:02:43","endLine":383,"groupId":"11392","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"selectColumnValuesMatchingFilterUsingPostFiltering","params":"(finalDimFilterfilter@finalStringselectColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/10/0adf053aea4420720be29b4904efc0b8bacc1e.src","preCode":"  private List<String> selectColumnValuesMatchingFilterUsingPostFiltering(\n      final DimFilter filter,\n      final String selectColumn\n  )\n  {\n    final Filter theFilter = makeFilter(filter);\n    final Filter postFilteringFilter = new Filter()\n    {\n      @Override\n      public <T> T getBitmapResult(BitmapIndexSelector selector, BitmapResultFactory<T> bitmapResultFactory)\n      {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public ValueMatcher makeMatcher(ColumnSelectorFactory factory)\n      {\n        return theFilter.makeMatcher(factory);\n      }\n\n      @Override\n      public boolean supportsBitmapIndex(BitmapIndexSelector selector)\n      {\n        return false;\n      }\n\n      @Override\n      public boolean supportsSelectivityEstimation(ColumnSelector columnSelector, BitmapIndexSelector indexSelector)\n      {\n        return false;\n      }\n\n      @Override\n      public double estimateSelectivity(BitmapIndexSelector indexSelector)\n      {\n        return 1.0;\n      }\n    };\n\n    final Sequence<Cursor> cursors = makeCursorSequence(postFilteringFilter);\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        new Function<Cursor, List<String>>()\n        {\n          @Override\n          public List<String> apply(Cursor input)\n          {\n            final DimensionSelector selector = input\n                .getColumnSelectorFactory()\n                .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n            final List<String> values = Lists.newArrayList();\n\n            while (!input.isDone()) {\n              IndexedInts row = selector.getRow();\n              Preconditions.checkState(row.size() == 1);\n              values.add(selector.lookupName(row.get(0)));\n              input.advance();\n            }\n\n            return values;\n          }\n        }\n    );\n    return seq.toList().get(0);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/BaseFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2019-08-03 04:21:25","codes":[{"authorDate":"2019-08-03 04:21:25","commitOrder":3,"curCode":"  private List<String> selectColumnValuesMatchingFilter(final DimFilter filter, final String selectColumn)\n  {\n    final Sequence<Cursor> cursors = makeCursorSequence(makeFilter(filter));\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        cursor -> {\n          final DimensionSelector selector = cursor\n              .getColumnSelectorFactory()\n              .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n          final List<String> values = new ArrayList<>();\n\n          while (!cursor.isDone()) {\n            IndexedInts row = selector.getRow();\n            Preconditions.checkState(row.size() == 1);\n            values.add(selector.lookupName(row.get(0)));\n            cursor.advance();\n          }\n\n          return values;\n        }\n    );\n    return seq.toList().get(0);\n  }\n","date":"2019-08-03 04:21:25","endLine":309,"groupId":"1179","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"selectColumnValuesMatchingFilter","params":"(finalDimFilterfilter@finalStringselectColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a7/7aa8e894d3f463f7f4472ed1f41daac403de48.src","preCode":"  private List<String> selectColumnValuesMatchingFilter(final DimFilter filter, final String selectColumn)\n  {\n    final Sequence<Cursor> cursors = makeCursorSequence(makeFilter(filter));\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        new Function<Cursor, List<String>>()\n        {\n          @Override\n          public List<String> apply(Cursor input)\n          {\n            final DimensionSelector selector = input\n                .getColumnSelectorFactory()\n                .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n            final List<String> values = new ArrayList<>();\n\n            while (!input.isDone()) {\n              IndexedInts row = selector.getRow();\n              Preconditions.checkState(row.size() == 1);\n              values.add(selector.lookupName(row.get(0)));\n              input.advance();\n            }\n\n            return values;\n          }\n        }\n    );\n    return seq.toList().get(0);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/BaseFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"},{"authorDate":"2019-08-03 04:21:25","commitOrder":3,"curCode":"  private List<String> selectColumnValuesMatchingFilterUsingPostFiltering(\n      final DimFilter filter,\n      final String selectColumn\n  )\n  {\n    final Filter theFilter = makeFilter(filter);\n    final Filter postFilteringFilter = new Filter()\n    {\n      @Override\n      public <T> T getBitmapResult(BitmapIndexSelector selector, BitmapResultFactory<T> bitmapResultFactory)\n      {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public ValueMatcher makeMatcher(ColumnSelectorFactory factory)\n      {\n        return theFilter.makeMatcher(factory);\n      }\n\n      @Override\n      public boolean supportsBitmapIndex(BitmapIndexSelector selector)\n      {\n        return false;\n      }\n\n      @Override\n      public boolean supportsSelectivityEstimation(ColumnSelector columnSelector, BitmapIndexSelector indexSelector)\n      {\n        return false;\n      }\n\n      @Override\n      public double estimateSelectivity(BitmapIndexSelector indexSelector)\n      {\n        return 1.0;\n      }\n    };\n\n    final Sequence<Cursor> cursors = makeCursorSequence(postFilteringFilter);\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        cursor -> {\n          final DimensionSelector selector = cursor\n              .getColumnSelectorFactory()\n              .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n          final List<String> values = new ArrayList<>();\n\n          while (!cursor.isDone()) {\n            IndexedInts row = selector.getRow();\n            Preconditions.checkState(row.size() == 1);\n            values.add(selector.lookupName(row.get(0)));\n            cursor.advance();\n          }\n\n          return values;\n        }\n    );\n    return seq.toList().get(0);\n  }\n","date":"2019-08-03 04:21:25","endLine":433,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"selectColumnValuesMatchingFilterUsingPostFiltering","params":"(finalDimFilterfilter@finalStringselectColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a7/7aa8e894d3f463f7f4472ed1f41daac403de48.src","preCode":"  private List<String> selectColumnValuesMatchingFilterUsingPostFiltering(\n      final DimFilter filter,\n      final String selectColumn\n  )\n  {\n    final Filter theFilter = makeFilter(filter);\n    final Filter postFilteringFilter = new Filter()\n    {\n      @Override\n      public <T> T getBitmapResult(BitmapIndexSelector selector, BitmapResultFactory<T> bitmapResultFactory)\n      {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public ValueMatcher makeMatcher(ColumnSelectorFactory factory)\n      {\n        return theFilter.makeMatcher(factory);\n      }\n\n      @Override\n      public boolean supportsBitmapIndex(BitmapIndexSelector selector)\n      {\n        return false;\n      }\n\n      @Override\n      public boolean supportsSelectivityEstimation(ColumnSelector columnSelector, BitmapIndexSelector indexSelector)\n      {\n        return false;\n      }\n\n      @Override\n      public double estimateSelectivity(BitmapIndexSelector indexSelector)\n      {\n        return 1.0;\n      }\n    };\n\n    final Sequence<Cursor> cursors = makeCursorSequence(postFilteringFilter);\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        new Function<Cursor, List<String>>()\n        {\n          @Override\n          public List<String> apply(Cursor input)\n          {\n            final DimensionSelector selector = input\n                .getColumnSelectorFactory()\n                .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n            final List<String> values = new ArrayList<>();\n\n            while (!input.isDone()) {\n              IndexedInts row = selector.getRow();\n              Preconditions.checkState(row.size() == 1);\n              values.add(selector.lookupName(row.get(0)));\n              input.advance();\n            }\n\n            return values;\n          }\n        }\n    );\n    return seq.toList().get(0);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/BaseFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"M"}],"commitId":"e7c6deac768d66c12b71daecae12ecb5a7db2380","commitMessage":"@@@optimize single input column multi-value expressions (#8047)\n\n* optimize single input column multi-value expressions\n\n* javadocs\n\n* merge fixup\n\n* vectorization fixup\n\n* more fixes\n\n* more docs\n\n* more links\n\n* empty\n\n* javadocs are hard\n\n* suppress javadoc refs issue\n\n* fix it\n","date":"2019-08-03 04:21:25","modifiedFileCount":"24","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-08-10 07:36:18","codes":[{"authorDate":"2019-08-03 04:21:25","commitOrder":4,"curCode":"  private List<String> selectColumnValuesMatchingFilter(final DimFilter filter, final String selectColumn)\n  {\n    final Sequence<Cursor> cursors = makeCursorSequence(makeFilter(filter));\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        cursor -> {\n          final DimensionSelector selector = cursor\n              .getColumnSelectorFactory()\n              .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n          final List<String> values = new ArrayList<>();\n\n          while (!cursor.isDone()) {\n            IndexedInts row = selector.getRow();\n            Preconditions.checkState(row.size() == 1);\n            values.add(selector.lookupName(row.get(0)));\n            cursor.advance();\n          }\n\n          return values;\n        }\n    );\n    return seq.toList().get(0);\n  }\n","date":"2019-08-03 04:21:25","endLine":309,"groupId":"105948","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"selectColumnValuesMatchingFilter","params":"(finalDimFilterfilter@finalStringselectColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a7/7aa8e894d3f463f7f4472ed1f41daac403de48.src","preCode":"  private List<String> selectColumnValuesMatchingFilter(final DimFilter filter, final String selectColumn)\n  {\n    final Sequence<Cursor> cursors = makeCursorSequence(makeFilter(filter));\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        cursor -> {\n          final DimensionSelector selector = cursor\n              .getColumnSelectorFactory()\n              .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n          final List<String> values = new ArrayList<>();\n\n          while (!cursor.isDone()) {\n            IndexedInts row = selector.getRow();\n            Preconditions.checkState(row.size() == 1);\n            values.add(selector.lookupName(row.get(0)));\n            cursor.advance();\n          }\n\n          return values;\n        }\n    );\n    return seq.toList().get(0);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/BaseFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"N"},{"authorDate":"2019-08-10 07:36:18","commitOrder":4,"curCode":"  private List<String> selectColumnValuesMatchingFilterUsingPostFiltering(\n      final DimFilter filter,\n      final String selectColumn\n  )\n  {\n    final Filter theFilter = makeFilter(filter);\n    final Filter postFilteringFilter = new Filter()\n    {\n      @Override\n      public <T> T getBitmapResult(BitmapIndexSelector selector, BitmapResultFactory<T> bitmapResultFactory)\n      {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public ValueMatcher makeMatcher(ColumnSelectorFactory factory)\n      {\n        return theFilter.makeMatcher(factory);\n      }\n\n      @Override\n      public boolean supportsBitmapIndex(BitmapIndexSelector selector)\n      {\n        return false;\n      }\n\n      @Override\n      public boolean shouldUseBitmapIndex(BitmapIndexSelector selector)\n      {\n        return false;\n      }\n\n      @Override\n      public boolean supportsSelectivityEstimation(ColumnSelector columnSelector, BitmapIndexSelector indexSelector)\n      {\n        return false;\n      }\n\n      @Override\n      public Set<String> getRequiredColumns()\n      {\n        return Collections.emptySet();\n      }\n\n      @Override\n      public double estimateSelectivity(BitmapIndexSelector indexSelector)\n      {\n        return 1.0;\n      }\n    };\n\n    final Sequence<Cursor> cursors = makeCursorSequence(postFilteringFilter);\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        cursor -> {\n          final DimensionSelector selector = cursor\n              .getColumnSelectorFactory()\n              .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n          final List<String> values = new ArrayList<>();\n\n          while (!cursor.isDone()) {\n            IndexedInts row = selector.getRow();\n            Preconditions.checkState(row.size() == 1);\n            values.add(selector.lookupName(row.get(0)));\n            cursor.advance();\n          }\n\n          return values;\n        }\n    );\n    return seq.toList().get(0);\n  }\n","date":"2019-08-10 07:36:18","endLine":447,"groupId":"105948","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"selectColumnValuesMatchingFilterUsingPostFiltering","params":"(finalDimFilterfilter@finalStringselectColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/db/4863ad7952e9fc7f6ca9714b6459933d5742fe.src","preCode":"  private List<String> selectColumnValuesMatchingFilterUsingPostFiltering(\n      final DimFilter filter,\n      final String selectColumn\n  )\n  {\n    final Filter theFilter = makeFilter(filter);\n    final Filter postFilteringFilter = new Filter()\n    {\n      @Override\n      public <T> T getBitmapResult(BitmapIndexSelector selector, BitmapResultFactory<T> bitmapResultFactory)\n      {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public ValueMatcher makeMatcher(ColumnSelectorFactory factory)\n      {\n        return theFilter.makeMatcher(factory);\n      }\n\n      @Override\n      public boolean supportsBitmapIndex(BitmapIndexSelector selector)\n      {\n        return false;\n      }\n\n      @Override\n      public boolean supportsSelectivityEstimation(ColumnSelector columnSelector, BitmapIndexSelector indexSelector)\n      {\n        return false;\n      }\n\n      @Override\n      public double estimateSelectivity(BitmapIndexSelector indexSelector)\n      {\n        return 1.0;\n      }\n    };\n\n    final Sequence<Cursor> cursors = makeCursorSequence(postFilteringFilter);\n    Sequence<List<String>> seq = Sequences.map(\n        cursors,\n        cursor -> {\n          final DimensionSelector selector = cursor\n              .getColumnSelectorFactory()\n              .makeDimensionSelector(new DefaultDimensionSpec(selectColumn, selectColumn));\n\n          final List<String> values = new ArrayList<>();\n\n          while (!cursor.isDone()) {\n            IndexedInts row = selector.getRow();\n            Preconditions.checkState(row.size() == 1);\n            values.add(selector.lookupName(row.get(0)));\n            cursor.advance();\n          }\n\n          return values;\n        }\n    );\n    return seq.toList().get(0);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/BaseFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"M"}],"commitId":"1054d8517150c2fa1062608726ea9fd4c7912de3","commitMessage":"@@@add mechanism to control filter optimization in historical query processing (#8209)\n\n* add support for mechanism to control filter optimization in historical query processing\n\n* oops\n\n* adjust\n\n* woo\n\n* javadoc\n\n* review comments\n\n* fix\n\n* default\n\n* oops\n\n* oof\n\n* this will fix it\n\n* more nullable.  refactor DimFilter.getRequiredColumns to use Set.  formatting\n\n* extract class DimFilterToStringBuilder with common code from custom DimFilter toString implementations\n\n* adjust variable naming\n\n* missing nullable\n\n* more nullable\n\n* fix javadocs\n\n* nullable\n\n* address review comments\n\n* javadocs.  precondition\n\n* nullable\n\n* rename method to be consistent\n\n* review comments\n\n* remove tuning from ColumnComparisonFilter/ColumnComparisonDimFilter\n","date":"2019-08-10 07:36:18","modifiedFileCount":"74","status":"M","submitter":"Clint Wylie"}]
