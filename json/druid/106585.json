[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-10-23 04:43:47","commitOrder":2,"curCode":"  private List<QueryRunner<Row>> getQueryRunnerForSegment1()\n  {\n    List<QueryRunner<Row>> runners = Lists.newArrayList();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<Row> runner = makeQueryRunnerForSegment(\n        groupByFactory,\n        index.toString(),\n        new QueryableIndexSegment(index.toString(), index)\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","date":"2018-10-23 04:43:47","endLine":960,"groupId":"1256","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getQueryRunnerForSegment1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7f/21731901f3752146790ce472309915f2e2f415.src","preCode":"  private List<QueryRunner<Row>> getQueryRunnerForSegment1()\n  {\n    List<QueryRunner<Row>> runners = Lists.newArrayList();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<Row> runner = makeQueryRunnerForSegment(\n        groupByFactory,\n        index.toString(),\n        new QueryableIndexSegment(index.toString(), index)\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/NestedQueryPushDownTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":949,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  private List<QueryRunner<Row>> getRunner1()\n  {\n    List<QueryRunner<Row>> runners = Lists.newArrayList();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<Row> runner = makeQueryRunner(\n        groupByFactory,\n        index.toString(),\n        new QueryableIndexSegment(index.toString(), index)\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","date":"2018-08-31 00:56:26","endLine":619,"groupId":"1256","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getRunner1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/99/a8b646a6615a7f64b98f7ac65a3d4bcd25e353.src","preCode":"  private List<QueryRunner<Row>> getRunner1()\n  {\n    List<QueryRunner<Row>> runners = Lists.newArrayList();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<Row> runner = makeQueryRunner(\n        groupByFactory,\n        index.toString(),\n        new QueryableIndexSegment(index.toString(), index)\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByLimitPushDownInsufficientBufferTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":608,"status":"NB"}],"commitId":"359576a80bccaea4168e31323e931a806b26159b","commitMessage":"@@@Implement force push down for nested group by query (#5471)\n\n* Force nested query push down\n\n* Code review changes\n","date":"2018-10-23 04:43:47","modifiedFileCount":"11","status":"M","submitter":"Samarth Jain"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":3,"curCode":"  private List<QueryRunner<Row>> getQueryRunnerForSegment1()\n  {\n    List<QueryRunner<Row>> runners = new ArrayList<>();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<Row> runner = makeQueryRunnerForSegment(\n        groupByFactory,\n        index.toString(),\n        new QueryableIndexSegment(index.toString(), index)\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","date":"2018-10-29 20:02:43","endLine":860,"groupId":"1256","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getQueryRunnerForSegment1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1b/f936dbec6792be682966ca871e57dc1e2654ec.src","preCode":"  private List<QueryRunner<Row>> getQueryRunnerForSegment1()\n  {\n    List<QueryRunner<Row>> runners = Lists.newArrayList();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<Row> runner = makeQueryRunnerForSegment(\n        groupByFactory,\n        index.toString(),\n        new QueryableIndexSegment(index.toString(), index)\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/NestedQueryPushDownTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":849,"status":"M"},{"authorDate":"2018-10-29 20:02:43","commitOrder":3,"curCode":"  private List<QueryRunner<Row>> getRunner1()\n  {\n    List<QueryRunner<Row>> runners = new ArrayList<>();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<Row> runner = makeQueryRunner(\n        groupByFactory,\n        index.toString(),\n        new QueryableIndexSegment(index.toString(), index)\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","date":"2018-10-29 20:02:43","endLine":617,"groupId":"1256","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getRunner1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8d/2885ed75d30e07335e095949efc44fa709b1b5.src","preCode":"  private List<QueryRunner<Row>> getRunner1()\n  {\n    List<QueryRunner<Row>> runners = Lists.newArrayList();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<Row> runner = makeQueryRunner(\n        groupByFactory,\n        index.toString(),\n        new QueryableIndexSegment(index.toString(), index)\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByLimitPushDownInsufficientBufferTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":4,"curCode":"  private List<QueryRunner<Row>> getQueryRunnerForSegment1()\n  {\n    List<QueryRunner<Row>> runners = new ArrayList<>();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<Row> runner = makeQueryRunnerForSegment(\n        groupByFactory,\n        SegmentId.dummy(index.toString()),\n        new QueryableIndexSegment(index, SegmentId.dummy(index.toString()))\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","date":"2019-01-22 03:11:10","endLine":858,"groupId":"1256","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getQueryRunnerForSegment1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0e/b5e9afd9222526b1f23c6ed46852bb7568b1af.src","preCode":"  private List<QueryRunner<Row>> getQueryRunnerForSegment1()\n  {\n    List<QueryRunner<Row>> runners = new ArrayList<>();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<Row> runner = makeQueryRunnerForSegment(\n        groupByFactory,\n        index.toString(),\n        new QueryableIndexSegment(index.toString(), index)\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/NestedQueryPushDownTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":847,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":4,"curCode":"  private List<QueryRunner<Row>> getRunner1()\n  {\n    List<QueryRunner<Row>> runners = new ArrayList<>();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<Row> runner = makeQueryRunner(\n        groupByFactory,\n        SegmentId.dummy(index.toString()),\n        new QueryableIndexSegment(index, SegmentId.dummy(index.toString()))\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","date":"2019-01-22 03:11:10","endLine":618,"groupId":"1256","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getRunner1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d6/ac1bff1d0aa4ed7f3bd5aa560310845416339d.src","preCode":"  private List<QueryRunner<Row>> getRunner1()\n  {\n    List<QueryRunner<Row>> runners = new ArrayList<>();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<Row> runner = makeQueryRunner(\n        groupByFactory,\n        index.toString(),\n        new QueryableIndexSegment(index.toString(), index)\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByLimitPushDownInsufficientBufferTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":607,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-08-01 07:15:12","codes":[{"authorDate":"2019-08-01 07:15:12","commitOrder":5,"curCode":"  private List<QueryRunner<ResultRow>> getQueryRunnerForSegment1()\n  {\n    List<QueryRunner<ResultRow>> runners = new ArrayList<>();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<ResultRow> runner = makeQueryRunnerForSegment(\n        groupByFactory,\n        SegmentId.dummy(index.toString()),\n        new QueryableIndexSegment(index, SegmentId.dummy(index.toString()))\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","date":"2019-08-01 07:15:12","endLine":868,"groupId":"106585","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getQueryRunnerForSegment1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/12/9e14c31cd1a90087d78762089efda8f31bd414.src","preCode":"  private List<QueryRunner<Row>> getQueryRunnerForSegment1()\n  {\n    List<QueryRunner<Row>> runners = new ArrayList<>();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<Row> runner = makeQueryRunnerForSegment(\n        groupByFactory,\n        SegmentId.dummy(index.toString()),\n        new QueryableIndexSegment(index, SegmentId.dummy(index.toString()))\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/NestedQueryPushDownTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":857,"status":"M"},{"authorDate":"2019-08-01 07:15:12","commitOrder":5,"curCode":"  private List<QueryRunner<ResultRow>> getRunner1()\n  {\n    List<QueryRunner<ResultRow>> runners = new ArrayList<>();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<ResultRow> runner = makeQueryRunner(\n        groupByFactory,\n        SegmentId.dummy(index.toString()),\n        new QueryableIndexSegment(index, SegmentId.dummy(index.toString()))\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","date":"2019-08-01 07:15:12","endLine":624,"groupId":"106585","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getRunner1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/35/a59459bff32b70aa33701a82ee1885d3064d96.src","preCode":"  private List<QueryRunner<Row>> getRunner1()\n  {\n    List<QueryRunner<Row>> runners = new ArrayList<>();\n    QueryableIndex index = groupByIndices.get(0);\n    QueryRunner<Row> runner = makeQueryRunner(\n        groupByFactory,\n        SegmentId.dummy(index.toString()),\n        new QueryableIndexSegment(index, SegmentId.dummy(index.toString()))\n    );\n    runners.add(groupByFactory.getToolchest().preMergeQueryDecoration(runner));\n    return runners;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByLimitPushDownInsufficientBufferTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"M"}],"commitId":"77297f4e6f2e9d617c96cd46852bb5a772961e85","commitMessage":"@@@GroupBy array-based result rows. (#8196)\n\n* GroupBy array-based result rows.\n\nFixes #8118; see that proposal for details.\n\nOther than the GroupBy changes.  the main other \"interesting\" classes are:\n\n- ResultRow: The array-based result type.\n- BaseQuery: T is no longer required to be Comparable.\n- QueryToolChest: Adds \"decorateObjectMapper\" to enable query-aware serialization\n  and deserialization of result rows (necessary due to their positional nature).\n- QueryResource: Uses the new decoration functionality.\n- DirectDruidClient: Also uses the new decoration functionality.\n- QueryMaker (in Druid SQL): Modifications to read ResultRows.\n\nThese classes weren't changed.  but got some new javadocs:\n\n- BySegmentQueryRunner\n- FinalizeResultsQueryRunner\n- Query\n\n* Adjustments for TC stuff.\n","date":"2019-08-01 07:15:12","modifiedFileCount":"111","status":"M","submitter":"Gian Merlino"}]
