[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSearch()\n  {\n    SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                    .dataSource(QueryRunnerTestHelper.dataSource)\n                                    .granularity(QueryRunnerTestHelper.allGran)\n                                    .intervals(QueryRunnerTestHelper.fullOnInterval)\n                                    .query(\"a\")\n                                    .build();\n\n    List<SearchHit> expectedHits = Lists.newLinkedList();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 279));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 186));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 186));\n\n    checkSearchQuery(searchQuery, expectedHits);\n  }\n","date":"2018-08-31 00:56:26","endLine":149,"groupId":"12272","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/16/31307af9f9892e28a4c49f01932eb6054f3080.src","preCode":"  public void testSearch()\n  {\n    SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                    .dataSource(QueryRunnerTestHelper.dataSource)\n                                    .granularity(QueryRunnerTestHelper.allGran)\n                                    .intervals(QueryRunnerTestHelper.fullOnInterval)\n                                    .query(\"a\")\n                                    .build();\n\n    List<SearchHit> expectedHits = Lists.newLinkedList();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 279));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 186));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 186));\n\n    checkSearchQuery(searchQuery, expectedHits);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSearchWithCardinality()\n  {\n    final SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                          .dataSource(QueryRunnerTestHelper.dataSource)\n                                          .granularity(QueryRunnerTestHelper.allGran)\n                                          .intervals(QueryRunnerTestHelper.fullOnInterval)\n                                          .query(\"a\")\n                                          .build();\n\n    \r\n    QueryRunner mergedRunner = toolChest.mergeResults(\n        new QueryRunner<Result<SearchResultValue>>()\n        {\n          @Override\n          public Sequence<Result<SearchResultValue>> run(\n              QueryPlus<Result<SearchResultValue>> queryPlus, Map<String, Object> responseContext\n          )\n          {\n            final QueryPlus<Result<SearchResultValue>> queryPlus1 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-01-12/2011-02-28\")))\n            );\n            final QueryPlus<Result<SearchResultValue>> queryPlus2 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-03-01/2011-04-15\")))\n            );\n            return Sequences.concat(runner.run(queryPlus1, responseContext), runner.run(queryPlus2, responseContext));\n          }\n        }\n    );\n\n    List<SearchHit> expectedHits = Lists.newLinkedList();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 273));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 182));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 182));\n\n    checkSearchQuery(searchQuery, mergedRunner, expectedHits);\n  }\n","date":"2018-08-31 00:56:26","endLine":192,"groupId":"10752","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSearchWithCardinality","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/16/31307af9f9892e28a4c49f01932eb6054f3080.src","preCode":"  public void testSearchWithCardinality()\n  {\n    final SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                          .dataSource(QueryRunnerTestHelper.dataSource)\n                                          .granularity(QueryRunnerTestHelper.allGran)\n                                          .intervals(QueryRunnerTestHelper.fullOnInterval)\n                                          .query(\"a\")\n                                          .build();\n\n    \r\n    QueryRunner mergedRunner = toolChest.mergeResults(\n        new QueryRunner<Result<SearchResultValue>>()\n        {\n          @Override\n          public Sequence<Result<SearchResultValue>> run(\n              QueryPlus<Result<SearchResultValue>> queryPlus, Map<String, Object> responseContext\n          )\n          {\n            final QueryPlus<Result<SearchResultValue>> queryPlus1 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-01-12/2011-02-28\")))\n            );\n            final QueryPlus<Result<SearchResultValue>> queryPlus2 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-03-01/2011-04-15\")))\n            );\n            return Sequences.concat(runner.run(queryPlus1, responseContext), runner.run(queryPlus2, responseContext));\n          }\n        }\n    );\n\n    List<SearchHit> expectedHits = Lists.newLinkedList();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 273));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 182));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 182));\n\n    checkSearchQuery(searchQuery, mergedRunner, expectedHits);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-09-14 09:07:06","codes":[{"authorDate":"2018-09-14 09:07:06","commitOrder":2,"curCode":"  public void testSearch()\n  {\n    SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                    .dataSource(QueryRunnerTestHelper.dataSource)\n                                    .granularity(QueryRunnerTestHelper.allGran)\n                                    .intervals(QueryRunnerTestHelper.fullOnInterval)\n                                    .query(\"a\")\n                                    .build();\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 279));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 186));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 186));\n\n    checkSearchQuery(searchQuery, expectedHits);\n  }\n","date":"2018-09-14 09:07:06","endLine":149,"groupId":"12272","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/df/c2e8a8525dcdbe3320798228812e6a46fa9b61.src","preCode":"  public void testSearch()\n  {\n    SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                    .dataSource(QueryRunnerTestHelper.dataSource)\n                                    .granularity(QueryRunnerTestHelper.allGran)\n                                    .intervals(QueryRunnerTestHelper.fullOnInterval)\n                                    .query(\"a\")\n                                    .build();\n\n    List<SearchHit> expectedHits = Lists.newLinkedList();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 279));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 186));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 186));\n\n    checkSearchQuery(searchQuery, expectedHits);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2018-09-14 09:07:06","commitOrder":2,"curCode":"  public void testSearchWithCardinality()\n  {\n    final SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                          .dataSource(QueryRunnerTestHelper.dataSource)\n                                          .granularity(QueryRunnerTestHelper.allGran)\n                                          .intervals(QueryRunnerTestHelper.fullOnInterval)\n                                          .query(\"a\")\n                                          .build();\n\n    \r\n    QueryRunner mergedRunner = toolChest.mergeResults(\n        new QueryRunner<Result<SearchResultValue>>()\n        {\n          @Override\n          public Sequence<Result<SearchResultValue>> run(\n              QueryPlus<Result<SearchResultValue>> queryPlus, Map<String, Object> responseContext\n          )\n          {\n            final QueryPlus<Result<SearchResultValue>> queryPlus1 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-01-12/2011-02-28\")))\n            );\n            final QueryPlus<Result<SearchResultValue>> queryPlus2 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-03-01/2011-04-15\")))\n            );\n            return Sequences.concat(runner.run(queryPlus1, responseContext), runner.run(queryPlus2, responseContext));\n          }\n        }\n    );\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 273));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 182));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 182));\n\n    checkSearchQuery(searchQuery, mergedRunner, expectedHits);\n  }\n","date":"2018-09-14 09:07:06","endLine":192,"groupId":"12272","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSearchWithCardinality","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/df/c2e8a8525dcdbe3320798228812e6a46fa9b61.src","preCode":"  public void testSearchWithCardinality()\n  {\n    final SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                          .dataSource(QueryRunnerTestHelper.dataSource)\n                                          .granularity(QueryRunnerTestHelper.allGran)\n                                          .intervals(QueryRunnerTestHelper.fullOnInterval)\n                                          .query(\"a\")\n                                          .build();\n\n    \r\n    QueryRunner mergedRunner = toolChest.mergeResults(\n        new QueryRunner<Result<SearchResultValue>>()\n        {\n          @Override\n          public Sequence<Result<SearchResultValue>> run(\n              QueryPlus<Result<SearchResultValue>> queryPlus, Map<String, Object> responseContext\n          )\n          {\n            final QueryPlus<Result<SearchResultValue>> queryPlus1 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-01-12/2011-02-28\")))\n            );\n            final QueryPlus<Result<SearchResultValue>> queryPlus2 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-03-01/2011-04-15\")))\n            );\n            return Sequences.concat(runner.run(queryPlus1, responseContext), runner.run(queryPlus2, responseContext));\n          }\n        }\n    );\n\n    List<SearchHit> expectedHits = Lists.newLinkedList();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 273));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 182));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 182));\n\n    checkSearchQuery(searchQuery, mergedRunner, expectedHits);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"d50b69e6d4c29913de4d670b05523a719dbfd97f","commitMessage":"@@@Prohibit LinkedList (#6112)\n\n* Prohibit LinkedList\n\n* Fix tests\n\n* Fix\n\n* Remove unused import\n","date":"2018-09-14 09:07:06","modifiedFileCount":"24","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":3,"curCode":"  public void testSearch()\n  {\n    SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                    .dataSource(QueryRunnerTestHelper.dataSource)\n                                    .granularity(QueryRunnerTestHelper.allGran)\n                                    .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                                    .query(\"a\")\n                                    .build();\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 279));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 186));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 186));\n\n    checkSearchQuery(searchQuery, expectedHits);\n  }\n","date":"2019-01-22 03:11:10","endLine":150,"groupId":"12272","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4d/3d1e0590574f39b0a600035f27bef92cf05e2b.src","preCode":"  public void testSearch()\n  {\n    SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                    .dataSource(QueryRunnerTestHelper.dataSource)\n                                    .granularity(QueryRunnerTestHelper.allGran)\n                                    .intervals(QueryRunnerTestHelper.fullOnInterval)\n                                    .query(\"a\")\n                                    .build();\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 279));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 186));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 186));\n\n    checkSearchQuery(searchQuery, expectedHits);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":3,"curCode":"  public void testSearchWithCardinality()\n  {\n    final SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                          .dataSource(QueryRunnerTestHelper.dataSource)\n                                          .granularity(QueryRunnerTestHelper.allGran)\n                                          .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                                          .query(\"a\")\n                                          .build();\n\n    \r\n    QueryRunner mergedRunner = toolChest.mergeResults(\n        new QueryRunner<Result<SearchResultValue>>()\n        {\n          @Override\n          public Sequence<Result<SearchResultValue>> run(\n              QueryPlus<Result<SearchResultValue>> queryPlus,\n              Map<String, Object> responseContext\n          )\n          {\n            final QueryPlus<Result<SearchResultValue>> queryPlus1 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-01-12/2011-02-28\")))\n            );\n            final QueryPlus<Result<SearchResultValue>> queryPlus2 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-03-01/2011-04-15\")))\n            );\n            return Sequences.concat(runner.run(queryPlus1, responseContext), runner.run(queryPlus2, responseContext));\n          }\n        }\n    );\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 273));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 182));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 182));\n\n    checkSearchQuery(searchQuery, mergedRunner, expectedHits);\n  }\n","date":"2019-01-22 03:11:10","endLine":194,"groupId":"12272","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSearchWithCardinality","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4d/3d1e0590574f39b0a600035f27bef92cf05e2b.src","preCode":"  public void testSearchWithCardinality()\n  {\n    final SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                          .dataSource(QueryRunnerTestHelper.dataSource)\n                                          .granularity(QueryRunnerTestHelper.allGran)\n                                          .intervals(QueryRunnerTestHelper.fullOnInterval)\n                                          .query(\"a\")\n                                          .build();\n\n    \r\n    QueryRunner mergedRunner = toolChest.mergeResults(\n        new QueryRunner<Result<SearchResultValue>>()\n        {\n          @Override\n          public Sequence<Result<SearchResultValue>> run(\n              QueryPlus<Result<SearchResultValue>> queryPlus,\n              Map<String, Object> responseContext\n          )\n          {\n            final QueryPlus<Result<SearchResultValue>> queryPlus1 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-01-12/2011-02-28\")))\n            );\n            final QueryPlus<Result<SearchResultValue>> queryPlus2 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-03-01/2011-04-15\")))\n            );\n            return Sequences.concat(runner.run(queryPlus1, responseContext), runner.run(queryPlus2, responseContext));\n          }\n        }\n    );\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 273));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 182));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 182));\n\n    checkSearchQuery(searchQuery, mergedRunner, expectedHits);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-07-24 23:29:03","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":4,"curCode":"  public void testSearch()\n  {\n    SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                    .dataSource(QueryRunnerTestHelper.dataSource)\n                                    .granularity(QueryRunnerTestHelper.allGran)\n                                    .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                                    .query(\"a\")\n                                    .build();\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 279));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 186));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 186));\n\n    checkSearchQuery(searchQuery, expectedHits);\n  }\n","date":"2019-01-22 03:11:10","endLine":150,"groupId":"12272","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4d/3d1e0590574f39b0a600035f27bef92cf05e2b.src","preCode":"  public void testSearch()\n  {\n    SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                    .dataSource(QueryRunnerTestHelper.dataSource)\n                                    .granularity(QueryRunnerTestHelper.allGran)\n                                    .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                                    .query(\"a\")\n                                    .build();\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 279));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 186));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 186));\n\n    checkSearchQuery(searchQuery, expectedHits);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"N"},{"authorDate":"2019-07-24 23:29:03","commitOrder":4,"curCode":"  public void testSearchWithCardinality()\n  {\n    final SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                          .dataSource(QueryRunnerTestHelper.dataSource)\n                                          .granularity(QueryRunnerTestHelper.allGran)\n                                          .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                                          .query(\"a\")\n                                          .build();\n\n    \r\n    QueryRunner mergedRunner = toolChest.mergeResults(\n        new QueryRunner<Result<SearchResultValue>>()\n        {\n          @Override\n          public Sequence<Result<SearchResultValue>> run(\n              QueryPlus<Result<SearchResultValue>> queryPlus,\n              ResponseContext responseContext\n          )\n          {\n            final QueryPlus<Result<SearchResultValue>> queryPlus1 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-01-12/2011-02-28\")))\n            );\n            final QueryPlus<Result<SearchResultValue>> queryPlus2 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-03-01/2011-04-15\")))\n            );\n            return Sequences.concat(runner.run(queryPlus1, responseContext), runner.run(queryPlus2, responseContext));\n          }\n        }\n    );\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 273));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 182));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 182));\n\n    checkSearchQuery(searchQuery, mergedRunner, expectedHits);\n  }\n","date":"2019-07-24 23:29:03","endLine":194,"groupId":"12272","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSearchWithCardinality","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3b/573150b182465d436cefb0c5ef59adc01c35b9.src","preCode":"  public void testSearchWithCardinality()\n  {\n    final SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                          .dataSource(QueryRunnerTestHelper.dataSource)\n                                          .granularity(QueryRunnerTestHelper.allGran)\n                                          .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                                          .query(\"a\")\n                                          .build();\n\n    \r\n    QueryRunner mergedRunner = toolChest.mergeResults(\n        new QueryRunner<Result<SearchResultValue>>()\n        {\n          @Override\n          public Sequence<Result<SearchResultValue>> run(\n              QueryPlus<Result<SearchResultValue>> queryPlus,\n              Map<String, Object> responseContext\n          )\n          {\n            final QueryPlus<Result<SearchResultValue>> queryPlus1 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-01-12/2011-02-28\")))\n            );\n            final QueryPlus<Result<SearchResultValue>> queryPlus2 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-03-01/2011-04-15\")))\n            );\n            return Sequences.concat(runner.run(queryPlus1, responseContext), runner.run(queryPlus2, responseContext));\n          }\n        }\n    );\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 273));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 182));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 182));\n\n    checkSearchQuery(searchQuery, mergedRunner, expectedHits);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"799d20249fe6333ea86b020f6d09c91fa4d3f998","commitMessage":"@@@Response context refactoring (#8110)\n\n* Response context refactoring\n\n* Serialization/Deserialization of ResponseContext\n\n* Added java doc comments\n\n* Renamed vars related to ResponseContext\n\n* Renamed empty() methods to createEmpty()\n\n* Fixed ResponseContext usage\n\n* Renamed multiple ResponseContext static fields\n\n* Added PublicApi annotations\n\n* Renamed QueryResponseContext class to ResourceIOReaderWriter\n\n* Moved the protected method below public static constants\n\n* Added createEmpty method to ResponseContext with DefaultResponseContext creation\n\n* Fixed inspection error\n\n* Added comments to the ResponseContext length limit and ResponseContext\nhttp header name\n\n* Added a comment of possible future refactoring\n\n* Removed .gitignore file of indexing-service\n\n* Removed a never-used method\n\n* VisibleForTesting method reducing boilerplate\n\nCo-Authored-By: Clint Wylie <cjwylie@gmail.com>\n\n* Reduced boilerplate\n\n* Renamed the method serialize to serializeWith\n\n* Removed unused import\n\n* Fixed incorrectly refactored test method\n\n* Added comments for ResponseContext keys\n\n* Fixed incorrectly refactored test method\n\n* Fixed IntervalChunkingQueryRunnerTest mocks\n","date":"2019-07-24 23:29:03","modifiedFileCount":"142","status":"M","submitter":"Eugene Sevastianov"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":5,"curCode":"  public void testSearch()\n  {\n    SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                    .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                    .granularity(QueryRunnerTestHelper.ALL_GRAN)\n                                    .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n                                    .query(\"a\")\n                                    .build();\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"automotive\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"mezzanine\", 279));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"travel\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"health\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"entertainment\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.MARKET_DIMENSION, \"total_market\", 186));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.PLACEMENTISH_DIMENSION, \"a\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.PARTIAL_NULL_DIMENSION, \"value\", 186));\n\n    checkSearchQuery(searchQuery, expectedHits);\n  }\n","date":"2019-08-23 18:13:54","endLine":150,"groupId":"12272","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/41/c2c1a3ed354e8c8a38c59b06bcd1a6ae1d3d1b.src","preCode":"  public void testSearch()\n  {\n    SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                    .dataSource(QueryRunnerTestHelper.dataSource)\n                                    .granularity(QueryRunnerTestHelper.allGran)\n                                    .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                                    .query(\"a\")\n                                    .build();\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 279));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 186));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 186));\n\n    checkSearchQuery(searchQuery, expectedHits);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":5,"curCode":"  public void testSearchWithCardinality()\n  {\n    final SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                          .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                          .granularity(QueryRunnerTestHelper.ALL_GRAN)\n                                          .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n                                          .query(\"a\")\n                                          .build();\n\n    \r\n    QueryRunner mergedRunner = TOOL_CHEST.mergeResults(\n        new QueryRunner<Result<SearchResultValue>>()\n        {\n          @Override\n          public Sequence<Result<SearchResultValue>> run(\n              QueryPlus<Result<SearchResultValue>> queryPlus,\n              ResponseContext responseContext\n          )\n          {\n            final QueryPlus<Result<SearchResultValue>> queryPlus1 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-01-12/2011-02-28\")))\n            );\n            final QueryPlus<Result<SearchResultValue>> queryPlus2 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-03-01/2011-04-15\")))\n            );\n            return Sequences.concat(runner.run(queryPlus1, responseContext), runner.run(queryPlus2, responseContext));\n          }\n        }\n    );\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"automotive\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"mezzanine\", 273));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"travel\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"health\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"entertainment\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.MARKET_DIMENSION, \"total_market\", 182));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.PLACEMENTISH_DIMENSION, \"a\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.PARTIAL_NULL_DIMENSION, \"value\", 182));\n\n    checkSearchQuery(searchQuery, mergedRunner, expectedHits);\n  }\n","date":"2019-08-23 18:13:54","endLine":194,"groupId":"12272","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSearchWithCardinality","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/41/c2c1a3ed354e8c8a38c59b06bcd1a6ae1d3d1b.src","preCode":"  public void testSearchWithCardinality()\n  {\n    final SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                          .dataSource(QueryRunnerTestHelper.dataSource)\n                                          .granularity(QueryRunnerTestHelper.allGran)\n                                          .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n                                          .query(\"a\")\n                                          .build();\n\n    \r\n    QueryRunner mergedRunner = toolChest.mergeResults(\n        new QueryRunner<Result<SearchResultValue>>()\n        {\n          @Override\n          public Sequence<Result<SearchResultValue>> run(\n              QueryPlus<Result<SearchResultValue>> queryPlus,\n              ResponseContext responseContext\n          )\n          {\n            final QueryPlus<Result<SearchResultValue>> queryPlus1 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-01-12/2011-02-28\")))\n            );\n            final QueryPlus<Result<SearchResultValue>> queryPlus2 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-03-01/2011-04-15\")))\n            );\n            return Sequences.concat(runner.run(queryPlus1, responseContext), runner.run(queryPlus2, responseContext));\n          }\n        }\n    );\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"automotive\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"mezzanine\", 273));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"travel\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"health\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.qualityDimension, \"entertainment\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.marketDimension, \"total_market\", 182));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.placementishDimension, \"a\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.partialNullDimension, \"value\", 182));\n\n    checkSearchQuery(searchQuery, mergedRunner, expectedHits);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"},{"authorTime":"2020-01-24 06:07:14","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":6,"curCode":"  public void testSearch()\n  {\n    SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                    .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                    .granularity(QueryRunnerTestHelper.ALL_GRAN)\n                                    .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n                                    .query(\"a\")\n                                    .build();\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"automotive\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"mezzanine\", 279));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"travel\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"health\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"entertainment\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.MARKET_DIMENSION, \"total_market\", 186));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.PLACEMENTISH_DIMENSION, \"a\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.PARTIAL_NULL_DIMENSION, \"value\", 186));\n\n    checkSearchQuery(searchQuery, expectedHits);\n  }\n","date":"2019-08-23 18:13:54","endLine":150,"groupId":"106832","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/41/c2c1a3ed354e8c8a38c59b06bcd1a6ae1d3d1b.src","preCode":"  public void testSearch()\n  {\n    SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                    .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                    .granularity(QueryRunnerTestHelper.ALL_GRAN)\n                                    .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n                                    .query(\"a\")\n                                    .build();\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"automotive\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"mezzanine\", 279));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"travel\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"health\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"entertainment\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.MARKET_DIMENSION, \"total_market\", 186));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.PLACEMENTISH_DIMENSION, \"a\", 93));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.PARTIAL_NULL_DIMENSION, \"value\", 186));\n\n    checkSearchQuery(searchQuery, expectedHits);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"N"},{"authorDate":"2020-01-24 06:07:14","commitOrder":6,"curCode":"  public void testSearchWithCardinality()\n  {\n    final SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                          .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                          .granularity(QueryRunnerTestHelper.ALL_GRAN)\n                                          .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n                                          .query(\"a\")\n                                          .build();\n\n    \r\n    QueryRunner mergedRunner = TOOL_CHEST.mergeResults(\n        new QueryRunner<Result<SearchResultValue>>()\n        {\n          @Override\n          public Sequence<Result<SearchResultValue>> run(\n              QueryPlus<Result<SearchResultValue>> queryPlus,\n              ResponseContext responseContext\n          )\n          {\n            final QueryPlus<Result<SearchResultValue>> queryPlus1 = queryPlus.withQuery(\n                queryPlus.getQuery().withQuerySegmentSpec(\n                    new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-01-12/2011-02-28\")))\n                )\n            );\n            final QueryPlus<Result<SearchResultValue>> queryPlus2 = queryPlus.withQuery(\n                queryPlus.getQuery().withQuerySegmentSpec(\n                    new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-03-01/2011-04-15\")))\n                )\n            );\n            return Sequences.concat(runner.run(queryPlus1, responseContext), runner.run(queryPlus2, responseContext));\n          }\n        }\n    );\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"automotive\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"mezzanine\", 273));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"travel\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"health\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"entertainment\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.MARKET_DIMENSION, \"total_market\", 182));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.PLACEMENTISH_DIMENSION, \"a\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.PARTIAL_NULL_DIMENSION, \"value\", 182));\n\n    checkSearchQuery(searchQuery, mergedRunner, expectedHits);\n  }\n","date":"2020-01-24 06:07:14","endLine":197,"groupId":"106832","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSearchWithCardinality","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ae/bcf257b3e5743411bfc271c8feef597f4854ac.src","preCode":"  public void testSearchWithCardinality()\n  {\n    final SearchQuery searchQuery = Druids.newSearchQueryBuilder()\n                                          .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                          .granularity(QueryRunnerTestHelper.ALL_GRAN)\n                                          .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n                                          .query(\"a\")\n                                          .build();\n\n    \r\n    QueryRunner mergedRunner = TOOL_CHEST.mergeResults(\n        new QueryRunner<Result<SearchResultValue>>()\n        {\n          @Override\n          public Sequence<Result<SearchResultValue>> run(\n              QueryPlus<Result<SearchResultValue>> queryPlus,\n              ResponseContext responseContext\n          )\n          {\n            final QueryPlus<Result<SearchResultValue>> queryPlus1 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-01-12/2011-02-28\")))\n            );\n            final QueryPlus<Result<SearchResultValue>> queryPlus2 = queryPlus.withQuerySegmentSpec(\n                new MultipleIntervalSegmentSpec(Collections.singletonList(Intervals.of(\"2011-03-01/2011-04-15\")))\n            );\n            return Sequences.concat(runner.run(queryPlus1, responseContext), runner.run(queryPlus2, responseContext));\n          }\n        }\n    );\n\n    List<SearchHit> expectedHits = new ArrayList<>();\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"automotive\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"mezzanine\", 273));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"travel\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"health\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.QUALITY_DIMENSION, \"entertainment\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.MARKET_DIMENSION, \"total_market\", 182));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.PLACEMENTISH_DIMENSION, \"a\", 91));\n    expectedHits.add(new SearchHit(QueryRunnerTestHelper.PARTIAL_NULL_DIMENSION, \"value\", 182));\n\n    checkSearchQuery(searchQuery, mergedRunner, expectedHits);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/SearchQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"f0f68570ec1e897348ab7c2825c7063e1330355e","commitMessage":"@@@Use DataSourceAnalysis throughout the query stack. (#9239)\n\nBuilds on #9235.  using the datasource analysis functionality to replace various ad-hoc\napproaches. The most interesting changes are in ClientQuerySegmentWalker (brokers). \nServerManager (historicals).  and SinkQuerySegmentWalker (indexing tasks).\n\nOther changes related to improving how we analyze queries:\n\n1) Changes TimelineServerView to return an Optional timeline.  which I thought made\n   the analysis changes cleaner to implement.\n2) Added QueryToolChest#canPerformSubquery.  which is now used by query entry points to\n   determine whether it is safe to pass a subquery dataSource to the query toolchest.\n   Fixes an issue introduced in #5471 where subqueries under non-groupBy-typed queries\n   were silently ignored.  since neither the query entry point nor the toolchest did\n   anything special with them.\n3) Removes the QueryPlus.withQuerySegmentSpec method.  which was mostly being used in\n   error-prone ways (ignoring any potential subqueries.  and not verifying that the\n   underlying data source is actually a table). Replaces with a new function. \n   Queries.withSpecificSegments.  that includes sanity checks.","date":"2020-01-24 06:07:14","modifiedFileCount":"38","status":"M","submitter":"Gian Merlino"}]
