[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSearchWithSplit4()\n  {\n    BitmapFactory bf = new ConciseBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    Random rand = new Random();\n\n    int outPolygon = 0, inPolygon = 0;\n    for (; inPolygon < 500; ) {\n      double abscissa = rand.nextDouble() * 5;\n      double ordinate = rand.nextDouble() * 4;\n\n      if (abscissa < 1 || abscissa > 4 || ordinate < 1 || ordinate > 3 || abscissa < 2 && ordinate > 2) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            outPolygon + 500\n        );\n        outPolygon++;\n      } else if (abscissa > 1 && abscissa < 4 && ordinate > 1 && ordinate < 2\n                 || abscissa > 2 && abscissa < 4 && ordinate >= 2 && ordinate < 3) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            inPolygon\n        );\n        inPolygon++;\n      }\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(PolygonBound.from(\n        new float[]{1.0f, 1.0f, 2.0f, 2.0f, 4.0f, 4.0f},\n        new float[]{1.0f, 2.0f, 2.0f, 3.0f, 3.0f, 1.0f}\n    ));\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() == 500);\n\n    Set<Integer> expected = Sets.newHashSet();\n    for (int i = 0; i < 500; i++) {\n      expected.add(i);\n    }\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":409,"groupId":"372","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearchWithSplit4","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1d/12d379ab20a8f8a648329ef40a6366b6b54810.src","preCode":"  public void testSearchWithSplit4()\n  {\n    BitmapFactory bf = new ConciseBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    Random rand = new Random();\n\n    int outPolygon = 0, inPolygon = 0;\n    for (; inPolygon < 500; ) {\n      double abscissa = rand.nextDouble() * 5;\n      double ordinate = rand.nextDouble() * 4;\n\n      if (abscissa < 1 || abscissa > 4 || ordinate < 1 || ordinate > 3 || abscissa < 2 && ordinate > 2) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            outPolygon + 500\n        );\n        outPolygon++;\n      } else if (abscissa > 1 && abscissa < 4 && ordinate > 1 && ordinate < 2\n                 || abscissa > 2 && abscissa < 4 && ordinate >= 2 && ordinate < 3) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            inPolygon\n        );\n        inPolygon++;\n      }\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(PolygonBound.from(\n        new float[]{1.0f, 1.0f, 2.0f, 2.0f, 4.0f, 4.0f},\n        new float[]{1.0f, 2.0f, 2.0f, 3.0f, 3.0f, 1.0f}\n    ));\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() == 500);\n\n    Set<Integer> expected = Sets.newHashSet();\n    for (int i = 0; i < 500; i++) {\n      expected.add(i);\n    }\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/collections/spatial/ImmutableRTreeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSearchWithSplit4Roaring()\n  {\n    BitmapFactory bf = new RoaringBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    Random rand = new Random();\n\n    int outPolygon = 0, inPolygon = 0;\n    for (; inPolygon < 500; ) {\n      double abscissa = rand.nextDouble() * 5;\n      double ordinate = rand.nextDouble() * 4;\n\n      if (abscissa < 1 || abscissa > 4 || ordinate < 1 || ordinate > 3 || abscissa < 2 && ordinate > 2) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            outPolygon + 500\n        );\n        outPolygon++;\n      } else if (abscissa > 1 && abscissa < 4 && ordinate > 1 && ordinate < 2\n                 || abscissa > 2 && abscissa < 4 && ordinate >= 2 && ordinate < 3) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            inPolygon\n        );\n        inPolygon++;\n      }\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(PolygonBound.from(\n        new float[]{1.0f, 1.0f, 2.0f, 2.0f, 4.0f, 4.0f},\n        new float[]{1.0f, 2.0f, 2.0f, 3.0f, 3.0f, 1.0f}\n    ));\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() == 500);\n\n    Set<Integer> expected = Sets.newHashSet();\n    for (int i = 0; i < 500; i++) {\n      expected.add(i);\n    }\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":455,"groupId":"372","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSearchWithSplit4Roaring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1d/12d379ab20a8f8a648329ef40a6366b6b54810.src","preCode":"  public void testSearchWithSplit4Roaring()\n  {\n    BitmapFactory bf = new RoaringBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    Random rand = new Random();\n\n    int outPolygon = 0, inPolygon = 0;\n    for (; inPolygon < 500; ) {\n      double abscissa = rand.nextDouble() * 5;\n      double ordinate = rand.nextDouble() * 4;\n\n      if (abscissa < 1 || abscissa > 4 || ordinate < 1 || ordinate > 3 || abscissa < 2 && ordinate > 2) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            outPolygon + 500\n        );\n        outPolygon++;\n      } else if (abscissa > 1 && abscissa < 4 && ordinate > 1 && ordinate < 2\n                 || abscissa > 2 && abscissa < 4 && ordinate >= 2 && ordinate < 3) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            inPolygon\n        );\n        inPolygon++;\n      }\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(PolygonBound.from(\n        new float[]{1.0f, 1.0f, 2.0f, 2.0f, 4.0f, 4.0f},\n        new float[]{1.0f, 2.0f, 2.0f, 3.0f, 3.0f, 1.0f}\n    ));\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() == 500);\n\n    Set<Integer> expected = Sets.newHashSet();\n    for (int i = 0; i < 500; i++) {\n      expected.add(i);\n    }\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/collections/spatial/ImmutableRTreeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-09-15 04:35:51","codes":[{"authorDate":"2018-09-15 04:35:51","commitOrder":2,"curCode":"  public void testSearchWithSplit4()\n  {\n    BitmapFactory bf = new ConciseBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    Random rand = ThreadLocalRandom.current();\n\n    int outPolygon = 0, inPolygon = 0;\n    for (; inPolygon < 500; ) {\n      double abscissa = rand.nextDouble() * 5;\n      double ordinate = rand.nextDouble() * 4;\n\n      if (abscissa < 1 || abscissa > 4 || ordinate < 1 || ordinate > 3 || abscissa < 2 && ordinate > 2) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            outPolygon + 500\n        );\n        outPolygon++;\n      } else if (abscissa > 1 && abscissa < 4 && ordinate > 1 && ordinate < 2\n                 || abscissa > 2 && abscissa < 4 && ordinate >= 2 && ordinate < 3) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            inPolygon\n        );\n        inPolygon++;\n      }\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(PolygonBound.from(\n        new float[]{1.0f, 1.0f, 2.0f, 2.0f, 4.0f, 4.0f},\n        new float[]{1.0f, 2.0f, 2.0f, 3.0f, 3.0f, 1.0f}\n    ));\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() == 500);\n\n    Set<Integer> expected = Sets.newHashSet();\n    for (int i = 0; i < 500; i++) {\n      expected.add(i);\n    }\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","date":"2018-09-15 04:35:51","endLine":410,"groupId":"372","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearchWithSplit4","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2c/c5099efe6d59157673a3c75d4ed53dfce68f49.src","preCode":"  public void testSearchWithSplit4()\n  {\n    BitmapFactory bf = new ConciseBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    Random rand = new Random();\n\n    int outPolygon = 0, inPolygon = 0;\n    for (; inPolygon < 500; ) {\n      double abscissa = rand.nextDouble() * 5;\n      double ordinate = rand.nextDouble() * 4;\n\n      if (abscissa < 1 || abscissa > 4 || ordinate < 1 || ordinate > 3 || abscissa < 2 && ordinate > 2) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            outPolygon + 500\n        );\n        outPolygon++;\n      } else if (abscissa > 1 && abscissa < 4 && ordinate > 1 && ordinate < 2\n                 || abscissa > 2 && abscissa < 4 && ordinate >= 2 && ordinate < 3) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            inPolygon\n        );\n        inPolygon++;\n      }\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(PolygonBound.from(\n        new float[]{1.0f, 1.0f, 2.0f, 2.0f, 4.0f, 4.0f},\n        new float[]{1.0f, 2.0f, 2.0f, 3.0f, 3.0f, 1.0f}\n    ));\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() == 500);\n\n    Set<Integer> expected = Sets.newHashSet();\n    for (int i = 0; i < 500; i++) {\n      expected.add(i);\n    }\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/collections/spatial/ImmutableRTreeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":367,"status":"M"},{"authorDate":"2018-09-15 04:35:51","commitOrder":2,"curCode":"  public void testSearchWithSplit4Roaring()\n  {\n    BitmapFactory bf = new RoaringBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    Random rand = ThreadLocalRandom.current();\n\n    int outPolygon = 0, inPolygon = 0;\n    for (; inPolygon < 500; ) {\n      double abscissa = rand.nextDouble() * 5;\n      double ordinate = rand.nextDouble() * 4;\n\n      if (abscissa < 1 || abscissa > 4 || ordinate < 1 || ordinate > 3 || abscissa < 2 && ordinate > 2) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            outPolygon + 500\n        );\n        outPolygon++;\n      } else if (abscissa > 1 && abscissa < 4 && ordinate > 1 && ordinate < 2\n                 || abscissa > 2 && abscissa < 4 && ordinate >= 2 && ordinate < 3) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            inPolygon\n        );\n        inPolygon++;\n      }\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(PolygonBound.from(\n        new float[]{1.0f, 1.0f, 2.0f, 2.0f, 4.0f, 4.0f},\n        new float[]{1.0f, 2.0f, 2.0f, 3.0f, 3.0f, 1.0f}\n    ));\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() == 500);\n\n    Set<Integer> expected = Sets.newHashSet();\n    for (int i = 0; i < 500; i++) {\n      expected.add(i);\n    }\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","date":"2018-09-15 04:35:51","endLine":456,"groupId":"372","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSearchWithSplit4Roaring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2c/c5099efe6d59157673a3c75d4ed53dfce68f49.src","preCode":"  public void testSearchWithSplit4Roaring()\n  {\n    BitmapFactory bf = new RoaringBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    Random rand = new Random();\n\n    int outPolygon = 0, inPolygon = 0;\n    for (; inPolygon < 500; ) {\n      double abscissa = rand.nextDouble() * 5;\n      double ordinate = rand.nextDouble() * 4;\n\n      if (abscissa < 1 || abscissa > 4 || ordinate < 1 || ordinate > 3 || abscissa < 2 && ordinate > 2) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            outPolygon + 500\n        );\n        outPolygon++;\n      } else if (abscissa > 1 && abscissa < 4 && ordinate > 1 && ordinate < 2\n                 || abscissa > 2 && abscissa < 4 && ordinate >= 2 && ordinate < 3) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            inPolygon\n        );\n        inPolygon++;\n      }\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(PolygonBound.from(\n        new float[]{1.0f, 1.0f, 2.0f, 2.0f, 4.0f, 4.0f},\n        new float[]{1.0f, 2.0f, 2.0f, 3.0f, 3.0f, 1.0f}\n    ));\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() == 500);\n\n    Set<Integer> expected = Sets.newHashSet();\n    for (int i = 0; i < 500; i++) {\n      expected.add(i);\n    }\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/collections/spatial/ImmutableRTreeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":413,"status":"M"}],"commitId":"0c4bd2b57b19bcbd9a275fad412960aa0a39ca5f","commitMessage":"@@@Prohibit some Random usage patterns (#6226)\n\n* Prohibit Random usage patterns\n\n* Fix FlattenJSONBenchmarkUtil\n","date":"2018-09-15 04:35:51","modifiedFileCount":"44","status":"M","submitter":"Roman Leventov"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":3,"curCode":"  public void testSearchWithSplit4()\n  {\n    BitmapFactory bf = new ConciseBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    Random rand = ThreadLocalRandom.current();\n\n    int outPolygon = 0, inPolygon = 0;\n    for (; inPolygon < 500; ) {\n      double abscissa = rand.nextDouble() * 5;\n      double ordinate = rand.nextDouble() * 4;\n\n      if (abscissa < 1 || abscissa > 4 || ordinate < 1 || ordinate > 3 || abscissa < 2 && ordinate > 2) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            outPolygon + 500\n        );\n        outPolygon++;\n      } else if (abscissa > 1 && abscissa < 4 && ordinate > 1 && ordinate < 2\n                 || abscissa > 2 && abscissa < 4 && ordinate >= 2 && ordinate < 3) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            inPolygon\n        );\n        inPolygon++;\n      }\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(PolygonBound.from(\n        new float[]{1.0f, 1.0f, 2.0f, 2.0f, 4.0f, 4.0f},\n        new float[]{1.0f, 2.0f, 2.0f, 3.0f, 3.0f, 1.0f}\n    ));\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() == 500);\n\n    Set<Integer> expected = new HashSet<>();\n    for (int i = 0; i < 500; i++) {\n      expected.add(i);\n    }\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","date":"2018-10-29 20:02:43","endLine":411,"groupId":"107132","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearchWithSplit4","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cb/02683ed8c6e235e34388d13e2eb03243c67084.src","preCode":"  public void testSearchWithSplit4()\n  {\n    BitmapFactory bf = new ConciseBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    Random rand = ThreadLocalRandom.current();\n\n    int outPolygon = 0, inPolygon = 0;\n    for (; inPolygon < 500; ) {\n      double abscissa = rand.nextDouble() * 5;\n      double ordinate = rand.nextDouble() * 4;\n\n      if (abscissa < 1 || abscissa > 4 || ordinate < 1 || ordinate > 3 || abscissa < 2 && ordinate > 2) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            outPolygon + 500\n        );\n        outPolygon++;\n      } else if (abscissa > 1 && abscissa < 4 && ordinate > 1 && ordinate < 2\n                 || abscissa > 2 && abscissa < 4 && ordinate >= 2 && ordinate < 3) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            inPolygon\n        );\n        inPolygon++;\n      }\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(PolygonBound.from(\n        new float[]{1.0f, 1.0f, 2.0f, 2.0f, 4.0f, 4.0f},\n        new float[]{1.0f, 2.0f, 2.0f, 3.0f, 3.0f, 1.0f}\n    ));\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() == 500);\n\n    Set<Integer> expected = Sets.newHashSet();\n    for (int i = 0; i < 500; i++) {\n      expected.add(i);\n    }\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/collections/spatial/ImmutableRTreeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"M"},{"authorDate":"2018-10-29 20:02:43","commitOrder":3,"curCode":"  public void testSearchWithSplit4Roaring()\n  {\n    BitmapFactory bf = new RoaringBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    Random rand = ThreadLocalRandom.current();\n\n    int outPolygon = 0, inPolygon = 0;\n    for (; inPolygon < 500; ) {\n      double abscissa = rand.nextDouble() * 5;\n      double ordinate = rand.nextDouble() * 4;\n\n      if (abscissa < 1 || abscissa > 4 || ordinate < 1 || ordinate > 3 || abscissa < 2 && ordinate > 2) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            outPolygon + 500\n        );\n        outPolygon++;\n      } else if (abscissa > 1 && abscissa < 4 && ordinate > 1 && ordinate < 2\n                 || abscissa > 2 && abscissa < 4 && ordinate >= 2 && ordinate < 3) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            inPolygon\n        );\n        inPolygon++;\n      }\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(PolygonBound.from(\n        new float[]{1.0f, 1.0f, 2.0f, 2.0f, 4.0f, 4.0f},\n        new float[]{1.0f, 2.0f, 2.0f, 3.0f, 3.0f, 1.0f}\n    ));\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() == 500);\n\n    Set<Integer> expected = new HashSet<>();\n    for (int i = 0; i < 500; i++) {\n      expected.add(i);\n    }\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","date":"2018-10-29 20:02:43","endLine":457,"groupId":"107132","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSearchWithSplit4Roaring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cb/02683ed8c6e235e34388d13e2eb03243c67084.src","preCode":"  public void testSearchWithSplit4Roaring()\n  {\n    BitmapFactory bf = new RoaringBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    Random rand = ThreadLocalRandom.current();\n\n    int outPolygon = 0, inPolygon = 0;\n    for (; inPolygon < 500; ) {\n      double abscissa = rand.nextDouble() * 5;\n      double ordinate = rand.nextDouble() * 4;\n\n      if (abscissa < 1 || abscissa > 4 || ordinate < 1 || ordinate > 3 || abscissa < 2 && ordinate > 2) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            outPolygon + 500\n        );\n        outPolygon++;\n      } else if (abscissa > 1 && abscissa < 4 && ordinate > 1 && ordinate < 2\n                 || abscissa > 2 && abscissa < 4 && ordinate >= 2 && ordinate < 3) {\n        tree.insert(\n            new float[]{(float) abscissa, (float) ordinate},\n            inPolygon\n        );\n        inPolygon++;\n      }\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(PolygonBound.from(\n        new float[]{1.0f, 1.0f, 2.0f, 2.0f, 4.0f, 4.0f},\n        new float[]{1.0f, 2.0f, 2.0f, 3.0f, 3.0f, 1.0f}\n    ));\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() == 500);\n\n    Set<Integer> expected = Sets.newHashSet();\n    for (int i = 0; i < 500; i++) {\n      expected.add(i);\n    }\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/collections/spatial/ImmutableRTreeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":414,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"}]
