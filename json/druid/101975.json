[{"authorTime":"2020-02-20 05:09:20","codes":[{"authorDate":"2019-03-12 02:37:58","commitOrder":4,"curCode":"  public void testCountStarWithFilterOnCastedString() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo WHERE CAST(dim1 AS bigint) = 2\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(numericSelector(\"dim1\", \"2\", null))\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":3051,"groupId":"9279","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCountStarWithFilterOnCastedString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testCountStarWithFilterOnCastedString() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo WHERE CAST(dim1 AS bigint) = 2\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(numericSelector(\"dim1\", \"2\", null))\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":3033,"status":"NB"},{"authorDate":"2020-02-20 05:09:20","commitOrder":4,"curCode":"  public void testFloats() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo WHERE cnt = ?\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(\n                      selector(\"cnt\", \"1.0\", null)\n                  )\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(new Object[]{6L}),\n        ImmutableList.of(new SqlParameter(SqlType.REAL, 1.0f))\n    );\n  }\n","date":"2020-02-20 05:09:20","endLine":535,"groupId":"13700","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/98/263cb2dea42a4594bc3fb6d2c4a1b42a059bb6.src","preCode":"  public void testFloats() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo WHERE cnt = ?\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(\n                      selector(\"cnt\", \"1.0\", null)\n                  )\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(new Object[]{6L}),\n        ImmutableList.of(new SqlParameter(SqlType.REAL, 1.0f))\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteParameterQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"B"}],"commitId":"b408a6d774e43e574bf8092584fae76d582cfd8f","commitMessage":"@@@sql support for dynamic parameters (#6974)\n\n* sql support for dynamic parameters\n\n* fixup\n\n* javadocs\n\n* fixup from merge\n\n* formatting\n\n* fixes\n\n* fix it\n\n* doc fix\n\n* remove druid fallback self-join parameterized test\n\n* unused imports\n\n* ignore test for now\n\n* fix imports\n\n* fixup\n\n* fix merge\n\n* merge fixup\n\n* fix test that cannot vectorize\n\n* fixup and more better\n\n* dependency thingo\n\n* fix docs\n\n* tweaks\n\n* fix docs\n\n* spelling\n\n* unused imports after merge\n\n* review stuffs\n\n* add comment\n\n* add ignore text\n\n* review stuffs\n","date":"2020-02-20 05:09:20","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-05-11 01:13:37","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":5,"curCode":"  public void testCountStarWithFilterOnCastedString() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo WHERE CAST(dim1 AS bigint) = 2\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(numericSelector(\"dim1\", \"2\", null))\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":6862,"groupId":"101975","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCountStarWithFilterOnCastedString","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testCountStarWithFilterOnCastedString() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo WHERE CAST(dim1 AS bigint) = 2\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(numericSelector(\"dim1\", \"2\", null))\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6844,"status":"M"},{"authorDate":"2021-05-11 01:13:37","commitOrder":5,"curCode":"  public void testFloats() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo WHERE cnt = ?\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(\n                      selector(\"cnt\", \"1.0\", null)\n                  )\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(new Object[]{6L}),\n        ImmutableList.of(new SqlParameter(SqlType.REAL, 1.0f))\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":550,"groupId":"101975","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFloats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/0b6fe7ea47cc5bb91578f9dae23d81a3c4f630.src","preCode":"  public void testFloats() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo WHERE cnt = ?\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(\n                      selector(\"cnt\", \"1.0\", null)\n                  )\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(new Object[]{6L}),\n        ImmutableList.of(new SqlParameter(SqlType.REAL, 1.0f))\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteParameterQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":531,"status":"M"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
