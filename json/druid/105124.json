[{"authorTime":"2018-10-15 11:37:37","codes":[{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testIdentifier()\n  {\n    final DataSegment segment = DataSegment.builder()\n                                           .dataSource(\"foo\")\n                                           .interval(Intervals.of(\"2012-01-01/2012-01-02\"))\n                                           .version(DateTimes.of(\"2012-01-01T11:22:33.444Z\").toString())\n                                           .shardSpec(NoneShardSpec.instance())\n                                           .build();\n\n    Assert.assertEquals(\n        \"foo_2012-01-01T00:00:00.000Z_2012-01-02T00:00:00.000Z_2012-01-01T11:22:33.444Z\",\n        segment.getIdentifier()\n    );\n  }\n","date":"2018-10-15 11:37:37","endLine":177,"groupId":"9251","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdentifier","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/59/a71ff9dbc801554d94ad4288e25c93b6a016e5.src","preCode":"  public void testIdentifier()\n  {\n    final DataSegment segment = DataSegment.builder()\n                                           .dataSource(\"foo\")\n                                           .interval(Intervals.of(\"2012-01-01/2012-01-02\"))\n                                           .version(DateTimes.of(\"2012-01-01T11:22:33.444Z\").toString())\n                                           .shardSpec(NoneShardSpec.instance())\n                                           .build();\n\n    Assert.assertEquals(\n        \"foo_2012-01-01T00:00:00.000Z_2012-01-02T00:00:00.000Z_2012-01-01T11:22:33.444Z\",\n        segment.getIdentifier()\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/DataSegmentTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"},{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testIdentifierWithNonzeroPartition()\n  {\n    final DataSegment segment = DataSegment.builder()\n                                           .dataSource(\"foo\")\n                                           .interval(Intervals.of(\"2012-01-01/2012-01-02\"))\n                                           .version(DateTimes.of(\"2012-01-01T11:22:33.444Z\").toString())\n                                           .shardSpec(getShardSpec(7))\n                                           .build();\n\n    Assert.assertEquals(\n        \"foo_2012-01-01T00:00:00.000Z_2012-01-02T00:00:00.000Z_2012-01-01T11:22:33.444Z_7\",\n        segment.getIdentifier()\n    );\n  }\n","date":"2018-10-15 11:37:37","endLine":209,"groupId":"18853","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIdentifierWithNonzeroPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/59/a71ff9dbc801554d94ad4288e25c93b6a016e5.src","preCode":"  public void testIdentifierWithNonzeroPartition()\n  {\n    final DataSegment segment = DataSegment.builder()\n                                           .dataSource(\"foo\")\n                                           .interval(Intervals.of(\"2012-01-01/2012-01-02\"))\n                                           .version(DateTimes.of(\"2012-01-01T11:22:33.444Z\").toString())\n                                           .shardSpec(getShardSpec(7))\n                                           .build();\n\n    Assert.assertEquals(\n        \"foo_2012-01-01T00:00:00.000Z_2012-01-02T00:00:00.000Z_2012-01-01T11:22:33.444Z_7\",\n        segment.getIdentifier()\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/DataSegmentTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"B"}],"commitId":"84598fba3b283cbfd6a5addd2602c7b12ba8c00c","commitMessage":"@@@combine druid-api.  druid-common.  java-util into druid-core (#6443)\n\n* combine druid-api.  druid-common.  java-util\n\n* spacing\n","date":"2018-10-15 11:37:37","modifiedFileCount":"0","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void testIdentifier()\n  {\n    final DataSegment segment = DataSegment.builder()\n                                           .dataSource(\"foo\")\n                                           .interval(Intervals.of(\"2012-01-01/2012-01-02\"))\n                                           .version(DateTimes.of(\"2012-01-01T11:22:33.444Z\").toString())\n                                           .shardSpec(NoneShardSpec.instance())\n                                           .build();\n\n    Assert.assertEquals(\n        \"foo_2012-01-01T00:00:00.000Z_2012-01-02T00:00:00.000Z_2012-01-01T11:22:33.444Z\",\n        segment.getId().toString()\n    );\n  }\n","date":"2019-01-22 03:11:10","endLine":177,"groupId":"9251","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdentifier","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/70/1578541c640853a920c540d450fce1db0da9b1.src","preCode":"  public void testIdentifier()\n  {\n    final DataSegment segment = DataSegment.builder()\n                                           .dataSource(\"foo\")\n                                           .interval(Intervals.of(\"2012-01-01/2012-01-02\"))\n                                           .version(DateTimes.of(\"2012-01-01T11:22:33.444Z\").toString())\n                                           .shardSpec(NoneShardSpec.instance())\n                                           .build();\n\n    Assert.assertEquals(\n        \"foo_2012-01-01T00:00:00.000Z_2012-01-02T00:00:00.000Z_2012-01-01T11:22:33.444Z\",\n        segment.getIdentifier()\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/DataSegmentTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void testIdentifierWithNonzeroPartition()\n  {\n    final DataSegment segment = DataSegment.builder()\n                                           .dataSource(\"foo\")\n                                           .interval(Intervals.of(\"2012-01-01/2012-01-02\"))\n                                           .version(DateTimes.of(\"2012-01-01T11:22:33.444Z\").toString())\n                                           .shardSpec(getShardSpec(7))\n                                           .build();\n\n    Assert.assertEquals(\n        \"foo_2012-01-01T00:00:00.000Z_2012-01-02T00:00:00.000Z_2012-01-01T11:22:33.444Z_7\",\n        segment.getId().toString()\n    );\n  }\n","date":"2019-01-22 03:11:10","endLine":209,"groupId":"18853","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIdentifierWithNonzeroPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/70/1578541c640853a920c540d450fce1db0da9b1.src","preCode":"  public void testIdentifierWithNonzeroPartition()\n  {\n    final DataSegment segment = DataSegment.builder()\n                                           .dataSource(\"foo\")\n                                           .interval(Intervals.of(\"2012-01-01/2012-01-02\"))\n                                           .version(DateTimes.of(\"2012-01-01T11:22:33.444Z\").toString())\n                                           .shardSpec(getShardSpec(7))\n                                           .build();\n\n    Assert.assertEquals(\n        \"foo_2012-01-01T00:00:00.000Z_2012-01-02T00:00:00.000Z_2012-01-01T11:22:33.444Z_7\",\n        segment.getIdentifier()\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/DataSegmentTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-11-07 03:07:04","codes":[{"authorDate":"2019-11-07 03:07:04","commitOrder":3,"curCode":"  public void testIdentifier()\n  {\n    final DataSegment segment = DataSegment.builder()\n                                           .dataSource(\"foo\")\n                                           .interval(Intervals.of(\"2012-01-01/2012-01-02\"))\n                                           .version(DateTimes.of(\"2012-01-01T11:22:33.444Z\").toString())\n                                           .shardSpec(NoneShardSpec.instance())\n                                           .size(0)\n                                           .build();\n\n    Assert.assertEquals(\n        \"foo_2012-01-01T00:00:00.000Z_2012-01-02T00:00:00.000Z_2012-01-01T11:22:33.444Z\",\n        segment.getId().toString()\n    );\n  }\n","date":"2019-11-07 03:07:04","endLine":187,"groupId":"105124","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIdentifier","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6d/0af3f2892eed3cb4fbc4d8dc706a4a4ddd8420.src","preCode":"  public void testIdentifier()\n  {\n    final DataSegment segment = DataSegment.builder()\n                                           .dataSource(\"foo\")\n                                           .interval(Intervals.of(\"2012-01-01/2012-01-02\"))\n                                           .version(DateTimes.of(\"2012-01-01T11:22:33.444Z\").toString())\n                                           .shardSpec(NoneShardSpec.instance())\n                                           .build();\n\n    Assert.assertEquals(\n        \"foo_2012-01-01T00:00:00.000Z_2012-01-02T00:00:00.000Z_2012-01-01T11:22:33.444Z\",\n        segment.getId().toString()\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/DataSegmentTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2019-11-07 03:07:04","commitOrder":3,"curCode":"  public void testIdentifierWithNonzeroPartition()\n  {\n    final DataSegment segment = DataSegment.builder()\n                                           .dataSource(\"foo\")\n                                           .interval(Intervals.of(\"2012-01-01/2012-01-02\"))\n                                           .version(DateTimes.of(\"2012-01-01T11:22:33.444Z\").toString())\n                                           .shardSpec(getShardSpec(7))\n                                           .size(0)\n                                           .build();\n\n    Assert.assertEquals(\n        \"foo_2012-01-01T00:00:00.000Z_2012-01-02T00:00:00.000Z_2012-01-01T11:22:33.444Z_7\",\n        segment.getId().toString()\n    );\n  }\n","date":"2019-11-07 03:07:04","endLine":221,"groupId":"105124","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIdentifierWithNonzeroPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6d/0af3f2892eed3cb4fbc4d8dc706a4a4ddd8420.src","preCode":"  public void testIdentifierWithNonzeroPartition()\n  {\n    final DataSegment segment = DataSegment.builder()\n                                           .dataSource(\"foo\")\n                                           .interval(Intervals.of(\"2012-01-01/2012-01-02\"))\n                                           .version(DateTimes.of(\"2012-01-01T11:22:33.444Z\").toString())\n                                           .shardSpec(getShardSpec(7))\n                                           .build();\n\n    Assert.assertEquals(\n        \"foo_2012-01-01T00:00:00.000Z_2012-01-02T00:00:00.000Z_2012-01-01T11:22:33.444Z_7\",\n        segment.getId().toString()\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/DataSegmentTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"5c0fc0a13ab4d259b430bf50b322f631504c4529","commitMessage":"@@@Fix ambiguity about IndexerSQLMetadataStorageCoordinator.getUsedSegmentsForInterval() returning only non-overshadowed or all used segments (#8564)\n\n* IndexerSQLMetadataStorageCoordinator.getTimelineForIntervalsWithHandle() don't fetch abutting intervals; simplify getUsedSegmentsForIntervals()\n\n* Add VersionedIntervalTimeline.findNonOvershadowedObjectsInInterval() method; Propagate the decision about whether only visible segmetns or visible and overshadowed segments should be returned from IndexerMetadataStorageCoordinator's methods to the user logic; Rename SegmentListUsedAction to RetrieveUsedSegmentsAction.  SegmetnListUnusedAction to RetrieveUnusedSegmentsAction.  and UsedSegmentLister to UsedSegmentsRetriever\n\n* Fix tests\n\n* More fixes\n\n* Add javadoc notes about returning Collection instead of Set. Add JacksonUtils.readValue() to reduce boilerplate code\n\n* Fix KinesisIndexTaskTest.  factor out common parts from KinesisIndexTaskTest and KafkaIndexTaskTest into SeekableStreamIndexTaskTestBase\n\n* More test fixes\n\n* More test fixes\n\n* Add a comment to VersionedIntervalTimelineTestBase\n\n* Fix tests\n\n* Set DataSegment.size(0) in more tests\n\n* Specify DataSegment.size(0) in more places in tests\n\n* Fix more tests\n\n* Fix DruidSchemaTest\n\n* Set DataSegment's size in more tests and benchmarks\n\n* Fix HdfsDataSegmentPusherTest\n\n* Doc changes addressing comments\n\n* Extended doc for visibility\n\n* Typo\n\n* Typo 2\n\n* Address comment\n","date":"2019-11-07 03:07:04","modifiedFileCount":"88","status":"M","submitter":"Roman Leventov"}]
