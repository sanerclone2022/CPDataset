[{"authorTime":"2019-01-30 23:13:07","codes":[{"authorDate":"2019-01-30 23:13:07","commitOrder":1,"curCode":"  public void testExprEvalSelectorWithLongsAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            CURRENT_ROW,\n            ImmutableMap.of(\"x\", ValueType.LONG)\n        ),\n        Parser.parse(SCALE_LONG.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getLong(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","date":"2019-01-30 23:13:07","endLine":526,"groupId":"21491","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExprEvalSelectorWithLongsAndNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b2/8fd5b8af9bb17ab1d2a0620b541f01a63617e3.src","preCode":"  public void testExprEvalSelectorWithLongsAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            CURRENT_ROW,\n            ImmutableMap.of(\"x\", ValueType.LONG)\n        ),\n        Parser.parse(SCALE_LONG.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getLong(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":508,"status":"B"},{"authorDate":"2019-01-30 23:13:07","commitOrder":1,"curCode":"  public void testExprEvalSelectorWithDoublesAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            CURRENT_ROW,\n            ImmutableMap.of(\"x\", ValueType.DOUBLE)\n        ),\n        Parser.parse(SCALE_FLOAT.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getDouble(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","date":"2019-01-30 23:13:07","endLine":547,"groupId":"21492","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExprEvalSelectorWithDoublesAndNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b2/8fd5b8af9bb17ab1d2a0620b541f01a63617e3.src","preCode":"  public void testExprEvalSelectorWithDoublesAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            CURRENT_ROW,\n            ImmutableMap.of(\"x\", ValueType.DOUBLE)\n        ),\n        Parser.parse(SCALE_FLOAT.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getDouble(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":529,"status":"B"}],"commitId":"de810286cd7f64ebe3e4b18555ccdb8672c7e87a","commitMessage":"@@@fix bug with expression virtual column selectors backed by a single long column (#6957)\n\n* fix issue with SingleLongInputCachingExpressionColumnValueSelector when sql compatible null handling enabled\n\n* add test with doubles to show same behavior for floats/doubles that lack the optimization of longs\n\n* simplify\n\n* fix import\n","date":"2019-01-30 23:13:07","modifiedFileCount":"2","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-08-01 07:15:12","codes":[{"authorDate":"2019-08-01 07:15:12","commitOrder":2,"curCode":"  public void testExprEvalSelectorWithLongsAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            CURRENT_ROW::get,\n            ImmutableMap.of(\"x\", ValueType.LONG)\n        ),\n        Parser.parse(SCALE_LONG.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getLong(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","date":"2019-08-01 07:15:12","endLine":613,"groupId":"21491","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExprEvalSelectorWithLongsAndNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d5/3dd3fcbe287220626c337e1f8b89e562dc1d03.src","preCode":"  public void testExprEvalSelectorWithLongsAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            CURRENT_ROW,\n            ImmutableMap.of(\"x\", ValueType.LONG)\n        ),\n        Parser.parse(SCALE_LONG.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getLong(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":595,"status":"M"},{"authorDate":"2019-08-01 07:15:12","commitOrder":2,"curCode":"  public void testExprEvalSelectorWithDoublesAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            CURRENT_ROW::get,\n            ImmutableMap.of(\"x\", ValueType.DOUBLE)\n        ),\n        Parser.parse(SCALE_FLOAT.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getDouble(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","date":"2019-08-01 07:15:12","endLine":634,"groupId":"21492","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExprEvalSelectorWithDoublesAndNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d5/3dd3fcbe287220626c337e1f8b89e562dc1d03.src","preCode":"  public void testExprEvalSelectorWithDoublesAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            CURRENT_ROW,\n            ImmutableMap.of(\"x\", ValueType.DOUBLE)\n        ),\n        Parser.parse(SCALE_FLOAT.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getDouble(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":616,"status":"M"}],"commitId":"77297f4e6f2e9d617c96cd46852bb5a772961e85","commitMessage":"@@@GroupBy array-based result rows. (#8196)\n\n* GroupBy array-based result rows.\n\nFixes #8118; see that proposal for details.\n\nOther than the GroupBy changes.  the main other \"interesting\" classes are:\n\n- ResultRow: The array-based result type.\n- BaseQuery: T is no longer required to be Comparable.\n- QueryToolChest: Adds \"decorateObjectMapper\" to enable query-aware serialization\n  and deserialization of result rows (necessary due to their positional nature).\n- QueryResource: Uses the new decoration functionality.\n- DirectDruidClient: Also uses the new decoration functionality.\n- QueryMaker (in Druid SQL): Modifications to read ResultRows.\n\nThese classes weren't changed.  but got some new javadocs:\n\n- BySegmentQueryRunner\n- FinalizeResultsQueryRunner\n- Query\n\n* Adjustments for TC stuff.\n","date":"2019-08-01 07:15:12","modifiedFileCount":"111","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-03-10 22:15:57","codes":[{"authorDate":"2020-03-10 22:15:57","commitOrder":3,"curCode":"  public void testExprEvalSelectorWithLongsAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            RowAdapters.standardRow(),\n            CURRENT_ROW::get,\n            ImmutableMap.of(\"x\", ValueType.LONG),\n            false\n        ),\n        Parser.parse(SCALE_LONG.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getLong(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","date":"2020-03-10 22:15:57","endLine":759,"groupId":"21491","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExprEvalSelectorWithLongsAndNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/25/648647f7a2b880f8202c89dffa2b37b920eeac.src","preCode":"  public void testExprEvalSelectorWithLongsAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            CURRENT_ROW::get,\n            ImmutableMap.of(\"x\", ValueType.LONG)\n        ),\n        Parser.parse(SCALE_LONG.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getLong(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":739,"status":"M"},{"authorDate":"2020-03-10 22:15:57","commitOrder":3,"curCode":"  public void testExprEvalSelectorWithDoublesAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            RowAdapters.standardRow(),\n            CURRENT_ROW::get,\n            ImmutableMap.of(\"x\", ValueType.DOUBLE),\n            false\n        ),\n        Parser.parse(SCALE_FLOAT.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getDouble(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","date":"2020-03-10 22:15:57","endLine":782,"groupId":"21492","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExprEvalSelectorWithDoublesAndNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/25/648647f7a2b880f8202c89dffa2b37b920eeac.src","preCode":"  public void testExprEvalSelectorWithDoublesAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            CURRENT_ROW::get,\n            ImmutableMap.of(\"x\", ValueType.DOUBLE)\n        ),\n        Parser.parse(SCALE_FLOAT.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getDouble(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":762,"status":"M"}],"commitId":"c6c2282b59cda107089a9b3944477fd630bc0657","commitMessage":"@@@Harmonization and bug-fixing for selector and filter behavior on unknown types. (#9484)\n\n* Harmonization and bug-fixing for selector and filter behavior on unknown types.\n\n- Migrate ValueMatcherColumnSelectorStrategy to newer ColumnProcessorFactory\n  system.  and set defaultType COMPLEX so unknown types can be dynamically matched.\n- Remove ValueGetters in favor of ColumnComparisonFilter doing its own thing.\n- Switch various methods to use convertObjectToX when casting to numbers.  rather\n  than ad-hoc and inconsistent logic.\n- Fix bug in RowBasedExpressionColumnValueSelector: isBindingArray should return\n  true even for 0- or 1- element arrays.\n- Adjust various javadocs.\n\n* Add throwParseExceptions option to Rows.objectToNumber.  switch back to that.\n\n* Update tests.\n\n* Adjust moment sketch tests.","date":"2020-03-10 22:15:57","modifiedFileCount":"32","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-03-13 02:06:44","codes":[{"authorDate":"2020-03-13 02:06:44","commitOrder":4,"curCode":"  public void testExprEvalSelectorWithLongsAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            RowAdapters.standardRow(),\n            CURRENT_ROW::get,\n            RowSignature.builder().add(\"x\", ValueType.LONG).build(),\n            false\n        ),\n        Parser.parse(SCALE_LONG.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getLong(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","date":"2020-03-13 02:06:44","endLine":760,"groupId":"105690","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testExprEvalSelectorWithLongsAndNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5c/d87afacc70702abfba5a43384253070249341e.src","preCode":"  public void testExprEvalSelectorWithLongsAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            RowAdapters.standardRow(),\n            CURRENT_ROW::get,\n            ImmutableMap.of(\"x\", ValueType.LONG),\n            false\n        ),\n        Parser.parse(SCALE_LONG.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getLong(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":740,"status":"M"},{"authorDate":"2020-03-13 02:06:44","commitOrder":4,"curCode":"  public void testExprEvalSelectorWithDoublesAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            RowAdapters.standardRow(),\n            CURRENT_ROW::get,\n            RowSignature.builder().add(\"x\", ValueType.DOUBLE).build(),\n            false\n        ),\n        Parser.parse(SCALE_FLOAT.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getDouble(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","date":"2020-03-13 02:06:44","endLine":783,"groupId":"105690","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExprEvalSelectorWithDoublesAndNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5c/d87afacc70702abfba5a43384253070249341e.src","preCode":"  public void testExprEvalSelectorWithDoublesAndNulls()\n  {\n    final ColumnValueSelector<ExprEval> selector = ExpressionSelectors.makeExprEvalSelector(\n        RowBasedColumnSelectorFactory.create(\n            RowAdapters.standardRow(),\n            CURRENT_ROW::get,\n            ImmutableMap.of(\"x\", ValueType.DOUBLE),\n            false\n        ),\n        Parser.parse(SCALE_FLOAT.getExpression(), TestExprMacroTable.INSTANCE)\n    );\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0, selector.getDouble(), 0.0f);\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n      Assert.assertTrue(selector.getObject().isNumericNull());\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":763,"status":"M"}],"commitId":"ff59d2e78bd3949e46858bc2f9882db9a7d2a186","commitMessage":"@@@Move RowSignature from druid-sql to druid-processing and make use of it. (#9508)\n\n* Move RowSignature from druid-sql to druid-processing and make use of it.\n\n1) Moved (most of) RowSignature from sql to processing. Left behind the SQL-specific\n   stuff in a RowSignatures utility class. It also picked up some new convenience\n   methods along the way.\n2) There were a lot of places in the code where Map<String.  ValueType> was used to\n   associate columns with type info. These are now all replaced with RowSignature.\n3) QueryToolChest's resultArrayFields method is replaced with resultArraySignature. \n   and it now provides type info.\n\n* Fix up extensions.\n\n* Various fixes","date":"2020-03-13 02:06:44","modifiedFileCount":"166","status":"M","submitter":"Gian Merlino"}]
