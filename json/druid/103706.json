[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    final AuthConfig authConfig = injector.getInstance(AuthConfig.class);\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            ),\n            new DefaultHandler()\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","date":"2018-08-31 00:56:26","endLine":110,"groupId":"6820","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b5/44f3b7f73defb2830925551869e3fc22b3834f.src","preCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    final AuthConfig authConfig = injector.getInstance(AuthConfig.class);\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            ),\n            new DefaultHandler()\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/MiddleManagerJettyServerInitializer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    \r\n    if (serverConfig.isEnableRequestLimit()) {\n      \r\n      \r\n      Preconditions.checkArgument(\n          serverConfig.getNumThreads() > 1,\n          \"numThreads must be > 1 to enable Request Limit Filter.\"\n      );\n      log.info(\"Enabling Request Limit Filter with limit [%d].\", serverConfig.getNumThreads() - 1);\n      root.addFilter(new FilterHolder(new LimitRequestsFilter(serverConfig.getNumThreads() - 1)),\n                     \"/*\", null\n      );\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    List<Authenticator> authenticators = null;\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    \r\n    for (Handler handler : server.getHandlers()) {\n      handlerList.addHandler(handler);\n    }\n\n    handlerList.addHandler(JettyServerInitUtils.getJettyRequestLogHandler());\n\n    \r\n    for (Handler handler : extensionHandlers) {\n      handlerList.addHandler(handler);\n    }\n\n    \r\n    handlerList.addHandler(JettyServerInitUtils.wrapWithDefaultGzipHandler(\n        root,\n        serverConfig.getInflateBufferSize(),\n        serverConfig.getCompressionLevel()\n    ));\n\n    final StatisticsHandler statisticsHandler = new StatisticsHandler();\n    statisticsHandler.setHandler(handlerList);\n\n    server.setHandler(statisticsHandler);\n  }\n","date":"2018-08-31 00:56:26","endLine":143,"groupId":"6522","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/48/d2962497f54a72f6bedc2fcb95d2ecfdad6869.src","preCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    \r\n    if (serverConfig.isEnableRequestLimit()) {\n      \r\n      \r\n      Preconditions.checkArgument(\n          serverConfig.getNumThreads() > 1,\n          \"numThreads must be > 1 to enable Request Limit Filter.\"\n      );\n      log.info(\"Enabling Request Limit Filter with limit [%d].\", serverConfig.getNumThreads() - 1);\n      root.addFilter(new FilterHolder(new LimitRequestsFilter(serverConfig.getNumThreads() - 1)),\n                     \"/*\", null\n      );\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    List<Authenticator> authenticators = null;\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    \r\n    for (Handler handler : server.getHandlers()) {\n      handlerList.addHandler(handler);\n    }\n\n    handlerList.addHandler(JettyServerInitUtils.getJettyRequestLogHandler());\n\n    \r\n    for (Handler handler : extensionHandlers) {\n      handlerList.addHandler(handler);\n    }\n\n    \r\n    handlerList.addHandler(JettyServerInitUtils.wrapWithDefaultGzipHandler(\n        root,\n        serverConfig.getInflateBufferSize(),\n        serverConfig.getCompressionLevel()\n    ));\n\n    final StatisticsHandler statisticsHandler = new StatisticsHandler();\n    statisticsHandler.setHandler(handlerList);\n\n    server.setHandler(statisticsHandler);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/QueryJettyServerInitializer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-11-07 06:38:08","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    final AuthConfig authConfig = injector.getInstance(AuthConfig.class);\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            ),\n            new DefaultHandler()\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","date":"2018-08-31 00:56:26","endLine":110,"groupId":"6820","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b5/44f3b7f73defb2830925551869e3fc22b3834f.src","preCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    final AuthConfig authConfig = injector.getInstance(AuthConfig.class);\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            ),\n            new DefaultHandler()\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/MiddleManagerJettyServerInitializer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2018-11-07 06:38:08","commitOrder":2,"curCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    \r\n    if (serverConfig.isEnableRequestLimit()) {\n      \r\n      \r\n      Preconditions.checkArgument(\n          serverConfig.getNumThreads() > 1,\n          \"numThreads must be > 1 to enable Request Limit Filter.\"\n      );\n      log.info(\"Enabling Request Limit Filter with limit [%d].\", serverConfig.getNumThreads() - 1);\n      root.addFilter(new FilterHolder(new LimitRequestsFilter(serverConfig.getNumThreads() - 1)),\n                     \"/*\", null\n      );\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    \r\n    for (Handler handler : server.getHandlers()) {\n      handlerList.addHandler(handler);\n    }\n\n    handlerList.addHandler(JettyServerInitUtils.getJettyRequestLogHandler());\n\n    \r\n    for (Handler handler : extensionHandlers) {\n      handlerList.addHandler(handler);\n    }\n\n    \r\n    handlerList.addHandler(JettyServerInitUtils.wrapWithDefaultGzipHandler(\n        root,\n        serverConfig.getInflateBufferSize(),\n        serverConfig.getCompressionLevel()\n    ));\n\n    final StatisticsHandler statisticsHandler = new StatisticsHandler();\n    statisticsHandler.setHandler(handlerList);\n\n    server.setHandler(statisticsHandler);\n  }\n","date":"2018-11-07 06:38:08","endLine":142,"groupId":"217","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2c/9260241bc043fec3aca93e84fc9d3de14919d9.src","preCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    \r\n    if (serverConfig.isEnableRequestLimit()) {\n      \r\n      \r\n      Preconditions.checkArgument(\n          serverConfig.getNumThreads() > 1,\n          \"numThreads must be > 1 to enable Request Limit Filter.\"\n      );\n      log.info(\"Enabling Request Limit Filter with limit [%d].\", serverConfig.getNumThreads() - 1);\n      root.addFilter(new FilterHolder(new LimitRequestsFilter(serverConfig.getNumThreads() - 1)),\n                     \"/*\", null\n      );\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    List<Authenticator> authenticators = null;\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    \r\n    for (Handler handler : server.getHandlers()) {\n      handlerList.addHandler(handler);\n    }\n\n    handlerList.addHandler(JettyServerInitUtils.getJettyRequestLogHandler());\n\n    \r\n    for (Handler handler : extensionHandlers) {\n      handlerList.addHandler(handler);\n    }\n\n    \r\n    handlerList.addHandler(JettyServerInitUtils.wrapWithDefaultGzipHandler(\n        root,\n        serverConfig.getInflateBufferSize(),\n        serverConfig.getCompressionLevel()\n    ));\n\n    final StatisticsHandler statisticsHandler = new StatisticsHandler();\n    statisticsHandler.setHandler(handlerList);\n\n    server.setHandler(statisticsHandler);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/QueryJettyServerInitializer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"54351a5c75d8902d1d4c2eb2f6590bcf126348d4","commitMessage":"@@@Fix various bugs; Enable more IntelliJ inspections and update error-prone (#6490)\n\n* Fix various bugs; Enable more IntelliJ inspections and update error-prone\n\n* Fix NPE\n\n* Fix inspections\n\n* Remove unused imports\n","date":"2018-11-07 06:38:08","modifiedFileCount":"93","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-07-09 15:51:36","codes":[{"authorDate":"2019-07-09 15:51:36","commitOrder":3,"curCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    final AuthConfig authConfig = injector.getInstance(AuthConfig.class);\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            ),\n            new DefaultHandler()\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","date":"2019-07-09 15:51:36","endLine":110,"groupId":"6820","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1c/b3782edee73cdf2519d6e8f749517d977a7997.src","preCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    final AuthConfig authConfig = injector.getInstance(AuthConfig.class);\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            ),\n            new DefaultHandler()\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/MiddleManagerJettyServerInitializer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2019-07-09 15:51:36","commitOrder":3,"curCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    \r\n    if (serverConfig.isEnableRequestLimit()) {\n      \r\n      \r\n      Preconditions.checkArgument(\n          serverConfig.getNumThreads() > 1,\n          \"numThreads must be > 1 to enable Request Limit Filter.\"\n      );\n      log.info(\"Enabling Request Limit Filter with limit [%d].\", serverConfig.getNumThreads() - 1);\n      root.addFilter(new FilterHolder(new LimitRequestsFilter(serverConfig.getNumThreads() - 1)),\n                     \"/*\", null\n      );\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    \r\n    for (Handler handler : server.getHandlers()) {\n      handlerList.addHandler(handler);\n    }\n\n    handlerList.addHandler(JettyServerInitUtils.getJettyRequestLogHandler());\n\n    \r\n    for (Handler handler : extensionHandlers) {\n      handlerList.addHandler(handler);\n    }\n\n    \r\n    handlerList.addHandler(JettyServerInitUtils.wrapWithDefaultGzipHandler(\n        root,\n        serverConfig.getInflateBufferSize(),\n        serverConfig.getCompressionLevel()\n    ));\n\n    final StatisticsHandler statisticsHandler = new StatisticsHandler();\n    statisticsHandler.setHandler(handlerList);\n\n    server.setHandler(statisticsHandler);\n  }\n","date":"2019-07-09 15:51:36","endLine":142,"groupId":"217","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/92/82ca3d1f0de0122dbc7516faa7cf4a187e95e0.src","preCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    \r\n    if (serverConfig.isEnableRequestLimit()) {\n      \r\n      \r\n      Preconditions.checkArgument(\n          serverConfig.getNumThreads() > 1,\n          \"numThreads must be > 1 to enable Request Limit Filter.\"\n      );\n      log.info(\"Enabling Request Limit Filter with limit [%d].\", serverConfig.getNumThreads() - 1);\n      root.addFilter(new FilterHolder(new LimitRequestsFilter(serverConfig.getNumThreads() - 1)),\n                     \"/*\", null\n      );\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    \r\n    for (Handler handler : server.getHandlers()) {\n      handlerList.addHandler(handler);\n    }\n\n    handlerList.addHandler(JettyServerInitUtils.getJettyRequestLogHandler());\n\n    \r\n    for (Handler handler : extensionHandlers) {\n      handlerList.addHandler(handler);\n    }\n\n    \r\n    handlerList.addHandler(JettyServerInitUtils.wrapWithDefaultGzipHandler(\n        root,\n        serverConfig.getInflateBufferSize(),\n        serverConfig.getCompressionLevel()\n    ));\n\n    final StatisticsHandler statisticsHandler = new StatisticsHandler();\n    statisticsHandler.setHandler(handlerList);\n\n    server.setHandler(statisticsHandler);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/QueryJettyServerInitializer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"027291a90d08780d16035cbca171310c499663fc","commitMessage":"@@@set DRUID_AUTHORIZATION_CHECKED attribute for router endpoints (#8026)\n\n* add state resource filter to router endpoints\n\n* add RouterResource to ResourceFilter test framework\n","date":"2019-07-09 15:51:36","modifiedFileCount":"9","status":"M","submitter":"Parag Jain"},{"authorTime":"2020-06-30 07:59:31","codes":[{"authorDate":"2020-06-30 07:59:31","commitOrder":4,"curCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    final AuthConfig authConfig = injector.getInstance(AuthConfig.class);\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n    JettyServerInitUtils.addAllowHttpMethodsFilter(root, serverConfig.getAllowedHttpMethods());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            ),\n            new DefaultHandler()\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","date":"2020-06-30 07:59:31","endLine":111,"groupId":"103706","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bd/f674aa59f34e11608a3da18e8a672c53d3314f.src","preCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    final AuthConfig authConfig = injector.getInstance(AuthConfig.class);\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    final List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    handlerList.setHandlers(\n        new Handler[]{\n            JettyServerInitUtils.getJettyRequestLogHandler(),\n            JettyServerInitUtils.wrapWithDefaultGzipHandler(\n                root,\n                serverConfig.getInflateBufferSize(),\n                serverConfig.getCompressionLevel()\n            ),\n            new DefaultHandler()\n        }\n    );\n    server.setHandler(handlerList);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/MiddleManagerJettyServerInitializer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-06-30 07:59:31","commitOrder":4,"curCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    \r\n    if (serverConfig.isEnableRequestLimit()) {\n      \r\n      \r\n      Preconditions.checkArgument(\n          serverConfig.getNumThreads() > 1,\n          \"numThreads must be > 1 to enable Request Limit Filter.\"\n      );\n      log.info(\"Enabling Request Limit Filter with limit [%d].\", serverConfig.getNumThreads() - 1);\n      root.addFilter(new FilterHolder(new LimitRequestsFilter(serverConfig.getNumThreads() - 1)),\n                     \"/*\", null\n      );\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n    JettyServerInitUtils.addAllowHttpMethodsFilter(root, serverConfig.getAllowedHttpMethods());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    \r\n    for (Handler handler : server.getHandlers()) {\n      handlerList.addHandler(handler);\n    }\n\n    handlerList.addHandler(JettyServerInitUtils.getJettyRequestLogHandler());\n\n    \r\n    for (Handler handler : extensionHandlers) {\n      handlerList.addHandler(handler);\n    }\n\n    \r\n    handlerList.addHandler(JettyServerInitUtils.wrapWithDefaultGzipHandler(\n        root,\n        serverConfig.getInflateBufferSize(),\n        serverConfig.getCompressionLevel()\n    ));\n\n    final StatisticsHandler statisticsHandler = new StatisticsHandler();\n    statisticsHandler.setHandler(handlerList);\n\n    server.setHandler(statisticsHandler);\n  }\n","date":"2020-06-30 07:59:31","endLine":148,"groupId":"103706","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"initialize","params":"(Serverserver@Injectorinjector)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/81/4895ae0dd6328a5b9d4ab1147ae397898acabb.src","preCode":"  public void initialize(Server server, Injector injector)\n  {\n    final ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);\n    root.addServlet(new ServletHolder(new DefaultServlet()), \"/*\");\n\n    \r\n    if (serverConfig.isEnableRequestLimit()) {\n      \r\n      \r\n      Preconditions.checkArgument(\n          serverConfig.getNumThreads() > 1,\n          \"numThreads must be > 1 to enable Request Limit Filter.\"\n      );\n      log.info(\"Enabling Request Limit Filter with limit [%d].\", serverConfig.getNumThreads() - 1);\n      root.addFilter(new FilterHolder(new LimitRequestsFilter(serverConfig.getNumThreads() - 1)),\n                     \"/*\", null\n      );\n    }\n\n    final ObjectMapper jsonMapper = injector.getInstance(Key.get(ObjectMapper.class, Json.class));\n    final AuthenticatorMapper authenticatorMapper = injector.getInstance(AuthenticatorMapper.class);\n\n    AuthenticationUtils.addSecuritySanityCheckFilter(root, jsonMapper);\n\n    \r\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, UNSECURED_PATHS);\n    AuthenticationUtils.addNoopAuthenticationAndAuthorizationFilters(root, authConfig.getUnsecuredPaths());\n\n    List<Authenticator> authenticators = authenticatorMapper.getAuthenticatorChain();\n    AuthenticationUtils.addAuthenticationFilterChain(root, authenticators);\n\n    AuthenticationUtils.addAllowOptionsFilter(root, authConfig.isAllowUnauthenticatedHttpOptions());\n\n    JettyServerInitUtils.addExtensionFilters(root, injector);\n\n    \r\n    AuthenticationUtils.addPreResponseAuthorizationCheckFilter(\n        root,\n        authenticators,\n        jsonMapper\n    );\n\n    root.addFilter(GuiceFilter.class, \"/*\", null);\n\n    final HandlerList handlerList = new HandlerList();\n    \r\n    for (Handler handler : server.getHandlers()) {\n      handlerList.addHandler(handler);\n    }\n\n    handlerList.addHandler(JettyServerInitUtils.getJettyRequestLogHandler());\n\n    \r\n    for (Handler handler : extensionHandlers) {\n      handlerList.addHandler(handler);\n    }\n\n    \r\n    handlerList.addHandler(JettyServerInitUtils.wrapWithDefaultGzipHandler(\n        root,\n        serverConfig.getInflateBufferSize(),\n        serverConfig.getCompressionLevel()\n    ));\n\n    final StatisticsHandler statisticsHandler = new StatisticsHandler();\n    statisticsHandler.setHandler(handlerList);\n\n    server.setHandler(statisticsHandler);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/QueryJettyServerInitializer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"15a0b4ffe21a39d830504153033529523e3d69c6","commitMessage":"@@@Filter http requests by http method (#10085)\n\n* Filter http requests by http method\n\nAdd a config that allows a user which http methods to allow against their\nDruid server.\n\nDruid will only accept http requests with the method: GET.  PUT.  POST.  DELETE\nand OPTIONS.\nIf a Druid admin wants to allow other methods.  they can do so by using the\nServerConfig#allowedHttpMethods config.\n\nIf a Druid user would like to disallow OPTIONS.  this can be done by changing\nthe AuthConfig#allowUnauthenticatedHttpOptions config\n\n* Exclude OPTIONS from always supported HTTP methods\n\nAdd HEAD as an allowed method for web console e2e tests\n\n* fix docs\n\n* fix security IT\n\n* Actually fix the web console e2e tests\n\n* Ignore icode coverage for nitialization classes\n\n* code review","date":"2020-06-30 07:59:31","modifiedFileCount":"8","status":"M","submitter":"Suneet Saldanha"}]
