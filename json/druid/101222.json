[{"authorTime":"2020-01-23 06:54:47","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ColumnAnalysis that = (ColumnAnalysis) o;\n    return hasMultipleValues == that.hasMultipleValues &&\n           size == that.size &&\n           Objects.equals(type, that.type) &&\n           Objects.equals(cardinality, that.cardinality) &&\n           Objects.equals(minValue, that.minValue) &&\n           Objects.equals(maxValue, that.maxValue) &&\n           Objects.equals(errorMessage, that.errorMessage);\n  }\n","date":"2018-08-31 00:56:26","endLine":193,"groupId":"15589","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/aa/9da8d40af4e6d11725e6c53d6991baf9c01d5f.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ColumnAnalysis that = (ColumnAnalysis) o;\n    return hasMultipleValues == that.hasMultipleValues &&\n           size == that.size &&\n           Objects.equals(type, that.type) &&\n           Objects.equals(cardinality, that.cardinality) &&\n           Objects.equals(minValue, that.minValue) &&\n           Objects.equals(maxValue, that.maxValue) &&\n           Objects.equals(errorMessage, that.errorMessage);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/metadata/metadata/ColumnAnalysis.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"NB"},{"authorDate":"2020-01-23 06:54:47","commitOrder":2,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    DataSourceAnalysis that = (DataSourceAnalysis) o;\n    return Objects.equals(dataSource, that.dataSource) &&\n           Objects.equals(baseDataSource, that.baseDataSource) &&\n           Objects.equals(baseQuerySegmentSpec, that.baseQuerySegmentSpec) &&\n           Objects.equals(preJoinableClauses, that.preJoinableClauses);\n  }\n","date":"2020-01-23 06:54:47","endLine":264,"groupId":"15589","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/37e50dc4737c7ad18b4ee04b7556648b8fa066.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    DataSourceAnalysis that = (DataSourceAnalysis) o;\n    return Objects.equals(dataSource, that.dataSource) &&\n           Objects.equals(baseDataSource, that.baseDataSource) &&\n           Objects.equals(baseQuerySegmentSpec, that.baseQuerySegmentSpec) &&\n           Objects.equals(preJoinableClauses, that.preJoinableClauses);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/planning/DataSourceAnalysis.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"B"}],"commitId":"d886463253e1f537e32b8aedac60c8ee741f6cc7","commitMessage":"@@@Add join-related DataSource types.  and analysis functionality. (#9235)\n\n* Add join-related DataSource types.  and analysis functionality.\n\nBuilds on #9111 and implements the datasource analysis mentioned in #8728. Still can't\nhandle join datasources.  but we're a step closer.\n\nJoin-related DataSource types:\n\n1) Add \"join\".  \"lookup\".  and \"inline\" datasources.\n2) Add \"getChildren\" and \"withChildren\" methods to DataSource.  which will be used\n   in the future for query rewriting (e.g. inlining of subqueries).\n\nDataSource analysis functionality:\n\n1) Add DataSourceAnalysis class.  which breaks down datasources into three components:\n   outer queries.  a base datasource (left-most of the highest level left-leaning join\n   tree).  and other joined-in leaf datasources (the right-hand branches of the\n   left-leaning join tree).\n2) Add \"isConcrete\".  \"isGlobal\".  and \"isCacheable\" methods to DataSource in order to\n   support analysis.\n\nOther notes:\n\n1) Renamed DataSource#getNames to DataSource#getTableNames.  which I think is clearer.\n   Also.  made it a Set.  so implementations don't need to worry about duplicates.\n2) The addition of \"isCacheable\" should work around #8713.  since UnionDataSource now\n   returns false for cacheability.\n\n* Remove javadoc comment.\n\n* Updates reflecting code review.\n\n* Add comments.\n\n* Add more comments.\n","date":"2020-01-23 06:54:47","modifiedFileCount":"32","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-07-01 10:14:22","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":3,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ColumnAnalysis that = (ColumnAnalysis) o;\n    return hasMultipleValues == that.hasMultipleValues &&\n           size == that.size &&\n           Objects.equals(type, that.type) &&\n           Objects.equals(cardinality, that.cardinality) &&\n           Objects.equals(minValue, that.minValue) &&\n           Objects.equals(maxValue, that.maxValue) &&\n           Objects.equals(errorMessage, that.errorMessage);\n  }\n","date":"2018-08-31 00:56:26","endLine":193,"groupId":"15589","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/aa/9da8d40af4e6d11725e6c53d6991baf9c01d5f.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ColumnAnalysis that = (ColumnAnalysis) o;\n    return hasMultipleValues == that.hasMultipleValues &&\n           size == that.size &&\n           Objects.equals(type, that.type) &&\n           Objects.equals(cardinality, that.cardinality) &&\n           Objects.equals(minValue, that.minValue) &&\n           Objects.equals(maxValue, that.maxValue) &&\n           Objects.equals(errorMessage, that.errorMessage);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/metadata/metadata/ColumnAnalysis.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"N"},{"authorDate":"2020-07-01 10:14:22","commitOrder":3,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    DataSourceAnalysis that = (DataSourceAnalysis) o;\n    return Objects.equals(dataSource, that.dataSource);\n  }\n","date":"2020-07-01 10:14:22","endLine":280,"groupId":"15589","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/35/f4a9baf9d0328a0186e9c3a1858b78093c752c.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    DataSourceAnalysis that = (DataSourceAnalysis) o;\n    return Objects.equals(dataSource, that.dataSource) &&\n           Objects.equals(baseDataSource, that.baseDataSource) &&\n           Objects.equals(baseQuerySegmentSpec, that.baseQuerySegmentSpec) &&\n           Objects.equals(preJoinableClauses, that.preJoinableClauses);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/planning/DataSourceAnalysis.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"}],"commitId":"5faa897a342096b2ac88587ad62e6e15022b01dd","commitMessage":"@@@Join filter pre-analysis simplifications and sanity checks. (#10104)\n\n* Join filter pre-analysis simplifications and sanity checks.\n\n- At pre-analysis time.  only compute pre-analysis for the innermost\n  root query.  since this is the one that will run on the join that involves\n  the base datasource. Previously.  pre-analyses were computed for multiple\n  levels of the query.  some of which were unnecessary.\n- Remove JoinFilterPreAnalysisGroup and join query level gathering code. \n  since they existed to support precomputation of multiple pre-analyses.\n- Embed JoinFilterPreAnalysisKey into JoinFilterPreAnalysis and use it to\n  sanity check?at processing time that the correct pre-analysis was done.\n\nTangentially related changes:\n\n- Remove prioritizeAndLaneQuery functionality from LocalQuerySegmentWalker.\n  The computed priority and lanes were not being used.\n- Add \"getBaseQuery\" method to DataSourceAnalysis to support identification\n  of the proper subquery for filter pre-analysis.\n\n* Fix compilation errors.\n\n* Adjust tests.","date":"2020-07-01 10:14:22","modifiedFileCount":"20","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-07-01 10:14:22","codes":[{"authorDate":"2020-08-14 05:55:32","commitOrder":4,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ColumnAnalysis that = (ColumnAnalysis) o;\n    return hasMultipleValues == that.hasMultipleValues &&\n           hasNulls == that.hasNulls &&\n           size == that.size &&\n           Objects.equals(type, that.type) &&\n           Objects.equals(cardinality, that.cardinality) &&\n           Objects.equals(minValue, that.minValue) &&\n           Objects.equals(maxValue, that.maxValue) &&\n           Objects.equals(errorMessage, that.errorMessage);\n  }\n","date":"2020-08-14 05:55:32","endLine":212,"groupId":"101222","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4e/db4b7517dc9aae7e75df71ef80e5bfd3991f88.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ColumnAnalysis that = (ColumnAnalysis) o;\n    return hasMultipleValues == that.hasMultipleValues &&\n           size == that.size &&\n           Objects.equals(type, that.type) &&\n           Objects.equals(cardinality, that.cardinality) &&\n           Objects.equals(minValue, that.minValue) &&\n           Objects.equals(maxValue, that.maxValue) &&\n           Objects.equals(errorMessage, that.errorMessage);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/metadata/metadata/ColumnAnalysis.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"},{"authorDate":"2020-07-01 10:14:22","commitOrder":4,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    DataSourceAnalysis that = (DataSourceAnalysis) o;\n    return Objects.equals(dataSource, that.dataSource);\n  }\n","date":"2020-07-01 10:14:22","endLine":280,"groupId":"101222","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/35/f4a9baf9d0328a0186e9c3a1858b78093c752c.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    DataSourceAnalysis that = (DataSourceAnalysis) o;\n    return Objects.equals(dataSource, that.dataSource);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/planning/DataSourceAnalysis.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"N"}],"commitId":"e053348f747f6428e14362e4844e916f8790b726","commitMessage":"@@@add hasNulls to ColumnCapabilities.  ColumnAnalysis (#10219)\n\n* add isNullable to ColumnCapabilities.  ColumnAnalysis\n\n* better builder\n\n* fix segment metadata queries in integration tests\n\n* adjustments\n\n* cleanup\n\n* fix spotbugs\n\n* treat unknown as true in segmentmetadata\n\n* rename to hasNulls.  add docs\n\n* fixup\n\n* test the dim indexer selector isNull fix for numeric columns\n\n* fixes\n\n* oof","date":"2020-08-14 05:55:32","modifiedFileCount":"29","status":"M","submitter":"Clint Wylie"}]
