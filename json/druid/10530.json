[{"authorTime":"2021-04-09 15:12:28","codes":[{"authorDate":"2021-04-09 15:12:28","commitOrder":1,"curCode":"  public void testCompactWithNotNullIOConfig()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            null,\n            new UserCompactionTaskIOConfig(true),\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<Boolean> dropExistingCapture = ArgumentCaptor.forClass(Boolean.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.any(),\n        dropExistingCapture.capture(),\n        ArgumentMatchers.any()\n    );\n    Assert.assertEquals(true, dropExistingCapture.getValue());\n  }\n","date":"2021-04-09 15:12:28","endLine":668,"groupId":"20773","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCompactWithNotNullIOConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/90/b3b5db952939ebd6604942bbf776ab93db998f.src","preCode":"  public void testCompactWithNotNullIOConfig()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            null,\n            new UserCompactionTaskIOConfig(true),\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<Boolean> dropExistingCapture = ArgumentCaptor.forClass(Boolean.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.any(),\n        dropExistingCapture.capture(),\n        ArgumentMatchers.any()\n    );\n    Assert.assertEquals(true, dropExistingCapture.getValue());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/duty/CompactSegmentsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":619,"status":"B"},{"authorDate":"2021-04-09 15:12:28","commitOrder":1,"curCode":"  public void testCompactWithNullIOConfig()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            null,\n            null,\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<Boolean> dropExistingCapture = ArgumentCaptor.forClass(Boolean.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.any(),\n        dropExistingCapture.capture(),\n        ArgumentMatchers.any()\n    );\n    Assert.assertNull(dropExistingCapture.getValue());\n  }\n","date":"2021-04-09 15:12:28","endLine":720,"groupId":"4353","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCompactWithNullIOConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/90/b3b5db952939ebd6604942bbf776ab93db998f.src","preCode":"  public void testCompactWithNullIOConfig()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            null,\n            null,\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<Boolean> dropExistingCapture = ArgumentCaptor.forClass(Boolean.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.any(),\n        dropExistingCapture.capture(),\n        ArgumentMatchers.any()\n    );\n    Assert.assertNull(dropExistingCapture.getValue());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/duty/CompactSegmentsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":671,"status":"B"}],"commitId":"4576152e4a0213d17048a330e7089aa9d89f3972","commitMessage":"@@@Make dropExisting flag for Compaction configurable and add warning documentations (#11070)\n\n* Make dropExisting flag for Compaction configurable\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix test\n\n* add tests\n\n* fix spelling\n\n* fix docs\n\n* add IT\n\n* fix test\n\n* fix doc\n\n* fix doc","date":"2021-04-09 15:12:28","modifiedFileCount":"20","status":"B","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-06-21 08:21:59","codes":[{"authorDate":"2021-06-21 08:21:59","commitOrder":2,"curCode":"  public void testCompactWithNotNullIOConfig()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(COORDINATOR_CONFIG, JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            null,\n            new UserCompactionTaskIOConfig(true),\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<Boolean> dropExistingCapture = ArgumentCaptor.forClass(Boolean.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.any(),\n        dropExistingCapture.capture(),\n        ArgumentMatchers.any()\n    );\n    Assert.assertEquals(true, dropExistingCapture.getValue());\n  }\n","date":"2021-06-21 08:21:59","endLine":671,"groupId":"10530","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCompactWithNotNullIOConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a1/932dd1f4c60c16e6d0bbc3f4f96f080a5a5022.src","preCode":"  public void testCompactWithNotNullIOConfig()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            null,\n            new UserCompactionTaskIOConfig(true),\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<Boolean> dropExistingCapture = ArgumentCaptor.forClass(Boolean.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.any(),\n        dropExistingCapture.capture(),\n        ArgumentMatchers.any()\n    );\n    Assert.assertEquals(true, dropExistingCapture.getValue());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/duty/CompactSegmentsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":622,"status":"M"},{"authorDate":"2021-06-21 08:21:59","commitOrder":2,"curCode":"  public void testCompactWithNullIOConfig()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(COORDINATOR_CONFIG, JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            null,\n            null,\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<Boolean> dropExistingCapture = ArgumentCaptor.forClass(Boolean.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.any(),\n        dropExistingCapture.capture(),\n        ArgumentMatchers.any()\n    );\n    Assert.assertNull(dropExistingCapture.getValue());\n  }\n","date":"2021-06-21 08:21:59","endLine":723,"groupId":"10530","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCompactWithNullIOConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a1/932dd1f4c60c16e6d0bbc3f4f96f080a5a5022.src","preCode":"  public void testCompactWithNullIOConfig()\n  {\n    final HttpIndexingServiceClient mockIndexingServiceClient = Mockito.mock(HttpIndexingServiceClient.class);\n    final CompactSegments compactSegments = new CompactSegments(JSON_MAPPER, mockIndexingServiceClient);\n    final List<DataSourceCompactionConfig> compactionConfigs = new ArrayList<>();\n    final String dataSource = DATA_SOURCE_PREFIX + 0;\n    compactionConfigs.add(\n        new DataSourceCompactionConfig(\n            dataSource,\n            0,\n            500L,\n            null,\n            new Period(\"PT0H\"), \r\n            new UserCompactionTaskQueryTuningConfig(\n                null,\n                null,\n                null,\n                null,\n                partitionsSpec,\n                null,\n                null,\n                null,\n                null,\n                null,\n                3,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ),\n            null,\n            null,\n            null\n        )\n    );\n    doCompactSegments(compactSegments, compactionConfigs);\n    ArgumentCaptor<Boolean> dropExistingCapture = ArgumentCaptor.forClass(Boolean.class);\n    Mockito.verify(mockIndexingServiceClient).compactSegments(\n        ArgumentMatchers.anyString(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.anyInt(),\n        ArgumentMatchers.any(),\n        ArgumentMatchers.any(),\n        dropExistingCapture.capture(),\n        ArgumentMatchers.any()\n    );\n    Assert.assertNull(dropExistingCapture.getValue());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/duty/CompactSegmentsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":674,"status":"M"}],"commitId":"f0b105ec63657643c85d82686ae1dea3e588a5f5","commitMessage":"@@@Temporarily skip compaction for locked intervals (#11190)\n\n* Add overlord API /lockedIntervals. Skip compaction for locked intervals\n\n* Revert formatting changes\n\n* Add license info\n\n* Fix checkstyle\n\n* Remove invalid API invocation\n\n* Fix checkstyle\n\n* Add DatasourceIntervalsTest\n\n* Fix checkstyle\n\n* Remove LockedIntervalsResponse\n\n* Add integration tests for lockedIntervals\n\n* Add ITAutoCompactionLockContentionTest\n\n* Add config druid.coordinator.compaction.skipLockedIntervals\n\n* Add test for TaskQueue","date":"2021-06-21 08:21:59","modifiedFileCount":"19","status":"M","submitter":"Kashif Faraz"}]
