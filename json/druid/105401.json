[{"authorTime":"2020-09-27 14:30:14","codes":[{"authorDate":"2020-09-24 04:56:38","commitOrder":2,"curCode":"  public static <T> ExprVectorProcessor<T> power(Expr.VectorInputBindingTypes inputTypes, Expr left, Expr right)\n  {\n    return makeMathProcessor(\n        inputTypes,\n        left,\n        right,\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return LongMath.pow(left, Ints.checkedCast(right));\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Math.pow(left, right);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Math.pow(left, right);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Math.pow(left, right);\n          }\n        }\n    );\n  }\n","date":"2020-09-24 04:56:38","endLine":493,"groupId":"22007","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"power","params":"(Expr.VectorInputBindingTypesinputTypes@Exprleft@Exprright)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ea/6db8f7a634beb7976fdb04cb4b1d2f7d27a78f.src","preCode":"  public static <T> ExprVectorProcessor<T> power(Expr.VectorInputBindingTypes inputTypes, Expr left, Expr right)\n  {\n    return makeMathProcessor(\n        inputTypes,\n        left,\n        right,\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return LongMath.pow(left, Ints.checkedCast(right));\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Math.pow(left, right);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Math.pow(left, right);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Math.pow(left, right);\n          }\n        }\n    );\n  }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/vector/VectorMathProcessors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"NB"},{"authorDate":"2020-09-27 14:30:14","commitOrder":2,"curCode":"  public static <T> ExprVectorProcessor<T> remainder(Expr.VectorInputBindingTypes inputTypes, Expr left, Expr right)\n  {\n    return makeDoubleMathProcessor(\n        inputTypes,\n        left,\n        right,\n        () -> new DoubleOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, long right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        }\n    );\n  }\n","date":"2020-09-27 14:30:14","endLine":1022,"groupId":"22007","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"remainder","params":"(Expr.VectorInputBindingTypesinputTypes@Exprleft@Exprright)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bd/33e8d2f25d143026290983f030632e9699eb92.src","preCode":"  public static <T> ExprVectorProcessor<T> remainder(Expr.VectorInputBindingTypes inputTypes, Expr left, Expr right)\n  {\n    return makeDoubleMathProcessor(\n        inputTypes,\n        left,\n        right,\n        () -> new DoubleOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, long right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        }\n    );\n  }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/vector/VectorMathProcessors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":967,"status":"B"}],"commitId":"3d700a5e31eaea131f1152e90b6c78a572edd7fc","commitMessage":"@@@vectorize remaining math expressions (#10429)\n\n* vectorize remaining math expressions\n\n* fixes\n\n* remove cannotVectorize() where no longer true\n\n* disable vectorized groupby for numeric columns with nulls\n\n* fixes","date":"2020-09-27 14:30:14","modifiedFileCount":"11","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-10-27 10:55:24","codes":[{"authorDate":"2020-10-27 10:55:24","commitOrder":3,"curCode":"  public static <T> ExprVectorProcessor<T> power(Expr.VectorInputBindingInspector inspector, Expr left, Expr right)\n  {\n    return makeMathProcessor(\n        inspector,\n        left,\n        right,\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return LongMath.pow(left, Ints.checkedCast(right));\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Math.pow(left, right);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Math.pow(left, right);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Math.pow(left, right);\n          }\n        }\n    );\n  }\n","date":"2020-10-27 10:55:24","endLine":672,"groupId":"105401","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"power","params":"(Expr.VectorInputBindingInspectorinspector@Exprleft@Exprright)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c1/a9888466a0bcac0168e7d5346fc02e60ee9caf.src","preCode":"  public static <T> ExprVectorProcessor<T> power(Expr.VectorInputBindingTypes inputTypes, Expr left, Expr right)\n  {\n    return makeMathProcessor(\n        inputTypes,\n        left,\n        right,\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return LongMath.pow(left, Ints.checkedCast(right));\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Math.pow(left, right);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Math.pow(left, right);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Math.pow(left, right);\n          }\n        }\n    );\n  }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/vector/VectorMathProcessors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":617,"status":"M"},{"authorDate":"2020-10-27 10:55:24","commitOrder":3,"curCode":"  public static <T> ExprVectorProcessor<T> remainder(Expr.VectorInputBindingInspector inspector, Expr left, Expr right)\n  {\n    return makeDoubleMathProcessor(\n        inspector,\n        left,\n        right,\n        () -> new DoubleOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, long right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        }\n    );\n  }\n","date":"2020-10-27 10:55:24","endLine":1045,"groupId":"105401","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"remainder","params":"(Expr.VectorInputBindingInspectorinspector@Exprleft@Exprright)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c1/a9888466a0bcac0168e7d5346fc02e60ee9caf.src","preCode":"  public static <T> ExprVectorProcessor<T> remainder(Expr.VectorInputBindingTypes inputTypes, Expr left, Expr right)\n  {\n    return makeDoubleMathProcessor(\n        inputTypes,\n        left,\n        right,\n        () -> new DoubleOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, long right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Math.IEEEremainder(left, right);\n          }\n        }\n    );\n  }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/vector/VectorMathProcessors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":990,"status":"M"}],"commitId":"d0821de8540686eb64a9b3e22fe4a637b58920ef","commitMessage":"@@@support for vectorizing expressions with non-existent inputs.  more consistent type handling for non-vectorized expressions (#10499)\n\n* support for vectorizing expressions with non-existent inputs.  more consistent type handling for non-vectorized expressions\n\n* inspector\n\n* changes\n\n* more test\n\n* clean","date":"2020-10-27 10:55:24","modifiedFileCount":"56","status":"M","submitter":"Clint Wylie"}]
