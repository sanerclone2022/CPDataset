[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSelectAllInFirstFrame()\n  {\n    final String sql = \"SELECT __time, cnt, dim1, dim2, m1 FROM druid.foo\";\n    final DruidStatement statement = new DruidStatement(\"\", 0, null, () -> {\n    }).prepare(plannerFactory, sql, -1, AllowAllAuthenticator.ALLOW_ALL_RESULT);\n\n    \r\n    Meta.Frame frame = statement.execute().nextFrame(DruidStatement.START_OFFSET, 6);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            0,\n            true,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-01\").getMillis(), 1L, \"\", \"a\", 1.0f},\n                new Object[]{\n                    DateTimes.of(\"2000-01-02\").getMillis(),\n                    1L,\n                    \"10.1\",\n                    NullHandling.defaultStringValue(),\n                    2.0f\n                },\n                new Object[]{DateTimes.of(\"2000-01-03\").getMillis(), 1L, \"2\", \"\", 3.0f},\n                new Object[]{DateTimes.of(\"2001-01-01\").getMillis(), 1L, \"1\", \"a\", 4.0f},\n                new Object[]{DateTimes.of(\"2001-01-02\").getMillis(), 1L, \"def\", \"abc\", 5.0f},\n                new Object[]{DateTimes.of(\"2001-01-03\").getMillis(), 1L, \"abc\", NullHandling.defaultStringValue(), 6.0f}\n            )\n        ),\n        frame\n    );\n    Assert.assertTrue(statement.isDone());\n  }\n","date":"2018-08-31 00:56:26","endLine":180,"groupId":"7606","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectAllInFirstFrame","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/9b27afa96818d746ab45850bebe27236389770.src","preCode":"  public void testSelectAllInFirstFrame()\n  {\n    final String sql = \"SELECT __time, cnt, dim1, dim2, m1 FROM druid.foo\";\n    final DruidStatement statement = new DruidStatement(\"\", 0, null, () -> {\n    }).prepare(plannerFactory, sql, -1, AllowAllAuthenticator.ALLOW_ALL_RESULT);\n\n    \r\n    Meta.Frame frame = statement.execute().nextFrame(DruidStatement.START_OFFSET, 6);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            0,\n            true,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-01\").getMillis(), 1L, \"\", \"a\", 1.0f},\n                new Object[]{\n                    DateTimes.of(\"2000-01-02\").getMillis(),\n                    1L,\n                    \"10.1\",\n                    NullHandling.defaultStringValue(),\n                    2.0f\n                },\n                new Object[]{DateTimes.of(\"2000-01-03\").getMillis(), 1L, \"2\", \"\", 3.0f},\n                new Object[]{DateTimes.of(\"2001-01-01\").getMillis(), 1L, \"1\", \"a\", 4.0f},\n                new Object[]{DateTimes.of(\"2001-01-02\").getMillis(), 1L, \"def\", \"abc\", 5.0f},\n                new Object[]{DateTimes.of(\"2001-01-03\").getMillis(), 1L, \"abc\", NullHandling.defaultStringValue(), 6.0f}\n            )\n        ),\n        frame\n    );\n    Assert.assertTrue(statement.isDone());\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidStatementTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSelectSplitOverTwoFrames()\n  {\n    final String sql = \"SELECT __time, cnt, dim1, dim2, m1 FROM druid.foo\";\n    final DruidStatement statement = new DruidStatement(\"\", 0, null, () -> {\n    }).prepare(plannerFactory, sql, -1, AllowAllAuthenticator.ALLOW_ALL_RESULT);\n\n    \r\n    Meta.Frame frame = statement.execute().nextFrame(DruidStatement.START_OFFSET, 2);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            0,\n            false,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-01\").getMillis(), 1L, \"\", \"a\", 1.0f},\n                new Object[]{\n                    DateTimes.of(\"2000-01-02\").getMillis(),\n                    1L,\n                    \"10.1\",\n                    NullHandling.defaultStringValue(),\n                    2.0f\n                }\n            )\n        ),\n        frame\n    );\n    Assert.assertFalse(statement.isDone());\n\n    \r\n    frame = statement.nextFrame(2, 10);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            2,\n            true,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-03\").getMillis(), 1L, \"2\", \"\", 3.0f},\n                new Object[]{DateTimes.of(\"2001-01-01\").getMillis(), 1L, \"1\", \"a\", 4.0f},\n                new Object[]{DateTimes.of(\"2001-01-02\").getMillis(), 1L, \"def\", \"abc\", 5.0f},\n                new Object[]{DateTimes.of(\"2001-01-03\").getMillis(), 1L, \"abc\", NullHandling.defaultStringValue(), 6.0f}\n            )\n        ),\n        frame\n    );\n    Assert.assertTrue(statement.isDone());\n  }\n","date":"2018-08-31 00:56:26","endLine":226,"groupId":"7606","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectSplitOverTwoFrames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/9b27afa96818d746ab45850bebe27236389770.src","preCode":"  public void testSelectSplitOverTwoFrames()\n  {\n    final String sql = \"SELECT __time, cnt, dim1, dim2, m1 FROM druid.foo\";\n    final DruidStatement statement = new DruidStatement(\"\", 0, null, () -> {\n    }).prepare(plannerFactory, sql, -1, AllowAllAuthenticator.ALLOW_ALL_RESULT);\n\n    \r\n    Meta.Frame frame = statement.execute().nextFrame(DruidStatement.START_OFFSET, 2);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            0,\n            false,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-01\").getMillis(), 1L, \"\", \"a\", 1.0f},\n                new Object[]{\n                    DateTimes.of(\"2000-01-02\").getMillis(),\n                    1L,\n                    \"10.1\",\n                    NullHandling.defaultStringValue(),\n                    2.0f\n                }\n            )\n        ),\n        frame\n    );\n    Assert.assertFalse(statement.isDone());\n\n    \r\n    frame = statement.nextFrame(2, 10);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            2,\n            true,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-03\").getMillis(), 1L, \"2\", \"\", 3.0f},\n                new Object[]{DateTimes.of(\"2001-01-01\").getMillis(), 1L, \"1\", \"a\", 4.0f},\n                new Object[]{DateTimes.of(\"2001-01-02\").getMillis(), 1L, \"def\", \"abc\", 5.0f},\n                new Object[]{DateTimes.of(\"2001-01-03\").getMillis(), 1L, \"abc\", NullHandling.defaultStringValue(), 6.0f}\n            )\n        ),\n        frame\n    );\n    Assert.assertTrue(statement.isDone());\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidStatementTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-01-16 15:12:59","codes":[{"authorDate":"2019-01-16 15:12:59","commitOrder":2,"curCode":"  public void testSelectAllInFirstFrame()\n  {\n    final String sql = \"SELECT __time, cnt, dim1, dim2, m1 FROM druid.foo\";\n    final DruidStatement statement = new DruidStatement(\"\", 0, null, sqlLifecycleFactory.factorize(), () -> {\n    }).prepare(sql, -1, AllowAllAuthenticator.ALLOW_ALL_RESULT);\n\n    \r\n    Meta.Frame frame = statement.execute().nextFrame(DruidStatement.START_OFFSET, 6);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            0,\n            true,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-01\").getMillis(), 1L, \"\", \"a\", 1.0f},\n                new Object[]{\n                    DateTimes.of(\"2000-01-02\").getMillis(),\n                    1L,\n                    \"10.1\",\n                    NullHandling.defaultStringValue(),\n                    2.0f\n                },\n                new Object[]{DateTimes.of(\"2000-01-03\").getMillis(), 1L, \"2\", \"\", 3.0f},\n                new Object[]{DateTimes.of(\"2001-01-01\").getMillis(), 1L, \"1\", \"a\", 4.0f},\n                new Object[]{DateTimes.of(\"2001-01-02\").getMillis(), 1L, \"def\", \"abc\", 5.0f},\n                new Object[]{DateTimes.of(\"2001-01-03\").getMillis(), 1L, \"abc\", NullHandling.defaultStringValue(), 6.0f}\n            )\n        ),\n        frame\n    );\n    Assert.assertTrue(statement.isDone());\n  }\n","date":"2019-01-16 15:12:59","endLine":186,"groupId":"7606","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectAllInFirstFrame","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/74/386125ef1fa8902d74c78199b57bd880941463.src","preCode":"  public void testSelectAllInFirstFrame()\n  {\n    final String sql = \"SELECT __time, cnt, dim1, dim2, m1 FROM druid.foo\";\n    final DruidStatement statement = new DruidStatement(\"\", 0, null, () -> {\n    }).prepare(plannerFactory, sql, -1, AllowAllAuthenticator.ALLOW_ALL_RESULT);\n\n    \r\n    Meta.Frame frame = statement.execute().nextFrame(DruidStatement.START_OFFSET, 6);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            0,\n            true,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-01\").getMillis(), 1L, \"\", \"a\", 1.0f},\n                new Object[]{\n                    DateTimes.of(\"2000-01-02\").getMillis(),\n                    1L,\n                    \"10.1\",\n                    NullHandling.defaultStringValue(),\n                    2.0f\n                },\n                new Object[]{DateTimes.of(\"2000-01-03\").getMillis(), 1L, \"2\", \"\", 3.0f},\n                new Object[]{DateTimes.of(\"2001-01-01\").getMillis(), 1L, \"1\", \"a\", 4.0f},\n                new Object[]{DateTimes.of(\"2001-01-02\").getMillis(), 1L, \"def\", \"abc\", 5.0f},\n                new Object[]{DateTimes.of(\"2001-01-03\").getMillis(), 1L, \"abc\", NullHandling.defaultStringValue(), 6.0f}\n            )\n        ),\n        frame\n    );\n    Assert.assertTrue(statement.isDone());\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidStatementTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2019-01-16 15:12:59","commitOrder":2,"curCode":"  public void testSelectSplitOverTwoFrames()\n  {\n    final String sql = \"SELECT __time, cnt, dim1, dim2, m1 FROM druid.foo\";\n    final DruidStatement statement = new DruidStatement(\"\", 0, null, sqlLifecycleFactory.factorize(), () -> {\n    }).prepare(sql, -1, AllowAllAuthenticator.ALLOW_ALL_RESULT);\n\n    \r\n    Meta.Frame frame = statement.execute().nextFrame(DruidStatement.START_OFFSET, 2);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            0,\n            false,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-01\").getMillis(), 1L, \"\", \"a\", 1.0f},\n                new Object[]{\n                    DateTimes.of(\"2000-01-02\").getMillis(),\n                    1L,\n                    \"10.1\",\n                    NullHandling.defaultStringValue(),\n                    2.0f\n                }\n            )\n        ),\n        frame\n    );\n    Assert.assertFalse(statement.isDone());\n\n    \r\n    frame = statement.nextFrame(2, 10);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            2,\n            true,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-03\").getMillis(), 1L, \"2\", \"\", 3.0f},\n                new Object[]{DateTimes.of(\"2001-01-01\").getMillis(), 1L, \"1\", \"a\", 4.0f},\n                new Object[]{DateTimes.of(\"2001-01-02\").getMillis(), 1L, \"def\", \"abc\", 5.0f},\n                new Object[]{DateTimes.of(\"2001-01-03\").getMillis(), 1L, \"abc\", NullHandling.defaultStringValue(), 6.0f}\n            )\n        ),\n        frame\n    );\n    Assert.assertTrue(statement.isDone());\n  }\n","date":"2019-01-16 15:12:59","endLine":232,"groupId":"7606","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectSplitOverTwoFrames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/74/386125ef1fa8902d74c78199b57bd880941463.src","preCode":"  public void testSelectSplitOverTwoFrames()\n  {\n    final String sql = \"SELECT __time, cnt, dim1, dim2, m1 FROM druid.foo\";\n    final DruidStatement statement = new DruidStatement(\"\", 0, null, () -> {\n    }).prepare(plannerFactory, sql, -1, AllowAllAuthenticator.ALLOW_ALL_RESULT);\n\n    \r\n    Meta.Frame frame = statement.execute().nextFrame(DruidStatement.START_OFFSET, 2);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            0,\n            false,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-01\").getMillis(), 1L, \"\", \"a\", 1.0f},\n                new Object[]{\n                    DateTimes.of(\"2000-01-02\").getMillis(),\n                    1L,\n                    \"10.1\",\n                    NullHandling.defaultStringValue(),\n                    2.0f\n                }\n            )\n        ),\n        frame\n    );\n    Assert.assertFalse(statement.isDone());\n\n    \r\n    frame = statement.nextFrame(2, 10);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            2,\n            true,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-03\").getMillis(), 1L, \"2\", \"\", 3.0f},\n                new Object[]{DateTimes.of(\"2001-01-01\").getMillis(), 1L, \"1\", \"a\", 4.0f},\n                new Object[]{DateTimes.of(\"2001-01-02\").getMillis(), 1L, \"def\", \"abc\", 5.0f},\n                new Object[]{DateTimes.of(\"2001-01-03\").getMillis(), 1L, \"abc\", NullHandling.defaultStringValue(), 6.0f}\n            )\n        ),\n        frame\n    );\n    Assert.assertTrue(statement.isDone());\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidStatementTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"5b8a221713615fff53cbd352cda925ecb1334d98","commitMessage":"@@@Add SQL id.  request logs.  and metrics (#6302)\n\n* use SqlLifecyle to manage sql execution.  add sqlId\n\n* add sql request logger\n\n* fix UT\n\n* rename sqlId to sqlQueryId.  sql/time to sqlQuery/time.  etc\n\n* add docs and more sql request logger impls\n\n* add UT for http and jdbc\n\n* fix forbidden use of com.google.common.base.Charsets\n\n* fix UT in QuantileSqlAggregatorTest.  supressed unused warning of getSqlQueryId\n\n* do not use default method in QueryMetrics interface\n\n* capitalize 'sql' everywhere in the non-property parts of the docs\n\n* use RequestLogger interface to log sql query\n\n* minor bugfixes and add switching request logger\n\n* add filePattern configs for FileRequestLogger\n\n* address review comments.  adjust sql request log format\n\n* fix inspection error\n\n* try SuppressWarnings(\"RedundantThrows\") to fix inspection error on ComposingRequestLoggerProvider\n","date":"2019-01-16 15:12:59","modifiedFileCount":"44","status":"M","submitter":"Dayue Gao"},{"authorTime":"2020-02-20 05:09:20","codes":[{"authorDate":"2020-02-20 05:09:20","commitOrder":3,"curCode":"  public void testSelectAllInFirstFrame()\n  {\n    final String sql = \"SELECT __time, cnt, dim1, dim2, m1 FROM druid.foo\";\n    final DruidStatement statement = new DruidStatement(\"\", 0, null, sqlLifecycleFactory.factorize(), () -> {\n    }).prepare(sql, -1, AllowAllAuthenticator.ALLOW_ALL_RESULT);\n\n    \r\n    Meta.Frame frame = statement.execute(Collections.emptyList()).nextFrame(DruidStatement.START_OFFSET, 6);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            0,\n            true,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-01\").getMillis(), 1L, \"\", \"a\", 1.0f},\n                new Object[]{\n                    DateTimes.of(\"2000-01-02\").getMillis(),\n                    1L,\n                    \"10.1\",\n                    NullHandling.defaultStringValue(),\n                    2.0f\n                },\n                new Object[]{DateTimes.of(\"2000-01-03\").getMillis(), 1L, \"2\", \"\", 3.0f},\n                new Object[]{DateTimes.of(\"2001-01-01\").getMillis(), 1L, \"1\", \"a\", 4.0f},\n                new Object[]{DateTimes.of(\"2001-01-02\").getMillis(), 1L, \"def\", \"abc\", 5.0f},\n                new Object[]{DateTimes.of(\"2001-01-03\").getMillis(), 1L, \"abc\", NullHandling.defaultStringValue(), 6.0f}\n            )\n        ),\n        frame\n    );\n    Assert.assertTrue(statement.isDone());\n  }\n","date":"2020-02-20 05:09:20","endLine":186,"groupId":"101536","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectAllInFirstFrame","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/93/d5bf4dae7cd39d54b0fb619d33864044bc114f.src","preCode":"  public void testSelectAllInFirstFrame()\n  {\n    final String sql = \"SELECT __time, cnt, dim1, dim2, m1 FROM druid.foo\";\n    final DruidStatement statement = new DruidStatement(\"\", 0, null, sqlLifecycleFactory.factorize(), () -> {\n    }).prepare(sql, -1, AllowAllAuthenticator.ALLOW_ALL_RESULT);\n\n    \r\n    Meta.Frame frame = statement.execute().nextFrame(DruidStatement.START_OFFSET, 6);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            0,\n            true,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-01\").getMillis(), 1L, \"\", \"a\", 1.0f},\n                new Object[]{\n                    DateTimes.of(\"2000-01-02\").getMillis(),\n                    1L,\n                    \"10.1\",\n                    NullHandling.defaultStringValue(),\n                    2.0f\n                },\n                new Object[]{DateTimes.of(\"2000-01-03\").getMillis(), 1L, \"2\", \"\", 3.0f},\n                new Object[]{DateTimes.of(\"2001-01-01\").getMillis(), 1L, \"1\", \"a\", 4.0f},\n                new Object[]{DateTimes.of(\"2001-01-02\").getMillis(), 1L, \"def\", \"abc\", 5.0f},\n                new Object[]{DateTimes.of(\"2001-01-03\").getMillis(), 1L, \"abc\", NullHandling.defaultStringValue(), 6.0f}\n            )\n        ),\n        frame\n    );\n    Assert.assertTrue(statement.isDone());\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidStatementTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2020-02-20 05:09:20","commitOrder":3,"curCode":"  public void testSelectSplitOverTwoFrames()\n  {\n    final String sql = \"SELECT __time, cnt, dim1, dim2, m1 FROM druid.foo\";\n    final DruidStatement statement = new DruidStatement(\"\", 0, null, sqlLifecycleFactory.factorize(), () -> {\n    }).prepare(sql, -1, AllowAllAuthenticator.ALLOW_ALL_RESULT);\n\n    \r\n    Meta.Frame frame = statement.execute(Collections.emptyList()).nextFrame(DruidStatement.START_OFFSET, 2);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            0,\n            false,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-01\").getMillis(), 1L, \"\", \"a\", 1.0f},\n                new Object[]{\n                    DateTimes.of(\"2000-01-02\").getMillis(),\n                    1L,\n                    \"10.1\",\n                    NullHandling.defaultStringValue(),\n                    2.0f\n                }\n            )\n        ),\n        frame\n    );\n    Assert.assertFalse(statement.isDone());\n\n    \r\n    frame = statement.nextFrame(2, 10);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            2,\n            true,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-03\").getMillis(), 1L, \"2\", \"\", 3.0f},\n                new Object[]{DateTimes.of(\"2001-01-01\").getMillis(), 1L, \"1\", \"a\", 4.0f},\n                new Object[]{DateTimes.of(\"2001-01-02\").getMillis(), 1L, \"def\", \"abc\", 5.0f},\n                new Object[]{DateTimes.of(\"2001-01-03\").getMillis(), 1L, \"abc\", NullHandling.defaultStringValue(), 6.0f}\n            )\n        ),\n        frame\n    );\n    Assert.assertTrue(statement.isDone());\n  }\n","date":"2020-02-20 05:09:20","endLine":232,"groupId":"101536","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectSplitOverTwoFrames","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/93/d5bf4dae7cd39d54b0fb619d33864044bc114f.src","preCode":"  public void testSelectSplitOverTwoFrames()\n  {\n    final String sql = \"SELECT __time, cnt, dim1, dim2, m1 FROM druid.foo\";\n    final DruidStatement statement = new DruidStatement(\"\", 0, null, sqlLifecycleFactory.factorize(), () -> {\n    }).prepare(sql, -1, AllowAllAuthenticator.ALLOW_ALL_RESULT);\n\n    \r\n    Meta.Frame frame = statement.execute().nextFrame(DruidStatement.START_OFFSET, 2);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            0,\n            false,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-01\").getMillis(), 1L, \"\", \"a\", 1.0f},\n                new Object[]{\n                    DateTimes.of(\"2000-01-02\").getMillis(),\n                    1L,\n                    \"10.1\",\n                    NullHandling.defaultStringValue(),\n                    2.0f\n                }\n            )\n        ),\n        frame\n    );\n    Assert.assertFalse(statement.isDone());\n\n    \r\n    frame = statement.nextFrame(2, 10);\n    Assert.assertEquals(\n        Meta.Frame.create(\n            2,\n            true,\n            Lists.newArrayList(\n                new Object[]{DateTimes.of(\"2000-01-03\").getMillis(), 1L, \"2\", \"\", 3.0f},\n                new Object[]{DateTimes.of(\"2001-01-01\").getMillis(), 1L, \"1\", \"a\", 4.0f},\n                new Object[]{DateTimes.of(\"2001-01-02\").getMillis(), 1L, \"def\", \"abc\", 5.0f},\n                new Object[]{DateTimes.of(\"2001-01-03\").getMillis(), 1L, \"abc\", NullHandling.defaultStringValue(), 6.0f}\n            )\n        ),\n        frame\n    );\n    Assert.assertTrue(statement.isDone());\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidStatementTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"b408a6d774e43e574bf8092584fae76d582cfd8f","commitMessage":"@@@sql support for dynamic parameters (#6974)\n\n* sql support for dynamic parameters\n\n* fixup\n\n* javadocs\n\n* fixup from merge\n\n* formatting\n\n* fixes\n\n* fix it\n\n* doc fix\n\n* remove druid fallback self-join parameterized test\n\n* unused imports\n\n* ignore test for now\n\n* fix imports\n\n* fixup\n\n* fix merge\n\n* merge fixup\n\n* fix test that cannot vectorize\n\n* fixup and more better\n\n* dependency thingo\n\n* fix docs\n\n* tweaks\n\n* fix docs\n\n* spelling\n\n* unused imports after merge\n\n* review stuffs\n\n* add comment\n\n* add ignore text\n\n* review stuffs\n","date":"2020-02-20 05:09:20","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"}]
