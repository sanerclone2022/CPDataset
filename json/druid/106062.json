[{"authorTime":"2020-10-10 08:42:30","codes":[{"authorDate":"2020-10-10 08:42:30","commitOrder":1,"curCode":"  public void test_computeJoinDataSourceCacheKey_noHashJoin()\n  {\n\n    PreJoinableClause clause1 = makeGlobalPreJoinableClause(\"dataSource_1\", \"x == \\\"j.x\\\"\", \"j.\");\n    PreJoinableClause clause2 = makeGlobalPreJoinableClause(\"dataSource_2\", \"x != \\\"h.x\\\"\", \"h.\");\n    DataSourceAnalysis analysis = EasyMock.mock(DataSourceAnalysis.class);\n    EasyMock.expect(analysis.getPreJoinableClauses()).andReturn(Arrays.asList(clause1, clause2)).anyTimes();\n    EasyMock.replay(analysis);\n    JoinableFactoryWrapper joinableFactoryWrapper = new JoinableFactoryWrapper(new JoinableFactoryWithCacheKey());\n    Optional<byte[]> cacheKey = joinableFactoryWrapper.computeJoinDataSourceCacheKey(analysis);\n\n    Assert.assertFalse(cacheKey.isPresent());\n  }\n","date":"2020-10-10 08:42:30","endLine":185,"groupId":"15369","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"test_computeJoinDataSourceCacheKey_noHashJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/57afb31b84c33eb26b19fa7bdf30b72fe000d3.src","preCode":"  public void test_computeJoinDataSourceCacheKey_noHashJoin()\n  {\n\n    PreJoinableClause clause1 = makeGlobalPreJoinableClause(\"dataSource_1\", \"x == \\\"j.x\\\"\", \"j.\");\n    PreJoinableClause clause2 = makeGlobalPreJoinableClause(\"dataSource_2\", \"x != \\\"h.x\\\"\", \"h.\");\n    DataSourceAnalysis analysis = EasyMock.mock(DataSourceAnalysis.class);\n    EasyMock.expect(analysis.getPreJoinableClauses()).andReturn(Arrays.asList(clause1, clause2)).anyTimes();\n    EasyMock.replay(analysis);\n    JoinableFactoryWrapper joinableFactoryWrapper = new JoinableFactoryWrapper(new JoinableFactoryWithCacheKey());\n    Optional<byte[]> cacheKey = joinableFactoryWrapper.computeJoinDataSourceCacheKey(analysis);\n\n    Assert.assertFalse(cacheKey.isPresent());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinableFactoryWrapperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"B"},{"authorDate":"2020-10-10 08:42:30","commitOrder":1,"curCode":"  public void test_computeJoinDataSourceCacheKey_cachingUnsupported()\n  {\n    PreJoinableClause clause1 = makeGlobalPreJoinableClause(\"dataSource_1\", \"x == \\\"j.x\\\"\", \"j.\");\n    DataSource dataSource = new LookupDataSource(\"lookup\");\n    PreJoinableClause clause2 = makePreJoinableClause(dataSource, \"x == \\\"h.x\\\"\", \"h.\", JoinType.LEFT);\n    DataSourceAnalysis analysis = EasyMock.mock(DataSourceAnalysis.class);\n    EasyMock.expect(analysis.getPreJoinableClauses()).andReturn(Arrays.asList(clause1, clause2)).anyTimes();\n    EasyMock.replay(analysis);\n    JoinableFactoryWrapper joinableFactoryWrapper = new JoinableFactoryWrapper(new JoinableFactoryWithCacheKey());\n    Optional<byte[]> cacheKey = joinableFactoryWrapper.computeJoinDataSourceCacheKey(analysis);\n\n    Assert.assertFalse(cacheKey.isPresent());\n  }\n","date":"2020-10-10 08:42:30","endLine":200,"groupId":"15369","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"test_computeJoinDataSourceCacheKey_cachingUnsupported","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/57afb31b84c33eb26b19fa7bdf30b72fe000d3.src","preCode":"  public void test_computeJoinDataSourceCacheKey_cachingUnsupported()\n  {\n    PreJoinableClause clause1 = makeGlobalPreJoinableClause(\"dataSource_1\", \"x == \\\"j.x\\\"\", \"j.\");\n    DataSource dataSource = new LookupDataSource(\"lookup\");\n    PreJoinableClause clause2 = makePreJoinableClause(dataSource, \"x == \\\"h.x\\\"\", \"h.\", JoinType.LEFT);\n    DataSourceAnalysis analysis = EasyMock.mock(DataSourceAnalysis.class);\n    EasyMock.expect(analysis.getPreJoinableClauses()).andReturn(Arrays.asList(clause1, clause2)).anyTimes();\n    EasyMock.replay(analysis);\n    JoinableFactoryWrapper joinableFactoryWrapper = new JoinableFactoryWrapper(new JoinableFactoryWithCacheKey());\n    Optional<byte[]> cacheKey = joinableFactoryWrapper.computeJoinDataSourceCacheKey(analysis);\n\n    Assert.assertFalse(cacheKey.isPresent());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinableFactoryWrapperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"B"}],"commitId":"4d2a92f46a121fc8b3f5a02f1480156ccc62bb4a","commitMessage":"@@@Add caching support to join queries (#10366)\n\n* Proposed changes for making joins cacheable\n\n* Add unit tests\n\n* Fix tests\n\n* simplify logic\n\n* Pull empty byte array logic out of CachingQueryRunner\n\n* remove useless null check\n\n* Minor refactor\n\n* Fix tests\n\n* Fix segment caching on Broker\n\n* Move join cache key computation in Broker\n\nMove join cache key computation in Broker from ResultLevelCachingQueryRunner to CachingClusteredClient\n\n* Fix compilation\n\n* Review comments\n\n* Add more tests\n\n* Fix inspection errors\n\n* Pushed condition analysis to JoinableFactory\n\n* review comments\n\n* Disable join caching for broker and add prefix key to BroadcastSegmentIndexedTable\n\n* Remove commented lines\n\n* Fix populateCache\n\n* Disable caching for selective datasources\n\nRefactored the code so that we can decide at the data source level.  whether to enable cache for broker or data nodes","date":"2020-10-10 08:42:30","modifiedFileCount":"52","status":"B","submitter":"Abhishek Agarwal"},{"authorTime":"2021-03-05 02:39:21","codes":[{"authorDate":"2021-03-05 02:39:21","commitOrder":2,"curCode":"  public void test_computeJoinDataSourceCacheKey_noHashJoin()\n  {\n    PreJoinableClause clause1 = makeGlobalPreJoinableClause(\"dataSource_1\", \"x == \\\"j.x\\\"\", \"j.\");\n    PreJoinableClause clause2 = makeGlobalPreJoinableClause(\"dataSource_2\", \"x != \\\"h.x\\\"\", \"h.\");\n    DataSourceAnalysis analysis = EasyMock.mock(DataSourceAnalysis.class);\n    EasyMock.expect(analysis.getPreJoinableClauses()).andReturn(Arrays.asList(clause1, clause2)).anyTimes();\n    EasyMock.expect(analysis.getJoinBaseTableFilter()).andReturn(Optional.of(TrueDimFilter.instance())).anyTimes();\n    EasyMock.replay(analysis);\n    JoinableFactoryWrapper joinableFactoryWrapper = new JoinableFactoryWrapper(new JoinableFactoryWithCacheKey());\n    Optional<byte[]> cacheKey = joinableFactoryWrapper.computeJoinDataSourceCacheKey(analysis);\n\n    Assert.assertFalse(cacheKey.isPresent());\n  }\n","date":"2021-03-05 02:39:21","endLine":191,"groupId":"106062","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"test_computeJoinDataSourceCacheKey_noHashJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/94/067c34412fcbc2be239b6503235ea5b9a96f24.src","preCode":"  public void test_computeJoinDataSourceCacheKey_noHashJoin()\n  {\n\n    PreJoinableClause clause1 = makeGlobalPreJoinableClause(\"dataSource_1\", \"x == \\\"j.x\\\"\", \"j.\");\n    PreJoinableClause clause2 = makeGlobalPreJoinableClause(\"dataSource_2\", \"x != \\\"h.x\\\"\", \"h.\");\n    DataSourceAnalysis analysis = EasyMock.mock(DataSourceAnalysis.class);\n    EasyMock.expect(analysis.getPreJoinableClauses()).andReturn(Arrays.asList(clause1, clause2)).anyTimes();\n    EasyMock.replay(analysis);\n    JoinableFactoryWrapper joinableFactoryWrapper = new JoinableFactoryWrapper(new JoinableFactoryWithCacheKey());\n    Optional<byte[]> cacheKey = joinableFactoryWrapper.computeJoinDataSourceCacheKey(analysis);\n\n    Assert.assertFalse(cacheKey.isPresent());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinableFactoryWrapperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"},{"authorDate":"2021-03-05 02:39:21","commitOrder":2,"curCode":"  public void test_computeJoinDataSourceCacheKey_cachingUnsupported()\n  {\n    PreJoinableClause clause1 = makeGlobalPreJoinableClause(\"dataSource_1\", \"x == \\\"j.x\\\"\", \"j.\");\n    DataSource dataSource = new LookupDataSource(\"lookup\");\n    PreJoinableClause clause2 = makePreJoinableClause(dataSource, \"x == \\\"h.x\\\"\", \"h.\", JoinType.LEFT);\n    DataSourceAnalysis analysis = EasyMock.mock(DataSourceAnalysis.class);\n    EasyMock.expect(analysis.getPreJoinableClauses()).andReturn(Arrays.asList(clause1, clause2)).anyTimes();\n    EasyMock.expect(analysis.getJoinBaseTableFilter()).andReturn(Optional.of(TrueDimFilter.instance())).anyTimes();\n    EasyMock.replay(analysis);\n    JoinableFactoryWrapper joinableFactoryWrapper = new JoinableFactoryWrapper(new JoinableFactoryWithCacheKey());\n    Optional<byte[]> cacheKey = joinableFactoryWrapper.computeJoinDataSourceCacheKey(analysis);\n\n    Assert.assertFalse(cacheKey.isPresent());\n  }\n","date":"2021-03-05 02:39:21","endLine":207,"groupId":"106062","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"test_computeJoinDataSourceCacheKey_cachingUnsupported","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/94/067c34412fcbc2be239b6503235ea5b9a96f24.src","preCode":"  public void test_computeJoinDataSourceCacheKey_cachingUnsupported()\n  {\n    PreJoinableClause clause1 = makeGlobalPreJoinableClause(\"dataSource_1\", \"x == \\\"j.x\\\"\", \"j.\");\n    DataSource dataSource = new LookupDataSource(\"lookup\");\n    PreJoinableClause clause2 = makePreJoinableClause(dataSource, \"x == \\\"h.x\\\"\", \"h.\", JoinType.LEFT);\n    DataSourceAnalysis analysis = EasyMock.mock(DataSourceAnalysis.class);\n    EasyMock.expect(analysis.getPreJoinableClauses()).andReturn(Arrays.asList(clause1, clause2)).anyTimes();\n    EasyMock.replay(analysis);\n    JoinableFactoryWrapper joinableFactoryWrapper = new JoinableFactoryWrapper(new JoinableFactoryWithCacheKey());\n    Optional<byte[]> cacheKey = joinableFactoryWrapper.computeJoinDataSourceCacheKey(analysis);\n\n    Assert.assertFalse(cacheKey.isPresent());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinableFactoryWrapperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"1a15987432fab044fc83a99af8ab497d887aeda1","commitMessage":"@@@Supporting filters in the left base table for join datasources (#10697)\n\n* where filter left first draft\n\n* Revert changes in calcite test\n\n* Refactor a bit\n\n* Fixing the Tests\n\n* Changes\n\n* Adding tests\n\n* Add tests for correlated queries\n\n* Add comment\n\n* Fix typos","date":"2021-03-05 02:39:21","modifiedFileCount":"26","status":"M","submitter":"Abhishek Agarwal"}]
