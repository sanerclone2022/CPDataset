[{"authorTime":"2019-03-28 00:00:43","codes":[{"authorDate":"2019-03-28 00:00:43","commitOrder":1,"curCode":"  private void pushTaskFile(final File logFile, final String taskKey) throws IOException\n  {\n    FileInputStream fileStream = new FileInputStream(logFile);\n\n    InputStreamContent mediaContent = new InputStreamContent(\"text/plain\", fileStream);\n    mediaContent.setLength(logFile.length());\n\n    try {\n      RetryUtils.retry(\n          (RetryUtils.Task<Void>) () -> {\n            storage.insert(config.getBucket(), taskKey, mediaContent);\n            return null;\n          },\n          GoogleUtils::isRetryable,\n          1,\n          5\n      );\n    }\n    catch (IOException e) {\n      throw e;\n    }\n    catch (Exception e) {\n      throw new RE(e, \"Failed to upload [%s] to [%s]\", logFile, taskKey);\n    }\n  }\n","date":"2019-03-28 00:00:43","endLine":91,"groupId":"3726","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"pushTaskFile","params":"(finalFilelogFile@finalStringtaskKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fe/b373eaddc52e53b4d874a18629eddb2f222e96.src","preCode":"  private void pushTaskFile(final File logFile, final String taskKey) throws IOException\n  {\n    FileInputStream fileStream = new FileInputStream(logFile);\n\n    InputStreamContent mediaContent = new InputStreamContent(\"text/plain\", fileStream);\n    mediaContent.setLength(logFile.length());\n\n    try {\n      RetryUtils.retry(\n          (RetryUtils.Task<Void>) () -> {\n            storage.insert(config.getBucket(), taskKey, mediaContent);\n            return null;\n          },\n          GoogleUtils::isRetryable,\n          1,\n          5\n      );\n    }\n    catch (IOException e) {\n      throw e;\n    }\n    catch (Exception e) {\n      throw new RE(e, \"Failed to upload [%s] to [%s]\", logFile, taskKey);\n    }\n  }\n","realPath":"extensions-core/google-extensions/src/main/java/org/apache/druid/storage/google/GoogleTaskLogs.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"},{"authorDate":"2019-03-28 00:00:43","commitOrder":1,"curCode":"  public void insert(final File file, final String contentType, final String path)\n      throws IOException\n  {\n    LOG.info(\"Inserting [%s] to [%s]\", file, path);\n    try {\n      RetryUtils.retry(\n          (RetryUtils.Task<Void>) () -> {\n            storage.insert(config.getBucket(), path, new FileContent(contentType, file));\n            return null;\n          },\n          GoogleUtils::isRetryable,\n          1,\n          5\n      );\n    }\n    catch (IOException e) {\n      throw e;\n    }\n    catch (Exception e) {\n      throw new RE(e, \"Failed to upload [%s] to [%s]\", file, path);\n    }\n  }\n","date":"2019-03-28 00:00:43","endLine":102,"groupId":"3726","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"insert","params":"(finalFilefile@finalStringcontentType@finalStringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/89/6209adc28966b26b9aa96d5514f2f3ca9a7b48.src","preCode":"  public void insert(final File file, final String contentType, final String path)\n      throws IOException\n  {\n    LOG.info(\"Inserting [%s] to [%s]\", file, path);\n    try {\n      RetryUtils.retry(\n          (RetryUtils.Task<Void>) () -> {\n            storage.insert(config.getBucket(), path, new FileContent(contentType, file));\n            return null;\n          },\n          GoogleUtils::isRetryable,\n          1,\n          5\n      );\n    }\n    catch (IOException e) {\n      throw e;\n    }\n    catch (Exception e) {\n      throw new RE(e, \"Failed to upload [%s] to [%s]\", file, path);\n    }\n  }\n","realPath":"extensions-core/google-extensions/src/main/java/org/apache/druid/storage/google/GoogleDataSegmentPusher.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"}],"commitId":"eeb3dbe79d442dd805ef4483c9c417e1f9cc11a5","commitMessage":"@@@Move GCP to a core extension (#6953)\n\n* Move GCP to a core extension\n\n* Don't provide druid-core >.<\n\n* Keep AWS and GCP modules separate\n\n* Move AWSModule to its own module\n\n* Add aws ec2 extension and more modules in more places\n\n* Fix bad imports\n\n* Fix test jackson module\n\n* Include AWS and GCP core in server\n\n* Add simple empty method comment\n\n* Update version to 15\n\n* One more 0.13.0-->0.15.0 change\n\n* Fix multi-binding problem\n\n* Grep for s3-extensions and update docs\n\n* Update extensions.md\n","date":"2019-03-28 00:00:43","modifiedFileCount":"4","status":"B","submitter":"Charles Allen"},{"authorTime":"2019-03-28 00:00:43","codes":[{"authorDate":"2019-08-20 17:55:41","commitOrder":2,"curCode":"  private void pushTaskFile(final File logFile, final String taskKey) throws IOException\n  {\n    try (final InputStream fileStream = Files.newInputStream(logFile.toPath())) {\n\n      InputStreamContent mediaContent = new InputStreamContent(\"text/plain\", fileStream);\n      mediaContent.setLength(logFile.length());\n\n      try {\n        RetryUtils.retry(\n            (RetryUtils.Task<Void>) () -> {\n              storage.insert(config.getBucket(), taskKey, mediaContent);\n              return null;\n            },\n            GoogleUtils::isRetryable,\n            1,\n            5\n        );\n      }\n      catch (IOException e) {\n        throw e;\n      }\n      catch (Exception e) {\n        throw new RE(e, \"Failed to upload [%s] to [%s]\", logFile, taskKey);\n      }\n    }\n  }\n","date":"2019-08-20 17:55:41","endLine":92,"groupId":"3726","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"pushTaskFile","params":"(finalFilelogFile@finalStringtaskKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a5/f1b99f5634fade19c0adccb94a245fe31c32b0.src","preCode":"  private void pushTaskFile(final File logFile, final String taskKey) throws IOException\n  {\n    FileInputStream fileStream = new FileInputStream(logFile);\n\n    InputStreamContent mediaContent = new InputStreamContent(\"text/plain\", fileStream);\n    mediaContent.setLength(logFile.length());\n\n    try {\n      RetryUtils.retry(\n          (RetryUtils.Task<Void>) () -> {\n            storage.insert(config.getBucket(), taskKey, mediaContent);\n            return null;\n          },\n          GoogleUtils::isRetryable,\n          1,\n          5\n      );\n    }\n    catch (IOException e) {\n      throw e;\n    }\n    catch (Exception e) {\n      throw new RE(e, \"Failed to upload [%s] to [%s]\", logFile, taskKey);\n    }\n  }\n","realPath":"extensions-core/google-extensions/src/main/java/org/apache/druid/storage/google/GoogleTaskLogs.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2019-03-28 00:00:43","commitOrder":2,"curCode":"  public void insert(final File file, final String contentType, final String path)\n      throws IOException\n  {\n    LOG.info(\"Inserting [%s] to [%s]\", file, path);\n    try {\n      RetryUtils.retry(\n          (RetryUtils.Task<Void>) () -> {\n            storage.insert(config.getBucket(), path, new FileContent(contentType, file));\n            return null;\n          },\n          GoogleUtils::isRetryable,\n          1,\n          5\n      );\n    }\n    catch (IOException e) {\n      throw e;\n    }\n    catch (Exception e) {\n      throw new RE(e, \"Failed to upload [%s] to [%s]\", file, path);\n    }\n  }\n","date":"2019-03-28 00:00:43","endLine":102,"groupId":"3726","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"insert","params":"(finalFilefile@finalStringcontentType@finalStringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/89/6209adc28966b26b9aa96d5514f2f3ca9a7b48.src","preCode":"  public void insert(final File file, final String contentType, final String path)\n      throws IOException\n  {\n    LOG.info(\"Inserting [%s] to [%s]\", file, path);\n    try {\n      RetryUtils.retry(\n          (RetryUtils.Task<Void>) () -> {\n            storage.insert(config.getBucket(), path, new FileContent(contentType, file));\n            return null;\n          },\n          GoogleUtils::isRetryable,\n          1,\n          5\n      );\n    }\n    catch (IOException e) {\n      throw e;\n    }\n    catch (Exception e) {\n      throw new RE(e, \"Failed to upload [%s] to [%s]\", file, path);\n    }\n  }\n","realPath":"extensions-core/google-extensions/src/main/java/org/apache/druid/storage/google/GoogleDataSegmentPusher.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"N"}],"commitId":"781873ba53a43db50e99e6f21180f748b3c65919","commitMessage":"@@@Fix resource leak (#8337)\n\n* Fix resource leak\n\n* Patch comments\n","date":"2019-08-20 17:55:41","modifiedFileCount":"8","status":"M","submitter":"Benedict Jin"},{"authorTime":"2019-11-20 05:57:58","codes":[{"authorDate":"2019-08-20 17:55:41","commitOrder":3,"curCode":"  private void pushTaskFile(final File logFile, final String taskKey) throws IOException\n  {\n    try (final InputStream fileStream = Files.newInputStream(logFile.toPath())) {\n\n      InputStreamContent mediaContent = new InputStreamContent(\"text/plain\", fileStream);\n      mediaContent.setLength(logFile.length());\n\n      try {\n        RetryUtils.retry(\n            (RetryUtils.Task<Void>) () -> {\n              storage.insert(config.getBucket(), taskKey, mediaContent);\n              return null;\n            },\n            GoogleUtils::isRetryable,\n            1,\n            5\n        );\n      }\n      catch (IOException e) {\n        throw e;\n      }\n      catch (Exception e) {\n        throw new RE(e, \"Failed to upload [%s] to [%s]\", logFile, taskKey);\n      }\n    }\n  }\n","date":"2019-08-20 17:55:41","endLine":92,"groupId":"103253","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"pushTaskFile","params":"(finalFilelogFile@finalStringtaskKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a5/f1b99f5634fade19c0adccb94a245fe31c32b0.src","preCode":"  private void pushTaskFile(final File logFile, final String taskKey) throws IOException\n  {\n    try (final InputStream fileStream = Files.newInputStream(logFile.toPath())) {\n\n      InputStreamContent mediaContent = new InputStreamContent(\"text/plain\", fileStream);\n      mediaContent.setLength(logFile.length());\n\n      try {\n        RetryUtils.retry(\n            (RetryUtils.Task<Void>) () -> {\n              storage.insert(config.getBucket(), taskKey, mediaContent);\n              return null;\n            },\n            GoogleUtils::isRetryable,\n            1,\n            5\n        );\n      }\n      catch (IOException e) {\n        throw e;\n      }\n      catch (Exception e) {\n        throw new RE(e, \"Failed to upload [%s] to [%s]\", logFile, taskKey);\n      }\n    }\n  }\n","realPath":"extensions-core/google-extensions/src/main/java/org/apache/druid/storage/google/GoogleTaskLogs.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"},{"authorDate":"2019-11-20 05:57:58","commitOrder":3,"curCode":"  public void insert(final File file, final String contentType, final String path)\n      throws IOException\n  {\n    log.debug(\"Inserting [%s] to [%s]\", file, path);\n    try {\n      RetryUtils.retry(\n          (RetryUtils.Task<Void>) () -> {\n            storage.insert(config.getBucket(), path, new FileContent(contentType, file));\n            return null;\n          },\n          GoogleUtils::isRetryable,\n          1,\n          5\n      );\n    }\n    catch (IOException e) {\n      throw e;\n    }\n    catch (Exception e) {\n      throw new RE(e, \"Failed to upload [%s] to [%s]\", file, path);\n    }\n  }\n","date":"2019-11-20 05:57:58","endLine":100,"groupId":"103253","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"insert","params":"(finalFilefile@finalStringcontentType@finalStringpath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/35/c763f2be3a3cbd41daa7a3e4e0613397aef2e9.src","preCode":"  public void insert(final File file, final String contentType, final String path)\n      throws IOException\n  {\n    LOG.info(\"Inserting [%s] to [%s]\", file, path);\n    try {\n      RetryUtils.retry(\n          (RetryUtils.Task<Void>) () -> {\n            storage.insert(config.getBucket(), path, new FileContent(contentType, file));\n            return null;\n          },\n          GoogleUtils::isRetryable,\n          1,\n          5\n      );\n    }\n    catch (IOException e) {\n      throw e;\n    }\n    catch (Exception e) {\n      throw new RE(e, \"Failed to upload [%s] to [%s]\", file, path);\n    }\n  }\n","realPath":"extensions-core/google-extensions/src/main/java/org/apache/druid/storage/google/GoogleDataSegmentPusher.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"c44452f0c1b051b03343d8bb479828f01461d68f","commitMessage":"@@@Tidy up lifecycle.  query.  and ingestion logging. (#8889)\n\n* Tidy up lifecycle.  query.  and ingestion logging.\n\nThe goal of this patch is to improve the clarity and usefulness of\nDruid's logging for cluster operators. For more information.  see\nhttps://twitter.com/cowtowncoder/status/1195469299814555648.\n\nConcretely.  this patch does the following:\n\n- Changes a lot of INFO logs to DEBUG.  and DEBUG to TRACE.  with the\n  goal of reducing redundancy and improving clarity by avoiding\n  showing rarely-useful log messages. This includes most \"starting\"\n  and \"stopping\" messages.  and most messages related to individual\n  columns.\n- Adds new log4j2 templates that show operators how to enabled DEBUG\n  logging for certain important packages.\n- Eliminate stack traces for query errors.  unless log level is DEBUG\n  or more. This is useful because query errors often indicate user\n  error rather than system error.  but dumping stack trace often gave\n  operators the impression that there was a system failure.\n- Adds task id to Appenderator.  AppenderatorDriver thread names. In\n  the default log4j2 configuration.  this will put them in log lines\n  as well. It's very useful if a user is using the Indexer.  where\n  multiple tasks run in the same JVM.\n- More consistent terminology when it comes to \"sequences\" (sets of\n  segments that are handed-off together by Kafka ingestion) and\n  \"offsets\" (cursors in partitions). These terms had been confused in\n  some log messages due to the fact that Kinesis calls offsets\n  \"sequence numbers\".\n- Replaces some ugly toString calls with either the JSONification or\n  something more operator-accessible (like a URL or segment identifier. \n  instead of JSON object representing the same).\n\n* Adjustments.\n\n* Adjust integration test.\n","date":"2019-11-20 05:57:58","modifiedFileCount":"101","status":"M","submitter":"Gian Merlino"}]
