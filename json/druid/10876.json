[{"authorTime":"2020-06-27 14:30:59","codes":[{"authorDate":"2020-01-20 09:14:23","commitOrder":5,"curCode":"  public void testTopNOnPostAggMetricCaching()\n  {\n    final TopNQueryBuilder builder = new TopNQueryBuilder()\n        .dataSource(DATA_SOURCE)\n        .dimension(TOP_DIM)\n        .metric(\"avg_imps_per_row_double\")\n        .threshold(3)\n        .intervals(SEG_SPEC)\n        .filters(DIM_FILTER)\n        .granularity(GRANULARITY)\n        .aggregators(AGGS)\n        .postAggregators(POST_AGGS)\n        .context(CONTEXT);\n\n    QueryRunner runner = new FinalizeResultsQueryRunner(\n        getDefaultQueryRunner(),\n        new TopNQueryQueryToolChest(new TopNQueryConfig())\n    );\n\n    testQueryCaching(\n        runner,\n        builder.build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTopNResultsWithoutRename(),\n\n        Intervals.of(\"2011-01-02/2011-01-03\"),\n        makeTopNResultsWithoutRename(),\n\n        Intervals.of(\"2011-01-05/2011-01-10\"),\n        makeTopNResultsWithoutRename(\n            DateTimes.of(\"2011-01-05\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-06\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-08\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-09\"), \"c1\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n        ),\n\n        Intervals.of(\"2011-01-05/2011-01-10\"),\n        makeTopNResultsWithoutRename(\n            DateTimes.of(\"2011-01-05T01\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-06T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-08T01\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-09T01\"), \"c2\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n        )\n    );\n\n    TopNQuery query = builder\n        .intervals(\"2011-01-01/2011-01-10\")\n        .metric(\"avg_imps_per_row_double\")\n        .aggregators(AGGS)\n        .postAggregators(DIFF_ORDER_POST_AGGS)\n        .build();\n    TestHelper.assertExpectedResults(\n        makeTopNResultsWithoutRename(\n            DateTimes.of(\"2011-01-05\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-05T01\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-06\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-06T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-08\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-08T01\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-09\"), \"c1\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983,\n            DateTimes.of(\"2011-01-09T01\"), \"c2\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n        ),\n        runner.run(QueryPlus.wrap(query))\n    );\n  }\n","date":"2020-01-20 09:14:23","endLine":1058,"groupId":"10483","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNOnPostAggMetricCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bd/91104aac410fa6f1dfe514abacec299e649d2f.src","preCode":"  public void testTopNOnPostAggMetricCaching()\n  {\n    final TopNQueryBuilder builder = new TopNQueryBuilder()\n        .dataSource(DATA_SOURCE)\n        .dimension(TOP_DIM)\n        .metric(\"avg_imps_per_row_double\")\n        .threshold(3)\n        .intervals(SEG_SPEC)\n        .filters(DIM_FILTER)\n        .granularity(GRANULARITY)\n        .aggregators(AGGS)\n        .postAggregators(POST_AGGS)\n        .context(CONTEXT);\n\n    QueryRunner runner = new FinalizeResultsQueryRunner(\n        getDefaultQueryRunner(),\n        new TopNQueryQueryToolChest(new TopNQueryConfig())\n    );\n\n    testQueryCaching(\n        runner,\n        builder.build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTopNResultsWithoutRename(),\n\n        Intervals.of(\"2011-01-02/2011-01-03\"),\n        makeTopNResultsWithoutRename(),\n\n        Intervals.of(\"2011-01-05/2011-01-10\"),\n        makeTopNResultsWithoutRename(\n            DateTimes.of(\"2011-01-05\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-06\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-08\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-09\"), \"c1\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n        ),\n\n        Intervals.of(\"2011-01-05/2011-01-10\"),\n        makeTopNResultsWithoutRename(\n            DateTimes.of(\"2011-01-05T01\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-06T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-08T01\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-09T01\"), \"c2\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n        )\n    );\n\n    TopNQuery query = builder\n        .intervals(\"2011-01-01/2011-01-10\")\n        .metric(\"avg_imps_per_row_double\")\n        .aggregators(AGGS)\n        .postAggregators(DIFF_ORDER_POST_AGGS)\n        .build();\n    TestHelper.assertExpectedResults(\n        makeTopNResultsWithoutRename(\n            DateTimes.of(\"2011-01-05\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-05T01\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-06\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-06T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-08\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-08T01\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-09\"), \"c1\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983,\n            DateTimes.of(\"2011-01-09T01\"), \"c2\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n        ),\n        runner.run(QueryPlus.wrap(query))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/CachingClusteredClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":990,"status":"NB"},{"authorDate":"2020-06-27 14:30:59","commitOrder":5,"curCode":"  private static final Object[] OBJECTS = new Object[]{\n      DateTimes.of(\"2011-01-05\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n      DateTimes.of(\"2011-01-06\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n      DateTimes.of(\"2011-01-07\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n      DateTimes.of(\"2011-01-08\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n      DateTimes.of(\"2011-01-09\"), \"a\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n  };\n","date":"2020-06-27 14:30:59","endLine":72,"groupId":"10483","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"OBJECTS","params":"default","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a9/3d69e16bba72cc08a4723b9c25d506f3705931.src","preCode":"  private static final Object[] OBJECTS = new Object[]{\n      DateTimes.of(\"2011-01-05\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n      DateTimes.of(\"2011-01-06\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n      DateTimes.of(\"2011-01-07\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n      DateTimes.of(\"2011-01-08\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n      DateTimes.of(\"2011-01-09\"), \"a\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n  };\n","realPath":"server/src/test/java/org/apache/druid/client/cache/BackgroundCachePopulatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"a4c6d5f37e88a8152967ba68b150fcf4077092cf","commitMessage":"@@@fix query memory leak (#10027)\n\n* fix query memory leak\n\n* rollup ./idea\n\n* roll up .idea\n\n* clean code\n\n* optimize style\n\n* optimize cancel function\n\n* optimize style\n\n* add concurrentGroupTest test case\n\n* add test case\n\n* add unit test\n\n* fix code style\n\n* optimize cancell method use\n\n* format code\n\n* reback code\n\n* optimize cancelAll\n\n* clean code\n\n* add comment","date":"2020-06-27 14:30:59","modifiedFileCount":"8","status":"M","submitter":"chenyuzhi459"},{"authorTime":"2020-06-27 14:30:59","codes":[{"authorDate":"2020-07-02 05:02:21","commitOrder":6,"curCode":"  public void testTopNOnPostAggMetricCaching()\n  {\n    final TopNQueryBuilder builder = new TopNQueryBuilder()\n        .dataSource(DATA_SOURCE)\n        .dimension(TOP_DIM)\n        .metric(\"avg_imps_per_row_double\")\n        .threshold(3)\n        .intervals(SEG_SPEC)\n        .filters(DIM_FILTER)\n        .granularity(GRANULARITY)\n        .aggregators(AGGS)\n        .postAggregators(POST_AGGS)\n        .context(CONTEXT);\n\n    QueryRunner runner = new FinalizeResultsQueryRunner(\n        getDefaultQueryRunner(),\n        new TopNQueryQueryToolChest(new TopNQueryConfig())\n    );\n\n    testQueryCaching(\n        runner,\n        builder.randomQueryId().build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTopNResultsWithoutRename(),\n\n        Intervals.of(\"2011-01-02/2011-01-03\"),\n        makeTopNResultsWithoutRename(),\n\n        Intervals.of(\"2011-01-05/2011-01-10\"),\n        makeTopNResultsWithoutRename(\n            DateTimes.of(\"2011-01-05\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-06\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-08\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-09\"), \"c1\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n        ),\n\n        Intervals.of(\"2011-01-05/2011-01-10\"),\n        makeTopNResultsWithoutRename(\n            DateTimes.of(\"2011-01-05T01\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-06T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-08T01\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-09T01\"), \"c2\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n        )\n    );\n\n    TopNQuery query = builder\n        .intervals(\"2011-01-01/2011-01-10\")\n        .metric(\"avg_imps_per_row_double\")\n        .aggregators(AGGS)\n        .postAggregators(DIFF_ORDER_POST_AGGS)\n        .randomQueryId()\n        .build();\n    TestHelper.assertExpectedResults(\n        makeTopNResultsWithoutRename(\n            DateTimes.of(\"2011-01-05\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-05T01\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-06\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-06T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-08\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-08T01\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-09\"), \"c1\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983,\n            DateTimes.of(\"2011-01-09T01\"), \"c2\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n        ),\n        runner.run(QueryPlus.wrap(query))\n    );\n  }\n","date":"2020-07-02 05:02:21","endLine":1075,"groupId":"10876","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNOnPostAggMetricCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/45/2dd8cadd6b4c232ab41fc0990812d7c3f25a27.src","preCode":"  public void testTopNOnPostAggMetricCaching()\n  {\n    final TopNQueryBuilder builder = new TopNQueryBuilder()\n        .dataSource(DATA_SOURCE)\n        .dimension(TOP_DIM)\n        .metric(\"avg_imps_per_row_double\")\n        .threshold(3)\n        .intervals(SEG_SPEC)\n        .filters(DIM_FILTER)\n        .granularity(GRANULARITY)\n        .aggregators(AGGS)\n        .postAggregators(POST_AGGS)\n        .context(CONTEXT);\n\n    QueryRunner runner = new FinalizeResultsQueryRunner(\n        getDefaultQueryRunner(),\n        new TopNQueryQueryToolChest(new TopNQueryConfig())\n    );\n\n    testQueryCaching(\n        runner,\n        builder.build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTopNResultsWithoutRename(),\n\n        Intervals.of(\"2011-01-02/2011-01-03\"),\n        makeTopNResultsWithoutRename(),\n\n        Intervals.of(\"2011-01-05/2011-01-10\"),\n        makeTopNResultsWithoutRename(\n            DateTimes.of(\"2011-01-05\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-06\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-08\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-09\"), \"c1\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n        ),\n\n        Intervals.of(\"2011-01-05/2011-01-10\"),\n        makeTopNResultsWithoutRename(\n            DateTimes.of(\"2011-01-05T01\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-06T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-08T01\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-09T01\"), \"c2\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n        )\n    );\n\n    TopNQuery query = builder\n        .intervals(\"2011-01-01/2011-01-10\")\n        .metric(\"avg_imps_per_row_double\")\n        .aggregators(AGGS)\n        .postAggregators(DIFF_ORDER_POST_AGGS)\n        .build();\n    TestHelper.assertExpectedResults(\n        makeTopNResultsWithoutRename(\n            DateTimes.of(\"2011-01-05\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-05T01\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n            DateTimes.of(\"2011-01-06\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-06T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-07T01\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n            DateTimes.of(\"2011-01-08\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-08T01\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n            DateTimes.of(\"2011-01-09\"), \"c1\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983,\n            DateTimes.of(\"2011-01-09T01\"), \"c2\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n        ),\n        runner.run(QueryPlus.wrap(query))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/CachingClusteredClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1006,"status":"M"},{"authorDate":"2020-06-27 14:30:59","commitOrder":6,"curCode":"  private static final Object[] OBJECTS = new Object[]{\n      DateTimes.of(\"2011-01-05\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n      DateTimes.of(\"2011-01-06\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n      DateTimes.of(\"2011-01-07\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n      DateTimes.of(\"2011-01-08\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n      DateTimes.of(\"2011-01-09\"), \"a\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n  };\n","date":"2020-06-27 14:30:59","endLine":72,"groupId":"10876","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"OBJECTS","params":"default","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a9/3d69e16bba72cc08a4723b9c25d506f3705931.src","preCode":"  private static final Object[] OBJECTS = new Object[]{\n      DateTimes.of(\"2011-01-05\"), \"a\", 50, 4994, \"b\", 50, 4993, \"c\", 50, 4992,\n      DateTimes.of(\"2011-01-06\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n      DateTimes.of(\"2011-01-07\"), \"a\", 50, 4991, \"b\", 50, 4990, \"c\", 50, 4989,\n      DateTimes.of(\"2011-01-08\"), \"a\", 50, 4988, \"b\", 50, 4987, \"c\", 50, 4986,\n      DateTimes.of(\"2011-01-09\"), \"a\", 50, 4985, \"b\", 50, 4984, \"c\", 50, 4983\n  };\n","realPath":"server/src/test/java/org/apache/druid/client/cache/BackgroundCachePopulatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"657f8ee80fa86779cf26a01072814b1530277aa7","commitMessage":"@@@Fix RetryQueryRunner to actually do the job (#10082)\n\n* Fix RetryQueryRunner to actually do the job\n\n* more javadoc\n\n* fix test and checkstyle\n\n* don't combine for testing\n\n* address comments\n\n* fix unit tests\n\n* always initialize response context in cachingClusteredClient\n\n* fix subquery\n\n* address comments\n\n* fix test\n\n* query id for builders\n\n* make queryId optional in the builders and ClusterQueryResult\n\n* fix test\n\n* suppress tests and unused methods\n\n* exclude groupBy builder\n\n* fix jacoco exclusion\n\n* add tests for builders\n\n* address comments\n\n* don't truncate","date":"2020-07-02 05:02:21","modifiedFileCount":"33","status":"M","submitter":"Jihoon Son"}]
