[{"authorTime":"2019-01-29 21:05:17","codes":[{"authorDate":"2019-01-29 21:05:17","commitOrder":1,"curCode":"  public void testBufferAggregateFloatValues() throws IOException\n  {\n    TestFloatColumnSelector selector = new TestFloatColumnSelector(Arrays.asList(floatValues1));\n    FloatBloomFilterBufferAggregator agg = new FloatBloomFilterBufferAggregator(selector, maxNumValues);\n\n    int maxSize = valueAggregatorFactory.getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    agg.init(buf, pos);\n\n    IntStream.range(0, floatValues1.length)\n             .forEach(i -> bufferAggregateColumn(Collections.singletonList(selector), agg, buf, pos));\n    BloomKFilter bloomKFilter = (BloomKFilter) valueAggregatorFactory.finalizeComputation(agg.get(buf, pos));\n    String serialized = filterToString(bloomKFilter);\n    Assert.assertEquals(serializedFloatFilter, serialized);\n  }\n","date":"2019-01-29 21:05:17","endLine":359,"groupId":"7071","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBufferAggregateFloatValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/79/0cf8c5c01db4137d37ffa5acfc684c480d7308.src","preCode":"  public void testBufferAggregateFloatValues() throws IOException\n  {\n    TestFloatColumnSelector selector = new TestFloatColumnSelector(Arrays.asList(floatValues1));\n    FloatBloomFilterBufferAggregator agg = new FloatBloomFilterBufferAggregator(selector, maxNumValues);\n\n    int maxSize = valueAggregatorFactory.getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    agg.init(buf, pos);\n\n    IntStream.range(0, floatValues1.length)\n             .forEach(i -> bufferAggregateColumn(Collections.singletonList(selector), agg, buf, pos));\n    BloomKFilter bloomKFilter = (BloomKFilter) valueAggregatorFactory.finalizeComputation(agg.get(buf, pos));\n    String serialized = filterToString(bloomKFilter);\n    Assert.assertEquals(serializedFloatFilter, serialized);\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/test/java/org/apache/druid/query/aggregation/bloom/BloomFilterAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"B"},{"authorDate":"2019-01-29 21:05:17","commitOrder":1,"curCode":"  public void testBufferAggregateDoubleValues() throws IOException\n  {\n    TestDoubleColumnSelector selector = new TestDoubleColumnSelector(Arrays.asList(doubleValues1));\n    DoubleBloomFilterBufferAggregator agg = new DoubleBloomFilterBufferAggregator(selector, maxNumValues);\n\n    int maxSize = valueAggregatorFactory.getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    agg.init(buf, pos);\n\n    IntStream.range(0, doubleValues1.length)\n             .forEach(i -> bufferAggregateColumn(Collections.singletonList(selector), agg, buf, pos));\n    BloomKFilter bloomKFilter = (BloomKFilter) valueAggregatorFactory.finalizeComputation(agg.get(buf, pos));\n    String serialized = filterToString(bloomKFilter);\n    Assert.assertEquals(serializedDoubleFilter, serialized);\n  }\n","date":"2019-01-29 21:05:17","endLine":379,"groupId":"7071","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBufferAggregateDoubleValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/79/0cf8c5c01db4137d37ffa5acfc684c480d7308.src","preCode":"  public void testBufferAggregateDoubleValues() throws IOException\n  {\n    TestDoubleColumnSelector selector = new TestDoubleColumnSelector(Arrays.asList(doubleValues1));\n    DoubleBloomFilterBufferAggregator agg = new DoubleBloomFilterBufferAggregator(selector, maxNumValues);\n\n    int maxSize = valueAggregatorFactory.getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    agg.init(buf, pos);\n\n    IntStream.range(0, doubleValues1.length)\n             .forEach(i -> bufferAggregateColumn(Collections.singletonList(selector), agg, buf, pos));\n    BloomKFilter bloomKFilter = (BloomKFilter) valueAggregatorFactory.finalizeComputation(agg.get(buf, pos));\n    String serialized = filterToString(bloomKFilter);\n    Assert.assertEquals(serializedDoubleFilter, serialized);\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/test/java/org/apache/druid/query/aggregation/bloom/BloomFilterAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"B"}],"commitId":"a6d81c0d1654b28d15d922dbe0d128489978fc89","commitMessage":"@@@Adds bloom filter aggregator to 'druid-bloom-filters' extension (#6397)\n\n* blooming aggs\n\n* partially address review\n\n* fix docs\n\n* minor test refactor after rebase\n\n* use copied bloomkfilter\n\n* add ByteBuffer methods to BloomKFilter to allow agg to use in place.  simplify some things.  more tests\n\n* add methods to BloomKFilter to get number of set bits.  use in comparator.  fixes\n\n* more docs\n\n* fix\n\n* fix style\n\n* simplify bloomfilter bytebuffer merge.  change methods to allow passing buffer offsets\n\n* oof.  more fixes\n\n* more sane docs example\n\n* fix it\n\n* do the right thing in the right place\n\n* formatting\n\n* fix\n\n* avoid conflict\n\n* typo fixes.  faster comparator.  docs for comparator behavior\n\n* unused imports\n\n* use buffer comparator instead of deserializing\n\n* striped readwrite lock for buffer agg.  null handling comparator.  other review changes\n\n* style fixes\n\n* style\n\n* remove sync for now\n\n* oops\n\n* consistency\n\n* inspect runtime shape of selector instead of selector plus.  static comparator.  add inner exception on serde exception\n\n* CardinalityBufferAggregator inspect selectors instead of selectorPluses\n\n* fix style\n\n* refactor away from using ColumnSelectorPlus and ColumnSelectorStrategyFactory to instead use specialized aggregators for each supported column type.  other review comments\n\n* adjustment\n\n* fix teamcity error?\n\n* rename nil aggs to empty.  change empty agg constructor signature.  add comments\n\n* use stringutils base64 stuff to be chill with master\n\n* add aggregate combiner.  comment\n","date":"2019-01-29 21:05:17","modifiedFileCount":"6","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-04-19 02:54:06","codes":[{"authorDate":"2019-04-19 02:54:06","commitOrder":2,"curCode":"  public void testBufferAggregateFloatValues() throws IOException\n  {\n    TestFloatColumnSelector selector = new TestFloatColumnSelector(Arrays.asList(floatValues1));\n    FloatBloomFilterAggregator agg = new FloatBloomFilterAggregator(selector, maxNumValues, true);\n\n    int maxSize = valueAggregatorFactory.getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    agg.init(buf, pos);\n\n    IntStream.range(0, floatValues1.length)\n             .forEach(i -> bufferAggregateColumn(Collections.singletonList(selector), agg, buf, pos));\n    BloomKFilter bloomKFilter = BloomKFilter.deserialize(\n        (ByteBuffer) valueAggregatorFactory.finalizeComputation(agg.get(buf, pos))\n    );\n    String serialized = filterToString(bloomKFilter);\n    Assert.assertEquals(serializedFloatFilter, serialized);\n  }\n","date":"2019-04-19 02:54:06","endLine":373,"groupId":"1786","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBufferAggregateFloatValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/da/4479beca9af64c92dafdb9d9b22c0509d42f2b.src","preCode":"  public void testBufferAggregateFloatValues() throws IOException\n  {\n    TestFloatColumnSelector selector = new TestFloatColumnSelector(Arrays.asList(floatValues1));\n    FloatBloomFilterBufferAggregator agg = new FloatBloomFilterBufferAggregator(selector, maxNumValues);\n\n    int maxSize = valueAggregatorFactory.getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    agg.init(buf, pos);\n\n    IntStream.range(0, floatValues1.length)\n             .forEach(i -> bufferAggregateColumn(Collections.singletonList(selector), agg, buf, pos));\n    BloomKFilter bloomKFilter = (BloomKFilter) valueAggregatorFactory.finalizeComputation(agg.get(buf, pos));\n    String serialized = filterToString(bloomKFilter);\n    Assert.assertEquals(serializedFloatFilter, serialized);\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/test/java/org/apache/druid/query/aggregation/bloom/BloomFilterAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"},{"authorDate":"2019-04-19 02:54:06","commitOrder":2,"curCode":"  public void testBufferAggregateDoubleValues() throws IOException\n  {\n    TestDoubleColumnSelector selector = new TestDoubleColumnSelector(Arrays.asList(doubleValues1));\n    DoubleBloomFilterAggregator agg = new DoubleBloomFilterAggregator(selector, maxNumValues, true);\n\n    int maxSize = valueAggregatorFactory.getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    agg.init(buf, pos);\n\n    IntStream.range(0, doubleValues1.length)\n             .forEach(i -> bufferAggregateColumn(Collections.singletonList(selector), agg, buf, pos));\n    BloomKFilter bloomKFilter = BloomKFilter.deserialize(\n        (ByteBuffer) valueAggregatorFactory.finalizeComputation(agg.get(buf, pos))\n    );\n    String serialized = filterToString(bloomKFilter);\n    Assert.assertEquals(serializedDoubleFilter, serialized);\n  }\n","date":"2019-04-19 02:54:06","endLine":395,"groupId":"1786","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBufferAggregateDoubleValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/da/4479beca9af64c92dafdb9d9b22c0509d42f2b.src","preCode":"  public void testBufferAggregateDoubleValues() throws IOException\n  {\n    TestDoubleColumnSelector selector = new TestDoubleColumnSelector(Arrays.asList(doubleValues1));\n    DoubleBloomFilterBufferAggregator agg = new DoubleBloomFilterBufferAggregator(selector, maxNumValues);\n\n    int maxSize = valueAggregatorFactory.getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    agg.init(buf, pos);\n\n    IntStream.range(0, doubleValues1.length)\n             .forEach(i -> bufferAggregateColumn(Collections.singletonList(selector), agg, buf, pos));\n    BloomKFilter bloomKFilter = (BloomKFilter) valueAggregatorFactory.finalizeComputation(agg.get(buf, pos));\n    String serialized = filterToString(bloomKFilter);\n    Assert.assertEquals(serializedDoubleFilter, serialized);\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/test/java/org/apache/druid/query/aggregation/bloom/BloomFilterAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"}],"commitId":"be65cca248d7b3dd5ebacc2a537aa3d25d420475","commitMessage":"@@@refactor druid-bloom-filter aggregators (#7496)\n\n* now with 100% more buffer\n\n* there can be only 1\n\n* simplify\n\n* javadoc\n\n* clean up unused test method\n\n* fix exception message\n\n* style\n\n* why does style hate javadocs\n\n* review stuff\n\n* style :(\n","date":"2019-04-19 02:54:06","modifiedFileCount":"13","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testBufferAggregateFloatValues() throws IOException\n  {\n    TestFloatColumnSelector selector = new TestFloatColumnSelector(Arrays.asList(FLOAT_VALUES1));\n    FloatBloomFilterAggregator agg = new FloatBloomFilterAggregator(selector, MAX_NUM_VALUES, true);\n\n    int maxSize = valueAggregatorFactory.getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    agg.init(buf, pos);\n\n    IntStream.range(0, FLOAT_VALUES1.length)\n             .forEach(i -> bufferAggregateColumn(Collections.singletonList(selector), agg, buf, pos));\n    BloomKFilter bloomKFilter = BloomKFilter.deserialize(\n        (ByteBuffer) valueAggregatorFactory.finalizeComputation(agg.get(buf, pos))\n    );\n    String serialized = filterToString(bloomKFilter);\n    Assert.assertEquals(serializedFloatFilter, serialized);\n  }\n","date":"2019-08-23 18:13:54","endLine":373,"groupId":"103270","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBufferAggregateFloatValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/edc8441660bce5e4b3f3c22363012472302fdd.src","preCode":"  public void testBufferAggregateFloatValues() throws IOException\n  {\n    TestFloatColumnSelector selector = new TestFloatColumnSelector(Arrays.asList(floatValues1));\n    FloatBloomFilterAggregator agg = new FloatBloomFilterAggregator(selector, maxNumValues, true);\n\n    int maxSize = valueAggregatorFactory.getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    agg.init(buf, pos);\n\n    IntStream.range(0, floatValues1.length)\n             .forEach(i -> bufferAggregateColumn(Collections.singletonList(selector), agg, buf, pos));\n    BloomKFilter bloomKFilter = BloomKFilter.deserialize(\n        (ByteBuffer) valueAggregatorFactory.finalizeComputation(agg.get(buf, pos))\n    );\n    String serialized = filterToString(bloomKFilter);\n    Assert.assertEquals(serializedFloatFilter, serialized);\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/test/java/org/apache/druid/query/aggregation/bloom/BloomFilterAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testBufferAggregateDoubleValues() throws IOException\n  {\n    TestDoubleColumnSelector selector = new TestDoubleColumnSelector(Arrays.asList(DOUBLE_VALUES1));\n    DoubleBloomFilterAggregator agg = new DoubleBloomFilterAggregator(selector, MAX_NUM_VALUES, true);\n\n    int maxSize = valueAggregatorFactory.getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    agg.init(buf, pos);\n\n    IntStream.range(0, DOUBLE_VALUES1.length)\n             .forEach(i -> bufferAggregateColumn(Collections.singletonList(selector), agg, buf, pos));\n    BloomKFilter bloomKFilter = BloomKFilter.deserialize(\n        (ByteBuffer) valueAggregatorFactory.finalizeComputation(agg.get(buf, pos))\n    );\n    String serialized = filterToString(bloomKFilter);\n    Assert.assertEquals(serializedDoubleFilter, serialized);\n  }\n","date":"2019-08-23 18:13:54","endLine":395,"groupId":"103270","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBufferAggregateDoubleValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/edc8441660bce5e4b3f3c22363012472302fdd.src","preCode":"  public void testBufferAggregateDoubleValues() throws IOException\n  {\n    TestDoubleColumnSelector selector = new TestDoubleColumnSelector(Arrays.asList(doubleValues1));\n    DoubleBloomFilterAggregator agg = new DoubleBloomFilterAggregator(selector, maxNumValues, true);\n\n    int maxSize = valueAggregatorFactory.getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    agg.init(buf, pos);\n\n    IntStream.range(0, doubleValues1.length)\n             .forEach(i -> bufferAggregateColumn(Collections.singletonList(selector), agg, buf, pos));\n    BloomKFilter bloomKFilter = BloomKFilter.deserialize(\n        (ByteBuffer) valueAggregatorFactory.finalizeComputation(agg.get(buf, pos))\n    );\n    String serialized = filterToString(bloomKFilter);\n    Assert.assertEquals(serializedDoubleFilter, serialized);\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/test/java/org/apache/druid/query/aggregation/bloom/BloomFilterAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
