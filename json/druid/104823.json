[{"authorTime":"2019-11-16 01:22:09","codes":[{"authorDate":"2019-11-16 01:22:09","commitOrder":1,"curCode":"  public void testSerde() throws IOException\n  {\n    final ObjectMapper mapper = new ObjectMapper();\n    final CsvInputFormat format = new CsvInputFormat(Collections.singletonList(\"a\"), \"|\", true, 10);\n    final byte[] bytes = mapper.writeValueAsBytes(format);\n    final CsvInputFormat fromJson = (CsvInputFormat) mapper.readValue(bytes, InputFormat.class);\n    Assert.assertEquals(format, fromJson);\n  }\n","date":"2019-11-16 01:22:09","endLine":45,"groupId":"14108","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerde","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8d/2d688e9868b61a4801d896a452b91e9cbb5834.src","preCode":"  public void testSerde() throws IOException\n  {\n    final ObjectMapper mapper = new ObjectMapper();\n    final CsvInputFormat format = new CsvInputFormat(Collections.singletonList(\"a\"), \"|\", true, 10);\n    final byte[] bytes = mapper.writeValueAsBytes(format);\n    final CsvInputFormat fromJson = (CsvInputFormat) mapper.readValue(bytes, InputFormat.class);\n    Assert.assertEquals(format, fromJson);\n  }\n","realPath":"core/src/test/java/org/apache/druid/data/input/impl/CsvInputFormatTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"},{"authorDate":"2019-11-16 01:22:09","commitOrder":1,"curCode":"  public void testSerde() throws IOException\n  {\n    final ObjectMapper mapper = new ObjectMapper();\n    final JsonInputFormat format = new JsonInputFormat(\n        new JSONPathSpec(\n            false,\n            ImmutableList.of(\n                new JSONPathFieldSpec(JSONPathFieldType.ROOT, \"root_baz\", \"baz\"),\n                new JSONPathFieldSpec(JSONPathFieldType.ROOT, \"root_baz2\", \"baz2\"),\n                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg\", \"$.o.mg\"),\n                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg2\", \"$.o.mg2\"),\n                new JSONPathFieldSpec(JSONPathFieldType.JQ, \"jq_omg\", \".o.mg\"),\n                new JSONPathFieldSpec(JSONPathFieldType.JQ, \"jq_omg2\", \".o.mg2\")\n            )\n        ),\n        ImmutableMap.of(Feature.ALLOW_COMMENTS.name(), true, Feature.ALLOW_UNQUOTED_FIELD_NAMES.name(), false)\n    );\n    final byte[] bytes = mapper.writeValueAsBytes(format);\n    final JsonInputFormat fromJson = (JsonInputFormat) mapper.readValue(bytes, InputFormat.class);\n    Assert.assertEquals(format, fromJson);\n  }\n","date":"2019-11-16 01:22:09","endLine":58,"groupId":"14108","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerde","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/55/30b946864d0d245c52f848966087a447b3afe7.src","preCode":"  public void testSerde() throws IOException\n  {\n    final ObjectMapper mapper = new ObjectMapper();\n    final JsonInputFormat format = new JsonInputFormat(\n        new JSONPathSpec(\n            false,\n            ImmutableList.of(\n                new JSONPathFieldSpec(JSONPathFieldType.ROOT, \"root_baz\", \"baz\"),\n                new JSONPathFieldSpec(JSONPathFieldType.ROOT, \"root_baz2\", \"baz2\"),\n                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg\", \"$.o.mg\"),\n                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg2\", \"$.o.mg2\"),\n                new JSONPathFieldSpec(JSONPathFieldType.JQ, \"jq_omg\", \".o.mg\"),\n                new JSONPathFieldSpec(JSONPathFieldType.JQ, \"jq_omg2\", \".o.mg2\")\n            )\n        ),\n        ImmutableMap.of(Feature.ALLOW_COMMENTS.name(), true, Feature.ALLOW_UNQUOTED_FIELD_NAMES.name(), false)\n    );\n    final byte[] bytes = mapper.writeValueAsBytes(format);\n    final JsonInputFormat fromJson = (JsonInputFormat) mapper.readValue(bytes, InputFormat.class);\n    Assert.assertEquals(format, fromJson);\n  }\n","realPath":"core/src/test/java/org/apache/druid/data/input/impl/JsonInputFormatTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"}],"commitId":"1611792855ad9def8b6f5b1375862d05d1acca0a","commitMessage":"@@@Add InputSource and InputFormat interfaces (#8823)\n\n* Add InputSource and InputFormat interfaces\n\n* revert orc dependency\n\n* fix dimension exclusions and failing unit tests\n\n* fix tests\n\n* fix test\n\n* fix test\n\n* fix firehose and inputSource for parallel indexing task\n\n* fix tc\n\n* fix tc: remove unused method\n\n* Formattable\n\n* add needsFormat(); renamed to ObjectSource; pass metricsName for reader\n\n* address comments\n\n* fix closing resource\n\n* fix checkstyle\n\n* fix tests\n\n* remove verify from csv\n\n* Revert \"remove verify from csv\"\n\nThis reverts commit 1ea7758489cc8c9d708bd691fd48e62085fd9455.\n\n* address comments\n\n* fix import order and javadoc\n\n* flatMap\n\n* sampleLine\n\n* Add IntermediateRowParsingReader\n\n* Address comments\n\n* move csv reader test\n\n* remove test for verify\n\n* adjust comments\n\n* Fix InputEntityIteratingReader\n\n* rename source -> entity\n\n* address comments\n","date":"2019-11-16 01:22:09","modifiedFileCount":"72","status":"B","submitter":"Jihoon Son"},{"authorTime":"2019-11-16 01:22:09","codes":[{"authorDate":"2019-11-23 10:01:40","commitOrder":2,"curCode":"  public void testSerde() throws IOException\n  {\n    final ObjectMapper mapper = new ObjectMapper();\n    final CsvInputFormat format = new CsvInputFormat(Collections.singletonList(\"a\"), \"|\", null, true, 10);\n    final byte[] bytes = mapper.writeValueAsBytes(format);\n    final CsvInputFormat fromJson = (CsvInputFormat) mapper.readValue(bytes, InputFormat.class);\n    Assert.assertEquals(format, fromJson);\n  }\n","date":"2019-11-23 10:01:40","endLine":45,"groupId":"23490","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerde","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b0/9ba86f09e97f28e8dcb30c16c04e6e5aac4204.src","preCode":"  public void testSerde() throws IOException\n  {\n    final ObjectMapper mapper = new ObjectMapper();\n    final CsvInputFormat format = new CsvInputFormat(Collections.singletonList(\"a\"), \"|\", true, 10);\n    final byte[] bytes = mapper.writeValueAsBytes(format);\n    final CsvInputFormat fromJson = (CsvInputFormat) mapper.readValue(bytes, InputFormat.class);\n    Assert.assertEquals(format, fromJson);\n  }\n","realPath":"core/src/test/java/org/apache/druid/data/input/impl/CsvInputFormatTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2019-11-16 01:22:09","commitOrder":2,"curCode":"  public void testSerde() throws IOException\n  {\n    final ObjectMapper mapper = new ObjectMapper();\n    final JsonInputFormat format = new JsonInputFormat(\n        new JSONPathSpec(\n            false,\n            ImmutableList.of(\n                new JSONPathFieldSpec(JSONPathFieldType.ROOT, \"root_baz\", \"baz\"),\n                new JSONPathFieldSpec(JSONPathFieldType.ROOT, \"root_baz2\", \"baz2\"),\n                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg\", \"$.o.mg\"),\n                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg2\", \"$.o.mg2\"),\n                new JSONPathFieldSpec(JSONPathFieldType.JQ, \"jq_omg\", \".o.mg\"),\n                new JSONPathFieldSpec(JSONPathFieldType.JQ, \"jq_omg2\", \".o.mg2\")\n            )\n        ),\n        ImmutableMap.of(Feature.ALLOW_COMMENTS.name(), true, Feature.ALLOW_UNQUOTED_FIELD_NAMES.name(), false)\n    );\n    final byte[] bytes = mapper.writeValueAsBytes(format);\n    final JsonInputFormat fromJson = (JsonInputFormat) mapper.readValue(bytes, InputFormat.class);\n    Assert.assertEquals(format, fromJson);\n  }\n","date":"2019-11-16 01:22:09","endLine":58,"groupId":"14108","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerde","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/55/30b946864d0d245c52f848966087a447b3afe7.src","preCode":"  public void testSerde() throws IOException\n  {\n    final ObjectMapper mapper = new ObjectMapper();\n    final JsonInputFormat format = new JsonInputFormat(\n        new JSONPathSpec(\n            false,\n            ImmutableList.of(\n                new JSONPathFieldSpec(JSONPathFieldType.ROOT, \"root_baz\", \"baz\"),\n                new JSONPathFieldSpec(JSONPathFieldType.ROOT, \"root_baz2\", \"baz2\"),\n                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg\", \"$.o.mg\"),\n                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg2\", \"$.o.mg2\"),\n                new JSONPathFieldSpec(JSONPathFieldType.JQ, \"jq_omg\", \".o.mg\"),\n                new JSONPathFieldSpec(JSONPathFieldType.JQ, \"jq_omg2\", \".o.mg2\")\n            )\n        ),\n        ImmutableMap.of(Feature.ALLOW_COMMENTS.name(), true, Feature.ALLOW_UNQUOTED_FIELD_NAMES.name(), false)\n    );\n    final byte[] bytes = mapper.writeValueAsBytes(format);\n    final JsonInputFormat fromJson = (JsonInputFormat) mapper.readValue(bytes, InputFormat.class);\n    Assert.assertEquals(format, fromJson);\n  }\n","realPath":"core/src/test/java/org/apache/druid/data/input/impl/JsonInputFormatTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"}],"commitId":"0514e5686e58e384a1b7b05ec0a89612040e65e5","commitMessage":"@@@add TsvInputFormat (#8915)\n\n* add TsvInputFormat\n\n* refactor code\n\n* fix grammar\n\n* use enum replace string literal\n\n* code refactor\n\n* code refactor\n\n* mark abstract for base class meant not to be instantiated\n\n* remove constructor for test\n","date":"2019-11-23 10:01:40","modifiedFileCount":"13","status":"M","submitter":"Rye"},{"authorTime":"2020-05-09 12:53:39","codes":[{"authorDate":"2019-11-23 10:01:40","commitOrder":3,"curCode":"  public void testSerde() throws IOException\n  {\n    final ObjectMapper mapper = new ObjectMapper();\n    final CsvInputFormat format = new CsvInputFormat(Collections.singletonList(\"a\"), \"|\", null, true, 10);\n    final byte[] bytes = mapper.writeValueAsBytes(format);\n    final CsvInputFormat fromJson = (CsvInputFormat) mapper.readValue(bytes, InputFormat.class);\n    Assert.assertEquals(format, fromJson);\n  }\n","date":"2019-11-23 10:01:40","endLine":45,"groupId":"104823","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerde","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b0/9ba86f09e97f28e8dcb30c16c04e6e5aac4204.src","preCode":"  public void testSerde() throws IOException\n  {\n    final ObjectMapper mapper = new ObjectMapper();\n    final CsvInputFormat format = new CsvInputFormat(Collections.singletonList(\"a\"), \"|\", null, true, 10);\n    final byte[] bytes = mapper.writeValueAsBytes(format);\n    final CsvInputFormat fromJson = (CsvInputFormat) mapper.readValue(bytes, InputFormat.class);\n    Assert.assertEquals(format, fromJson);\n  }\n","realPath":"core/src/test/java/org/apache/druid/data/input/impl/CsvInputFormatTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2020-05-09 12:53:39","commitOrder":3,"curCode":"  public void testSerde() throws IOException\n  {\n    final ObjectMapper mapper = new ObjectMapper();\n    final JsonInputFormat format = new JsonInputFormat(\n        new JSONPathSpec(\n            false,\n            ImmutableList.of(\n                new JSONPathFieldSpec(JSONPathFieldType.ROOT, \"root_baz\", \"baz\"),\n                new JSONPathFieldSpec(JSONPathFieldType.ROOT, \"root_baz2\", \"baz2\"),\n                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg\", \"$.o.mg\"),\n                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg2\", \"$.o.mg2\"),\n                new JSONPathFieldSpec(JSONPathFieldType.JQ, \"jq_omg\", \".o.mg\"),\n                new JSONPathFieldSpec(JSONPathFieldType.JQ, \"jq_omg2\", \".o.mg2\")\n            )\n        ),\n        ImmutableMap.of(Feature.ALLOW_COMMENTS.name(), true, Feature.ALLOW_UNQUOTED_FIELD_NAMES.name(), false),\n        false\n    );\n    final byte[] bytes = mapper.writeValueAsBytes(format);\n    final JsonInputFormat fromJson = (JsonInputFormat) mapper.readValue(bytes, InputFormat.class);\n    Assert.assertEquals(format, fromJson);\n  }\n","date":"2020-05-09 12:53:39","endLine":60,"groupId":"104823","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testSerde","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/aa/9c95a7e46a001e4f3e855a2599f47ae6e3c585.src","preCode":"  public void testSerde() throws IOException\n  {\n    final ObjectMapper mapper = new ObjectMapper();\n    final JsonInputFormat format = new JsonInputFormat(\n        new JSONPathSpec(\n            false,\n            ImmutableList.of(\n                new JSONPathFieldSpec(JSONPathFieldType.ROOT, \"root_baz\", \"baz\"),\n                new JSONPathFieldSpec(JSONPathFieldType.ROOT, \"root_baz2\", \"baz2\"),\n                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg\", \"$.o.mg\"),\n                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg2\", \"$.o.mg2\"),\n                new JSONPathFieldSpec(JSONPathFieldType.JQ, \"jq_omg\", \".o.mg\"),\n                new JSONPathFieldSpec(JSONPathFieldType.JQ, \"jq_omg2\", \".o.mg2\")\n            )\n        ),\n        ImmutableMap.of(Feature.ALLOW_COMMENTS.name(), true, Feature.ALLOW_UNQUOTED_FIELD_NAMES.name(), false)\n    );\n    final byte[] bytes = mapper.writeValueAsBytes(format);\n    final JsonInputFormat fromJson = (JsonInputFormat) mapper.readValue(bytes, InputFormat.class);\n    Assert.assertEquals(format, fromJson);\n  }\n","realPath":"core/src/test/java/org/apache/druid/data/input/impl/JsonInputFormatTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"28be107a1c18ef1fd9fd268c8b04e232efb63695","commitMessage":"@@@add flag to flattenSpec to keep null columns (#9814)\n\n* add flag to flattenSpec to keep null columns\n\n* remove changes to inputFormat interface\n\n* add comment\n\n* change comment message\n\n* update web console e2e test\n\n* move keepNullColmns to JSONParseSpec\n\n* fix merge conflicts\n\n* fix tests\n\n* set keepNullColumns to false by default\n\n* fix lgtm\n\n* change Boolean to boolean.  add keepNullColumns to hash.  add tests for keepKeepNullColumns false + true with no nuulul columns\n\n* Add equals verifier tests","date":"2020-05-09 12:53:39","modifiedFileCount":"41","status":"M","submitter":"mcbrewster"}]
