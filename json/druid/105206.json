[{"authorTime":"2020-06-30 08:31:37","codes":[{"authorDate":"2020-06-30 08:31:37","commitOrder":1,"curCode":"  public void testPartitionChunks()\n  {\n    final List<ShardSpec> specs = ImmutableList.of(\n        new NumberedShardSpec(0, 3),\n        new NumberedShardSpec(1, 3),\n        new NumberedShardSpec(2, 3)\n    );\n\n    final List<PartitionChunk<String>> chunks = Lists.transform(\n        specs,\n        new Function<ShardSpec, PartitionChunk<String>>()\n        {\n          @Override\n          public PartitionChunk<String> apply(ShardSpec shardSpec)\n          {\n            return shardSpec.createChunk(\"rofl\");\n          }\n        }\n    );\n\n    Assert.assertEquals(0, chunks.get(0).getChunkNumber());\n    Assert.assertEquals(1, chunks.get(1).getChunkNumber());\n    Assert.assertEquals(2, chunks.get(2).getChunkNumber());\n\n    Assert.assertTrue(chunks.get(0).isStart());\n    Assert.assertFalse(chunks.get(1).isStart());\n    Assert.assertFalse(chunks.get(2).isStart());\n\n    Assert.assertFalse(chunks.get(0).isEnd());\n    Assert.assertFalse(chunks.get(1).isEnd());\n    Assert.assertTrue(chunks.get(2).isEnd());\n\n    Assert.assertTrue(chunks.get(0).abuts(chunks.get(1)));\n    Assert.assertTrue(chunks.get(1).abuts(chunks.get(2)));\n\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(2)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(2)));\n  }\n","date":"2020-06-30 08:31:37","endLine":118,"groupId":"22152","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPartitionChunks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8b/8d5da1b2c212d15b0fc75bcb6652e9a09b8ad4.src","preCode":"  public void testPartitionChunks()\n  {\n    final List<ShardSpec> specs = ImmutableList.of(\n        new NumberedShardSpec(0, 3),\n        new NumberedShardSpec(1, 3),\n        new NumberedShardSpec(2, 3)\n    );\n\n    final List<PartitionChunk<String>> chunks = Lists.transform(\n        specs,\n        new Function<ShardSpec, PartitionChunk<String>>()\n        {\n          @Override\n          public PartitionChunk<String> apply(ShardSpec shardSpec)\n          {\n            return shardSpec.createChunk(\"rofl\");\n          }\n        }\n    );\n\n    Assert.assertEquals(0, chunks.get(0).getChunkNumber());\n    Assert.assertEquals(1, chunks.get(1).getChunkNumber());\n    Assert.assertEquals(2, chunks.get(2).getChunkNumber());\n\n    Assert.assertTrue(chunks.get(0).isStart());\n    Assert.assertFalse(chunks.get(1).isStart());\n    Assert.assertFalse(chunks.get(2).isStart());\n\n    Assert.assertFalse(chunks.get(0).isEnd());\n    Assert.assertFalse(chunks.get(1).isEnd());\n    Assert.assertTrue(chunks.get(2).isEnd());\n\n    Assert.assertTrue(chunks.get(0).abuts(chunks.get(1)));\n    Assert.assertTrue(chunks.get(1).abuts(chunks.get(2)));\n\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(2)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(2)));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/partition/NumberedShardSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2020-06-30 08:31:37","commitOrder":1,"curCode":"  public void testPartitionChunks()\n  {\n    final List<ShardSpec> specs = ImmutableList.of(\n        new HashBasedNumberedShardSpec(0, 3, 0, 3, null, objectMapper),\n        new HashBasedNumberedShardSpec(1, 3, 1, 3, null, objectMapper),\n        new HashBasedNumberedShardSpec(2, 3, 2, 3, null, objectMapper)\n    );\n\n    final List<PartitionChunk<String>> chunks = Lists.transform(\n        specs,\n        new Function<ShardSpec, PartitionChunk<String>>()\n        {\n          @Override\n          public PartitionChunk<String> apply(ShardSpec shardSpec)\n          {\n            return shardSpec.createChunk(\"rofl\");\n          }\n        }\n    );\n\n    Assert.assertEquals(0, chunks.get(0).getChunkNumber());\n    Assert.assertEquals(1, chunks.get(1).getChunkNumber());\n    Assert.assertEquals(2, chunks.get(2).getChunkNumber());\n\n    Assert.assertTrue(chunks.get(0).isStart());\n    Assert.assertFalse(chunks.get(1).isStart());\n    Assert.assertFalse(chunks.get(2).isStart());\n\n    Assert.assertFalse(chunks.get(0).isEnd());\n    Assert.assertFalse(chunks.get(1).isEnd());\n    Assert.assertTrue(chunks.get(2).isEnd());\n\n    Assert.assertTrue(chunks.get(0).abuts(chunks.get(1)));\n    Assert.assertTrue(chunks.get(1).abuts(chunks.get(2)));\n\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(2)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(2)));\n  }\n","date":"2020-06-30 08:31:37","endLine":146,"groupId":"22152","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPartitionChunks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/62/4f3d34f169fbbe606f7aea9f67f4878f0ca7c8.src","preCode":"  public void testPartitionChunks()\n  {\n    final List<ShardSpec> specs = ImmutableList.of(\n        new HashBasedNumberedShardSpec(0, 3, 0, 3, null, objectMapper),\n        new HashBasedNumberedShardSpec(1, 3, 1, 3, null, objectMapper),\n        new HashBasedNumberedShardSpec(2, 3, 2, 3, null, objectMapper)\n    );\n\n    final List<PartitionChunk<String>> chunks = Lists.transform(\n        specs,\n        new Function<ShardSpec, PartitionChunk<String>>()\n        {\n          @Override\n          public PartitionChunk<String> apply(ShardSpec shardSpec)\n          {\n            return shardSpec.createChunk(\"rofl\");\n          }\n        }\n    );\n\n    Assert.assertEquals(0, chunks.get(0).getChunkNumber());\n    Assert.assertEquals(1, chunks.get(1).getChunkNumber());\n    Assert.assertEquals(2, chunks.get(2).getChunkNumber());\n\n    Assert.assertTrue(chunks.get(0).isStart());\n    Assert.assertFalse(chunks.get(1).isStart());\n    Assert.assertFalse(chunks.get(2).isStart());\n\n    Assert.assertFalse(chunks.get(0).isEnd());\n    Assert.assertFalse(chunks.get(1).isEnd());\n    Assert.assertTrue(chunks.get(2).isEnd());\n\n    Assert.assertTrue(chunks.get(0).abuts(chunks.get(1)));\n    Assert.assertTrue(chunks.get(1).abuts(chunks.get(2)));\n\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(2)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(2)));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/partition/HashBasedNumberedShardSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"}],"commitId":"8ef3598c0555068f4b0a5a86811a157778ece2a1","commitMessage":"@@@Move shardSpec tests to core (#10079)\n\n* Move shardSpec tests to core\n\n* checkstyle\n\n* inject object mapper for testing\n\n* unused import","date":"2020-06-30 08:31:37","modifiedFileCount":"1","status":"B","submitter":"Jihoon Son"},{"authorTime":"2020-09-25 07:32:56","codes":[{"authorDate":"2020-06-30 08:31:37","commitOrder":2,"curCode":"  public void testPartitionChunks()\n  {\n    final List<ShardSpec> specs = ImmutableList.of(\n        new NumberedShardSpec(0, 3),\n        new NumberedShardSpec(1, 3),\n        new NumberedShardSpec(2, 3)\n    );\n\n    final List<PartitionChunk<String>> chunks = Lists.transform(\n        specs,\n        new Function<ShardSpec, PartitionChunk<String>>()\n        {\n          @Override\n          public PartitionChunk<String> apply(ShardSpec shardSpec)\n          {\n            return shardSpec.createChunk(\"rofl\");\n          }\n        }\n    );\n\n    Assert.assertEquals(0, chunks.get(0).getChunkNumber());\n    Assert.assertEquals(1, chunks.get(1).getChunkNumber());\n    Assert.assertEquals(2, chunks.get(2).getChunkNumber());\n\n    Assert.assertTrue(chunks.get(0).isStart());\n    Assert.assertFalse(chunks.get(1).isStart());\n    Assert.assertFalse(chunks.get(2).isStart());\n\n    Assert.assertFalse(chunks.get(0).isEnd());\n    Assert.assertFalse(chunks.get(1).isEnd());\n    Assert.assertTrue(chunks.get(2).isEnd());\n\n    Assert.assertTrue(chunks.get(0).abuts(chunks.get(1)));\n    Assert.assertTrue(chunks.get(1).abuts(chunks.get(2)));\n\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(2)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(2)));\n  }\n","date":"2020-06-30 08:31:37","endLine":118,"groupId":"105206","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPartitionChunks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8b/8d5da1b2c212d15b0fc75bcb6652e9a09b8ad4.src","preCode":"  public void testPartitionChunks()\n  {\n    final List<ShardSpec> specs = ImmutableList.of(\n        new NumberedShardSpec(0, 3),\n        new NumberedShardSpec(1, 3),\n        new NumberedShardSpec(2, 3)\n    );\n\n    final List<PartitionChunk<String>> chunks = Lists.transform(\n        specs,\n        new Function<ShardSpec, PartitionChunk<String>>()\n        {\n          @Override\n          public PartitionChunk<String> apply(ShardSpec shardSpec)\n          {\n            return shardSpec.createChunk(\"rofl\");\n          }\n        }\n    );\n\n    Assert.assertEquals(0, chunks.get(0).getChunkNumber());\n    Assert.assertEquals(1, chunks.get(1).getChunkNumber());\n    Assert.assertEquals(2, chunks.get(2).getChunkNumber());\n\n    Assert.assertTrue(chunks.get(0).isStart());\n    Assert.assertFalse(chunks.get(1).isStart());\n    Assert.assertFalse(chunks.get(2).isStart());\n\n    Assert.assertFalse(chunks.get(0).isEnd());\n    Assert.assertFalse(chunks.get(1).isEnd());\n    Assert.assertTrue(chunks.get(2).isEnd());\n\n    Assert.assertTrue(chunks.get(0).abuts(chunks.get(1)));\n    Assert.assertTrue(chunks.get(1).abuts(chunks.get(2)));\n\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(2)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(2)));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/partition/NumberedShardSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"},{"authorDate":"2020-09-25 07:32:56","commitOrder":2,"curCode":"  public void testPartitionChunks()\n  {\n    final List<ShardSpec> specs = ImmutableList.of(\n        new HashBasedNumberedShardSpec(0, 3, 0, 3, null, null, objectMapper),\n        new HashBasedNumberedShardSpec(1, 3, 1, 3, null, null, objectMapper),\n        new HashBasedNumberedShardSpec(2, 3, 2, 3, null, null, objectMapper)\n    );\n\n    final List<PartitionChunk<String>> chunks = Lists.transform(\n        specs,\n        new Function<ShardSpec, PartitionChunk<String>>()\n        {\n          @Override\n          public PartitionChunk<String> apply(ShardSpec shardSpec)\n          {\n            return shardSpec.createChunk(\"rofl\");\n          }\n        }\n    );\n\n    Assert.assertEquals(0, chunks.get(0).getChunkNumber());\n    Assert.assertEquals(1, chunks.get(1).getChunkNumber());\n    Assert.assertEquals(2, chunks.get(2).getChunkNumber());\n\n    Assert.assertTrue(chunks.get(0).isStart());\n    Assert.assertFalse(chunks.get(1).isStart());\n    Assert.assertFalse(chunks.get(2).isStart());\n\n    Assert.assertFalse(chunks.get(0).isEnd());\n    Assert.assertFalse(chunks.get(1).isEnd());\n    Assert.assertTrue(chunks.get(2).isEnd());\n\n    Assert.assertTrue(chunks.get(0).abuts(chunks.get(1)));\n    Assert.assertTrue(chunks.get(1).abuts(chunks.get(2)));\n\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(2)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(2)));\n  }\n","date":"2020-09-25 07:32:56","endLine":155,"groupId":"105206","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testPartitionChunks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/74/a2bb1a231fff5e4c207023c0e144e9f927e95b.src","preCode":"  public void testPartitionChunks()\n  {\n    final List<ShardSpec> specs = ImmutableList.of(\n        new HashBasedNumberedShardSpec(0, 3, 0, 3, null, objectMapper),\n        new HashBasedNumberedShardSpec(1, 3, 1, 3, null, objectMapper),\n        new HashBasedNumberedShardSpec(2, 3, 2, 3, null, objectMapper)\n    );\n\n    final List<PartitionChunk<String>> chunks = Lists.transform(\n        specs,\n        new Function<ShardSpec, PartitionChunk<String>>()\n        {\n          @Override\n          public PartitionChunk<String> apply(ShardSpec shardSpec)\n          {\n            return shardSpec.createChunk(\"rofl\");\n          }\n        }\n    );\n\n    Assert.assertEquals(0, chunks.get(0).getChunkNumber());\n    Assert.assertEquals(1, chunks.get(1).getChunkNumber());\n    Assert.assertEquals(2, chunks.get(2).getChunkNumber());\n\n    Assert.assertTrue(chunks.get(0).isStart());\n    Assert.assertFalse(chunks.get(1).isStart());\n    Assert.assertFalse(chunks.get(2).isStart());\n\n    Assert.assertFalse(chunks.get(0).isEnd());\n    Assert.assertFalse(chunks.get(1).isEnd());\n    Assert.assertTrue(chunks.get(2).isEnd());\n\n    Assert.assertTrue(chunks.get(0).abuts(chunks.get(1)));\n    Assert.assertTrue(chunks.get(1).abuts(chunks.get(2)));\n\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(0).abuts(chunks.get(2)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(1).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(0)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(1)));\n    Assert.assertFalse(chunks.get(2).abuts(chunks.get(2)));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/partition/HashBasedNumberedShardSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"0cc9eb4903e7bddb4c1484984bf87c8fab7648df","commitMessage":"@@@Store hash partition function in dataSegment and allow segment pruning only when hash partition function is provided (#10288)\n\n* Store hash partition function in dataSegment and allow segment pruning only when hash partition function is provided\n\n* query context\n\n* fix tests; add more test\n\n* javadoc\n\n* docs and more tests\n\n* remove default and hadoop tests\n\n* consistent name and fix javadoc\n\n* spelling and field name\n\n* default function for partitionsSpec\n\n* other comments\n\n* address comments\n\n* fix tests and spelling\n\n* test\n\n* doc","date":"2020-09-25 07:32:56","modifiedFileCount":"50","status":"M","submitter":"Jihoon Son"}]
