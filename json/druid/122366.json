[{"authorTime":"2019-11-07 03:07:04","codes":[{"authorDate":"2019-11-07 03:07:04","commitOrder":1,"curCode":"  private KinesisIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KinesisIndexTaskIOConfig ioConfig,\n      final KinesisIndexTaskTuningConfig tuningConfig,\n      @Nullable final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    if (context != null) {\n      if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n        final TreeMap<Integer, Map<String, String>> checkpoints = new TreeMap<>();\n        checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n        final String checkpointsJson = OBJECT_MAPPER\n            .writerFor(KinesisSupervisor.CHECKPOINTS_TYPE_REF)\n            .writeValueAsString(checkpoints);\n        context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n      }\n    }\n\n    return new TestableKinesisIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        null,\n        null,\n        rowIngestionMetersFactory,\n        null,\n        appenderatorsManager\n    );\n  }\n","date":"2019-11-07 03:07:04","endLine":2639,"groupId":"8304","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(finalStringtaskId@finalDataSchemadataSchema@finalKinesisIndexTaskIOConfigioConfig@finalKinesisIndexTaskTuningConfigtuningConfig@@NullablefinalMap<String@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/27/4549891b92c24291334168d8161d2a1bfc90f5.src","preCode":"  private KinesisIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KinesisIndexTaskIOConfig ioConfig,\n      final KinesisIndexTaskTuningConfig tuningConfig,\n      @Nullable final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    if (context != null) {\n      if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n        final TreeMap<Integer, Map<String, String>> checkpoints = new TreeMap<>();\n        checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n        final String checkpointsJson = OBJECT_MAPPER\n            .writerFor(KinesisSupervisor.CHECKPOINTS_TYPE_REF)\n            .writeValueAsString(checkpoints);\n        context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n      }\n    }\n\n    return new TestableKinesisIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        null,\n        null,\n        rowIngestionMetersFactory,\n        null,\n        appenderatorsManager\n    );\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2607,"status":"B"},{"authorDate":"2019-11-07 03:07:04","commitOrder":1,"curCode":"  private KafkaIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KafkaIndexTaskIOConfig ioConfig,\n      final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    final KafkaIndexTaskTuningConfig tuningConfig = new KafkaIndexTaskTuningConfig(\n        1000,\n        null,\n        maxRowsPerSegment,\n        maxTotalRows,\n        new Period(\"P1Y\"),\n        null,\n        null,\n        null,\n        null,\n        true,\n        reportParseExceptions,\n        handoffConditionTimeout,\n        resetOffsetAutomatically,\n        null,\n        intermediateHandoffPeriod,\n        logParseExceptions,\n        maxParseExceptions,\n        maxSavedParseExceptions\n    );\n    if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n      final TreeMap<Integer, Map<Integer, Long>> checkpoints = new TreeMap<>();\n      checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n      final String checkpointsJson = OBJECT_MAPPER\n          .writerFor(KafkaSupervisor.CHECKPOINTS_TYPE_REF)\n          .writeValueAsString(checkpoints);\n      context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n    }\n\n    final KafkaIndexTask task = new KafkaIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        null,\n        null,\n        rowIngestionMetersFactory,\n        OBJECT_MAPPER,\n        appenderatorsManager\n    );\n    task.setPollRetryMs(POLL_RETRY_MS);\n    return task;\n  }\n","date":"2019-11-07 03:07:04","endLine":2408,"groupId":"19793","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(finalStringtaskId@finalDataSchemadataSchema@finalKafkaIndexTaskIOConfigioConfig@finalMap<String@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c8/35bb95038567e2b9b3112cb98971f6d2418766.src","preCode":"  private KafkaIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KafkaIndexTaskIOConfig ioConfig,\n      final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    final KafkaIndexTaskTuningConfig tuningConfig = new KafkaIndexTaskTuningConfig(\n        1000,\n        null,\n        maxRowsPerSegment,\n        maxTotalRows,\n        new Period(\"P1Y\"),\n        null,\n        null,\n        null,\n        null,\n        true,\n        reportParseExceptions,\n        handoffConditionTimeout,\n        resetOffsetAutomatically,\n        null,\n        intermediateHandoffPeriod,\n        logParseExceptions,\n        maxParseExceptions,\n        maxSavedParseExceptions\n    );\n    if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n      final TreeMap<Integer, Map<Integer, Long>> checkpoints = new TreeMap<>();\n      checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n      final String checkpointsJson = OBJECT_MAPPER\n          .writerFor(KafkaSupervisor.CHECKPOINTS_TYPE_REF)\n          .writeValueAsString(checkpoints);\n      context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n    }\n\n    final KafkaIndexTask task = new KafkaIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        null,\n        null,\n        rowIngestionMetersFactory,\n        OBJECT_MAPPER,\n        appenderatorsManager\n    );\n    task.setPollRetryMs(POLL_RETRY_MS);\n    return task;\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2357,"status":"B"}],"commitId":"5c0fc0a13ab4d259b430bf50b322f631504c4529","commitMessage":"@@@Fix ambiguity about IndexerSQLMetadataStorageCoordinator.getUsedSegmentsForInterval() returning only non-overshadowed or all used segments (#8564)\n\n* IndexerSQLMetadataStorageCoordinator.getTimelineForIntervalsWithHandle() don't fetch abutting intervals; simplify getUsedSegmentsForIntervals()\n\n* Add VersionedIntervalTimeline.findNonOvershadowedObjectsInInterval() method; Propagate the decision about whether only visible segmetns or visible and overshadowed segments should be returned from IndexerMetadataStorageCoordinator's methods to the user logic; Rename SegmentListUsedAction to RetrieveUsedSegmentsAction.  SegmetnListUnusedAction to RetrieveUnusedSegmentsAction.  and UsedSegmentLister to UsedSegmentsRetriever\n\n* Fix tests\n\n* More fixes\n\n* Add javadoc notes about returning Collection instead of Set. Add JacksonUtils.readValue() to reduce boilerplate code\n\n* Fix KinesisIndexTaskTest.  factor out common parts from KinesisIndexTaskTest and KafkaIndexTaskTest into SeekableStreamIndexTaskTestBase\n\n* More test fixes\n\n* More test fixes\n\n* Add a comment to VersionedIntervalTimelineTestBase\n\n* Fix tests\n\n* Set DataSegment.size(0) in more tests\n\n* Specify DataSegment.size(0) in more places in tests\n\n* Fix more tests\n\n* Fix DruidSchemaTest\n\n* Set DataSegment's size in more tests and benchmarks\n\n* Fix HdfsDataSegmentPusherTest\n\n* Doc changes addressing comments\n\n* Extended doc for visibility\n\n* Typo\n\n* Typo 2\n\n* Address comment\n","date":"2019-11-07 03:07:04","modifiedFileCount":"88","status":"B","submitter":"Roman Leventov"},{"authorTime":"2020-08-27 08:08:12","codes":[{"authorDate":"2020-08-27 08:08:12","commitOrder":2,"curCode":"  private KinesisIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KinesisIndexTaskIOConfig ioConfig,\n      final KinesisIndexTaskTuningConfig tuningConfig,\n      @Nullable final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    if (context != null) {\n      if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n        final TreeMap<Integer, Map<String, String>> checkpoints = new TreeMap<>();\n        checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n        final String checkpointsJson = OBJECT_MAPPER\n            .writerFor(KinesisSupervisor.CHECKPOINTS_TYPE_REF)\n            .writeValueAsString(checkpoints);\n        context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n      }\n    }\n\n    return new TestableKinesisIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        null\n    );\n  }\n","date":"2020-08-27 08:08:12","endLine":2805,"groupId":"8304","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(finalStringtaskId@finalDataSchemadataSchema@finalKinesisIndexTaskIOConfigioConfig@finalKinesisIndexTaskTuningConfigtuningConfig@@NullablefinalMap<String@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8a/05464d7a1309f62eebadc15d7e7f330cdb2315.src","preCode":"  private KinesisIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KinesisIndexTaskIOConfig ioConfig,\n      final KinesisIndexTaskTuningConfig tuningConfig,\n      @Nullable final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    if (context != null) {\n      if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n        final TreeMap<Integer, Map<String, String>> checkpoints = new TreeMap<>();\n        checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n        final String checkpointsJson = OBJECT_MAPPER\n            .writerFor(KinesisSupervisor.CHECKPOINTS_TYPE_REF)\n            .writeValueAsString(checkpoints);\n        context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n      }\n    }\n\n    return new TestableKinesisIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        null,\n        null,\n        rowIngestionMetersFactory,\n        null,\n        appenderatorsManager\n    );\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2777,"status":"M"},{"authorDate":"2020-08-27 08:08:12","commitOrder":2,"curCode":"  private KafkaIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KafkaIndexTaskIOConfig ioConfig,\n      final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    final KafkaIndexTaskTuningConfig tuningConfig = new KafkaIndexTaskTuningConfig(\n        1000,\n        null,\n        maxRowsPerSegment,\n        maxTotalRows,\n        new Period(\"P1Y\"),\n        null,\n        null,\n        null,\n        null,\n        true,\n        reportParseExceptions,\n        handoffConditionTimeout,\n        resetOffsetAutomatically,\n        null,\n        intermediateHandoffPeriod,\n        logParseExceptions,\n        maxParseExceptions,\n        maxSavedParseExceptions\n    );\n    if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n      final TreeMap<Integer, Map<Integer, Long>> checkpoints = new TreeMap<>();\n      checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n      final String checkpointsJson = OBJECT_MAPPER\n          .writerFor(KafkaSupervisor.CHECKPOINTS_TYPE_REF)\n          .writeValueAsString(checkpoints);\n      context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n    }\n\n    final KafkaIndexTask task = new KafkaIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        OBJECT_MAPPER\n    );\n    task.setPollRetryMs(POLL_RETRY_MS);\n    return task;\n  }\n","date":"2020-08-27 08:08:12","endLine":2539,"groupId":"19793","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(finalStringtaskId@finalDataSchemadataSchema@finalKafkaIndexTaskIOConfigioConfig@finalMap<String@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a6/9dbecd5a7cc5b6810f78eef8f1e1cf3fe547a4.src","preCode":"  private KafkaIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KafkaIndexTaskIOConfig ioConfig,\n      final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    final KafkaIndexTaskTuningConfig tuningConfig = new KafkaIndexTaskTuningConfig(\n        1000,\n        null,\n        maxRowsPerSegment,\n        maxTotalRows,\n        new Period(\"P1Y\"),\n        null,\n        null,\n        null,\n        null,\n        true,\n        reportParseExceptions,\n        handoffConditionTimeout,\n        resetOffsetAutomatically,\n        null,\n        intermediateHandoffPeriod,\n        logParseExceptions,\n        maxParseExceptions,\n        maxSavedParseExceptions\n    );\n    if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n      final TreeMap<Integer, Map<Integer, Long>> checkpoints = new TreeMap<>();\n      checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n      final String checkpointsJson = OBJECT_MAPPER\n          .writerFor(KafkaSupervisor.CHECKPOINTS_TYPE_REF)\n          .writeValueAsString(checkpoints);\n      context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n    }\n\n    final KafkaIndexTask task = new KafkaIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        null,\n        null,\n        rowIngestionMetersFactory,\n        OBJECT_MAPPER,\n        appenderatorsManager\n    );\n    task.setPollRetryMs(POLL_RETRY_MS);\n    return task;\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2492,"status":"M"}],"commitId":"f82fd22fa7de175200b7127c34c2eb2900bf7317","commitMessage":"@@@Move tools for indexing to TaskToolbox instead of injecting them in constructor (#10308)\n\n* Move tools for indexing to TaskToolbox instead of injecting them in constructor\n\n* oops.  other changes\n\n* fix test\n\n* unnecessary new file\n\n* fix test\n\n* fix build","date":"2020-08-27 08:08:12","modifiedFileCount":"67","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-10-24 09:34:26","codes":[{"authorDate":"2020-08-27 08:08:12","commitOrder":3,"curCode":"  private KinesisIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KinesisIndexTaskIOConfig ioConfig,\n      final KinesisIndexTaskTuningConfig tuningConfig,\n      @Nullable final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    if (context != null) {\n      if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n        final TreeMap<Integer, Map<String, String>> checkpoints = new TreeMap<>();\n        checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n        final String checkpointsJson = OBJECT_MAPPER\n            .writerFor(KinesisSupervisor.CHECKPOINTS_TYPE_REF)\n            .writeValueAsString(checkpoints);\n        context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n      }\n    }\n\n    return new TestableKinesisIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        null\n    );\n  }\n","date":"2020-08-27 08:08:12","endLine":2805,"groupId":"8304","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(finalStringtaskId@finalDataSchemadataSchema@finalKinesisIndexTaskIOConfigioConfig@finalKinesisIndexTaskTuningConfigtuningConfig@@NullablefinalMap<String@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8a/05464d7a1309f62eebadc15d7e7f330cdb2315.src","preCode":"  private KinesisIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KinesisIndexTaskIOConfig ioConfig,\n      final KinesisIndexTaskTuningConfig tuningConfig,\n      @Nullable final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    if (context != null) {\n      if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n        final TreeMap<Integer, Map<String, String>> checkpoints = new TreeMap<>();\n        checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n        final String checkpointsJson = OBJECT_MAPPER\n            .writerFor(KinesisSupervisor.CHECKPOINTS_TYPE_REF)\n            .writeValueAsString(checkpoints);\n        context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n      }\n    }\n\n    return new TestableKinesisIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        null\n    );\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2777,"status":"N"},{"authorDate":"2020-10-24 09:34:26","commitOrder":3,"curCode":"  private KafkaIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KafkaIndexTaskIOConfig ioConfig,\n      final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    final KafkaIndexTaskTuningConfig tuningConfig = new KafkaIndexTaskTuningConfig(\n        null,\n        1000,\n        null,\n        maxRowsPerSegment,\n        maxTotalRows,\n        new Period(\"P1Y\"),\n        null,\n        null,\n        null,\n        null,\n        true,\n        reportParseExceptions,\n        handoffConditionTimeout,\n        resetOffsetAutomatically,\n        null,\n        intermediateHandoffPeriod,\n        logParseExceptions,\n        maxParseExceptions,\n        maxSavedParseExceptions\n    );\n    if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n      final TreeMap<Integer, Map<Integer, Long>> checkpoints = new TreeMap<>();\n      checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n      final String checkpointsJson = OBJECT_MAPPER\n          .writerFor(KafkaSupervisor.CHECKPOINTS_TYPE_REF)\n          .writeValueAsString(checkpoints);\n      context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n    }\n\n    final KafkaIndexTask task = new KafkaIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        OBJECT_MAPPER\n    );\n    task.setPollRetryMs(POLL_RETRY_MS);\n    return task;\n  }\n","date":"2020-10-24 09:34:26","endLine":2540,"groupId":"19793","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(finalStringtaskId@finalDataSchemadataSchema@finalKafkaIndexTaskIOConfigioConfig@finalMap<String@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9b/53735228036ae81af215c3f9d58e560618eb5a.src","preCode":"  private KafkaIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KafkaIndexTaskIOConfig ioConfig,\n      final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    final KafkaIndexTaskTuningConfig tuningConfig = new KafkaIndexTaskTuningConfig(\n        1000,\n        null,\n        maxRowsPerSegment,\n        maxTotalRows,\n        new Period(\"P1Y\"),\n        null,\n        null,\n        null,\n        null,\n        true,\n        reportParseExceptions,\n        handoffConditionTimeout,\n        resetOffsetAutomatically,\n        null,\n        intermediateHandoffPeriod,\n        logParseExceptions,\n        maxParseExceptions,\n        maxSavedParseExceptions\n    );\n    if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n      final TreeMap<Integer, Map<Integer, Long>> checkpoints = new TreeMap<>();\n      checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n      final String checkpointsJson = OBJECT_MAPPER\n          .writerFor(KafkaSupervisor.CHECKPOINTS_TYPE_REF)\n          .writeValueAsString(checkpoints);\n      context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n    }\n\n    final KafkaIndexTask task = new KafkaIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        OBJECT_MAPPER\n    );\n    task.setPollRetryMs(POLL_RETRY_MS);\n    return task;\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2492,"status":"M"}],"commitId":"f3a2903218573f5d336b082b1c9b8a60a19e8c54","commitMessage":"@@@Configurable Index Type (#10335)\n\n* Introduce a Configurable Index Type\n\n* Change to @UnstableApi\n\n* Add AppendableIndexSpecTest\n\n* Update doc\n\n* Add spelling exception\n\n* Add tests coverage\n\n* Revert some of the changes to reduce diff\n\n* Minor fixes\n\n* Update getMaxBytesInMemoryOrDefault() comment\n\n* Fix typo.  remove redundant interface\n\n* Remove off-heap spec (postponed to a later PR)\n\n* Add javadocs to AppendableIndexSpec\n\n* Describe testCreateTask()\n\n* Add tests for AppendableIndexSpec within TuningConfig\n\n* Modify hashCode() to conform with equals()\n\n* Add comment where building incremental-index\n\n* Add \"EqualsVerifier\" tests\n\n* Revert some of the API back to AppenderatorConfig\n\n* Don't use multi-line comments\n\n* Remove knob documentation (deferred)","date":"2020-10-24 09:34:26","modifiedFileCount":"72","status":"M","submitter":"Liran Funaro"},{"authorTime":"2021-01-27 16:34:56","codes":[{"authorDate":"2020-08-27 08:08:12","commitOrder":4,"curCode":"  private KinesisIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KinesisIndexTaskIOConfig ioConfig,\n      final KinesisIndexTaskTuningConfig tuningConfig,\n      @Nullable final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    if (context != null) {\n      if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n        final TreeMap<Integer, Map<String, String>> checkpoints = new TreeMap<>();\n        checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n        final String checkpointsJson = OBJECT_MAPPER\n            .writerFor(KinesisSupervisor.CHECKPOINTS_TYPE_REF)\n            .writeValueAsString(checkpoints);\n        context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n      }\n    }\n\n    return new TestableKinesisIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        null\n    );\n  }\n","date":"2020-08-27 08:08:12","endLine":2805,"groupId":"8304","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(finalStringtaskId@finalDataSchemadataSchema@finalKinesisIndexTaskIOConfigioConfig@finalKinesisIndexTaskTuningConfigtuningConfig@@NullablefinalMap<String@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8a/05464d7a1309f62eebadc15d7e7f330cdb2315.src","preCode":"  private KinesisIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KinesisIndexTaskIOConfig ioConfig,\n      final KinesisIndexTaskTuningConfig tuningConfig,\n      @Nullable final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    if (context != null) {\n      if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n        final TreeMap<Integer, Map<String, String>> checkpoints = new TreeMap<>();\n        checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n        final String checkpointsJson = OBJECT_MAPPER\n            .writerFor(KinesisSupervisor.CHECKPOINTS_TYPE_REF)\n            .writeValueAsString(checkpoints);\n        context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n      }\n    }\n\n    return new TestableKinesisIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        null\n    );\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2777,"status":"N"},{"authorDate":"2021-01-27 16:34:56","commitOrder":4,"curCode":"  private KafkaIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KafkaIndexTaskIOConfig ioConfig,\n      final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    final KafkaIndexTaskTuningConfig tuningConfig = new KafkaIndexTaskTuningConfig(\n        null,\n        1000,\n        null,\n        null,\n        maxRowsPerSegment,\n        maxTotalRows,\n        new Period(\"P1Y\"),\n        null,\n        null,\n        null,\n        null,\n        true,\n        reportParseExceptions,\n        handoffConditionTimeout,\n        resetOffsetAutomatically,\n        null,\n        intermediateHandoffPeriod,\n        logParseExceptions,\n        maxParseExceptions,\n        maxSavedParseExceptions\n    );\n    if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n      final TreeMap<Integer, Map<Integer, Long>> checkpoints = new TreeMap<>();\n      checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n      final String checkpointsJson = OBJECT_MAPPER\n          .writerFor(KafkaSupervisor.CHECKPOINTS_TYPE_REF)\n          .writeValueAsString(checkpoints);\n      context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n    }\n\n    final KafkaIndexTask task = new KafkaIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        OBJECT_MAPPER\n    );\n    task.setPollRetryMs(POLL_RETRY_MS);\n    return task;\n  }\n","date":"2021-01-27 16:34:56","endLine":2715,"groupId":"19793","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(finalStringtaskId@finalDataSchemadataSchema@finalKafkaIndexTaskIOConfigioConfig@finalMap<String@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/18/faf2e1305d91d96a032ebcc753f355fbaeb759.src","preCode":"  private KafkaIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KafkaIndexTaskIOConfig ioConfig,\n      final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    final KafkaIndexTaskTuningConfig tuningConfig = new KafkaIndexTaskTuningConfig(\n        null,\n        1000,\n        null,\n        maxRowsPerSegment,\n        maxTotalRows,\n        new Period(\"P1Y\"),\n        null,\n        null,\n        null,\n        null,\n        true,\n        reportParseExceptions,\n        handoffConditionTimeout,\n        resetOffsetAutomatically,\n        null,\n        intermediateHandoffPeriod,\n        logParseExceptions,\n        maxParseExceptions,\n        maxSavedParseExceptions\n    );\n    if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n      final TreeMap<Integer, Map<Integer, Long>> checkpoints = new TreeMap<>();\n      checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n      final String checkpointsJson = OBJECT_MAPPER\n          .writerFor(KafkaSupervisor.CHECKPOINTS_TYPE_REF)\n          .writeValueAsString(checkpoints);\n      context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n    }\n\n    final KafkaIndexTask task = new KafkaIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        OBJECT_MAPPER\n    );\n    task.setPollRetryMs(POLL_RETRY_MS);\n    return task;\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2666,"status":"M"}],"commitId":"a46d561bd7e2b045a08a2e475847d4a7505a1c93","commitMessage":"@@@Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead (#10740)\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* fix checkstyle\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* fix test\n\n* fix test\n\n* add log\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* address comments\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add config to skip overhead memory calculation\n\n* add test for the skipBytesInMemoryOverheadCheck config\n\n* add docs\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix spelling\n\n* address comments\n\n* fix travis\n\n* address comments","date":"2021-01-27 16:34:56","modifiedFileCount":"50","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-06-24 07:36:46","codes":[{"authorDate":"2020-08-27 08:08:12","commitOrder":5,"curCode":"  private KinesisIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KinesisIndexTaskIOConfig ioConfig,\n      final KinesisIndexTaskTuningConfig tuningConfig,\n      @Nullable final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    if (context != null) {\n      if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n        final TreeMap<Integer, Map<String, String>> checkpoints = new TreeMap<>();\n        checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n        final String checkpointsJson = OBJECT_MAPPER\n            .writerFor(KinesisSupervisor.CHECKPOINTS_TYPE_REF)\n            .writeValueAsString(checkpoints);\n        context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n      }\n    }\n\n    return new TestableKinesisIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        null\n    );\n  }\n","date":"2020-08-27 08:08:12","endLine":2805,"groupId":"122366","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createTask","params":"(finalStringtaskId@finalDataSchemadataSchema@finalKinesisIndexTaskIOConfigioConfig@finalKinesisIndexTaskTuningConfigtuningConfig@@NullablefinalMap<String@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8a/05464d7a1309f62eebadc15d7e7f330cdb2315.src","preCode":"  private KinesisIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KinesisIndexTaskIOConfig ioConfig,\n      final KinesisIndexTaskTuningConfig tuningConfig,\n      @Nullable final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    if (context != null) {\n      if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n        final TreeMap<Integer, Map<String, String>> checkpoints = new TreeMap<>();\n        checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n        final String checkpointsJson = OBJECT_MAPPER\n            .writerFor(KinesisSupervisor.CHECKPOINTS_TYPE_REF)\n            .writeValueAsString(checkpoints);\n        context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n      }\n    }\n\n    return new TestableKinesisIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        null\n    );\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2777,"status":"N"},{"authorDate":"2021-06-24 07:36:46","commitOrder":5,"curCode":"  private KafkaIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KafkaIndexTaskIOConfig ioConfig,\n      final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    final KafkaIndexTaskTuningConfig tuningConfig = new KafkaIndexTaskTuningConfig(\n        null,\n        1000,\n        null,\n        null,\n        maxRowsPerSegment,\n        maxTotalRows,\n        new Period(\"P1Y\"),\n        null,\n        null,\n        null,\n        null,\n        reportParseExceptions,\n        handoffConditionTimeout,\n        resetOffsetAutomatically,\n        null,\n        intermediateHandoffPeriod,\n        logParseExceptions,\n        maxParseExceptions,\n        maxSavedParseExceptions\n    );\n    if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n      final TreeMap<Integer, Map<Integer, Long>> checkpoints = new TreeMap<>();\n      checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n      final String checkpointsJson = OBJECT_MAPPER\n          .writerFor(KafkaSupervisor.CHECKPOINTS_TYPE_REF)\n          .writeValueAsString(checkpoints);\n      context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n    }\n\n    final KafkaIndexTask task = new KafkaIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        OBJECT_MAPPER\n    );\n    task.setPollRetryMs(POLL_RETRY_MS);\n    return task;\n  }\n","date":"2021-06-24 07:36:46","endLine":2717,"groupId":"122366","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createTask","params":"(finalStringtaskId@finalDataSchemadataSchema@finalKafkaIndexTaskIOConfigioConfig@finalMap<String@Object>context)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9f/15091bef30d95bb5513ecdf640cf3f860b208b.src","preCode":"  private KafkaIndexTask createTask(\n      final String taskId,\n      final DataSchema dataSchema,\n      final KafkaIndexTaskIOConfig ioConfig,\n      final Map<String, Object> context\n  ) throws JsonProcessingException\n  {\n    final KafkaIndexTaskTuningConfig tuningConfig = new KafkaIndexTaskTuningConfig(\n        null,\n        1000,\n        null,\n        null,\n        maxRowsPerSegment,\n        maxTotalRows,\n        new Period(\"P1Y\"),\n        null,\n        null,\n        null,\n        null,\n        true,\n        reportParseExceptions,\n        handoffConditionTimeout,\n        resetOffsetAutomatically,\n        null,\n        intermediateHandoffPeriod,\n        logParseExceptions,\n        maxParseExceptions,\n        maxSavedParseExceptions\n    );\n    if (!context.containsKey(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY)) {\n      final TreeMap<Integer, Map<Integer, Long>> checkpoints = new TreeMap<>();\n      checkpoints.put(0, ioConfig.getStartSequenceNumbers().getPartitionSequenceNumberMap());\n      final String checkpointsJson = OBJECT_MAPPER\n          .writerFor(KafkaSupervisor.CHECKPOINTS_TYPE_REF)\n          .writeValueAsString(checkpoints);\n      context.put(SeekableStreamSupervisor.CHECKPOINTS_CTX_KEY, checkpointsJson);\n    }\n\n    final KafkaIndexTask task = new KafkaIndexTask(\n        taskId,\n        null,\n        cloneDataSchema(dataSchema),\n        tuningConfig,\n        ioConfig,\n        context,\n        OBJECT_MAPPER\n    );\n    task.setPollRetryMs(POLL_RETRY_MS);\n    return task;\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2669,"status":"M"}],"commitId":"de8daf8139dcb8a497f1191587dcd5e7ea992092","commitMessage":"@@@Delete buildV9Directly in Kafka and Kinesis Indexing Service (#11351)\n\n* delete_buildV9Directly_in_kafka_and_kinesis_indexing_service\n\n* delete\n\n* delete them from server\n\n* delete buildV9Directly from hadoop indexing\n\n* bug fixed\n\nCo-authored-by: yuanyi <yuanyi@freewheel.tv>","date":"2021-06-24 07:36:46","modifiedFileCount":"38","status":"M","submitter":"Yi Yuan"}]
