[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","date":"2018-08-31 00:56:26","endLine":466,"groupId":"19926","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultFromProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/67/f93012f80cdc94572d95455905cecb914220dd.src","preCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/cache/CaffeineCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private final Module simpleJsonConfigModule = new Module()\n  {\n    @Override\n    public void configure(Binder binder)\n    {\n      binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n      binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n      binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n      JsonConfigProvider.bind(binder, configPrefix, clazz);\n    }\n  };\n","date":"2018-08-31 00:56:26","endLine":89,"groupId":"19926","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"simpleJsonConfigModule","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3b/ebdff3f9dd7c06d8f151b25ddefe5376ba692a.src","preCode":"  private final Module simpleJsonConfigModule = new Module()\n  {\n    @Override\n    public void configure(Binder binder)\n    {\n      binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n      binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n      binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n      JsonConfigProvider.bind(binder, configPrefix, clazz);\n    }\n  };\n","realPath":"server/src/test/java/org/apache/druid/guice/JsonConfigTesterBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","date":"2018-08-31 00:56:26","endLine":466,"groupId":"10966","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultFromProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/67/f93012f80cdc94572d95455905cecb914220dd.src","preCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/cache/CaffeineCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"N"},{"authorDate":"2019-08-23 18:13:54","commitOrder":2,"curCode":"  private final Module simpleJsonConfigModule = new Module()\n  {\n    @Override\n    public void configure(Binder binder)\n    {\n      binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n      binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n      binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n      JsonConfigProvider.bind(binder, CONFIG_PREFIX, clazz);\n    }\n  };\n","date":"2019-08-23 18:13:54","endLine":89,"groupId":"10966","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"simpleJsonConfigModule","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d2/1d9dd47518ac750689f991685ea29d42523d4f.src","preCode":"  private final Module simpleJsonConfigModule = new Module()\n  {\n    @Override\n    public void configure(Binder binder)\n    {\n      binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n      binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n      binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n      JsonConfigProvider.bind(binder, configPrefix, clazz);\n    }\n  };\n","realPath":"server/src/test/java/org/apache/druid/guice/JsonConfigTesterBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
