[{"authorTime":"2019-04-19 04:31:29","codes":[{"authorDate":"2019-04-19 04:31:29","commitOrder":1,"curCode":"  public void testResultLevelCacheKeyWithHavingSpec()\n  {\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.uniqueMetric, 8))\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.uniqueMetric, 10))\n        .build();\n\n    final CacheStrategy<Row, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<Row, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","date":"2019-04-19 04:31:29","endLine":234,"groupId":"80","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testResultLevelCacheKeyWithHavingSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2b/ad8f82f7f473ddce9ef846f3683f7d7132e84f.src","preCode":"  public void testResultLevelCacheKeyWithHavingSpec()\n  {\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.uniqueMetric, 8))\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.uniqueMetric, 10))\n        .build();\n\n    final CacheStrategy<Row, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<Row, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"B"},{"authorDate":"2019-04-19 04:31:29","commitOrder":1,"curCode":"  public void testResultLevelCacheKeyWithAndHavingSpec()\n  {\n    final List<HavingSpec> havings = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(1.3)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(2)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec = new AndHavingSpec(havings);\n\n    final List<HavingSpec> havings2 = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(13.0)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(22)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec2 = new AndHavingSpec(havings2);\n\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec)\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec2)\n        .build();\n\n    final CacheStrategy<Row, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<Row, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","date":"2019-04-19 04:31:29","endLine":322,"groupId":"9047","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testResultLevelCacheKeyWithAndHavingSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2b/ad8f82f7f473ddce9ef846f3683f7d7132e84f.src","preCode":"  public void testResultLevelCacheKeyWithAndHavingSpec()\n  {\n    final List<HavingSpec> havings = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(1.3)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(2)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec = new AndHavingSpec(havings);\n\n    final List<HavingSpec> havings2 = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(13.0)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(22)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec2 = new AndHavingSpec(havings2);\n\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec)\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec2)\n        .build();\n\n    final CacheStrategy<Row, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<Row, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"B"}],"commitId":"c2a42e05bb08aefa31f1d1ed09d568cdaa726b8a","commitMessage":"@@@Fix result-level cache for queries (#7325)\n\n* Add SegmentDescriptor interval in the hash while calculating Etag\n\n* Add computeResultLevelCacheKey to CacheStrategy\n\nMake HavingSpec cacheable and implement getCacheKey for subclasses\nAdd unit tests for computeResultLevelCacheKey\n\n* Add more tests\n\n* Use CacheKeyBuilder for HavingSpec's getCacheKey\n\n* Initialize aggregators map to avoid NPE\n\n* adjust cachekey builder for HavingSpec to ignore aggregators\n\n* unused import\n\n* PR comments\n","date":"2019-04-19 04:31:29","modifiedFileCount":"26","status":"B","submitter":"Surekha"},{"authorTime":"2019-08-01 07:15:12","codes":[{"authorDate":"2019-08-01 07:15:12","commitOrder":2,"curCode":"  public void testResultLevelCacheKeyWithHavingSpec()\n  {\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.uniqueMetric, 8))\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.uniqueMetric, 10))\n        .build();\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","date":"2019-08-01 07:15:12","endLine":249,"groupId":"80","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testResultLevelCacheKeyWithHavingSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/51/95afdae5feb5ec15db52a497c1ca6f9c01bb1d.src","preCode":"  public void testResultLevelCacheKeyWithHavingSpec()\n  {\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.uniqueMetric, 8))\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.uniqueMetric, 10))\n        .build();\n\n    final CacheStrategy<Row, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<Row, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2019-08-01 07:15:12","commitOrder":2,"curCode":"  public void testResultLevelCacheKeyWithAndHavingSpec()\n  {\n    final List<HavingSpec> havings = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(1.3)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(2)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec = new AndHavingSpec(havings);\n\n    final List<HavingSpec> havings2 = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(13.0)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(22)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec2 = new AndHavingSpec(havings2);\n\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec)\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec2)\n        .build();\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","date":"2019-08-01 07:15:12","endLine":337,"groupId":"9047","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testResultLevelCacheKeyWithAndHavingSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/51/95afdae5feb5ec15db52a497c1ca6f9c01bb1d.src","preCode":"  public void testResultLevelCacheKeyWithAndHavingSpec()\n  {\n    final List<HavingSpec> havings = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(1.3)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(2)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec = new AndHavingSpec(havings);\n\n    final List<HavingSpec> havings2 = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(13.0)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(22)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec2 = new AndHavingSpec(havings2);\n\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec)\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec2)\n        .build();\n\n    final CacheStrategy<Row, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<Row, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"77297f4e6f2e9d617c96cd46852bb5a772961e85","commitMessage":"@@@GroupBy array-based result rows. (#8196)\n\n* GroupBy array-based result rows.\n\nFixes #8118; see that proposal for details.\n\nOther than the GroupBy changes.  the main other \"interesting\" classes are:\n\n- ResultRow: The array-based result type.\n- BaseQuery: T is no longer required to be Comparable.\n- QueryToolChest: Adds \"decorateObjectMapper\" to enable query-aware serialization\n  and deserialization of result rows (necessary due to their positional nature).\n- QueryResource: Uses the new decoration functionality.\n- DirectDruidClient: Also uses the new decoration functionality.\n- QueryMaker (in Druid SQL): Modifications to read ResultRows.\n\nThese classes weren't changed.  but got some new javadocs:\n\n- BySegmentQueryRunner\n- FinalizeResultsQueryRunner\n- Query\n\n* Adjustments for TC stuff.\n","date":"2019-08-01 07:15:12","modifiedFileCount":"111","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testResultLevelCacheKeyWithHavingSpec()\n  {\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.UNIQUE_METRIC, 8))\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.UNIQUE_METRIC, 10))\n        .build();\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","date":"2019-08-23 18:13:54","endLine":249,"groupId":"80","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testResultLevelCacheKeyWithHavingSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d8/43060f27b9224e81b29a76d0bfea9ae967d0b1.src","preCode":"  public void testResultLevelCacheKeyWithHavingSpec()\n  {\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.uniqueMetric, 8))\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.uniqueMetric, 10))\n        .build();\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testResultLevelCacheKeyWithAndHavingSpec()\n  {\n    final List<HavingSpec> havings = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(1.3)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(2)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec = new AndHavingSpec(havings);\n\n    final List<HavingSpec> havings2 = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(13.0)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(22)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec2 = new AndHavingSpec(havings2);\n\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec)\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec2)\n        .build();\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","date":"2019-08-23 18:13:54","endLine":337,"groupId":"9047","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testResultLevelCacheKeyWithAndHavingSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d8/43060f27b9224e81b29a76d0bfea9ae967d0b1.src","preCode":"  public void testResultLevelCacheKeyWithAndHavingSpec()\n  {\n    final List<HavingSpec> havings = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(1.3)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(2)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec = new AndHavingSpec(havings);\n\n    final List<HavingSpec> havings2 = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(13.0)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(22)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec2 = new AndHavingSpec(havings2);\n\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec)\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.rowsCount, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec2)\n        .build();\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"},{"authorTime":"2020-01-20 09:14:23","codes":[{"authorDate":"2020-01-20 09:14:23","commitOrder":4,"curCode":"  public void testResultLevelCacheKeyWithHavingSpec()\n  {\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.UNIQUE_METRIC, 8))\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.UNIQUE_METRIC, 10))\n        .build();\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","date":"2020-01-20 09:14:23","endLine":254,"groupId":"106596","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testResultLevelCacheKeyWithHavingSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ef/112f408c525ca2890f13032c86ace9fb18e174.src","preCode":"  public void testResultLevelCacheKeyWithHavingSpec()\n  {\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.UNIQUE_METRIC, 8))\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(new GreaterThanHavingSpec(QueryRunnerTestHelper.UNIQUE_METRIC, 10))\n        .build();\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"},{"authorDate":"2020-01-20 09:14:23","commitOrder":4,"curCode":"  public void testResultLevelCacheKeyWithAndHavingSpec()\n  {\n    final List<HavingSpec> havings = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(1.3)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(2)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec = new AndHavingSpec(havings);\n\n    final List<HavingSpec> havings2 = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(13.0)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(22)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec2 = new AndHavingSpec(havings2);\n\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec)\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec2)\n        .build();\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","date":"2020-01-20 09:14:23","endLine":340,"groupId":"106596","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testResultLevelCacheKeyWithAndHavingSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ef/112f408c525ca2890f13032c86ace9fb18e174.src","preCode":"  public void testResultLevelCacheKeyWithAndHavingSpec()\n  {\n    final List<HavingSpec> havings = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(1.3)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(2)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec = new AndHavingSpec(havings);\n\n    final List<HavingSpec> havings2 = Arrays.asList(\n        new GreaterThanHavingSpec(\"agg\", Double.valueOf(13.0)),\n        new OrHavingSpec(\n            Arrays.asList(\n                new LessThanHavingSpec(\"lessAgg\", Long.valueOf(1L)),\n                new NotHavingSpec(new EqualToHavingSpec(\"equalAgg\", Double.valueOf(22)))\n            )\n        )\n    );\n    final HavingSpec andHavingSpec2 = new AndHavingSpec(havings2);\n\n    final GroupByQuery query1 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec)\n        .build();\n\n    final GroupByQuery query2 = GroupByQuery\n        .builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n        .setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT, new LongSumAggregatorFactory(\"idx\", \"index\"))\n        .setPostAggregatorSpecs(\n            ImmutableList.of(\n                new ExpressionPostAggregator(\"post\", \"alias + 'x'\", null, TestExprMacroTable.INSTANCE)\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                ImmutableList.of(\n                    new OrderByColumnSpec(\"post\", OrderByColumnSpec.Direction.DESCENDING)\n                ),\n                Integer.MAX_VALUE\n            )\n        )\n        .setHavingSpec(andHavingSpec2)\n        .build();\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy1 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query1);\n\n    final CacheStrategy<ResultRow, Object, GroupByQuery> strategy2 = new GroupByQueryQueryToolChest(\n        null,\n        QueryRunnerTestHelper.sameThreadIntervalChunkingQueryRunnerDecorator()\n    ).getCacheStrategy(query2);\n\n    Assert.assertTrue(Arrays.equals(strategy1.computeCacheKey(query1), strategy2.computeCacheKey(query2)));\n    Assert.assertFalse(Arrays.equals(\n        strategy1.computeResultLevelCacheKey(query1),\n        strategy2.computeResultLevelCacheKey(query2)\n    ));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"M"}],"commitId":"d21054f7c5f72f9db1ecfb72b46ee866876f1e4b","commitMessage":"@@@Remove the deprecated interval-chunking stuff. (#9216)\n\n* Remove the deprecated interval-chunking stuff.\n\nSee https://github.com/apache/druid/pull/6591.  https://github.com/apache/druid/pull/4004#issuecomment-284171911 for details.\n\n* Remove unused import.\n\n* Remove chunkInterval too.\n","date":"2020-01-20 09:14:23","modifiedFileCount":"65","status":"M","submitter":"Gian Merlino"}]
