[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private IncrementalIndex makeIncIndex(boolean withRollup)\n  {\n    return new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setReportParseExceptions(false)\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n  }\n","date":"2018-08-31 00:56:26","endLine":151,"groupId":"10246","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"makeIncIndex","params":"(booleanwithRollup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/70/8fb95aca8ef84d81adea3b0c170dcec8fe1160.src","preCode":"  private IncrementalIndex makeIncIndex(boolean withRollup)\n  {\n    return new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setReportParseExceptions(false)\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByMultiSegmentTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private IncrementalIndex makeIncIndex(boolean withRollup)\n  {\n    return new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setReportParseExceptions(false)\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n  }\n","date":"2018-08-31 00:56:26","endLine":165,"groupId":"10246","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"makeIncIndex","params":"(booleanwithRollup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6b/12b2d054151757f3602b9cbe44f7a8ac18efe0.src","preCode":"  private IncrementalIndex makeIncIndex(boolean withRollup)\n  {\n    return new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setReportParseExceptions(false)\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByLimitPushDownMultiNodeMergeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-09-12 07:31:10","codes":[{"authorDate":"2020-09-12 07:31:10","commitOrder":2,"curCode":"  private IncrementalIndex makeIncIndex(boolean withRollup)\n  {\n    return new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n  }\n","date":"2020-09-12 07:31:10","endLine":147,"groupId":"10246","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"makeIncIndex","params":"(booleanwithRollup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4f/9b1ffd4782d7912c45edd025e95268e25cdad7.src","preCode":"  private IncrementalIndex makeIncIndex(boolean withRollup)\n  {\n    return new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setReportParseExceptions(false)\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByMultiSegmentTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2020-09-12 07:31:10","commitOrder":2,"curCode":"  private IncrementalIndex makeIncIndex(boolean withRollup)\n  {\n    return new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n  }\n","date":"2020-09-12 07:31:10","endLine":160,"groupId":"10246","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"makeIncIndex","params":"(booleanwithRollup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/35/7a1e2bcd2aa08f78419f68a25ccdb65e08d78b.src","preCode":"  private IncrementalIndex makeIncIndex(boolean withRollup)\n  {\n    return new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setReportParseExceptions(false)\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByLimitPushDownMultiNodeMergeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"}],"commitId":"8f14ac814e1fdf11878a5ba9bdba58fb745b4c8f","commitMessage":"@@@More structured way to handle parse exceptions (#10336)\n\n* More structured way to handle parse exceptions\n\n* checkstyle; add more tests\n\n* forbidden api; test\n\n* address comment; new test\n\n* address review comments\n\n* javadoc for parseException; remove redundant parseException in streaming ingestion\n\n* fix tests\n\n* unnecessary catch\n\n* unused imports\n\n* appenderator test\n\n* unused import","date":"2020-09-12 07:31:10","modifiedFileCount":"116","status":"M","submitter":"Jihoon Son"},{"authorTime":"2021-01-08 14:18:47","codes":[{"authorDate":"2021-01-08 14:18:47","commitOrder":3,"curCode":"  private IncrementalIndex makeIncIndex(boolean withRollup)\n  {\n    return new OnheapIncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .build();\n  }\n","date":"2021-01-08 14:18:47","endLine":148,"groupId":"10246","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"makeIncIndex","params":"(booleanwithRollup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/73cc149b59cdd54957d175a55c792526df7506.src","preCode":"  private IncrementalIndex makeIncIndex(boolean withRollup)\n  {\n    return new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByMultiSegmentTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2021-01-08 14:18:47","commitOrder":3,"curCode":"  private IncrementalIndex makeIncIndex(boolean withRollup)\n  {\n    return new OnheapIncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .build();\n  }\n","date":"2021-01-08 14:18:47","endLine":161,"groupId":"10246","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"makeIncIndex","params":"(booleanwithRollup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3c/62e11ea1a98293bef3afe4f14fa05e605a7e77.src","preCode":"  private IncrementalIndex makeIncIndex(boolean withRollup)\n  {\n    return new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByLimitPushDownMultiNodeMergeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"}],"commitId":"08ab82f55ca856d60dfe1088c1c0393428b0bb6d","commitMessage":"@@@IncrementalIndex Tests and Benchmarks Parametrization (#10593)\n\n* Remove redundant IncrementalIndex.Builder\n\n* Parametrize incremental index tests and benchmarks\n\n- Reveal and fix a bug in OffheapIncrementalIndex\n\n* Fix forbiddenapis error: Forbidden method invocation: java.lang.String#format(java.lang.String. java.lang.Object[]) [Uses default locale]\n\n* Fix Intellij errors: declared exception is never thrown\n\n* Add documentation and validate before closing objects on tearDown.\n\n* Add documentation to OffheapIncrementalIndexTestSpec\n\n* Doc corrections and minor changes.\n\n* Add logging for generated rows.\n\n* Refactor new tests/benchmarks.\n\n* Improve IncrementalIndexCreator documentation\n\n* Add required tests for DataGenerator\n\n* Revert \"rollupOpportunity\" to be a string","date":"2021-01-08 14:18:47","modifiedFileCount":"62","status":"M","submitter":"Liran Funaro"},{"authorTime":"2021-09-02 12:19:38","codes":[{"authorDate":"2021-01-08 14:18:47","commitOrder":4,"curCode":"  private IncrementalIndex makeIncIndex(boolean withRollup)\n  {\n    return new OnheapIncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .build();\n  }\n","date":"2021-01-08 14:18:47","endLine":148,"groupId":"106573","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"makeIncIndex","params":"(booleanwithRollup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/73cc149b59cdd54957d175a55c792526df7506.src","preCode":"  private IncrementalIndex makeIncIndex(boolean withRollup)\n  {\n    return new OnheapIncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .build();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByMultiSegmentTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"N"},{"authorDate":"2021-09-02 12:19:38","commitOrder":4,"curCode":"  private IncrementalIndex makeIncIndex(boolean withRollup, List<DimensionSchema> dimensions)\n  {\n    return new OnheapIncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .build();\n  }\n","date":"2021-09-02 12:19:38","endLine":170,"groupId":"106573","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"makeIncIndex","params":"(booleanwithRollup@List<DimensionSchema>dimensions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7c/f7e65d2bb29f5586caad3f54e2bc27b745cad3.src","preCode":"  private IncrementalIndex makeIncIndex(boolean withRollup)\n  {\n    return new OnheapIncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withDimensionsSpec(new DimensionsSpec(\n                    Arrays.asList(\n                        new StringDimensionSchema(\"dimA\"),\n                        new LongDimensionSchema(\"metA\")\n                    ),\n                    null,\n                    null\n                ))\n                .withRollup(withRollup)\n                .build()\n        )\n        .setConcurrentEventAdd(true)\n        .setMaxRowCount(1000)\n        .build();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByLimitPushDownMultiNodeMergeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"3ff1c2b8ce7fbcf6e184b0e25fe81691cca18e6c","commitMessage":"@@@Fix bug which produces vastly inaccurate query results when forceLimitPushDown is enabled and order by clause has non grouping fields (#11097)\n\n","date":"2021-09-02 12:19:38","modifiedFileCount":"4","status":"M","submitter":"Jian Wang"}]
