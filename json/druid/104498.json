[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final CompactionTask task = new CompactionTask(\n        null,\n        null,\n        DATA_SOURCE,\n        COMPACTION_INTERVAL,\n        null,\n        null,\n        null,\n        createTuningConfig(),\n        ImmutableMap.of(\"testKey\", \"testContext\"),\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    Assert.assertEquals(task.getType(), fromJson.getType());\n    Assert.assertEquals(task.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(task.getInterval(), fromJson.getInterval());\n    Assert.assertEquals(task.getSegments(), fromJson.getSegments());\n    Assert.assertEquals(task.getDimensionsSpec(), fromJson.getDimensionsSpec());\n    Assert.assertEquals(task.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(task.getContext(), fromJson.getContext());\n    Assert.assertNull(fromJson.getSegmentProvider().getSegments());\n  }\n","date":"2018-08-31 00:56:26","endLine":349,"groupId":"16701","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/38/1b51c549a844dde0d1df4b9dee522498cf61c5.src","preCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final CompactionTask task = new CompactionTask(\n        null,\n        null,\n        DATA_SOURCE,\n        COMPACTION_INTERVAL,\n        null,\n        null,\n        null,\n        createTuningConfig(),\n        ImmutableMap.of(\"testKey\", \"testContext\"),\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    Assert.assertEquals(task.getType(), fromJson.getType());\n    Assert.assertEquals(task.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(task.getInterval(), fromJson.getInterval());\n    Assert.assertEquals(task.getSegments(), fromJson.getSegments());\n    Assert.assertEquals(task.getDimensionsSpec(), fromJson.getDimensionsSpec());\n    Assert.assertEquals(task.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(task.getContext(), fromJson.getContext());\n    Assert.assertNull(fromJson.getSegmentProvider().getSegments());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final CompactionTask task = new CompactionTask(\n        null,\n        null,\n        DATA_SOURCE,\n        null,\n        SEGMENTS,\n        null,\n        null,\n        createTuningConfig(),\n        ImmutableMap.of(\"testKey\", \"testContext\"),\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    Assert.assertEquals(task.getType(), fromJson.getType());\n    Assert.assertEquals(task.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(task.getInterval(), fromJson.getInterval());\n    Assert.assertEquals(task.getSegments(), fromJson.getSegments());\n    Assert.assertEquals(task.getDimensionsSpec(), fromJson.getDimensionsSpec());\n    Assert.assertEquals(task.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(task.getContext(), fromJson.getContext());\n  }\n","date":"2018-08-31 00:56:26","endLine":378,"groupId":"16701","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/38/1b51c549a844dde0d1df4b9dee522498cf61c5.src","preCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final CompactionTask task = new CompactionTask(\n        null,\n        null,\n        DATA_SOURCE,\n        null,\n        SEGMENTS,\n        null,\n        null,\n        createTuningConfig(),\n        ImmutableMap.of(\"testKey\", \"testContext\"),\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    Assert.assertEquals(task.getType(), fromJson.getType());\n    Assert.assertEquals(task.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(task.getInterval(), fromJson.getInterval());\n    Assert.assertEquals(task.getSegments(), fromJson.getSegments());\n    Assert.assertEquals(task.getDimensionsSpec(), fromJson.getDimensionsSpec());\n    Assert.assertEquals(task.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(task.getContext(), fromJson.getContext());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-09-29 02:16:35","codes":[{"authorDate":"2018-09-29 02:16:35","commitOrder":2,"curCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final CompactionTask task = new CompactionTask(\n        null,\n        null,\n        DATA_SOURCE,\n        COMPACTION_INTERVAL,\n        null,\n        null,\n        null,\n        null,\n        createTuningConfig(),\n        ImmutableMap.of(\"testKey\", \"testContext\"),\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    Assert.assertEquals(task.getType(), fromJson.getType());\n    Assert.assertEquals(task.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(task.getInterval(), fromJson.getInterval());\n    Assert.assertEquals(task.getSegments(), fromJson.getSegments());\n    Assert.assertEquals(task.getDimensionsSpec(), fromJson.getDimensionsSpec());\n    Assert.assertEquals(task.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(task.getContext(), fromJson.getContext());\n    Assert.assertNull(fromJson.getSegmentProvider().getSegments());\n  }\n","date":"2018-09-29 02:16:35","endLine":354,"groupId":"16701","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5c/d5f1fbdbda0c802521cfd0ada3c308b677af81.src","preCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final CompactionTask task = new CompactionTask(\n        null,\n        null,\n        DATA_SOURCE,\n        COMPACTION_INTERVAL,\n        null,\n        null,\n        null,\n        createTuningConfig(),\n        ImmutableMap.of(\"testKey\", \"testContext\"),\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    Assert.assertEquals(task.getType(), fromJson.getType());\n    Assert.assertEquals(task.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(task.getInterval(), fromJson.getInterval());\n    Assert.assertEquals(task.getSegments(), fromJson.getSegments());\n    Assert.assertEquals(task.getDimensionsSpec(), fromJson.getDimensionsSpec());\n    Assert.assertEquals(task.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(task.getContext(), fromJson.getContext());\n    Assert.assertNull(fromJson.getSegmentProvider().getSegments());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"},{"authorDate":"2018-09-29 02:16:35","commitOrder":2,"curCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final CompactionTask task = new CompactionTask(\n        null,\n        null,\n        DATA_SOURCE,\n        null,\n        SEGMENTS,\n        null,\n        null,\n        null,\n        createTuningConfig(),\n        ImmutableMap.of(\"testKey\", \"testContext\"),\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    Assert.assertEquals(task.getType(), fromJson.getType());\n    Assert.assertEquals(task.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(task.getInterval(), fromJson.getInterval());\n    Assert.assertEquals(task.getSegments(), fromJson.getSegments());\n    Assert.assertEquals(task.getDimensionsSpec(), fromJson.getDimensionsSpec());\n    Assert.assertEquals(task.isKeepSegmentGranularity(), fromJson.isKeepSegmentGranularity());\n    Assert.assertEquals(task.getTargetCompactionSizeBytes(), fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(task.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(task.getContext(), fromJson.getContext());\n  }\n","date":"2018-09-29 02:16:35","endLine":386,"groupId":"16701","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5c/d5f1fbdbda0c802521cfd0ada3c308b677af81.src","preCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final CompactionTask task = new CompactionTask(\n        null,\n        null,\n        DATA_SOURCE,\n        null,\n        SEGMENTS,\n        null,\n        null,\n        createTuningConfig(),\n        ImmutableMap.of(\"testKey\", \"testContext\"),\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    Assert.assertEquals(task.getType(), fromJson.getType());\n    Assert.assertEquals(task.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(task.getInterval(), fromJson.getInterval());\n    Assert.assertEquals(task.getSegments(), fromJson.getSegments());\n    Assert.assertEquals(task.getDimensionsSpec(), fromJson.getDimensionsSpec());\n    Assert.assertEquals(task.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(task.getContext(), fromJson.getContext());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"}],"commitId":"122caec7b187820a0a7fc89e85eb8216dd57df21","commitMessage":"@@@Add support targetCompactionSizeBytes for compactionTask (#6203)\n\n* Add support targetCompactionSizeBytes for compactionTask\n\n* fix test\n\n* fix a bug in keepSegmentGranularity\n\n* fix wrong noinspection comment\n\n* address comments\n","date":"2018-09-29 02:16:35","modifiedFileCount":"7","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-01-04 09:50:45","codes":[{"authorDate":"2019-01-04 09:50:45","commitOrder":3,"curCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final CompactionTask task = new CompactionTask(\n        null,\n        null,\n        DATA_SOURCE,\n        COMPACTION_INTERVAL,\n        null,\n        null,\n        null,\n        null,\n        null,\n        createTuningConfig(),\n        ImmutableMap.of(\"testKey\", \"testContext\"),\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    Assert.assertEquals(task.getType(), fromJson.getType());\n    Assert.assertEquals(task.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(task.getInterval(), fromJson.getInterval());\n    Assert.assertEquals(task.getSegments(), fromJson.getSegments());\n    Assert.assertEquals(task.getDimensionsSpec(), fromJson.getDimensionsSpec());\n    Assert.assertEquals(task.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(task.getContext(), fromJson.getContext());\n    Assert.assertNull(fromJson.getSegmentProvider().getSegments());\n  }\n","date":"2019-01-04 09:50:45","endLine":357,"groupId":"16701","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/86/7cdfe03c74e942da7029a636d3ee9e1e7c92b5.src","preCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final CompactionTask task = new CompactionTask(\n        null,\n        null,\n        DATA_SOURCE,\n        COMPACTION_INTERVAL,\n        null,\n        null,\n        null,\n        null,\n        createTuningConfig(),\n        ImmutableMap.of(\"testKey\", \"testContext\"),\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    Assert.assertEquals(task.getType(), fromJson.getType());\n    Assert.assertEquals(task.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(task.getInterval(), fromJson.getInterval());\n    Assert.assertEquals(task.getSegments(), fromJson.getSegments());\n    Assert.assertEquals(task.getDimensionsSpec(), fromJson.getDimensionsSpec());\n    Assert.assertEquals(task.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(task.getContext(), fromJson.getContext());\n    Assert.assertNull(fromJson.getSegmentProvider().getSegments());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"M"},{"authorDate":"2019-01-04 09:50:45","commitOrder":3,"curCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final CompactionTask task = new CompactionTask(\n        null,\n        null,\n        DATA_SOURCE,\n        null,\n        SEGMENTS,\n        null,\n        null,\n        null,\n        null,\n        createTuningConfig(),\n        ImmutableMap.of(\"testKey\", \"testContext\"),\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    Assert.assertEquals(task.getType(), fromJson.getType());\n    Assert.assertEquals(task.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(task.getInterval(), fromJson.getInterval());\n    Assert.assertEquals(task.getSegments(), fromJson.getSegments());\n    Assert.assertEquals(task.getDimensionsSpec(), fromJson.getDimensionsSpec());\n    Assert.assertEquals(task.isKeepSegmentGranularity(), fromJson.isKeepSegmentGranularity());\n    Assert.assertEquals(task.getTargetCompactionSizeBytes(), fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(task.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(task.getContext(), fromJson.getContext());\n  }\n","date":"2019-01-04 09:50:45","endLine":390,"groupId":"16701","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/86/7cdfe03c74e942da7029a636d3ee9e1e7c92b5.src","preCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final CompactionTask task = new CompactionTask(\n        null,\n        null,\n        DATA_SOURCE,\n        null,\n        SEGMENTS,\n        null,\n        null,\n        null,\n        createTuningConfig(),\n        ImmutableMap.of(\"testKey\", \"testContext\"),\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    Assert.assertEquals(task.getType(), fromJson.getType());\n    Assert.assertEquals(task.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(task.getInterval(), fromJson.getInterval());\n    Assert.assertEquals(task.getSegments(), fromJson.getSegments());\n    Assert.assertEquals(task.getDimensionsSpec(), fromJson.getDimensionsSpec());\n    Assert.assertEquals(task.isKeepSegmentGranularity(), fromJson.isKeepSegmentGranularity());\n    Assert.assertEquals(task.getTargetCompactionSizeBytes(), fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(task.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(task.getContext(), fromJson.getContext());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"}],"commitId":"9ad6a733a58e81ef2e0dee067b1df8477af1dab4","commitMessage":"@@@Add support segmentGranularity for CompactionTask (#6758)\n\n* Add support segmentGranularity\n\n* add doc and fix combination of options\n\n* improve doc\n","date":"2019-01-04 09:50:45","modifiedFileCount":"5","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-01-11 01:50:14","codes":[{"authorDate":"2019-01-11 01:50:14","commitOrder":4,"curCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final CompactionTask task = builder\n        .interval(COMPACTION_INTERVAL)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","date":"2019-01-11 01:50:14","endLine":350,"groupId":"11692","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f7/59cc7c1c622766f0623fa48f3320ec1f3375f6.src","preCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final CompactionTask task = new CompactionTask(\n        null,\n        null,\n        DATA_SOURCE,\n        COMPACTION_INTERVAL,\n        null,\n        null,\n        null,\n        null,\n        null,\n        createTuningConfig(),\n        ImmutableMap.of(\"testKey\", \"testContext\"),\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    Assert.assertEquals(task.getType(), fromJson.getType());\n    Assert.assertEquals(task.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(task.getInterval(), fromJson.getInterval());\n    Assert.assertEquals(task.getSegments(), fromJson.getSegments());\n    Assert.assertEquals(task.getDimensionsSpec(), fromJson.getDimensionsSpec());\n    Assert.assertEquals(task.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(task.getContext(), fromJson.getContext());\n    Assert.assertNull(fromJson.getSegmentProvider().getSegments());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"},{"authorDate":"2019-01-11 01:50:14","commitOrder":4,"curCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final CompactionTask task = builder\n        .segments(SEGMENTS)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","date":"2019-01-11 01:50:14","endLine":371,"groupId":"11692","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f7/59cc7c1c622766f0623fa48f3320ec1f3375f6.src","preCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final CompactionTask task = new CompactionTask(\n        null,\n        null,\n        DATA_SOURCE,\n        null,\n        SEGMENTS,\n        null,\n        null,\n        null,\n        null,\n        createTuningConfig(),\n        ImmutableMap.of(\"testKey\", \"testContext\"),\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    Assert.assertEquals(task.getType(), fromJson.getType());\n    Assert.assertEquals(task.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(task.getInterval(), fromJson.getInterval());\n    Assert.assertEquals(task.getSegments(), fromJson.getSegments());\n    Assert.assertEquals(task.getDimensionsSpec(), fromJson.getDimensionsSpec());\n    Assert.assertEquals(task.isKeepSegmentGranularity(), fromJson.isKeepSegmentGranularity());\n    Assert.assertEquals(task.getTargetCompactionSizeBytes(), fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(task.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(task.getContext(), fromJson.getContext());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"M"}],"commitId":"c35a39d70bf705aa49c3a3c97bab87959bb80a4e","commitMessage":"@@@Add support maxRowsPerSegment for auto compaction (#6780)\n\n* Add support maxRowsPerSegment for auto compaction\n\n* fix build\n\n* fix build\n\n* fix teamcity\n\n* add test\n\n* fix test\n\n* address comment\n","date":"2019-01-11 01:50:14","modifiedFileCount":"33","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-02-24 09:02:56","codes":[{"authorDate":"2019-02-24 09:02:56","commitOrder":5,"curCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory,\n        coordinatorClient,\n        segmentLoaderFactory,\n        retryPolicyFactory\n    );\n    final CompactionTask task = builder\n        .interval(COMPACTION_INTERVAL)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","date":"2019-02-24 09:02:56","endLine":363,"groupId":"11692","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/51/17c1a31c88aed24b6a09f380d4c84fb2a9340b.src","preCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final CompactionTask task = builder\n        .interval(COMPACTION_INTERVAL)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2019-02-24 09:02:56","commitOrder":5,"curCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory,\n        coordinatorClient,\n        segmentLoaderFactory,\n        retryPolicyFactory\n    );\n    final CompactionTask task = builder\n        .segments(SEGMENTS)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","date":"2019-02-24 09:02:56","endLine":387,"groupId":"11692","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/51/17c1a31c88aed24b6a09f380d4c84fb2a9340b.src","preCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory\n    );\n    final CompactionTask task = builder\n        .segments(SEGMENTS)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"M"}],"commitId":"1c2753ab9033ff0c785d6e80f5f7c07dc34c3889","commitMessage":"@@@ParallelIndexSubTask: support ingestSegment in delegating factories (#7089)\n\nIndexTask had special-cased code to properly send a TaskToolbox to a\nIngestSegmentFirehoseFactory that's nested inside a CombiningFirehoseFactory. \nbut ParallelIndexSubTask didn't.\n\nThis change refactors IngestSegmentFirehoseFactory so that it doesn't need a\nTaskToolbox; it instead gets a CoordinatorClient and a SegmentLoaderFactory\ndirectly injected into it.\n\nThis also refactors SegmentLoaderFactory so it doesn't depend on\nan injectable SegmentLoaderConfig.  since its only method always\nreplaces the preconfigured SegmentLoaderConfig anyway.\nThis makes it possible to use SegmentLoaderFactory without setting\ndruid.segmentCaches.locations to some dummy value.\n\nAnother goal of this PR is to make it possible for IngestSegmentFirehoseFactory\nto list data segments outside of connect() --- specifically.  to make it a\nFiniteFirehoseFactory which can query the coordinator in order to calculate its\nsplits. See #7048.\n\nThis also adds missing datasource name URL-encoding to an API used by\nCoordinatorBasedSegmentHandoffNotifier.","date":"2019-02-24 09:02:56","modifiedFileCount":"21","status":"M","submitter":"David Glasser"},{"authorTime":"2019-07-30 08:06:33","codes":[{"authorDate":"2019-07-30 08:06:33","commitOrder":6,"curCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory,\n        coordinatorClient,\n        segmentLoaderFactory,\n        retryPolicyFactory,\n        appenderatorsManager\n    );\n    final CompactionTask task = builder\n        .interval(COMPACTION_INTERVAL)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","date":"2019-07-30 08:06:33","endLine":346,"groupId":"11692","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/eb89345aaccfcde0fbf4afde5b27568d3fc1eb.src","preCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory,\n        coordinatorClient,\n        segmentLoaderFactory,\n        retryPolicyFactory\n    );\n    final CompactionTask task = builder\n        .interval(COMPACTION_INTERVAL)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"},{"authorDate":"2019-07-30 08:06:33","commitOrder":6,"curCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory,\n        coordinatorClient,\n        segmentLoaderFactory,\n        retryPolicyFactory,\n        appenderatorsManager\n    );\n    final CompactionTask task = builder\n        .segments(SEGMENTS)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","date":"2019-07-30 08:06:33","endLine":371,"groupId":"11692","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/eb89345aaccfcde0fbf4afde5b27568d3fc1eb.src","preCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory,\n        coordinatorClient,\n        segmentLoaderFactory,\n        retryPolicyFactory\n    );\n    final CompactionTask task = builder\n        .segments(SEGMENTS)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"}],"commitId":"640b7afc1cee911a27de7bf938dda24a85ba1510","commitMessage":"@@@Add CliIndexer process type and initial task runner implementation (#8107)\n\n* Add CliIndexer process type and initial task runner implementation\n\n* Fix HttpRemoteTaskRunnerTest\n\n* Remove batch sanity check on PeonAppenderatorsManager\n\n* Fix paralle index tests\n\n* PR comments\n\n* Adjust Jersey resource logging\n\n* Additional cleanup\n\n* Fix SystemSchemaTest\n\n* Add comment to LocalDataSegmentPusherTest absolute path test\n\n* More PR comments\n\n* Use Server annotated with RemoteChatHandler\n\n* More PR comments\n\n* Checkstyle\n\n* PR comments\n\n* Add task shutdown to stopGracefully\n\n* Small cleanup\n\n* Compile fix\n\n* Address PR comments\n\n* Adjust TaskReportFileWriter and fix nits\n\n* Remove unnecessary closer\n\n* More PR comments\n\n* Minor adjustments\n\n* PR comments\n\n* ThreadingTaskRunner: cancel  task run future not shutdownFuture and remove thread from workitem\n","date":"2019-07-30 08:06:33","modifiedFileCount":"64","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2019-10-10 02:12:00","codes":[{"authorDate":"2019-10-10 02:12:00","commitOrder":7,"curCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        OBJECT_MAPPER,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        ROW_INGESTION_METERS_FACTORY,\n        COORDINATOR_CLIENT,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY,\n        APPENDERATORS_MANAGER\n    );\n    final CompactionTask task = builder\n        .inputSpec(\n            new CompactionIntervalSpec(COMPACTION_INTERVAL, SegmentUtils.hashIds(SEGMENTS))\n        )\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(task);\n    final CompactionTask fromJson = OBJECT_MAPPER.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","date":"2019-10-10 02:12:00","endLine":352,"groupId":"11692","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fd/201d933c67e13e31fa6cb784a9bb71bb1f5f06.src","preCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory,\n        coordinatorClient,\n        segmentLoaderFactory,\n        retryPolicyFactory,\n        appenderatorsManager\n    );\n    final CompactionTask task = builder\n        .interval(COMPACTION_INTERVAL)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"M"},{"authorDate":"2019-10-10 02:12:00","commitOrder":7,"curCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        OBJECT_MAPPER,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        ROW_INGESTION_METERS_FACTORY,\n        COORDINATOR_CLIENT,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY,\n        APPENDERATORS_MANAGER\n    );\n    final CompactionTask task = builder\n        .segments(SEGMENTS)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(task);\n    final CompactionTask fromJson = OBJECT_MAPPER.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","date":"2019-10-10 02:12:00","endLine":377,"groupId":"11692","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fd/201d933c67e13e31fa6cb784a9bb71bb1f5f06.src","preCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        objectMapper,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        rowIngestionMetersFactory,\n        coordinatorClient,\n        segmentLoaderFactory,\n        retryPolicyFactory,\n        appenderatorsManager\n    );\n    final CompactionTask task = builder\n        .segments(SEGMENTS)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = objectMapper.writeValueAsBytes(task);\n    final CompactionTask fromJson = objectMapper.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":355,"status":"M"}],"commitId":"96d8523ecbc0108e622084671172fded81065aa0","commitMessage":"@@@Use hash of Segment IDs instead of a list of explicit segments in auto compaction (#8571)\n\n* IOConfig for compaction task\n\n* add javadoc.  doc.  unit test\n\n* fix webconsole test\n\n* add spelling\n\n* address comments\n\n* fix build and test\n\n* address comments\n","date":"2019-10-10 02:12:00","modifiedFileCount":"16","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-10-19 04:24:14","codes":[{"authorDate":"2019-10-19 04:24:14","commitOrder":8,"curCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        OBJECT_MAPPER,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        ROW_INGESTION_METERS_FACTORY,\n        INDEXING_SERVICE_CLIENT,\n        COORDINATOR_CLIENT,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY,\n        APPENDERATORS_MANAGER\n    );\n    final CompactionTask task = builder\n        .inputSpec(\n            new CompactionIntervalSpec(COMPACTION_INTERVAL, SegmentUtils.hashIds(SEGMENTS))\n        )\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(task);\n    final CompactionTask fromJson = OBJECT_MAPPER.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","date":"2019-10-19 04:24:14","endLine":362,"groupId":"11692","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/32/53fdc4f6721a3c50d3358c8490177d835b99c8.src","preCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        OBJECT_MAPPER,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        ROW_INGESTION_METERS_FACTORY,\n        COORDINATOR_CLIENT,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY,\n        APPENDERATORS_MANAGER\n    );\n    final CompactionTask task = builder\n        .inputSpec(\n            new CompactionIntervalSpec(COMPACTION_INTERVAL, SegmentUtils.hashIds(SEGMENTS))\n        )\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(task);\n    final CompactionTask fromJson = OBJECT_MAPPER.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"M"},{"authorDate":"2019-10-19 04:24:14","commitOrder":8,"curCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        OBJECT_MAPPER,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        ROW_INGESTION_METERS_FACTORY,\n        INDEXING_SERVICE_CLIENT,\n        COORDINATOR_CLIENT,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY,\n        APPENDERATORS_MANAGER\n    );\n    final CompactionTask task = builder\n        .segments(SEGMENTS)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(task);\n    final CompactionTask fromJson = OBJECT_MAPPER.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","date":"2019-10-19 04:24:14","endLine":388,"groupId":"11692","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/32/53fdc4f6721a3c50d3358c8490177d835b99c8.src","preCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        OBJECT_MAPPER,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        ROW_INGESTION_METERS_FACTORY,\n        COORDINATOR_CLIENT,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY,\n        APPENDERATORS_MANAGER\n    );\n    final CompactionTask task = builder\n        .segments(SEGMENTS)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(task);\n    final CompactionTask fromJson = OBJECT_MAPPER.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"}],"commitId":"30c15900bec7f4df7a72088ec076223839da258f","commitMessage":"@@@Auto compaction based on parallel indexing (#8570)\n\n* Auto compaction based on parallel indexing\n\n* javadoc and doc\n\n* typo\n\n* update spell\n\n* addressing comments\n\n* address comments\n\n* fix log\n\n* fix build\n\n* fix test\n\n* increase default max input segment bytes per task\n\n* fix test\n","date":"2019-10-19 04:24:14","modifiedFileCount":"28","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-08-27 08:08:12","codes":[{"authorDate":"2020-08-27 08:08:12","commitOrder":9,"curCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask task = builder\n        .inputSpec(\n            new CompactionIntervalSpec(COMPACTION_INTERVAL, SegmentUtils.hashIds(SEGMENTS))\n        )\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(task);\n    final CompactionTask fromJson = OBJECT_MAPPER.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","date":"2020-08-27 08:08:12","endLine":374,"groupId":"11692","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e6/35381327075830831d9c03e9520b7941ab304c.src","preCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        OBJECT_MAPPER,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        ROW_INGESTION_METERS_FACTORY,\n        INDEXING_SERVICE_CLIENT,\n        COORDINATOR_CLIENT,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY,\n        APPENDERATORS_MANAGER\n    );\n    final CompactionTask task = builder\n        .inputSpec(\n            new CompactionIntervalSpec(COMPACTION_INTERVAL, SegmentUtils.hashIds(SEGMENTS))\n        )\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(task);\n    final CompactionTask fromJson = OBJECT_MAPPER.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"M"},{"authorDate":"2020-08-27 08:08:12","commitOrder":9,"curCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask task = builder\n        .segments(SEGMENTS)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(task);\n    final CompactionTask fromJson = OBJECT_MAPPER.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","date":"2020-08-27 08:08:12","endLine":393,"groupId":"11692","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e6/35381327075830831d9c03e9520b7941ab304c.src","preCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        OBJECT_MAPPER,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n        null,\n        ROW_INGESTION_METERS_FACTORY,\n        INDEXING_SERVICE_CLIENT,\n        COORDINATOR_CLIENT,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY,\n        APPENDERATORS_MANAGER\n    );\n    final CompactionTask task = builder\n        .segments(SEGMENTS)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(task);\n    final CompactionTask fromJson = OBJECT_MAPPER.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":377,"status":"M"}],"commitId":"f82fd22fa7de175200b7127c34c2eb2900bf7317","commitMessage":"@@@Move tools for indexing to TaskToolbox instead of injecting them in constructor (#10308)\n\n* Move tools for indexing to TaskToolbox instead of injecting them in constructor\n\n* oops.  other changes\n\n* fix test\n\n* unnecessary new file\n\n* fix test\n\n* fix build","date":"2020-08-27 08:08:12","modifiedFileCount":"67","status":"M","submitter":"Jihoon Son"},{"authorTime":"2021-07-21 02:44:19","codes":[{"authorDate":"2021-07-21 02:44:19","commitOrder":10,"curCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentCacheManagerFactory,\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask task = builder\n        .inputSpec(\n            new CompactionIntervalSpec(COMPACTION_INTERVAL, SegmentUtils.hashIds(SEGMENTS))\n        )\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(task);\n    final CompactionTask fromJson = OBJECT_MAPPER.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","date":"2021-07-21 02:44:19","endLine":488,"groupId":"104498","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ac/9e3d011aef9e7655bf6426661366cead8b80e9.src","preCode":"  public void testSerdeWithInterval() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask task = builder\n        .inputSpec(\n            new CompactionIntervalSpec(COMPACTION_INTERVAL, SegmentUtils.hashIds(SEGMENTS))\n        )\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(task);\n    final CompactionTask fromJson = OBJECT_MAPPER.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":470,"status":"M"},{"authorDate":"2021-07-21 02:44:19","commitOrder":10,"curCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentCacheManagerFactory,\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask task = builder\n        .segments(SEGMENTS)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(task);\n    final CompactionTask fromJson = OBJECT_MAPPER.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","date":"2021-07-21 02:44:19","endLine":507,"groupId":"104498","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithSegments","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ac/9e3d011aef9e7655bf6426661366cead8b80e9.src","preCode":"  public void testSerdeWithSegments() throws IOException\n  {\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n    final CompactionTask task = builder\n        .segments(SEGMENTS)\n        .tuningConfig(createTuningConfig())\n        .context(ImmutableMap.of(\"testKey\", \"testContext\"))\n        .build();\n\n    final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(task);\n    final CompactionTask fromJson = OBJECT_MAPPER.readValue(bytes, CompactionTask.class);\n    assertEquals(task, fromJson);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":491,"status":"M"}],"commitId":"94c1671eaf7b050972602fdedcb1971cdbde692d","commitMessage":"@@@Split SegmentLoader into SegmentLoader and SegmentCacheManager (#11466)\n\nThis PR splits current SegmentLoader into SegmentLoader and SegmentCacheManager.\n\nSegmentLoader - this class is responsible for building the segment object but does not expose any methods for downloading.  cache space management.  etc. Default implementation delegates the download operations to SegmentCacheManager and only contains the logic for building segments once downloaded. . This class will be used in SegmentManager to construct Segment objects.\n\nSegmentCacheManager - this class manages the segment cache on the local disk. It fetches the segment files to the local disk.  can clean up the cache.  and in the future.  support reserve and release on cache space. [See https://github.com/Make SegmentLoader extensible and customizable #11398]. This class will be used in ingestion tasks such as compaction.  re-indexing where segment files need to be downloaded locally.","date":"2021-07-21 02:44:19","modifiedFileCount":"41","status":"M","submitter":"Abhishek Agarwal"}]
