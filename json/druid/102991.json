[{"authorTime":"2020-07-02 13:20:53","codes":[{"authorDate":"2019-11-26 14:31:19","commitOrder":3,"curCode":"  public String getVersion(URI uri) throws IOException\n  {\n    try {\n      final CloudObjectLocation coords = new CloudObjectLocation(S3Utils.checkURI(uri));\n      final S3ObjectSummary objectSummary =\n          S3Utils.getSingleObjectSummary(s3Client, coords.getBucket(), coords.getPath());\n      return StringUtils.format(\"%d\", objectSummary.getLastModified().getTime());\n    }\n    catch (AmazonServiceException e) {\n      if (S3Utils.isServiceExceptionRecoverable(e)) {\n        \r\n        throw new IOE(e, \"Could not fetch last modified timestamp from URI [%s]\", uri);\n      } else {\n        throw new RE(e, \"Error fetching last modified timestamp from URI [%s]\", uri);\n      }\n    }\n  }\n","date":"2019-11-26 14:31:19","endLine":293,"groupId":"2842","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getVersion","params":"(URIuri)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9c/413e7ec4d0c5f91f76128e158435c0460b84b7.src","preCode":"  public String getVersion(URI uri) throws IOException\n  {\n    try {\n      final CloudObjectLocation coords = new CloudObjectLocation(S3Utils.checkURI(uri));\n      final S3ObjectSummary objectSummary =\n          S3Utils.getSingleObjectSummary(s3Client, coords.getBucket(), coords.getPath());\n      return StringUtils.format(\"%d\", objectSummary.getLastModified().getTime());\n    }\n    catch (AmazonServiceException e) {\n      if (S3Utils.isServiceExceptionRecoverable(e)) {\n        \r\n        throw new IOE(e, \"Could not fetch last modified timestamp from URI [%s]\", uri);\n      } else {\n        throw new RE(e, \"Error fetching last modified timestamp from URI [%s]\", uri);\n      }\n    }\n  }\n","realPath":"extensions-core/s3-extensions/src/main/java/org/apache/druid/storage/s3/S3DataSegmentPuller.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"NB"},{"authorDate":"2020-07-02 13:20:53","commitOrder":3,"curCode":"  public String getVersion(URI uri) throws IOException\n  {\n    try {\n      final CloudObjectLocation coords = new CloudObjectLocation(OssUtils.checkURI(uri));\n      final OSSObjectSummary objectSummary =\n          OssUtils.getSingleObjectSummary(client, coords.getBucket(), coords.getPath());\n      return StringUtils.format(\"%d\", objectSummary.getLastModified().getTime());\n    }\n    catch (OSSException e) {\n      if (OssUtils.isServiceExceptionRecoverable(e)) {\n        \r\n        throw new IOE(e, \"Could not fetch last modified timestamp from URI [%s]\", uri);\n      } else {\n        throw new RE(e, \"Error fetching last modified timestamp from URI [%s]\", uri);\n      }\n    }\n  }\n","date":"2020-07-02 13:20:53","endLine":292,"groupId":"2842","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"getVersion","params":"(URIuri)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/82/c0f2ed8c24c22edb2b56fe3fe7595b2986c3a3.src","preCode":"  public String getVersion(URI uri) throws IOException\n  {\n    try {\n      final CloudObjectLocation coords = new CloudObjectLocation(OssUtils.checkURI(uri));\n      final OSSObjectSummary objectSummary =\n          OssUtils.getSingleObjectSummary(client, coords.getBucket(), coords.getPath());\n      return StringUtils.format(\"%d\", objectSummary.getLastModified().getTime());\n    }\n    catch (OSSException e) {\n      if (OssUtils.isServiceExceptionRecoverable(e)) {\n        \r\n        throw new IOE(e, \"Could not fetch last modified timestamp from URI [%s]\", uri);\n      } else {\n        throw new RE(e, \"Error fetching last modified timestamp from URI [%s]\", uri);\n      }\n    }\n  }\n","realPath":"extensions-contrib/aliyun-oss-extensions/src/main/java/org/apache/druid/storage/aliyun/OssDataSegmentPuller.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"B"}],"commitId":"60c6bd5b4c44f28f5dbff48e70c6138ce35204b6","commitMessage":"@@@support Aliyun OSS service as deep storage (#9898)\n\n* init commit.  all tests passed\n\n* fix format\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>\n\n* data stored successfully\n\n* modify config path\n\n* add doc\n\n* add aliyun-oss extension to project\n\n* remove descriptor deletion code to avoid warning message output by aliyun client\n\n* fix warnings reported by lgtm-com\n\n* fix ci warnings\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>\n\n* fix errors reported by intellj inspection check\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>\n\n* fix doc spelling check\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>\n\n* fix dependency warnings reported by ci\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>\n\n* fix warnings reported by CI\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>\n\n* add package configuration to support showing extension info\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>\n\n* add IT test cases and fix bugs\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>\n\n* 1. code review comments adopted\n2. change schema from 'aliyun-oss' to 'oss'\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>\n\n* add license info\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>\n\n* fix doc\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>\n\n* exclude execution of IT testcases of OSS extension from CI\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>\n\n* put the extensions under contrib group and add to distribution\n\n* fix names in test cases\n\n* add unit test to cover OssInputSource\n\n* fix names in test cases\n\n* fix dependency problem reported by CI\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>","date":"2020-07-02 13:20:53","modifiedFileCount":"1","status":"M","submitter":"frank chen"},{"authorTime":"2020-07-02 13:20:53","codes":[{"authorDate":"2021-02-05 18:49:58","commitOrder":4,"curCode":"  public String getVersion(URI uri) throws IOException\n  {\n    try {\n      final CloudObjectLocation coords = new CloudObjectLocation(S3Utils.checkURI(uri));\n      final S3ObjectSummary objectSummary =\n          S3Utils.getSingleObjectSummary(s3Client, coords.getBucket(), coords.getPath());\n      return StringUtils.format(\"%d\", objectSummary.getLastModified().getTime());\n    }\n    catch (AmazonClientException e) {\n      if (AWSClientUtil.isClientExceptionRecoverable(e)) {\n        \r\n        throw new IOE(e, \"Could not fetch last modified timestamp from URI [%s]\", uri);\n      } else {\n        throw new RE(e, \"Error fetching last modified timestamp from URI [%s]\", uri);\n      }\n    }\n  }\n","date":"2021-02-05 18:49:58","endLine":277,"groupId":"102991","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getVersion","params":"(URIuri)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/73/df48a17d759b9dc8581dced70cafb41b433d94.src","preCode":"  public String getVersion(URI uri) throws IOException\n  {\n    try {\n      final CloudObjectLocation coords = new CloudObjectLocation(S3Utils.checkURI(uri));\n      final S3ObjectSummary objectSummary =\n          S3Utils.getSingleObjectSummary(s3Client, coords.getBucket(), coords.getPath());\n      return StringUtils.format(\"%d\", objectSummary.getLastModified().getTime());\n    }\n    catch (AmazonServiceException e) {\n      if (S3Utils.isServiceExceptionRecoverable(e)) {\n        \r\n        throw new IOE(e, \"Could not fetch last modified timestamp from URI [%s]\", uri);\n      } else {\n        throw new RE(e, \"Error fetching last modified timestamp from URI [%s]\", uri);\n      }\n    }\n  }\n","realPath":"extensions-core/s3-extensions/src/main/java/org/apache/druid/storage/s3/S3DataSegmentPuller.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"},{"authorDate":"2020-07-02 13:20:53","commitOrder":4,"curCode":"  public String getVersion(URI uri) throws IOException\n  {\n    try {\n      final CloudObjectLocation coords = new CloudObjectLocation(OssUtils.checkURI(uri));\n      final OSSObjectSummary objectSummary =\n          OssUtils.getSingleObjectSummary(client, coords.getBucket(), coords.getPath());\n      return StringUtils.format(\"%d\", objectSummary.getLastModified().getTime());\n    }\n    catch (OSSException e) {\n      if (OssUtils.isServiceExceptionRecoverable(e)) {\n        \r\n        throw new IOE(e, \"Could not fetch last modified timestamp from URI [%s]\", uri);\n      } else {\n        throw new RE(e, \"Error fetching last modified timestamp from URI [%s]\", uri);\n      }\n    }\n  }\n","date":"2020-07-02 13:20:53","endLine":292,"groupId":"102991","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getVersion","params":"(URIuri)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/82/c0f2ed8c24c22edb2b56fe3fe7595b2986c3a3.src","preCode":"  public String getVersion(URI uri) throws IOException\n  {\n    try {\n      final CloudObjectLocation coords = new CloudObjectLocation(OssUtils.checkURI(uri));\n      final OSSObjectSummary objectSummary =\n          OssUtils.getSingleObjectSummary(client, coords.getBucket(), coords.getPath());\n      return StringUtils.format(\"%d\", objectSummary.getLastModified().getTime());\n    }\n    catch (OSSException e) {\n      if (OssUtils.isServiceExceptionRecoverable(e)) {\n        \r\n        throw new IOE(e, \"Could not fetch last modified timestamp from URI [%s]\", uri);\n      } else {\n        throw new RE(e, \"Error fetching last modified timestamp from URI [%s]\", uri);\n      }\n    }\n  }\n","realPath":"extensions-contrib/aliyun-oss-extensions/src/main/java/org/apache/druid/storage/aliyun/OssDataSegmentPuller.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"N"}],"commitId":"96d26e53380aea78337ff098f239df29b7076382","commitMessage":"@@@Fix kinesis ingestion bugs (#10761)\n\n* add offsetFetchPeriod to kinesis ingestion doc\n\n* Remove jackson dependencies from extensions\n\n* Use fixed delay for lag collection\n\n* Metrics reset after finishing processing\n\n* comments\n\n* Broaden the list of exceptions to retry for\n\n* Unit tests\n\n* Add more tests\n\n* Refactoring\n\n* re-order metrics\n\n* Doc suggestions\n\nCo-authored-by: Charles Smith <38529548+techdocsmith@users.noreply.github.com>\n\n* Add tests\n\nCo-authored-by: Charles Smith <38529548+techdocsmith@users.noreply.github.com>","date":"2021-02-05 18:49:58","modifiedFileCount":"9","status":"M","submitter":"Abhishek Agarwal"}]
