[{"authorTime":"2020-01-17 06:40:32","codes":[{"authorDate":"2020-01-17 13:02:37","commitOrder":2,"curCode":"  public void testPrimitiveEarliestInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val1), SUM(val2), SUM(val3) FROM (SELECT dim2, EARLIEST(m1) AS val1, EARLIEST(cnt) AS val2, EARLIEST(m2) AS val3 FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(\n                                            new FloatFirstAggregatorFactory(\"a0:a\", \"m1\"),\n                                            new LongFirstAggregatorFactory(\"a1:a\", \"cnt\"),\n                                            new DoubleFirstAggregatorFactory(\"a2:a\", \"m2\"))\n                                        )\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a1\", \"a1:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a2\", \"a2:a\")\n\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(\n                            new DoubleSumAggregatorFactory(\"_a0\", \"a0\"),\n                            new LongSumAggregatorFactory(\"_a1\", \"a1\"),\n                            new DoubleSumAggregatorFactory(\"_a2\", \"a2\")\n                                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{11.0, 4L, 11.0}) : ImmutableList.of(new Object[]{8.0, 3L, 8.0})\n    );\n  }\n","date":"2020-01-17 13:02:37","endLine":1512,"groupId":"17935","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimitiveEarliestInSubquery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/20/8db301e077c61dfcf9a39916242aa75d468a54.src","preCode":"  public void testPrimitiveEarliestInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val1), SUM(val2), SUM(val3) FROM (SELECT dim2, EARLIEST(m1) AS val1, EARLIEST(cnt) AS val2, EARLIEST(m2) AS val3 FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(\n                                            new FloatFirstAggregatorFactory(\"a0:a\", \"m1\"),\n                                            new LongFirstAggregatorFactory(\"a1:a\", \"cnt\"),\n                                            new DoubleFirstAggregatorFactory(\"a2:a\", \"m2\"))\n                                        )\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a1\", \"a1:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a2\", \"a2:a\")\n\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(\n                            new DoubleSumAggregatorFactory(\"_a0\", \"a0\"),\n                            new LongSumAggregatorFactory(\"_a1\", \"a1\"),\n                            new DoubleSumAggregatorFactory(\"_a2\", \"a2\")\n                                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{11.0, 4L, 11.0}) : ImmutableList.of(new Object[]{8.0, 3L, 8.0})\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1468,"status":"B"},{"authorDate":"2020-01-17 06:40:32","commitOrder":2,"curCode":"  public void testPrimitiveAnyInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val1), SUM(val2), SUM(val3) FROM (SELECT dim2, ANY_VALUE(m1) AS val1, ANY_VALUE(cnt) AS val2, ANY_VALUE(m2) AS val3 FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(\n                                            new FloatAnyAggregatorFactory(\"a0:a\", \"m1\"),\n                                            new LongAnyAggregatorFactory(\"a1:a\", \"cnt\"),\n                                            new DoubleAnyAggregatorFactory(\"a2:a\", \"m2\"))\n                                        )\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a1\", \"a1:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a2\", \"a2:a\")\n\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(\n                            new DoubleSumAggregatorFactory(\"_a0\", \"a0\"),\n                            new LongSumAggregatorFactory(\"_a1\", \"a1\"),\n                            new DoubleSumAggregatorFactory(\"_a2\", \"a2\")\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{11.0, 4L, 11.0}) : ImmutableList.of(new Object[]{8.0, 3L, 8.0})\n    );\n  }\n","date":"2020-01-17 06:40:32","endLine":1499,"groupId":"17935","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimitiveAnyInSubquery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/89/9ffa2897512cf59d731da308cefd6cccdb7837.src","preCode":"  public void testPrimitiveAnyInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val1), SUM(val2), SUM(val3) FROM (SELECT dim2, ANY_VALUE(m1) AS val1, ANY_VALUE(cnt) AS val2, ANY_VALUE(m2) AS val3 FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(\n                                            new FloatAnyAggregatorFactory(\"a0:a\", \"m1\"),\n                                            new LongAnyAggregatorFactory(\"a1:a\", \"cnt\"),\n                                            new DoubleAnyAggregatorFactory(\"a2:a\", \"m2\"))\n                                        )\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a1\", \"a1:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a2\", \"a2:a\")\n\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(\n                            new DoubleSumAggregatorFactory(\"_a0\", \"a0\"),\n                            new LongSumAggregatorFactory(\"_a1\", \"a1\"),\n                            new DoubleSumAggregatorFactory(\"_a2\", \"a2\")\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{11.0, 4L, 11.0}) : ImmutableList.of(new Object[]{8.0, 3L, 8.0})\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1455,"status":"NB"}],"commitId":"68ed2a2c8fd1337d87f8fcb62ce1f91701b8e472","commitMessage":"@@@Fix LATEST / EARLIEST Buffer Aggregator does not work on String column  (#9197)\n\n* fix buff limit bug\n\n* add tests\n\n* add test\n\n* add tests\n\n* fix checkstyle\n","date":"2020-01-17 13:02:37","modifiedFileCount":"2","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-09-15 10:44:58","codes":[{"authorDate":"2020-01-17 13:02:37","commitOrder":3,"curCode":"  public void testPrimitiveEarliestInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val1), SUM(val2), SUM(val3) FROM (SELECT dim2, EARLIEST(m1) AS val1, EARLIEST(cnt) AS val2, EARLIEST(m2) AS val3 FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(\n                                            new FloatFirstAggregatorFactory(\"a0:a\", \"m1\"),\n                                            new LongFirstAggregatorFactory(\"a1:a\", \"cnt\"),\n                                            new DoubleFirstAggregatorFactory(\"a2:a\", \"m2\"))\n                                        )\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a1\", \"a1:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a2\", \"a2:a\")\n\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(\n                            new DoubleSumAggregatorFactory(\"_a0\", \"a0\"),\n                            new LongSumAggregatorFactory(\"_a1\", \"a1\"),\n                            new DoubleSumAggregatorFactory(\"_a2\", \"a2\")\n                                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{11.0, 4L, 11.0}) : ImmutableList.of(new Object[]{8.0, 3L, 8.0})\n    );\n  }\n","date":"2020-01-17 13:02:37","endLine":1512,"groupId":"101604","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrimitiveEarliestInSubquery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/20/8db301e077c61dfcf9a39916242aa75d468a54.src","preCode":"  public void testPrimitiveEarliestInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val1), SUM(val2), SUM(val3) FROM (SELECT dim2, EARLIEST(m1) AS val1, EARLIEST(cnt) AS val2, EARLIEST(m2) AS val3 FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(\n                                            new FloatFirstAggregatorFactory(\"a0:a\", \"m1\"),\n                                            new LongFirstAggregatorFactory(\"a1:a\", \"cnt\"),\n                                            new DoubleFirstAggregatorFactory(\"a2:a\", \"m2\"))\n                                        )\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a1\", \"a1:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a2\", \"a2:a\")\n\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(\n                            new DoubleSumAggregatorFactory(\"_a0\", \"a0\"),\n                            new LongSumAggregatorFactory(\"_a1\", \"a1\"),\n                            new DoubleSumAggregatorFactory(\"_a2\", \"a2\")\n                                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{11.0, 4L, 11.0}) : ImmutableList.of(new Object[]{8.0, 3L, 8.0})\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1468,"status":"N"},{"authorDate":"2020-09-15 10:44:58","commitOrder":3,"curCode":"  public void testPrimitiveAnyInSubquery() throws Exception\n  {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    testQuery(\n        \"SELECT SUM(val1), SUM(val2), SUM(val3) FROM (SELECT dim2, ANY_VALUE(m1) AS val1, ANY_VALUE(cnt) AS val2, ANY_VALUE(m2) AS val3 FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(\n                                            new FloatAnyAggregatorFactory(\"a0:a\", \"m1\"),\n                                            new LongAnyAggregatorFactory(\"a1:a\", \"cnt\"),\n                                            new DoubleAnyAggregatorFactory(\"a2:a\", \"m2\"))\n                                        )\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a1\", \"a1:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a2\", \"a2:a\")\n\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(\n                            new DoubleSumAggregatorFactory(\"_a0\", \"a0\"),\n                            new LongSumAggregatorFactory(\"_a1\", \"a1\"),\n                            new DoubleSumAggregatorFactory(\"_a2\", \"a2\")\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{11.0, 4L, 11.0}) : ImmutableList.of(new Object[]{8.0, 3L, 8.0})\n    );\n  }\n","date":"2020-09-15 10:44:58","endLine":2246,"groupId":"101604","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrimitiveAnyInSubquery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/eb/7fa4ceed3c7b804ab1ca49735882421e2e2569.src","preCode":"  public void testPrimitiveAnyInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val1), SUM(val2), SUM(val3) FROM (SELECT dim2, ANY_VALUE(m1) AS val1, ANY_VALUE(cnt) AS val2, ANY_VALUE(m2) AS val3 FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(\n                                            new FloatAnyAggregatorFactory(\"a0:a\", \"m1\"),\n                                            new LongAnyAggregatorFactory(\"a1:a\", \"cnt\"),\n                                            new DoubleAnyAggregatorFactory(\"a2:a\", \"m2\"))\n                                        )\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a1\", \"a1:a\"),\n                                                new FinalizingFieldAccessPostAggregator(\"a2\", \"a2:a\")\n\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(\n                            new DoubleSumAggregatorFactory(\"_a0\", \"a0\"),\n                            new LongSumAggregatorFactory(\"_a1\", \"a1\"),\n                            new DoubleSumAggregatorFactory(\"_a2\", \"a2\")\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{11.0, 4L, 11.0}) : ImmutableList.of(new Object[]{8.0, 3L, 8.0})\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2199,"status":"M"}],"commitId":"f71ba6f2c202d3edc0cdf8efa2274d0e247ddca8","commitMessage":"@@@Vectorized ANY aggregators (#10338)\n\n* WIP vectorized ANY aggregators\n\n* tests\n\n* fix aggs\n\n* cleanup\n\n* code review + tests\n\n* docs\n\n* use NilVectorSelector when needed\n\n* fix spellcheck\n\n* dont instantiate vectors\n\n* cleanup","date":"2020-09-15 10:44:58","modifiedFileCount":"5","status":"M","submitter":"Suneet Saldanha"}]
