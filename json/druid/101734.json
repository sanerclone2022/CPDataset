[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTopNFilterJoin() throws Exception\n  {\n    DimFilter filter = NullHandling.replaceWithDefault() ?\n                       IN(\"dim2\", Arrays.asList(null, \"a\"), null)\n                                                         : SELECTOR(\"dim2\", \"a\", null);\n    \r\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  INNER JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            new TopNQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .dimension(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                .aggregators(AGGS(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                .metric(new NumericTopNMetricSpec(\"a0\"))\n                .threshold(2)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build(),\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(filter)\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(AGGS(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L}\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":4598,"groupId":"15545","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNFilterJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testTopNFilterJoin() throws Exception\n  {\n    DimFilter filter = NullHandling.replaceWithDefault() ?\n                       IN(\"dim2\", Arrays.asList(null, \"a\"), null)\n                                                         : SELECTOR(\"dim2\", \"a\", null);\n    \r\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  INNER JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            new TopNQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .dimension(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                .aggregators(AGGS(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                .metric(new NumericTopNMetricSpec(\"a0\"))\n                .threshold(2)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build(),\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(filter)\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(AGGS(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4532,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testRemovableLeftJoin() throws Exception\n  {\n    \r\n\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  LEFT JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(AGGS(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"def\", 1L}\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":4712,"groupId":"11886","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemovableLeftJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testRemovableLeftJoin() throws Exception\n  {\n    \r\n\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  LEFT JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(AGGS(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"def\", 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4663,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testTopNFilterJoin() throws Exception\n  {\n    DimFilter filter = NullHandling.replaceWithDefault() ?\n                       in(\"dim2\", Arrays.asList(null, \"a\"), null)\n                                                         : selector(\"dim2\", \"a\", null);\n    \r\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  INNER JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            new TopNQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .dimension(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                .metric(new NumericTopNMetricSpec(\"a0\"))\n                .threshold(2)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build(),\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(filter)\n                        .setDimensions(dimensionSpec(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":4458,"groupId":"3048","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNFilterJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testTopNFilterJoin() throws Exception\n  {\n    DimFilter filter = NullHandling.replaceWithDefault() ?\n                       IN(\"dim2\", Arrays.asList(null, \"a\"), null)\n                                                         : SELECTOR(\"dim2\", \"a\", null);\n    \r\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  INNER JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            new TopNQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .dimension(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                .aggregators(AGGS(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                .metric(new NumericTopNMetricSpec(\"a0\"))\n                .threshold(2)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build(),\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(filter)\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(AGGS(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4392,"status":"M"},{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testRemovableLeftJoin() throws Exception\n  {\n    \r\n\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  LEFT JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensionSpec(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"def\", 1L}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":4572,"groupId":"18190","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemovableLeftJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testRemovableLeftJoin() throws Exception\n  {\n    \r\n\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  LEFT JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(AGGS(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"def\", 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4523,"status":"M"}],"commitId":"8b803cbc22b15799fd0526de8d6d0eea155ad733","commitMessage":"@@@Added checkstyle for \"Methods starting with Capital Letters\"  (#7118)\n\n* Added checkstyle for \"Methods starting with Capital Letters\" and changed the method names violating this.\n\n* Un-abbreviate the method names in the calcite tests\n\n* Fixed checkstyle errors\n\n* Changed asserts position in the code\n","date":"2019-02-24 12:10:31","modifiedFileCount":"24","status":"M","submitter":"Himanshu Pandey"},{"authorTime":"2019-03-12 02:37:58","codes":[{"authorDate":"2019-03-12 02:37:58","commitOrder":3,"curCode":"  public void testTopNFilterJoin() throws Exception\n  {\n    DimFilter filter = NullHandling.replaceWithDefault() ?\n                       in(\"dim2\", Arrays.asList(null, \"a\"), null)\n                                                         : selector(\"dim2\", \"a\", null);\n    \r\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  INNER JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            new TopNQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .dimension(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                .metric(new NumericTopNMetricSpec(\"a0\"))\n                .threshold(2)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build(),\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(filter)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":4471,"groupId":"3048","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNFilterJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testTopNFilterJoin() throws Exception\n  {\n    DimFilter filter = NullHandling.replaceWithDefault() ?\n                       in(\"dim2\", Arrays.asList(null, \"a\"), null)\n                                                         : selector(\"dim2\", \"a\", null);\n    \r\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  INNER JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            new TopNQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .dimension(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                .metric(new NumericTopNMetricSpec(\"a0\"))\n                .threshold(2)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build(),\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(filter)\n                        .setDimensions(dimensionSpec(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4405,"status":"M"},{"authorDate":"2019-03-12 02:37:58","commitOrder":3,"curCode":"  public void testRemovableLeftJoin() throws Exception\n  {\n    \r\n\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  LEFT JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"def\", 1L}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":4585,"groupId":"11886","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemovableLeftJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testRemovableLeftJoin() throws Exception\n  {\n    \r\n\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  LEFT JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensionSpec(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"def\", 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4536,"status":"M"}],"commitId":"d7ba19d477732578fc310831ed28365b36332752","commitMessage":"@@@sql.  filters.  and virtual columns  (#6902)\n\n* refactor sql planning to re-use expression virtual columns when possible when constructing a DruidQuery.  allowing virtual columns to be defined in filter expressions.  and making resulting native druid queries more concise. also minor refactor of built-in sql aggregators to maximize code re-use\n\n* fix it\n\n* fix it in the right place\n\n* fixup for base64 stuff\n\n* fixup tests\n\n* fix merge conflict on import order\n\n* fixup\n\n* fix imports\n\n* fix tests\n\n* review comments\n\n* refactor\n\n* re-arrange\n\n* better javadoc\n\n* fixup merge\n\n* fixup tests\n\n* fix accidental changes\n","date":"2019-03-12 02:37:58","modifiedFileCount":"33","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-03-12 02:37:58","codes":[{"authorDate":"2019-07-19 04:16:28","commitOrder":4,"curCode":"  public void testTopNFilterJoin() throws Exception\n  {\n    DimFilter filter = NullHandling.replaceWithDefault() ?\n                       in(\"dim2\", Arrays.asList(null, \"a\"), null)\n                                                         : selector(\"dim2\", \"a\", null);\n    \r\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  INNER JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            new TopNQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .dimension(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                .aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\"))\n                .metric(new NumericTopNMetricSpec(\"a0\"))\n                .threshold(2)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build(),\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(filter)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L}\n        )\n    );\n  }\n","date":"2019-07-19 04:16:28","endLine":4687,"groupId":"3048","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNFilterJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d4/c6473f7a07e0fdaaf6a1de428a58c9b523c576.src","preCode":"  public void testTopNFilterJoin() throws Exception\n  {\n    DimFilter filter = NullHandling.replaceWithDefault() ?\n                       in(\"dim2\", Arrays.asList(null, \"a\"), null)\n                                                         : selector(\"dim2\", \"a\", null);\n    \r\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  INNER JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            new TopNQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .dimension(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                .metric(new NumericTopNMetricSpec(\"a0\"))\n                .threshold(2)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build(),\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(filter)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4621,"status":"M"},{"authorDate":"2019-03-12 02:37:58","commitOrder":4,"curCode":"  public void testRemovableLeftJoin() throws Exception\n  {\n    \r\n\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  LEFT JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"def\", 1L}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":4585,"groupId":"11886","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemovableLeftJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testRemovableLeftJoin() throws Exception\n  {\n    \r\n\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  LEFT JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"def\", 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4536,"status":"N"}],"commitId":"03e55d30ebcac9ec97edb1a638a5a99886c41374","commitMessage":"@@@add CachingClusteredClient benchmark.  refactor some stuff (#8089)\n\n* add CachingClusteredClient benchmark.  refactor some stuff\n\n* revert WeightedServerSelectorStrategy to ConnectionCountServerSelectorStrategy and remove getWeight since felt artificial.  default mergeResults in toolchest implementation for topn.  search.  select\n\n* adjust javadoc\n\n* adjustments\n\n* oops\n\n* use it\n\n* use BinaryOperator.  remove CombiningFunction.  use Comparator instead of Ordering.  other review adjustments\n\n* rename createComparator to createResultComparator.  fix typo.  firstNonNull nullable parameters\n","date":"2019-07-19 04:16:28","modifiedFileCount":"50","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-03-12 02:37:58","codes":[{"authorDate":"2020-03-23 07:43:55","commitOrder":5,"curCode":"  public void testTopNFilterJoin() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    \r\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  INNER JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(CalciteTests.DATASOURCE1),\n                                new QueryDataSource(\n                                    new TopNQueryBuilder()\n                                        .dataSource(CalciteTests.DATASOURCE1)\n                                        .intervals(querySegmentSpec(Filtration.eternity()))\n                                        .granularity(Granularities.ALL)\n                                        .dimension(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                        .aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\"))\n                                        .metric(\"a0\")\n                                        .threshold(2)\n                                        .context(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"dim2\"),\n                                    DruidExpression.fromColumn(\"j0.d0\")\n                                ),\n                                JoinType.INNER\n                            )\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L}\n        )\n    );\n  }\n","date":"2020-03-23 07:43:55","endLine":6578,"groupId":"7421","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNFilterJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bf/4aae4768404224949ecf6cb280109ad12228a1.src","preCode":"  public void testTopNFilterJoin() throws Exception\n  {\n    DimFilter filter = NullHandling.replaceWithDefault() ?\n                       in(\"dim2\", Arrays.asList(null, \"a\"), null)\n                                                         : selector(\"dim2\", \"a\", null);\n    \r\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  INNER JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            new TopNQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .dimension(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                .aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\"))\n                .metric(new NumericTopNMetricSpec(\"a0\"))\n                .threshold(2)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build(),\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(filter)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6509,"status":"M"},{"authorDate":"2019-03-12 02:37:58","commitOrder":5,"curCode":"  public void testRemovableLeftJoin() throws Exception\n  {\n    \r\n\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  LEFT JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"def\", 1L}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":4585,"groupId":"11886","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemovableLeftJoin","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testRemovableLeftJoin() throws Exception\n  {\n    \r\n\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  LEFT JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"def\", 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4536,"status":"N"}],"commitId":"54c9325256c33622bc8d198dc0252a157f68f196","commitMessage":"@@@SQL support for joins on subqueries. (#9545)\n\n* SQL support for joins on subqueries.\n\nChanges to SQL module:\n\n- DruidJoinRule: Allow joins on subqueries (left/right are no longer\n  required to be scans or mappings).\n- DruidJoinRel: Add cost estimation code for joins on subqueries.\n- DruidSemiJoinRule.  DruidSemiJoinRel: Removed.  since DruidJoinRule can\n  handle this case now.\n- DruidRel: Remove Nullable annotation from toDruidQuery.  because\n  it is no longer needed (it was used by DruidSemiJoinRel).\n- Update Rules constants to reflect new rules available in our current\n  version of Calcite. Some of these are useful for optimizing joins on\n  subqueries.\n- Rework cost estimation to be in terms of cost per row.  and place all\n  relevant constants in CostEstimates.\n\nOther changes:\n\n- RowBasedColumnSelectorFactory: Don't set hasMultipleValues. The lack\n  of isComplete is enough to let callers know that columns might have\n  multiple values.  and explicitly setting it to true causes\n  ExpressionSelectors to think it definitely has multiple values.  and\n  treat the inputs as arrays. This behavior interfered with some of the\n  new tests that involved queries on lookups.\n- QueryContexts: Add maxSubqueryRows parameter.  and use it in druid-sql\n  tests.\n\n* Fixes for tests.\n\n* Adjustments.","date":"2020-03-23 07:43:55","modifiedFileCount":"24","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-05-29 10:10:26","codes":[{"authorDate":"2020-05-29 10:10:26","commitOrder":6,"curCode":"  public void testTopNFilterJoin(Map<String, Object> queryContext) throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    \r\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  INNER JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(CalciteTests.DATASOURCE1),\n                                new QueryDataSource(\n                                    new TopNQueryBuilder()\n                                        .dataSource(CalciteTests.DATASOURCE1)\n                                        .intervals(querySegmentSpec(Filtration.eternity()))\n                                        .granularity(Granularities.ALL)\n                                        .dimension(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                        .aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\"))\n                                        .metric(\"a0\")\n                                        .threshold(2)\n                                        .context(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"dim2\"),\n                                    DruidExpression.fromColumn(\"j0.d0\")\n                                ),\n                                JoinType.INNER\n                            )\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L}\n        )\n    );\n  }\n","date":"2020-05-29 10:10:26","endLine":6589,"groupId":"7421","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNFilterJoin","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/330453aa846b49e23c181b6395fcd75bea46f5.src","preCode":"  public void testTopNFilterJoin() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    \r\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  INNER JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(CalciteTests.DATASOURCE1),\n                                new QueryDataSource(\n                                    new TopNQueryBuilder()\n                                        .dataSource(CalciteTests.DATASOURCE1)\n                                        .intervals(querySegmentSpec(Filtration.eternity()))\n                                        .granularity(Granularities.ALL)\n                                        .dimension(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                        .aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\"))\n                                        .metric(\"a0\")\n                                        .threshold(2)\n                                        .context(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"dim2\"),\n                                    DruidExpression.fromColumn(\"j0.d0\")\n                                ),\n                                JoinType.INNER\n                            )\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6519,"status":"M"},{"authorDate":"2020-05-29 10:10:26","commitOrder":6,"curCode":"  public void testRemovableLeftJoin(Map<String, Object> queryContext) throws Exception\n  {\n    \r\n\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  LEFT JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"def\", 1L}\n        )\n    );\n  }\n","date":"2020-05-29 10:10:26","endLine":6715,"groupId":"7421","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemovableLeftJoin","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/330453aa846b49e23c181b6395fcd75bea46f5.src","preCode":"  public void testRemovableLeftJoin() throws Exception\n  {\n    \r\n\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  LEFT JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"def\", 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6665,"status":"M"}],"commitId":"cbd587dbd64ea7e5b1a316d19752786f01e50dec","commitMessage":"@@@Add parameterized Calcite tests for join queries (#9923)\n\n* Add parameterized Calcite tests for join queries\n\n* new tests\n\n* review comments","date":"2020-05-29 10:10:26","modifiedFileCount":"2","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2020-05-29 10:10:26","codes":[{"authorDate":"2021-04-15 01:49:27","commitOrder":7,"curCode":"  public void testTopNFilterJoin(Map<String, Object> queryContext) throws Exception\n  {\n    \r\n    if (!isRewriteJoinToFilter(queryContext)) {\n      cannotVectorize();\n    }\n\n    \r\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  INNER JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(CalciteTests.DATASOURCE1),\n                                new QueryDataSource(\n                                    new TopNQueryBuilder()\n                                        .dataSource(CalciteTests.DATASOURCE1)\n                                        .intervals(querySegmentSpec(Filtration.eternity()))\n                                        .granularity(Granularities.ALL)\n                                        .dimension(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                        .aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\"))\n                                        .metric(\"a0\")\n                                        .threshold(2)\n                                        .context(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"dim2\"),\n                                    DruidExpression.fromColumn(\"j0.d0\")\n                                ),\n                                JoinType.INNER\n                            )\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L}\n        )\n    );\n  }\n","date":"2021-04-15 01:49:27","endLine":8455,"groupId":"101734","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNFilterJoin","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e4/7a89a5f784d8e7b5f15645a5dacf38a7460d1d.src","preCode":"  public void testTopNFilterJoin(Map<String, Object> queryContext) throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    \r\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  INNER JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                new TableDataSource(CalciteTests.DATASOURCE1),\n                                new QueryDataSource(\n                                    new TopNQueryBuilder()\n                                        .dataSource(CalciteTests.DATASOURCE1)\n                                        .intervals(querySegmentSpec(Filtration.eternity()))\n                                        .granularity(Granularities.ALL)\n                                        .dimension(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                        .aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\"))\n                                        .metric(\"a0\")\n                                        .threshold(2)\n                                        .context(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                                ),\n                                \"j0.\",\n                                equalsCondition(\n                                    DruidExpression.fromColumn(\"dim2\"),\n                                    DruidExpression.fromColumn(\"j0.d0\")\n                                ),\n                                JoinType.INNER\n                            )\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":8383,"status":"M"},{"authorDate":"2020-05-29 10:10:26","commitOrder":7,"curCode":"  public void testRemovableLeftJoin(Map<String, Object> queryContext) throws Exception\n  {\n    \r\n\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  LEFT JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"def\", 1L}\n        )\n    );\n  }\n","date":"2020-05-29 10:10:26","endLine":6715,"groupId":"101734","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemovableLeftJoin","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/330453aa846b49e23c181b6395fcd75bea46f5.src","preCode":"  public void testRemovableLeftJoin(Map<String, Object> queryContext) throws Exception\n  {\n    \r\n\n    testQuery(\n        \"SELECT t1.dim1, SUM(t1.cnt)\\n\"\n        + \"FROM druid.foo t1\\n\"\n        + \"  LEFT JOIN (\\n\"\n        + \"  SELECT\\n\"\n        + \"    SUM(cnt) AS sum_cnt,\\n\"\n        + \"    dim2\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY dim2\\n\"\n        + \"  ORDER BY 1 DESC\\n\"\n        + \"  LIMIT 2\\n\"\n        + \") t2 ON (t1.dim2 = t2.dim2)\\n\"\n        + \"GROUP BY t1.dim1\\n\"\n        + \"ORDER BY 1\\n\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"1\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"def\", 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6665,"status":"N"}],"commitId":"202c78c8f32bd3ec5e70e021b1494d878f38d678","commitMessage":"@@@Enable rewriting certain inner joins as filters. (#11068)\n\n* Enable rewriting certain inner joins as filters.\n\nThe main logic for doing the rewrite is in JoinableFactoryWrapper's\nsegmentMapFn method. The requirements are:\n\n- It must be an inner equi-join.\n- The right-hand columns referenced by the condition must not contain any\n  duplicate values. (If they did.  the inner join would not be guaranteed\n  to return at most one row for each left-hand-side row.)\n- No columns from the right-hand side can be used by anything other than\n  the join condition itself.\n\nHashJoinSegmentStorageAdapter is also modified to pass through to\nthe base adapter (even allowing vectorization!) in the case where 100%\nof join clauses could be rewritten as filters.\n\nIn support of this goal:\n\n- Add Query getRequiredColumns() method to help us figure out whether\n  the right-hand side of a join datasource is being used or not.\n- Add JoinConditionAnalysis getRequiredColumns() method to help us\n  figure out if the right-hand side of a join is being used by later\n  join clauses acting on the same base.\n- Add Joinable getNonNullColumnValuesIfAllUnique method to enable\n  retrieving the set of values that will form the \"in\" filter.\n- Add LookupExtractor canGetKeySet() and keySet() methods to support\n  LookupJoinable in its efforts to implement the new Joinable method.\n- Add \"enableRewriteJoinToFilter\" feature flag to\n  JoinFilterRewriteConfig. The default is disabled.\n\n* Test improvements.\n\n* Test fixes.\n\n* Avoid slow size() call.\n\n* Remove invalid test.\n\n* Fix style.\n\n* Fix mistaken default.\n\n* Small fixes.\n\n* Fix logic error.","date":"2021-04-15 01:49:27","modifiedFileCount":"38","status":"M","submitter":"Gian Merlino"}]
