[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testRunWithOffsetOutOfRangeExceptionAndPause() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIOConfig(\n            0,\n            \"sequence0\",\n            new KafkaPartitions(topic, ImmutableMap.of(0, 2L)),\n            new KafkaPartitions(topic, ImmutableMap.of(0, 5L)),\n            kafkaServer.consumerProperties(),\n            true,\n            null,\n            null,\n            false\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(KafkaIndexTask.Status.READING)) {\n      Thread.sleep(2000);\n    }\n\n    task.getRunner().pause();\n\n    while (!task.getRunner().getStatus().equals(KafkaIndexTask.Status.PAUSED)) {\n      Thread.sleep(25);\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":1703,"groupId":"14511","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithOffsetOutOfRangeExceptionAndPause","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a5/d450fc656ab61dcc37bbc18c28d1a253ebd3b3.src","preCode":"  public void testRunWithOffsetOutOfRangeExceptionAndPause() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIOConfig(\n            0,\n            \"sequence0\",\n            new KafkaPartitions(topic, ImmutableMap.of(0, 2L)),\n            new KafkaPartitions(topic, ImmutableMap.of(0, 5L)),\n            kafkaServer.consumerProperties(),\n            true,\n            null,\n            null,\n            false\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(KafkaIndexTask.Status.READING)) {\n      Thread.sleep(2000);\n    }\n\n    task.getRunner().pause();\n\n    while (!task.getRunner().getStatus().equals(KafkaIndexTask.Status.PAUSED)) {\n      Thread.sleep(25);\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1675,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable() throws Exception\n  {\n    resetOffsetAutomatically = true;\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      for (ProducerRecord<byte[], byte[]> record : records) {\n        kafkaProducer.send(record).get();\n      }\n    }\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIOConfig(\n            0,\n            \"sequence0\",\n            new KafkaPartitions(topic, ImmutableMap.of(0, 200L)),\n            new KafkaPartitions(topic, ImmutableMap.of(0, 500L)),\n            kafkaServer.consumerProperties(),\n            true,\n            null,\n            null,\n            false\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(KafkaIndexTask.Status.READING)) {\n      Thread.sleep(20);\n    }\n\n    for (int i = 0; i < 5; i++) {\n      Assert.assertEquals(task.getRunner().getStatus(), KafkaIndexTask.Status.READING);\n      \r\n      Assert.assertTrue(task.getRunner().getCurrentOffsets().get(0) == 200L);\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":1742,"groupId":"14511","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a5/d450fc656ab61dcc37bbc18c28d1a253ebd3b3.src","preCode":"  public void testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable() throws Exception\n  {\n    resetOffsetAutomatically = true;\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      for (ProducerRecord<byte[], byte[]> record : records) {\n        kafkaProducer.send(record).get();\n      }\n    }\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIOConfig(\n            0,\n            \"sequence0\",\n            new KafkaPartitions(topic, ImmutableMap.of(0, 200L)),\n            new KafkaPartitions(topic, ImmutableMap.of(0, 500L)),\n            kafkaServer.consumerProperties(),\n            true,\n            null,\n            null,\n            false\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(KafkaIndexTask.Status.READING)) {\n      Thread.sleep(20);\n    }\n\n    for (int i = 0; i < 5; i++) {\n      Assert.assertEquals(task.getRunner().getStatus(), KafkaIndexTask.Status.READING);\n      \r\n      Assert.assertTrue(task.getRunner().getCurrentOffsets().get(0) == 200L);\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1706,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-12-22 03:49:24","codes":[{"authorDate":"2018-12-22 03:49:24","commitOrder":2,"curCode":"  public void testRunWithOffsetOutOfRangeExceptionAndPause() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 2L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 5L)),\n            kafkaServer.consumerProperties(),\n            true,\n            null,\n            null,\n            false\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(2000);\n    }\n\n    task.getRunner().pause();\n\n    while (!task.getRunner().getStatus().equals(Status.PAUSED)) {\n      Thread.sleep(25);\n    }\n  }\n","date":"2018-12-22 03:49:24","endLine":1993,"groupId":"10607","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithOffsetOutOfRangeExceptionAndPause","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/72/041eb947d5fcc0208ff2a5427dfc03aa78f820.src","preCode":"  public void testRunWithOffsetOutOfRangeExceptionAndPause() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIOConfig(\n            0,\n            \"sequence0\",\n            new KafkaPartitions(topic, ImmutableMap.of(0, 2L)),\n            new KafkaPartitions(topic, ImmutableMap.of(0, 5L)),\n            kafkaServer.consumerProperties(),\n            true,\n            null,\n            null,\n            false\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(KafkaIndexTask.Status.READING)) {\n      Thread.sleep(2000);\n    }\n\n    task.getRunner().pause();\n\n    while (!task.getRunner().getStatus().equals(KafkaIndexTask.Status.PAUSED)) {\n      Thread.sleep(25);\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1965,"status":"M"},{"authorDate":"2018-12-22 03:49:24","commitOrder":2,"curCode":"  public void testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable() throws Exception\n  {\n    resetOffsetAutomatically = true;\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      for (ProducerRecord<byte[], byte[]> record : records) {\n        kafkaProducer.send(record).get();\n      }\n    }\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 200L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 500L)),\n            kafkaServer.consumerProperties(),\n            true,\n            null,\n            null,\n            false\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(20);\n    }\n\n    for (int i = 0; i < 5; i++) {\n      Assert.assertEquals(task.getRunner().getStatus(), Status.READING);\n      \r\n      Assert.assertTrue(task.getRunner().getCurrentOffsets().get(0) == 200L);\n    }\n  }\n","date":"2018-12-22 03:49:24","endLine":2032,"groupId":"10607","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/72/041eb947d5fcc0208ff2a5427dfc03aa78f820.src","preCode":"  public void testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable() throws Exception\n  {\n    resetOffsetAutomatically = true;\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      for (ProducerRecord<byte[], byte[]> record : records) {\n        kafkaProducer.send(record).get();\n      }\n    }\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIOConfig(\n            0,\n            \"sequence0\",\n            new KafkaPartitions(topic, ImmutableMap.of(0, 200L)),\n            new KafkaPartitions(topic, ImmutableMap.of(0, 500L)),\n            kafkaServer.consumerProperties(),\n            true,\n            null,\n            null,\n            false\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(KafkaIndexTask.Status.READING)) {\n      Thread.sleep(20);\n    }\n\n    for (int i = 0; i < 5; i++) {\n      Assert.assertEquals(task.getRunner().getStatus(), KafkaIndexTask.Status.READING);\n      \r\n      Assert.assertTrue(task.getRunner().getCurrentOffsets().get(0) == 200L);\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1996,"status":"M"}],"commitId":"7c7997e8a1183a7bffad731ca94e8b4c381e8665","commitMessage":"@@@Add Kinesis Indexing Service to core Druid (#6431)\n\n* created seekablestream classes\n\n* created seekablestreamsupervisor class\n\n* first attempt to integrate kafa indexing service to use SeekableStream\n\n* seekablestream bug fixes\n\n* kafkarecordsupplier\n\n* integrated kafka indexing service with seekablestream\n\n* implemented resume/suspend and refactored some package names\n\n* moved kinesis indexing service into core druid extensions\n\n* merged some changes from kafka supervisor race condition\n\n* integrated kinesis-indexing-service with seekablestream\n\n* unite tests for kinesis-indexing-service\n\n* various bug fixes for kinesis-indexing-service\n\n* refactored kinesisindexingtask\n\n* finished up more kinesis unit tests\n\n* more bug fixes for kinesis-indexing-service\n\n* finsihed refactoring kinesis unit tests\n\n* removed KinesisParititons and KafkaPartitions to use SeekableStreamPartitions\n\n* kinesis-indexing-service code cleanup and docs\n\n* merge #6291\n\nmerge #6337\n\nmerge #6383\n\n* added more docs and reordered methods\n\n* fixd kinesis tests after merging master and added docs in seekablestream\n\n* fix various things from pr comment\n\n* improve recordsupplier and add unit tests\n\n* migrated to aws-java-sdk-kinesis\n\n* merge changes from master\n\n* fix pom files and forbiddenapi checks\n\n* checkpoint JavaType bug fix\n\n* fix pom and stuff\n\n* disable checkpointing in kinesis\n\n* fix kinesis sequence number null in closed shard\n\n* merge changes from master\n\n* fixes for kinesis tasks\n\n* capitalized <partitionType.  sequenceType>\n\n* removed abstract class loggers\n\n* conform to guava api restrictions\n\n* add docker for travis other modules test\n\n* address comments\n\n* improve RecordSupplier to supply records in batch\n\n* fix strict compile issue\n\n* add test scope for localstack dependency\n\n* kinesis indexing task refactoring\n\n* comments\n\n* github comments\n\n* minor fix\n\n* removed unneeded readme\n\n* fix deserialization bug\n\n* fix various bugs\n\n* KinesisRecordSupplier unable to catch up to earliest position in stream bug fix\n\n* minor changes to kinesis\n\n* implement deaggregate for kinesis\n\n* Merge remote-tracking branch 'upstream/master' into seekablestream\n\n* fix kinesis offset discrepancy with kafka\n\n* kinesis record supplier disable getPosition\n\n* pr comments\n\n* mock for kinesis tests and remove docker dependency for unit tests\n\n* PR comments\n\n* avg lag in kafkasupervisor #6587\n\n* refacotred SequenceMetadata in taskRunners\n\n* small fix\n\n* more small fix\n\n* recordsupplier resource leak\n\n* revert .travis.yml formatting\n\n* fix style\n\n* kinesis docs\n\n* doc part2\n\n* more docs\n\n* comments\n\n* comments*2\n\n* revert string replace changes\n\n* comments\n\n* teamcity\n\n* comments part 1\n\n* comments part 2\n\n* comments part 3\n\n* merge #6754\n\n* fix injection binding\n\n* comments\n\n* KinesisRegion refactor\n\n* comments part idk lol\n\n* can't think of a commit msg anymore\n\n* remove possiblyResetDataSourceMetadata() for IncrementalPublishingTaskRunner\n\n* commmmmmmmmmments\n\n* extra error handling in KinesisRecordSupplier getRecords\n\n* comments\n\n* quickfix\n\n* typo\n\n* oof\n","date":"2018-12-22 03:49:24","modifiedFileCount":"22","status":"M","submitter":"Joshua Sun"},{"authorTime":"2019-01-03 12:16:02","codes":[{"authorDate":"2019-01-03 12:16:02","commitOrder":3,"curCode":"  public void testRunWithOffsetOutOfRangeExceptionAndPause() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 2L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 5L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            false\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(2000);\n    }\n\n    task.getRunner().pause();\n\n    while (!task.getRunner().getStatus().equals(Status.PAUSED)) {\n      Thread.sleep(25);\n    }\n  }\n","date":"2019-01-03 12:16:02","endLine":2022,"groupId":"10607","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithOffsetOutOfRangeExceptionAndPause","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f4/4877771fbd76d2e48f167fa6e25fc70e074abc.src","preCode":"  public void testRunWithOffsetOutOfRangeExceptionAndPause() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 2L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 5L)),\n            kafkaServer.consumerProperties(),\n            true,\n            null,\n            null,\n            false\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(2000);\n    }\n\n    task.getRunner().pause();\n\n    while (!task.getRunner().getStatus().equals(Status.PAUSED)) {\n      Thread.sleep(25);\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1993,"status":"M"},{"authorDate":"2019-01-03 12:16:02","commitOrder":3,"curCode":"  public void testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable() throws Exception\n  {\n    resetOffsetAutomatically = true;\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      for (ProducerRecord<byte[], byte[]> record : records) {\n        kafkaProducer.send(record).get();\n      }\n    }\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 200L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 500L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            false\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(20);\n    }\n\n    for (int i = 0; i < 5; i++) {\n      Assert.assertEquals(task.getRunner().getStatus(), Status.READING);\n      \r\n      Assert.assertTrue(task.getRunner().getCurrentOffsets().get(0) == 200L);\n    }\n  }\n","date":"2019-01-03 12:16:02","endLine":2062,"groupId":"10607","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f4/4877771fbd76d2e48f167fa6e25fc70e074abc.src","preCode":"  public void testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable() throws Exception\n  {\n    resetOffsetAutomatically = true;\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      for (ProducerRecord<byte[], byte[]> record : records) {\n        kafkaProducer.send(record).get();\n      }\n    }\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 200L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 500L)),\n            kafkaServer.consumerProperties(),\n            true,\n            null,\n            null,\n            false\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(20);\n    }\n\n    for (int i = 0; i < 5; i++) {\n      Assert.assertEquals(task.getRunner().getStatus(), Status.READING);\n      \r\n      Assert.assertTrue(task.getRunner().getCurrentOffsets().get(0) == 200L);\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2025,"status":"M"}],"commitId":"6761663509025c5c88275a9752c96d417f879abe","commitMessage":"@@@make kafka poll timeout can be configured (#6773)\n\n* make kafka poll timeout can be configured\n\n* add doc\n\n* rename DEFAULT_POLL_TIMEOUT to DEFAULT_POLL_TIMEOUT_MILLIS\n","date":"2019-01-03 12:16:02","modifiedFileCount":"9","status":"M","submitter":"Mingming Qiu"},{"authorTime":"2019-02-19 03:50:08","codes":[{"authorDate":"2019-02-19 03:50:08","commitOrder":4,"curCode":"  public void testRunWithOffsetOutOfRangeExceptionAndPause() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 2L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 5L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(2000);\n    }\n\n    task.getRunner().pause();\n\n    while (!task.getRunner().getStatus().equals(Status.PAUSED)) {\n      Thread.sleep(25);\n    }\n  }\n","date":"2019-02-19 03:50:08","endLine":1955,"groupId":"19614","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithOffsetOutOfRangeExceptionAndPause","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3d/6308cb0a96b01947db7e17b51cab010dd61129.src","preCode":"  public void testRunWithOffsetOutOfRangeExceptionAndPause() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 2L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 5L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            false\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(2000);\n    }\n\n    task.getRunner().pause();\n\n    while (!task.getRunner().getStatus().equals(Status.PAUSED)) {\n      Thread.sleep(25);\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1927,"status":"M"},{"authorDate":"2019-02-19 03:50:08","commitOrder":4,"curCode":"  public void testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable() throws Exception\n  {\n    resetOffsetAutomatically = true;\n    \r\n    insertData();\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 200L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 500L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(20);\n    }\n\n    for (int i = 0; i < 5; i++) {\n      Assert.assertEquals(task.getRunner().getStatus(), Status.READING);\n      \r\n      Assert.assertTrue(task.getRunner().getCurrentOffsets().get(0) == 200L);\n    }\n  }\n","date":"2019-02-19 03:50:08","endLine":1990,"groupId":"19614","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3d/6308cb0a96b01947db7e17b51cab010dd61129.src","preCode":"  public void testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable() throws Exception\n  {\n    resetOffsetAutomatically = true;\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      for (ProducerRecord<byte[], byte[]> record : records) {\n        kafkaProducer.send(record).get();\n      }\n    }\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 200L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 500L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            false\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(20);\n    }\n\n    for (int i = 0; i < 5; i++) {\n      Assert.assertEquals(task.getRunner().getStatus(), Status.READING);\n      \r\n      Assert.assertTrue(task.getRunner().getCurrentOffsets().get(0) == 200L);\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1958,"status":"M"}],"commitId":"80a2ef7be46c4fc807ac2a74507b8ba8b6a44049","commitMessage":"@@@Support kafka transactional topics (#5404) (#6496)\n\n* Support kafka transactional topics\n\n* update kafka to version 2.0.0\n* Remove the skipOffsetGaps option since it's not used anymore\n* Adjust kafka consumer to use transactional semantics\n* Update tests\n\n* Remove unused import from test\n\n* Fix compilation\n\n* Invoke transaction api to fix a unit test\n\n* temporary modification of travis.yml for debugging\n\n* another attempt to get travis tasklogs\n\n* update kafka to 2.0.1 at all places\n\n* Remove druid-kafka-eight dependency from integration-tests.  remove the kafka firehose test and deprecate kafka-eight classes\n\n* Add deprecated in docs for kafka-eight and kafka-simple extensions\n\n* Remove skipOffsetGaps and code changes for transaction support\n\n* Fix indentation\n\n* remove skipOffsetGaps from kinesis\n\n* Add transaction api to KafkaRecordSupplierTest\n\n* Fix indent\n\n* Fix test\n\n* update kafka version to 2.1.0\n","date":"2019-02-19 03:50:08","modifiedFileCount":"25","status":"M","submitter":"Surekha"},{"authorTime":"2019-03-22 04:12:22","codes":[{"authorDate":"2019-03-22 04:12:22","commitOrder":5,"curCode":"  public void testRunWithOffsetOutOfRangeExceptionAndPause() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 5L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(2000);\n    }\n\n    task.getRunner().pause();\n\n    while (!task.getRunner().getStatus().equals(Status.PAUSED)) {\n      Thread.sleep(25);\n    }\n  }\n","date":"2019-03-22 04:12:22","endLine":2092,"groupId":"19614","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithOffsetOutOfRangeExceptionAndPause","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/eb/ef3fc4596a43b59efefcaf094105a8ae34ab5f.src","preCode":"  public void testRunWithOffsetOutOfRangeExceptionAndPause() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 2L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 5L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(2000);\n    }\n\n    task.getRunner().pause();\n\n    while (!task.getRunner().getStatus().equals(Status.PAUSED)) {\n      Thread.sleep(25);\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2064,"status":"M"},{"authorDate":"2019-03-22 04:12:22","commitOrder":5,"curCode":"  public void testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable() throws Exception\n  {\n    resetOffsetAutomatically = true;\n    \r\n    insertData();\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 200L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 500L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(20);\n    }\n\n    for (int i = 0; i < 5; i++) {\n      Assert.assertEquals(task.getRunner().getStatus(), Status.READING);\n      \r\n      Assert.assertTrue(task.getRunner().getCurrentOffsets().get(0) == 200L);\n    }\n  }\n","date":"2019-03-22 04:12:22","endLine":2127,"groupId":"19614","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/eb/ef3fc4596a43b59efefcaf094105a8ae34ab5f.src","preCode":"  public void testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable() throws Exception\n  {\n    resetOffsetAutomatically = true;\n    \r\n    insertData();\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 200L)),\n            new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 500L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(20);\n    }\n\n    for (int i = 0; i < 5; i++) {\n      Assert.assertEquals(task.getRunner().getStatus(), Status.READING);\n      \r\n      Assert.assertTrue(task.getRunner().getCurrentOffsets().get(0) == 200L);\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2095,"status":"M"}],"commitId":"0c5dcf5586e33607849e397209f3eb0b10661f1e","commitMessage":"@@@Fix exclusivity for start offset in kinesis indexing service & check exclusivity properly in IndexerSQLMetadataStorageCoordinator (#7291)\n\n* Fix exclusivity for start offset in kinesis indexing service\n\n* some adjustment\n\n* Fix SeekableStreamDataSourceMetadata\n\n* Add missing javadocs\n\n* Add missing comments and unit test\n\n* fix SeekableStreamStartSequenceNumbers.plus and add comments\n\n* remove extra exclusivePartitions in KafkaIOConfig and fix downgrade issue\n\n* Add javadocs\n\n* fix compilation\n\n* fix test\n\n* remove unused variable\n","date":"2019-03-22 04:12:22","modifiedFileCount":"30","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-07-07 00:33:12","codes":[{"authorDate":"2019-03-22 04:12:22","commitOrder":6,"curCode":"  public void testRunWithOffsetOutOfRangeExceptionAndPause() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 5L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(2000);\n    }\n\n    task.getRunner().pause();\n\n    while (!task.getRunner().getStatus().equals(Status.PAUSED)) {\n      Thread.sleep(25);\n    }\n  }\n","date":"2019-03-22 04:12:22","endLine":2092,"groupId":"19614","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithOffsetOutOfRangeExceptionAndPause","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/eb/ef3fc4596a43b59efefcaf094105a8ae34ab5f.src","preCode":"  public void testRunWithOffsetOutOfRangeExceptionAndPause() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 5L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(2000);\n    }\n\n    task.getRunner().pause();\n\n    while (!task.getRunner().getStatus().equals(Status.PAUSED)) {\n      Thread.sleep(25);\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2064,"status":"N"},{"authorDate":"2019-07-07 00:33:12","commitOrder":6,"curCode":"  public void testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable() throws Exception\n  {\n    resetOffsetAutomatically = true;\n    \r\n    insertData();\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 200L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 500L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(20);\n    }\n\n    for (int i = 0; i < 5; i++) {\n      Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n      \r\n      Assert.assertEquals(200L, (long) task.getRunner().getCurrentOffsets().get(0));\n    }\n  }\n","date":"2019-07-07 00:33:12","endLine":2083,"groupId":"19614","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c9/506d6ef203fbcd3e0ff362c5c0ee77be304a4d.src","preCode":"  public void testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable() throws Exception\n  {\n    resetOffsetAutomatically = true;\n    \r\n    insertData();\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 200L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 500L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(20);\n    }\n\n    for (int i = 0; i < 5; i++) {\n      Assert.assertEquals(task.getRunner().getStatus(), Status.READING);\n      \r\n      Assert.assertTrue(task.getRunner().getCurrentOffsets().get(0) == 200L);\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2051,"status":"M"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2019-11-21 06:51:25","codes":[{"authorDate":"2019-11-21 06:51:25","commitOrder":7,"curCode":"  public void testRunWithOffsetOutOfRangeExceptionAndPause() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 5L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            INPUT_FORMAT\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(2000);\n    }\n\n    task.getRunner().pause();\n\n    while (!task.getRunner().getStatus().equals(Status.PAUSED)) {\n      Thread.sleep(25);\n    }\n  }\n","date":"2019-11-21 06:51:25","endLine":2082,"groupId":"102532","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunWithOffsetOutOfRangeExceptionAndPause","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/bde11469c6f5c09cd43b1c5d562e5b78e0f593.src","preCode":"  public void testRunWithOffsetOutOfRangeExceptionAndPause() throws Exception\n  {\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 2L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 5L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(2000);\n    }\n\n    task.getRunner().pause();\n\n    while (!task.getRunner().getStatus().equals(Status.PAUSED)) {\n      Thread.sleep(25);\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2053,"status":"M"},{"authorDate":"2019-11-21 06:51:25","commitOrder":7,"curCode":"  public void testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable() throws Exception\n  {\n    resetOffsetAutomatically = true;\n    \r\n    insertData();\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 200L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 500L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            INPUT_FORMAT\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(20);\n    }\n\n    for (int i = 0; i < 5; i++) {\n      Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n      \r\n      Assert.assertEquals(200L, (long) task.getRunner().getCurrentOffsets().get(0));\n    }\n  }\n","date":"2019-11-21 06:51:25","endLine":2118,"groupId":"102532","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/bde11469c6f5c09cd43b1c5d562e5b78e0f593.src","preCode":"  public void testRunWithOffsetOutOfRangeExceptionAndNextOffsetGreaterThanLeastAvailable() throws Exception\n  {\n    resetOffsetAutomatically = true;\n    \r\n    insertData();\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            \"sequence0\",\n            new SeekableStreamStartSequenceNumbers<>(topic, ImmutableMap.of(0, 200L), ImmutableSet.of()),\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 500L)),\n            kafkaServer.consumerProperties(),\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n\n    runTask(task);\n\n    while (!task.getRunner().getStatus().equals(Status.READING)) {\n      Thread.sleep(20);\n    }\n\n    for (int i = 0; i < 5; i++) {\n      Assert.assertEquals(Status.READING, task.getRunner().getStatus());\n      \r\n      Assert.assertEquals(200L, (long) task.getRunner().getCurrentOffsets().get(0));\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2085,"status":"M"}],"commitId":"ac6d703814ccb5b258c586b63e0bc33d669e0f57","commitMessage":"@@@Support inputFormat and inputSource for sampler (#8901)\n\n* Support inputFormat and inputSource for sampler\n\n* Cleanup javadocs and names\n\n* fix style\n\n* fix timed shutoff input source reader\n\n* fix timed shutoff input source reader again\n\n* tidy up timed shutoff reader\n\n* unused imports\n\n* fix tc\n","date":"2019-11-21 06:51:25","modifiedFileCount":"66","status":"M","submitter":"Jihoon Son"}]
