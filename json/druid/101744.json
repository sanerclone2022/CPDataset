[{"authorTime":"2020-02-01 15:51:16","codes":[{"authorDate":"2020-02-01 15:51:16","commitOrder":1,"curCode":"  public void testLeftJoinTwoLookupsUsingJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, dim2, l1.v, l2.v\\n\"\n        + \"FROM foo\\n\"\n        + \"LEFT JOIN lookup.lookyloo l1 ON foo.dim1 = l1.k\\n\"\n        + \"LEFT JOIN lookup.lookyloo l2 ON foo.dim2 = l2.k\\n\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        join(\n                            new TableDataSource(CalciteTests.DATASOURCE1),\n                            new LookupDataSource(\"lookyloo\"),\n                            \"j0.\",\n                            equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                            JoinType.LEFT\n                        ),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"_j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim2\"), DruidExpression.fromColumn(\"_j0.k\")),\n                        JoinType.LEFT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"_j0.v\", \"dim1\", \"dim2\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", \"a\", NULL_STRING, \"xa\"},\n            new Object[]{\"10.1\", NULL_STRING, NULL_STRING, NULL_STRING},\n            new Object[]{\"2\", \"\", NULL_STRING, NULL_STRING},\n            new Object[]{\"1\", \"a\", NULL_STRING, \"xa\"},\n            new Object[]{\"def\", \"abc\", NULL_STRING, \"xabc\"},\n            new Object[]{\"abc\", NULL_STRING, \"xabc\", NULL_STRING}\n        )\n    );\n  }\n","date":"2020-02-01 15:51:16","endLine":7813,"groupId":"8490","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeftJoinTwoLookupsUsingJoinOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/33/01b87f076650932db93ab0d17d4c328cc75ab1.src","preCode":"  public void testLeftJoinTwoLookupsUsingJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, dim2, l1.v, l2.v\\n\"\n        + \"FROM foo\\n\"\n        + \"LEFT JOIN lookup.lookyloo l1 ON foo.dim1 = l1.k\\n\"\n        + \"LEFT JOIN lookup.lookyloo l2 ON foo.dim2 = l2.k\\n\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        join(\n                            new TableDataSource(CalciteTests.DATASOURCE1),\n                            new LookupDataSource(\"lookyloo\"),\n                            \"j0.\",\n                            equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                            JoinType.LEFT\n                        ),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"_j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim2\"), DruidExpression.fromColumn(\"_j0.k\")),\n                        JoinType.LEFT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"_j0.v\", \"dim1\", \"dim2\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", \"a\", NULL_STRING, \"xa\"},\n            new Object[]{\"10.1\", NULL_STRING, NULL_STRING, NULL_STRING},\n            new Object[]{\"2\", \"\", NULL_STRING, NULL_STRING},\n            new Object[]{\"1\", \"a\", NULL_STRING, \"xa\"},\n            new Object[]{\"def\", \"abc\", NULL_STRING, \"xabc\"},\n            new Object[]{\"abc\", NULL_STRING, \"xabc\", NULL_STRING}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7775,"status":"B"},{"authorDate":"2020-02-01 15:51:16","commitOrder":1,"curCode":"  public void testLeftJoinLookupOntoLookupUsingJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim2, l1.v, l2.v\\n\"\n        + \"FROM foo\\n\"\n        + \"LEFT JOIN lookup.lookyloo l1 ON foo.dim2 = l1.k\\n\"\n        + \"LEFT JOIN lookup.lookyloo l2 ON l1.k = l2.k\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        join(\n                            new TableDataSource(CalciteTests.DATASOURCE1),\n                            new LookupDataSource(\"lookyloo\"),\n                            \"j0.\",\n                            equalsCondition(DruidExpression.fromColumn(\"dim2\"), DruidExpression.fromColumn(\"j0.k\")),\n                            JoinType.LEFT\n                        ),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"_j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"j0.k\"), DruidExpression.fromColumn(\"_j0.k\")),\n                        JoinType.LEFT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"_j0.v\", \"dim2\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"a\", \"xa\", \"xa\"},\n            new Object[]{NULL_STRING, NULL_STRING, NULL_STRING},\n            new Object[]{\"\", NULL_STRING, NULL_STRING},\n            new Object[]{\"a\", \"xa\", \"xa\"},\n            new Object[]{\"abc\", \"xabc\", \"xabc\"},\n            new Object[]{NULL_STRING, NULL_STRING, NULL_STRING}\n        )\n    );\n  }\n","date":"2020-02-01 15:51:16","endLine":7854,"groupId":"8491","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeftJoinLookupOntoLookupUsingJoinOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/33/01b87f076650932db93ab0d17d4c328cc75ab1.src","preCode":"  public void testLeftJoinLookupOntoLookupUsingJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim2, l1.v, l2.v\\n\"\n        + \"FROM foo\\n\"\n        + \"LEFT JOIN lookup.lookyloo l1 ON foo.dim2 = l1.k\\n\"\n        + \"LEFT JOIN lookup.lookyloo l2 ON l1.k = l2.k\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        join(\n                            new TableDataSource(CalciteTests.DATASOURCE1),\n                            new LookupDataSource(\"lookyloo\"),\n                            \"j0.\",\n                            equalsCondition(DruidExpression.fromColumn(\"dim2\"), DruidExpression.fromColumn(\"j0.k\")),\n                            JoinType.LEFT\n                        ),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"_j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"j0.k\"), DruidExpression.fromColumn(\"_j0.k\")),\n                        JoinType.LEFT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"_j0.v\", \"dim2\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"a\", \"xa\", \"xa\"},\n            new Object[]{NULL_STRING, NULL_STRING, NULL_STRING},\n            new Object[]{\"\", NULL_STRING, NULL_STRING},\n            new Object[]{\"a\", \"xa\", \"xa\"},\n            new Object[]{\"abc\", \"xabc\", \"xabc\"},\n            new Object[]{NULL_STRING, NULL_STRING, NULL_STRING}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7816,"status":"B"}],"commitId":"b411443d228c14de746311e09db28b437c2746a5","commitMessage":"@@@SQL join support for lookups. (#9294)\n\n* SQL join support for lookups.\n\n1) Add LookupSchema to SQL.  so lookups show up in the catalog.\n2) Add join-related rels and rules to SQL.  allowing joins to be planned into\n   native Druid queries.\n\n* Add two missing LookupSchema calls in tests.\n\n* Fix tests.\n\n* Fix typo.\n","date":"2020-02-01 15:51:16","modifiedFileCount":"30","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-05-29 10:10:26","codes":[{"authorDate":"2020-05-29 10:10:26","commitOrder":2,"curCode":"  public void testLeftJoinTwoLookupsUsingJoinOperator(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, dim2, l1.v, l2.v\\n\"\n        + \"FROM foo\\n\"\n        + \"LEFT JOIN lookup.lookyloo l1 ON foo.dim1 = l1.k\\n\"\n        + \"LEFT JOIN lookup.lookyloo l2 ON foo.dim2 = l2.k\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        join(\n                            new TableDataSource(CalciteTests.DATASOURCE1),\n                            new LookupDataSource(\"lookyloo\"),\n                            \"j0.\",\n                            equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                            JoinType.LEFT\n                        ),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"_j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim2\"), DruidExpression.fromColumn(\"_j0.k\")),\n                        JoinType.LEFT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"_j0.v\", \"dim1\", \"dim2\", \"j0.v\")\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", \"a\", NULL_STRING, \"xa\"},\n            new Object[]{\"10.1\", NULL_STRING, NULL_STRING, NULL_STRING},\n            new Object[]{\"2\", \"\", NULL_STRING, NULL_STRING},\n            new Object[]{\"1\", \"a\", NULL_STRING, \"xa\"},\n            new Object[]{\"def\", \"abc\", NULL_STRING, \"xabc\"},\n            new Object[]{\"abc\", NULL_STRING, \"xabc\", NULL_STRING}\n        )\n    );\n  }\n","date":"2020-05-29 10:10:26","endLine":8410,"groupId":"101744","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeftJoinTwoLookupsUsingJoinOperator","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/330453aa846b49e23c181b6395fcd75bea46f5.src","preCode":"  public void testLeftJoinTwoLookupsUsingJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, dim2, l1.v, l2.v\\n\"\n        + \"FROM foo\\n\"\n        + \"LEFT JOIN lookup.lookyloo l1 ON foo.dim1 = l1.k\\n\"\n        + \"LEFT JOIN lookup.lookyloo l2 ON foo.dim2 = l2.k\\n\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        join(\n                            new TableDataSource(CalciteTests.DATASOURCE1),\n                            new LookupDataSource(\"lookyloo\"),\n                            \"j0.\",\n                            equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                            JoinType.LEFT\n                        ),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"_j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim2\"), DruidExpression.fromColumn(\"_j0.k\")),\n                        JoinType.LEFT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"_j0.v\", \"dim1\", \"dim2\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", \"a\", NULL_STRING, \"xa\"},\n            new Object[]{\"10.1\", NULL_STRING, NULL_STRING, NULL_STRING},\n            new Object[]{\"2\", \"\", NULL_STRING, NULL_STRING},\n            new Object[]{\"1\", \"a\", NULL_STRING, \"xa\"},\n            new Object[]{\"def\", \"abc\", NULL_STRING, \"xabc\"},\n            new Object[]{\"abc\", NULL_STRING, \"xabc\", NULL_STRING}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":8371,"status":"M"},{"authorDate":"2020-05-29 10:10:26","commitOrder":2,"curCode":"  public void testLeftJoinLookupOntoLookupUsingJoinOperator(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"SELECT dim2, l1.v, l2.v\\n\"\n        + \"FROM foo\\n\"\n        + \"LEFT JOIN lookup.lookyloo l1 ON foo.dim2 = l1.k\\n\"\n        + \"LEFT JOIN lookup.lookyloo l2 ON l1.k = l2.k\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        join(\n                            new TableDataSource(CalciteTests.DATASOURCE1),\n                            new LookupDataSource(\"lookyloo\"),\n                            \"j0.\",\n                            equalsCondition(DruidExpression.fromColumn(\"dim2\"), DruidExpression.fromColumn(\"j0.k\")),\n                            JoinType.LEFT\n                        ),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"_j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"j0.k\"), DruidExpression.fromColumn(\"_j0.k\")),\n                        JoinType.LEFT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"_j0.v\", \"dim2\", \"j0.v\")\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"a\", \"xa\", \"xa\"},\n            new Object[]{NULL_STRING, NULL_STRING, NULL_STRING},\n            new Object[]{\"\", NULL_STRING, NULL_STRING},\n            new Object[]{\"a\", \"xa\", \"xa\"},\n            new Object[]{\"abc\", \"xabc\", \"xabc\"},\n            new Object[]{NULL_STRING, NULL_STRING, NULL_STRING}\n        )\n    );\n  }\n","date":"2020-05-29 10:10:26","endLine":9548,"groupId":"101744","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeftJoinLookupOntoLookupUsingJoinOperator","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/330453aa846b49e23c181b6395fcd75bea46f5.src","preCode":"  public void testLeftJoinLookupOntoLookupUsingJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim2, l1.v, l2.v\\n\"\n        + \"FROM foo\\n\"\n        + \"LEFT JOIN lookup.lookyloo l1 ON foo.dim2 = l1.k\\n\"\n        + \"LEFT JOIN lookup.lookyloo l2 ON l1.k = l2.k\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        join(\n                            new TableDataSource(CalciteTests.DATASOURCE1),\n                            new LookupDataSource(\"lookyloo\"),\n                            \"j0.\",\n                            equalsCondition(DruidExpression.fromColumn(\"dim2\"), DruidExpression.fromColumn(\"j0.k\")),\n                            JoinType.LEFT\n                        ),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"_j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"j0.k\"), DruidExpression.fromColumn(\"_j0.k\")),\n                        JoinType.LEFT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"_j0.v\", \"dim2\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"a\", \"xa\", \"xa\"},\n            new Object[]{NULL_STRING, NULL_STRING, NULL_STRING},\n            new Object[]{\"\", NULL_STRING, NULL_STRING},\n            new Object[]{\"a\", \"xa\", \"xa\"},\n            new Object[]{\"abc\", \"xabc\", \"xabc\"},\n            new Object[]{NULL_STRING, NULL_STRING, NULL_STRING}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":9509,"status":"M"}],"commitId":"cbd587dbd64ea7e5b1a316d19752786f01e50dec","commitMessage":"@@@Add parameterized Calcite tests for join queries (#9923)\n\n* Add parameterized Calcite tests for join queries\n\n* new tests\n\n* review comments","date":"2020-05-29 10:10:26","modifiedFileCount":"2","status":"M","submitter":"Suneet Saldanha"}]
