[{"authorTime":"2019-08-14 06:55:14","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testDoubleVarianceBufferAggregator()\n  {\n    VarianceBufferAggregator agg = (VarianceBufferAggregator) aggFactory.factorizeBuffered(\n        colSelectorFactory\n    );\n\n    ByteBuffer buffer = ByteBuffer.wrap(new byte[aggFactory.getMaxIntermediateSizeWithNulls()]);\n    agg.init(buffer, 0);\n\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 0, 0d, 0d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 1, 1.1d, 0d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 2, 3.8d, 1.28d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 3, 7.3d, 2.9866d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 4, 8.6d, 3.95d);\n  }\n","date":"2018-08-31 00:56:26","endLine":126,"groupId":"7641","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoubleVarianceBufferAggregator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bb/4bad493f66a81389900d7d024f5f5d5ce17c5e.src","preCode":"  public void testDoubleVarianceBufferAggregator()\n  {\n    VarianceBufferAggregator agg = (VarianceBufferAggregator) aggFactory.factorizeBuffered(\n        colSelectorFactory\n    );\n\n    ByteBuffer buffer = ByteBuffer.wrap(new byte[aggFactory.getMaxIntermediateSizeWithNulls()]);\n    agg.init(buffer, 0);\n\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 0, 0d, 0d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 1, 1.1d, 0d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 2, 3.8d, 1.28d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 3, 7.3d, 2.9866d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 4, 8.6d, 3.95d);\n  }\n","realPath":"extensions-core/stats/src/test/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"NB"},{"authorDate":"2019-08-14 06:55:14","commitOrder":2,"curCode":"  public void setup()\n  {\n    selector = new TestDoubleColumnSelectorImpl(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n  }\n","date":"2019-08-14 06:55:14","endLine":55,"groupId":"7641","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/89/a42896068410c93a665ac086294069b43b84bd.src","preCode":"  public void setup()\n  {\n    selector = new TestDoubleColumnSelectorImpl(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/DoubleMinAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"176da53996220776979f4ef7672ca4d31acb00b6","commitMessage":"@@@make double sum/min/max agg work on string columns (#8243)\n\n* make double sum/min/max agg work on string columns\n\n* style and compilation fixes\n\n* fix tests\n\n* address review comments\n\n* add comment on SimpleDoubleAggregatorFactory\n\n* make checkstyle happy\n","date":"2019-08-14 06:55:14","modifiedFileCount":"10","status":"M","submitter":"Himanshu"},{"authorTime":"2020-08-11 06:18:55","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":3,"curCode":"  public void testDoubleVarianceBufferAggregator()\n  {\n    VarianceBufferAggregator agg = (VarianceBufferAggregator) aggFactory.factorizeBuffered(\n        colSelectorFactory\n    );\n\n    ByteBuffer buffer = ByteBuffer.wrap(new byte[aggFactory.getMaxIntermediateSizeWithNulls()]);\n    agg.init(buffer, 0);\n\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 0, 0d, 0d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 1, 1.1d, 0d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 2, 3.8d, 1.28d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 3, 7.3d, 2.9866d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 4, 8.6d, 3.95d);\n  }\n","date":"2018-08-31 00:56:26","endLine":126,"groupId":"106960","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoubleVarianceBufferAggregator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bb/4bad493f66a81389900d7d024f5f5d5ce17c5e.src","preCode":"  public void testDoubleVarianceBufferAggregator()\n  {\n    VarianceBufferAggregator agg = (VarianceBufferAggregator) aggFactory.factorizeBuffered(\n        colSelectorFactory\n    );\n\n    ByteBuffer buffer = ByteBuffer.wrap(new byte[aggFactory.getMaxIntermediateSizeWithNulls()]);\n    agg.init(buffer, 0);\n\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 0, 0d, 0d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 1, 1.1d, 0d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 2, 3.8d, 1.28d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 3, 7.3d, 2.9866d);\n    aggregate(selector, agg, buffer, 0);\n    assertValues((VarianceAggregatorCollector) agg.get(buffer, 0), 4, 8.6d, 3.95d);\n  }\n","realPath":"extensions-core/stats/src/test/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"N"},{"authorDate":"2020-08-11 06:18:55","commitOrder":3,"curCode":"  public void setup()\n  {\n    NullHandling.initializeForTests();\n    selector = new TestDoubleColumnSelectorImpl(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n\n\n    VectorValueSelector vectorValueSelector = EasyMock.createMock(VectorValueSelector.class);\n    EasyMock.expect(vectorValueSelector.getDoubleVector()).andReturn(doubleValues1).anyTimes();\n    EasyMock.expect(vectorValueSelector.getNullVector()).andReturn(null).anyTimes();\n    EasyMock.replay(vectorValueSelector);\n\n    vectorColumnSelectorFactory = EasyMock.createMock(VectorColumnSelectorFactory.class);\n    EasyMock.expect(vectorColumnSelectorFactory.getColumnCapabilities(\"dblFld\"))\n            .andReturn(new ColumnCapabilitiesImpl().setType(ValueType.DOUBLE).setDictionaryEncoded(true)).anyTimes();\n    EasyMock.expect(vectorColumnSelectorFactory.makeValueSelector(\"dblFld\")).andReturn(vectorValueSelector).anyTimes();\n    EasyMock.replay(vectorColumnSelectorFactory);\n  }\n","date":"2020-08-11 06:18:55","endLine":80,"groupId":"106960","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/14/702d1bf1f51dbeb10b306b2934d395632480ca.src","preCode":"  public void setup()\n  {\n    selector = new TestDoubleColumnSelectorImpl(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/DoubleMinAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"dc16abae34ca9f4159f692ee866a122f70de9cdf","commitMessage":"@@@Vectorization support for long.  double.  float min & max aggregators. (#10260)\n\n* LongMaxVectorAggregator support and test case.\n\n* DoubleMinVectorAggregator and test cases.\n\n* DoubleMaxVectorAggregator and unit test.\n\n* FloatMinVectorAggregator and FloatMaxVectorAggregator.\n\n* Documentation update to include the other vector aggregators.\n\n* Bug fix.\n\n* checkstyle formatting fixes.\n\n* CalciteQueryTest cases update.\n\n* Separate test classes for FloatMaxAggregation and FloatMniAggregation.\n\n* remove the cannotVectorize for float max/min aggregator in test.\n\n* Tests in GroupByQueryRunner.  GroupByTimeseriesQueryRunner and TimeseriesQueryRunner.","date":"2020-08-11 06:18:55","modifiedFileCount":"13","status":"M","submitter":"Abhishek Radhakrishnan"}]
