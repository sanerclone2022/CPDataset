[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testInvertedTopNLexicographicDimExtraction2()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(\n            new ExtractionDimensionSpec(\n                QueryRunnerTestHelper.marketDimension,\n                QueryRunnerTestHelper.marketDimension,\n                new RegexDimExtractionFn(\"..(.)\", false, null)\n            )\n        )\n        .metric(new InvertedTopNMetricSpec(new DimensionTopNMetricSpec(null, StringComparators.LEXICOGRAPHIC)))\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.firstToThird)\n        .aggregators(commonAggregators)\n        .postAggregators(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant))\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-04-01T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"t\",\n                        \"rows\", 4L,\n                        \"index\", 5351.814783D,\n                        \"addRowsIndexConstant\", 5356.814783D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"o\",\n                        \"rows\", 18L,\n                        \"index\", 2231.876812D,\n                        \"addRowsIndexConstant\", 2250.876812D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_9\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"f\",\n                        \"rows\", 4L,\n                        \"index\", 4875.669692D,\n                        \"addRowsIndexConstant\", 4880.669692D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    )\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","date":"2018-08-31 00:56:26","endLine":3093,"groupId":"9206","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvertedTopNLexicographicDimExtraction2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d8/05065b1a763d6958ac6c554b91a76be76340a5.src","preCode":"  public void testInvertedTopNLexicographicDimExtraction2()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(\n            new ExtractionDimensionSpec(\n                QueryRunnerTestHelper.marketDimension,\n                QueryRunnerTestHelper.marketDimension,\n                new RegexDimExtractionFn(\"..(.)\", false, null)\n            )\n        )\n        .metric(new InvertedTopNMetricSpec(new DimensionTopNMetricSpec(null, StringComparators.LEXICOGRAPHIC)))\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.firstToThird)\n        .aggregators(commonAggregators)\n        .postAggregators(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant))\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-04-01T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"t\",\n                        \"rows\", 4L,\n                        \"index\", 5351.814783D,\n                        \"addRowsIndexConstant\", 5356.814783D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"o\",\n                        \"rows\", 18L,\n                        \"index\", 2231.876812D,\n                        \"addRowsIndexConstant\", 2250.876812D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_9\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"f\",\n                        \"rows\", 4L,\n                        \"index\", 4875.669692D,\n                        \"addRowsIndexConstant\", 4880.669692D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    )\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":3043,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testInvertedTopNLexicographicDimExtractionWithPreviousStop2()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(\n            new ExtractionDimensionSpec(\n                QueryRunnerTestHelper.marketDimension,\n                QueryRunnerTestHelper.marketDimension,\n                new RegexDimExtractionFn(\"..(.)\", false, null)\n            )\n        )\n        .metric(new InvertedTopNMetricSpec(new DimensionTopNMetricSpec(\"p\", StringComparators.LEXICOGRAPHIC)))\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.firstToThird)\n        .aggregators(commonAggregators)\n        .postAggregators(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant))\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-04-01T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"o\",\n                        \"rows\", 18L,\n                        \"index\", 2231.876812D,\n                        \"addRowsIndexConstant\", 2250.876812D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_9\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"f\",\n                        \"rows\", 4L,\n                        \"index\", 4875.669692D,\n                        \"addRowsIndexConstant\", 4880.669692D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    )\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","date":"2018-08-31 00:56:26","endLine":3302,"groupId":"17200","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvertedTopNLexicographicDimExtractionWithPreviousStop2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d8/05065b1a763d6958ac6c554b91a76be76340a5.src","preCode":"  public void testInvertedTopNLexicographicDimExtractionWithPreviousStop2()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(\n            new ExtractionDimensionSpec(\n                QueryRunnerTestHelper.marketDimension,\n                QueryRunnerTestHelper.marketDimension,\n                new RegexDimExtractionFn(\"..(.)\", false, null)\n            )\n        )\n        .metric(new InvertedTopNMetricSpec(new DimensionTopNMetricSpec(\"p\", StringComparators.LEXICOGRAPHIC)))\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.firstToThird)\n        .aggregators(commonAggregators)\n        .postAggregators(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant))\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-04-01T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"o\",\n                        \"rows\", 18L,\n                        \"index\", 2231.876812D,\n                        \"addRowsIndexConstant\", 2250.876812D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_9\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"f\",\n                        \"rows\", 4L,\n                        \"index\", 4875.669692D,\n                        \"addRowsIndexConstant\", 4880.669692D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    )\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":3259,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-07-19 04:16:28","codes":[{"authorDate":"2019-07-19 04:16:28","commitOrder":2,"curCode":"  public void testInvertedTopNLexicographicDimExtraction2()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(\n            new ExtractionDimensionSpec(\n                QueryRunnerTestHelper.marketDimension,\n                QueryRunnerTestHelper.marketDimension,\n                new RegexDimExtractionFn(\"..(.)\", false, null)\n            )\n        )\n        .metric(new InvertedTopNMetricSpec(new DimensionTopNMetricSpec(null, StringComparators.LEXICOGRAPHIC)))\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.firstToThird)\n        .aggregators(commonAggregators)\n        .postAggregators(QueryRunnerTestHelper.addRowsIndexConstant)\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-01T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"t\",\n                        \"rows\", 4L,\n                        \"index\", 5351.814783D,\n                        \"addRowsIndexConstant\", 5356.814783D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"o\",\n                        \"rows\", 18L,\n                        \"index\", 2231.876812D,\n                        \"addRowsIndexConstant\", 2250.876812D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_9\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"f\",\n                        \"rows\", 4L,\n                        \"index\", 4875.669692D,\n                        \"addRowsIndexConstant\", 4880.669692D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    )\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","date":"2019-07-19 04:16:28","endLine":3118,"groupId":"20028","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvertedTopNLexicographicDimExtraction2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4b/9fb51afb036dca9148a4c39b6dbecbf810868c.src","preCode":"  public void testInvertedTopNLexicographicDimExtraction2()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(\n            new ExtractionDimensionSpec(\n                QueryRunnerTestHelper.marketDimension,\n                QueryRunnerTestHelper.marketDimension,\n                new RegexDimExtractionFn(\"..(.)\", false, null)\n            )\n        )\n        .metric(new InvertedTopNMetricSpec(new DimensionTopNMetricSpec(null, StringComparators.LEXICOGRAPHIC)))\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.firstToThird)\n        .aggregators(commonAggregators)\n        .postAggregators(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant))\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-04-01T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"t\",\n                        \"rows\", 4L,\n                        \"index\", 5351.814783D,\n                        \"addRowsIndexConstant\", 5356.814783D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"o\",\n                        \"rows\", 18L,\n                        \"index\", 2231.876812D,\n                        \"addRowsIndexConstant\", 2250.876812D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_9\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"f\",\n                        \"rows\", 4L,\n                        \"index\", 4875.669692D,\n                        \"addRowsIndexConstant\", 4880.669692D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    )\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":3068,"status":"M"},{"authorDate":"2019-07-19 04:16:28","commitOrder":2,"curCode":"  public void testInvertedTopNLexicographicDimExtractionWithPreviousStop2()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(\n            new ExtractionDimensionSpec(\n                QueryRunnerTestHelper.marketDimension,\n                QueryRunnerTestHelper.marketDimension,\n                new RegexDimExtractionFn(\"..(.)\", false, null)\n            )\n        )\n        .metric(new InvertedTopNMetricSpec(new DimensionTopNMetricSpec(\"p\", StringComparators.LEXICOGRAPHIC)))\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.firstToThird)\n        .aggregators(commonAggregators)\n        .postAggregators(QueryRunnerTestHelper.addRowsIndexConstant)\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-01T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"o\",\n                        \"rows\", 18L,\n                        \"index\", 2231.876812D,\n                        \"addRowsIndexConstant\", 2250.876812D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_9\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"f\",\n                        \"rows\", 4L,\n                        \"index\", 4875.669692D,\n                        \"addRowsIndexConstant\", 4880.669692D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    )\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","date":"2019-07-19 04:16:28","endLine":3328,"groupId":"10419","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvertedTopNLexicographicDimExtractionWithPreviousStop2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4b/9fb51afb036dca9148a4c39b6dbecbf810868c.src","preCode":"  public void testInvertedTopNLexicographicDimExtractionWithPreviousStop2()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(\n            new ExtractionDimensionSpec(\n                QueryRunnerTestHelper.marketDimension,\n                QueryRunnerTestHelper.marketDimension,\n                new RegexDimExtractionFn(\"..(.)\", false, null)\n            )\n        )\n        .metric(new InvertedTopNMetricSpec(new DimensionTopNMetricSpec(\"p\", StringComparators.LEXICOGRAPHIC)))\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.firstToThird)\n        .aggregators(commonAggregators)\n        .postAggregators(Collections.singletonList(QueryRunnerTestHelper.addRowsIndexConstant))\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-04-01T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"o\",\n                        \"rows\", 18L,\n                        \"index\", 2231.876812D,\n                        \"addRowsIndexConstant\", 2250.876812D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_9\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"f\",\n                        \"rows\", 4L,\n                        \"index\", 4875.669692D,\n                        \"addRowsIndexConstant\", 4880.669692D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    )\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":3285,"status":"M"}],"commitId":"03e55d30ebcac9ec97edb1a638a5a99886c41374","commitMessage":"@@@add CachingClusteredClient benchmark.  refactor some stuff (#8089)\n\n* add CachingClusteredClient benchmark.  refactor some stuff\n\n* revert WeightedServerSelectorStrategy to ConnectionCountServerSelectorStrategy and remove getWeight since felt artificial.  default mergeResults in toolchest implementation for topn.  search.  select\n\n* adjust javadoc\n\n* adjustments\n\n* oops\n\n* use it\n\n* use BinaryOperator.  remove CombiningFunction.  use Comparator instead of Ordering.  other review adjustments\n\n* rename createComparator to createResultComparator.  fix typo.  firstNonNull nullable parameters\n","date":"2019-07-19 04:16:28","modifiedFileCount":"50","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testInvertedTopNLexicographicDimExtraction2()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .granularity(QueryRunnerTestHelper.ALL_GRAN)\n        .dimension(\n            new ExtractionDimensionSpec(\n                QueryRunnerTestHelper.MARKET_DIMENSION,\n                QueryRunnerTestHelper.MARKET_DIMENSION,\n                new RegexDimExtractionFn(\"..(.)\", false, null)\n            )\n        )\n        .metric(new InvertedTopNMetricSpec(new DimensionTopNMetricSpec(null, StringComparators.LEXICOGRAPHIC)))\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .aggregators(commonAggregators)\n        .postAggregators(QueryRunnerTestHelper.ADD_ROWS_INDEX_CONSTANT)\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-01T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.MARKET_DIMENSION, \"t\",\n                        \"rows\", 4L,\n                        \"index\", 5351.814783D,\n                        \"addRowsIndexConstant\", 5356.814783D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.MARKET_DIMENSION, \"o\",\n                        \"rows\", 18L,\n                        \"index\", 2231.876812D,\n                        \"addRowsIndexConstant\", 2250.876812D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_9\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.MARKET_DIMENSION, \"f\",\n                        \"rows\", 4L,\n                        \"index\", 4875.669692D,\n                        \"addRowsIndexConstant\", 4880.669692D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    )\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","date":"2019-08-23 18:13:54","endLine":3115,"groupId":"106375","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvertedTopNLexicographicDimExtraction2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c6/f894ad5ddd5fccc9520230d8961edd721a636c.src","preCode":"  public void testInvertedTopNLexicographicDimExtraction2()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(\n            new ExtractionDimensionSpec(\n                QueryRunnerTestHelper.marketDimension,\n                QueryRunnerTestHelper.marketDimension,\n                new RegexDimExtractionFn(\"..(.)\", false, null)\n            )\n        )\n        .metric(new InvertedTopNMetricSpec(new DimensionTopNMetricSpec(null, StringComparators.LEXICOGRAPHIC)))\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.firstToThird)\n        .aggregators(commonAggregators)\n        .postAggregators(QueryRunnerTestHelper.addRowsIndexConstant)\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-01T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"t\",\n                        \"rows\", 4L,\n                        \"index\", 5351.814783D,\n                        \"addRowsIndexConstant\", 5356.814783D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"o\",\n                        \"rows\", 18L,\n                        \"index\", 2231.876812D,\n                        \"addRowsIndexConstant\", 2250.876812D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_9\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"f\",\n                        \"rows\", 4L,\n                        \"index\", 4875.669692D,\n                        \"addRowsIndexConstant\", 4880.669692D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    )\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":3065,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testInvertedTopNLexicographicDimExtractionWithPreviousStop2()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .granularity(QueryRunnerTestHelper.ALL_GRAN)\n        .dimension(\n            new ExtractionDimensionSpec(\n                QueryRunnerTestHelper.MARKET_DIMENSION,\n                QueryRunnerTestHelper.MARKET_DIMENSION,\n                new RegexDimExtractionFn(\"..(.)\", false, null)\n            )\n        )\n        .metric(new InvertedTopNMetricSpec(new DimensionTopNMetricSpec(\"p\", StringComparators.LEXICOGRAPHIC)))\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .aggregators(commonAggregators)\n        .postAggregators(QueryRunnerTestHelper.ADD_ROWS_INDEX_CONSTANT)\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-01T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.MARKET_DIMENSION, \"o\",\n                        \"rows\", 18L,\n                        \"index\", 2231.876812D,\n                        \"addRowsIndexConstant\", 2250.876812D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_9\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.MARKET_DIMENSION, \"f\",\n                        \"rows\", 4L,\n                        \"index\", 4875.669692D,\n                        \"addRowsIndexConstant\", 4880.669692D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    )\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","date":"2019-08-23 18:13:54","endLine":3325,"groupId":"106375","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvertedTopNLexicographicDimExtractionWithPreviousStop2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c6/f894ad5ddd5fccc9520230d8961edd721a636c.src","preCode":"  public void testInvertedTopNLexicographicDimExtractionWithPreviousStop2()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(\n            new ExtractionDimensionSpec(\n                QueryRunnerTestHelper.marketDimension,\n                QueryRunnerTestHelper.marketDimension,\n                new RegexDimExtractionFn(\"..(.)\", false, null)\n            )\n        )\n        .metric(new InvertedTopNMetricSpec(new DimensionTopNMetricSpec(\"p\", StringComparators.LEXICOGRAPHIC)))\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.firstToThird)\n        .aggregators(commonAggregators)\n        .postAggregators(QueryRunnerTestHelper.addRowsIndexConstant)\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-04-01T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"o\",\n                        \"rows\", 18L,\n                        \"index\", 2231.876812D,\n                        \"addRowsIndexConstant\", 2250.876812D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_9\n                    ),\n                    ImmutableMap.of(\n                        QueryRunnerTestHelper.marketDimension, \"f\",\n                        \"rows\", 4L,\n                        \"index\", 4875.669692D,\n                        \"addRowsIndexConstant\", 4880.669692D,\n                        \"uniques\", QueryRunnerTestHelper.UNIQUES_2\n                    )\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":3282,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
