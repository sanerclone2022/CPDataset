[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public Response setCompactionTaskLimit(\n      @QueryParam(\"slotRatio\") Double compactionTaskSlotRatio,\n      @QueryParam(\"maxSlots\") Integer maxCompactionTaskSlots,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    CoordinatorCompactionConfig current = manager.watch(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        CoordinatorCompactionConfig.class\n    ).get();\n\n    final CoordinatorCompactionConfig newCompactionConfig;\n    if (current != null) {\n      newCompactionConfig = CoordinatorCompactionConfig.from(current, compactionTaskSlotRatio, maxCompactionTaskSlots);\n    } else {\n      newCompactionConfig = new CoordinatorCompactionConfig(null, compactionTaskSlotRatio, maxCompactionTaskSlots);\n    }\n\n    final SetResult setResult = manager.set(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        newCompactionConfig,\n        new AuditInfo(author, comment, req.getRemoteAddr())\n    );\n\n    if (setResult.isOk()) {\n      return Response.ok().build();\n    } else {\n      return Response.status(Response.Status.BAD_REQUEST)\n                     .entity(ImmutableMap.of(\"error\", setResult.getException()))\n                     .build();\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":112,"groupId":"19642","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setCompactionTaskLimit","params":"(@QueryParam(\"slotRatio\")DoublecompactionTaskSlotRatio@@QueryParam(\"maxSlots\")IntegermaxCompactionTaskSlots@@HeaderParam(AuditManager.X_DRUID_AUTHOR)@DefaultValue(\"\")finalStringauthor@@HeaderParam(AuditManager.X_DRUID_COMMENT)@DefaultValue(\"\")finalStringcomment@@ContextHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d0/1fbec0ae14fb6ad0e83e6a02383586c728c05b.src","preCode":"  public Response setCompactionTaskLimit(\n      @QueryParam(\"slotRatio\") Double compactionTaskSlotRatio,\n      @QueryParam(\"maxSlots\") Integer maxCompactionTaskSlots,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    CoordinatorCompactionConfig current = manager.watch(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        CoordinatorCompactionConfig.class\n    ).get();\n\n    final CoordinatorCompactionConfig newCompactionConfig;\n    if (current != null) {\n      newCompactionConfig = CoordinatorCompactionConfig.from(current, compactionTaskSlotRatio, maxCompactionTaskSlots);\n    } else {\n      newCompactionConfig = new CoordinatorCompactionConfig(null, compactionTaskSlotRatio, maxCompactionTaskSlots);\n    }\n\n    final SetResult setResult = manager.set(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        newCompactionConfig,\n        new AuditInfo(author, comment, req.getRemoteAddr())\n    );\n\n    if (setResult.isOk()) {\n      return Response.ok().build();\n    } else {\n      return Response.status(Response.Status.BAD_REQUEST)\n                     .entity(ImmutableMap.of(\"error\", setResult.getException()))\n                     .build();\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/CoordinatorCompactionConfigsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public Response addOrUpdateCompactionConfig(\n      final DataSourceCompactionConfig newConfig,\n      @PathParam(\"dataSource\") String dataSource,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    if (!dataSource.equals(newConfig.getDataSource())) {\n      return Response\n          .status(Response.Status.BAD_REQUEST)\n          .entity(\n              StringUtils.format(\n                  \"dataSource[%s] in config is different from the requested one[%s]\",\n                  newConfig.getDataSource(),\n                  dataSource\n              )\n          )\n          .build();\n    }\n\n    CoordinatorCompactionConfig current = manager.watch(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        CoordinatorCompactionConfig.class\n    ).get();\n\n    final CoordinatorCompactionConfig newCompactionConfig;\n    if (current != null) {\n      final Map<String, DataSourceCompactionConfig> newConfigs = current\n          .getCompactionConfigs()\n          .stream()\n          .collect(Collectors.toMap(DataSourceCompactionConfig::getDataSource, Function.identity()));\n      newConfigs.put(dataSource, newConfig);\n      newCompactionConfig = CoordinatorCompactionConfig.from(current, ImmutableList.copyOf(newConfigs.values()));\n    } else {\n      newCompactionConfig = CoordinatorCompactionConfig.from(ImmutableList.of(newConfig));\n    }\n\n    final SetResult setResult = manager.set(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        newCompactionConfig,\n        new AuditInfo(author, comment, req.getRemoteAddr())\n    );\n\n    if (setResult.isOk()) {\n      return Response.ok().build();\n    } else {\n      return Response.status(Response.Status.BAD_REQUEST).build();\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":166,"groupId":"13687","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addOrUpdateCompactionConfig","params":"(finalDataSourceCompactionConfignewConfig@@PathParam(\"dataSource\")StringdataSource@@HeaderParam(AuditManager.X_DRUID_AUTHOR)@DefaultValue(\"\")finalStringauthor@@HeaderParam(AuditManager.X_DRUID_COMMENT)@DefaultValue(\"\")finalStringcomment@@ContextHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d0/1fbec0ae14fb6ad0e83e6a02383586c728c05b.src","preCode":"  public Response addOrUpdateCompactionConfig(\n      final DataSourceCompactionConfig newConfig,\n      @PathParam(\"dataSource\") String dataSource,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    if (!dataSource.equals(newConfig.getDataSource())) {\n      return Response\n          .status(Response.Status.BAD_REQUEST)\n          .entity(\n              StringUtils.format(\n                  \"dataSource[%s] in config is different from the requested one[%s]\",\n                  newConfig.getDataSource(),\n                  dataSource\n              )\n          )\n          .build();\n    }\n\n    CoordinatorCompactionConfig current = manager.watch(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        CoordinatorCompactionConfig.class\n    ).get();\n\n    final CoordinatorCompactionConfig newCompactionConfig;\n    if (current != null) {\n      final Map<String, DataSourceCompactionConfig> newConfigs = current\n          .getCompactionConfigs()\n          .stream()\n          .collect(Collectors.toMap(DataSourceCompactionConfig::getDataSource, Function.identity()));\n      newConfigs.put(dataSource, newConfig);\n      newCompactionConfig = CoordinatorCompactionConfig.from(current, ImmutableList.copyOf(newConfigs.values()));\n    } else {\n      newCompactionConfig = CoordinatorCompactionConfig.from(ImmutableList.of(newConfig));\n    }\n\n    final SetResult setResult = manager.set(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        newCompactionConfig,\n        new AuditInfo(author, comment, req.getRemoteAddr())\n    );\n\n    if (setResult.isOk()) {\n      return Response.ok().build();\n    } else {\n      return Response.status(Response.Status.BAD_REQUEST).build();\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/CoordinatorCompactionConfigsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-11-14 01:46:13","codes":[{"authorDate":"2018-11-14 01:46:13","commitOrder":2,"curCode":"  public Response setCompactionTaskLimit(\n      @QueryParam(\"ratio\") Double compactionTaskSlotRatio,\n      @QueryParam(\"max\") Integer maxCompactionTaskSlots,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    CoordinatorCompactionConfig current = manager.watch(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        CoordinatorCompactionConfig.class\n    ).get();\n\n    final CoordinatorCompactionConfig newCompactionConfig;\n    if (current != null) {\n      newCompactionConfig = CoordinatorCompactionConfig.from(current, compactionTaskSlotRatio, maxCompactionTaskSlots);\n    } else {\n      newCompactionConfig = new CoordinatorCompactionConfig(null, compactionTaskSlotRatio, maxCompactionTaskSlots);\n    }\n\n    final SetResult setResult = manager.set(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        newCompactionConfig,\n        new AuditInfo(author, comment, req.getRemoteAddr())\n    );\n\n    if (setResult.isOk()) {\n      return Response.ok().build();\n    } else {\n      return Response.status(Response.Status.BAD_REQUEST)\n                     .entity(ImmutableMap.of(\"error\", setResult.getException()))\n                     .build();\n    }\n  }\n","date":"2018-11-14 01:46:13","endLine":112,"groupId":"19642","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setCompactionTaskLimit","params":"(@QueryParam(\"ratio\")DoublecompactionTaskSlotRatio@@QueryParam(\"max\")IntegermaxCompactionTaskSlots@@HeaderParam(AuditManager.X_DRUID_AUTHOR)@DefaultValue(\"\")finalStringauthor@@HeaderParam(AuditManager.X_DRUID_COMMENT)@DefaultValue(\"\")finalStringcomment@@ContextHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/46/044037bc846d5e821d5933a0aa8caed7296b17.src","preCode":"  public Response setCompactionTaskLimit(\n      @QueryParam(\"slotRatio\") Double compactionTaskSlotRatio,\n      @QueryParam(\"maxSlots\") Integer maxCompactionTaskSlots,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    CoordinatorCompactionConfig current = manager.watch(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        CoordinatorCompactionConfig.class\n    ).get();\n\n    final CoordinatorCompactionConfig newCompactionConfig;\n    if (current != null) {\n      newCompactionConfig = CoordinatorCompactionConfig.from(current, compactionTaskSlotRatio, maxCompactionTaskSlots);\n    } else {\n      newCompactionConfig = new CoordinatorCompactionConfig(null, compactionTaskSlotRatio, maxCompactionTaskSlots);\n    }\n\n    final SetResult setResult = manager.set(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        newCompactionConfig,\n        new AuditInfo(author, comment, req.getRemoteAddr())\n    );\n\n    if (setResult.isOk()) {\n      return Response.ok().build();\n    } else {\n      return Response.status(Response.Status.BAD_REQUEST)\n                     .entity(ImmutableMap.of(\"error\", setResult.getException()))\n                     .build();\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/CoordinatorCompactionConfigsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2018-11-14 01:46:13","commitOrder":2,"curCode":"  public Response addOrUpdateCompactionConfig(\n      final DataSourceCompactionConfig newConfig,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    CoordinatorCompactionConfig current = manager.watch(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        CoordinatorCompactionConfig.class\n    ).get();\n\n    final CoordinatorCompactionConfig newCompactionConfig;\n    if (current != null) {\n      final Map<String, DataSourceCompactionConfig> newConfigs = current\n          .getCompactionConfigs()\n          .stream()\n          .collect(Collectors.toMap(DataSourceCompactionConfig::getDataSource, Function.identity()));\n      newConfigs.put(newConfig.getDataSource(), newConfig);\n      newCompactionConfig = CoordinatorCompactionConfig.from(current, ImmutableList.copyOf(newConfigs.values()));\n    } else {\n      newCompactionConfig = CoordinatorCompactionConfig.from(ImmutableList.of(newConfig));\n    }\n\n    final SetResult setResult = manager.set(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        newCompactionConfig,\n        new AuditInfo(author, comment, req.getRemoteAddr())\n    );\n\n    if (setResult.isOk()) {\n      return Response.ok().build();\n    } else {\n      return Response.status(Response.Status.BAD_REQUEST).build();\n    }\n  }\n","date":"2018-11-14 01:46:13","endLine":151,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addOrUpdateCompactionConfig","params":"(finalDataSourceCompactionConfignewConfig@@HeaderParam(AuditManager.X_DRUID_AUTHOR)@DefaultValue(\"\")finalStringauthor@@HeaderParam(AuditManager.X_DRUID_COMMENT)@DefaultValue(\"\")finalStringcomment@@ContextHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/46/044037bc846d5e821d5933a0aa8caed7296b17.src","preCode":"  public Response addOrUpdateCompactionConfig(\n      final DataSourceCompactionConfig newConfig,\n      @PathParam(\"dataSource\") String dataSource,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    if (!dataSource.equals(newConfig.getDataSource())) {\n      return Response\n          .status(Response.Status.BAD_REQUEST)\n          .entity(\n              StringUtils.format(\n                  \"dataSource[%s] in config is different from the requested one[%s]\",\n                  newConfig.getDataSource(),\n                  dataSource\n              )\n          )\n          .build();\n    }\n\n    CoordinatorCompactionConfig current = manager.watch(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        CoordinatorCompactionConfig.class\n    ).get();\n\n    final CoordinatorCompactionConfig newCompactionConfig;\n    if (current != null) {\n      final Map<String, DataSourceCompactionConfig> newConfigs = current\n          .getCompactionConfigs()\n          .stream()\n          .collect(Collectors.toMap(DataSourceCompactionConfig::getDataSource, Function.identity()));\n      newConfigs.put(dataSource, newConfig);\n      newCompactionConfig = CoordinatorCompactionConfig.from(current, ImmutableList.copyOf(newConfigs.values()));\n    } else {\n      newCompactionConfig = CoordinatorCompactionConfig.from(ImmutableList.of(newConfig));\n    }\n\n    final SetResult setResult = manager.set(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        newCompactionConfig,\n        new AuditInfo(author, comment, req.getRemoteAddr())\n    );\n\n    if (setResult.isOk()) {\n      return Response.ok().build();\n    } else {\n      return Response.status(Response.Status.BAD_REQUEST).build();\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/CoordinatorCompactionConfigsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"7b262b71230015fc89ea185adff0c8011355ef5a","commitMessage":"@@@Remove unnecessary path param from auto compaction api (#6594)\n\n* Remove unnecessary path param from auto compaction api\n\n* fix ci\n","date":"2018-11-14 01:46:13","modifiedFileCount":"1","status":"M","submitter":"Jihoon Son"},{"authorTime":"2018-11-22 10:25:39","codes":[{"authorDate":"2018-11-22 10:25:39","commitOrder":3,"curCode":"  public Response setCompactionTaskLimit(\n      @QueryParam(\"ratio\") Double compactionTaskSlotRatio,\n      @QueryParam(\"max\") Integer maxCompactionTaskSlots,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    final CoordinatorCompactionConfig current = CoordinatorCompactionConfig.current(manager);\n\n    final CoordinatorCompactionConfig newCompactionConfig = CoordinatorCompactionConfig.from(\n        current,\n        compactionTaskSlotRatio,\n        maxCompactionTaskSlots\n    );\n\n    final SetResult setResult = manager.set(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        newCompactionConfig,\n        new AuditInfo(author, comment, req.getRemoteAddr())\n    );\n\n    if (setResult.isOk()) {\n      return Response.ok().build();\n    } else {\n      return Response.status(Response.Status.BAD_REQUEST)\n                     .entity(ImmutableMap.of(\"error\", setResult.getException()))\n                     .build();\n    }\n  }\n","date":"2018-11-22 10:25:39","endLine":103,"groupId":"19642","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setCompactionTaskLimit","params":"(@QueryParam(\"ratio\")DoublecompactionTaskSlotRatio@@QueryParam(\"max\")IntegermaxCompactionTaskSlots@@HeaderParam(AuditManager.X_DRUID_AUTHOR)@DefaultValue(\"\")finalStringauthor@@HeaderParam(AuditManager.X_DRUID_COMMENT)@DefaultValue(\"\")finalStringcomment@@ContextHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8f/7bf26721b82cc409935377db9b005d5d252779.src","preCode":"  public Response setCompactionTaskLimit(\n      @QueryParam(\"ratio\") Double compactionTaskSlotRatio,\n      @QueryParam(\"max\") Integer maxCompactionTaskSlots,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    CoordinatorCompactionConfig current = manager.watch(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        CoordinatorCompactionConfig.class\n    ).get();\n\n    final CoordinatorCompactionConfig newCompactionConfig;\n    if (current != null) {\n      newCompactionConfig = CoordinatorCompactionConfig.from(current, compactionTaskSlotRatio, maxCompactionTaskSlots);\n    } else {\n      newCompactionConfig = new CoordinatorCompactionConfig(null, compactionTaskSlotRatio, maxCompactionTaskSlots);\n    }\n\n    final SetResult setResult = manager.set(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        newCompactionConfig,\n        new AuditInfo(author, comment, req.getRemoteAddr())\n    );\n\n    if (setResult.isOk()) {\n      return Response.ok().build();\n    } else {\n      return Response.status(Response.Status.BAD_REQUEST)\n                     .entity(ImmutableMap.of(\"error\", setResult.getException()))\n                     .build();\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/CoordinatorCompactionConfigsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2018-11-22 10:25:39","commitOrder":3,"curCode":"  public Response addOrUpdateCompactionConfig(\n      final DataSourceCompactionConfig newConfig,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    final CoordinatorCompactionConfig current = CoordinatorCompactionConfig.current(manager);\n    final CoordinatorCompactionConfig newCompactionConfig;\n    final Map<String, DataSourceCompactionConfig> newConfigs = current\n        .getCompactionConfigs()\n        .stream()\n        .collect(Collectors.toMap(DataSourceCompactionConfig::getDataSource, Function.identity()));\n    newConfigs.put(newConfig.getDataSource(), newConfig);\n    newCompactionConfig = CoordinatorCompactionConfig.from(current, ImmutableList.copyOf(newConfigs.values()));\n\n    final SetResult setResult = manager.set(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        newCompactionConfig,\n        new AuditInfo(author, comment, req.getRemoteAddr())\n    );\n\n    if (setResult.isOk()) {\n      return Response.ok().build();\n    } else {\n      return Response.status(Response.Status.BAD_REQUEST).build();\n    }\n  }\n","date":"2018-11-22 10:25:39","endLine":134,"groupId":"19179","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addOrUpdateCompactionConfig","params":"(finalDataSourceCompactionConfignewConfig@@HeaderParam(AuditManager.X_DRUID_AUTHOR)@DefaultValue(\"\")finalStringauthor@@HeaderParam(AuditManager.X_DRUID_COMMENT)@DefaultValue(\"\")finalStringcomment@@ContextHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8f/7bf26721b82cc409935377db9b005d5d252779.src","preCode":"  public Response addOrUpdateCompactionConfig(\n      final DataSourceCompactionConfig newConfig,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    CoordinatorCompactionConfig current = manager.watch(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        CoordinatorCompactionConfig.class\n    ).get();\n\n    final CoordinatorCompactionConfig newCompactionConfig;\n    if (current != null) {\n      final Map<String, DataSourceCompactionConfig> newConfigs = current\n          .getCompactionConfigs()\n          .stream()\n          .collect(Collectors.toMap(DataSourceCompactionConfig::getDataSource, Function.identity()));\n      newConfigs.put(newConfig.getDataSource(), newConfig);\n      newCompactionConfig = CoordinatorCompactionConfig.from(current, ImmutableList.copyOf(newConfigs.values()));\n    } else {\n      newCompactionConfig = CoordinatorCompactionConfig.from(ImmutableList.of(newConfig));\n    }\n\n    final SetResult setResult = manager.set(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        newCompactionConfig,\n        new AuditInfo(author, comment, req.getRemoteAddr())\n    );\n\n    if (setResult.isOk()) {\n      return Response.ok().build();\n    } else {\n      return Response.status(Response.Status.BAD_REQUEST).build();\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/CoordinatorCompactionConfigsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"92cce041654f48daffc0deb76d68e6afae3de8ee","commitMessage":"@@@Fix missing default config in some calls to coordinator dynamic configs. (#6652)\n\n* Fix missing default config in some calls to coordinator dynamic configs.\n\nThe lack of a default config meant that if someone called an API\n_without_ a default config before one _with_ a default config.  then\nthe default value would get stuck at null instead of the intended\ndefault value. I noticed this in a cluster where calling /druid/coordinator/v1/config\nbefore a coordinator had fully started up would lead to NPEs during\nDruidCoordinatorRuleRunner.\n\nThis patch makes the default configs consistent across all calls.\n\n* Remove unnecessary null check.\n","date":"2018-11-22 10:25:39","modifiedFileCount":"5","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-05-11 04:58:08","codes":[{"authorDate":"2021-05-11 04:58:08","commitOrder":4,"curCode":"  public Response setCompactionTaskLimit(\n      @QueryParam(\"ratio\") Double compactionTaskSlotRatio,\n      @QueryParam(\"max\") Integer maxCompactionTaskSlots,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    Callable<SetResult> callable = () -> {\n      final CoordinatorCompactionConfig current = CoordinatorCompactionConfig.current(manager);\n\n      final CoordinatorCompactionConfig newCompactionConfig = CoordinatorCompactionConfig.from(\n          current,\n          compactionTaskSlotRatio,\n          maxCompactionTaskSlots\n      );\n\n      return manager.set(\n          CoordinatorCompactionConfig.CONFIG_KEY,\n          \r\n          CoordinatorCompactionConfig.empty().equals(current) ? null : current,\n          newCompactionConfig,\n          new AuditInfo(author, comment, req.getRemoteAddr())\n      );\n    };\n    return updateConfigHelper(callable);\n  }\n","date":"2021-05-11 04:58:08","endLine":107,"groupId":"3309","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setCompactionTaskLimit","params":"(@QueryParam(\"ratio\")DoublecompactionTaskSlotRatio@@QueryParam(\"max\")IntegermaxCompactionTaskSlots@@HeaderParam(AuditManager.X_DRUID_AUTHOR)@DefaultValue(\"\")finalStringauthor@@HeaderParam(AuditManager.X_DRUID_COMMENT)@DefaultValue(\"\")finalStringcomment@@ContextHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a5/cd6112dced84e5e8138212fffaef74e235c9d1.src","preCode":"  public Response setCompactionTaskLimit(\n      @QueryParam(\"ratio\") Double compactionTaskSlotRatio,\n      @QueryParam(\"max\") Integer maxCompactionTaskSlots,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    final CoordinatorCompactionConfig current = CoordinatorCompactionConfig.current(manager);\n\n    final CoordinatorCompactionConfig newCompactionConfig = CoordinatorCompactionConfig.from(\n        current,\n        compactionTaskSlotRatio,\n        maxCompactionTaskSlots\n    );\n\n    final SetResult setResult = manager.set(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        newCompactionConfig,\n        new AuditInfo(author, comment, req.getRemoteAddr())\n    );\n\n    if (setResult.isOk()) {\n      return Response.ok().build();\n    } else {\n      return Response.status(Response.Status.BAD_REQUEST)\n                     .entity(ImmutableMap.of(\"error\", setResult.getException()))\n                     .build();\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/CoordinatorCompactionConfigsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2021-05-11 04:58:08","commitOrder":4,"curCode":"  public Response addOrUpdateCompactionConfig(\n      final DataSourceCompactionConfig newConfig,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    Callable<SetResult> callable = () -> {\n      final CoordinatorCompactionConfig current = CoordinatorCompactionConfig.current(manager);\n      final CoordinatorCompactionConfig newCompactionConfig;\n      final Map<String, DataSourceCompactionConfig> newConfigs = current\n          .getCompactionConfigs()\n          .stream()\n          .collect(Collectors.toMap(DataSourceCompactionConfig::getDataSource, Function.identity()));\n      newConfigs.put(newConfig.getDataSource(), newConfig);\n      newCompactionConfig = CoordinatorCompactionConfig.from(current, ImmutableList.copyOf(newConfigs.values()));\n\n      return manager.set(\n          CoordinatorCompactionConfig.CONFIG_KEY,\n          \r\n          CoordinatorCompactionConfig.empty().equals(current) ? null : current,\n          newCompactionConfig,\n          new AuditInfo(author, comment, req.getRemoteAddr())\n      );\n    };\n    return updateConfigHelper(callable);\n  }\n","date":"2021-05-11 04:58:08","endLine":137,"groupId":"3309","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"addOrUpdateCompactionConfig","params":"(finalDataSourceCompactionConfignewConfig@@HeaderParam(AuditManager.X_DRUID_AUTHOR)@DefaultValue(\"\")finalStringauthor@@HeaderParam(AuditManager.X_DRUID_COMMENT)@DefaultValue(\"\")finalStringcomment@@ContextHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a5/cd6112dced84e5e8138212fffaef74e235c9d1.src","preCode":"  public Response addOrUpdateCompactionConfig(\n      final DataSourceCompactionConfig newConfig,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    final CoordinatorCompactionConfig current = CoordinatorCompactionConfig.current(manager);\n    final CoordinatorCompactionConfig newCompactionConfig;\n    final Map<String, DataSourceCompactionConfig> newConfigs = current\n        .getCompactionConfigs()\n        .stream()\n        .collect(Collectors.toMap(DataSourceCompactionConfig::getDataSource, Function.identity()));\n    newConfigs.put(newConfig.getDataSource(), newConfig);\n    newCompactionConfig = CoordinatorCompactionConfig.from(current, ImmutableList.copyOf(newConfigs.values()));\n\n    final SetResult setResult = manager.set(\n        CoordinatorCompactionConfig.CONFIG_KEY,\n        newCompactionConfig,\n        new AuditInfo(author, comment, req.getRemoteAddr())\n    );\n\n    if (setResult.isOk()) {\n      return Response.ok().build();\n    } else {\n      return Response.status(Response.Status.BAD_REQUEST).build();\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/CoordinatorCompactionConfigsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"3a660bc6ee4fd3320240805e0727ed248002522d","commitMessage":"@@@Make sure updating coordinator config is protected against race condition (#11144)\n\n* Make sure changing coordinator config is protected against concurrent updates\n\n* Make sure updating coordinator config is protected against race condition\n\n* add retry\n\n* fix checkstyle\n\n* add tests\n\n* add tests\n\n* add more tests\n\n* add tests\n\n* fix\n\n* fix checkstyle","date":"2021-05-11 04:58:08","modifiedFileCount":"3","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-05-28 07:34:32","codes":[{"authorDate":"2021-05-28 07:34:32","commitOrder":5,"curCode":"  public Response setCompactionTaskLimit(\n      @QueryParam(\"ratio\") Double compactionTaskSlotRatio,\n      @QueryParam(\"max\") Integer maxCompactionTaskSlots,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    Callable<SetResult> callable = () -> {\n      final byte[] currentBytes = getCurrentConfigInByteFromDb();\n      final CoordinatorCompactionConfig current = CoordinatorCompactionConfig.convertByteToConfig(manager, currentBytes);\n      final CoordinatorCompactionConfig newCompactionConfig = CoordinatorCompactionConfig.from(\n          current,\n          compactionTaskSlotRatio,\n          maxCompactionTaskSlots\n      );\n\n      return manager.set(\n          CoordinatorCompactionConfig.CONFIG_KEY,\n          currentBytes,\n          newCompactionConfig,\n          new AuditInfo(author, comment, req.getRemoteAddr())\n      );\n    };\n    return updateConfigHelper(callable);\n  }\n","date":"2021-05-28 07:34:32","endLine":118,"groupId":"101173","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"setCompactionTaskLimit","params":"(@QueryParam(\"ratio\")DoublecompactionTaskSlotRatio@@QueryParam(\"max\")IntegermaxCompactionTaskSlots@@HeaderParam(AuditManager.X_DRUID_AUTHOR)@DefaultValue(\"\")finalStringauthor@@HeaderParam(AuditManager.X_DRUID_COMMENT)@DefaultValue(\"\")finalStringcomment@@ContextHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cb/17c45e7c8518105685ba9b6887448068af4d65.src","preCode":"  public Response setCompactionTaskLimit(\n      @QueryParam(\"ratio\") Double compactionTaskSlotRatio,\n      @QueryParam(\"max\") Integer maxCompactionTaskSlots,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    Callable<SetResult> callable = () -> {\n      final CoordinatorCompactionConfig current = CoordinatorCompactionConfig.current(manager);\n\n      final CoordinatorCompactionConfig newCompactionConfig = CoordinatorCompactionConfig.from(\n          current,\n          compactionTaskSlotRatio,\n          maxCompactionTaskSlots\n      );\n\n      return manager.set(\n          CoordinatorCompactionConfig.CONFIG_KEY,\n          \r\n          CoordinatorCompactionConfig.empty().equals(current) ? null : current,\n          newCompactionConfig,\n          new AuditInfo(author, comment, req.getRemoteAddr())\n      );\n    };\n    return updateConfigHelper(callable);\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/CoordinatorCompactionConfigsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2021-05-28 07:34:32","commitOrder":5,"curCode":"  public Response addOrUpdateCompactionConfig(\n      final DataSourceCompactionConfig newConfig,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    Callable<SetResult> callable = () -> {\n      final byte[] currentBytes = getCurrentConfigInByteFromDb();\n      final CoordinatorCompactionConfig current = CoordinatorCompactionConfig.convertByteToConfig(manager, currentBytes);\n      final CoordinatorCompactionConfig newCompactionConfig;\n      final Map<String, DataSourceCompactionConfig> newConfigs = current\n          .getCompactionConfigs()\n          .stream()\n          .collect(Collectors.toMap(DataSourceCompactionConfig::getDataSource, Function.identity()));\n      newConfigs.put(newConfig.getDataSource(), newConfig);\n      newCompactionConfig = CoordinatorCompactionConfig.from(current, ImmutableList.copyOf(newConfigs.values()));\n\n      return manager.set(\n          CoordinatorCompactionConfig.CONFIG_KEY,\n          currentBytes,\n          newCompactionConfig,\n          new AuditInfo(author, comment, req.getRemoteAddr())\n      );\n    };\n    return updateConfigHelper(callable);\n  }\n","date":"2021-05-28 07:34:32","endLine":148,"groupId":"101173","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"addOrUpdateCompactionConfig","params":"(finalDataSourceCompactionConfignewConfig@@HeaderParam(AuditManager.X_DRUID_AUTHOR)@DefaultValue(\"\")finalStringauthor@@HeaderParam(AuditManager.X_DRUID_COMMENT)@DefaultValue(\"\")finalStringcomment@@ContextHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cb/17c45e7c8518105685ba9b6887448068af4d65.src","preCode":"  public Response addOrUpdateCompactionConfig(\n      final DataSourceCompactionConfig newConfig,\n      @HeaderParam(AuditManager.X_DRUID_AUTHOR) @DefaultValue(\"\") final String author,\n      @HeaderParam(AuditManager.X_DRUID_COMMENT) @DefaultValue(\"\") final String comment,\n      @Context HttpServletRequest req\n  )\n  {\n    Callable<SetResult> callable = () -> {\n      final CoordinatorCompactionConfig current = CoordinatorCompactionConfig.current(manager);\n      final CoordinatorCompactionConfig newCompactionConfig;\n      final Map<String, DataSourceCompactionConfig> newConfigs = current\n          .getCompactionConfigs()\n          .stream()\n          .collect(Collectors.toMap(DataSourceCompactionConfig::getDataSource, Function.identity()));\n      newConfigs.put(newConfig.getDataSource(), newConfig);\n      newCompactionConfig = CoordinatorCompactionConfig.from(current, ImmutableList.copyOf(newConfigs.values()));\n\n      return manager.set(\n          CoordinatorCompactionConfig.CONFIG_KEY,\n          \r\n          CoordinatorCompactionConfig.empty().equals(current) ? null : current,\n          newCompactionConfig,\n          new AuditInfo(author, comment, req.getRemoteAddr())\n      );\n    };\n    return updateConfigHelper(callable);\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/CoordinatorCompactionConfigsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"e5633d7842f44464ed463a8718051c7542a81ccb","commitMessage":"@@@Fix bug: 502 bad gateway thrown when we edit/delete any auto compaction config created 0.21.0 or before (#11311)\n\n* fix bug\n\n* add test\n\n* fix IT\n\n* fix checkstyle\n\n* address comments","date":"2021-05-28 07:34:32","modifiedFileCount":"11","status":"M","submitter":"Maytas Monsereenusorn"}]
