[{"authorTime":"2020-04-10 07:21:43","codes":[{"authorDate":"2020-08-28 22:57:06","commitOrder":4,"curCode":"  public DruidUnionDataSourceRel asDruidConvention()\n  {\n    return new DruidUnionDataSourceRel(\n        getCluster(),\n        getTraitSet().replace(DruidConvention.instance()),\n        (Union) unionRel.copy(\n            unionRel.getTraitSet(),\n            unionRel.getInputs()\n                    .stream()\n                    .map(input -> RelOptRule.convert(input, DruidConvention.instance()))\n                    .collect(Collectors.toList())\n        ),\n        unionColumnNames,\n        partialQuery,\n        getQueryMaker()\n    );\n  }\n","date":"2020-08-28 22:57:06","endLine":209,"groupId":"17458","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"asDruidConvention","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/98/2394639f7dcd293945de5f8ecc0b9b2a1d6755.src","preCode":"  public DruidUnionDataSourceRel asDruidConvention()\n  {\n    return new DruidUnionDataSourceRel(\n        getCluster(),\n        getTraitSet().replace(DruidConvention.instance()),\n        (Union) unionRel.copy(\n            unionRel.getTraitSet(),\n            unionRel.getInputs()\n                    .stream()\n                    .map(input -> RelOptRule.convert(input, DruidConvention.instance()))\n                    .collect(Collectors.toList())\n        ),\n        unionColumnNames,\n        partialQuery,\n        getQueryMaker()\n    );\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidUnionDataSourceRel.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"B"},{"authorDate":"2020-04-10 07:21:43","commitOrder":4,"curCode":"  public DruidJoinQueryRel asDruidConvention()\n  {\n    return new DruidJoinQueryRel(\n        getCluster(),\n        getTraitSet().replace(DruidConvention.instance()),\n        joinRel.copy(\n            joinRel.getTraitSet(),\n            joinRel.getInputs()\n                   .stream()\n                   .map(input -> RelOptRule.convert(input, DruidConvention.instance()))\n                   .collect(Collectors.toList())\n        ),\n        partialQuery,\n        getQueryMaker()\n    );\n  }\n","date":"2020-04-10 07:21:43","endLine":220,"groupId":"17458","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"asDruidConvention","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/16/55d73e5445b14f8a86be52b53803b73602715c.src","preCode":"  public DruidJoinQueryRel asDruidConvention()\n  {\n    return new DruidJoinQueryRel(\n        getCluster(),\n        getTraitSet().replace(DruidConvention.instance()),\n        joinRel.copy(\n            joinRel.getTraitSet(),\n            joinRel.getInputs()\n                   .stream()\n                   .map(input -> RelOptRule.convert(input, DruidConvention.instance()))\n                   .collect(Collectors.toList())\n        ),\n        partialQuery,\n        getQueryMaker()\n    );\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidJoinQueryRel.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"NB"}],"commitId":"5cd7610fb61405108820de4b2173e690b8df3011","commitMessage":"@@@SQL support for union datasources. (#10324)\n\n* SQL support for union datasources.\n\nExposed via the \"UNION ALL\" operator. This means that there are now two\ndifferent implementations of UNION ALL: one at the top level of a query\nthat works by concatenating subquery results.  and one at the table level\nthat works by creating a UnionDataSource.\n\nThe SQL documentation is updated to discuss these two use cases and how\nthey behave.\n\nFuture work could unify these by building support for a native datasource\nthat represents the union of multiple subqueries. (Today.  UnionDataSource\ncan only represent the union of tables.  not subqueries.)\n\n* Fixes.\n\n* Error message for sanity check.\n\n* Additional test fixes.\n\n* Add some error messages.","date":"2020-08-28 22:57:06","modifiedFileCount":"10","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-03-05 02:39:21","codes":[{"authorDate":"2020-08-28 22:57:06","commitOrder":5,"curCode":"  public DruidUnionDataSourceRel asDruidConvention()\n  {\n    return new DruidUnionDataSourceRel(\n        getCluster(),\n        getTraitSet().replace(DruidConvention.instance()),\n        (Union) unionRel.copy(\n            unionRel.getTraitSet(),\n            unionRel.getInputs()\n                    .stream()\n                    .map(input -> RelOptRule.convert(input, DruidConvention.instance()))\n                    .collect(Collectors.toList())\n        ),\n        unionColumnNames,\n        partialQuery,\n        getQueryMaker()\n    );\n  }\n","date":"2020-08-28 22:57:06","endLine":209,"groupId":"102097","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"asDruidConvention","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/98/2394639f7dcd293945de5f8ecc0b9b2a1d6755.src","preCode":"  public DruidUnionDataSourceRel asDruidConvention()\n  {\n    return new DruidUnionDataSourceRel(\n        getCluster(),\n        getTraitSet().replace(DruidConvention.instance()),\n        (Union) unionRel.copy(\n            unionRel.getTraitSet(),\n            unionRel.getInputs()\n                    .stream()\n                    .map(input -> RelOptRule.convert(input, DruidConvention.instance()))\n                    .collect(Collectors.toList())\n        ),\n        unionColumnNames,\n        partialQuery,\n        getQueryMaker()\n    );\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidUnionDataSourceRel.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"N"},{"authorDate":"2021-03-05 02:39:21","commitOrder":5,"curCode":"  public DruidJoinQueryRel asDruidConvention()\n  {\n    return new DruidJoinQueryRel(\n        getCluster(),\n        getTraitSet().replace(DruidConvention.instance()),\n        joinRel.copy(\n            joinRel.getTraitSet(),\n            joinRel.getInputs()\n                   .stream()\n                   .map(input -> RelOptRule.convert(input, DruidConvention.instance()))\n                   .collect(Collectors.toList())\n        ),\n        leftFilter,\n        partialQuery,\n        getQueryMaker()\n    );\n  }\n","date":"2021-03-05 02:39:21","endLine":236,"groupId":"102097","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"asDruidConvention","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1b/28a9830c8bfcda44a9c1d08abc00eaa10e4435.src","preCode":"  public DruidJoinQueryRel asDruidConvention()\n  {\n    return new DruidJoinQueryRel(\n        getCluster(),\n        getTraitSet().replace(DruidConvention.instance()),\n        joinRel.copy(\n            joinRel.getTraitSet(),\n            joinRel.getInputs()\n                   .stream()\n                   .map(input -> RelOptRule.convert(input, DruidConvention.instance()))\n                   .collect(Collectors.toList())\n        ),\n        partialQuery,\n        getQueryMaker()\n    );\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidJoinQueryRel.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"}],"commitId":"1a15987432fab044fc83a99af8ab497d887aeda1","commitMessage":"@@@Supporting filters in the left base table for join datasources (#10697)\n\n* where filter left first draft\n\n* Revert changes in calcite test\n\n* Refactor a bit\n\n* Fixing the Tests\n\n* Changes\n\n* Adding tests\n\n* Add tests for correlated queries\n\n* Add comment\n\n* Fix typos","date":"2021-03-05 02:39:21","modifiedFileCount":"26","status":"M","submitter":"Abhishek Agarwal"}]
