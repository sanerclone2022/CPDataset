[{"authorTime":"2021-08-13 21:14:39","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  protected void sendProxyRequest(\n      HttpServletRequest clientRequest, HttpServletResponse proxyResponse, Request proxyRequest\n  )\n  {\n    proxyRequest.timeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n    proxyRequest.idleTimeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n\n    clientRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true); \r\n\n    super.sendProxyRequest(clientRequest, proxyResponse, proxyRequest);\n  }\n","date":"2018-08-31 00:56:26","endLine":141,"groupId":"12942","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"sendProxyRequest","params":"(HttpServletRequestclientRequest@HttpServletResponseproxyResponse@RequestproxyRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/64/54da260ea639e0d84644ebfb7ee1165733894a.src","preCode":"  protected void sendProxyRequest(\n      HttpServletRequest clientRequest, HttpServletResponse proxyResponse, Request proxyRequest\n  )\n  {\n    proxyRequest.timeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n    proxyRequest.idleTimeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n\n    clientRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true); \r\n\n    super.sendProxyRequest(clientRequest, proxyResponse, proxyRequest);\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/AsyncManagementForwardingServlet.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"NB"},{"authorDate":"2021-08-13 21:14:39","commitOrder":2,"curCode":"  protected void sendProxyRequest(\n      HttpServletRequest clientRequest,\n      HttpServletResponse proxyResponse,\n      Request proxyRequest\n  )\n  {\n    proxyRequest.timeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n    proxyRequest.idleTimeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n\n    byte[] avaticaQuery = (byte[]) clientRequest.getAttribute(AVATICA_QUERY_ATTRIBUTE);\n    if (avaticaQuery != null) {\n      proxyRequest.content(new BytesContentProvider(avaticaQuery));\n    }\n\n    final Query query = (Query) clientRequest.getAttribute(QUERY_ATTRIBUTE);\n    final SqlQuery sqlQuery = (SqlQuery) clientRequest.getAttribute(SQL_QUERY_ATTRIBUTE);\n    if (query != null) {\n      setProxyRequestContent(proxyRequest, clientRequest, query);\n    } else if (sqlQuery != null) {\n      setProxyRequestContent(proxyRequest, clientRequest, sqlQuery);\n    }\n\n    \r\n    \r\n    \r\n    \r\n    clientRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n\n    \r\n    AuthenticationResult authenticationResult = (AuthenticationResult) clientRequest.getAttribute(\n        AuthConfig.DRUID_AUTHENTICATION_RESULT);\n    if (authenticationResult != null && authenticationResult.getAuthenticatedBy() != null) {\n      Authenticator authenticator = authenticatorMapper.getAuthenticatorMap()\n                                                       .get(authenticationResult.getAuthenticatedBy());\n      if (authenticator != null) {\n        authenticator.decorateProxyRequest(\n            clientRequest,\n            proxyResponse,\n            proxyRequest\n        );\n      } else {\n        log.error(\"Can not find Authenticator with Name [%s]\", authenticationResult.getAuthenticatedBy());\n      }\n    }\n    super.sendProxyRequest(\n        clientRequest,\n        proxyResponse,\n        proxyRequest\n    );\n  }\n","date":"2021-08-13 21:14:39","endLine":420,"groupId":"12942","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"sendProxyRequest","params":"(HttpServletRequestclientRequest@HttpServletResponseproxyResponse@RequestproxyRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0a/2da6293a91f72f5304f32dc58a59ebd83605be.src","preCode":"  protected void sendProxyRequest(\n      HttpServletRequest clientRequest,\n      HttpServletResponse proxyResponse,\n      Request proxyRequest\n  )\n  {\n    proxyRequest.timeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n    proxyRequest.idleTimeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n\n    byte[] avaticaQuery = (byte[]) clientRequest.getAttribute(AVATICA_QUERY_ATTRIBUTE);\n    if (avaticaQuery != null) {\n      proxyRequest.content(new BytesContentProvider(avaticaQuery));\n    }\n\n    final Query query = (Query) clientRequest.getAttribute(QUERY_ATTRIBUTE);\n    final SqlQuery sqlQuery = (SqlQuery) clientRequest.getAttribute(SQL_QUERY_ATTRIBUTE);\n    if (query != null) {\n      setProxyRequestContent(proxyRequest, clientRequest, query);\n    } else if (sqlQuery != null) {\n      setProxyRequestContent(proxyRequest, clientRequest, sqlQuery);\n    }\n\n    \r\n    \r\n    \r\n    \r\n    clientRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n\n    \r\n    AuthenticationResult authenticationResult = (AuthenticationResult) clientRequest.getAttribute(\n        AuthConfig.DRUID_AUTHENTICATION_RESULT);\n    if (authenticationResult != null && authenticationResult.getAuthenticatedBy() != null) {\n      Authenticator authenticator = authenticatorMapper.getAuthenticatorMap()\n                                                       .get(authenticationResult.getAuthenticatedBy());\n      if (authenticator != null) {\n        authenticator.decorateProxyRequest(\n            clientRequest,\n            proxyResponse,\n            proxyRequest\n        );\n      } else {\n        log.error(\"Can not find Authenticator with Name [%s]\", authenticationResult.getAuthenticatedBy());\n      }\n    }\n    super.sendProxyRequest(\n        clientRequest,\n        proxyResponse,\n        proxyRequest\n    );\n  }\n","realPath":"services/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":371,"status":"B"}],"commitId":"aaf0aaad8f3936358ab77415df7dcc68d3ee7800","commitMessage":"@@@Enable routing of SQL queries at Router (#11566)\n\nThis PR adds a new property druid.router.sql.enable which allows the\nRouter to handle SQL queries when set to true.\n\nThis change does not affect Avatica JDBC requests and they are still routed\nby hashing the Connection ID.\n\nTo allow parsing of the request object as a SqlQuery (contained in module druid-sql). \nsome classes have been moved from druid-server to druid-services with\nthe same package name.","date":"2021-08-13 21:14:39","modifiedFileCount":"2","status":"M","submitter":"Kashif Faraz"},{"authorTime":"2021-09-16 16:28:16","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":3,"curCode":"  protected void sendProxyRequest(\n      HttpServletRequest clientRequest, HttpServletResponse proxyResponse, Request proxyRequest\n  )\n  {\n    proxyRequest.timeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n    proxyRequest.idleTimeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n\n    clientRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true); \r\n\n    super.sendProxyRequest(clientRequest, proxyResponse, proxyRequest);\n  }\n","date":"2018-08-31 00:56:26","endLine":141,"groupId":"101224","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"sendProxyRequest","params":"(HttpServletRequestclientRequest@HttpServletResponseproxyResponse@RequestproxyRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/64/54da260ea639e0d84644ebfb7ee1165733894a.src","preCode":"  protected void sendProxyRequest(\n      HttpServletRequest clientRequest, HttpServletResponse proxyResponse, Request proxyRequest\n  )\n  {\n    proxyRequest.timeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n    proxyRequest.idleTimeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n\n    clientRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true); \r\n\n    super.sendProxyRequest(clientRequest, proxyResponse, proxyRequest);\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/AsyncManagementForwardingServlet.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"N"},{"authorDate":"2021-09-16 16:28:16","commitOrder":3,"curCode":"  protected void sendProxyRequest(\n      HttpServletRequest clientRequest,\n      HttpServletResponse proxyResponse,\n      Request proxyRequest\n  )\n  {\n    proxyRequest.timeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n    proxyRequest.idleTimeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n\n    byte[] avaticaQuery = (byte[]) clientRequest.getAttribute(AVATICA_QUERY_ATTRIBUTE);\n    if (avaticaQuery != null) {\n      proxyRequest.content(new BytesContentProvider(avaticaQuery));\n    }\n\n    final Query query = (Query) clientRequest.getAttribute(QUERY_ATTRIBUTE);\n    final SqlQuery sqlQuery = (SqlQuery) clientRequest.getAttribute(SQL_QUERY_ATTRIBUTE);\n    if (query != null) {\n      setProxyRequestContent(proxyRequest, clientRequest, query);\n    } else if (sqlQuery != null) {\n      setProxyRequestContent(proxyRequest, clientRequest, sqlQuery);\n    }\n\n    \r\n    \r\n    \r\n    \r\n    clientRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n\n    \r\n    AuthenticationResult authenticationResult = (AuthenticationResult) clientRequest.getAttribute(\n        AuthConfig.DRUID_AUTHENTICATION_RESULT);\n    if (authenticationResult != null && authenticationResult.getAuthenticatedBy() != null) {\n      Authenticator authenticator = authenticatorMapper.getAuthenticatorMap()\n                                                       .get(authenticationResult.getAuthenticatedBy());\n      if (authenticator != null) {\n        authenticator.decorateProxyRequest(\n            clientRequest,\n            proxyResponse,\n            proxyRequest\n        );\n      } else {\n        LOG.error(\"Can not find Authenticator with Name [%s]\", authenticationResult.getAuthenticatedBy());\n      }\n    }\n    super.sendProxyRequest(\n        clientRequest,\n        proxyResponse,\n        proxyRequest\n    );\n  }\n","date":"2021-09-16 16:28:16","endLine":425,"groupId":"101224","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"sendProxyRequest","params":"(HttpServletRequestclientRequest@HttpServletResponseproxyResponse@RequestproxyRequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e3/9b7b10700da789d9635455ceb5e22da53dbf81.src","preCode":"  protected void sendProxyRequest(\n      HttpServletRequest clientRequest,\n      HttpServletResponse proxyResponse,\n      Request proxyRequest\n  )\n  {\n    proxyRequest.timeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n    proxyRequest.idleTimeout(httpClientConfig.getReadTimeout().getMillis(), TimeUnit.MILLISECONDS);\n\n    byte[] avaticaQuery = (byte[]) clientRequest.getAttribute(AVATICA_QUERY_ATTRIBUTE);\n    if (avaticaQuery != null) {\n      proxyRequest.content(new BytesContentProvider(avaticaQuery));\n    }\n\n    final Query query = (Query) clientRequest.getAttribute(QUERY_ATTRIBUTE);\n    final SqlQuery sqlQuery = (SqlQuery) clientRequest.getAttribute(SQL_QUERY_ATTRIBUTE);\n    if (query != null) {\n      setProxyRequestContent(proxyRequest, clientRequest, query);\n    } else if (sqlQuery != null) {\n      setProxyRequestContent(proxyRequest, clientRequest, sqlQuery);\n    }\n\n    \r\n    \r\n    \r\n    \r\n    clientRequest.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n\n    \r\n    AuthenticationResult authenticationResult = (AuthenticationResult) clientRequest.getAttribute(\n        AuthConfig.DRUID_AUTHENTICATION_RESULT);\n    if (authenticationResult != null && authenticationResult.getAuthenticatedBy() != null) {\n      Authenticator authenticator = authenticatorMapper.getAuthenticatorMap()\n                                                       .get(authenticationResult.getAuthenticatedBy());\n      if (authenticator != null) {\n        authenticator.decorateProxyRequest(\n            clientRequest,\n            proxyResponse,\n            proxyRequest\n        );\n      } else {\n        log.error(\"Can not find Authenticator with Name [%s]\", authenticationResult.getAuthenticatedBy());\n      }\n    }\n    super.sendProxyRequest(\n        clientRequest,\n        proxyResponse,\n        proxyRequest\n    );\n  }\n","realPath":"services/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"}],"commitId":"3044372fc10671dc2ab2778dd5fd9cfa10b415b6","commitMessage":"@@@improved JDBC logging (#11676)\n\n* improve jdbc and router query debug logging\n\n* log errors too\n\n* no stacktrace\n\n* trace those stacks","date":"2021-09-16 16:28:16","modifiedFileCount":"4","status":"M","submitter":"Clint Wylie"}]
