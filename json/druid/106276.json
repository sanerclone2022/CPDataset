[{"authorTime":"2019-06-20 04:57:37","codes":[{"authorDate":"2019-06-20 04:57:37","commitOrder":1,"curCode":"  public void testGroupByExpressionMultiMulti()\n  {\n    if (config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)) {\n      expectedException.expect(RuntimeException.class);\n      expectedException.expectMessage(\"GroupBy v1 does not support dimension selectors with unknown cardinality.\");\n    }\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\"xx\")\n        .setQuerySegmentSpec(new LegacySegmentSpec(\"1970/3000\"))\n        .setGranularity(Granularities.ALL)\n        .setDimensions(new DefaultDimensionSpec(\"texpr\", \"texpr\"))\n        .setVirtualColumns(\n            new ExpressionVirtualColumn(\n                \"texpr\",\n                \"cartesian_map((x,y) -> concat(x, y), tags, othertags)\",\n                ValueType.STRING,\n                TestExprMacroTable.INSTANCE\n            )\n        )\n        .setLimit(5)\n        .setAggregatorSpecs(new CountAggregatorFactory(\"count\"))\n        .setContext(context)\n        .build();\n\n    Sequence<Row> result = helper.runQueryOnSegmentsObjs(\n        ImmutableList.of(\n            new QueryableIndexSegment(queryableIndex, SegmentId.dummy(\"sid1\")),\n            new IncrementalIndexSegment(incrementalIndex, SegmentId.dummy(\"sid2\"))\n        ),\n        query\n    );\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t1u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t1u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t2u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t2u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t3u1\", \"count\", 2L)\n    );\n\n    TestHelper.assertExpectedObjects(expectedResults, result.toList(), \"expr-multi-multi\");\n  }\n","date":"2019-06-20 04:57:37","endLine":482,"groupId":"12750","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByExpressionMultiMulti","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f0/282c6ed7b058124da7d55fccb04d68dd2c7b19.src","preCode":"  public void testGroupByExpressionMultiMulti()\n  {\n    if (config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)) {\n      expectedException.expect(RuntimeException.class);\n      expectedException.expectMessage(\"GroupBy v1 does not support dimension selectors with unknown cardinality.\");\n    }\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\"xx\")\n        .setQuerySegmentSpec(new LegacySegmentSpec(\"1970/3000\"))\n        .setGranularity(Granularities.ALL)\n        .setDimensions(new DefaultDimensionSpec(\"texpr\", \"texpr\"))\n        .setVirtualColumns(\n            new ExpressionVirtualColumn(\n                \"texpr\",\n                \"cartesian_map((x,y) -> concat(x, y), tags, othertags)\",\n                ValueType.STRING,\n                TestExprMacroTable.INSTANCE\n            )\n        )\n        .setLimit(5)\n        .setAggregatorSpecs(new CountAggregatorFactory(\"count\"))\n        .setContext(context)\n        .build();\n\n    Sequence<Row> result = helper.runQueryOnSegmentsObjs(\n        ImmutableList.of(\n            new QueryableIndexSegment(queryableIndex, SegmentId.dummy(\"sid1\")),\n            new IncrementalIndexSegment(incrementalIndex, SegmentId.dummy(\"sid2\"))\n        ),\n        query\n    );\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t1u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t1u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t2u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t2u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t3u1\", \"count\", 2L)\n    );\n\n    TestHelper.assertExpectedObjects(expectedResults, result.toList(), \"expr-multi-multi\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/MultiValuedDimensionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"B"},{"authorDate":"2019-06-20 04:57:37","commitOrder":1,"curCode":"  public void testGroupByExpressionMultiMultiAuto()\n  {\n    if (config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)) {\n      expectedException.expect(RuntimeException.class);\n      expectedException.expectMessage(\"GroupBy v1 does not support dimension selectors with unknown cardinality.\");\n    }\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\"xx\")\n        .setQuerySegmentSpec(new LegacySegmentSpec(\"1970/3000\"))\n        .setGranularity(Granularities.ALL)\n        .setDimensions(new DefaultDimensionSpec(\"texpr\", \"texpr\"))\n        .setVirtualColumns(\n            new ExpressionVirtualColumn(\n                \"texpr\",\n                \"map((x) -> concat(x, othertags), tags)\",\n                ValueType.STRING,\n                TestExprMacroTable.INSTANCE\n            )\n        )\n        .setLimit(5)\n        .setAggregatorSpecs(new CountAggregatorFactory(\"count\"))\n        .setContext(context)\n        .build();\n\n    Sequence<Row> result = helper.runQueryOnSegmentsObjs(\n        ImmutableList.of(\n            new QueryableIndexSegment(queryableIndex, SegmentId.dummy(\"sid1\")),\n            new IncrementalIndexSegment(incrementalIndex, SegmentId.dummy(\"sid2\"))\n        ),\n        query\n    );\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t1u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t1u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t2u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t2u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t3u1\", \"count\", 2L)\n    );\n\n    TestHelper.assertExpectedObjects(expectedResults, result.toList(), \"expr-multi-multi-auto\");\n  }\n","date":"2019-06-20 04:57:37","endLine":527,"groupId":"12750","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByExpressionMultiMultiAuto","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f0/282c6ed7b058124da7d55fccb04d68dd2c7b19.src","preCode":"  public void testGroupByExpressionMultiMultiAuto()\n  {\n    if (config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)) {\n      expectedException.expect(RuntimeException.class);\n      expectedException.expectMessage(\"GroupBy v1 does not support dimension selectors with unknown cardinality.\");\n    }\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\"xx\")\n        .setQuerySegmentSpec(new LegacySegmentSpec(\"1970/3000\"))\n        .setGranularity(Granularities.ALL)\n        .setDimensions(new DefaultDimensionSpec(\"texpr\", \"texpr\"))\n        .setVirtualColumns(\n            new ExpressionVirtualColumn(\n                \"texpr\",\n                \"map((x) -> concat(x, othertags), tags)\",\n                ValueType.STRING,\n                TestExprMacroTable.INSTANCE\n            )\n        )\n        .setLimit(5)\n        .setAggregatorSpecs(new CountAggregatorFactory(\"count\"))\n        .setContext(context)\n        .build();\n\n    Sequence<Row> result = helper.runQueryOnSegmentsObjs(\n        ImmutableList.of(\n            new QueryableIndexSegment(queryableIndex, SegmentId.dummy(\"sid1\")),\n            new IncrementalIndexSegment(incrementalIndex, SegmentId.dummy(\"sid2\"))\n        ),\n        query\n    );\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t1u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t1u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t2u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t2u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t3u1\", \"count\", 2L)\n    );\n\n    TestHelper.assertExpectedObjects(expectedResults, result.toList(), \"expr-multi-multi-auto\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/MultiValuedDimensionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":485,"status":"B"}],"commitId":"494b8ebe56308fe69c2a758f80f1ae56bf17d54d","commitMessage":"@@@multi-value string column support for expressions (#7588)\n\n* array support for expression language for multi-value string columns\n\n* fix tests?\n\n* fixes\n\n* more tests\n\n* fixes\n\n* cleanup\n\n* more better.  more test\n\n* ignore inspection\n\n* license\n\n* license fix\n\n* inspection\n\n* remove dumb import\n\n* more better\n\n* some comments\n\n* add expr rewrite for arrayfn args for more magic.  tests\n\n* test stuff\n\n* more tests\n\n* fix test\n\n* fix test\n\n* castfunc can deal with arrays\n\n* needs more empty array\n\n* more tests.  make cast to long array more forgiving\n\n* refactor\n\n* simplify ExprMacro Expr implementations with base classes in core\n\n* oops\n\n* more test\n\n* use Shuttle for Parser.flatten.  javadoc.  cleanup\n\n* fixes and more tests\n\n* unused import\n\n* fixes\n\n* javadocs.  cleanup.  refactors\n\n* fix imports\n\n* more javadoc\n\n* more javadoc\n\n* more\n\n* more javadocs.  nonnullbydefault.  minor refactor\n\n* markdown fix\n\n* adjustments\n\n* more doc\n\n* move initial filter out\n\n* docs\n\n* map empty arg lambda.  apply function argument validation\n\n* check function args at parse time instead of eval time\n\n* more immutable\n\n* more more immutable\n\n* clarify grammar\n\n* fix docs\n\n* empty array is string test.  we need a way to make arrays better maybe in the future.  or define empty arrays as other types..\n","date":"2019-06-20 04:57:37","modifiedFileCount":"43","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-08-01 07:15:12","codes":[{"authorDate":"2019-08-01 07:15:12","commitOrder":2,"curCode":"  public void testGroupByExpressionMultiMulti()\n  {\n    if (config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)) {\n      expectedException.expect(RuntimeException.class);\n      expectedException.expectMessage(\"GroupBy v1 does not support dimension selectors with unknown cardinality.\");\n    }\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\"xx\")\n        .setQuerySegmentSpec(new LegacySegmentSpec(\"1970/3000\"))\n        .setGranularity(Granularities.ALL)\n        .setDimensions(new DefaultDimensionSpec(\"texpr\", \"texpr\"))\n        .setVirtualColumns(\n            new ExpressionVirtualColumn(\n                \"texpr\",\n                \"cartesian_map((x,y) -> concat(x, y), tags, othertags)\",\n                ValueType.STRING,\n                TestExprMacroTable.INSTANCE\n            )\n        )\n        .setLimit(5)\n        .setAggregatorSpecs(new CountAggregatorFactory(\"count\"))\n        .setContext(context)\n        .build();\n\n    Sequence<ResultRow> result = helper.runQueryOnSegmentsObjs(\n        ImmutableList.of(\n            new QueryableIndexSegment(queryableIndex, SegmentId.dummy(\"sid1\")),\n            new IncrementalIndexSegment(incrementalIndex, SegmentId.dummy(\"sid2\"))\n        ),\n        query\n    );\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"1970\", \"texpr\", \"t1u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"1970\", \"texpr\", \"t1u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"1970\", \"texpr\", \"t2u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"1970\", \"texpr\", \"t2u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"1970\", \"texpr\", \"t3u1\", \"count\", 2L)\n    );\n\n    TestHelper.assertExpectedObjects(expectedResults, result.toList(), \"expr-multi-multi\");\n  }\n","date":"2019-08-01 07:15:12","endLine":484,"groupId":"106276","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByExpressionMultiMulti","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/56/892584c3cf1ac7d62d599102b0515b9107bf6d.src","preCode":"  public void testGroupByExpressionMultiMulti()\n  {\n    if (config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)) {\n      expectedException.expect(RuntimeException.class);\n      expectedException.expectMessage(\"GroupBy v1 does not support dimension selectors with unknown cardinality.\");\n    }\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\"xx\")\n        .setQuerySegmentSpec(new LegacySegmentSpec(\"1970/3000\"))\n        .setGranularity(Granularities.ALL)\n        .setDimensions(new DefaultDimensionSpec(\"texpr\", \"texpr\"))\n        .setVirtualColumns(\n            new ExpressionVirtualColumn(\n                \"texpr\",\n                \"cartesian_map((x,y) -> concat(x, y), tags, othertags)\",\n                ValueType.STRING,\n                TestExprMacroTable.INSTANCE\n            )\n        )\n        .setLimit(5)\n        .setAggregatorSpecs(new CountAggregatorFactory(\"count\"))\n        .setContext(context)\n        .build();\n\n    Sequence<Row> result = helper.runQueryOnSegmentsObjs(\n        ImmutableList.of(\n            new QueryableIndexSegment(queryableIndex, SegmentId.dummy(\"sid1\")),\n            new IncrementalIndexSegment(incrementalIndex, SegmentId.dummy(\"sid2\"))\n        ),\n        query\n    );\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t1u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t1u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t2u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t2u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t3u1\", \"count\", 2L)\n    );\n\n    TestHelper.assertExpectedObjects(expectedResults, result.toList(), \"expr-multi-multi\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/MultiValuedDimensionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":442,"status":"M"},{"authorDate":"2019-08-01 07:15:12","commitOrder":2,"curCode":"  public void testGroupByExpressionMultiMultiAuto()\n  {\n    if (config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)) {\n      expectedException.expect(RuntimeException.class);\n      expectedException.expectMessage(\"GroupBy v1 does not support dimension selectors with unknown cardinality.\");\n    }\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\"xx\")\n        .setQuerySegmentSpec(new LegacySegmentSpec(\"1970/3000\"))\n        .setGranularity(Granularities.ALL)\n        .setDimensions(new DefaultDimensionSpec(\"texpr\", \"texpr\"))\n        .setVirtualColumns(\n            new ExpressionVirtualColumn(\n                \"texpr\",\n                \"map((x) -> concat(x, othertags), tags)\",\n                ValueType.STRING,\n                TestExprMacroTable.INSTANCE\n            )\n        )\n        .setLimit(5)\n        .setAggregatorSpecs(new CountAggregatorFactory(\"count\"))\n        .setContext(context)\n        .build();\n\n    Sequence<ResultRow> result = helper.runQueryOnSegmentsObjs(\n        ImmutableList.of(\n            new QueryableIndexSegment(queryableIndex, SegmentId.dummy(\"sid1\")),\n            new IncrementalIndexSegment(incrementalIndex, SegmentId.dummy(\"sid2\"))\n        ),\n        query\n    );\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"1970\", \"texpr\", \"t1u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"1970\", \"texpr\", \"t1u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"1970\", \"texpr\", \"t2u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"1970\", \"texpr\", \"t2u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"1970\", \"texpr\", \"t3u1\", \"count\", 2L)\n    );\n\n    TestHelper.assertExpectedObjects(expectedResults, result.toList(), \"expr-multi-multi-auto\");\n  }\n","date":"2019-08-01 07:15:12","endLine":529,"groupId":"106276","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByExpressionMultiMultiAuto","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/56/892584c3cf1ac7d62d599102b0515b9107bf6d.src","preCode":"  public void testGroupByExpressionMultiMultiAuto()\n  {\n    if (config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)) {\n      expectedException.expect(RuntimeException.class);\n      expectedException.expectMessage(\"GroupBy v1 does not support dimension selectors with unknown cardinality.\");\n    }\n    GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\"xx\")\n        .setQuerySegmentSpec(new LegacySegmentSpec(\"1970/3000\"))\n        .setGranularity(Granularities.ALL)\n        .setDimensions(new DefaultDimensionSpec(\"texpr\", \"texpr\"))\n        .setVirtualColumns(\n            new ExpressionVirtualColumn(\n                \"texpr\",\n                \"map((x) -> concat(x, othertags), tags)\",\n                ValueType.STRING,\n                TestExprMacroTable.INSTANCE\n            )\n        )\n        .setLimit(5)\n        .setAggregatorSpecs(new CountAggregatorFactory(\"count\"))\n        .setContext(context)\n        .build();\n\n    Sequence<Row> result = helper.runQueryOnSegmentsObjs(\n        ImmutableList.of(\n            new QueryableIndexSegment(queryableIndex, SegmentId.dummy(\"sid1\")),\n            new IncrementalIndexSegment(incrementalIndex, SegmentId.dummy(\"sid2\"))\n        ),\n        query\n    );\n\n    List<Row> expectedResults = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t1u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t1u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t2u1\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t2u2\", \"count\", 2L),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"1970-01-01T00:00:00.000Z\", \"texpr\", \"t3u1\", \"count\", 2L)\n    );\n\n    TestHelper.assertExpectedObjects(expectedResults, result.toList(), \"expr-multi-multi-auto\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/MultiValuedDimensionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":487,"status":"M"}],"commitId":"77297f4e6f2e9d617c96cd46852bb5a772961e85","commitMessage":"@@@GroupBy array-based result rows. (#8196)\n\n* GroupBy array-based result rows.\n\nFixes #8118; see that proposal for details.\n\nOther than the GroupBy changes.  the main other \"interesting\" classes are:\n\n- ResultRow: The array-based result type.\n- BaseQuery: T is no longer required to be Comparable.\n- QueryToolChest: Adds \"decorateObjectMapper\" to enable query-aware serialization\n  and deserialization of result rows (necessary due to their positional nature).\n- QueryResource: Uses the new decoration functionality.\n- DirectDruidClient: Also uses the new decoration functionality.\n- QueryMaker (in Druid SQL): Modifications to read ResultRows.\n\nThese classes weren't changed.  but got some new javadocs:\n\n- BySegmentQueryRunner\n- FinalizeResultsQueryRunner\n- Query\n\n* Adjustments for TC stuff.\n","date":"2019-08-01 07:15:12","modifiedFileCount":"111","status":"M","submitter":"Gian Merlino"}]
