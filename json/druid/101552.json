[{"authorTime":"2020-02-05 03:33:48","codes":[{"authorDate":"2020-02-05 03:33:48","commitOrder":1,"curCode":"  public void testArrayLinesResultFormat() throws Exception\n  {\n    final String query = \"SELECT *, CASE dim2 WHEN '' THEN dim2 END FROM foo LIMIT 2\";\n    final String response = doPostRaw(new SqlQuery(query, ResultFormat.ARRAYLINES, false, null)).rhs;\n    final String nullStr = NullHandling.replaceWithDefault() ? \"\" : null;\n    final List<String> lines = Splitter.on('\\n').splitToList(response);\n\n    Assert.assertEquals(4, lines.size());\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-01T00:00:00.000Z\",\n            1,\n            \"\",\n            \"a\",\n            \"[\\\"a\\\",\\\"b\\\"]\",\n            1.0,\n            1.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(0), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-02T00:00:00.000Z\",\n            1,\n            \"10.1\",\n            nullStr,\n            \"[\\\"b\\\",\\\"c\\\"]\",\n            2.0,\n            2.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(1), List.class)\n    );\n    Assert.assertEquals(\"\", lines.get(2));\n    Assert.assertEquals(\"\", lines.get(3));\n  }\n","date":"2020-02-05 03:33:48","endLine":409,"groupId":"13842","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testArrayLinesResultFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a9/201eb521214a5d3eac90cca430d552c913ac9f.src","preCode":"  public void testArrayLinesResultFormat() throws Exception\n  {\n    final String query = \"SELECT *, CASE dim2 WHEN '' THEN dim2 END FROM foo LIMIT 2\";\n    final String response = doPostRaw(new SqlQuery(query, ResultFormat.ARRAYLINES, false, null)).rhs;\n    final String nullStr = NullHandling.replaceWithDefault() ? \"\" : null;\n    final List<String> lines = Splitter.on('\\n').splitToList(response);\n\n    Assert.assertEquals(4, lines.size());\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-01T00:00:00.000Z\",\n            1,\n            \"\",\n            \"a\",\n            \"[\\\"a\\\",\\\"b\\\"]\",\n            1.0,\n            1.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(0), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-02T00:00:00.000Z\",\n            1,\n            \"10.1\",\n            nullStr,\n            \"[\\\"b\\\",\\\"c\\\"]\",\n            2.0,\n            2.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(1), List.class)\n    );\n    Assert.assertEquals(\"\", lines.get(2));\n    Assert.assertEquals(\"\", lines.get(3));\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":371,"status":"B"},{"authorDate":"2020-02-05 03:33:48","commitOrder":1,"curCode":"  public void testArrayLinesResultFormatWithHeader() throws Exception\n  {\n    final String query = \"SELECT *, CASE dim2 WHEN '' THEN dim2 END FROM foo LIMIT 2\";\n    final String response = doPostRaw(new SqlQuery(query, ResultFormat.ARRAYLINES, true, null)).rhs;\n    final String nullStr = NullHandling.replaceWithDefault() ? \"\" : null;\n    final List<String> lines = Splitter.on('\\n').splitToList(response);\n\n    Assert.assertEquals(5, lines.size());\n    Assert.assertEquals(\n        Arrays.asList(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\", \"EXPR$8\"),\n        JSON_MAPPER.readValue(lines.get(0), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-01T00:00:00.000Z\",\n            1,\n            \"\",\n            \"a\",\n            \"[\\\"a\\\",\\\"b\\\"]\",\n            1.0,\n            1.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(1), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-02T00:00:00.000Z\",\n            1,\n            \"10.1\",\n            nullStr,\n            \"[\\\"b\\\",\\\"c\\\"]\",\n            2.0,\n            2.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(2), List.class)\n    );\n    Assert.assertEquals(\"\", lines.get(3));\n    Assert.assertEquals(\"\", lines.get(4));\n  }\n","date":"2020-02-05 03:33:48","endLine":454,"groupId":"13842","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testArrayLinesResultFormatWithHeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a9/201eb521214a5d3eac90cca430d552c913ac9f.src","preCode":"  public void testArrayLinesResultFormatWithHeader() throws Exception\n  {\n    final String query = \"SELECT *, CASE dim2 WHEN '' THEN dim2 END FROM foo LIMIT 2\";\n    final String response = doPostRaw(new SqlQuery(query, ResultFormat.ARRAYLINES, true, null)).rhs;\n    final String nullStr = NullHandling.replaceWithDefault() ? \"\" : null;\n    final List<String> lines = Splitter.on('\\n').splitToList(response);\n\n    Assert.assertEquals(5, lines.size());\n    Assert.assertEquals(\n        Arrays.asList(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\", \"EXPR$8\"),\n        JSON_MAPPER.readValue(lines.get(0), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-01T00:00:00.000Z\",\n            1,\n            \"\",\n            \"a\",\n            \"[\\\"a\\\",\\\"b\\\"]\",\n            1.0,\n            1.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(1), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-02T00:00:00.000Z\",\n            1,\n            \"10.1\",\n            nullStr,\n            \"[\\\"b\\\",\\\"c\\\"]\",\n            2.0,\n            2.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(2), List.class)\n    );\n    Assert.assertEquals(\"\", lines.get(3));\n    Assert.assertEquals(\"\", lines.get(4));\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"B"}],"commitId":"33a97dfaae00d88fb3001f55e1fa23211edc7640","commitMessage":"@@@Guicify druid sql module (#9279)\n\n* Guicify druid sql module\n\nBreak up the SQLModule in to smaller modules and provide a binding that\nmodules can use to register schemas with druid sql.\n\n* fix some tests\n\n* address code review\n\n* tests compile\n\n* Working tests\n\n* Add all the tests\n\n* fix up licenses and dependencies\n\n* add calcite dependency to druid-benchmarks\n\n* tests pass\n\n* rename the schemas\n","date":"2020-02-05 03:33:48","modifiedFileCount":"31","status":"B","submitter":"Suneet Saldanha"},{"authorTime":"2020-02-20 05:09:20","codes":[{"authorDate":"2020-02-20 05:09:20","commitOrder":2,"curCode":"  public void testArrayLinesResultFormat() throws Exception\n  {\n    final String query = \"SELECT *, CASE dim2 WHEN '' THEN dim2 END FROM foo LIMIT 2\";\n    final String response = doPostRaw(new SqlQuery(query, ResultFormat.ARRAYLINES, false, null, null)).rhs;\n    final String nullStr = NullHandling.replaceWithDefault() ? \"\" : null;\n    final List<String> lines = Splitter.on('\\n').splitToList(response);\n\n    Assert.assertEquals(4, lines.size());\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-01T00:00:00.000Z\",\n            1,\n            \"\",\n            \"a\",\n            \"[\\\"a\\\",\\\"b\\\"]\",\n            1.0,\n            1.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(0), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-02T00:00:00.000Z\",\n            1,\n            \"10.1\",\n            nullStr,\n            \"[\\\"b\\\",\\\"c\\\"]\",\n            2.0,\n            2.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(1), List.class)\n    );\n    Assert.assertEquals(\"\", lines.get(2));\n    Assert.assertEquals(\"\", lines.get(3));\n  }\n","date":"2020-02-20 05:09:20","endLine":433,"groupId":"13842","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testArrayLinesResultFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ce/925902a575cbbf2589ae93ea4af3f1938c97e0.src","preCode":"  public void testArrayLinesResultFormat() throws Exception\n  {\n    final String query = \"SELECT *, CASE dim2 WHEN '' THEN dim2 END FROM foo LIMIT 2\";\n    final String response = doPostRaw(new SqlQuery(query, ResultFormat.ARRAYLINES, false, null)).rhs;\n    final String nullStr = NullHandling.replaceWithDefault() ? \"\" : null;\n    final List<String> lines = Splitter.on('\\n').splitToList(response);\n\n    Assert.assertEquals(4, lines.size());\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-01T00:00:00.000Z\",\n            1,\n            \"\",\n            \"a\",\n            \"[\\\"a\\\",\\\"b\\\"]\",\n            1.0,\n            1.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(0), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-02T00:00:00.000Z\",\n            1,\n            \"10.1\",\n            nullStr,\n            \"[\\\"b\\\",\\\"c\\\"]\",\n            2.0,\n            2.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(1), List.class)\n    );\n    Assert.assertEquals(\"\", lines.get(2));\n    Assert.assertEquals(\"\", lines.get(3));\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"},{"authorDate":"2020-02-20 05:09:20","commitOrder":2,"curCode":"  public void testArrayLinesResultFormatWithHeader() throws Exception\n  {\n    final String query = \"SELECT *, CASE dim2 WHEN '' THEN dim2 END FROM foo LIMIT 2\";\n    final String response = doPostRaw(new SqlQuery(query, ResultFormat.ARRAYLINES, true, null, null)).rhs;\n    final String nullStr = NullHandling.replaceWithDefault() ? \"\" : null;\n    final List<String> lines = Splitter.on('\\n').splitToList(response);\n\n    Assert.assertEquals(5, lines.size());\n    Assert.assertEquals(\n        Arrays.asList(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\", \"EXPR$8\"),\n        JSON_MAPPER.readValue(lines.get(0), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-01T00:00:00.000Z\",\n            1,\n            \"\",\n            \"a\",\n            \"[\\\"a\\\",\\\"b\\\"]\",\n            1.0,\n            1.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(1), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-02T00:00:00.000Z\",\n            1,\n            \"10.1\",\n            nullStr,\n            \"[\\\"b\\\",\\\"c\\\"]\",\n            2.0,\n            2.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(2), List.class)\n    );\n    Assert.assertEquals(\"\", lines.get(3));\n    Assert.assertEquals(\"\", lines.get(4));\n  }\n","date":"2020-02-20 05:09:20","endLine":478,"groupId":"13842","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testArrayLinesResultFormatWithHeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ce/925902a575cbbf2589ae93ea4af3f1938c97e0.src","preCode":"  public void testArrayLinesResultFormatWithHeader() throws Exception\n  {\n    final String query = \"SELECT *, CASE dim2 WHEN '' THEN dim2 END FROM foo LIMIT 2\";\n    final String response = doPostRaw(new SqlQuery(query, ResultFormat.ARRAYLINES, true, null)).rhs;\n    final String nullStr = NullHandling.replaceWithDefault() ? \"\" : null;\n    final List<String> lines = Splitter.on('\\n').splitToList(response);\n\n    Assert.assertEquals(5, lines.size());\n    Assert.assertEquals(\n        Arrays.asList(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\", \"EXPR$8\"),\n        JSON_MAPPER.readValue(lines.get(0), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-01T00:00:00.000Z\",\n            1,\n            \"\",\n            \"a\",\n            \"[\\\"a\\\",\\\"b\\\"]\",\n            1.0,\n            1.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(1), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-02T00:00:00.000Z\",\n            1,\n            \"10.1\",\n            nullStr,\n            \"[\\\"b\\\",\\\"c\\\"]\",\n            2.0,\n            2.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(2), List.class)\n    );\n    Assert.assertEquals(\"\", lines.get(3));\n    Assert.assertEquals(\"\", lines.get(4));\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":436,"status":"M"}],"commitId":"b408a6d774e43e574bf8092584fae76d582cfd8f","commitMessage":"@@@sql support for dynamic parameters (#6974)\n\n* sql support for dynamic parameters\n\n* fixup\n\n* javadocs\n\n* fixup from merge\n\n* formatting\n\n* fixes\n\n* fix it\n\n* doc fix\n\n* remove druid fallback self-join parameterized test\n\n* unused imports\n\n* ignore test for now\n\n* fix imports\n\n* fixup\n\n* fix merge\n\n* merge fixup\n\n* fix test that cannot vectorize\n\n* fixup and more better\n\n* dependency thingo\n\n* fix docs\n\n* tweaks\n\n* fix docs\n\n* spelling\n\n* unused imports after merge\n\n* review stuffs\n\n* add comment\n\n* add ignore text\n\n* review stuffs\n","date":"2020-02-20 05:09:20","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-09-06 01:57:45","codes":[{"authorDate":"2021-09-06 01:57:45","commitOrder":3,"curCode":"  public void testArrayLinesResultFormat() throws Exception\n  {\n    final String query = \"SELECT *, CASE dim2 WHEN '' THEN dim2 END FROM foo LIMIT 2\";\n    final Pair<QueryException, String> pair = doPostRaw(\n        new SqlQuery(query, ResultFormat.ARRAYLINES, false, null, null)\n    );\n    Assert.assertNull(pair.lhs);\n    final String response = pair.rhs;\n    final String nullStr = NullHandling.replaceWithDefault() ? \"\" : null;\n    final List<String> lines = Splitter.on('\\n').splitToList(response);\n\n    Assert.assertEquals(4, lines.size());\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-01T00:00:00.000Z\",\n            1,\n            \"\",\n            \"a\",\n            \"[\\\"a\\\",\\\"b\\\"]\",\n            1.0,\n            1.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(0), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-02T00:00:00.000Z\",\n            1,\n            \"10.1\",\n            nullStr,\n            \"[\\\"b\\\",\\\"c\\\"]\",\n            2.0,\n            2.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(1), List.class)\n    );\n    Assert.assertEquals(\"\", lines.get(2));\n    Assert.assertEquals(\"\", lines.get(3));\n  }\n","date":"2021-09-06 01:57:45","endLine":587,"groupId":"101552","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testArrayLinesResultFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/f596adbdaab2d96bcd83e41fc1de166d07cb8a.src","preCode":"  public void testArrayLinesResultFormat() throws Exception\n  {\n    final String query = \"SELECT *, CASE dim2 WHEN '' THEN dim2 END FROM foo LIMIT 2\";\n    final String response = doPostRaw(new SqlQuery(query, ResultFormat.ARRAYLINES, false, null, null)).rhs;\n    final String nullStr = NullHandling.replaceWithDefault() ? \"\" : null;\n    final List<String> lines = Splitter.on('\\n').splitToList(response);\n\n    Assert.assertEquals(4, lines.size());\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-01T00:00:00.000Z\",\n            1,\n            \"\",\n            \"a\",\n            \"[\\\"a\\\",\\\"b\\\"]\",\n            1.0,\n            1.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(0), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-02T00:00:00.000Z\",\n            1,\n            \"10.1\",\n            nullStr,\n            \"[\\\"b\\\",\\\"c\\\"]\",\n            2.0,\n            2.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(1), List.class)\n    );\n    Assert.assertEquals(\"\", lines.get(2));\n    Assert.assertEquals(\"\", lines.get(3));\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"M"},{"authorDate":"2021-09-06 01:57:45","commitOrder":3,"curCode":"  public void testArrayLinesResultFormatWithHeader() throws Exception\n  {\n    final String query = \"SELECT *, CASE dim2 WHEN '' THEN dim2 END FROM foo LIMIT 2\";\n    final Pair<QueryException, String> pair = doPostRaw(\n        new SqlQuery(query, ResultFormat.ARRAYLINES, true, null, null)\n    );\n    Assert.assertNull(pair.lhs);\n    final String response = pair.rhs;\n    final String nullStr = NullHandling.replaceWithDefault() ? \"\" : null;\n    final List<String> lines = Splitter.on('\\n').splitToList(response);\n\n    Assert.assertEquals(5, lines.size());\n    Assert.assertEquals(\n        Arrays.asList(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\", \"EXPR$8\"),\n        JSON_MAPPER.readValue(lines.get(0), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-01T00:00:00.000Z\",\n            1,\n            \"\",\n            \"a\",\n            \"[\\\"a\\\",\\\"b\\\"]\",\n            1.0,\n            1.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(1), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-02T00:00:00.000Z\",\n            1,\n            \"10.1\",\n            nullStr,\n            \"[\\\"b\\\",\\\"c\\\"]\",\n            2.0,\n            2.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(2), List.class)\n    );\n    Assert.assertEquals(\"\", lines.get(3));\n    Assert.assertEquals(\"\", lines.get(4));\n  }\n","date":"2021-09-06 01:57:45","endLine":636,"groupId":"101552","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testArrayLinesResultFormatWithHeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/f596adbdaab2d96bcd83e41fc1de166d07cb8a.src","preCode":"  public void testArrayLinesResultFormatWithHeader() throws Exception\n  {\n    final String query = \"SELECT *, CASE dim2 WHEN '' THEN dim2 END FROM foo LIMIT 2\";\n    final String response = doPostRaw(new SqlQuery(query, ResultFormat.ARRAYLINES, true, null, null)).rhs;\n    final String nullStr = NullHandling.replaceWithDefault() ? \"\" : null;\n    final List<String> lines = Splitter.on('\\n').splitToList(response);\n\n    Assert.assertEquals(5, lines.size());\n    Assert.assertEquals(\n        Arrays.asList(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\", \"EXPR$8\"),\n        JSON_MAPPER.readValue(lines.get(0), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-01T00:00:00.000Z\",\n            1,\n            \"\",\n            \"a\",\n            \"[\\\"a\\\",\\\"b\\\"]\",\n            1.0,\n            1.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(1), List.class)\n    );\n    Assert.assertEquals(\n        Arrays.asList(\n            \"2000-01-02T00:00:00.000Z\",\n            1,\n            \"10.1\",\n            nullStr,\n            \"[\\\"b\\\",\\\"c\\\"]\",\n            2.0,\n            2.0,\n            \"org.apache.druid.hll.VersionOneHyperLogLogCollector\",\n            nullStr\n        ),\n        JSON_MAPPER.readValue(lines.get(2), List.class)\n    );\n    Assert.assertEquals(\"\", lines.get(3));\n    Assert.assertEquals(\"\", lines.get(4));\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":590,"status":"M"}],"commitId":"82049bbf0a6409c09889ba9b3ea6131c9da86705","commitMessage":"@@@Cancel API for sqls (#11643)\n\n* initial work\n\n* reduce lock in sqlLifecycle\n\n* Integration test for sql canceling\n\n* javadoc.  cleanup.  more tests\n\n* log level to debug\n\n* fix test\n\n* checkstyle\n\n* fix flaky test; address comments\n\n* rowTransformer\n\n* cancelled state\n\n* use lock\n\n* explode instead of noop\n\n* oops\n\n* unused import\n\n* less aggressive with state\n\n* fix calcite charset\n\n* don't emit metrics when you are not authorized","date":"2021-09-06 01:57:45","modifiedFileCount":"17","status":"M","submitter":"Jihoon Son"}]
