[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testAddSnapshotJarToClasspath() throws IOException\n  {\n    Job job = Job.getInstance(conf, \"test-job\");\n    DistributedFileSystem fs = miniCluster.getFileSystem();\n    Path intermediatePath = new Path(\"/tmp/classpath\");\n    JobHelper.addSnapshotJarToClassPath(dummyJarFile, intermediatePath, fs, job);\n    Path expectedJarPath = new Path(intermediatePath, dummyJarFile.getName());\n    \r\n    Assert.assertTrue(fs.exists(expectedJarPath));\n    \r\n    Assert.assertEquals(expectedJarPath.toString(), job.getConfiguration().get(MRJobConfig.CLASSPATH_FILES));\n    Assert.assertEquals(dummyJarString, StringUtils.fromUtf8(IOUtils.toByteArray(fs.open(expectedJarPath))));\n  }\n","date":"2018-08-31 00:56:26","endLine":131,"groupId":"7992","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddSnapshotJarToClasspath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a2/5b6c95bdd9057486977c24d667ca8a1669c072.src","preCode":"  public void testAddSnapshotJarToClasspath() throws IOException\n  {\n    Job job = Job.getInstance(conf, \"test-job\");\n    DistributedFileSystem fs = miniCluster.getFileSystem();\n    Path intermediatePath = new Path(\"/tmp/classpath\");\n    JobHelper.addSnapshotJarToClassPath(dummyJarFile, intermediatePath, fs, job);\n    Path expectedJarPath = new Path(intermediatePath, dummyJarFile.getName());\n    \r\n    Assert.assertTrue(fs.exists(expectedJarPath));\n    \r\n    Assert.assertEquals(expectedJarPath.toString(), job.getConfiguration().get(MRJobConfig.CLASSPATH_FILES));\n    Assert.assertEquals(dummyJarString, StringUtils.fromUtf8(IOUtils.toByteArray(fs.open(expectedJarPath))));\n  }\n","realPath":"indexing-hadoop/src/test/java/org/apache/druid/indexer/HdfsClasspathSetupTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testAddNonSnapshotJarToClasspath() throws IOException\n  {\n    Job job = Job.getInstance(conf, \"test-job\");\n    DistributedFileSystem fs = miniCluster.getFileSystem();\n    JobHelper.addJarToClassPath(dummyJarFile, finalClasspath, intermediatePath, fs, job);\n    Path expectedJarPath = new Path(finalClasspath, dummyJarFile.getName());\n    \r\n    Assert.assertTrue(fs.exists(expectedJarPath));\n    \r\n    Assert.assertFalse(fs.exists(new Path(intermediatePath, dummyJarFile.getName())));\n    \r\n    Assert.assertEquals(expectedJarPath.toString(), job.getConfiguration().get(MRJobConfig.CLASSPATH_FILES));\n    Assert.assertEquals(dummyJarString, StringUtils.fromUtf8(IOUtils.toByteArray(fs.open(expectedJarPath))));\n  }\n","date":"2018-08-31 00:56:26","endLine":147,"groupId":"6167","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddNonSnapshotJarToClasspath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a2/5b6c95bdd9057486977c24d667ca8a1669c072.src","preCode":"  public void testAddNonSnapshotJarToClasspath() throws IOException\n  {\n    Job job = Job.getInstance(conf, \"test-job\");\n    DistributedFileSystem fs = miniCluster.getFileSystem();\n    JobHelper.addJarToClassPath(dummyJarFile, finalClasspath, intermediatePath, fs, job);\n    Path expectedJarPath = new Path(finalClasspath, dummyJarFile.getName());\n    \r\n    Assert.assertTrue(fs.exists(expectedJarPath));\n    \r\n    Assert.assertFalse(fs.exists(new Path(intermediatePath, dummyJarFile.getName())));\n    \r\n    Assert.assertEquals(expectedJarPath.toString(), job.getConfiguration().get(MRJobConfig.CLASSPATH_FILES));\n    Assert.assertEquals(dummyJarString, StringUtils.fromUtf8(IOUtils.toByteArray(fs.open(expectedJarPath))));\n  }\n","realPath":"indexing-hadoop/src/test/java/org/apache/druid/indexer/HdfsClasspathSetupTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2021-08-04 08:56:54","codes":[{"authorDate":"2021-08-04 08:56:54","commitOrder":2,"curCode":"  public void testAddSnapshotJarToClasspath() throws IOException\n  {\n    Job job = Job.getInstance(conf, \"test-job\");\n    Path intermediatePath = new Path(\"/tmp/classpath\");\n    JobHelper.addSnapshotJarToClassPath(dummyJarFile, intermediatePath, localFS, job);\n    Path expectedJarPath = new Path(intermediatePath, dummyJarFile.getName());\n    \r\n    Assert.assertTrue(localFS.exists(expectedJarPath));\n    \r\n    Assert.assertEquals(expectedJarPath.toString(), job.getConfiguration().get(MRJobConfig.CLASSPATH_FILES));\n    Assert.assertEquals(dummyJarString, StringUtils.fromUtf8(IOUtils.toByteArray(localFS.open(expectedJarPath))));\n  }\n","date":"2021-08-04 08:56:54","endLine":127,"groupId":"7992","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddSnapshotJarToClasspath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/29/2f683f9a42910b450958f8d5a070cc9a05f8aa.src","preCode":"  public void testAddSnapshotJarToClasspath() throws IOException\n  {\n    Job job = Job.getInstance(conf, \"test-job\");\n    DistributedFileSystem fs = miniCluster.getFileSystem();\n    Path intermediatePath = new Path(\"/tmp/classpath\");\n    JobHelper.addSnapshotJarToClassPath(dummyJarFile, intermediatePath, fs, job);\n    Path expectedJarPath = new Path(intermediatePath, dummyJarFile.getName());\n    \r\n    Assert.assertTrue(fs.exists(expectedJarPath));\n    \r\n    Assert.assertEquals(expectedJarPath.toString(), job.getConfiguration().get(MRJobConfig.CLASSPATH_FILES));\n    Assert.assertEquals(dummyJarString, StringUtils.fromUtf8(IOUtils.toByteArray(fs.open(expectedJarPath))));\n  }\n","realPath":"indexing-hadoop/src/test/java/org/apache/druid/indexer/HdfsClasspathSetupTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2021-08-04 08:56:54","commitOrder":2,"curCode":"  public void testAddNonSnapshotJarToClasspath() throws IOException\n  {\n    Job job = Job.getInstance(conf, \"test-job\");\n    JobHelper.addJarToClassPath(dummyJarFile, finalClasspath, intermediatePath, localFS, job);\n    Path expectedJarPath = new Path(finalClasspath, dummyJarFile.getName());\n    \r\n    Assert.assertTrue(localFS.exists(expectedJarPath));\n    \r\n    Assert.assertFalse(localFS.exists(new Path(intermediatePath, dummyJarFile.getName())));\n    \r\n    Assert.assertEquals(expectedJarPath.toString(), job.getConfiguration().get(MRJobConfig.CLASSPATH_FILES));\n    Assert.assertEquals(dummyJarString, StringUtils.fromUtf8(IOUtils.toByteArray(localFS.open(expectedJarPath))));\n  }\n","date":"2021-08-04 08:56:54","endLine":142,"groupId":"6167","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddNonSnapshotJarToClasspath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/29/2f683f9a42910b450958f8d5a070cc9a05f8aa.src","preCode":"  public void testAddNonSnapshotJarToClasspath() throws IOException\n  {\n    Job job = Job.getInstance(conf, \"test-job\");\n    DistributedFileSystem fs = miniCluster.getFileSystem();\n    JobHelper.addJarToClassPath(dummyJarFile, finalClasspath, intermediatePath, fs, job);\n    Path expectedJarPath = new Path(finalClasspath, dummyJarFile.getName());\n    \r\n    Assert.assertTrue(fs.exists(expectedJarPath));\n    \r\n    Assert.assertFalse(fs.exists(new Path(intermediatePath, dummyJarFile.getName())));\n    \r\n    Assert.assertEquals(expectedJarPath.toString(), job.getConfiguration().get(MRJobConfig.CLASSPATH_FILES));\n    Assert.assertEquals(dummyJarString, StringUtils.fromUtf8(IOUtils.toByteArray(fs.open(expectedJarPath))));\n  }\n","realPath":"indexing-hadoop/src/test/java/org/apache/druid/indexer/HdfsClasspathSetupTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"1a562f444c4e349348f7d909720eb5f368ecb8ef","commitMessage":"@@@Cleanup hadoop dependencies in indexing modules (#11516)\n\n* Remove hadoop-yarn-common dependency\n\n(cherry picked from commit d767c8f3d204d9d27d8122d55680c3c9f1cfe473)\n\n* Remove hdfs dependency from druid core","date":"2021-08-04 08:56:54","modifiedFileCount":"2","status":"M","submitter":"Rohan Garg"},{"authorTime":"2021-08-04 08:56:54","codes":[{"authorDate":"2021-08-10 22:52:32","commitOrder":3,"curCode":"  public void testAddSnapshotJarToClasspath() throws IOException\n  {\n    Job job = Job.getInstance(conf, \"test-job\");\n    Path intermediatePath = new Path(\"tmp/classpath\");\n    JobHelper.addSnapshotJarToClassPath(dummyJarFile, intermediatePath, localFS, job);\n    Path expectedJarPath = new Path(intermediatePath, dummyJarFile.getName());\n    \r\n    Assert.assertTrue(localFS.exists(expectedJarPath));\n    \r\n    Assert.assertEquals(expectedJarPath.toString(), job.getConfiguration().get(MRJobConfig.CLASSPATH_FILES));\n    Assert.assertEquals(dummyJarString, StringUtils.fromUtf8(IOUtils.toByteArray(localFS.open(expectedJarPath))));\n  }\n","date":"2021-08-10 22:52:32","endLine":128,"groupId":"101304","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testAddSnapshotJarToClasspath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d0/a23a8da3cc81b35091a2484e3972d073f0794f.src","preCode":"  public void testAddSnapshotJarToClasspath() throws IOException\n  {\n    Job job = Job.getInstance(conf, \"test-job\");\n    Path intermediatePath = new Path(\"/tmp/classpath\");\n    JobHelper.addSnapshotJarToClassPath(dummyJarFile, intermediatePath, localFS, job);\n    Path expectedJarPath = new Path(intermediatePath, dummyJarFile.getName());\n    \r\n    Assert.assertTrue(localFS.exists(expectedJarPath));\n    \r\n    Assert.assertEquals(expectedJarPath.toString(), job.getConfiguration().get(MRJobConfig.CLASSPATH_FILES));\n    Assert.assertEquals(dummyJarString, StringUtils.fromUtf8(IOUtils.toByteArray(localFS.open(expectedJarPath))));\n  }\n","realPath":"indexing-hadoop/src/test/java/org/apache/druid/indexer/HdfsClasspathSetupTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2021-08-04 08:56:54","commitOrder":3,"curCode":"  public void testAddNonSnapshotJarToClasspath() throws IOException\n  {\n    Job job = Job.getInstance(conf, \"test-job\");\n    JobHelper.addJarToClassPath(dummyJarFile, finalClasspath, intermediatePath, localFS, job);\n    Path expectedJarPath = new Path(finalClasspath, dummyJarFile.getName());\n    \r\n    Assert.assertTrue(localFS.exists(expectedJarPath));\n    \r\n    Assert.assertFalse(localFS.exists(new Path(intermediatePath, dummyJarFile.getName())));\n    \r\n    Assert.assertEquals(expectedJarPath.toString(), job.getConfiguration().get(MRJobConfig.CLASSPATH_FILES));\n    Assert.assertEquals(dummyJarString, StringUtils.fromUtf8(IOUtils.toByteArray(localFS.open(expectedJarPath))));\n  }\n","date":"2021-08-04 08:56:54","endLine":142,"groupId":"101304","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddNonSnapshotJarToClasspath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/29/2f683f9a42910b450958f8d5a070cc9a05f8aa.src","preCode":"  public void testAddNonSnapshotJarToClasspath() throws IOException\n  {\n    Job job = Job.getInstance(conf, \"test-job\");\n    JobHelper.addJarToClassPath(dummyJarFile, finalClasspath, intermediatePath, localFS, job);\n    Path expectedJarPath = new Path(finalClasspath, dummyJarFile.getName());\n    \r\n    Assert.assertTrue(localFS.exists(expectedJarPath));\n    \r\n    Assert.assertFalse(localFS.exists(new Path(intermediatePath, dummyJarFile.getName())));\n    \r\n    Assert.assertEquals(expectedJarPath.toString(), job.getConfiguration().get(MRJobConfig.CLASSPATH_FILES));\n    Assert.assertEquals(dummyJarString, StringUtils.fromUtf8(IOUtils.toByteArray(localFS.open(expectedJarPath))));\n  }\n","realPath":"indexing-hadoop/src/test/java/org/apache/druid/indexer/HdfsClasspathSetupTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"N"}],"commitId":"2004a94675df8bd6596686445d4b5364a1697ed0","commitMessage":"@@@Cleanup test dependencies in hdfs-storage extension (#11563)\n\n* Cleanup test dependencies in hdfs-storage extension\n\n* Fix working directory in LocalFileSystem in indexing-hadoop test","date":"2021-08-10 22:52:32","modifiedFileCount":"4","status":"M","submitter":"Rohan Garg"}]
