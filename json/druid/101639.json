[{"authorTime":"2020-02-20 05:09:20","codes":[{"authorDate":"2019-11-21 13:22:55","commitOrder":6,"curCode":"  public void testColumnComparison() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim1, m1, COUNT(*) FROM druid.foo WHERE m1 - 1 = dim1 GROUP BY dim1, m1\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(expressionFilter(\"((\\\"m1\\\" - 1) == CAST(\\\"dim1\\\", 'DOUBLE'))\"))\n                        .setDimensions(dimensions(\n                            new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                            new DefaultDimensionSpec(\"m1\", \"d1\", ValueType.FLOAT)\n                        ))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1.0f, 1L},\n            new Object[]{\"2\", 3.0f, 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"2\", 3.0f, 1L}\n        )\n    );\n  }\n","date":"2019-11-21 13:22:55","endLine":1520,"groupId":"13696","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testColumnComparison","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0c/1b9f96fa11ec662c356302a70109857954053c.src","preCode":"  public void testColumnComparison() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim1, m1, COUNT(*) FROM druid.foo WHERE m1 - 1 = dim1 GROUP BY dim1, m1\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(expressionFilter(\"((\\\"m1\\\" - 1) == CAST(\\\"dim1\\\", 'DOUBLE'))\"))\n                        .setDimensions(dimensions(\n                            new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                            new DefaultDimensionSpec(\"m1\", \"d1\", ValueType.FLOAT)\n                        ))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1.0f, 1L},\n            new Object[]{\"2\", 3.0f, 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"2\", 3.0f, 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1490,"status":"NB"},{"authorDate":"2020-02-20 05:09:20","commitOrder":6,"curCode":"  public void testParamsTuckedInACast() throws Exception\n  {\n    cannotVectorize();\n    testQuery(\n        \"SELECT dim1, m1, COUNT(*) FROM druid.foo WHERE m1 - CAST(? as INT) = dim1 GROUP BY dim1, m1\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(expressionFilter(\"((\\\"m1\\\" - 1) == CAST(\\\"dim1\\\", 'DOUBLE'))\"))\n                        .setDimensions(dimensions(\n                            new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                            new DefaultDimensionSpec(\"m1\", \"d1\", ValueType.FLOAT)\n                        ))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1.0f, 1L},\n            new Object[]{\"2\", 3.0f, 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"2\", 3.0f, 1L}\n        ),\n        ImmutableList.of(\n            new SqlParameter(SqlType.INTEGER, 1)\n        )\n    );\n  }\n","date":"2020-02-20 05:09:20","endLine":276,"groupId":"13696","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParamsTuckedInACast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/98/263cb2dea42a4594bc3fb6d2c4a1b42a059bb6.src","preCode":"  public void testParamsTuckedInACast() throws Exception\n  {\n    cannotVectorize();\n    testQuery(\n        \"SELECT dim1, m1, COUNT(*) FROM druid.foo WHERE m1 - CAST(? as INT) = dim1 GROUP BY dim1, m1\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(expressionFilter(\"((\\\"m1\\\" - 1) == CAST(\\\"dim1\\\", 'DOUBLE'))\"))\n                        .setDimensions(dimensions(\n                            new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                            new DefaultDimensionSpec(\"m1\", \"d1\", ValueType.FLOAT)\n                        ))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1.0f, 1L},\n            new Object[]{\"2\", 3.0f, 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"2\", 3.0f, 1L}\n        ),\n        ImmutableList.of(\n            new SqlParameter(SqlType.INTEGER, 1)\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteParameterQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"B"}],"commitId":"b408a6d774e43e574bf8092584fae76d582cfd8f","commitMessage":"@@@sql support for dynamic parameters (#6974)\n\n* sql support for dynamic parameters\n\n* fixup\n\n* javadocs\n\n* fixup from merge\n\n* formatting\n\n* fixes\n\n* fix it\n\n* doc fix\n\n* remove druid fallback self-join parameterized test\n\n* unused imports\n\n* ignore test for now\n\n* fix imports\n\n* fixup\n\n* fix merge\n\n* merge fixup\n\n* fix test that cannot vectorize\n\n* fixup and more better\n\n* dependency thingo\n\n* fix docs\n\n* tweaks\n\n* fix docs\n\n* spelling\n\n* unused imports after merge\n\n* review stuffs\n\n* add comment\n\n* add ignore text\n\n* review stuffs\n","date":"2020-02-20 05:09:20","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-03-17 02:46:50","codes":[{"authorDate":"2021-03-17 02:46:50","commitOrder":7,"curCode":"  public void testColumnComparison() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, m1, COUNT(*) FROM druid.foo WHERE m1 - 1 = dim1 GROUP BY dim1, m1\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(expressionFilter(\"((\\\"m1\\\" - 1) == CAST(\\\"dim1\\\", 'DOUBLE'))\"))\n                        .setDimensions(dimensions(\n                            new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                            new DefaultDimensionSpec(\"m1\", \"d1\", ValueType.FLOAT)\n                        ))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1.0f, 1L},\n            new Object[]{\"2\", 3.0f, 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"2\", 3.0f, 1L}\n        )\n    );\n  }\n","date":"2021-03-17 02:46:50","endLine":3563,"groupId":"101639","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testColumnComparison","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/35/641cf97120785a2681c3bdd4c28662e7b1cf85.src","preCode":"  public void testColumnComparison() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim1, m1, COUNT(*) FROM druid.foo WHERE m1 - 1 = dim1 GROUP BY dim1, m1\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(expressionFilter(\"((\\\"m1\\\" - 1) == CAST(\\\"dim1\\\", 'DOUBLE'))\"))\n                        .setDimensions(dimensions(\n                            new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                            new DefaultDimensionSpec(\"m1\", \"d1\", ValueType.FLOAT)\n                        ))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1.0f, 1L},\n            new Object[]{\"2\", 3.0f, 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"2\", 3.0f, 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":3536,"status":"M"},{"authorDate":"2021-03-17 02:46:50","commitOrder":7,"curCode":"  public void testParamsTuckedInACast() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, m1, COUNT(*) FROM druid.foo WHERE m1 - CAST(? as INT) = dim1 GROUP BY dim1, m1\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(expressionFilter(\"((\\\"m1\\\" - 1) == CAST(\\\"dim1\\\", 'DOUBLE'))\"))\n                        .setDimensions(dimensions(\n                            new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                            new DefaultDimensionSpec(\"m1\", \"d1\", ValueType.FLOAT)\n                        ))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1.0f, 1L},\n            new Object[]{\"2\", 3.0f, 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"2\", 3.0f, 1L}\n        ),\n        ImmutableList.of(\n            new SqlParameter(SqlType.INTEGER, 1)\n        )\n    );\n  }\n","date":"2021-03-17 02:46:50","endLine":275,"groupId":"101639","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParamsTuckedInACast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/94/e47d07fc8ade27d4aa9cdd0d452e29f2dc7e4d.src","preCode":"  public void testParamsTuckedInACast() throws Exception\n  {\n    cannotVectorize();\n    testQuery(\n        \"SELECT dim1, m1, COUNT(*) FROM druid.foo WHERE m1 - CAST(? as INT) = dim1 GROUP BY dim1, m1\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(expressionFilter(\"((\\\"m1\\\" - 1) == CAST(\\\"dim1\\\", 'DOUBLE'))\"))\n                        .setDimensions(dimensions(\n                            new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                            new DefaultDimensionSpec(\"m1\", \"d1\", ValueType.FLOAT)\n                        ))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"\", 1.0f, 1L},\n            new Object[]{\"2\", 3.0f, 1L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"2\", 3.0f, 1L}\n        ),\n        ImmutableList.of(\n            new SqlParameter(SqlType.INTEGER, 1)\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteParameterQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"}],"commitId":"4cd4a22f87616ad6b4a722a8a47bad9ce25fa790","commitMessage":"@@@expression filter support for vectorized query engines (#10613)\n\n* expression filter support for vectorized query engines\n\n* remove unused codes\n\n* more tests\n\n* refactor.  more tests\n\n* suppress\n\n* more\n\n* more\n\n* more\n\n* oops.  i was wrong\n\n* comment\n\n* remove decorate.  object dimension selector.  more javadocs\n\n* style","date":"2021-03-17 02:46:50","modifiedFileCount":"48","status":"M","submitter":"Clint Wylie"}]
