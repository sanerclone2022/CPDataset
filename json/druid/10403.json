[{"authorTime":"2021-03-18 02:34:05","codes":[{"authorDate":"2019-05-30 02:20:45","commitOrder":3,"curCode":"  public LoadQueuePeonTester()\n  {\n    super(\n        null,\n        null,\n        null,\n        Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),\n        null,\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            10,\n            null,\n            new Duration(\"PT1s\")\n        )\n    );\n  }\n","date":"2019-05-30 02:20:45","endLine":52,"groupId":"3932","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"LoadQueuePeonTester","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/1e903bfccf688523343ca9039dd57527637c1b.src","preCode":"  public LoadQueuePeonTester()\n  {\n    super(\n        null,\n        null,\n        null,\n        Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),\n        null,\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            10,\n            null,\n            new Duration(\"PT1s\")\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/LoadQueuePeonTester.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"NB"},{"authorDate":"2021-03-18 02:34:05","commitOrder":3,"curCode":"  public void testFailAssignForLoadDropTimeout() throws Exception\n  {\n    final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\");\n\n    final CountDownLatch loadRequestSignal = new CountDownLatch(1);\n    final CountDownLatch segmentLoadedSignal = new CountDownLatch(1);\n    final CountDownLatch delayedSegmentLoadedSignal = new CountDownLatch(2);\n    final CountDownLatch loadRequestRemoveSignal = new CountDownLatch(1);\n\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOAD_QUEUE_PATH,\n        jsonMapper,\n        Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"test_load_queue_peon-%d\"),\n        \r\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n\n    loadQueuePeon.start();\n\n    loadQueueCache.getListenable().addListener(\n        new PathChildrenCacheListener()\n        {\n          @Override\n          public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n          {\n            switch (event.getType()) {\n              case CHILD_ADDED:\n                loadRequestSignal.countDown();\n                break;\n              case CHILD_REMOVED:\n                loadRequestRemoveSignal.countDown();\n                break;\n              default:\n                \r\n            }\n          }\n        }\n    );\n    loadQueueCache.start();\n\n    loadQueuePeon.loadSegment(\n        segment,\n        new LoadPeonCallback()\n        {\n          @Override\n          public void execute()\n          {\n            segmentLoadedSignal.countDown();\n            delayedSegmentLoadedSignal.countDown();\n          }\n        }\n    );\n\n    String loadRequestPath = ZKPaths.makePath(LOAD_QUEUE_PATH, segment.getId().toString());\n\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestSignal));\n    Assert.assertNotNull(curator.checkExists().forPath(loadRequestPath));\n    Assert.assertEquals(\n        segment,\n        ((SegmentChangeRequestLoad) jsonMapper\n            .readValue(curator.getData().decompressed().forPath(loadRequestPath), DataSegmentChangeRequest.class))\n            .getSegment()\n    );\n\n    \r\n    Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal));\n    Assert.assertEquals(1, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(1200L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(1, loadQueuePeon.getTimedOutSegments().size());\n\n    \r\n    curator.delete().guaranteed().forPath(loadRequestPath);\n    Assert.assertTrue(timing.forWaiting().awaitLatch(delayedSegmentLoadedSignal));\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestRemoveSignal));\n    Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(0, loadQueuePeon.getTimedOutSegments().size());\n\n  }\n","date":"2021-03-18 02:34:05","endLine":411,"groupId":"4861","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailAssignForLoadDropTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4a/2a25f682c2a5cf8aea018205e01066fafeb09e.src","preCode":"  public void testFailAssignForLoadDropTimeout() throws Exception\n  {\n    final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\");\n\n    final CountDownLatch loadRequestSignal = new CountDownLatch(1);\n    final CountDownLatch segmentLoadedSignal = new CountDownLatch(1);\n    final CountDownLatch delayedSegmentLoadedSignal = new CountDownLatch(2);\n    final CountDownLatch loadRequestRemoveSignal = new CountDownLatch(1);\n\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOAD_QUEUE_PATH,\n        jsonMapper,\n        Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"test_load_queue_peon-%d\"),\n        \r\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n\n    loadQueuePeon.start();\n\n    loadQueueCache.getListenable().addListener(\n        new PathChildrenCacheListener()\n        {\n          @Override\n          public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n          {\n            switch (event.getType()) {\n              case CHILD_ADDED:\n                loadRequestSignal.countDown();\n                break;\n              case CHILD_REMOVED:\n                loadRequestRemoveSignal.countDown();\n                break;\n              default:\n                \r\n            }\n          }\n        }\n    );\n    loadQueueCache.start();\n\n    loadQueuePeon.loadSegment(\n        segment,\n        new LoadPeonCallback()\n        {\n          @Override\n          public void execute()\n          {\n            segmentLoadedSignal.countDown();\n            delayedSegmentLoadedSignal.countDown();\n          }\n        }\n    );\n\n    String loadRequestPath = ZKPaths.makePath(LOAD_QUEUE_PATH, segment.getId().toString());\n\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestSignal));\n    Assert.assertNotNull(curator.checkExists().forPath(loadRequestPath));\n    Assert.assertEquals(\n        segment,\n        ((SegmentChangeRequestLoad) jsonMapper\n            .readValue(curator.getData().decompressed().forPath(loadRequestPath), DataSegmentChangeRequest.class))\n            .getSegment()\n    );\n\n    \r\n    Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal));\n    Assert.assertEquals(1, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(1200L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(1, loadQueuePeon.getTimedOutSegments().size());\n\n    \r\n    curator.delete().guaranteed().forPath(loadRequestPath);\n    Assert.assertTrue(timing.forWaiting().awaitLatch(delayedSegmentLoadedSignal));\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestRemoveSignal));\n    Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(0, loadQueuePeon.getTimedOutSegments().size());\n\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/LoadQueuePeonTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"B"}],"commitId":"3d7e7c2c836d73cb77dbd412d6eb2d61f6912a69","commitMessage":"@@@Avoid deletion of load/drop entry from CuratorLoadQueuePeon in case of load timeout (#10213)\n\n* Skip queue removal on timeout\n\n* Clarify error\n\n* Add new config to control replication\n\nCo-authored-by: Atul Mohan <atulmohan@yahoo-inc.com>","date":"2021-03-18 02:34:05","modifiedFileCount":"12","status":"M","submitter":"Atul Mohan"},{"authorTime":"2021-04-21 08:10:43","codes":[{"authorDate":"2021-04-21 08:10:43","commitOrder":4,"curCode":"  public LoadQueuePeonTester()\n  {\n    super(\n        null,\n        null,\n        null,\n        Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),\n        null,\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n  }\n","date":"2021-04-21 08:10:43","endLine":54,"groupId":"4861","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"LoadQueuePeonTester","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/51/85452779c3819e9b8253cfbdfbd1662e60d02a.src","preCode":"  public LoadQueuePeonTester()\n  {\n    super(\n        null,\n        null,\n        null,\n        Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),\n        null,\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            10,\n            null,\n            new Duration(\"PT1s\")\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/LoadQueuePeonTester.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2021-04-21 08:10:43","commitOrder":4,"curCode":"  public void testFailAssignForLoadDropTimeout() throws Exception\n  {\n    final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\");\n\n    final CountDownLatch loadRequestSignal = new CountDownLatch(1);\n    final CountDownLatch segmentLoadedSignal = new CountDownLatch(1);\n    final CountDownLatch delayedSegmentLoadedSignal = new CountDownLatch(2);\n    final CountDownLatch loadRequestRemoveSignal = new CountDownLatch(1);\n\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOAD_QUEUE_PATH,\n        jsonMapper,\n        Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"test_load_queue_peon-%d\"),\n        \r\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n\n    loadQueuePeon.start();\n\n    loadQueueCache.getListenable().addListener(\n        new PathChildrenCacheListener()\n        {\n          @Override\n          public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n          {\n            switch (event.getType()) {\n              case CHILD_ADDED:\n                loadRequestSignal.countDown();\n                break;\n              case CHILD_REMOVED:\n                loadRequestRemoveSignal.countDown();\n                break;\n              default:\n                \r\n            }\n          }\n        }\n    );\n    loadQueueCache.start();\n\n    loadQueuePeon.loadSegment(\n        segment,\n        new LoadPeonCallback()\n        {\n          @Override\n          public void execute()\n          {\n            segmentLoadedSignal.countDown();\n            delayedSegmentLoadedSignal.countDown();\n          }\n        }\n    );\n\n    String loadRequestPath = ZKPaths.makePath(LOAD_QUEUE_PATH, segment.getId().toString());\n\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestSignal));\n    Assert.assertNotNull(curator.checkExists().forPath(loadRequestPath));\n    Assert.assertEquals(\n        segment,\n        ((SegmentChangeRequestLoad) jsonMapper\n            .readValue(curator.getData().decompressed().forPath(loadRequestPath), DataSegmentChangeRequest.class))\n            .getSegment()\n    );\n\n    \r\n    Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal));\n    Assert.assertEquals(1, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(1200L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(1, loadQueuePeon.getTimedOutSegments().size());\n\n    \r\n    curator.delete().guaranteed().forPath(loadRequestPath);\n    Assert.assertTrue(timing.forWaiting().awaitLatch(delayedSegmentLoadedSignal));\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestRemoveSignal));\n    Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(0, loadQueuePeon.getTimedOutSegments().size());\n\n  }\n","date":"2021-04-21 08:10:43","endLine":420,"groupId":"4861","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailAssignForLoadDropTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/24/e68063b6a7124cad19d85f5356f5b7eb71c0b3.src","preCode":"  public void testFailAssignForLoadDropTimeout() throws Exception\n  {\n    final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\");\n\n    final CountDownLatch loadRequestSignal = new CountDownLatch(1);\n    final CountDownLatch segmentLoadedSignal = new CountDownLatch(1);\n    final CountDownLatch delayedSegmentLoadedSignal = new CountDownLatch(2);\n    final CountDownLatch loadRequestRemoveSignal = new CountDownLatch(1);\n\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOAD_QUEUE_PATH,\n        jsonMapper,\n        Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"test_load_queue_peon-%d\"),\n        \r\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n\n    loadQueuePeon.start();\n\n    loadQueueCache.getListenable().addListener(\n        new PathChildrenCacheListener()\n        {\n          @Override\n          public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n          {\n            switch (event.getType()) {\n              case CHILD_ADDED:\n                loadRequestSignal.countDown();\n                break;\n              case CHILD_REMOVED:\n                loadRequestRemoveSignal.countDown();\n                break;\n              default:\n                \r\n            }\n          }\n        }\n    );\n    loadQueueCache.start();\n\n    loadQueuePeon.loadSegment(\n        segment,\n        new LoadPeonCallback()\n        {\n          @Override\n          public void execute()\n          {\n            segmentLoadedSignal.countDown();\n            delayedSegmentLoadedSignal.countDown();\n          }\n        }\n    );\n\n    String loadRequestPath = ZKPaths.makePath(LOAD_QUEUE_PATH, segment.getId().toString());\n\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestSignal));\n    Assert.assertNotNull(curator.checkExists().forPath(loadRequestPath));\n    Assert.assertEquals(\n        segment,\n        ((SegmentChangeRequestLoad) jsonMapper\n            .readValue(curator.getData().decompressed().forPath(loadRequestPath), DataSegmentChangeRequest.class))\n            .getSegment()\n    );\n\n    \r\n    Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal));\n    Assert.assertEquals(1, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(1200L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(1, loadQueuePeon.getTimedOutSegments().size());\n\n    \r\n    curator.delete().guaranteed().forPath(loadRequestPath);\n    Assert.assertTrue(timing.forWaiting().awaitLatch(delayedSegmentLoadedSignal));\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestRemoveSignal));\n    Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(0, loadQueuePeon.getTimedOutSegments().size());\n\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/LoadQueuePeonTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"M"}],"commitId":"6d2b5cdd7e080401bce64d352e3a65788ff110c4","commitMessage":"@@@Add feature to automatically remove audit logs based on retention period (#11084)\n\n* add docs\n\n* add impl\n\n* fix checkstyle\n\n* fix test\n\n* add test\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix test\n\n* Address comments\n\n* Address comments\n\n* fix spelling\n\n* fix docs","date":"2021-04-21 08:10:43","modifiedFileCount":"13","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-05-04 02:50:45","codes":[{"authorDate":"2021-05-04 02:50:45","commitOrder":5,"curCode":"  public LoadQueuePeonTester()\n  {\n    super(\n        null,\n        null,\n        null,\n        Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),\n        null,\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n  }\n","date":"2021-05-04 02:50:45","endLine":56,"groupId":"4861","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"LoadQueuePeonTester","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/55/40a117d4be271f9870ecbaf4c7dd12fad2f5ba.src","preCode":"  public LoadQueuePeonTester()\n  {\n    super(\n        null,\n        null,\n        null,\n        Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),\n        null,\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/LoadQueuePeonTester.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2021-05-04 02:50:45","commitOrder":5,"curCode":"  public void testFailAssignForLoadDropTimeout() throws Exception\n  {\n    final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\");\n\n    final CountDownLatch loadRequestSignal = new CountDownLatch(1);\n    final CountDownLatch segmentLoadedSignal = new CountDownLatch(1);\n    final CountDownLatch delayedSegmentLoadedSignal = new CountDownLatch(2);\n    final CountDownLatch loadRequestRemoveSignal = new CountDownLatch(1);\n\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOAD_QUEUE_PATH,\n        jsonMapper,\n        Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"test_load_queue_peon-%d\"),\n        \r\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n\n    loadQueuePeon.start();\n\n    loadQueueCache.getListenable().addListener(\n        new PathChildrenCacheListener()\n        {\n          @Override\n          public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n          {\n            switch (event.getType()) {\n              case CHILD_ADDED:\n                loadRequestSignal.countDown();\n                break;\n              case CHILD_REMOVED:\n                loadRequestRemoveSignal.countDown();\n                break;\n              default:\n                \r\n            }\n          }\n        }\n    );\n    loadQueueCache.start();\n\n    loadQueuePeon.loadSegment(\n        segment,\n        new LoadPeonCallback()\n        {\n          @Override\n          public void execute()\n          {\n            segmentLoadedSignal.countDown();\n            delayedSegmentLoadedSignal.countDown();\n          }\n        }\n    );\n\n    String loadRequestPath = ZKPaths.makePath(LOAD_QUEUE_PATH, segment.getId().toString());\n\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestSignal));\n    Assert.assertNotNull(curator.checkExists().forPath(loadRequestPath));\n    Assert.assertEquals(\n        segment,\n        ((SegmentChangeRequestLoad) jsonMapper\n            .readValue(curator.getData().decompressed().forPath(loadRequestPath), DataSegmentChangeRequest.class))\n            .getSegment()\n    );\n\n    \r\n    Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal));\n    Assert.assertEquals(1, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(1200L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(1, loadQueuePeon.getTimedOutSegments().size());\n\n    \r\n    curator.delete().guaranteed().forPath(loadRequestPath);\n    Assert.assertTrue(timing.forWaiting().awaitLatch(delayedSegmentLoadedSignal));\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestRemoveSignal));\n    Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(0, loadQueuePeon.getTimedOutSegments().size());\n\n  }\n","date":"2021-05-04 02:50:45","endLine":426,"groupId":"4861","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailAssignForLoadDropTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a6/07423bb9a2225dbf7417756b8bffe59d9537ac.src","preCode":"  public void testFailAssignForLoadDropTimeout() throws Exception\n  {\n    final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\");\n\n    final CountDownLatch loadRequestSignal = new CountDownLatch(1);\n    final CountDownLatch segmentLoadedSignal = new CountDownLatch(1);\n    final CountDownLatch delayedSegmentLoadedSignal = new CountDownLatch(2);\n    final CountDownLatch loadRequestRemoveSignal = new CountDownLatch(1);\n\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOAD_QUEUE_PATH,\n        jsonMapper,\n        Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"test_load_queue_peon-%d\"),\n        \r\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n\n    loadQueuePeon.start();\n\n    loadQueueCache.getListenable().addListener(\n        new PathChildrenCacheListener()\n        {\n          @Override\n          public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n          {\n            switch (event.getType()) {\n              case CHILD_ADDED:\n                loadRequestSignal.countDown();\n                break;\n              case CHILD_REMOVED:\n                loadRequestRemoveSignal.countDown();\n                break;\n              default:\n                \r\n            }\n          }\n        }\n    );\n    loadQueueCache.start();\n\n    loadQueuePeon.loadSegment(\n        segment,\n        new LoadPeonCallback()\n        {\n          @Override\n          public void execute()\n          {\n            segmentLoadedSignal.countDown();\n            delayedSegmentLoadedSignal.countDown();\n          }\n        }\n    );\n\n    String loadRequestPath = ZKPaths.makePath(LOAD_QUEUE_PATH, segment.getId().toString());\n\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestSignal));\n    Assert.assertNotNull(curator.checkExists().forPath(loadRequestPath));\n    Assert.assertEquals(\n        segment,\n        ((SegmentChangeRequestLoad) jsonMapper\n            .readValue(curator.getData().decompressed().forPath(loadRequestPath), DataSegmentChangeRequest.class))\n            .getSegment()\n    );\n\n    \r\n    Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal));\n    Assert.assertEquals(1, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(1200L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(1, loadQueuePeon.getTimedOutSegments().size());\n\n    \r\n    curator.delete().guaranteed().forPath(loadRequestPath);\n    Assert.assertTrue(timing.forWaiting().awaitLatch(delayedSegmentLoadedSignal));\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestRemoveSignal));\n    Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(0, loadQueuePeon.getTimedOutSegments().size());\n\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/LoadQueuePeonTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"}],"commitId":"84aac4832d66d2bf2c9e2903b9772bb5882c5ccf","commitMessage":"@@@Add feature to automatically remove rules based on retention period (#11164)\n\n* Add feature to automatically remove rules based on retention period\n\n* Add feature to automatically remove rules based on retention period\n\n* address comments","date":"2021-05-04 02:50:45","modifiedFileCount":"13","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-05-07 13:25:23","codes":[{"authorDate":"2021-05-07 13:25:23","commitOrder":6,"curCode":"  public LoadQueuePeonTester()\n  {\n    super(\n        null,\n        null,\n        null,\n        Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),\n        null,\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n  }\n","date":"2021-05-07 13:25:23","endLine":58,"groupId":"4861","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"LoadQueuePeonTester","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/ac65b88b8c3ff8f3bcd4fc35e4e990aa96e89e.src","preCode":"  public LoadQueuePeonTester()\n  {\n    super(\n        null,\n        null,\n        null,\n        Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),\n        null,\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/LoadQueuePeonTester.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2021-05-07 13:25:23","commitOrder":6,"curCode":"  public void testFailAssignForLoadDropTimeout() throws Exception\n  {\n    final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\");\n\n    final CountDownLatch loadRequestSignal = new CountDownLatch(1);\n    final CountDownLatch segmentLoadedSignal = new CountDownLatch(1);\n    final CountDownLatch delayedSegmentLoadedSignal = new CountDownLatch(2);\n    final CountDownLatch loadRequestRemoveSignal = new CountDownLatch(1);\n\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOAD_QUEUE_PATH,\n        jsonMapper,\n        Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"test_load_queue_peon-%d\"),\n        \r\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n\n    loadQueuePeon.start();\n\n    loadQueueCache.getListenable().addListener(\n        new PathChildrenCacheListener()\n        {\n          @Override\n          public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n          {\n            switch (event.getType()) {\n              case CHILD_ADDED:\n                loadRequestSignal.countDown();\n                break;\n              case CHILD_REMOVED:\n                loadRequestRemoveSignal.countDown();\n                break;\n              default:\n                \r\n            }\n          }\n        }\n    );\n    loadQueueCache.start();\n\n    loadQueuePeon.loadSegment(\n        segment,\n        new LoadPeonCallback()\n        {\n          @Override\n          public void execute()\n          {\n            segmentLoadedSignal.countDown();\n            delayedSegmentLoadedSignal.countDown();\n          }\n        }\n    );\n\n    String loadRequestPath = ZKPaths.makePath(LOAD_QUEUE_PATH, segment.getId().toString());\n\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestSignal));\n    Assert.assertNotNull(curator.checkExists().forPath(loadRequestPath));\n    Assert.assertEquals(\n        segment,\n        ((SegmentChangeRequestLoad) jsonMapper\n            .readValue(curator.getData().decompressed().forPath(loadRequestPath), DataSegmentChangeRequest.class))\n            .getSegment()\n    );\n\n    \r\n    Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal));\n    Assert.assertEquals(1, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(1200L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(1, loadQueuePeon.getTimedOutSegments().size());\n\n    \r\n    curator.delete().guaranteed().forPath(loadRequestPath);\n    Assert.assertTrue(timing.forWaiting().awaitLatch(delayedSegmentLoadedSignal));\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestRemoveSignal));\n    Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(0, loadQueuePeon.getTimedOutSegments().size());\n\n  }\n","date":"2021-05-07 13:25:23","endLine":432,"groupId":"4861","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailAssignForLoadDropTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8b/2f486d1ace773df3799c35f1a149ba229009ad.src","preCode":"  public void testFailAssignForLoadDropTimeout() throws Exception\n  {\n    final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\");\n\n    final CountDownLatch loadRequestSignal = new CountDownLatch(1);\n    final CountDownLatch segmentLoadedSignal = new CountDownLatch(1);\n    final CountDownLatch delayedSegmentLoadedSignal = new CountDownLatch(2);\n    final CountDownLatch loadRequestRemoveSignal = new CountDownLatch(1);\n\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOAD_QUEUE_PATH,\n        jsonMapper,\n        Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"test_load_queue_peon-%d\"),\n        \r\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n\n    loadQueuePeon.start();\n\n    loadQueueCache.getListenable().addListener(\n        new PathChildrenCacheListener()\n        {\n          @Override\n          public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n          {\n            switch (event.getType()) {\n              case CHILD_ADDED:\n                loadRequestSignal.countDown();\n                break;\n              case CHILD_REMOVED:\n                loadRequestRemoveSignal.countDown();\n                break;\n              default:\n                \r\n            }\n          }\n        }\n    );\n    loadQueueCache.start();\n\n    loadQueuePeon.loadSegment(\n        segment,\n        new LoadPeonCallback()\n        {\n          @Override\n          public void execute()\n          {\n            segmentLoadedSignal.countDown();\n            delayedSegmentLoadedSignal.countDown();\n          }\n        }\n    );\n\n    String loadRequestPath = ZKPaths.makePath(LOAD_QUEUE_PATH, segment.getId().toString());\n\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestSignal));\n    Assert.assertNotNull(curator.checkExists().forPath(loadRequestPath));\n    Assert.assertEquals(\n        segment,\n        ((SegmentChangeRequestLoad) jsonMapper\n            .readValue(curator.getData().decompressed().forPath(loadRequestPath), DataSegmentChangeRequest.class))\n            .getSegment()\n    );\n\n    \r\n    Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal));\n    Assert.assertEquals(1, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(1200L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(1, loadQueuePeon.getTimedOutSegments().size());\n\n    \r\n    curator.delete().guaranteed().forPath(loadRequestPath);\n    Assert.assertTrue(timing.forWaiting().awaitLatch(delayedSegmentLoadedSignal));\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestRemoveSignal));\n    Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(0, loadQueuePeon.getTimedOutSegments().size());\n\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/LoadQueuePeonTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"}],"commitId":"d73f72e50892fe0b7450d8d4bf5678c3f8270cfe","commitMessage":"@@@Add feature to automatically remove supervisor based on retention period (#11200)\n\n* add auto clean up\n\n* add test\n\n* add test\n\n* fix test\n\n* Address comments\n\n* Address comments","date":"2021-05-07 13:25:23","modifiedFileCount":"14","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-05-11 16:22:33","codes":[{"authorDate":"2021-05-11 16:22:33","commitOrder":7,"curCode":"  public LoadQueuePeonTester()\n  {\n    super(\n        null,\n        null,\n        null,\n        Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),\n        null,\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n  }\n","date":"2021-05-11 16:22:33","endLine":60,"groupId":"4861","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"LoadQueuePeonTester","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/32/6bc764113c1bb3e080b97783606ff5f860654b.src","preCode":"  public LoadQueuePeonTester()\n  {\n    super(\n        null,\n        null,\n        null,\n        Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),\n        null,\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/LoadQueuePeonTester.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2021-05-11 16:22:33","commitOrder":7,"curCode":"  public void testFailAssignForLoadDropTimeout() throws Exception\n  {\n    final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\");\n\n    final CountDownLatch loadRequestSignal = new CountDownLatch(1);\n    final CountDownLatch segmentLoadedSignal = new CountDownLatch(1);\n    final CountDownLatch delayedSegmentLoadedSignal = new CountDownLatch(2);\n    final CountDownLatch loadRequestRemoveSignal = new CountDownLatch(1);\n\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOAD_QUEUE_PATH,\n        jsonMapper,\n        Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"test_load_queue_peon-%d\"),\n        \r\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n\n    loadQueuePeon.start();\n\n    loadQueueCache.getListenable().addListener(\n        new PathChildrenCacheListener()\n        {\n          @Override\n          public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n          {\n            switch (event.getType()) {\n              case CHILD_ADDED:\n                loadRequestSignal.countDown();\n                break;\n              case CHILD_REMOVED:\n                loadRequestRemoveSignal.countDown();\n                break;\n              default:\n                \r\n            }\n          }\n        }\n    );\n    loadQueueCache.start();\n\n    loadQueuePeon.loadSegment(\n        segment,\n        new LoadPeonCallback()\n        {\n          @Override\n          public void execute()\n          {\n            segmentLoadedSignal.countDown();\n            delayedSegmentLoadedSignal.countDown();\n          }\n        }\n    );\n\n    String loadRequestPath = ZKPaths.makePath(LOAD_QUEUE_PATH, segment.getId().toString());\n\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestSignal));\n    Assert.assertNotNull(curator.checkExists().forPath(loadRequestPath));\n    Assert.assertEquals(\n        segment,\n        ((SegmentChangeRequestLoad) jsonMapper\n            .readValue(curator.getData().decompressed().forPath(loadRequestPath), DataSegmentChangeRequest.class))\n            .getSegment()\n    );\n\n    \r\n    Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal));\n    Assert.assertEquals(1, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(1200L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(1, loadQueuePeon.getTimedOutSegments().size());\n\n    \r\n    curator.delete().guaranteed().forPath(loadRequestPath);\n    Assert.assertTrue(timing.forWaiting().awaitLatch(delayedSegmentLoadedSignal));\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestRemoveSignal));\n    Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(0, loadQueuePeon.getTimedOutSegments().size());\n\n  }\n","date":"2021-05-11 16:22:33","endLine":438,"groupId":"4861","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailAssignForLoadDropTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ea/4322a02f8a9b29303e2d0d97a53f7e2022d407.src","preCode":"  public void testFailAssignForLoadDropTimeout() throws Exception\n  {\n    final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\");\n\n    final CountDownLatch loadRequestSignal = new CountDownLatch(1);\n    final CountDownLatch segmentLoadedSignal = new CountDownLatch(1);\n    final CountDownLatch delayedSegmentLoadedSignal = new CountDownLatch(2);\n    final CountDownLatch loadRequestRemoveSignal = new CountDownLatch(1);\n\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOAD_QUEUE_PATH,\n        jsonMapper,\n        Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"test_load_queue_peon-%d\"),\n        \r\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n\n    loadQueuePeon.start();\n\n    loadQueueCache.getListenable().addListener(\n        new PathChildrenCacheListener()\n        {\n          @Override\n          public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n          {\n            switch (event.getType()) {\n              case CHILD_ADDED:\n                loadRequestSignal.countDown();\n                break;\n              case CHILD_REMOVED:\n                loadRequestRemoveSignal.countDown();\n                break;\n              default:\n                \r\n            }\n          }\n        }\n    );\n    loadQueueCache.start();\n\n    loadQueuePeon.loadSegment(\n        segment,\n        new LoadPeonCallback()\n        {\n          @Override\n          public void execute()\n          {\n            segmentLoadedSignal.countDown();\n            delayedSegmentLoadedSignal.countDown();\n          }\n        }\n    );\n\n    String loadRequestPath = ZKPaths.makePath(LOAD_QUEUE_PATH, segment.getId().toString());\n\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestSignal));\n    Assert.assertNotNull(curator.checkExists().forPath(loadRequestPath));\n    Assert.assertEquals(\n        segment,\n        ((SegmentChangeRequestLoad) jsonMapper\n            .readValue(curator.getData().decompressed().forPath(loadRequestPath), DataSegmentChangeRequest.class))\n            .getSegment()\n    );\n\n    \r\n    Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal));\n    Assert.assertEquals(1, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(1200L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(1, loadQueuePeon.getTimedOutSegments().size());\n\n    \r\n    curator.delete().guaranteed().forPath(loadRequestPath);\n    Assert.assertTrue(timing.forWaiting().awaitLatch(delayedSegmentLoadedSignal));\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestRemoveSignal));\n    Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(0, loadQueuePeon.getTimedOutSegments().size());\n\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/LoadQueuePeonTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"}],"commitId":"4326e699bd3e146e1899f014e8765c52241f3cd3","commitMessage":"@@@Add feature to automatically remove datasource metadata based on retention period (#11227)\n\n* add auto clean up datasource metadata\n\n* add test\n\n* fix checkstyle\n\n* add comments\n\n* fix error\n\n* address comments\n\n* Address comments\n\n* fix test\n\n* fix test\n\n* fix typo\n\n* add comment\n\n* fix test\n\n* fix test","date":"2021-05-11 16:22:33","modifiedFileCount":"22","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-05-12 09:49:18","codes":[{"authorDate":"2021-05-12 09:49:18","commitOrder":8,"curCode":"  public LoadQueuePeonTester()\n  {\n    super(\n        null,\n        null,\n        null,\n        Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),\n        null,\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n  }\n","date":"2021-05-12 09:49:18","endLine":61,"groupId":"10403","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"LoadQueuePeonTester","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/73/c0b64d7fc7b223c3244808cb5abaff60b8bc0c.src","preCode":"  public LoadQueuePeonTester()\n  {\n    super(\n        null,\n        null,\n        null,\n        Execs.scheduledSingleThreaded(\"LoadQueuePeonTester--%d\"),\n        null,\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/LoadQueuePeonTester.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2021-05-12 09:49:18","commitOrder":8,"curCode":"  public void testFailAssignForLoadDropTimeout() throws Exception\n  {\n    final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\");\n\n    final CountDownLatch loadRequestSignal = new CountDownLatch(1);\n    final CountDownLatch segmentLoadedSignal = new CountDownLatch(1);\n    final CountDownLatch delayedSegmentLoadedSignal = new CountDownLatch(2);\n    final CountDownLatch loadRequestRemoveSignal = new CountDownLatch(1);\n\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOAD_QUEUE_PATH,\n        jsonMapper,\n        Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"test_load_queue_peon-%d\"),\n        \r\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n\n    loadQueuePeon.start();\n\n    loadQueueCache.getListenable().addListener(\n        new PathChildrenCacheListener()\n        {\n          @Override\n          public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n          {\n            switch (event.getType()) {\n              case CHILD_ADDED:\n                loadRequestSignal.countDown();\n                break;\n              case CHILD_REMOVED:\n                loadRequestRemoveSignal.countDown();\n                break;\n              default:\n                \r\n            }\n          }\n        }\n    );\n    loadQueueCache.start();\n\n    loadQueuePeon.loadSegment(\n        segment,\n        new LoadPeonCallback()\n        {\n          @Override\n          public void execute()\n          {\n            segmentLoadedSignal.countDown();\n            delayedSegmentLoadedSignal.countDown();\n          }\n        }\n    );\n\n    String loadRequestPath = ZKPaths.makePath(LOAD_QUEUE_PATH, segment.getId().toString());\n\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestSignal));\n    Assert.assertNotNull(curator.checkExists().forPath(loadRequestPath));\n    Assert.assertEquals(\n        segment,\n        ((SegmentChangeRequestLoad) jsonMapper\n            .readValue(curator.getData().decompressed().forPath(loadRequestPath), DataSegmentChangeRequest.class))\n            .getSegment()\n    );\n\n    \r\n    Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal));\n    Assert.assertEquals(1, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(1200L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(1, loadQueuePeon.getTimedOutSegments().size());\n\n    \r\n    curator.delete().guaranteed().forPath(loadRequestPath);\n    Assert.assertTrue(timing.forWaiting().awaitLatch(delayedSegmentLoadedSignal));\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestRemoveSignal));\n    Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(0, loadQueuePeon.getTimedOutSegments().size());\n\n  }\n","date":"2021-05-12 09:49:18","endLine":441,"groupId":"10403","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testFailAssignForLoadDropTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c5/317ba14ebc7e38e85d0427ea3fdc1994545c4c.src","preCode":"  public void testFailAssignForLoadDropTimeout() throws Exception\n  {\n    final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\");\n\n    final CountDownLatch loadRequestSignal = new CountDownLatch(1);\n    final CountDownLatch segmentLoadedSignal = new CountDownLatch(1);\n    final CountDownLatch delayedSegmentLoadedSignal = new CountDownLatch(2);\n    final CountDownLatch loadRequestRemoveSignal = new CountDownLatch(1);\n\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOAD_QUEUE_PATH,\n        jsonMapper,\n        Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"test_load_queue_peon-%d\"),\n        \r\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n\n    loadQueuePeon.start();\n\n    loadQueueCache.getListenable().addListener(\n        new PathChildrenCacheListener()\n        {\n          @Override\n          public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n          {\n            switch (event.getType()) {\n              case CHILD_ADDED:\n                loadRequestSignal.countDown();\n                break;\n              case CHILD_REMOVED:\n                loadRequestRemoveSignal.countDown();\n                break;\n              default:\n                \r\n            }\n          }\n        }\n    );\n    loadQueueCache.start();\n\n    loadQueuePeon.loadSegment(\n        segment,\n        new LoadPeonCallback()\n        {\n          @Override\n          public void execute()\n          {\n            segmentLoadedSignal.countDown();\n            delayedSegmentLoadedSignal.countDown();\n          }\n        }\n    );\n\n    String loadRequestPath = ZKPaths.makePath(LOAD_QUEUE_PATH, segment.getId().toString());\n\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestSignal));\n    Assert.assertNotNull(curator.checkExists().forPath(loadRequestPath));\n    Assert.assertEquals(\n        segment,\n        ((SegmentChangeRequestLoad) jsonMapper\n            .readValue(curator.getData().decompressed().forPath(loadRequestPath), DataSegmentChangeRequest.class))\n            .getSegment()\n    );\n\n    \r\n    Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal));\n    Assert.assertEquals(1, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(1200L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(1, loadQueuePeon.getTimedOutSegments().size());\n\n    \r\n    curator.delete().guaranteed().forPath(loadRequestPath);\n    Assert.assertTrue(timing.forWaiting().awaitLatch(delayedSegmentLoadedSignal));\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestRemoveSignal));\n    Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n    Assert.assertEquals(0, loadQueuePeon.getTimedOutSegments().size());\n\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/LoadQueuePeonTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"}],"commitId":"3455352241f774cfc581de7cf7b328d5cf061e3d","commitMessage":"@@@Add feature to automatically remove compaction configurations for inactive datasources (#11232)\n\n* add auto cleanup\n\n* add auto cleanup\n\n* add auto cleanup\n\n* add tests\n\n* add tests\n\n* use retryutils\n\n* use retryutils\n\n* use retryutils\n\n* address comments","date":"2021-05-12 09:49:18","modifiedFileCount":"14","status":"M","submitter":"Maytas Monsereenusorn"}]
