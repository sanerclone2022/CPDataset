[{"authorTime":"2020-12-08 03:46:29","codes":[{"authorDate":"2020-12-08 03:46:29","commitOrder":3,"curCode":"  public void testGroupingSets() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt), GROUPING(dim2, gran)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () )\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(\n                            new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                            new GroupingAggregatorFactory(\"a1\", Arrays.asList(\"v0\", \"v1\"))\n                        ))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L, 0L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"\", null, 3L, 1L},\n            new Object[]{\"a\", null, 2L, 1L},\n            new Object[]{\"abc\", null, 1L, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L, 2L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L, 2L},\n            new Object[]{NULL_STRING, null, 6L, 3L}\n        )\n    );\n  }\n","date":"2020-12-08 03:46:29","endLine":12090,"groupId":"8732","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupingSets","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0b/94b4ca273056f17ac4fe25c962f7118aa6882a.src","preCode":"  public void testGroupingSets() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt), GROUPING(dim2, gran)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () )\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(\n                            new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                            new GroupingAggregatorFactory(\"a1\", Arrays.asList(\"v0\", \"v1\"))\n                        ))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L, 0L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"\", null, 3L, 1L},\n            new Object[]{\"a\", null, 2L, 1L},\n            new Object[]{\"abc\", null, 1L, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L, 2L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L, 2L},\n            new Object[]{NULL_STRING, null, 6L, 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":12029,"status":"MB"},{"authorDate":"2020-12-08 03:46:29","commitOrder":3,"curCode":"  public void testGroupingAggregatorDifferentOrder() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt), GROUPING(gran, dim2)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () )\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(\n                            new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                            new GroupingAggregatorFactory(\"a1\", Arrays.asList(\"v1\", \"v0\"))\n                        ))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L, 0L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"\", null, 3L, 2L},\n            new Object[]{\"a\", null, 2L, 2L},\n            new Object[]{\"abc\", null, 1L, 2L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L, 1L},\n            new Object[]{NULL_STRING, null, 6L, 3L}\n        )\n    );\n  }\n","date":"2020-12-08 03:46:29","endLine":12154,"groupId":"8194","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupingAggregatorDifferentOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0b/94b4ca273056f17ac4fe25c962f7118aa6882a.src","preCode":"  public void testGroupingAggregatorDifferentOrder() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt), GROUPING(gran, dim2)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () )\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(\n                            new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                            new GroupingAggregatorFactory(\"a1\", Arrays.asList(\"v1\", \"v0\"))\n                        ))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L, 0L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"\", null, 3L, 2L},\n            new Object[]{\"a\", null, 2L, 2L},\n            new Object[]{\"abc\", null, 1L, 2L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L, 1L},\n            new Object[]{NULL_STRING, null, 6L, 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":12093,"status":"B"}],"commitId":"26d74b358093697a2bd791b50767bd2b1342f272","commitMessage":"@@@Add grouping_id function (#10518)\n\n* First draft of grouping_id function\n\n* Add more tests and documentation\n\n* Add calcite tests\n\n* Fix travis failures\n\n* bit of a change\n\n* Add documentation\n\n* Fix typos\n\n* typo fix","date":"2020-12-08 03:46:29","modifiedFileCount":"7","status":"M","submitter":"Abhishek Agarwal"},{"authorTime":"2021-04-07 15:52:19","codes":[{"authorDate":"2020-12-08 03:46:29","commitOrder":4,"curCode":"  public void testGroupingSets() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt), GROUPING(dim2, gran)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () )\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(\n                            new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                            new GroupingAggregatorFactory(\"a1\", Arrays.asList(\"v0\", \"v1\"))\n                        ))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L, 0L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"\", null, 3L, 1L},\n            new Object[]{\"a\", null, 2L, 1L},\n            new Object[]{\"abc\", null, 1L, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L, 2L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L, 2L},\n            new Object[]{NULL_STRING, null, 6L, 3L}\n        )\n    );\n  }\n","date":"2020-12-08 03:46:29","endLine":12090,"groupId":"8732","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupingSets","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0b/94b4ca273056f17ac4fe25c962f7118aa6882a.src","preCode":"  public void testGroupingSets() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt), GROUPING(dim2, gran)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () )\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(\n                            new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                            new GroupingAggregatorFactory(\"a1\", Arrays.asList(\"v0\", \"v1\"))\n                        ))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L, 0L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"\", null, 3L, 1L},\n            new Object[]{\"a\", null, 2L, 1L},\n            new Object[]{\"abc\", null, 1L, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L, 2L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L, 2L},\n            new Object[]{NULL_STRING, null, 6L, 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":12029,"status":"N"},{"authorDate":"2021-04-07 15:52:19","commitOrder":4,"curCode":"  public void testGroupingAggregatorDifferentOrder() throws Exception\n  {\n    requireMergeBuffers(3);\n\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt), GROUPING(gran, dim2)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () )\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(\n                            new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                            new GroupingAggregatorFactory(\"a1\", Arrays.asList(\"v1\", \"v0\"))\n                        ))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L, 0L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"\", null, 3L, 2L},\n            new Object[]{\"a\", null, 2L, 2L},\n            new Object[]{\"abc\", null, 1L, 2L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L, 1L},\n            new Object[]{NULL_STRING, null, 6L, 3L}\n        )\n    );\n  }\n","date":"2021-04-07 15:52:19","endLine":12655,"groupId":"8194","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupingAggregatorDifferentOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0b/58cffd46564f9a81942578cb062d403111f7cf.src","preCode":"  public void testGroupingAggregatorDifferentOrder() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt), GROUPING(gran, dim2)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () )\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(\n                            new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                            new GroupingAggregatorFactory(\"a1\", Arrays.asList(\"v1\", \"v0\"))\n                        ))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L, 0L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"\", null, 3L, 2L},\n            new Object[]{\"a\", null, 2L, 2L},\n            new Object[]{\"abc\", null, 1L, 2L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L, 1L},\n            new Object[]{NULL_STRING, null, 6L, 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":12592,"status":"M"}],"commitId":"0df0bff44b0bbf3b6655bb0cffc384f58e69ac1f","commitMessage":"@@@Enable multiple distinct aggregators in same query (#11014)\n\n* Enable multiple distinct count\n\n* Add more tests\n\n* fix sql test\n\n* docs fix\n\n* Address nits","date":"2021-04-07 15:52:19","modifiedFileCount":"11","status":"M","submitter":"Abhishek Agarwal"},{"authorTime":"2021-07-12 01:22:47","codes":[{"authorDate":"2021-07-12 01:22:47","commitOrder":5,"curCode":"  public void testGroupingSets() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt), GROUPING(dim2, gran)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () )\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(\n                            new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                            new GroupingAggregatorFactory(\"a1\", Arrays.asList(\"v0\", \"v1\"))\n                        ))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(withTimestampResultContext(QUERY_CONTEXT_DEFAULT, \"d1\", 1, Granularities.MONTH))\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L, 0L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"\", null, 3L, 1L},\n            new Object[]{\"a\", null, 2L, 1L},\n            new Object[]{\"abc\", null, 1L, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L, 2L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L, 2L},\n            new Object[]{NULL_STRING, null, 6L, 3L}\n        )\n    );\n  }\n","date":"2021-07-12 01:22:47","endLine":13452,"groupId":"101786","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupingSets","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/77/2d91e626aa3be9648b2dea37c462ae341a18dc.src","preCode":"  public void testGroupingSets() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt), GROUPING(dim2, gran)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () )\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(\n                            new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                            new GroupingAggregatorFactory(\"a1\", Arrays.asList(\"v0\", \"v1\"))\n                        ))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L, 0L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"\", null, 3L, 1L},\n            new Object[]{\"a\", null, 2L, 1L},\n            new Object[]{\"abc\", null, 1L, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L, 2L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L, 2L},\n            new Object[]{NULL_STRING, null, 6L, 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":13391,"status":"M"},{"authorDate":"2021-07-12 01:22:47","commitOrder":5,"curCode":"  public void testGroupingAggregatorDifferentOrder() throws Exception\n  {\n    requireMergeBuffers(3);\n\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt), GROUPING(gran, dim2)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () )\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(\n                            new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                            new GroupingAggregatorFactory(\"a1\", Arrays.asList(\"v1\", \"v0\"))\n                        ))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(withTimestampResultContext(QUERY_CONTEXT_DEFAULT, \"d1\", 1, Granularities.MONTH))\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L, 0L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"\", null, 3L, 2L},\n            new Object[]{\"a\", null, 2L, 2L},\n            new Object[]{\"abc\", null, 1L, 2L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L, 1L},\n            new Object[]{NULL_STRING, null, 6L, 3L}\n        )\n    );\n  }\n","date":"2021-07-12 01:22:47","endLine":13518,"groupId":"101786","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupingAggregatorDifferentOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/77/2d91e626aa3be9648b2dea37c462ae341a18dc.src","preCode":"  public void testGroupingAggregatorDifferentOrder() throws Exception\n  {\n    requireMergeBuffers(3);\n\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt), GROUPING(gran, dim2)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () )\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(\n                            new LongSumAggregatorFactory(\"a0\", \"cnt\"),\n                            new GroupingAggregatorFactory(\"a1\", Arrays.asList(\"v1\", \"v0\"))\n                        ))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L, 0L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L, 0L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L, 0L},\n            new Object[]{\"\", null, 3L, 2L},\n            new Object[]{\"a\", null, 2L, 2L},\n            new Object[]{\"abc\", null, 1L, 2L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L, 1L},\n            new Object[]{NULL_STRING, null, 6L, 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":13455,"status":"M"}],"commitId":"e39ff44481703499394feac82d467e6999d05d47","commitMessage":"@@@improve groupBy query granularity translation with 2x query performance improve when issued from sql layer (#11379)\n\n* improve groupBy query granularity translation when issued from sql layer\n\n* fix style\n\n* use virtual column to determine timestampResult granularity\n\n* dont' apply postaggregators on compute nodes\n\n* relocate constants\n\n* fix order by correctness issue\n\n* fix ut\n\n* use more easier understanding code in DefaultLimitSpec\n\n* address comment\n\n* rollback use virtual column to determine timestampResult granularity\n\n* fix style\n\n* fix style\n\n* address the comment\n\n* add more detail document to explain the tradeoff\n\n* address the comment\n\n* address the comment","date":"2021-07-12 01:22:47","modifiedFileCount":"7","status":"M","submitter":"kaijianding"}]
