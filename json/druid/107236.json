[{"authorTime":"2020-09-24 04:56:38","codes":[{"authorDate":"2020-09-24 04:56:38","commitOrder":1,"curCode":"  public static VectorValueSelector makeVectorValueSelector(\n      VectorColumnSelectorFactory factory,\n      Expr expression\n  )\n  {\n    final ExpressionPlan plan = ExpressionPlanner.plan(factory, expression);\n    Preconditions.checkArgument(plan.is(ExpressionPlan.Trait.VECTORIZABLE));\n    final Expr.VectorInputBinding bindings = createVectorBindings(plan.getAnalysis(), factory);\n    final ExprVectorProcessor<?> processor = plan.getExpression().buildVectorized(bindings);\n    return new ExpressionVectorValueSelector(processor, bindings);\n  }\n","date":"2020-09-24 04:56:38","endLine":51,"groupId":"20488","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"makeVectorValueSelector","params":"(VectorColumnSelectorFactoryfactory@Exprexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/25/f2f22758b3d28397adfbf1cd0379d121563318.src","preCode":"  public static VectorValueSelector makeVectorValueSelector(\n      VectorColumnSelectorFactory factory,\n      Expr expression\n  )\n  {\n    final ExpressionPlan plan = ExpressionPlanner.plan(factory, expression);\n    Preconditions.checkArgument(plan.is(ExpressionPlan.Trait.VECTORIZABLE));\n    final Expr.VectorInputBinding bindings = createVectorBindings(plan.getAnalysis(), factory);\n    final ExprVectorProcessor<?> processor = plan.getExpression().buildVectorized(bindings);\n    return new ExpressionVectorValueSelector(processor, bindings);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/virtual/ExpressionVectorSelectors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"},{"authorDate":"2020-09-24 04:56:38","commitOrder":1,"curCode":"  public static VectorObjectSelector makeVectorObjectSelector(\n      VectorColumnSelectorFactory factory,\n      Expr expression\n  )\n  {\n    final ExpressionPlan plan = ExpressionPlanner.plan(factory, expression);\n    Preconditions.checkArgument(plan.is(ExpressionPlan.Trait.VECTORIZABLE));\n    final Expr.VectorInputBinding bindings = createVectorBindings(plan.getAnalysis(), factory);\n    final ExprVectorProcessor<?> processor = plan.getExpression().buildVectorized(bindings);\n    return new ExpressionVectorObjectSelector(processor, bindings);\n  }\n","date":"2020-09-24 04:56:38","endLine":63,"groupId":"20488","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"makeVectorObjectSelector","params":"(VectorColumnSelectorFactoryfactory@Exprexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/25/f2f22758b3d28397adfbf1cd0379d121563318.src","preCode":"  public static VectorObjectSelector makeVectorObjectSelector(\n      VectorColumnSelectorFactory factory,\n      Expr expression\n  )\n  {\n    final ExpressionPlan plan = ExpressionPlanner.plan(factory, expression);\n    Preconditions.checkArgument(plan.is(ExpressionPlan.Trait.VECTORIZABLE));\n    final Expr.VectorInputBinding bindings = createVectorBindings(plan.getAnalysis(), factory);\n    final ExprVectorProcessor<?> processor = plan.getExpression().buildVectorized(bindings);\n    return new ExpressionVectorObjectSelector(processor, bindings);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/virtual/ExpressionVectorSelectors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"}],"commitId":"19c4b1664086539a3bb495eb402616cf8b6f2a77","commitMessage":"@@@vectorized expressions and expression virtual columns (#10401)\n\n* vectorized expression virtual columns\n\n* cleanup\n\n* fixes\n\n* preserve float if explicitly specified\n\n* oops\n\n* null handling fixes.  more tests\n\n* what is an expression planner?\n\n* better names\n\n* remove unused method.  add pi\n\n* move vector processor builders into static methods\n\n* reduce boilerplate\n\n* oops\n\n* more naming adjustments\n\n* changes\n\n* nullable\n\n* missing hex\n\n* more","date":"2020-09-24 04:56:38","modifiedFileCount":"56","status":"B","submitter":"Clint Wylie"},{"authorTime":"2020-09-30 04:19:06","codes":[{"authorDate":"2020-09-30 04:19:06","commitOrder":2,"curCode":"  public static VectorValueSelector makeVectorValueSelector(\n      VectorColumnSelectorFactory factory,\n      Expr expression\n  )\n  {\n    final ExpressionPlan plan = ExpressionPlanner.plan(factory, expression);\n    Preconditions.checkArgument(plan.is(ExpressionPlan.Trait.VECTORIZABLE));\n\n    if (plan.isConstant()) {\n      return ConstantVectorSelectors.vectorValueSelector(\n          factory.getVectorSizeInspector(),\n          (Number) plan.getExpression().eval(ExprUtils.nilBindings()).value()\n      );\n    }\n    final Expr.VectorInputBinding bindings = createVectorBindings(plan.getAnalysis(), factory);\n    final ExprVectorProcessor<?> processor = plan.getExpression().buildVectorized(bindings);\n    return new ExpressionVectorValueSelector(processor, bindings);\n  }\n","date":"2020-09-30 04:19:06","endLine":77,"groupId":"4320","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"makeVectorValueSelector","params":"(VectorColumnSelectorFactoryfactory@Exprexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3c/b46e8ebd874dc5ed5f1307b8d44f06f7bb82de.src","preCode":"  public static VectorValueSelector makeVectorValueSelector(\n      VectorColumnSelectorFactory factory,\n      Expr expression\n  )\n  {\n    final ExpressionPlan plan = ExpressionPlanner.plan(factory, expression);\n    Preconditions.checkArgument(plan.is(ExpressionPlan.Trait.VECTORIZABLE));\n    final Expr.VectorInputBinding bindings = createVectorBindings(plan.getAnalysis(), factory);\n    final ExprVectorProcessor<?> processor = plan.getExpression().buildVectorized(bindings);\n    return new ExpressionVectorValueSelector(processor, bindings);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/virtual/ExpressionVectorSelectors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-09-30 04:19:06","commitOrder":2,"curCode":"  public static VectorObjectSelector makeVectorObjectSelector(\n      VectorColumnSelectorFactory factory,\n      Expr expression\n  )\n  {\n    final ExpressionPlan plan = ExpressionPlanner.plan(factory, expression);\n    Preconditions.checkArgument(plan.is(ExpressionPlan.Trait.VECTORIZABLE));\n\n    if (plan.isConstant()) {\n      return ConstantVectorSelectors.vectorObjectSelector(\n          factory.getVectorSizeInspector(),\n          plan.getExpression().eval(ExprUtils.nilBindings()).value()\n      );\n    }\n\n    final Expr.VectorInputBinding bindings = createVectorBindings(plan.getAnalysis(), factory);\n    final ExprVectorProcessor<?> processor = plan.getExpression().buildVectorized(bindings);\n    return new ExpressionVectorObjectSelector(processor, bindings);\n  }\n","date":"2020-09-30 04:19:06","endLine":97,"groupId":"4320","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"makeVectorObjectSelector","params":"(VectorColumnSelectorFactoryfactory@Exprexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3c/b46e8ebd874dc5ed5f1307b8d44f06f7bb82de.src","preCode":"  public static VectorObjectSelector makeVectorObjectSelector(\n      VectorColumnSelectorFactory factory,\n      Expr expression\n  )\n  {\n    final ExpressionPlan plan = ExpressionPlanner.plan(factory, expression);\n    Preconditions.checkArgument(plan.is(ExpressionPlan.Trait.VECTORIZABLE));\n    final Expr.VectorInputBinding bindings = createVectorBindings(plan.getAnalysis(), factory);\n    final ExprVectorProcessor<?> processor = plan.getExpression().buildVectorized(bindings);\n    return new ExpressionVectorObjectSelector(processor, bindings);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/virtual/ExpressionVectorSelectors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"753bce324bdf8c7c5b2b602f89c720749bfa6e22","commitMessage":"@@@vectorize constant expressions with optimized selectors (#10440)\n\n","date":"2020-09-30 04:19:06","modifiedFileCount":"5","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-01-14 04:44:56","codes":[{"authorDate":"2021-01-14 04:44:56","commitOrder":3,"curCode":"  public static VectorValueSelector makeVectorValueSelector(\n      VectorColumnSelectorFactory factory,\n      Expr expression\n  )\n  {\n    final ExpressionPlan plan = ExpressionPlanner.plan(factory, expression);\n    Preconditions.checkArgument(plan.is(ExpressionPlan.Trait.VECTORIZABLE));\n\n    if (plan.isConstant()) {\n      return ConstantVectorSelectors.vectorValueSelector(\n          factory.getReadableVectorInspector(),\n          (Number) plan.getExpression().eval(ExprUtils.nilBindings()).value()\n      );\n    }\n    final Expr.VectorInputBinding bindings = createVectorBindings(plan.getAnalysis(), factory);\n    final ExprVectorProcessor<?> processor = plan.getExpression().buildVectorized(bindings);\n    return new ExpressionVectorValueSelector(processor, bindings);\n  }\n","date":"2021-01-14 04:44:56","endLine":77,"groupId":"107236","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"makeVectorValueSelector","params":"(VectorColumnSelectorFactoryfactory@Exprexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b6/ef0e8aea8be446056ca1f5b78e4f870e9a0070.src","preCode":"  public static VectorValueSelector makeVectorValueSelector(\n      VectorColumnSelectorFactory factory,\n      Expr expression\n  )\n  {\n    final ExpressionPlan plan = ExpressionPlanner.plan(factory, expression);\n    Preconditions.checkArgument(plan.is(ExpressionPlan.Trait.VECTORIZABLE));\n\n    if (plan.isConstant()) {\n      return ConstantVectorSelectors.vectorValueSelector(\n          factory.getVectorSizeInspector(),\n          (Number) plan.getExpression().eval(ExprUtils.nilBindings()).value()\n      );\n    }\n    final Expr.VectorInputBinding bindings = createVectorBindings(plan.getAnalysis(), factory);\n    final ExprVectorProcessor<?> processor = plan.getExpression().buildVectorized(bindings);\n    return new ExpressionVectorValueSelector(processor, bindings);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/virtual/ExpressionVectorSelectors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2021-01-14 04:44:56","commitOrder":3,"curCode":"  public static VectorObjectSelector makeVectorObjectSelector(\n      VectorColumnSelectorFactory factory,\n      Expr expression\n  )\n  {\n    final ExpressionPlan plan = ExpressionPlanner.plan(factory, expression);\n    Preconditions.checkArgument(plan.is(ExpressionPlan.Trait.VECTORIZABLE));\n\n    if (plan.isConstant()) {\n      return ConstantVectorSelectors.vectorObjectSelector(\n          factory.getReadableVectorInspector(),\n          plan.getExpression().eval(ExprUtils.nilBindings()).value()\n      );\n    }\n\n    final Expr.VectorInputBinding bindings = createVectorBindings(plan.getAnalysis(), factory);\n    final ExprVectorProcessor<?> processor = plan.getExpression().buildVectorized(bindings);\n    return new ExpressionVectorObjectSelector(processor, bindings);\n  }\n","date":"2021-01-14 04:44:56","endLine":97,"groupId":"107236","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"makeVectorObjectSelector","params":"(VectorColumnSelectorFactoryfactory@Exprexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b6/ef0e8aea8be446056ca1f5b78e4f870e9a0070.src","preCode":"  public static VectorObjectSelector makeVectorObjectSelector(\n      VectorColumnSelectorFactory factory,\n      Expr expression\n  )\n  {\n    final ExpressionPlan plan = ExpressionPlanner.plan(factory, expression);\n    Preconditions.checkArgument(plan.is(ExpressionPlan.Trait.VECTORIZABLE));\n\n    if (plan.isConstant()) {\n      return ConstantVectorSelectors.vectorObjectSelector(\n          factory.getVectorSizeInspector(),\n          plan.getExpression().eval(ExprUtils.nilBindings()).value()\n      );\n    }\n\n    final Expr.VectorInputBinding bindings = createVectorBindings(plan.getAnalysis(), factory);\n    final ExprVectorProcessor<?> processor = plan.getExpression().buildVectorized(bindings);\n    return new ExpressionVectorObjectSelector(processor, bindings);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/virtual/ExpressionVectorSelectors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"9362dc7968f02f4fad6b1821c529a8ee18bed8de","commitMessage":"@@@re-use expression vector evaluation results for the same offset in expression vector selectors (#10614)\n\n* cache expression selector results by associating vector expression bindings to underlying vector offset\n\n* better coverage.  fix floats\n\n* style\n\n* stupid bot\n\n* stupid me\n\n* more test\n\n* intellij threw me under the bus when it generated those junit methods\n\n* narrow interface instead of passing around offset","date":"2021-01-14 04:44:56","modifiedFileCount":"21","status":"M","submitter":"Clint Wylie"}]
