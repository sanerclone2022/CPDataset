[{"authorTime":"2018-09-14 05:42:18","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testResetNoTasks() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","date":"2018-08-31 00:56:26","endLine":1763,"groupId":"18528","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetNoTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5d/773db661d0c8e87703ae229b128551316998e5.src","preCode":"  public void testResetNoTasks() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1742,"status":"NB"},{"authorDate":"2018-09-14 05:42:18","commitOrder":2,"curCode":"  public void testResetSuspended() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false, true);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","date":"2018-09-14 05:42:18","endLine":2438,"groupId":"18528","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetSuspended","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/97/8de2f6886f266967316122d333a4c4ceee74f2.src","preCode":"  public void testResetSuspended() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false, true);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2418,"status":"B"}],"commitId":"91a37c692dd8db34d6e4323cd61dba38a00145b1","commitMessage":"@@@'suspend' and 'resume' support for supervisors (kafka indexing service.  materialized views) (#6234)\n\n* 'suspend' and 'resume' support for kafka indexing service\nchanges:\n* introduces `SuspendableSupervisorSpec` interface to describe supervisors which support suspend/resume functionality controlled through the `SupervisorManager`.  which will gracefully shutdown the supervisor and it's tasks.  update it's `SupervisorSpec` with either a suspended or running state.  and update with the toggled spec. Spec updates are provided by `SuspendableSupervisorSpec.createSuspendedSpec` and `SuspendableSupervisorSpec.createRunningSpec` respectively.\n* `KafkaSupervisorSpec` extends `SuspendableSupervisorSpec` and now supports suspend/resume functionality. The difference in behavior between 'running' and 'suspended' state is whether the supervisor will attempt to ensure that indexing tasks are or are not running respectively. Behavior is identical otherwise.\n* `SupervisorResource` now provides `/druid/indexer/v1/supervisor/{id}/suspend` and `/druid/indexer/v1/supervisor/{id}/resume` which are used to suspend/resume suspendable supervisors\n* Deprecated `/druid/indexer/v1/supervisor/{id}/shutdown` and moved it's functionality to `/druid/indexer/v1/supervisor/{id}/terminate` since 'shutdown' is ambiguous verbage for something that effectively stops a supervisor forever\n* Added ability to get all supervisor specs from `/druid/indexer/v1/supervisor` by supplying the 'full' query parameter `/druid/indexer/v1/supervisor?full` which will return a list of json objects of the form `{\"id\":<id>.  \"spec\":<SupervisorSpec>}`\n* Updated overlord console ui to enable suspend/resume.  and changed 'shutdown' to 'terminate'\n\n* move overlord console status to own column in supervisor table so does not look like garbage\n\n* spacing\n\n* padding\n\n* other kind of spacing\n\n* fix rebase fail\n\n* fix more better\n\n* all supervisors now suspendable.  updated materialized view supervisor to support suspend.  more tests\n\n* fix log\n","date":"2018-09-14 05:42:18","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"},{"authorTime":"2018-10-04 10:08:20","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":3,"curCode":"  public void testResetNoTasks() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","date":"2018-08-31 00:56:26","endLine":1763,"groupId":"18528","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetNoTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5d/773db661d0c8e87703ae229b128551316998e5.src","preCode":"  public void testResetNoTasks() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1742,"status":"N"},{"authorDate":"2018-10-04 10:08:20","commitOrder":3,"curCode":"  public void testResetSuspended() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false, true, kafkaHost);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","date":"2018-10-04 10:08:20","endLine":2439,"groupId":"18528","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetSuspended","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d5/b048a239c6a2fa79c36e7b2dea6584a1db1668.src","preCode":"  public void testResetSuspended() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false, true);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2419,"status":"M"}],"commitId":"c7ac8785a11bfb4d50237abefac93a8553216174","commitMessage":"@@@Prevent failed KafkaConsumer creation from blocking overlord startup (#6383)\n\n* Prevent failed KafkaConsumer creation from blocking overlord startup\n\n* PR comments\n\n* Fix random task ID length\n\n* Adjust test timer\n\n* Use Integer.SIZE\n","date":"2018-10-04 10:08:20","modifiedFileCount":"3","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2018-12-22 03:49:24","codes":[{"authorDate":"2018-12-22 03:49:24","commitOrder":4,"curCode":"  public void testResetNoTasks() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","date":"2018-12-22 03:49:24","endLine":1879,"groupId":"18528","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetNoTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/7b9d1742dec9346159f08cf020ea57960091eb.src","preCode":"  public void testResetNoTasks() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1858,"status":"M"},{"authorDate":"2018-12-22 03:49:24","commitOrder":4,"curCode":"  public void testResetSuspended() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false, true, kafkaHost);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","date":"2018-12-22 03:49:24","endLine":2593,"groupId":"18528","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetSuspended","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/7b9d1742dec9346159f08cf020ea57960091eb.src","preCode":"  public void testResetSuspended() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false, true, kafkaHost);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2573,"status":"M"}],"commitId":"7c7997e8a1183a7bffad731ca94e8b4c381e8665","commitMessage":"@@@Add Kinesis Indexing Service to core Druid (#6431)\n\n* created seekablestream classes\n\n* created seekablestreamsupervisor class\n\n* first attempt to integrate kafa indexing service to use SeekableStream\n\n* seekablestream bug fixes\n\n* kafkarecordsupplier\n\n* integrated kafka indexing service with seekablestream\n\n* implemented resume/suspend and refactored some package names\n\n* moved kinesis indexing service into core druid extensions\n\n* merged some changes from kafka supervisor race condition\n\n* integrated kinesis-indexing-service with seekablestream\n\n* unite tests for kinesis-indexing-service\n\n* various bug fixes for kinesis-indexing-service\n\n* refactored kinesisindexingtask\n\n* finished up more kinesis unit tests\n\n* more bug fixes for kinesis-indexing-service\n\n* finsihed refactoring kinesis unit tests\n\n* removed KinesisParititons and KafkaPartitions to use SeekableStreamPartitions\n\n* kinesis-indexing-service code cleanup and docs\n\n* merge #6291\n\nmerge #6337\n\nmerge #6383\n\n* added more docs and reordered methods\n\n* fixd kinesis tests after merging master and added docs in seekablestream\n\n* fix various things from pr comment\n\n* improve recordsupplier and add unit tests\n\n* migrated to aws-java-sdk-kinesis\n\n* merge changes from master\n\n* fix pom files and forbiddenapi checks\n\n* checkpoint JavaType bug fix\n\n* fix pom and stuff\n\n* disable checkpointing in kinesis\n\n* fix kinesis sequence number null in closed shard\n\n* merge changes from master\n\n* fixes for kinesis tasks\n\n* capitalized <partitionType.  sequenceType>\n\n* removed abstract class loggers\n\n* conform to guava api restrictions\n\n* add docker for travis other modules test\n\n* address comments\n\n* improve RecordSupplier to supply records in batch\n\n* fix strict compile issue\n\n* add test scope for localstack dependency\n\n* kinesis indexing task refactoring\n\n* comments\n\n* github comments\n\n* minor fix\n\n* removed unneeded readme\n\n* fix deserialization bug\n\n* fix various bugs\n\n* KinesisRecordSupplier unable to catch up to earliest position in stream bug fix\n\n* minor changes to kinesis\n\n* implement deaggregate for kinesis\n\n* Merge remote-tracking branch 'upstream/master' into seekablestream\n\n* fix kinesis offset discrepancy with kafka\n\n* kinesis record supplier disable getPosition\n\n* pr comments\n\n* mock for kinesis tests and remove docker dependency for unit tests\n\n* PR comments\n\n* avg lag in kafkasupervisor #6587\n\n* refacotred SequenceMetadata in taskRunners\n\n* small fix\n\n* more small fix\n\n* recordsupplier resource leak\n\n* revert .travis.yml formatting\n\n* fix style\n\n* kinesis docs\n\n* doc part2\n\n* more docs\n\n* comments\n\n* comments*2\n\n* revert string replace changes\n\n* comments\n\n* teamcity\n\n* comments part 1\n\n* comments part 2\n\n* comments part 3\n\n* merge #6754\n\n* fix injection binding\n\n* comments\n\n* KinesisRegion refactor\n\n* comments part idk lol\n\n* can't think of a commit msg anymore\n\n* remove possiblyResetDataSourceMetadata() for IncrementalPublishingTaskRunner\n\n* commmmmmmmmmments\n\n* extra error handling in KinesisRecordSupplier getRecords\n\n* comments\n\n* quickfix\n\n* typo\n\n* oof\n","date":"2018-12-22 03:49:24","modifiedFileCount":"22","status":"M","submitter":"Joshua Sun"},{"authorTime":"2019-02-19 03:50:08","codes":[{"authorDate":"2019-02-19 03:50:08","commitOrder":5,"curCode":"  public void testResetNoTasks() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","date":"2019-02-19 03:50:08","endLine":1877,"groupId":"4933","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetNoTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f2/db280c51eb85380271ce661d1c415120afa0e0.src","preCode":"  public void testResetNoTasks() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1856,"status":"M"},{"authorDate":"2019-02-19 03:50:08","commitOrder":5,"curCode":"  public void testResetSuspended() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, true, kafkaHost);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","date":"2019-02-19 03:50:08","endLine":2591,"groupId":"21781","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetSuspended","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f2/db280c51eb85380271ce661d1c415120afa0e0.src","preCode":"  public void testResetSuspended() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false, true, kafkaHost);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2571,"status":"M"}],"commitId":"80a2ef7be46c4fc807ac2a74507b8ba8b6a44049","commitMessage":"@@@Support kafka transactional topics (#5404) (#6496)\n\n* Support kafka transactional topics\n\n* update kafka to version 2.0.0\n* Remove the skipOffsetGaps option since it's not used anymore\n* Adjust kafka consumer to use transactional semantics\n* Update tests\n\n* Remove unused import from test\n\n* Fix compilation\n\n* Invoke transaction api to fix a unit test\n\n* temporary modification of travis.yml for debugging\n\n* another attempt to get travis tasklogs\n\n* update kafka to 2.0.1 at all places\n\n* Remove druid-kafka-eight dependency from integration-tests.  remove the kafka firehose test and deprecate kafka-eight classes\n\n* Add deprecated in docs for kafka-eight and kafka-simple extensions\n\n* Remove skipOffsetGaps and code changes for transaction support\n\n* Fix indentation\n\n* remove skipOffsetGaps from kinesis\n\n* Add transaction api to KafkaRecordSupplierTest\n\n* Fix indent\n\n* Fix test\n\n* update kafka version to 2.1.0\n","date":"2019-02-19 03:50:08","modifiedFileCount":"25","status":"M","submitter":"Surekha"},{"authorTime":"2019-04-11 09:16:38","codes":[{"authorDate":"2019-04-11 09:16:38","commitOrder":6,"curCode":"  public void testResetNoTasks() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","date":"2019-04-11 09:16:38","endLine":1914,"groupId":"4933","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetNoTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b6/e7b3406771642225b6ce082b4b2bc68e735a67.src","preCode":"  public void testResetNoTasks() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1893,"status":"M"},{"authorDate":"2019-04-11 09:16:38","commitOrder":6,"curCode":"  public void testResetSuspended() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null, true, kafkaHost);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","date":"2019-04-11 09:16:38","endLine":2672,"groupId":"21781","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetSuspended","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b6/e7b3406771642225b6ce082b4b2bc68e735a67.src","preCode":"  public void testResetSuspended() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, true, kafkaHost);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2652,"status":"M"}],"commitId":"2771ed50b0f07b0ee519da72ed9f4877466f8be4","commitMessage":"@@@Support Kafka supervisor adopting running tasks between versions  (#7212)\n\n* Recompute hash in isTaskCurrent() and added tests\n\n* Fixed checkstyle stuff\n\n* Fixed failing tests\n\n* Make TestableKafkaSupervisorWithCustomIsTaskCurrent static\n\n* Add doc\n\n* baseSequenceName change\n\n* Added comment\n\n* WIP\n\n* Fixed imports\n\n* Undid lambda change for diff sake\n\n* Cleanup\n\n* Added comment\n\n* Reinsert Kafka tests\n\n* Readded kinesis test\n\n* Readd bad partition assignment in kinesis supervisor test\n\n* Nit\n\n* Misnamed var\n","date":"2019-04-11 09:16:38","modifiedFileCount":"6","status":"M","submitter":"Justin Borromeo"},{"authorTime":"2019-07-07 00:33:12","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":7,"curCode":"  public void testResetNoTasks()\n  {\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","date":"2019-07-07 00:33:12","endLine":1918,"groupId":"23075","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetNoTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/f5639cd0e0e7c6a18b14f694e3cf2c6cb73dec.src","preCode":"  public void testResetNoTasks() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1897,"status":"M"},{"authorDate":"2019-07-07 00:33:12","commitOrder":7,"curCode":"  public void testResetSuspended()\n  {\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null, true, kafkaHost);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","date":"2019-07-07 00:33:12","endLine":2682,"groupId":"22542","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetSuspended","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/f5639cd0e0e7c6a18b14f694e3cf2c6cb73dec.src","preCode":"  public void testResetSuspended() throws Exception\n  {\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null, true, kafkaHost);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2662,"status":"M"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2019-09-27 07:15:24","codes":[{"authorDate":"2019-09-27 07:15:24","commitOrder":8,"curCode":"  public void testResetNoTasks()\n  {\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","date":"2019-09-27 07:15:24","endLine":1941,"groupId":"10578","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetNoTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/9182feac2928302ae8f3579d872a1883a232c5.src","preCode":"  public void testResetNoTasks()\n  {\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1920,"status":"M"},{"authorDate":"2019-09-27 07:15:24","commitOrder":8,"curCode":"  public void testResetSuspended()\n  {\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null, true, kafkaHost);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","date":"2019-09-27 07:15:24","endLine":2745,"groupId":"10578","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetSuspended","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/9182feac2928302ae8f3579d872a1883a232c5.src","preCode":"  public void testResetSuspended()\n  {\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null, true, kafkaHost);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2725,"status":"M"}],"commitId":"7f2b6577ef19f18523e8353336ad496e8dc4a270","commitMessage":"@@@get active task by datasource when supervisor discover tasks (#8450)\n\n* get active task by datasource when supervisor discover tasks\n\n* fix ut\n\n* fix ut\n\n* fix ut\n\n* remove unnecessary condition check\n\n* fix ut\n\n* remove stream in hot loop\n","date":"2019-09-27 07:15:24","modifiedFileCount":"7","status":"M","submitter":"elloooooo"},{"authorTime":"2020-06-19 00:47:07","codes":[{"authorDate":"2020-06-19 00:47:07","commitOrder":9,"curCode":"  public void testResetNoTasks()\n  {\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.emptyList()).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","date":"2020-06-19 00:47:07","endLine":2052,"groupId":"102289","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetNoTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9d/8635dd39a96f9b339addcce86eff768ca2769e.src","preCode":"  public void testResetNoTasks()\n  {\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2031,"status":"M"},{"authorDate":"2020-06-19 00:47:07","commitOrder":9,"curCode":"  public void testResetSuspended()\n  {\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.emptyList()).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null, true, kafkaHost);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","date":"2020-06-19 00:47:07","endLine":2768,"groupId":"102289","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetSuspended","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9d/8635dd39a96f9b339addcce86eff768ca2769e.src","preCode":"  public void testResetSuspended()\n  {\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null, true, kafkaHost);\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(null);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2748,"status":"M"}],"commitId":"2c384b61ff47f858a0adb6f8b389c84f2acc84d1","commitMessage":"@@@IntelliJ inspection and checkstyle rule for \"Collection.EMPTY_* field accesses replaceable with Collections.empty*()\" (#9690)\n\n* IntelliJ inspection and checkstyle rule for \"Collection.EMPTY_* field accesses replaceable with Collections.empty*()\"\n\n* Reverted checkstyle rule\n\n* Added tests to pass CI\n\n* Codestyle","date":"2020-06-19 00:47:07","modifiedFileCount":"33","status":"M","submitter":"Aleksey Plekhanov"}]
