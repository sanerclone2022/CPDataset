[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void getSegments(\n      @QueryParam(\"counter\") long counter,\n      @QueryParam(\"hash\") long hash,\n      @QueryParam(\"timeout\") long timeout,\n      @Context final HttpServletRequest req\n  ) throws IOException\n  {\n    if (announcer == null) {\n      sendErrorResponse(req, HttpServletResponse.SC_NOT_FOUND, \"announcer is not available.\");\n      return;\n    }\n\n    if (timeout <= 0) {\n      sendErrorResponse(req, HttpServletResponse.SC_BAD_REQUEST, \"timeout must be positive.\");\n      return;\n    }\n\n    final ResponseContext context = createContext(req.getHeader(\"Accept\"));\n    final ListenableFuture<ChangeRequestsSnapshot<DataSegmentChangeRequest>> future = announcer.getSegmentChangesSince(\n        new ChangeRequestHistory.Counter(\n            counter,\n            hash\n        )\n    );\n\n    final AsyncContext asyncContext = req.startAsync();\n\n    asyncContext.addListener(\n        new AsyncListener()\n        {\n          @Override\n          public void onComplete(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onTimeout(AsyncEvent event)\n          {\n\n            \r\n            future.cancel(true);\n            event.getAsyncContext().complete();\n          }\n\n          @Override\n          public void onError(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onStartAsync(AsyncEvent event)\n          {\n          }\n        }\n    );\n\n    Futures.addCallback(\n        future,\n        new FutureCallback<ChangeRequestsSnapshot<DataSegmentChangeRequest>>()\n        {\n          @Override\n          public void onSuccess(ChangeRequestsSnapshot<DataSegmentChangeRequest> result)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              response.setStatus(HttpServletResponse.SC_OK);\n              context.inputMapper.writerWithType(HttpServerInventoryView.SEGMENT_LIST_RESP_TYPE_REF)\n                                 .writeValue(asyncContext.getResponse().getOutputStream(), result);\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n\n          @Override\n          public void onFailure(Throwable th)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              if (th instanceof IllegalArgumentException) {\n                response.sendError(HttpServletResponse.SC_BAD_REQUEST, th.getMessage());\n              } else {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, th.getMessage());\n              }\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n        }\n    );\n\n    asyncContext.setTimeout(timeout);\n  }\n","date":"2018-08-31 00:56:26","endLine":211,"groupId":"9887","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getSegments","params":"(@QueryParam(\"counter\")longcounter@@QueryParam(\"hash\")longhash@@QueryParam(\"timeout\")longtimeout@@ContextfinalHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3a/531b7d384dce024228707b6192939c27ce68c2.src","preCode":"  public void getSegments(\n      @QueryParam(\"counter\") long counter,\n      @QueryParam(\"hash\") long hash,\n      @QueryParam(\"timeout\") long timeout,\n      @Context final HttpServletRequest req\n  ) throws IOException\n  {\n    if (announcer == null) {\n      sendErrorResponse(req, HttpServletResponse.SC_NOT_FOUND, \"announcer is not available.\");\n      return;\n    }\n\n    if (timeout <= 0) {\n      sendErrorResponse(req, HttpServletResponse.SC_BAD_REQUEST, \"timeout must be positive.\");\n      return;\n    }\n\n    final ResponseContext context = createContext(req.getHeader(\"Accept\"));\n    final ListenableFuture<ChangeRequestsSnapshot<DataSegmentChangeRequest>> future = announcer.getSegmentChangesSince(\n        new ChangeRequestHistory.Counter(\n            counter,\n            hash\n        )\n    );\n\n    final AsyncContext asyncContext = req.startAsync();\n\n    asyncContext.addListener(\n        new AsyncListener()\n        {\n          @Override\n          public void onComplete(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onTimeout(AsyncEvent event)\n          {\n\n            \r\n            future.cancel(true);\n            event.getAsyncContext().complete();\n          }\n\n          @Override\n          public void onError(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onStartAsync(AsyncEvent event)\n          {\n          }\n        }\n    );\n\n    Futures.addCallback(\n        future,\n        new FutureCallback<ChangeRequestsSnapshot<DataSegmentChangeRequest>>()\n        {\n          @Override\n          public void onSuccess(ChangeRequestsSnapshot<DataSegmentChangeRequest> result)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              response.setStatus(HttpServletResponse.SC_OK);\n              context.inputMapper.writerWithType(HttpServerInventoryView.SEGMENT_LIST_RESP_TYPE_REF)\n                                 .writeValue(asyncContext.getResponse().getOutputStream(), result);\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n\n          @Override\n          public void onFailure(Throwable th)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              if (th instanceof IllegalArgumentException) {\n                response.sendError(HttpServletResponse.SC_BAD_REQUEST, th.getMessage());\n              } else {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, th.getMessage());\n              }\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n        }\n    );\n\n    asyncContext.setTimeout(timeout);\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/SegmentListerResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void getWorkerState(\n      @QueryParam(\"counter\") long counter,\n      @QueryParam(\"hash\") long hash,\n      @QueryParam(\"timeout\") long timeout,\n      @Context final HttpServletRequest req\n  ) throws IOException\n  {\n    if (timeout <= 0) {\n      sendErrorResponse(req, HttpServletResponse.SC_BAD_REQUEST, \"timeout must be positive.\");\n      return;\n    }\n\n    final ResponseContext context = createContext(req.getHeader(\"Accept\"));\n\n    final ListenableFuture<ChangeRequestsSnapshot<WorkerHistoryItem>> future = workerTaskMonitor.getChangesSince(\n        new ChangeRequestHistory.Counter(\n            counter,\n            hash\n        )\n    );\n\n    final AsyncContext asyncContext = req.startAsync();\n\n    asyncContext.addListener(\n        new AsyncListener()\n        {\n          @Override\n          public void onComplete(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onTimeout(AsyncEvent event)\n          {\n\n            \r\n            future.cancel(true);\n            event.getAsyncContext().complete();\n          }\n\n          @Override\n          public void onError(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onStartAsync(AsyncEvent event)\n          {\n          }\n        }\n    );\n\n    Futures.addCallback(\n        future,\n        new FutureCallback<ChangeRequestsSnapshot>()\n        {\n          @Override\n          public void onSuccess(ChangeRequestsSnapshot result)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              response.setStatus(HttpServletResponse.SC_OK);\n              context.inputMapper.writerWithType(WorkerHolder.WORKER_SYNC_RESP_TYPE_REF)\n                                 .writeValue(asyncContext.getResponse().getOutputStream(), result);\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n\n          @Override\n          public void onFailure(Throwable th)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              if (th instanceof IllegalArgumentException) {\n                response.sendError(HttpServletResponse.SC_BAD_REQUEST, th.getMessage());\n              } else {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, th.getMessage());\n              }\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n        }\n    );\n\n    asyncContext.setTimeout(timeout);\n  }\n","date":"2018-08-31 00:56:26","endLine":198,"groupId":"20551","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getWorkerState","params":"(@QueryParam(\"counter\")longcounter@@QueryParam(\"hash\")longhash@@QueryParam(\"timeout\")longtimeout@@ContextfinalHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/85/f661095989f818911406bd03040258dc545fe8.src","preCode":"  public void getWorkerState(\n      @QueryParam(\"counter\") long counter,\n      @QueryParam(\"hash\") long hash,\n      @QueryParam(\"timeout\") long timeout,\n      @Context final HttpServletRequest req\n  ) throws IOException\n  {\n    if (timeout <= 0) {\n      sendErrorResponse(req, HttpServletResponse.SC_BAD_REQUEST, \"timeout must be positive.\");\n      return;\n    }\n\n    final ResponseContext context = createContext(req.getHeader(\"Accept\"));\n\n    final ListenableFuture<ChangeRequestsSnapshot<WorkerHistoryItem>> future = workerTaskMonitor.getChangesSince(\n        new ChangeRequestHistory.Counter(\n            counter,\n            hash\n        )\n    );\n\n    final AsyncContext asyncContext = req.startAsync();\n\n    asyncContext.addListener(\n        new AsyncListener()\n        {\n          @Override\n          public void onComplete(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onTimeout(AsyncEvent event)\n          {\n\n            \r\n            future.cancel(true);\n            event.getAsyncContext().complete();\n          }\n\n          @Override\n          public void onError(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onStartAsync(AsyncEvent event)\n          {\n          }\n        }\n    );\n\n    Futures.addCallback(\n        future,\n        new FutureCallback<ChangeRequestsSnapshot>()\n        {\n          @Override\n          public void onSuccess(ChangeRequestsSnapshot result)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              response.setStatus(HttpServletResponse.SC_OK);\n              context.inputMapper.writerWithType(WorkerHolder.WORKER_SYNC_RESP_TYPE_REF)\n                                 .writeValue(asyncContext.getResponse().getOutputStream(), result);\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n\n          @Override\n          public void onFailure(Throwable th)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              if (th instanceof IllegalArgumentException) {\n                response.sendError(HttpServletResponse.SC_BAD_REQUEST, th.getMessage());\n              } else {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, th.getMessage());\n              }\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n        }\n    );\n\n    asyncContext.setTimeout(timeout);\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/worker/http/TaskManagementResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-07-19 06:02:27","codes":[{"authorDate":"2019-07-19 06:02:27","commitOrder":2,"curCode":"  public Void getSegments(\n      @QueryParam(\"counter\") long counter,\n      @QueryParam(\"hash\") long hash,\n      @QueryParam(\"timeout\") long timeout,\n      @Context final HttpServletRequest req\n  ) throws IOException\n  {\n    if (announcer == null) {\n      sendErrorResponse(req, HttpServletResponse.SC_NOT_FOUND, \"announcer is not available.\");\n      return null;\n    }\n\n    if (timeout <= 0) {\n      sendErrorResponse(req, HttpServletResponse.SC_BAD_REQUEST, \"timeout must be positive.\");\n      return null;\n    }\n\n    final ResponseContext context = createContext(req.getHeader(\"Accept\"));\n    final ListenableFuture<ChangeRequestsSnapshot<DataSegmentChangeRequest>> future = announcer.getSegmentChangesSince(\n        new ChangeRequestHistory.Counter(\n            counter,\n            hash\n        )\n    );\n\n    final AsyncContext asyncContext = req.startAsync();\n\n    asyncContext.addListener(\n        new AsyncListener()\n        {\n          @Override\n          public void onComplete(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onTimeout(AsyncEvent event)\n          {\n\n            \r\n            future.cancel(true);\n            event.getAsyncContext().complete();\n          }\n\n          @Override\n          public void onError(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onStartAsync(AsyncEvent event)\n          {\n          }\n        }\n    );\n\n    Futures.addCallback(\n        future,\n        new FutureCallback<ChangeRequestsSnapshot<DataSegmentChangeRequest>>()\n        {\n          @Override\n          public void onSuccess(ChangeRequestsSnapshot<DataSegmentChangeRequest> result)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              response.setStatus(HttpServletResponse.SC_OK);\n              context.inputMapper.writerWithType(HttpServerInventoryView.SEGMENT_LIST_RESP_TYPE_REF)\n                                 .writeValue(asyncContext.getResponse().getOutputStream(), result);\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n\n          @Override\n          public void onFailure(Throwable th)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              if (th instanceof IllegalArgumentException) {\n                response.sendError(HttpServletResponse.SC_BAD_REQUEST, th.getMessage());\n              } else {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, th.getMessage());\n              }\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n        }\n    );\n\n    asyncContext.setTimeout(timeout);\n    return null;\n  }\n","date":"2019-07-19 06:02:27","endLine":213,"groupId":"9887","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getSegments","params":"(@QueryParam(\"counter\")longcounter@@QueryParam(\"hash\")longhash@@QueryParam(\"timeout\")longtimeout@@ContextfinalHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/73/900de02baf1a64aee1269802b6ca0331eaf951.src","preCode":"  public void getSegments(\n      @QueryParam(\"counter\") long counter,\n      @QueryParam(\"hash\") long hash,\n      @QueryParam(\"timeout\") long timeout,\n      @Context final HttpServletRequest req\n  ) throws IOException\n  {\n    if (announcer == null) {\n      sendErrorResponse(req, HttpServletResponse.SC_NOT_FOUND, \"announcer is not available.\");\n      return;\n    }\n\n    if (timeout <= 0) {\n      sendErrorResponse(req, HttpServletResponse.SC_BAD_REQUEST, \"timeout must be positive.\");\n      return;\n    }\n\n    final ResponseContext context = createContext(req.getHeader(\"Accept\"));\n    final ListenableFuture<ChangeRequestsSnapshot<DataSegmentChangeRequest>> future = announcer.getSegmentChangesSince(\n        new ChangeRequestHistory.Counter(\n            counter,\n            hash\n        )\n    );\n\n    final AsyncContext asyncContext = req.startAsync();\n\n    asyncContext.addListener(\n        new AsyncListener()\n        {\n          @Override\n          public void onComplete(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onTimeout(AsyncEvent event)\n          {\n\n            \r\n            future.cancel(true);\n            event.getAsyncContext().complete();\n          }\n\n          @Override\n          public void onError(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onStartAsync(AsyncEvent event)\n          {\n          }\n        }\n    );\n\n    Futures.addCallback(\n        future,\n        new FutureCallback<ChangeRequestsSnapshot<DataSegmentChangeRequest>>()\n        {\n          @Override\n          public void onSuccess(ChangeRequestsSnapshot<DataSegmentChangeRequest> result)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              response.setStatus(HttpServletResponse.SC_OK);\n              context.inputMapper.writerWithType(HttpServerInventoryView.SEGMENT_LIST_RESP_TYPE_REF)\n                                 .writeValue(asyncContext.getResponse().getOutputStream(), result);\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n\n          @Override\n          public void onFailure(Throwable th)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              if (th instanceof IllegalArgumentException) {\n                response.sendError(HttpServletResponse.SC_BAD_REQUEST, th.getMessage());\n              } else {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, th.getMessage());\n              }\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n        }\n    );\n\n    asyncContext.setTimeout(timeout);\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/SegmentListerResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2019-07-19 06:02:27","commitOrder":2,"curCode":"  public Void getWorkerState(\n      @QueryParam(\"counter\") long counter,\n      @QueryParam(\"hash\") long hash,\n      @QueryParam(\"timeout\") long timeout,\n      @Context final HttpServletRequest req\n  ) throws IOException\n  {\n    if (timeout <= 0) {\n      sendErrorResponse(req, HttpServletResponse.SC_BAD_REQUEST, \"timeout must be positive.\");\n      return null;\n    }\n\n    final ResponseContext context = createContext(req.getHeader(\"Accept\"));\n\n    final ListenableFuture<ChangeRequestsSnapshot<WorkerHistoryItem>> future = workerTaskMonitor.getChangesSince(\n        new ChangeRequestHistory.Counter(\n            counter,\n            hash\n        )\n    );\n\n    final AsyncContext asyncContext = req.startAsync();\n\n    asyncContext.addListener(\n        new AsyncListener()\n        {\n          @Override\n          public void onComplete(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onTimeout(AsyncEvent event)\n          {\n\n            \r\n            future.cancel(true);\n            event.getAsyncContext().complete();\n          }\n\n          @Override\n          public void onError(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onStartAsync(AsyncEvent event)\n          {\n          }\n        }\n    );\n\n    Futures.addCallback(\n        future,\n        new FutureCallback<ChangeRequestsSnapshot>()\n        {\n          @Override\n          public void onSuccess(ChangeRequestsSnapshot result)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              response.setStatus(HttpServletResponse.SC_OK);\n              context.inputMapper.writerWithType(WorkerHolder.WORKER_SYNC_RESP_TYPE_REF)\n                                 .writeValue(asyncContext.getResponse().getOutputStream(), result);\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n\n          @Override\n          public void onFailure(Throwable th)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              if (th instanceof IllegalArgumentException) {\n                response.sendError(HttpServletResponse.SC_BAD_REQUEST, th.getMessage());\n              } else {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, th.getMessage());\n              }\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n        }\n    );\n\n    asyncContext.setTimeout(timeout);\n    return null;\n  }\n","date":"2019-07-19 06:02:27","endLine":200,"groupId":"20551","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getWorkerState","params":"(@QueryParam(\"counter\")longcounter@@QueryParam(\"hash\")longhash@@QueryParam(\"timeout\")longtimeout@@ContextfinalHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/4b2b38f960cbcebdfe5aab03a8e804d263ad6c.src","preCode":"  public void getWorkerState(\n      @QueryParam(\"counter\") long counter,\n      @QueryParam(\"hash\") long hash,\n      @QueryParam(\"timeout\") long timeout,\n      @Context final HttpServletRequest req\n  ) throws IOException\n  {\n    if (timeout <= 0) {\n      sendErrorResponse(req, HttpServletResponse.SC_BAD_REQUEST, \"timeout must be positive.\");\n      return;\n    }\n\n    final ResponseContext context = createContext(req.getHeader(\"Accept\"));\n\n    final ListenableFuture<ChangeRequestsSnapshot<WorkerHistoryItem>> future = workerTaskMonitor.getChangesSince(\n        new ChangeRequestHistory.Counter(\n            counter,\n            hash\n        )\n    );\n\n    final AsyncContext asyncContext = req.startAsync();\n\n    asyncContext.addListener(\n        new AsyncListener()\n        {\n          @Override\n          public void onComplete(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onTimeout(AsyncEvent event)\n          {\n\n            \r\n            future.cancel(true);\n            event.getAsyncContext().complete();\n          }\n\n          @Override\n          public void onError(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onStartAsync(AsyncEvent event)\n          {\n          }\n        }\n    );\n\n    Futures.addCallback(\n        future,\n        new FutureCallback<ChangeRequestsSnapshot>()\n        {\n          @Override\n          public void onSuccess(ChangeRequestsSnapshot result)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              response.setStatus(HttpServletResponse.SC_OK);\n              context.inputMapper.writerWithType(WorkerHolder.WORKER_SYNC_RESP_TYPE_REF)\n                                 .writeValue(asyncContext.getResponse().getOutputStream(), result);\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n\n          @Override\n          public void onFailure(Throwable th)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              if (th instanceof IllegalArgumentException) {\n                response.sendError(HttpServletResponse.SC_BAD_REQUEST, th.getMessage());\n              } else {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, th.getMessage());\n              }\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n        }\n    );\n\n    asyncContext.setTimeout(timeout);\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/worker/http/TaskManagementResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"54a7b54d2d0faa147060d879200453de54e7539d","commitMessage":"@@@avoid 'must return non-void type' warning (#8105)\n\n","date":"2019-07-19 06:02:27","modifiedFileCount":"2","status":"M","submitter":"Himanshu"},{"authorTime":"2020-10-27 13:35:59","codes":[{"authorDate":"2019-07-19 06:02:27","commitOrder":3,"curCode":"  public Void getSegments(\n      @QueryParam(\"counter\") long counter,\n      @QueryParam(\"hash\") long hash,\n      @QueryParam(\"timeout\") long timeout,\n      @Context final HttpServletRequest req\n  ) throws IOException\n  {\n    if (announcer == null) {\n      sendErrorResponse(req, HttpServletResponse.SC_NOT_FOUND, \"announcer is not available.\");\n      return null;\n    }\n\n    if (timeout <= 0) {\n      sendErrorResponse(req, HttpServletResponse.SC_BAD_REQUEST, \"timeout must be positive.\");\n      return null;\n    }\n\n    final ResponseContext context = createContext(req.getHeader(\"Accept\"));\n    final ListenableFuture<ChangeRequestsSnapshot<DataSegmentChangeRequest>> future = announcer.getSegmentChangesSince(\n        new ChangeRequestHistory.Counter(\n            counter,\n            hash\n        )\n    );\n\n    final AsyncContext asyncContext = req.startAsync();\n\n    asyncContext.addListener(\n        new AsyncListener()\n        {\n          @Override\n          public void onComplete(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onTimeout(AsyncEvent event)\n          {\n\n            \r\n            future.cancel(true);\n            event.getAsyncContext().complete();\n          }\n\n          @Override\n          public void onError(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onStartAsync(AsyncEvent event)\n          {\n          }\n        }\n    );\n\n    Futures.addCallback(\n        future,\n        new FutureCallback<ChangeRequestsSnapshot<DataSegmentChangeRequest>>()\n        {\n          @Override\n          public void onSuccess(ChangeRequestsSnapshot<DataSegmentChangeRequest> result)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              response.setStatus(HttpServletResponse.SC_OK);\n              context.inputMapper.writerWithType(HttpServerInventoryView.SEGMENT_LIST_RESP_TYPE_REF)\n                                 .writeValue(asyncContext.getResponse().getOutputStream(), result);\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n\n          @Override\n          public void onFailure(Throwable th)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              if (th instanceof IllegalArgumentException) {\n                response.sendError(HttpServletResponse.SC_BAD_REQUEST, th.getMessage());\n              } else {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, th.getMessage());\n              }\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n        }\n    );\n\n    asyncContext.setTimeout(timeout);\n    return null;\n  }\n","date":"2019-07-19 06:02:27","endLine":213,"groupId":"101203","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getSegments","params":"(@QueryParam(\"counter\")longcounter@@QueryParam(\"hash\")longhash@@QueryParam(\"timeout\")longtimeout@@ContextfinalHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/73/900de02baf1a64aee1269802b6ca0331eaf951.src","preCode":"  public Void getSegments(\n      @QueryParam(\"counter\") long counter,\n      @QueryParam(\"hash\") long hash,\n      @QueryParam(\"timeout\") long timeout,\n      @Context final HttpServletRequest req\n  ) throws IOException\n  {\n    if (announcer == null) {\n      sendErrorResponse(req, HttpServletResponse.SC_NOT_FOUND, \"announcer is not available.\");\n      return null;\n    }\n\n    if (timeout <= 0) {\n      sendErrorResponse(req, HttpServletResponse.SC_BAD_REQUEST, \"timeout must be positive.\");\n      return null;\n    }\n\n    final ResponseContext context = createContext(req.getHeader(\"Accept\"));\n    final ListenableFuture<ChangeRequestsSnapshot<DataSegmentChangeRequest>> future = announcer.getSegmentChangesSince(\n        new ChangeRequestHistory.Counter(\n            counter,\n            hash\n        )\n    );\n\n    final AsyncContext asyncContext = req.startAsync();\n\n    asyncContext.addListener(\n        new AsyncListener()\n        {\n          @Override\n          public void onComplete(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onTimeout(AsyncEvent event)\n          {\n\n            \r\n            future.cancel(true);\n            event.getAsyncContext().complete();\n          }\n\n          @Override\n          public void onError(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onStartAsync(AsyncEvent event)\n          {\n          }\n        }\n    );\n\n    Futures.addCallback(\n        future,\n        new FutureCallback<ChangeRequestsSnapshot<DataSegmentChangeRequest>>()\n        {\n          @Override\n          public void onSuccess(ChangeRequestsSnapshot<DataSegmentChangeRequest> result)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              response.setStatus(HttpServletResponse.SC_OK);\n              context.inputMapper.writerWithType(HttpServerInventoryView.SEGMENT_LIST_RESP_TYPE_REF)\n                                 .writeValue(asyncContext.getResponse().getOutputStream(), result);\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n\n          @Override\n          public void onFailure(Throwable th)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              if (th instanceof IllegalArgumentException) {\n                response.sendError(HttpServletResponse.SC_BAD_REQUEST, th.getMessage());\n              } else {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, th.getMessage());\n              }\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n        }\n    );\n\n    asyncContext.setTimeout(timeout);\n    return null;\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/SegmentListerResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"},{"authorDate":"2020-10-27 13:35:59","commitOrder":3,"curCode":"  public Void getWorkerState(\n      @QueryParam(\"counter\") long counter,\n      @QueryParam(\"hash\") long hash,\n      @QueryParam(\"timeout\") long timeout,\n      @Context final HttpServletRequest req\n  ) throws IOException\n  {\n    if (timeout <= 0) {\n      sendErrorResponse(req, HttpServletResponse.SC_BAD_REQUEST, \"timeout must be positive.\");\n      return null;\n    }\n\n    final ResponseContext context = createContext(req.getHeader(\"Accept\"));\n\n    final ListenableFuture<ChangeRequestsSnapshot<WorkerHistoryItem>> future = workerTaskManager.getChangesSince(\n        new ChangeRequestHistory.Counter(\n            counter,\n            hash\n        )\n    );\n\n    final AsyncContext asyncContext = req.startAsync();\n\n    asyncContext.addListener(\n        new AsyncListener()\n        {\n          @Override\n          public void onComplete(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onTimeout(AsyncEvent event)\n          {\n\n            \r\n            future.cancel(true);\n            event.getAsyncContext().complete();\n          }\n\n          @Override\n          public void onError(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onStartAsync(AsyncEvent event)\n          {\n          }\n        }\n    );\n\n    Futures.addCallback(\n        future,\n        new FutureCallback<ChangeRequestsSnapshot>()\n        {\n          @Override\n          public void onSuccess(ChangeRequestsSnapshot result)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              response.setStatus(HttpServletResponse.SC_OK);\n              context.inputMapper.writerWithType(WorkerHolder.WORKER_SYNC_RESP_TYPE_REF)\n                                 .writeValue(asyncContext.getResponse().getOutputStream(), result);\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n\n          @Override\n          public void onFailure(Throwable th)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              if (th instanceof IllegalArgumentException) {\n                response.sendError(HttpServletResponse.SC_BAD_REQUEST, th.getMessage());\n              } else {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, th.getMessage());\n              }\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n        }\n    );\n\n    asyncContext.setTimeout(timeout);\n    return null;\n  }\n","date":"2020-10-27 13:35:59","endLine":199,"groupId":"101203","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"getWorkerState","params":"(@QueryParam(\"counter\")longcounter@@QueryParam(\"hash\")longhash@@QueryParam(\"timeout\")longtimeout@@ContextfinalHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/046ff80a0369804d72612602b3e2f64c6e0652.src","preCode":"  public Void getWorkerState(\n      @QueryParam(\"counter\") long counter,\n      @QueryParam(\"hash\") long hash,\n      @QueryParam(\"timeout\") long timeout,\n      @Context final HttpServletRequest req\n  ) throws IOException\n  {\n    if (timeout <= 0) {\n      sendErrorResponse(req, HttpServletResponse.SC_BAD_REQUEST, \"timeout must be positive.\");\n      return null;\n    }\n\n    final ResponseContext context = createContext(req.getHeader(\"Accept\"));\n\n    final ListenableFuture<ChangeRequestsSnapshot<WorkerHistoryItem>> future = workerTaskMonitor.getChangesSince(\n        new ChangeRequestHistory.Counter(\n            counter,\n            hash\n        )\n    );\n\n    final AsyncContext asyncContext = req.startAsync();\n\n    asyncContext.addListener(\n        new AsyncListener()\n        {\n          @Override\n          public void onComplete(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onTimeout(AsyncEvent event)\n          {\n\n            \r\n            future.cancel(true);\n            event.getAsyncContext().complete();\n          }\n\n          @Override\n          public void onError(AsyncEvent event)\n          {\n          }\n\n          @Override\n          public void onStartAsync(AsyncEvent event)\n          {\n          }\n        }\n    );\n\n    Futures.addCallback(\n        future,\n        new FutureCallback<ChangeRequestsSnapshot>()\n        {\n          @Override\n          public void onSuccess(ChangeRequestsSnapshot result)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              response.setStatus(HttpServletResponse.SC_OK);\n              context.inputMapper.writerWithType(WorkerHolder.WORKER_SYNC_RESP_TYPE_REF)\n                                 .writeValue(asyncContext.getResponse().getOutputStream(), result);\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n\n          @Override\n          public void onFailure(Throwable th)\n          {\n            try {\n              HttpServletResponse response = (HttpServletResponse) asyncContext.getResponse();\n              if (th instanceof IllegalArgumentException) {\n                response.sendError(HttpServletResponse.SC_BAD_REQUEST, th.getMessage());\n              } else {\n                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, th.getMessage());\n              }\n              asyncContext.complete();\n            }\n            catch (Exception ex) {\n              log.debug(ex, \"Request timed out or closed already.\");\n            }\n          }\n        }\n    );\n\n    asyncContext.setTimeout(timeout);\n    return null;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/worker/http/TaskManagementResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"ee136303bb561d02dcfc8e4cd7f7b7af907e4e28","commitMessage":"@@@optionally disable all of hardcoded zookeeper use (#9507)\n\n* optionally disable all of hardcoded zookeeper use\n\n* fix DruidCoordinatorTest compilation\n\n* fix test in DruidCoordinatorTest\n\n* fix strict compilation\n\nCo-authored-by: Himanshu Gupta <fill email>","date":"2020-10-27 13:35:59","modifiedFileCount":"22","status":"M","submitter":"Himanshu"}]
