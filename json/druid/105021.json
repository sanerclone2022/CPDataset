[{"authorTime":"2019-11-08 03:58:46","codes":[{"authorDate":"2019-11-08 03:58:46","commitOrder":1,"curCode":"  public void testExceptionOnInputSequenceRead() throws Exception\n  {\n    List<Sequence<IntPair>> input = new ArrayList<>();\n\n    input.add(explodingSequence(15));\n    input.add(nonBlockingSequence(25));\n\n\n    expectedException.expect(RuntimeException.class);\n    expectedException.expectMessage(\n        \"exploded\"\n    );\n    assertException(input);\n\n    input.add(nonBlockingSequence(5));\n    input.add(nonBlockingSequence(25));\n    input.add(explodingSequence(11));\n    input.add(nonBlockingSequence(12));\n\n    assertException(input);\n  }\n","date":"2019-11-08 03:58:46","endLine":406,"groupId":"1288","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExceptionOnInputSequenceRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/15/6447505c4b507bddb7469914202cce98e1b3f6.src","preCode":"  public void testExceptionOnInputSequenceRead() throws Exception\n  {\n    List<Sequence<IntPair>> input = new ArrayList<>();\n\n    input.add(explodingSequence(15));\n    input.add(nonBlockingSequence(25));\n\n\n    expectedException.expect(RuntimeException.class);\n    expectedException.expectMessage(\n        \"exploded\"\n    );\n    assertException(input);\n\n    input.add(nonBlockingSequence(5));\n    input.add(nonBlockingSequence(25));\n    input.add(explodingSequence(11));\n    input.add(nonBlockingSequence(12));\n\n    assertException(input);\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequenceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"B"},{"authorDate":"2019-11-08 03:58:46","commitOrder":1,"curCode":"  public void testExceptionFirstResultFromSequence() throws Exception\n  {\n    List<Sequence<IntPair>> input = new ArrayList<>();\n    input.add(explodingSequence(0));\n    input.add(nonBlockingSequence(2));\n    input.add(nonBlockingSequence(2));\n    input.add(nonBlockingSequence(2));\n\n    expectedException.expect(RuntimeException.class);\n    expectedException.expectMessage(\n        \"exploded\"\n    );\n    assertException(input);\n  }\n","date":"2019-11-08 03:58:46","endLine":422,"groupId":"1288","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionFirstResultFromSequence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/15/6447505c4b507bddb7469914202cce98e1b3f6.src","preCode":"  public void testExceptionFirstResultFromSequence() throws Exception\n  {\n    List<Sequence<IntPair>> input = new ArrayList<>();\n    input.add(explodingSequence(0));\n    input.add(nonBlockingSequence(2));\n    input.add(nonBlockingSequence(2));\n    input.add(nonBlockingSequence(2));\n\n    expectedException.expect(RuntimeException.class);\n    expectedException.expectMessage(\n        \"exploded\"\n    );\n    assertException(input);\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequenceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"B"}],"commitId":"7aafcf8bcae3d57a8992a2634c7b73869c9a4117","commitMessage":"@@@parallel broker merges on fork join pool (#8578)\n\n* sketch of broker parallel merges done in small batches on fork join pool\n\n* fix non-terminating sequences.  auto compute parallelism\n\n* adjust benches\n\n* adjust benchmarks\n\n* now hella more faster.  fixed dumb\n\n* fix\n\n* remove comments\n\n* log.info for debug\n\n* javadoc\n\n* safer block for sequence to yielder conversion\n\n* refactor LifecycleForkJoinPool into LifecycleForkJoinPoolProvider which wraps a ForkJoinPool\n\n* smooth yield rate adjustment.  more logs to help tune\n\n* cleanup.  less logs\n\n* error handling.  bug fixes.  on by default.  more parallel.  more tests\n\n* remove unused var\n\n* comments\n\n* timeboundary mergeFn\n\n* simplify.  more javadoc\n\n* formatting\n\n* pushdown config\n\n* use nanos consistently.  move logs back to debug level.  bit more javadoc\n\n* static terminal result batch\n\n* javadoc for nullability of createMergeFn\n\n* cleanup\n\n* oops\n\n* fix race.  add docs\n\n* spelling.  remove todo.  add unhandled exception log\n\n* cleanup.  revert unintended change\n\n* another unintended change\n\n* review stuff\n\n* add ParallelMergeCombiningSequenceBenchmark.  fixes\n\n* hyper-threading is the enemy\n\n* fix initial start delay.  lol\n\n* parallelism computer now balances partition sizes to partition counts using sqrt of sequence count instead of sequence count by 2\n\n* fix those important style issues with the benchmarks code\n\n* lazy sequence creation for benchmarks\n\n* more benchmark comments\n\n* stable sequence generation time\n\n* update defaults to use 100ms target time.  4096 batch size.  16384 initial yield.  also update user docs\n\n* add jmh thread based benchmarks.  cleanup some stuff\n\n* oops\n\n* style\n\n* add spread to jmh thread benchmark start range.  more comments to benchmarks parameters and purpose\n\n* retool benchmark to allow modeling more typical heterogenous heavy workloads\n\n* spelling\n\n* fix\n\n* refactor benchmarks\n\n* formatting\n\n* docs\n\n* add maxThreadStartDelay parameter to threaded benchmark\n\n* why does catch need to be on its own line but else doesnt\n","date":"2019-11-08 03:58:46","modifiedFileCount":"16","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-11-08 03:58:46","codes":[{"authorDate":"2020-06-27 05:37:20","commitOrder":2,"curCode":"  public void testExceptionOnInputSequenceRead() throws Exception\n  {\n    List<Sequence<IntPair>> input = new ArrayList<>();\n\n    input.add(explodingSequence(15));\n    input.add(nonBlockingSequence(25));\n\n\n    expectedException.expect(RuntimeException.class);\n    expectedException.expectMessage(\n        \"exploded\"\n    );\n    assertException(input);\n  }\n","date":"2020-06-27 05:37:20","endLine":453,"groupId":"105021","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExceptionOnInputSequenceRead","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8e/2b4e5025c23b3968de5b044e4c81cdeb18934d.src","preCode":"  public void testExceptionOnInputSequenceRead() throws Exception\n  {\n    List<Sequence<IntPair>> input = new ArrayList<>();\n\n    input.add(explodingSequence(15));\n    input.add(nonBlockingSequence(25));\n\n\n    expectedException.expect(RuntimeException.class);\n    expectedException.expectMessage(\n        \"exploded\"\n    );\n    assertException(input);\n\n    input.add(nonBlockingSequence(5));\n    input.add(nonBlockingSequence(25));\n    input.add(explodingSequence(11));\n    input.add(nonBlockingSequence(12));\n\n    assertException(input);\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequenceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"M"},{"authorDate":"2019-11-08 03:58:46","commitOrder":2,"curCode":"  public void testExceptionFirstResultFromSequence() throws Exception\n  {\n    List<Sequence<IntPair>> input = new ArrayList<>();\n    input.add(explodingSequence(0));\n    input.add(nonBlockingSequence(2));\n    input.add(nonBlockingSequence(2));\n    input.add(nonBlockingSequence(2));\n\n    expectedException.expect(RuntimeException.class);\n    expectedException.expectMessage(\n        \"exploded\"\n    );\n    assertException(input);\n  }\n","date":"2019-11-08 03:58:46","endLine":422,"groupId":"105021","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionFirstResultFromSequence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/15/6447505c4b507bddb7469914202cce98e1b3f6.src","preCode":"  public void testExceptionFirstResultFromSequence() throws Exception\n  {\n    List<Sequence<IntPair>> input = new ArrayList<>();\n    input.add(explodingSequence(0));\n    input.add(nonBlockingSequence(2));\n    input.add(nonBlockingSequence(2));\n    input.add(nonBlockingSequence(2));\n\n    expectedException.expect(RuntimeException.class);\n    expectedException.expectMessage(\n        \"exploded\"\n    );\n    assertException(input);\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequenceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"N"}],"commitId":"4b99c6d3efa66312d9b6c2ecf34d02dd194e573f","commitMessage":"@@@ensure ParallelMergeCombiningSequence closes its closeables (#10076)\n\n* ensure close for all closeables of ParallelMergeCombiningSequence\n\n* revert unneeded change\n\n* consolidate methods\n\n* catch throwable instead of exception","date":"2020-06-27 05:37:20","modifiedFileCount":"2","status":"M","submitter":"Clint Wylie"}]
