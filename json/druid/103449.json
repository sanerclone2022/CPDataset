[{"authorTime":"2019-02-03 14:34:53","codes":[{"authorDate":"2019-02-03 14:34:53","commitOrder":1,"curCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"d0:v\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"d0:v\",\n                                                                 \"d0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new HllSketchBuildAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2019-02-03 14:34:53","endLine":392,"groupId":"17401","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/46/eb02c01c8e897a404808c56cbb32fa8d7abd30.src","preCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"d0:v\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"d0:v\",\n                                                                 \"d0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new HllSketchBuildAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"B"},{"authorDate":"2019-02-03 14:34:53","commitOrder":1,"curCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"d0:v\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"d0:v\",\n                                                                 \"d0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new SketchMergeAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2019-02-03 14:34:53","endLine":401,"groupId":"6480","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/44864f6f750da57ab6ef9610947da8fd8fab13.src","preCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"d0:v\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"d0:v\",\n                                                                 \"d0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new SketchMergeAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"B"}],"commitId":"953b96d0a436b2bd979c2aa6eecc3f636387633c","commitMessage":"@@@Add more sketch aggregator support in Druid SQL (#6951)\n\n* Add more sketch aggregator support in Druid SQL\n\n* Add docs\n\n* Tweak module serde register\n\n* Fix tests\n\n* Checkstyle\n\n* Test fix\n\n* PR comment\n\n* PR comment\n\n* PR comments\n","date":"2019-02-03 14:34:53","modifiedFileCount":"16","status":"B","submitter":"Jonathan Wei"},{"authorTime":"2019-03-12 02:37:58","codes":[{"authorDate":"2019-03-12 02:37:58","commitOrder":2,"curCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"v0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new HllSketchBuildAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2019-03-12 02:37:58","endLine":392,"groupId":"8949","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/70/cccbad6268ca588ea82ed23b5afc72a417de95.src","preCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"d0:v\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"d0:v\",\n                                                                 \"d0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new HllSketchBuildAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"},{"authorDate":"2019-03-12 02:37:58","commitOrder":2,"curCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"v0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new SketchMergeAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2019-03-12 02:37:58","endLine":401,"groupId":"8949","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/418f3e3a70c78bd635fd3cfc9ff3e3bfd1cec8.src","preCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"d0:v\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"d0:v\",\n                                                                 \"d0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new SketchMergeAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"}],"commitId":"d7ba19d477732578fc310831ed28365b36332752","commitMessage":"@@@sql.  filters.  and virtual columns  (#6902)\n\n* refactor sql planning to re-use expression virtual columns when possible when constructing a DruidQuery.  allowing virtual columns to be defined in filter expressions.  and making resulting native druid queries more concise. also minor refactor of built-in sql aggregators to maximize code re-use\n\n* fix it\n\n* fix it in the right place\n\n* fixup for base64 stuff\n\n* fixup tests\n\n* fix merge conflict on import order\n\n* fixup\n\n* fix imports\n\n* fix tests\n\n* review comments\n\n* refactor\n\n* re-arrange\n\n* better javadoc\n\n* fixup merge\n\n* fixup tests\n\n* fix accidental changes\n","date":"2019-03-12 02:37:58","modifiedFileCount":"33","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-03-12 02:37:58","codes":[{"authorDate":"2019-07-06 06:37:58","commitOrder":3,"curCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (\"\n                       + \"  SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u\\n\"\n                       + \"  FROM druid.foo\\n\"\n                       + \"  GROUP BY 1\\n\"\n                       + \")\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"v0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new HllSketchBuildAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 ROUND\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2019-07-06 06:37:58","endLine":403,"groupId":"12348","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6a/2f9801d7b07d922521930235758b694f7f2cb6.src","preCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"v0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new HllSketchBuildAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"M"},{"authorDate":"2019-03-12 02:37:58","commitOrder":3,"curCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"v0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new SketchMergeAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2019-03-12 02:37:58","endLine":401,"groupId":"8949","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/418f3e3a70c78bd635fd3cfc9ff3e3bfd1cec8.src","preCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"v0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new SketchMergeAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"N"}],"commitId":"0ded0ce4149ddea354ee4f5a98eef235abbd0e83","commitMessage":"@@@Add round support for DS-HLL (#8023)\n\n* Add round support for DS-HLL\n\nSince the Cardinality aggregator has a \"round\" option to round off estimated\nvalues generated from the HyperLogLog algorithm.  add the same \"round\" option to\nthe DataSketches HLL Sketch module aggregators to be consistent.\n\n* Fix checkstyle errors\n\n* Change HllSketchSqlAggregator to do rounding\n\n* Fix test for standard-compliant null handling mode\n","date":"2019-07-06 06:37:58","modifiedFileCount":"6","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2020-02-20 05:09:20","codes":[{"authorDate":"2020-02-20 05:09:20","commitOrder":4,"curCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (\"\n                       + \"  SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u\\n\"\n                       + \"  FROM druid.foo\\n\"\n                       + \"  GROUP BY 1\\n\"\n                       + \")\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"v0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new HllSketchBuildAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 ROUND\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2020-02-20 05:09:20","endLine":428,"groupId":"12348","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cd/18115bca7002b75298b5301f1d5244afb04c03.src","preCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (\"\n                       + \"  SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u\\n\"\n                       + \"  FROM druid.foo\\n\"\n                       + \"  GROUP BY 1\\n\"\n                       + \")\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"v0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new HllSketchBuildAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 ROUND\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"},{"authorDate":"2020-02-20 05:09:20","commitOrder":4,"curCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"v0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new SketchMergeAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2020-02-20 05:09:20","endLine":425,"groupId":"8949","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ec/87c57dcff6fc0a181ec7dde31eec53fb4e26c3.src","preCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"v0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new SketchMergeAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"}],"commitId":"b408a6d774e43e574bf8092584fae76d582cfd8f","commitMessage":"@@@sql support for dynamic parameters (#6974)\n\n* sql support for dynamic parameters\n\n* fixup\n\n* javadocs\n\n* fixup from merge\n\n* formatting\n\n* fixes\n\n* fix it\n\n* doc fix\n\n* remove druid fallback self-join parameterized test\n\n* unused imports\n\n* ignore test for now\n\n* fix imports\n\n* fixup\n\n* fix merge\n\n* merge fixup\n\n* fix test that cannot vectorize\n\n* fixup and more better\n\n* dependency thingo\n\n* fix docs\n\n* tweaks\n\n* fix docs\n\n* spelling\n\n* unused imports after merge\n\n* review stuffs\n\n* add comment\n\n* add ignore text\n\n* review stuffs\n","date":"2020-02-20 05:09:20","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-03-10 08:48:29","codes":[{"authorDate":"2020-03-10 08:48:29","commitOrder":5,"curCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (\"\n                       + \"  SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u\\n\"\n                       + \"  FROM druid.foo\\n\"\n                       + \"  GROUP BY 1\\n\"\n                       + \")\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"d0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new HllSketchBuildAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 ROUND\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2020-03-10 08:48:29","endLine":428,"groupId":"12348","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e9/2b9d52fce9c8294213d1d4fc80c084027fd8ae.src","preCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (\"\n                       + \"  SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u\\n\"\n                       + \"  FROM druid.foo\\n\"\n                       + \"  GROUP BY 1\\n\"\n                       + \")\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"v0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new HllSketchBuildAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 ROUND\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"},{"authorDate":"2020-03-10 08:48:29","commitOrder":5,"curCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"d0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new SketchMergeAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2020-03-10 08:48:29","endLine":425,"groupId":"8949","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ef/776162caa974dc07d0116dca0daa4d18dafdd1.src","preCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"v0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new SketchMergeAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"}],"commitId":"f8b1f2f7f3fe6d49cbb5f19bfe6196a5b716b3ef","commitMessage":"@@@fix issue when distinct grouping dimensions are optimized into the same virtual column expression (#9429)\n\n* fix issue when distinct grouping dimensions are optimized into the same virtual column expression\n\n* fix tests\n\n* more better\n\n* fixes","date":"2020-03-10 08:48:29","modifiedFileCount":"8","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-06-04 07:46:28","codes":[{"authorDate":"2020-06-04 07:46:28","commitOrder":6,"curCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (\"\n                       + \"  SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u\\n\"\n                       + \"  FROM druid.foo\\n\"\n                       + \"  GROUP BY 1\\n\"\n                       + \")\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         Druids.newTimeseriesQueryBuilder()\n                                               .dataSource(CalciteTests.DATASOURCE1)\n                                               .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                   Filtration.eternity()\n                                               )))\n                                               .granularity(new PeriodGranularity(Period.days(1), null, DateTimeZone.UTC))\n                                               .aggregators(\n                                                   Collections.singletonList(\n                                                       new HllSketchBuildAggregatorFactory(\n                                                           \"a0:a\",\n                                                           \"cnt\",\n                                                           null,\n                                                           null,\n                                                           ROUND\n                                                       )\n                                                   )\n                                               )\n                                               .postAggregators(\n                                                   ImmutableList.of(\n                                                       new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                   )\n                                               )\n                                               .context(BaseCalciteQueryTest.getTimeseriesContextWithFloorTime(\n                                                   ImmutableMap.of(\"skipEmptyBuckets\", true, \"sqlQueryId\", \"dummy\"),\n                                                   \"d0\"\n                                               ))\n                                               .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2020-06-04 07:46:28","endLine":414,"groupId":"12348","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6f/4c8b6a9aaa5b292b164752169b860e18f188af.src","preCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (\"\n                       + \"  SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u\\n\"\n                       + \"  FROM druid.foo\\n\"\n                       + \"  GROUP BY 1\\n\"\n                       + \")\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"d0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new HllSketchBuildAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 ROUND\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"M"},{"authorDate":"2020-06-04 07:46:28","commitOrder":6,"curCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(Druids.newTimeseriesQueryBuilder()\n                                                               .dataSource(CalciteTests.DATASOURCE1)\n                                                               .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                                   Filtration.eternity()\n                                                               )))\n                                                               .granularity(new PeriodGranularity(Period.days(1), null, DateTimeZone.UTC))\n                                                               .aggregators(\n                                                                   Collections.singletonList(\n                                                                       new SketchMergeAggregatorFactory(\n                                                                           \"a0:a\",\n                                                                           \"cnt\",\n                                                                           null,\n                                                                           null,\n                                                                           null,\n                                                                           null\n                                                                       )\n                                                                   )\n                                                               )\n                                                               .postAggregators(\n                                                                   ImmutableList.of(\n                                                                       new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                                   )\n                                                               )\n                                                               .context(BaseCalciteQueryTest.getTimeseriesContextWithFloorTime(\n                                                                   ImmutableMap.of(\"skipEmptyBuckets\", true, \"sqlQueryId\", \"dummy\"),\n                                                                   \"d0\"\n                                                               ))\n                                                               .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2020-06-04 07:46:28","endLine":411,"groupId":"16424","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/20/1380a1b206b5f896351706febf0e4d74b5d744.src","preCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setVirtualColumns(\n                                                         new ExpressionVirtualColumn(\n                                                             \"v0\",\n                                                             \"timestamp_floor(\\\"__time\\\",'P1D',null,'UTC')\",\n                                                             ValueType.LONG,\n                                                             TestExprMacroTable.INSTANCE\n                                                         )\n                                                     )\n                                                     .setDimensions(\n                                                         Collections.singletonList(\n                                                             new DefaultDimensionSpec(\n                                                                 \"v0\",\n                                                                 \"d0\",\n                                                                 ValueType.LONG\n                                                             )\n                                                         )\n                                                     )\n                                                     .setAggregatorSpecs(\n                                                         Collections.singletonList(\n                                                             new SketchMergeAggregatorFactory(\n                                                                 \"a0:a\",\n                                                                 \"cnt\",\n                                                                 null,\n                                                                 null,\n                                                                 null,\n                                                                 null\n                                                             )\n                                                         )\n                                                     )\n                                                     .setPostAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"}],"commitId":"790e9482ea18d87d59eeeeab4ceec14e4b1e192d","commitMessage":"@@@Fix Subquery could not be converted to groupBy query (#9959)\n\n* Fix join\n\n* Fix Subquery could not be converted to groupBy query\n\n* Fix Subquery could not be converted to groupBy query\n\n* Fix Subquery could not be converted to groupBy query\n\n* Fix Subquery could not be converted to groupBy query\n\n* Fix Subquery could not be converted to groupBy query\n\n* Fix Subquery could not be converted to groupBy query\n\n* Fix Subquery could not be converted to groupBy query\n\n* Fix Subquery could not be converted to groupBy query\n\n* add tests\n\n* address comments\n\n* fix failing tests","date":"2020-06-04 07:46:28","modifiedFileCount":"12","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-07-08 23:38:56","codes":[{"authorDate":"2020-07-08 23:38:56","commitOrder":7,"curCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (\"\n                       + \"  SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u\\n\"\n                       + \"  FROM druid.foo\\n\"\n                       + \"  GROUP BY 1\\n\"\n                       + \")\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         Druids.newTimeseriesQueryBuilder()\n                                               .dataSource(CalciteTests.DATASOURCE1)\n                                               .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                   Filtration.eternity()\n                                               )))\n                                               .granularity(new PeriodGranularity(Period.days(1), null, DateTimeZone.UTC))\n                                               .aggregators(\n                                                   Collections.singletonList(\n                                                       new HllSketchBuildAggregatorFactory(\n                                                           \"a0:a\",\n                                                           \"cnt\",\n                                                           null,\n                                                           null,\n                                                           ROUND\n                                                       )\n                                                   )\n                                               )\n                                               .postAggregators(\n                                                   ImmutableList.of(\n                                                       new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                   )\n                                               )\n                                               .context(BaseCalciteQueryTest.getTimeseriesContextWithFloorTime(\n                                                   ImmutableMap.of(\"skipEmptyBuckets\", true, \"sqlQueryId\", \"dummy\"),\n                                                   \"d0\"\n                                               ))\n                                               .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     NullHandling.replaceWithDefault()\n                                     ? Arrays.asList(\n                                       new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                       new CountAggregatorFactory(\"_a0:count\")\n                                     )\n                                     : Arrays.asList(\n                                         new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                         new FilteredAggregatorFactory(\n                                             new CountAggregatorFactory(\"_a0:count\"),\n                                             BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"a0\", null, null))\n                                         )\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2020-07-08 23:38:56","endLine":424,"groupId":"12348","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/03/9801c5efc6253bf38eb1c5fad535f8f692b08e.src","preCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (\"\n                       + \"  SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u\\n\"\n                       + \"  FROM druid.foo\\n\"\n                       + \"  GROUP BY 1\\n\"\n                       + \")\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         Druids.newTimeseriesQueryBuilder()\n                                               .dataSource(CalciteTests.DATASOURCE1)\n                                               .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                   Filtration.eternity()\n                                               )))\n                                               .granularity(new PeriodGranularity(Period.days(1), null, DateTimeZone.UTC))\n                                               .aggregators(\n                                                   Collections.singletonList(\n                                                       new HllSketchBuildAggregatorFactory(\n                                                           \"a0:a\",\n                                                           \"cnt\",\n                                                           null,\n                                                           null,\n                                                           ROUND\n                                                       )\n                                                   )\n                                               )\n                                               .postAggregators(\n                                                   ImmutableList.of(\n                                                       new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                   )\n                                               )\n                                               .context(BaseCalciteQueryTest.getTimeseriesContextWithFloorTime(\n                                                   ImmutableMap.of(\"skipEmptyBuckets\", true, \"sqlQueryId\", \"dummy\"),\n                                                   \"d0\"\n                                               ))\n                                               .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"M"},{"authorDate":"2020-07-08 23:38:56","commitOrder":7,"curCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(Druids.newTimeseriesQueryBuilder()\n                                                               .dataSource(CalciteTests.DATASOURCE1)\n                                                               .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                                   Filtration.eternity()\n                                                               )))\n                                                               .granularity(new PeriodGranularity(Period.days(1), null, DateTimeZone.UTC))\n                                                               .aggregators(\n                                                                   Collections.singletonList(\n                                                                       new SketchMergeAggregatorFactory(\n                                                                           \"a0:a\",\n                                                                           \"cnt\",\n                                                                           null,\n                                                                           null,\n                                                                           null,\n                                                                           null\n                                                                       )\n                                                                   )\n                                                               )\n                                                               .postAggregators(\n                                                                   ImmutableList.of(\n                                                                       new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                                   )\n                                                               )\n                                                               .context(BaseCalciteQueryTest.getTimeseriesContextWithFloorTime(\n                                                                   ImmutableMap.of(\"skipEmptyBuckets\", true, \"sqlQueryId\", \"dummy\"),\n                                                                   \"d0\"\n                                                               ))\n                                                               .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     NullHandling.replaceWithDefault()\n                                     ? Arrays.asList(\n                                       new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                       new CountAggregatorFactory(\"_a0:count\")\n                                     )\n                                     : Arrays.asList(\n                                         new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                         new FilteredAggregatorFactory(\n                                             new CountAggregatorFactory(\"_a0:count\"),\n                                             BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"a0\", null, null))\n                                         )\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2020-07-08 23:38:56","endLine":421,"groupId":"16424","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/92/01c91b994fb98f78c44a89a1b31e6bc2c3797d.src","preCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(Druids.newTimeseriesQueryBuilder()\n                                                               .dataSource(CalciteTests.DATASOURCE1)\n                                                               .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                                   Filtration.eternity()\n                                                               )))\n                                                               .granularity(new PeriodGranularity(Period.days(1), null, DateTimeZone.UTC))\n                                                               .aggregators(\n                                                                   Collections.singletonList(\n                                                                       new SketchMergeAggregatorFactory(\n                                                                           \"a0:a\",\n                                                                           \"cnt\",\n                                                                           null,\n                                                                           null,\n                                                                           null,\n                                                                           null\n                                                                       )\n                                                                   )\n                                                               )\n                                                               .postAggregators(\n                                                                   ImmutableList.of(\n                                                                       new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                                   )\n                                                               )\n                                                               .context(BaseCalciteQueryTest.getTimeseriesContextWithFloorTime(\n                                                                   ImmutableMap.of(\"skipEmptyBuckets\", true, \"sqlQueryId\", \"dummy\"),\n                                                                   \"d0\"\n                                                               ))\n                                                               .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(Arrays.asList(\n                                     new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\")\n                                 ))\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"}],"commitId":"1b9aacb1cd1d16b23de2f4485e1398640e97f8bd","commitMessage":"@@@Fix avg sql aggregator (#10135)\n\n* new average aggregator\n\n* method to create count aggregator factory\n\n* test everything\n\n* update other usages\n\n* fix style\n\n* fix more tests\n\n* fix datasketches tests","date":"2020-07-08 23:38:56","modifiedFileCount":"5","status":"M","submitter":"Franklyn Dsouza"},{"authorTime":"2021-04-17 09:45:46","codes":[{"authorDate":"2021-04-17 09:45:46","commitOrder":8,"curCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (\"\n                       + \"  SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u\\n\"\n                       + \"  FROM druid.foo\\n\"\n                       + \"  GROUP BY 1\\n\"\n                       + \")\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        queryContext,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         Druids.newTimeseriesQueryBuilder()\n                                               .dataSource(CalciteTests.DATASOURCE1)\n                                               .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                   Filtration.eternity()\n                                               )))\n                                               .granularity(new PeriodGranularity(Period.days(1), null, DateTimeZone.UTC))\n                                               .aggregators(\n                                                   Collections.singletonList(\n                                                       new HllSketchBuildAggregatorFactory(\n                                                           \"a0:a\",\n                                                           \"cnt\",\n                                                           null,\n                                                           null,\n                                                           ROUND\n                                                       )\n                                                   )\n                                               )\n                                               .postAggregators(\n                                                   ImmutableList.of(\n                                                       new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                   )\n                                               )\n                                               .context(queryContext)\n                                               .build()\n                                               .withOverriddenContext(\n                                                   BaseCalciteQueryTest.getTimeseriesContextWithFloorTime(\n                                                       ImmutableMap.of(\"skipEmptyBuckets\", true, \"sqlQueryId\", \"dummy\"),\n                                                       \"d0\"\n                                                   )\n                                               )\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     NullHandling.replaceWithDefault()\n                                     ? Arrays.asList(\n                                       new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                       new CountAggregatorFactory(\"_a0:count\")\n                                     )\n                                     : Arrays.asList(\n                                         new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                         new FilteredAggregatorFactory(\n                                             new CountAggregatorFactory(\"_a0:count\"),\n                                             BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"a0\", null, null))\n                                         )\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(queryContext)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2021-04-17 09:45:46","endLine":461,"groupId":"4945","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/faed1cbede6e20499ff30cba7b05c230a450f7.src","preCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (\"\n                       + \"  SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u\\n\"\n                       + \"  FROM druid.foo\\n\"\n                       + \"  GROUP BY 1\\n\"\n                       + \")\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         Druids.newTimeseriesQueryBuilder()\n                                               .dataSource(CalciteTests.DATASOURCE1)\n                                               .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                   Filtration.eternity()\n                                               )))\n                                               .granularity(new PeriodGranularity(Period.days(1), null, DateTimeZone.UTC))\n                                               .aggregators(\n                                                   Collections.singletonList(\n                                                       new HllSketchBuildAggregatorFactory(\n                                                           \"a0:a\",\n                                                           \"cnt\",\n                                                           null,\n                                                           null,\n                                                           ROUND\n                                                       )\n                                                   )\n                                               )\n                                               .postAggregators(\n                                                   ImmutableList.of(\n                                                       new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                   )\n                                               )\n                                               .context(BaseCalciteQueryTest.getTimeseriesContextWithFloorTime(\n                                                   ImmutableMap.of(\"skipEmptyBuckets\", true, \"sqlQueryId\", \"dummy\"),\n                                                   \"d0\"\n                                               ))\n                                               .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     NullHandling.replaceWithDefault()\n                                     ? Arrays.asList(\n                                       new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                       new CountAggregatorFactory(\"_a0:count\")\n                                     )\n                                     : Arrays.asList(\n                                         new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                         new FilteredAggregatorFactory(\n                                             new CountAggregatorFactory(\"_a0:count\"),\n                                             BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"a0\", null, null))\n                                         )\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"M"},{"authorDate":"2021-04-17 09:45:46","commitOrder":8,"curCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        queryContext,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(Druids.newTimeseriesQueryBuilder()\n                                                               .dataSource(CalciteTests.DATASOURCE1)\n                                                               .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                                   Filtration.eternity()\n                                                               )))\n                                                               .granularity(new PeriodGranularity(\n                                                                   Period.days(1),\n                                                                   null,\n                                                                   DateTimeZone.UTC\n                                                               ))\n                                                               .aggregators(\n                                                                   Collections.singletonList(\n                                                                       new SketchMergeAggregatorFactory(\n                                                                           \"a0:a\",\n                                                                           \"cnt\",\n                                                                           null,\n                                                                           null,\n                                                                           null,\n                                                                           null\n                                                                       )\n                                                                   )\n                                                               )\n                                                               .postAggregators(\n                                                                   ImmutableList.of(\n                                                                       new FinalizingFieldAccessPostAggregator(\n                                                                           \"a0\",\n                                                                           \"a0:a\"\n                                                                       )\n                                                                   )\n                                                               )\n                                                               .context(queryContext)\n                                                               .build()\n                                                               .withOverriddenContext(\n                                                                   BaseCalciteQueryTest.getTimeseriesContextWithFloorTime(\n                                                                       ImmutableMap.of(\n                                                                           \"skipEmptyBuckets\",\n                                                                           true,\n                                                                           \"sqlQueryId\",\n                                                                           \"dummy\"\n                                                                       ),\n                                                                       \"d0\"\n                                                                   )\n                                                               )\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     NullHandling.replaceWithDefault()\n                                     ? Arrays.asList(\n                                         new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                         new CountAggregatorFactory(\"_a0:count\")\n                                     )\n                                     : Arrays.asList(\n                                         new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                         new FilteredAggregatorFactory(\n                                             new CountAggregatorFactory(\"_a0:count\"),\n                                             BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"a0\", null, null))\n                                         )\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(queryContext)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2021-04-17 09:45:46","endLine":476,"groupId":"4945","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvgDailyCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0a/ac2b088cc582ff3f2c6a9904cd769d63d61d78.src","preCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(Druids.newTimeseriesQueryBuilder()\n                                                               .dataSource(CalciteTests.DATASOURCE1)\n                                                               .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                                   Filtration.eternity()\n                                                               )))\n                                                               .granularity(new PeriodGranularity(Period.days(1), null, DateTimeZone.UTC))\n                                                               .aggregators(\n                                                                   Collections.singletonList(\n                                                                       new SketchMergeAggregatorFactory(\n                                                                           \"a0:a\",\n                                                                           \"cnt\",\n                                                                           null,\n                                                                           null,\n                                                                           null,\n                                                                           null\n                                                                       )\n                                                                   )\n                                                               )\n                                                               .postAggregators(\n                                                                   ImmutableList.of(\n                                                                       new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                                   )\n                                                               )\n                                                               .context(BaseCalciteQueryTest.getTimeseriesContextWithFloorTime(\n                                                                   ImmutableMap.of(\"skipEmptyBuckets\", true, \"sqlQueryId\", \"dummy\"),\n                                                                   \"d0\"\n                                                               ))\n                                                               .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     NullHandling.replaceWithDefault()\n                                     ? Arrays.asList(\n                                       new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                       new CountAggregatorFactory(\"_a0:count\")\n                                     )\n                                     : Arrays.asList(\n                                         new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                         new FilteredAggregatorFactory(\n                                             new CountAggregatorFactory(\"_a0:count\"),\n                                             BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"a0\", null, null))\n                                         )\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"M"}],"commitId":"f2b54de205eff996e76bd3d634360cc59c6b3577","commitMessage":"@@@Vectorized versions of HllSketch aggregators. (#11115)\n\n* Vectorized versions of HllSketch aggregators.\n\nThe patch uses the same?\"helper\" approach as #10767 and #10304.  and\nextends the tests to run in both vectorized and non-vectorized modes.\n\nAlso includes some minor changes to the theta sketch vector aggregator:\n\n- Cosmetic changes to make the hll and theta implementations look\n  more similar.\n- Extends the theta SQL tests to run in vectorized mode.\n\n* Updates post-code-review.\n\n* Fix javadoc.","date":"2021-04-17 09:45:46","modifiedFileCount":"8","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-05-11 01:13:37","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":9,"curCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n\n    testQuery(\n        \"SELECT\\n\"\n        + \"  AVG(u)\\n\"\n        + \"FROM (\"\n        + \"  SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \"  GROUP BY 1\\n\"\n        + \")\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            new QueryDataSource(\n                                Druids.newTimeseriesQueryBuilder()\n                                      .dataSource(CalciteTests.DATASOURCE1)\n                                      .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                          Filtration.eternity()\n                                      )))\n                                      .granularity(new PeriodGranularity(Period.days(1), null, DateTimeZone.UTC))\n                                      .aggregators(\n                                          Collections.singletonList(\n                                              new HllSketchBuildAggregatorFactory(\n                                                  \"a0:a\",\n                                                  \"cnt\",\n                                                  null,\n                                                  null,\n                                                  ROUND\n                                              )\n                                          )\n                                      )\n                                      .postAggregators(\n                                          ImmutableList.of(\n                                              new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                          )\n                                      )\n                                      .context(QUERY_CONTEXT_DEFAULT)\n                                      .build()\n                                      .withOverriddenContext(\n                                          BaseCalciteQueryTest.getTimeseriesContextWithFloorTime(\n                                              ImmutableMap.of(\n                                                  TimeseriesQuery.SKIP_EMPTY_BUCKETS,\n                                                  true,\n                                                  \"sqlQueryId\",\n                                                  \"dummy\"\n                                              ),\n                                              \"d0\"\n                                          )\n                                      )\n                            )\n                        )\n                        .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(\n                            NullHandling.replaceWithDefault()\n                            ? Arrays.asList(\n                                new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                new CountAggregatorFactory(\"_a0:count\")\n                            )\n                            : Arrays.asList(\n                                new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                new FilteredAggregatorFactory(\n                                    new CountAggregatorFactory(\"_a0:count\"),\n                                    BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"a0\", null, null))\n                                )\n                            )\n                        )\n                        .setPostAggregatorSpecs(\n                            ImmutableList.of(\n                                new ArithmeticPostAggregator(\n                                    \"_a0\",\n                                    \"quotient\",\n                                    ImmutableList.of(\n                                        new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                        new FieldAccessPostAggregator(null, \"_a0:count\")\n                                    )\n                                )\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        expectedResults\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":326,"groupId":"103449","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"testAvgDailyCountDistinctHllSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2c/71fa429ebbefc4d1862dabffe0d7c86b6a345d.src","preCode":"  public void testAvgDailyCountDistinctHllSketch() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (\"\n                       + \"  SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_HLL(cnt) AS u\\n\"\n                       + \"  FROM druid.foo\\n\"\n                       + \"  GROUP BY 1\\n\"\n                       + \")\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        queryContext,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         Druids.newTimeseriesQueryBuilder()\n                                               .dataSource(CalciteTests.DATASOURCE1)\n                                               .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                   Filtration.eternity()\n                                               )))\n                                               .granularity(new PeriodGranularity(Period.days(1), null, DateTimeZone.UTC))\n                                               .aggregators(\n                                                   Collections.singletonList(\n                                                       new HllSketchBuildAggregatorFactory(\n                                                           \"a0:a\",\n                                                           \"cnt\",\n                                                           null,\n                                                           null,\n                                                           ROUND\n                                                       )\n                                                   )\n                                               )\n                                               .postAggregators(\n                                                   ImmutableList.of(\n                                                       new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                                   )\n                                               )\n                                               .context(queryContext)\n                                               .build()\n                                               .withOverriddenContext(\n                                                   BaseCalciteQueryTest.getTimeseriesContextWithFloorTime(\n                                                       ImmutableMap.of(\"skipEmptyBuckets\", true, \"sqlQueryId\", \"dummy\"),\n                                                       \"d0\"\n                                                   )\n                                               )\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     NullHandling.replaceWithDefault()\n                                     ? Arrays.asList(\n                                       new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                       new CountAggregatorFactory(\"_a0:count\")\n                                     )\n                                     : Arrays.asList(\n                                         new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                         new FilteredAggregatorFactory(\n                                             new CountAggregatorFactory(\"_a0:count\"),\n                                             BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"a0\", null, null))\n                                         )\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(queryContext)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"},{"authorDate":"2021-05-11 01:13:37","commitOrder":9,"curCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n\n    testQuery(\n        \"SELECT\\n\"\n        + \"  AVG(u)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            new QueryDataSource(Druids.newTimeseriesQueryBuilder()\n                                                      .dataSource(CalciteTests.DATASOURCE1)\n                                                      .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                          Filtration.eternity()\n                                                      )))\n                                                      .granularity(new PeriodGranularity(\n                                                          Period.days(1),\n                                                          null,\n                                                          DateTimeZone.UTC\n                                                      ))\n                                                      .aggregators(\n                                                          Collections.singletonList(\n                                                              new SketchMergeAggregatorFactory(\n                                                                  \"a0:a\",\n                                                                  \"cnt\",\n                                                                  null,\n                                                                  null,\n                                                                  null,\n                                                                  null\n                                                              )\n                                                          )\n                                                      )\n                                                      .postAggregators(\n                                                          ImmutableList.of(\n                                                              new FinalizingFieldAccessPostAggregator(\n                                                                  \"a0\",\n                                                                  \"a0:a\"\n                                                              )\n                                                          )\n                                                      )\n                                                      .context(TIMESERIES_CONTEXT_BY_GRAN)\n                                                      .build()\n                                                      .withOverriddenContext(\n                                                          BaseCalciteQueryTest.getTimeseriesContextWithFloorTime(\n                                                              TIMESERIES_CONTEXT_BY_GRAN,\n                                                              \"d0\"\n                                                          )\n                                                      )\n                            )\n                        )\n                        .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(\n                            NullHandling.replaceWithDefault()\n                            ? Arrays.asList(\n                                new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                new CountAggregatorFactory(\"_a0:count\")\n                            )\n                            : Arrays.asList(\n                                new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                new FilteredAggregatorFactory(\n                                    new CountAggregatorFactory(\"_a0:count\"),\n                                    BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"a0\", null, null))\n                                )\n                            )\n                        )\n                        .setPostAggregatorSpecs(\n                            ImmutableList.of(\n                                new ArithmeticPostAggregator(\n                                    \"_a0\",\n                                    \"quotient\",\n                                    ImmutableList.of(\n                                        new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                        new FieldAccessPostAggregator(null, \"_a0:count\")\n                                    )\n                                )\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        expectedResults\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":347,"groupId":"103449","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"testAvgDailyCountDistinctThetaSketch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/96/3a69c80110d5b466540b1d329bf4d12f694975.src","preCode":"  public void testAvgDailyCountDistinctThetaSketch() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT\\n\"\n                       + \"  AVG(u)\\n\"\n                       + \"FROM (SELECT FLOOR(__time TO DAY), APPROX_COUNT_DISTINCT_DS_THETA(cnt) AS u FROM druid.foo GROUP BY 1)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        queryContext,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            1L\n        }\n    );\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(Druids.newTimeseriesQueryBuilder()\n                                                               .dataSource(CalciteTests.DATASOURCE1)\n                                                               .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                                   Filtration.eternity()\n                                                               )))\n                                                               .granularity(new PeriodGranularity(\n                                                                   Period.days(1),\n                                                                   null,\n                                                                   DateTimeZone.UTC\n                                                               ))\n                                                               .aggregators(\n                                                                   Collections.singletonList(\n                                                                       new SketchMergeAggregatorFactory(\n                                                                           \"a0:a\",\n                                                                           \"cnt\",\n                                                                           null,\n                                                                           null,\n                                                                           null,\n                                                                           null\n                                                                       )\n                                                                   )\n                                                               )\n                                                               .postAggregators(\n                                                                   ImmutableList.of(\n                                                                       new FinalizingFieldAccessPostAggregator(\n                                                                           \"a0\",\n                                                                           \"a0:a\"\n                                                                       )\n                                                                   )\n                                                               )\n                                                               .context(queryContext)\n                                                               .build()\n                                                               .withOverriddenContext(\n                                                                   BaseCalciteQueryTest.getTimeseriesContextWithFloorTime(\n                                                                       ImmutableMap.of(\n                                                                           \"skipEmptyBuckets\",\n                                                                           true,\n                                                                           \"sqlQueryId\",\n                                                                           \"dummy\"\n                                                                       ),\n                                                                       \"d0\"\n                                                                   )\n                                                               )\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     NullHandling.replaceWithDefault()\n                                     ? Arrays.asList(\n                                         new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                         new CountAggregatorFactory(\"_a0:count\")\n                                     )\n                                     : Arrays.asList(\n                                         new LongSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                         new FilteredAggregatorFactory(\n                                             new CountAggregatorFactory(\"_a0:count\"),\n                                             BaseCalciteQueryTest.not(BaseCalciteQueryTest.selector(\"a0\", null, null))\n                                         )\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         )\n                                     )\n                                 )\n                                 .setContext(queryContext)\n                                 .build();\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/sql/ThetaSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
