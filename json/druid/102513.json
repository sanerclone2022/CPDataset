[{"authorTime":"2019-03-14 14:36:14","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":7,"curCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    if (!isIncrementalHandoffSupported) {\n      return;\n    }\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamPartitions<Integer, Long> startPartitions = new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(\n            0,\n            0L,\n            1,\n            0L\n        )\n    );\n    \r\n    final SeekableStreamPartitions<Integer, Long> checkpoint = new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(\n            0,\n            1L,\n            1,\n            0L\n        )\n    );\n    final SeekableStreamPartitions<Integer, Long> endPartitions = new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(\n            0,\n            2L,\n            1,\n            0L\n        )\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets));\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions),\n                new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(\n                    topic,\n                    checkpoint.getPartitionSequenceNumberMap()\n                ))\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 2L, 1, 0L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","date":"2019-02-24 12:10:31","endLine":864,"groupId":"6241","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeBasedIncrementalHandOff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/9bf8ad3716e1bda5912843b5946146e1e703d6.src","preCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    if (!isIncrementalHandoffSupported) {\n      return;\n    }\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamPartitions<Integer, Long> startPartitions = new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(\n            0,\n            0L,\n            1,\n            0L\n        )\n    );\n    \r\n    final SeekableStreamPartitions<Integer, Long> checkpoint = new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(\n            0,\n            1L,\n            1,\n            0L\n        )\n    );\n    final SeekableStreamPartitions<Integer, Long> endPartitions = new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(\n            0,\n            2L,\n            1,\n            0L\n        )\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets));\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions),\n                new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(\n                    topic,\n                    checkpoint.getPartitionSequenceNumberMap()\n                ))\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 2L, 1, 0L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":764,"status":"NB"},{"authorDate":"2019-03-14 14:36:14","commitOrder":7,"curCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    if (!isIncrementalHandoffSupported) {\n      return;\n    }\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    \r\n    int numToAdd = records.size();\n\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : records) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamPartitions<Integer, Long> startPartitions = new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(\n            0,\n            0L,\n            1,\n            1L\n        )\n    );\n\n    final SeekableStreamPartitions<Integer, Long> endPartitions = new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(\n            0,\n            10L,\n            1,\n            2L\n        )\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","date":"2019-03-14 14:36:14","endLine":2394,"groupId":"6254","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCanStartFromLaterThanEarliestOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/46/1ac9e3a89617578f5c57903c545ac4ed179fac.src","preCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    if (!isIncrementalHandoffSupported) {\n      return;\n    }\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    \r\n    int numToAdd = records.size();\n\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : records) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamPartitions<Integer, Long> startPartitions = new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(\n            0,\n            0L,\n            1,\n            1L\n        )\n    );\n\n    final SeekableStreamPartitions<Integer, Long> endPartitions = new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(\n            0,\n            10L,\n            1,\n            2L\n        )\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2334,"status":"B"}],"commitId":"c020272adda784dd02c8ac1b108a57d6d2045d1c","commitMessage":"@@@Fix KafkaRecordSupplier assign (#7260)\n\n* Fix KafkaRecordSupplier assign\n\n* TeamCity fix\n","date":"2019-03-14 14:36:14","modifiedFileCount":"2","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2019-03-22 04:12:22","codes":[{"authorDate":"2019-03-22 04:12:22","commitOrder":8,"curCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    if (!isIncrementalHandoffSupported) {\n      return;\n    }\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets));\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions),\n                new KafkaDataSourceMetadata(\n                    new SeekableStreamEndSequenceNumbers<>(topic, checkpoint.getPartitionSequenceNumberMap())\n                )\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","date":"2019-03-22 04:12:22","endLine":844,"groupId":"13979","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeBasedIncrementalHandOff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/eb/ef3fc4596a43b59efefcaf094105a8ae34ab5f.src","preCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    if (!isIncrementalHandoffSupported) {\n      return;\n    }\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamPartitions<Integer, Long> startPartitions = new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(\n            0,\n            0L,\n            1,\n            0L\n        )\n    );\n    \r\n    final SeekableStreamPartitions<Integer, Long> checkpoint = new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(\n            0,\n            1L,\n            1,\n            0L\n        )\n    );\n    final SeekableStreamPartitions<Integer, Long> endPartitions = new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(\n            0,\n            2L,\n            1,\n            0L\n        )\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets));\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions),\n                new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(\n                    topic,\n                    checkpoint.getPartitionSequenceNumberMap()\n                ))\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(topic, ImmutableMap.of(0, 2L, 1, 0L))),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":757,"status":"M"},{"authorDate":"2019-03-22 04:12:22","commitOrder":8,"curCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    if (!isIncrementalHandoffSupported) {\n      return;\n    }\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : records) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","date":"2019-03-22 04:12:22","endLine":2386,"groupId":"9760","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCanStartFromLaterThanEarliestOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/eb/ef3fc4596a43b59efefcaf094105a8ae34ab5f.src","preCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    if (!isIncrementalHandoffSupported) {\n      return;\n    }\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    \r\n    int numToAdd = records.size();\n\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : records) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamPartitions<Integer, Long> startPartitions = new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(\n            0,\n            0L,\n            1,\n            1L\n        )\n    );\n\n    final SeekableStreamPartitions<Integer, Long> endPartitions = new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(\n            0,\n            10L,\n            1,\n            2L\n        )\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2337,"status":"M"}],"commitId":"0c5dcf5586e33607849e397209f3eb0b10661f1e","commitMessage":"@@@Fix exclusivity for start offset in kinesis indexing service & check exclusivity properly in IndexerSQLMetadataStorageCoordinator (#7291)\n\n* Fix exclusivity for start offset in kinesis indexing service\n\n* some adjustment\n\n* Fix SeekableStreamDataSourceMetadata\n\n* Add missing javadocs\n\n* Add missing comments and unit test\n\n* fix SeekableStreamStartSequenceNumbers.plus and add comments\n\n* remove extra exclusivePartitions in KafkaIOConfig and fix downgrade issue\n\n* Add javadocs\n\n* fix compilation\n\n* fix test\n\n* remove unused variable\n","date":"2019-03-22 04:12:22","modifiedFileCount":"30","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-05-24 00:25:35","codes":[{"authorDate":"2019-05-24 00:25:35","commitOrder":9,"curCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets));\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions),\n                new KafkaDataSourceMetadata(\n                    new SeekableStreamEndSequenceNumbers<>(topic, checkpoint.getPartitionSequenceNumberMap())\n                )\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","date":"2019-05-24 00:25:35","endLine":823,"groupId":"13979","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeBasedIncrementalHandOff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/78/3af47ca8bb71623d67c9415e3f7a2ce8d26cb8.src","preCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    if (!isIncrementalHandoffSupported) {\n      return;\n    }\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets));\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions),\n                new KafkaDataSourceMetadata(\n                    new SeekableStreamEndSequenceNumbers<>(topic, checkpoint.getPartitionSequenceNumberMap())\n                )\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":739,"status":"M"},{"authorDate":"2019-05-24 00:25:35","commitOrder":9,"curCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : records) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","date":"2019-05-24 00:25:35","endLine":2344,"groupId":"9760","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCanStartFromLaterThanEarliestOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/78/3af47ca8bb71623d67c9415e3f7a2ce8d26cb8.src","preCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    if (!isIncrementalHandoffSupported) {\n      return;\n    }\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : records) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2298,"status":"M"}],"commitId":"eff2be4f8f9d7aad0f01516f5425f3ebccaa006c","commitMessage":"@@@Remove LegacyKafkaIndexTaskRunner (#7735)\n\n","date":"2019-05-24 00:25:35","modifiedFileCount":"4","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-06-01 08:16:01","codes":[{"authorDate":"2019-05-24 00:25:35","commitOrder":10,"curCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets));\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions),\n                new KafkaDataSourceMetadata(\n                    new SeekableStreamEndSequenceNumbers<>(topic, checkpoint.getPartitionSequenceNumberMap())\n                )\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","date":"2019-05-24 00:25:35","endLine":823,"groupId":"13979","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeBasedIncrementalHandOff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/78/3af47ca8bb71623d67c9415e3f7a2ce8d26cb8.src","preCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets));\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions),\n                new KafkaDataSourceMetadata(\n                    new SeekableStreamEndSequenceNumbers<>(topic, checkpoint.getPartitionSequenceNumberMap())\n                )\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":739,"status":"N"},{"authorDate":"2019-06-01 08:16:01","commitOrder":10,"curCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    insertData();\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","date":"2019-06-01 08:16:01","endLine":2329,"groupId":"9760","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCanStartFromLaterThanEarliestOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6c/42b3b85627bc30eb07613f0c2e7f18fca29a2b.src","preCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    \r\n    try (final KafkaProducer<byte[], byte[]> kafkaProducer = kafkaServer.newProducer()) {\n      kafkaProducer.initTransactions();\n      kafkaProducer.beginTransaction();\n      for (ProducerRecord<byte[], byte[]> record : records) {\n        kafkaProducer.send(record).get();\n      }\n      kafkaProducer.commitTransaction();\n    }\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2291,"status":"M"}],"commitId":"8032c4add8f78d0c15044d0847201c618e27dc25","commitMessage":"@@@Add errors and state to stream supervisor status API endpoint (#7428)\n\n* Add state and error tracking for seekable stream supervisors\n\n* Fixed nits in docs\n\n* Made inner class static and updated spec test with jackson inject\n\n* Review changes\n\n* Remove redundant config param in supervisor\n\n* Style\n\n* Applied some of Jon's recommendations\n\n* Add transience field\n\n* write test\n\n* implement code review changes except for reconsidering logic of markRunFinishedAndEvaluateHealth()\n\n* remove transience reporting and fix SeekableStreamSupervisorStateManager impl\n\n* move call to stateManager.markRunFinished() from RunNotice to runInternal() for tests\n\n* remove stateHistory because it wasn't adding much value.  some fixes.  and add more tests\n\n* fix tests\n\n* code review changes and add HTTP health check status\n\n* fix test failure\n\n* refactor to split into a generic SupervisorStateManager and a specific SeekableStreamSupervisorStateManager\n\n* fixup after merge\n\n* code review changes - add additional docs\n\n* cleanup KafkaIndexTaskTest\n\n* add additional documentation for Kinesis indexing\n\n* remove unused throws class\n","date":"2019-06-01 08:16:01","modifiedFileCount":"32","status":"M","submitter":"Justin Borromeo"},{"authorTime":"2019-06-01 08:16:01","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":11,"curCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(), currentOffsets);\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions),\n                new KafkaDataSourceMetadata(\n                    new SeekableStreamEndSequenceNumbers<>(topic, checkpoint.getPartitionSequenceNumberMap())\n                )\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","date":"2019-07-07 00:33:12","endLine":820,"groupId":"2270","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeBasedIncrementalHandOff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c9/506d6ef203fbcd3e0ff362c5c0ee77be304a4d.src","preCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertTrue(checkpoint.getPartitionSequenceNumberMap().equals(currentOffsets));\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions),\n                new KafkaDataSourceMetadata(\n                    new SeekableStreamEndSequenceNumbers<>(topic, checkpoint.getPartitionSequenceNumberMap())\n                )\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":736,"status":"M"},{"authorDate":"2019-06-01 08:16:01","commitOrder":11,"curCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    insertData();\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","date":"2019-06-01 08:16:01","endLine":2329,"groupId":"9760","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCanStartFromLaterThanEarliestOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6c/42b3b85627bc30eb07613f0c2e7f18fca29a2b.src","preCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    insertData();\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2291,"status":"N"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2019-06-01 08:16:01","codes":[{"authorDate":"2019-07-25 08:35:46","commitOrder":12,"curCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(), currentOffsets);\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions),\n                new KafkaDataSourceMetadata(\n                    new SeekableStreamEndSequenceNumbers<>(topic, checkpoint.getPartitionSequenceNumberMap())\n                )\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(\"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(\"2009/P1D\", 0);\n    assertEqualsExceptVersion(ImmutableList.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors();\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(0)));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(1)));\n  }\n","date":"2019-07-25 08:35:46","endLine":847,"groupId":"2270","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeBasedIncrementalHandOff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/87/f522eae18ccef1c23a5fd9ae035dbbe3410dfc.src","preCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(), currentOffsets);\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions),\n                new KafkaDataSourceMetadata(\n                    new SeekableStreamEndSequenceNumbers<>(topic, checkpoint.getPartitionSequenceNumberMap())\n                )\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(task, \"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(task, \"2009/P1D\", 0);\n    Assert.assertEquals(ImmutableSet.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", desc1));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", desc2));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":762,"status":"M"},{"authorDate":"2019-06-01 08:16:01","commitOrder":12,"curCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    insertData();\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","date":"2019-06-01 08:16:01","endLine":2329,"groupId":"9760","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCanStartFromLaterThanEarliestOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6c/42b3b85627bc30eb07613f0c2e7f18fca29a2b.src","preCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    insertData();\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2291,"status":"N"}],"commitId":"db149462073d59e7563f0d3834e69d44a2bb4011","commitMessage":"@@@Add support minor compaction with segment locking (#7547)\n\n* Segment locking\n\n* Allow both timeChunk and segment lock in the same gruop\n\n* fix it test\n\n* Fix adding same chunk to atomicUpdateGroup\n\n* resolving todos\n\n* Fix segments to lock\n\n* fix segments to lock\n\n* fix kill task\n\n* resolving todos\n\n* resolving todos\n\n* fix teamcity\n\n* remove unused class\n\n* fix single map\n\n* resolving todos\n\n* fix build\n\n* fix SQLMetadataSegmentManager\n\n* fix findInputSegments\n\n* adding more tests\n\n* fixing task lock checks\n\n* add SegmentTransactionalOverwriteAction\n\n* changing publisher\n\n* fixing something\n\n* fix for perfect rollup\n\n* fix test\n\n* adjust package-lock.json\n\n* fix test\n\n* fix style\n\n* adding javadocs\n\n* remove unused classes\n\n* add more javadocs\n\n* unused import\n\n* fix test\n\n* fix test\n\n* Support forceTimeChunk context and force timeChunk lock for parallel index task if intervals are missing\n\n* fix travis\n\n* fix travis\n\n* unused import\n\n* spotbug\n\n* revert getMaxVersion\n\n* address comments\n\n* fix tc\n\n* add missing error handling\n\n* fix backward compatibility\n\n* unused import\n\n* Fix perf of versionedIntervalTimeline\n\n* fix timeline\n\n* fix tc\n\n* remove remaining todos\n\n* add comment for parallel index\n\n* fix javadoc and typos\n\n* typo\n\n* address comments\n","date":"2019-07-25 08:35:46","modifiedFileCount":"130","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-06-01 08:16:01","codes":[{"authorDate":"2019-08-22 01:58:22","commitOrder":13,"curCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(), currentOffsets);\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions)\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(\"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(\"2009/P1D\", 0);\n    assertEqualsExceptVersion(ImmutableList.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors();\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(0)));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(1)));\n  }\n","date":"2019-08-22 01:58:22","endLine":841,"groupId":"17791","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeBasedIncrementalHandOff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/14/55d2ab29c9b3d7854f443cccacf03a9f645d06.src","preCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(), currentOffsets);\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions),\n                new KafkaDataSourceMetadata(\n                    new SeekableStreamEndSequenceNumbers<>(topic, checkpoint.getPartitionSequenceNumberMap())\n                )\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(\"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(\"2009/P1D\", 0);\n    assertEqualsExceptVersion(ImmutableList.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors();\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(0)));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(1)));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":759,"status":"M"},{"authorDate":"2019-06-01 08:16:01","commitOrder":13,"curCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    insertData();\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","date":"2019-06-01 08:16:01","endLine":2329,"groupId":"9760","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testCanStartFromLaterThanEarliestOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6c/42b3b85627bc30eb07613f0c2e7f18fca29a2b.src","preCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    insertData();\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2291,"status":"N"}],"commitId":"22d6384d364a851fd2b5cecafea9d72b004cb03b","commitMessage":"@@@Fix unrealistic test variables in KafkaSupervisorTest and tidy up unused variable in checkpointing process (#7319)\n\n* Fix unrealistic test arguments in KafkaSupervisorTest\n\n* remove currentCheckpoint from checkpoint action\n\n* rename variable\n","date":"2019-08-22 01:58:22","modifiedFileCount":"12","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-06-01 08:16:01","codes":[{"authorDate":"2019-11-07 03:07:04","commitOrder":14,"curCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(), currentOffsets);\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions)\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    assertEqualsExceptVersion(\n        ImmutableList.of(\n            sdd(\"2008/P1D\", 0, ImmutableList.of(\"a\")),\n            sdd(\"2009/P1D\", 0, ImmutableList.of(\"b\"))\n        ),\n        publishedDescriptors()\n    );\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n  }\n","date":"2019-11-07 03:07:04","endLine":788,"groupId":"17791","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeBasedIncrementalHandOff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c8/35bb95038567e2b9b3112cb98971f6d2418766.src","preCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(), currentOffsets);\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions)\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    SegmentDescriptor desc1 = sd(\"2008/P1D\", 0);\n    SegmentDescriptor desc2 = sd(\"2009/P1D\", 0);\n    assertEqualsExceptVersion(ImmutableList.of(desc1, desc2), publishedDescriptors());\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n\n    \r\n    final List<SegmentDescriptor> publishedDescriptors = publishedDescriptors();\n    Assert.assertEquals(ImmutableList.of(\"a\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(0)));\n    Assert.assertEquals(ImmutableList.of(\"b\"), readSegmentColumn(\"dim1\", publishedDescriptors.get(1)));\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":707,"status":"M"},{"authorDate":"2019-06-01 08:16:01","commitOrder":14,"curCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    insertData();\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","date":"2019-06-01 08:16:01","endLine":2329,"groupId":"9760","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testCanStartFromLaterThanEarliestOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6c/42b3b85627bc30eb07613f0c2e7f18fca29a2b.src","preCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    insertData();\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2291,"status":"N"}],"commitId":"5c0fc0a13ab4d259b430bf50b322f631504c4529","commitMessage":"@@@Fix ambiguity about IndexerSQLMetadataStorageCoordinator.getUsedSegmentsForInterval() returning only non-overshadowed or all used segments (#8564)\n\n* IndexerSQLMetadataStorageCoordinator.getTimelineForIntervalsWithHandle() don't fetch abutting intervals; simplify getUsedSegmentsForIntervals()\n\n* Add VersionedIntervalTimeline.findNonOvershadowedObjectsInInterval() method; Propagate the decision about whether only visible segmetns or visible and overshadowed segments should be returned from IndexerMetadataStorageCoordinator's methods to the user logic; Rename SegmentListUsedAction to RetrieveUsedSegmentsAction.  SegmetnListUnusedAction to RetrieveUnusedSegmentsAction.  and UsedSegmentLister to UsedSegmentsRetriever\n\n* Fix tests\n\n* More fixes\n\n* Add javadoc notes about returning Collection instead of Set. Add JacksonUtils.readValue() to reduce boilerplate code\n\n* Fix KinesisIndexTaskTest.  factor out common parts from KinesisIndexTaskTest and KafkaIndexTaskTest into SeekableStreamIndexTaskTestBase\n\n* More test fixes\n\n* More test fixes\n\n* Add a comment to VersionedIntervalTimelineTestBase\n\n* Fix tests\n\n* Set DataSegment.size(0) in more tests\n\n* Specify DataSegment.size(0) in more places in tests\n\n* Fix more tests\n\n* Fix DruidSchemaTest\n\n* Set DataSegment's size in more tests and benchmarks\n\n* Fix HdfsDataSegmentPusherTest\n\n* Doc changes addressing comments\n\n* Extended doc for visibility\n\n* Typo\n\n* Typo 2\n\n* Address comment\n","date":"2019-11-07 03:07:04","modifiedFileCount":"88","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-11-21 06:51:25","codes":[{"authorDate":"2019-11-21 06:51:25","commitOrder":15,"curCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            INPUT_FORMAT\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(), currentOffsets);\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                NEW_DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions)\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    assertEqualsExceptVersion(\n        ImmutableList.of(\n            sdd(\"2008/P1D\", 0, ImmutableList.of(\"a\")),\n            sdd(\"2009/P1D\", 0, ImmutableList.of(\"b\"))\n        ),\n        publishedDescriptors()\n    );\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(NEW_DATA_SCHEMA.getDataSource())\n    );\n  }\n","date":"2019-11-21 06:51:25","endLine":841,"groupId":"7016","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeBasedIncrementalHandOff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/bde11469c6f5c09cd43b1c5d562e5b78e0f593.src","preCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(), currentOffsets);\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions)\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    assertEqualsExceptVersion(\n        ImmutableList.of(\n            sdd(\"2008/P1D\", 0, ImmutableList.of(\"a\")),\n            sdd(\"2009/P1D\", 0, ImmutableList.of(\"b\"))\n        ),\n        publishedDescriptors()\n    );\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource())\n    );\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":759,"status":"M"},{"authorDate":"2019-11-21 06:51:25","commitOrder":15,"curCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    insertData();\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            INPUT_FORMAT\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","date":"2019-11-21 06:51:25","endLine":2363,"groupId":"9760","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testCanStartFromLaterThanEarliestOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/bde11469c6f5c09cd43b1c5d562e5b78e0f593.src","preCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    insertData();\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2324,"status":"M"}],"commitId":"ac6d703814ccb5b258c586b63e0bc33d669e0f57","commitMessage":"@@@Support inputFormat and inputSource for sampler (#8901)\n\n* Support inputFormat and inputSource for sampler\n\n* Cleanup javadocs and names\n\n* fix style\n\n* fix timed shutoff input source reader\n\n* fix timed shutoff input source reader again\n\n* tidy up timed shutoff reader\n\n* unused imports\n\n* fix tc\n","date":"2019-11-21 06:51:25","modifiedFileCount":"66","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-11-21 06:51:25","codes":[{"authorDate":"2020-01-28 03:24:29","commitOrder":16,"curCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            INPUT_FORMAT\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(), currentOffsets);\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                NEW_DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions)\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    assertEqualsExceptVersion(\n        ImmutableList.of(\n            sdd(\"2008/P1D\", 0, ImmutableList.of(\"a\")),\n            sdd(\"2009/P1D\", 0, ImmutableList.of(\"b\"))\n        ),\n        publishedDescriptors()\n    );\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        newDataSchemaMetadata()\n    );\n  }\n","date":"2020-01-28 03:24:29","endLine":839,"groupId":"102513","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeBasedIncrementalHandOff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d4/468bd39e032386fe654402d0006ecea542747e.src","preCode":"  public void testTimeBasedIncrementalHandOff() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    \r\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    intermediateHandoffPeriod = new Period().withSeconds(0);\n\n    \r\n    insertData();\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 0L),\n        ImmutableSet.of()\n    );\n    \r\n    final SeekableStreamEndSequenceNumbers<Integer, Long> checkpoint = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 1L, 1, 0L)\n    );\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 2L, 1, 0L)\n    );\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            INPUT_FORMAT\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n\n    \r\n    while (task.getRunner().getStatus() != Status.PAUSED) {\n      Thread.sleep(10);\n    }\n    final Map<Integer, Long> currentOffsets = ImmutableMap.copyOf(task.getRunner().getCurrentOffsets());\n    Assert.assertEquals(checkpoint.getPartitionSequenceNumberMap(), currentOffsets);\n    task.getRunner().setEndOffsets(currentOffsets, false);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    Assert.assertEquals(1, checkpointRequestsHash.size());\n    Assert.assertTrue(\n        checkpointRequestsHash.contains(\n            Objects.hash(\n                NEW_DATA_SCHEMA.getDataSource(),\n                0,\n                new KafkaDataSourceMetadata(startPartitions)\n            )\n        )\n    );\n\n    \r\n    Assert.assertEquals(2, task.getRunner().getRowIngestionMeters().getProcessed());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getUnparseable());\n    Assert.assertEquals(0, task.getRunner().getRowIngestionMeters().getThrownAway());\n\n    \r\n    assertEqualsExceptVersion(\n        ImmutableList.of(\n            sdd(\"2008/P1D\", 0, ImmutableList.of(\"a\")),\n            sdd(\"2009/P1D\", 0, ImmutableList.of(\"b\"))\n        ),\n        publishedDescriptors()\n    );\n    Assert.assertEquals(\n        new KafkaDataSourceMetadata(\n            new SeekableStreamEndSequenceNumbers<>(topic, ImmutableMap.of(0, 2L, 1, 0L))\n        ),\n        metadataStorageCoordinator.getDataSourceMetadata(NEW_DATA_SCHEMA.getDataSource())\n    );\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":757,"status":"M"},{"authorDate":"2019-11-21 06:51:25","commitOrder":16,"curCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    insertData();\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            INPUT_FORMAT\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","date":"2019-11-21 06:51:25","endLine":2363,"groupId":"102513","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testCanStartFromLaterThanEarliestOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/bde11469c6f5c09cd43b1c5d562e5b78e0f593.src","preCode":"  public void testCanStartFromLaterThanEarliestOffset() throws Exception\n  {\n    final String baseSequenceName = \"sequence0\";\n    maxRowsPerSegment = Integer.MAX_VALUE;\n    maxTotalRows = null;\n\n    insertData();\n\n    Map<String, Object> consumerProps = kafkaServer.consumerProperties();\n    consumerProps.put(\"max.poll.records\", \"1\");\n\n    final SeekableStreamStartSequenceNumbers<Integer, Long> startPartitions = new SeekableStreamStartSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 0L, 1, 1L),\n        ImmutableSet.of()\n    );\n\n    final SeekableStreamEndSequenceNumbers<Integer, Long> endPartitions = new SeekableStreamEndSequenceNumbers<>(\n        topic,\n        ImmutableMap.of(0, 10L, 1, 2L)\n    );\n\n    final KafkaIndexTask task = createTask(\n        null,\n        new KafkaIndexTaskIOConfig(\n            0,\n            baseSequenceName,\n            startPartitions,\n            endPartitions,\n            consumerProps,\n            KafkaSupervisorIOConfig.DEFAULT_POLL_TIMEOUT_MILLIS,\n            true,\n            null,\n            null,\n            INPUT_FORMAT\n        )\n    );\n    final ListenableFuture<TaskStatus> future = runTask(task);\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2324,"status":"N"}],"commitId":"b9186f8f9ff2ff52aceda42bc5f24ffd47a7d17e","commitMessage":"@@@Reconcile terminology and method naming to 'used/unused segments'; Rename MetadataSegmentManager to MetadataSegmentsManager (#7306)\n\n* Reconcile terminology and method naming to 'used/unused segments'; Don't use terms 'enable/disable data source'; Rename MetadataSegmentManager to MetadataSegments; Make REST API methods which mark segments as used/unused to return server error instead of an empty response in case of error\n\n* Fix brace\n\n* Import order\n\n* Rename withKillDataSourceWhitelist to withSpecificDataSourcesToKill\n\n* Fix tests\n\n* Fix tests by adding proper methods without interval parameters to IndexerMetadataStorageCoordinator instead of hacking with Intervals.ETERNITY\n\n* More aligned names of DruidCoordinatorHelpers.  rename several CoordinatorDynamicConfig parameters\n\n* Rename ClientCompactTaskQuery to ClientCompactionTaskQuery for consistency with CompactionTask; ClientCompactQueryTuningConfig to ClientCompactionTaskQueryTuningConfig\n\n* More variable and method renames\n\n* Rename MetadataSegments to SegmentsMetadata\n\n* Javadoc update\n\n* Simplify SegmentsMetadata.getUnusedSegmentIntervals().  more javadocs\n\n* Update Javadoc of VersionedIntervalTimeline.iterateAllObjects()\n\n* Reorder imports\n\n* Rename SegmentsMetadata.tryMark... methods to mark... and make them to return boolean and the numbers of segments changed and relay exceptions to callers\n\n* Complete merge\n\n* Add CollectionUtils.newTreeSet(); Refactor DruidCoordinatorRuntimeParams creation in tests\n\n* Remove MetadataSegmentManager\n\n* Rename millisLagSinceCoordinatorBecomesLeaderBeforeCanMarkAsUnusedOvershadowedSegments to leadingTimeMillisBeforeCanMarkAsUnusedOvershadowedSegments\n\n* Fix tests.  refactor DruidCluster creation in tests into DruidClusterBuilder\n\n* Fix inspections\n\n* Fix SQLMetadataSegmentManagerEmptyTest and rename it to SqlSegmentsMetadataEmptyTest\n\n* Rename SegmentsAndMetadata to SegmentsAndCommitMetadata to reduce the similarity with SegmentsMetadata; Rename some methods\n\n* Rename DruidCoordinatorHelper to CoordinatorDuty.  refactor DruidCoordinator\n\n* Unused import\n\n* Optimize imports\n\n* Rename IndexerSQLMetadataStorageCoordinator.getDataSourceMetadata() to retrieveDataSourceMetadata()\n\n* Unused import\n\n* Update terminology in datasource-view.tsx\n\n* Fix label in datasource-view.spec.tsx.snap\n\n* Fix lint errors in datasource-view.tsx\n\n* Doc improvements\n\n* Another attempt to please TSLint\n\n* Another attempt to please TSLint\n\n* Style fixes\n\n* Fix IndexerSQLMetadataStorageCoordinator.createUsedSegmentsSqlQueryForIntervals() (wrong merge)\n\n* Try to fix docs build issue\n\n* Javadoc and spelling fixes\n\n* Rename SegmentsMetadata to SegmentsMetadataManager.  address other comments\n\n* Address more comments\n","date":"2020-01-28 03:24:29","modifiedFileCount":"127","status":"M","submitter":"Roman Leventov"}]
