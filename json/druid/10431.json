[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testBroadcastToMultipleDataSources()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(\n        ImmutableList.of(\"large_source\", \"large_source2\")\n    );\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegments(Lists.newArrayList(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     )).build(),\n        smallSegment\n    );\n\n    assertEquals(5L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    assertEquals(false, stats.hasPerTierStats());\n\n    assertTrue(\n        holdersOfLargeSegments.stream()\n                              .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    assertTrue(\n        holdersOfLargeSegments2.stream()\n                               .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    assertFalse(holderOfSmallSegment.getPeon().getSegmentsToLoad().contains(smallSegment));\n  }\n","date":"2018-08-31 00:56:26","endLine":294,"groupId":"12686","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBroadcastToMultipleDataSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/77/eaf1318e6705ab80602a36db7dc20245969c86.src","preCode":"  public void testBroadcastToMultipleDataSources()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(\n        ImmutableList.of(\"large_source\", \"large_source2\")\n    );\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegments(Lists.newArrayList(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     )).build(),\n        smallSegment\n    );\n\n    assertEquals(5L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    assertEquals(false, stats.hasPerTierStats());\n\n    assertTrue(\n        holdersOfLargeSegments.stream()\n                              .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    assertTrue(\n        holdersOfLargeSegments2.stream()\n                               .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    assertFalse(holderOfSmallSegment.getPeon().getSegmentsToLoad().contains(smallSegment));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/BroadcastDistributionRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testBroadcastToAllServers()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(null);\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegments(Lists.newArrayList(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     )).build(),\n        smallSegment\n    );\n\n    assertEquals(6L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    assertEquals(false, stats.hasPerTierStats());\n\n    assertTrue(\n        druidCluster.getAllServers().stream()\n                    .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":325,"groupId":"12686","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBroadcastToAllServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/77/eaf1318e6705ab80602a36db7dc20245969c86.src","preCode":"  public void testBroadcastToAllServers()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(null);\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegments(Lists.newArrayList(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     )).build(),\n        smallSegment\n    );\n\n    assertEquals(6L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    assertEquals(false, stats.hasPerTierStats());\n\n    assertTrue(\n        druidCluster.getAllServers().stream()\n                    .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/BroadcastDistributionRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-02-05 10:11:00","codes":[{"authorDate":"2019-02-05 10:11:00","commitOrder":2,"curCode":"  public void testBroadcastToMultipleDataSources()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(\n        ImmutableList.of(\"large_source\", \"large_source2\")\n    );\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegments(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     ).build(),\n        smallSegment\n    );\n\n    assertEquals(5L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    assertEquals(false, stats.hasPerTierStats());\n\n    assertTrue(\n        holdersOfLargeSegments.stream()\n                              .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    assertTrue(\n        holdersOfLargeSegments2.stream()\n                               .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    assertFalse(holderOfSmallSegment.getPeon().getSegmentsToLoad().contains(smallSegment));\n  }\n","date":"2019-02-05 10:11:00","endLine":394,"groupId":"12686","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBroadcastToMultipleDataSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/35/9fb6895ccec3cb8a0d82fa24e96f66c0f0e6a3.src","preCode":"  public void testBroadcastToMultipleDataSources()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(\n        ImmutableList.of(\"large_source\", \"large_source2\")\n    );\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegments(Lists.newArrayList(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     )).build(),\n        smallSegment\n    );\n\n    assertEquals(5L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    assertEquals(false, stats.hasPerTierStats());\n\n    assertTrue(\n        holdersOfLargeSegments.stream()\n                              .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    assertTrue(\n        holdersOfLargeSegments2.stream()\n                               .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    assertFalse(holderOfSmallSegment.getPeon().getSegmentsToLoad().contains(smallSegment));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/BroadcastDistributionRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"},{"authorDate":"2019-02-05 10:11:00","commitOrder":2,"curCode":"  public void testBroadcastToAllServers()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(null);\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegments(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     ).build(),\n        smallSegment\n    );\n\n    assertEquals(6L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    assertEquals(false, stats.hasPerTierStats());\n\n    assertTrue(\n        druidCluster.getAllServers().stream()\n                    .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n  }\n","date":"2019-02-05 10:11:00","endLine":425,"groupId":"12686","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBroadcastToAllServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/35/9fb6895ccec3cb8a0d82fa24e96f66c0f0e6a3.src","preCode":"  public void testBroadcastToAllServers()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(null);\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegments(Lists.newArrayList(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     )).build(),\n        smallSegment\n    );\n\n    assertEquals(6L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    assertEquals(false, stats.hasPerTierStats());\n\n    assertTrue(\n        druidCluster.getAllServers().stream()\n                    .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/BroadcastDistributionRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"M"}],"commitId":"97b6407983f597fc039bb90339b41086bbaaea56","commitMessage":"@@@maintenance mode for Historical (#6349)\n\n* maintenance mode for Historical\n\nforbidden api fix.  config deserialization fix\n\nlogging fix.  unit tests\n\n* addressed comments\n\n* addressed comments\n\n* a style fix\n\n* addressed comments\n\n* a unit-test fix due to recent code-refactoring\n\n* docs & refactoring\n\n* addressed comments\n\n* addressed a LoadRule drop flaw\n\n* post merge cleaning up\n","date":"2019-02-05 10:11:00","modifiedFileCount":"18","status":"M","submitter":"Egor Riashin"},{"authorTime":"2019-03-20 05:22:56","codes":[{"authorDate":"2019-03-20 05:22:56","commitOrder":3,"curCode":"  public void testBroadcastToMultipleDataSources()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(\n        ImmutableList.of(\"large_source\", \"large_source2\")\n    );\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegmentsInTest(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     ).build(),\n        smallSegment\n    );\n\n    assertEquals(5L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    assertEquals(false, stats.hasPerTierStats());\n\n    assertTrue(\n        holdersOfLargeSegments.stream()\n                              .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    assertTrue(\n        holdersOfLargeSegments2.stream()\n                               .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    assertFalse(holderOfSmallSegment.getPeon().getSegmentsToLoad().contains(smallSegment));\n  }\n","date":"2019-03-20 05:22:56","endLine":394,"groupId":"12686","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBroadcastToMultipleDataSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/b344792722bd0933dcfb56cac20f2afbabe059.src","preCode":"  public void testBroadcastToMultipleDataSources()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(\n        ImmutableList.of(\"large_source\", \"large_source2\")\n    );\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegments(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     ).build(),\n        smallSegment\n    );\n\n    assertEquals(5L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    assertEquals(false, stats.hasPerTierStats());\n\n    assertTrue(\n        holdersOfLargeSegments.stream()\n                              .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    assertTrue(\n        holdersOfLargeSegments2.stream()\n                               .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    assertFalse(holderOfSmallSegment.getPeon().getSegmentsToLoad().contains(smallSegment));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/BroadcastDistributionRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"},{"authorDate":"2019-03-20 05:22:56","commitOrder":3,"curCode":"  public void testBroadcastToAllServers()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(null);\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegmentsInTest(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     ).build(),\n        smallSegment\n    );\n\n    assertEquals(6L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    assertEquals(false, stats.hasPerTierStats());\n\n    assertTrue(\n        druidCluster.getAllServers().stream()\n                    .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n  }\n","date":"2019-03-20 05:22:56","endLine":425,"groupId":"12686","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBroadcastToAllServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/b344792722bd0933dcfb56cac20f2afbabe059.src","preCode":"  public void testBroadcastToAllServers()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(null);\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegments(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     ).build(),\n        smallSegment\n    );\n\n    assertEquals(6L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    assertEquals(false, stats.hasPerTierStats());\n\n    assertTrue(\n        druidCluster.getAllServers().stream()\n                    .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/BroadcastDistributionRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"M"}],"commitId":"dfd27e00c0559e89a77ad8abbae03eeb382c2d09","commitMessage":"@@@Avoid many unnecessary materializations of collections of 'all segments in cluster' cardinality (#7185)\n\n* Avoid many  unnecessary materializations of collections of 'all segments in cluster' cardinality\n\n* Fix DruidCoordinatorTest; Renamed DruidCoordinator.getReplicationStatus() to computeUnderReplicationCountsPerDataSourcePerTier()\n\n* More Javadocs.  typos.  refactor DruidCoordinatorRuntimeParams.createAvailableSegmentsSet()\n\n* Style\n\n* typo\n\n* Disable StaticPseudoFunctionalStyleMethod inspection because of too much false positives\n\n* Fixes\n","date":"2019-03-20 05:22:56","modifiedFileCount":"45","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-07-07 00:33:12","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":4,"curCode":"  public void testBroadcastToMultipleDataSources()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(\n        ImmutableList.of(\"large_source\", \"large_source2\")\n    );\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegmentsInTest(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     ).build(),\n        smallSegment\n    );\n\n    Assert.assertEquals(5L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    Assert.assertFalse(stats.hasPerTierStats());\n\n    Assert.assertTrue(\n        holdersOfLargeSegments.stream()\n                              .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    Assert.assertTrue(\n        holdersOfLargeSegments2.stream()\n                               .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    Assert.assertFalse(holderOfSmallSegment.getPeon().getSegmentsToLoad().contains(smallSegment));\n  }\n","date":"2019-07-07 00:33:12","endLine":391,"groupId":"7833","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testBroadcastToMultipleDataSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/43/1f6de19858a2328291183da63b821610e1a2c4.src","preCode":"  public void testBroadcastToMultipleDataSources()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(\n        ImmutableList.of(\"large_source\", \"large_source2\")\n    );\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegmentsInTest(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     ).build(),\n        smallSegment\n    );\n\n    assertEquals(5L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    assertEquals(false, stats.hasPerTierStats());\n\n    assertTrue(\n        holdersOfLargeSegments.stream()\n                              .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    assertTrue(\n        holdersOfLargeSegments2.stream()\n                               .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    assertFalse(holderOfSmallSegment.getPeon().getSegmentsToLoad().contains(smallSegment));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/BroadcastDistributionRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"},{"authorDate":"2019-07-07 00:33:12","commitOrder":4,"curCode":"  public void testBroadcastToAllServers()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(null);\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegmentsInTest(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     ).build(),\n        smallSegment\n    );\n\n    Assert.assertEquals(6L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    Assert.assertFalse(stats.hasPerTierStats());\n\n    Assert.assertTrue(\n        druidCluster.getAllServers().stream()\n                    .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n  }\n","date":"2019-07-07 00:33:12","endLine":422,"groupId":"7833","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBroadcastToAllServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/43/1f6de19858a2328291183da63b821610e1a2c4.src","preCode":"  public void testBroadcastToAllServers()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(null);\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegmentsInTest(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     ).build(),\n        smallSegment\n    );\n\n    assertEquals(6L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    assertEquals(false, stats.hasPerTierStats());\n\n    assertTrue(\n        druidCluster.getAllServers().stream()\n                    .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/BroadcastDistributionRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"M"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2019-07-17 22:18:48","codes":[{"authorDate":"2019-07-17 22:18:48","commitOrder":5,"curCode":"  public void testBroadcastToMultipleDataSources()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(\n        ImmutableList.of(\"large_source\", \"large_source2\")\n    );\n\n    CoordinatorStats stats = rule.run(\n        null,\n        makeCoordinartorRuntimeParams(\n            druidCluster,\n            smallSegment,\n            largeSegments.get(0),\n            largeSegments.get(1),\n            largeSegments.get(2),\n            largeSegments2.get(0),\n            largeSegments2.get(1)\n        ),\n        smallSegment\n    );\n\n    Assert.assertEquals(5L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    Assert.assertFalse(stats.hasPerTierStats());\n\n    Assert.assertTrue(\n        holdersOfLargeSegments.stream()\n                              .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    Assert.assertTrue(\n        holdersOfLargeSegments2.stream()\n                               .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    Assert.assertFalse(holderOfSmallSegment.getPeon().getSegmentsToLoad().contains(smallSegment));\n  }\n","date":"2019-07-17 22:18:48","endLine":390,"groupId":"561","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testBroadcastToMultipleDataSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cd/b5e416da8224fcf3970c55bc9515c0d098daf7.src","preCode":"  public void testBroadcastToMultipleDataSources()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(\n        ImmutableList.of(\"large_source\", \"large_source2\")\n    );\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegmentsInTest(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     ).build(),\n        smallSegment\n    );\n\n    Assert.assertEquals(5L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    Assert.assertFalse(stats.hasPerTierStats());\n\n    Assert.assertTrue(\n        holdersOfLargeSegments.stream()\n                              .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    Assert.assertTrue(\n        holdersOfLargeSegments2.stream()\n                               .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    Assert.assertFalse(holderOfSmallSegment.getPeon().getSegmentsToLoad().contains(smallSegment));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/BroadcastDistributionRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"M"},{"authorDate":"2019-07-17 22:18:48","commitOrder":5,"curCode":"  public void testBroadcastToAllServers()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(null);\n\n    CoordinatorStats stats = rule.run(\n        null,\n        makeCoordinartorRuntimeParams(\n            druidCluster,\n            smallSegment,\n            largeSegments.get(0),\n            largeSegments.get(1),\n            largeSegments.get(2),\n            largeSegments2.get(0),\n            largeSegments2.get(1)\n        ),\n        smallSegment\n    );\n\n    Assert.assertEquals(6L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    Assert.assertFalse(stats.hasPerTierStats());\n\n    Assert.assertTrue(\n        druidCluster.getAllServers().stream()\n                    .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n  }\n","date":"2019-07-17 22:18:48","endLine":418,"groupId":"561","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testBroadcastToAllServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cd/b5e416da8224fcf3970c55bc9515c0d098daf7.src","preCode":"  public void testBroadcastToAllServers()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(null);\n\n    CoordinatorStats stats = rule.run(\n        null,\n        DruidCoordinatorRuntimeParams.newBuilder()\n                                     .withDruidCluster(druidCluster)\n                                     .withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster))\n                                     .withBalancerReferenceTimestamp(DateTimes.of(\"2013-01-01\"))\n                                     .withAvailableSegmentsInTest(\n                                         smallSegment,\n                                         largeSegments.get(0),\n                                         largeSegments.get(1),\n                                         largeSegments.get(2),\n                                         largeSegments2.get(0),\n                                         largeSegments2.get(1)\n                                     ).build(),\n        smallSegment\n    );\n\n    Assert.assertEquals(6L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    Assert.assertFalse(stats.hasPerTierStats());\n\n    Assert.assertTrue(\n        druidCluster.getAllServers().stream()\n                    .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/BroadcastDistributionRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"M"}],"commitId":"ceb969903f06a72d669bb55ab83223bddb5355ee","commitMessage":"@@@Refactor SQLMetadataSegmentManager; Change contract of REST met? (#7653)\n\n* Refactor SQLMetadataSegmentManager; Change contract of REST methods in DataSourcesResource\n\n* Style fixes\n\n* Unused imports\n\n* Fix tests\n\n* Fix style\n\n* Comments\n\n* Comment fix\n\n* Remove unresolvable Javadoc references; address comments\n\n* Add comments to ImmutableDruidDataSource\n\n* Merge with master\n\n* Fix bad web-console merge\n\n* Fixes in api-reference.md\n\n* Rename in DruidCoordinatorRuntimeParams\n\n* Fix compilation\n\n* Residual changes\n","date":"2019-07-17 22:18:48","modifiedFileCount":"77","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-06-09 11:15:59","codes":[{"authorDate":"2020-06-09 11:15:59","commitOrder":6,"curCode":"  public void testBroadcastToMultipleDataSources()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(\n    );\n\n    CoordinatorStats stats = rule.run(\n        null,\n        makeCoordinartorRuntimeParams(\n            druidCluster,\n            smallSegment,\n            largeSegments.get(0),\n            largeSegments.get(1),\n            largeSegments.get(2),\n            largeSegments2.get(0),\n            largeSegments2.get(1)\n        ),\n        smallSegment\n    );\n\n    Assert.assertEquals(5L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    Assert.assertFalse(stats.hasPerTierStats());\n\n    Assert.assertTrue(\n        holdersOfLargeSegments.stream()\n                              .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    Assert.assertTrue(\n        holdersOfLargeSegments2.stream()\n                               .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    Assert.assertFalse(holderOfSmallSegment.getPeon().getSegmentsToLoad().contains(smallSegment));\n  }\n","date":"2020-06-09 11:15:59","endLine":388,"groupId":"10431","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testBroadcastToMultipleDataSources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c2/d4fd3d00044e0d3ee22900d4a7630ba8cb407f.src","preCode":"  public void testBroadcastToMultipleDataSources()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(\n        ImmutableList.of(\"large_source\", \"large_source2\")\n    );\n\n    CoordinatorStats stats = rule.run(\n        null,\n        makeCoordinartorRuntimeParams(\n            druidCluster,\n            smallSegment,\n            largeSegments.get(0),\n            largeSegments.get(1),\n            largeSegments.get(2),\n            largeSegments2.get(0),\n            largeSegments2.get(1)\n        ),\n        smallSegment\n    );\n\n    Assert.assertEquals(5L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    Assert.assertFalse(stats.hasPerTierStats());\n\n    Assert.assertTrue(\n        holdersOfLargeSegments.stream()\n                              .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    Assert.assertTrue(\n        holdersOfLargeSegments2.stream()\n                               .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n\n    Assert.assertFalse(holderOfSmallSegment.getPeon().getSegmentsToLoad().contains(smallSegment));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/BroadcastDistributionRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":355,"status":"M"},{"authorDate":"2020-06-09 11:15:59","commitOrder":6,"curCode":"  public void testBroadcastToAllServers()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule();\n\n    CoordinatorStats stats = rule.run(\n        null,\n        makeCoordinartorRuntimeParams(\n            druidCluster,\n            smallSegment,\n            largeSegments.get(0),\n            largeSegments.get(1),\n            largeSegments.get(2),\n            largeSegments2.get(0),\n            largeSegments2.get(1)\n        ),\n        smallSegment\n    );\n\n    Assert.assertEquals(5L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    Assert.assertFalse(stats.hasPerTierStats());\n\n    Assert.assertTrue(\n        druidCluster\n            .getAllServers()\n            .stream()\n            .allMatch(holder -> holder.isLoadingSegment(smallSegment) || holder.isServingSegment(smallSegment))\n    );\n  }\n","date":"2020-06-09 11:15:59","endLine":418,"groupId":"10431","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testBroadcastToAllServers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c2/d4fd3d00044e0d3ee22900d4a7630ba8cb407f.src","preCode":"  public void testBroadcastToAllServers()\n  {\n    final ForeverBroadcastDistributionRule rule = new ForeverBroadcastDistributionRule(null);\n\n    CoordinatorStats stats = rule.run(\n        null,\n        makeCoordinartorRuntimeParams(\n            druidCluster,\n            smallSegment,\n            largeSegments.get(0),\n            largeSegments.get(1),\n            largeSegments.get(2),\n            largeSegments2.get(0),\n            largeSegments2.get(1)\n        ),\n        smallSegment\n    );\n\n    Assert.assertEquals(6L, stats.getGlobalStat(LoadRule.ASSIGNED_COUNT));\n    Assert.assertFalse(stats.hasPerTierStats());\n\n    Assert.assertTrue(\n        druidCluster\n            .getAllServers()\n            .stream()\n            .allMatch(holder -> holder.getPeon().getSegmentsToLoad().contains(smallSegment))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/rules/BroadcastDistributionRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":391,"status":"M"}],"commitId":"771870ae2d312d643e6d98f3d0af8a9618af9681","commitMessage":"@@@Load broadcast datasources on broker and tasks (#9971)\n\n* Load broadcast datasources on broker and tasks\n\n* Add javadocs\n\n* Support HTTP segment management\n\n* Fix indexer maxSize\n\n* inspection fix\n\n* Make segment cache optional on non-historicals\n\n* Fix build\n\n* Fix inspections.  some coverage.  failed tests\n\n* More tests\n\n* Add CliIndexer to MainTest\n\n* Fix inspection\n\n* Rename UnprunedDataSegment to LoadableDataSegment\n\n* Address PR comments\n\n* Fix","date":"2020-06-09 11:15:59","modifiedFileCount":"52","status":"M","submitter":"Jonathan Wei"}]
