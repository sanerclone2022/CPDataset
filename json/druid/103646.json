[{"authorTime":"2020-03-25 06:09:02","codes":[{"authorDate":"2020-03-25 06:09:02","commitOrder":1,"curCode":"  public void testS3WithoutOverrideCredentialsIndexDataShouldFailed() throws Exception\n  {\n    try {\n      final Function<String, String> s3PropsTransform = spec -> {\n        try {\n          String inputSourceValue = jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%BUCKET%%\",\n              config.getCloudBucket()\n          );\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%PATH%%\",\n              config.getCloudPath()\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_TYPE%%\",\n              \"s3\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_KEY%%\",\n              INPUT_SOURCE_OBJECTS_KEY\n          );\n          return StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_VALUE%%\",\n              inputSourceValue\n          );\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n      final String fullDatasourceName = INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix();\n      final String taskSpec = s3PropsTransform.apply(\n          StringUtils.replace(\n              getResourceAsString(INDEX_TASK_WITHOUT_OVERRIDE),\n              \"%%DATASOURCE%%\",\n              fullDatasourceName\n          )\n      );\n      final String taskID = indexer.submitTask(taskSpec);\n      indexer.waitUntilTaskFails(taskID);\n      TaskStatusPlus taskStatusPlus = indexer.getTaskStatus(taskID);\n      \r\n      \r\n      \r\n      Assert.assertEquals(taskStatusPlus.getStatusCode(), TaskState.FAILED);\n      Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n      Assert.assertTrue(\n          taskStatusPlus.getErrorMsg().contains(\"com.amazonaws.services.s3.model.AmazonS3Exception\"),\n          \"Expect task to fail with AmazonS3Exception\");\n    }\n    finally {\n      \r\n      closeQuietly(unloader(INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix()));\n    }\n  }\n","date":"2020-03-25 06:09:02","endLine":199,"groupId":"15127","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testS3WithoutOverrideCredentialsIndexDataShouldFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ff/18b95f05b3e6cfae235f33e2bd8f4606ba98c5.src","preCode":"  public void testS3WithoutOverrideCredentialsIndexDataShouldFailed() throws Exception\n  {\n    try {\n      final Function<String, String> s3PropsTransform = spec -> {\n        try {\n          String inputSourceValue = jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%BUCKET%%\",\n              config.getCloudBucket()\n          );\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%PATH%%\",\n              config.getCloudPath()\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_TYPE%%\",\n              \"s3\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_KEY%%\",\n              INPUT_SOURCE_OBJECTS_KEY\n          );\n          return StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_VALUE%%\",\n              inputSourceValue\n          );\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n      final String fullDatasourceName = INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix();\n      final String taskSpec = s3PropsTransform.apply(\n          StringUtils.replace(\n              getResourceAsString(INDEX_TASK_WITHOUT_OVERRIDE),\n              \"%%DATASOURCE%%\",\n              fullDatasourceName\n          )\n      );\n      final String taskID = indexer.submitTask(taskSpec);\n      indexer.waitUntilTaskFails(taskID);\n      TaskStatusPlus taskStatusPlus = indexer.getTaskStatus(taskID);\n      \r\n      \r\n      \r\n      Assert.assertEquals(taskStatusPlus.getStatusCode(), TaskState.FAILED);\n      Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n      Assert.assertTrue(\n          taskStatusPlus.getErrorMsg().contains(\"com.amazonaws.services.s3.model.AmazonS3Exception\"),\n          \"Expect task to fail with AmazonS3Exception\");\n    }\n    finally {\n      \r\n      closeQuietly(unloader(INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix()));\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITS3OverrideCredentialsIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"},{"authorDate":"2020-03-25 06:09:02","commitOrder":1,"curCode":"  public void testS3WithInvalidOverrideCredentialsIndexDataShouldFailed() throws Exception\n  {\n    try {\n      final Function<String, String> s3PropsTransform = spec -> {\n        try {\n          String inputSourceValue = jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%BUCKET%%\",\n              config.getCloudBucket()\n          );\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%PATH%%\",\n              config.getCloudPath()\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%ACCESS_KEY_PROPERTY_VALUE%%\",\n              jsonMapper.writeValueAsString(\n                  ImmutableMap.of(\"type\", \"environment\", \"variable\", \"NON_EXISTENT_INVALID_ENV_VAR\")\n              )\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%SECRET_KEY_PROPERTY_VALUE%%\",\n              jsonMapper.writeValueAsString(\n                  ImmutableMap.of(\"type\", \"environment\", \"variable\", \"NON_EXISTENT_INVALID_ENV_VAR\")\n              )\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_TYPE%%\",\n              \"s3\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_KEY%%\",\n              INPUT_SOURCE_OBJECTS_KEY\n          );\n          return StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_VALUE%%\",\n              inputSourceValue\n          );\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      final String fullDatasourceName = INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix();\n      final String taskSpec = s3PropsTransform.apply(\n          StringUtils.replace(\n              getResourceAsString(INDEX_TASK_WITH_OVERRIDE),\n              \"%%DATASOURCE%%\",\n              fullDatasourceName\n          )\n      );\n      final String taskID = indexer.submitTask(taskSpec);\n      indexer.waitUntilTaskFails(taskID);\n      TaskStatusPlus taskStatusPlus = indexer.getTaskStatus(taskID);\n      \r\n      Assert.assertEquals(taskStatusPlus.getStatusCode(), TaskState.FAILED);\n      Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n      Assert.assertTrue(\n          taskStatusPlus.getErrorMsg().contains(\"IllegalArgumentException: Access key cannot be null\"),\n          \"Expect task to fail with IllegalArgumentException: Access key cannot be null\");\n    }\n    finally {\n      \r\n      closeQuietly(unloader(INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix()));\n    }\n  }\n","date":"2020-03-25 06:09:02","endLine":277,"groupId":"15127","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testS3WithInvalidOverrideCredentialsIndexDataShouldFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ff/18b95f05b3e6cfae235f33e2bd8f4606ba98c5.src","preCode":"  public void testS3WithInvalidOverrideCredentialsIndexDataShouldFailed() throws Exception\n  {\n    try {\n      final Function<String, String> s3PropsTransform = spec -> {\n        try {\n          String inputSourceValue = jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%BUCKET%%\",\n              config.getCloudBucket()\n          );\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%PATH%%\",\n              config.getCloudPath()\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%ACCESS_KEY_PROPERTY_VALUE%%\",\n              jsonMapper.writeValueAsString(\n                  ImmutableMap.of(\"type\", \"environment\", \"variable\", \"NON_EXISTENT_INVALID_ENV_VAR\")\n              )\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%SECRET_KEY_PROPERTY_VALUE%%\",\n              jsonMapper.writeValueAsString(\n                  ImmutableMap.of(\"type\", \"environment\", \"variable\", \"NON_EXISTENT_INVALID_ENV_VAR\")\n              )\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_TYPE%%\",\n              \"s3\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_KEY%%\",\n              INPUT_SOURCE_OBJECTS_KEY\n          );\n          return StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_VALUE%%\",\n              inputSourceValue\n          );\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      final String fullDatasourceName = INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix();\n      final String taskSpec = s3PropsTransform.apply(\n          StringUtils.replace(\n              getResourceAsString(INDEX_TASK_WITH_OVERRIDE),\n              \"%%DATASOURCE%%\",\n              fullDatasourceName\n          )\n      );\n      final String taskID = indexer.submitTask(taskSpec);\n      indexer.waitUntilTaskFails(taskID);\n      TaskStatusPlus taskStatusPlus = indexer.getTaskStatus(taskID);\n      \r\n      Assert.assertEquals(taskStatusPlus.getStatusCode(), TaskState.FAILED);\n      Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n      Assert.assertTrue(\n          taskStatusPlus.getErrorMsg().contains(\"IllegalArgumentException: Access key cannot be null\"),\n          \"Expect task to fail with IllegalArgumentException: Access key cannot be null\");\n    }\n    finally {\n      \r\n      closeQuietly(unloader(INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix()));\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITS3OverrideCredentialsIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"B"}],"commitId":"3f521943fc4b5eaa445f060948cc141636bf33ca","commitMessage":"@@@S3 ingestion spec should not uses the default credentials provider chain when environment value password provider is misconfigured. (#9552)\n\n* fix s3 optional cred\n\n* S3 ingestion spec uses the default credentials provider chain when environment value password provider is misconfigured.\n\n* fix failing test","date":"2020-03-25 06:09:02","modifiedFileCount":"9","status":"B","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-04-14 04:03:56","codes":[{"authorDate":"2020-04-14 04:03:56","commitOrder":2,"curCode":"  public void testS3WithoutOverrideCredentialsIndexDataShouldFailed() throws Exception\n  {\n    final String indexDatasource = \"wikipedia_index_test_\" + UUID.randomUUID();\n    try {\n      final Function<String, String> s3PropsTransform = spec -> {\n        try {\n          String inputSourceValue = jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%BUCKET%%\",\n              config.getCloudBucket()\n          );\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%PATH%%\",\n              config.getCloudPath()\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_TYPE%%\",\n              \"s3\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_KEY%%\",\n              INPUT_SOURCE_OBJECTS_KEY\n          );\n          return StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_VALUE%%\",\n              inputSourceValue\n          );\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n      final String fullDatasourceName = indexDatasource + config.getExtraDatasourceNameSuffix();\n      final String taskSpec = s3PropsTransform.apply(\n          StringUtils.replace(\n              getResourceAsString(INDEX_TASK_WITHOUT_OVERRIDE),\n              \"%%DATASOURCE%%\",\n              fullDatasourceName\n          )\n      );\n      final String taskID = indexer.submitTask(taskSpec);\n      indexer.waitUntilTaskFails(taskID);\n      TaskStatusPlus taskStatusPlus = indexer.getTaskStatus(taskID);\n      \r\n      \r\n      \r\n      Assert.assertEquals(taskStatusPlus.getStatusCode(), TaskState.FAILED);\n      Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n      Assert.assertTrue(\n          taskStatusPlus.getErrorMsg().contains(\"com.amazonaws.services.s3.model.AmazonS3Exception\"),\n          \"Expect task to fail with AmazonS3Exception\");\n    }\n    finally {\n      \r\n      closeQuietly(unloader(indexDatasource + config.getExtraDatasourceNameSuffix()));\n    }\n  }\n","date":"2020-04-14 04:03:56","endLine":200,"groupId":"15127","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testS3WithoutOverrideCredentialsIndexDataShouldFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ec/949f17fed30b93e6f536d3789654d44dafc6cd.src","preCode":"  public void testS3WithoutOverrideCredentialsIndexDataShouldFailed() throws Exception\n  {\n    try {\n      final Function<String, String> s3PropsTransform = spec -> {\n        try {\n          String inputSourceValue = jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%BUCKET%%\",\n              config.getCloudBucket()\n          );\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%PATH%%\",\n              config.getCloudPath()\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_TYPE%%\",\n              \"s3\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_KEY%%\",\n              INPUT_SOURCE_OBJECTS_KEY\n          );\n          return StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_VALUE%%\",\n              inputSourceValue\n          );\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n      final String fullDatasourceName = INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix();\n      final String taskSpec = s3PropsTransform.apply(\n          StringUtils.replace(\n              getResourceAsString(INDEX_TASK_WITHOUT_OVERRIDE),\n              \"%%DATASOURCE%%\",\n              fullDatasourceName\n          )\n      );\n      final String taskID = indexer.submitTask(taskSpec);\n      indexer.waitUntilTaskFails(taskID);\n      TaskStatusPlus taskStatusPlus = indexer.getTaskStatus(taskID);\n      \r\n      \r\n      \r\n      Assert.assertEquals(taskStatusPlus.getStatusCode(), TaskState.FAILED);\n      Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n      Assert.assertTrue(\n          taskStatusPlus.getErrorMsg().contains(\"com.amazonaws.services.s3.model.AmazonS3Exception\"),\n          \"Expect task to fail with AmazonS3Exception\");\n    }\n    finally {\n      \r\n      closeQuietly(unloader(INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix()));\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITS3OverrideCredentialsIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2020-04-14 04:03:56","commitOrder":2,"curCode":"  public void testS3WithInvalidOverrideCredentialsIndexDataShouldFailed() throws Exception\n  {\n    final String indexDatasource = \"wikipedia_index_test_\" + UUID.randomUUID();\n    try {\n      final Function<String, String> s3PropsTransform = spec -> {\n        try {\n          String inputSourceValue = jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%BUCKET%%\",\n              config.getCloudBucket()\n          );\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%PATH%%\",\n              config.getCloudPath()\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%ACCESS_KEY_PROPERTY_VALUE%%\",\n              jsonMapper.writeValueAsString(\n                  ImmutableMap.of(\"type\", \"environment\", \"variable\", \"NON_EXISTENT_INVALID_ENV_VAR\")\n              )\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%SECRET_KEY_PROPERTY_VALUE%%\",\n              jsonMapper.writeValueAsString(\n                  ImmutableMap.of(\"type\", \"environment\", \"variable\", \"NON_EXISTENT_INVALID_ENV_VAR\")\n              )\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_TYPE%%\",\n              \"s3\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_KEY%%\",\n              INPUT_SOURCE_OBJECTS_KEY\n          );\n          return StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_VALUE%%\",\n              inputSourceValue\n          );\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      final String fullDatasourceName = indexDatasource + config.getExtraDatasourceNameSuffix();\n      final String taskSpec = s3PropsTransform.apply(\n          StringUtils.replace(\n              getResourceAsString(INDEX_TASK_WITH_OVERRIDE),\n              \"%%DATASOURCE%%\",\n              fullDatasourceName\n          )\n      );\n      final String taskID = indexer.submitTask(taskSpec);\n      indexer.waitUntilTaskFails(taskID);\n      TaskStatusPlus taskStatusPlus = indexer.getTaskStatus(taskID);\n      \r\n      Assert.assertEquals(taskStatusPlus.getStatusCode(), TaskState.FAILED);\n      Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n      Assert.assertTrue(\n          taskStatusPlus.getErrorMsg().contains(\"IllegalArgumentException: Access key cannot be null\"),\n          \"Expect task to fail with IllegalArgumentException: Access key cannot be null\");\n    }\n    finally {\n      \r\n      closeQuietly(unloader(indexDatasource + config.getExtraDatasourceNameSuffix()));\n    }\n  }\n","date":"2020-04-14 04:03:56","endLine":279,"groupId":"15127","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testS3WithInvalidOverrideCredentialsIndexDataShouldFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ec/949f17fed30b93e6f536d3789654d44dafc6cd.src","preCode":"  public void testS3WithInvalidOverrideCredentialsIndexDataShouldFailed() throws Exception\n  {\n    try {\n      final Function<String, String> s3PropsTransform = spec -> {\n        try {\n          String inputSourceValue = jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%BUCKET%%\",\n              config.getCloudBucket()\n          );\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%PATH%%\",\n              config.getCloudPath()\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%ACCESS_KEY_PROPERTY_VALUE%%\",\n              jsonMapper.writeValueAsString(\n                  ImmutableMap.of(\"type\", \"environment\", \"variable\", \"NON_EXISTENT_INVALID_ENV_VAR\")\n              )\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%SECRET_KEY_PROPERTY_VALUE%%\",\n              jsonMapper.writeValueAsString(\n                  ImmutableMap.of(\"type\", \"environment\", \"variable\", \"NON_EXISTENT_INVALID_ENV_VAR\")\n              )\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_TYPE%%\",\n              \"s3\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_KEY%%\",\n              INPUT_SOURCE_OBJECTS_KEY\n          );\n          return StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_VALUE%%\",\n              inputSourceValue\n          );\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      final String fullDatasourceName = INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix();\n      final String taskSpec = s3PropsTransform.apply(\n          StringUtils.replace(\n              getResourceAsString(INDEX_TASK_WITH_OVERRIDE),\n              \"%%DATASOURCE%%\",\n              fullDatasourceName\n          )\n      );\n      final String taskID = indexer.submitTask(taskSpec);\n      indexer.waitUntilTaskFails(taskID);\n      TaskStatusPlus taskStatusPlus = indexer.getTaskStatus(taskID);\n      \r\n      Assert.assertEquals(taskStatusPlus.getStatusCode(), TaskState.FAILED);\n      Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n      Assert.assertTrue(\n          taskStatusPlus.getErrorMsg().contains(\"IllegalArgumentException: Access key cannot be null\"),\n          \"Expect task to fail with IllegalArgumentException: Access key cannot be null\");\n    }\n    finally {\n      \r\n      closeQuietly(unloader(INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix()));\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITS3OverrideCredentialsIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"d930f04e6ae598f1461560c8a1fff55c6d740372","commitMessage":"@@@Test file format extensions for inputSource (orc.  parquet) (#9632)\n\n* Test file format extensions for inputSource (orc.  parquet)\n\n* Test file format extensions for inputSource (orc.  parquet)\n\n* fix path\n\n* resolve merge conflict\n\n* fix typo","date":"2020-04-14 04:03:56","modifiedFileCount":"16","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-07-23 11:09:09","codes":[{"authorDate":"2020-04-14 04:03:56","commitOrder":3,"curCode":"  public void testS3WithoutOverrideCredentialsIndexDataShouldFailed() throws Exception\n  {\n    final String indexDatasource = \"wikipedia_index_test_\" + UUID.randomUUID();\n    try {\n      final Function<String, String> s3PropsTransform = spec -> {\n        try {\n          String inputSourceValue = jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%BUCKET%%\",\n              config.getCloudBucket()\n          );\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%PATH%%\",\n              config.getCloudPath()\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_TYPE%%\",\n              \"s3\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_KEY%%\",\n              INPUT_SOURCE_OBJECTS_KEY\n          );\n          return StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_VALUE%%\",\n              inputSourceValue\n          );\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n      final String fullDatasourceName = indexDatasource + config.getExtraDatasourceNameSuffix();\n      final String taskSpec = s3PropsTransform.apply(\n          StringUtils.replace(\n              getResourceAsString(INDEX_TASK_WITHOUT_OVERRIDE),\n              \"%%DATASOURCE%%\",\n              fullDatasourceName\n          )\n      );\n      final String taskID = indexer.submitTask(taskSpec);\n      indexer.waitUntilTaskFails(taskID);\n      TaskStatusPlus taskStatusPlus = indexer.getTaskStatus(taskID);\n      \r\n      \r\n      \r\n      Assert.assertEquals(taskStatusPlus.getStatusCode(), TaskState.FAILED);\n      Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n      Assert.assertTrue(\n          taskStatusPlus.getErrorMsg().contains(\"com.amazonaws.services.s3.model.AmazonS3Exception\"),\n          \"Expect task to fail with AmazonS3Exception\");\n    }\n    finally {\n      \r\n      closeQuietly(unloader(indexDatasource + config.getExtraDatasourceNameSuffix()));\n    }\n  }\n","date":"2020-04-14 04:03:56","endLine":200,"groupId":"103646","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testS3WithoutOverrideCredentialsIndexDataShouldFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ec/949f17fed30b93e6f536d3789654d44dafc6cd.src","preCode":"  public void testS3WithoutOverrideCredentialsIndexDataShouldFailed() throws Exception\n  {\n    final String indexDatasource = \"wikipedia_index_test_\" + UUID.randomUUID();\n    try {\n      final Function<String, String> s3PropsTransform = spec -> {\n        try {\n          String inputSourceValue = jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%BUCKET%%\",\n              config.getCloudBucket()\n          );\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%PATH%%\",\n              config.getCloudPath()\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_TYPE%%\",\n              \"s3\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_KEY%%\",\n              INPUT_SOURCE_OBJECTS_KEY\n          );\n          return StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_VALUE%%\",\n              inputSourceValue\n          );\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n      final String fullDatasourceName = indexDatasource + config.getExtraDatasourceNameSuffix();\n      final String taskSpec = s3PropsTransform.apply(\n          StringUtils.replace(\n              getResourceAsString(INDEX_TASK_WITHOUT_OVERRIDE),\n              \"%%DATASOURCE%%\",\n              fullDatasourceName\n          )\n      );\n      final String taskID = indexer.submitTask(taskSpec);\n      indexer.waitUntilTaskFails(taskID);\n      TaskStatusPlus taskStatusPlus = indexer.getTaskStatus(taskID);\n      \r\n      \r\n      \r\n      Assert.assertEquals(taskStatusPlus.getStatusCode(), TaskState.FAILED);\n      Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n      Assert.assertTrue(\n          taskStatusPlus.getErrorMsg().contains(\"com.amazonaws.services.s3.model.AmazonS3Exception\"),\n          \"Expect task to fail with AmazonS3Exception\");\n    }\n    finally {\n      \r\n      closeQuietly(unloader(indexDatasource + config.getExtraDatasourceNameSuffix()));\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITS3OverrideCredentialsIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"},{"authorDate":"2021-07-23 11:09:09","commitOrder":3,"curCode":"  public void testS3WithInvalidOverrideCredentialsIndexDataShouldFailed() throws Exception\n  {\n    final String indexDatasource = \"wikipedia_index_test_\" + UUID.randomUUID();\n    try {\n      final Function<String, String> s3PropsTransform = spec -> {\n        try {\n          String inputSourceValue = jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%BUCKET%%\",\n              config.getCloudBucket()\n          );\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%PATH%%\",\n              config.getCloudPath()\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_CONFIG%%\",\n              jsonMapper.writeValueAsString(\n                  ImmutableMap.of(\n                      \"accessKeyId\", ImmutableMap.of(\"type\", \"environment\", \"variable\", \"INVALID_ACCESS_KEY\"),\n                      \"secretAccessKey\", ImmutableMap.of(\"type\", \"environment\", \"variable\", \"INVALID_SECRET_KEY\")\n                  )\n              )\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_TYPE%%\",\n              \"s3\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_KEY%%\",\n              INPUT_SOURCE_OBJECTS_KEY\n          );\n          return StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_VALUE%%\",\n              inputSourceValue\n          );\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      final String fullDatasourceName = indexDatasource + config.getExtraDatasourceNameSuffix();\n      final String taskSpec = s3PropsTransform.apply(\n          StringUtils.replace(\n              getResourceAsString(INDEX_TASK_WITH_OVERRIDE),\n              \"%%DATASOURCE%%\",\n              fullDatasourceName\n          )\n      );\n      final String taskID = indexer.submitTask(taskSpec);\n      indexer.waitUntilTaskFails(taskID);\n      TaskStatusPlus taskStatusPlus = indexer.getTaskStatus(taskID);\n      \r\n      Assert.assertEquals(taskStatusPlus.getStatusCode(), TaskState.FAILED);\n      Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n      Assert.assertTrue(\n          taskStatusPlus.getErrorMsg().contains(\"IllegalArgumentException: Access key cannot be null\"),\n          \"Expect task to fail with IllegalArgumentException: Access key cannot be null\");\n    }\n    finally {\n      \r\n      closeQuietly(unloader(indexDatasource + config.getExtraDatasourceNameSuffix()));\n    }\n  }\n","date":"2021-07-23 11:09:09","endLine":269,"groupId":"103646","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testS3WithInvalidOverrideCredentialsIndexDataShouldFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f2/561d67d0dc92bb26ec07615072a7ad73c81e4b.src","preCode":"  public void testS3WithInvalidOverrideCredentialsIndexDataShouldFailed() throws Exception\n  {\n    final String indexDatasource = \"wikipedia_index_test_\" + UUID.randomUUID();\n    try {\n      final Function<String, String> s3PropsTransform = spec -> {\n        try {\n          String inputSourceValue = jsonMapper.writeValueAsString(INPUT_SOURCE_OBJECTS_VALUE);\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%BUCKET%%\",\n              config.getCloudBucket()\n          );\n          inputSourceValue = StringUtils.replace(\n              inputSourceValue,\n              \"%%PATH%%\",\n              config.getCloudPath()\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%ACCESS_KEY_PROPERTY_VALUE%%\",\n              jsonMapper.writeValueAsString(\n                  ImmutableMap.of(\"type\", \"environment\", \"variable\", \"NON_EXISTENT_INVALID_ENV_VAR\")\n              )\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%SECRET_KEY_PROPERTY_VALUE%%\",\n              jsonMapper.writeValueAsString(\n                  ImmutableMap.of(\"type\", \"environment\", \"variable\", \"NON_EXISTENT_INVALID_ENV_VAR\")\n              )\n          );\n\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_TYPE%%\",\n              \"s3\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_KEY%%\",\n              INPUT_SOURCE_OBJECTS_KEY\n          );\n          return StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_PROPERTY_VALUE%%\",\n              inputSourceValue\n          );\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      final String fullDatasourceName = indexDatasource + config.getExtraDatasourceNameSuffix();\n      final String taskSpec = s3PropsTransform.apply(\n          StringUtils.replace(\n              getResourceAsString(INDEX_TASK_WITH_OVERRIDE),\n              \"%%DATASOURCE%%\",\n              fullDatasourceName\n          )\n      );\n      final String taskID = indexer.submitTask(taskSpec);\n      indexer.waitUntilTaskFails(taskID);\n      TaskStatusPlus taskStatusPlus = indexer.getTaskStatus(taskID);\n      \r\n      Assert.assertEquals(taskStatusPlus.getStatusCode(), TaskState.FAILED);\n      Assert.assertNotNull(taskStatusPlus.getErrorMsg());\n      Assert.assertTrue(\n          taskStatusPlus.getErrorMsg().contains(\"IllegalArgumentException: Access key cannot be null\"),\n          \"Expect task to fail with IllegalArgumentException: Access key cannot be null\");\n    }\n    finally {\n      \r\n      closeQuietly(unloader(indexDatasource + config.getExtraDatasourceNameSuffix()));\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITS3OverrideCredentialsIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"161f4dbc0ef5d429d8f16b43e0baf8efbacf5d13","commitMessage":"@@@Add integration tests for S3 Assume Role ingestion feature (#11472)\n\n* add IT for S3 assume role\n\n* fix checkstyle\n\n* fix test\n\n* fix pom\n\n* fix test","date":"2021-07-23 11:09:09","modifiedFileCount":"4","status":"M","submitter":"Maytas Monsereenusorn"}]
