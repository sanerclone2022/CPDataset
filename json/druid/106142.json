[{"authorTime":"2021-03-05 02:39:21","codes":[{"authorDate":"2021-03-05 02:39:21","commitOrder":1,"curCode":"  public void test_makeCursors_factToCountryRightWithBaseFilter()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.RIGHT));\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        null,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            Filters.or(Arrays.asList(\n                new SelectorDimFilter(\"countryIsoCode\", \"CA\", null).toFilter(),\n                new SelectorDimFilter(\"countryIsoCode\", \"MatchNothing\", null).toFilter()\n            )),\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Didier Leclair\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{null, null, \"AU\", \"Australia\", 0L},\n            new Object[]{null, null, \"CL\", \"Chile\", 2L},\n            new Object[]{null, null, \"DE\", \"Germany\", 3L},\n            new Object[]{null, null, \"EC\", \"Ecuador\", 4L},\n            new Object[]{null, null, \"FR\", \"France\", 5L},\n            new Object[]{null, null, \"GB\", \"United Kingdom\", 6L},\n            new Object[]{null, null, \"IT\", \"Italy\", 7L},\n            new Object[]{null, null, \"JP\", \"Japan\", 8L},\n            new Object[]{null, null, \"KR\", \"Republic of Korea\", 9L},\n            new Object[]{null, null, \"MX\", \"Mexico\", 10L},\n            new Object[]{null, null, \"NO\", \"Norway\", 11L},\n            new Object[]{null, null, \"SV\", \"El Salvador\", 12L},\n            new Object[]{null, null, \"US\", \"United States\", 13L},\n            new Object[]{null, null, \"AX\", \"Atlantis\", 14L},\n            new Object[]{null, null, \"SU\", \"States United\", 15L},\n            new Object[]{null, null, \"USCA\", \"Usca\", 16L},\n            new Object[]{null, null, \"MMMM\", \"Fourems\", 205L}\n        )\n    );\n  }\n","date":"2021-03-05 02:39:21","endLine":2164,"groupId":"9485","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryRightWithBaseFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/e6426551e3d7be02b381484a9b6c4aeda8385c.src","preCode":"  public void test_makeCursors_factToCountryRightWithBaseFilter()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.RIGHT));\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        null,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            Filters.or(Arrays.asList(\n                new SelectorDimFilter(\"countryIsoCode\", \"CA\", null).toFilter(),\n                new SelectorDimFilter(\"countryIsoCode\", \"MatchNothing\", null).toFilter()\n            )),\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Didier Leclair\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{null, null, \"AU\", \"Australia\", 0L},\n            new Object[]{null, null, \"CL\", \"Chile\", 2L},\n            new Object[]{null, null, \"DE\", \"Germany\", 3L},\n            new Object[]{null, null, \"EC\", \"Ecuador\", 4L},\n            new Object[]{null, null, \"FR\", \"France\", 5L},\n            new Object[]{null, null, \"GB\", \"United Kingdom\", 6L},\n            new Object[]{null, null, \"IT\", \"Italy\", 7L},\n            new Object[]{null, null, \"JP\", \"Japan\", 8L},\n            new Object[]{null, null, \"KR\", \"Republic of Korea\", 9L},\n            new Object[]{null, null, \"MX\", \"Mexico\", 10L},\n            new Object[]{null, null, \"NO\", \"Norway\", 11L},\n            new Object[]{null, null, \"SV\", \"El Salvador\", 12L},\n            new Object[]{null, null, \"US\", \"United States\", 13L},\n            new Object[]{null, null, \"AX\", \"Atlantis\", 14L},\n            new Object[]{null, null, \"SU\", \"States United\", 15L},\n            new Object[]{null, null, \"USCA\", \"Usca\", 16L},\n            new Object[]{null, null, \"MMMM\", \"Fourems\", 205L}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2109,"status":"B"},{"authorDate":"2021-03-05 02:39:21","commitOrder":1,"curCode":"  public void test_makeCursors_factToCountryFullWithBaseFilter()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.FULL));\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        null,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            Filters.or(Arrays.asList(\n                new SelectorDimFilter(\"countryIsoCode\", \"CA\", null).toFilter(),\n                new SelectorDimFilter(\"countryIsoCode\", \"MatchNothing\", null).toFilter()\n            )),\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Didier Leclair\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Orange Soda\", \"MatchNothing\", null, null, NullHandling.sqlCompatible() ? null : 0L},\n            new Object[]{null, null, \"AU\", \"Australia\", 0L},\n            new Object[]{null, null, \"CL\", \"Chile\", 2L},\n            new Object[]{null, null, \"DE\", \"Germany\", 3L},\n            new Object[]{null, null, \"EC\", \"Ecuador\", 4L},\n            new Object[]{null, null, \"FR\", \"France\", 5L},\n            new Object[]{null, null, \"GB\", \"United Kingdom\", 6L},\n            new Object[]{null, null, \"IT\", \"Italy\", 7L},\n            new Object[]{null, null, \"JP\", \"Japan\", 8L},\n            new Object[]{null, null, \"KR\", \"Republic of Korea\", 9L},\n            new Object[]{null, null, \"MX\", \"Mexico\", 10L},\n            new Object[]{null, null, \"NO\", \"Norway\", 11L},\n            new Object[]{null, null, \"SV\", \"El Salvador\", 12L},\n            new Object[]{null, null, \"US\", \"United States\", 13L},\n            new Object[]{null, null, \"AX\", \"Atlantis\", 14L},\n            new Object[]{null, null, \"SU\", \"States United\", 15L},\n            new Object[]{null, null, \"USCA\", \"Usca\", 16L},\n            new Object[]{null, null, \"MMMM\", \"Fourems\", 205L}\n        )\n    );\n  }\n","date":"2021-03-05 02:39:21","endLine":2223,"groupId":"9485","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryFullWithBaseFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/e6426551e3d7be02b381484a9b6c4aeda8385c.src","preCode":"  public void test_makeCursors_factToCountryFullWithBaseFilter()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.FULL));\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        null,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            Filters.or(Arrays.asList(\n                new SelectorDimFilter(\"countryIsoCode\", \"CA\", null).toFilter(),\n                new SelectorDimFilter(\"countryIsoCode\", \"MatchNothing\", null).toFilter()\n            )),\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Didier Leclair\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Orange Soda\", \"MatchNothing\", null, null, NullHandling.sqlCompatible() ? null : 0L},\n            new Object[]{null, null, \"AU\", \"Australia\", 0L},\n            new Object[]{null, null, \"CL\", \"Chile\", 2L},\n            new Object[]{null, null, \"DE\", \"Germany\", 3L},\n            new Object[]{null, null, \"EC\", \"Ecuador\", 4L},\n            new Object[]{null, null, \"FR\", \"France\", 5L},\n            new Object[]{null, null, \"GB\", \"United Kingdom\", 6L},\n            new Object[]{null, null, \"IT\", \"Italy\", 7L},\n            new Object[]{null, null, \"JP\", \"Japan\", 8L},\n            new Object[]{null, null, \"KR\", \"Republic of Korea\", 9L},\n            new Object[]{null, null, \"MX\", \"Mexico\", 10L},\n            new Object[]{null, null, \"NO\", \"Norway\", 11L},\n            new Object[]{null, null, \"SV\", \"El Salvador\", 12L},\n            new Object[]{null, null, \"US\", \"United States\", 13L},\n            new Object[]{null, null, \"AX\", \"Atlantis\", 14L},\n            new Object[]{null, null, \"SU\", \"States United\", 15L},\n            new Object[]{null, null, \"USCA\", \"Usca\", 16L},\n            new Object[]{null, null, \"MMMM\", \"Fourems\", 205L}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2167,"status":"B"}],"commitId":"1a15987432fab044fc83a99af8ab497d887aeda1","commitMessage":"@@@Supporting filters in the left base table for join datasources (#10697)\n\n* where filter left first draft\n\n* Revert changes in calcite test\n\n* Refactor a bit\n\n* Fixing the Tests\n\n* Changes\n\n* Adding tests\n\n* Add tests for correlated queries\n\n* Add comment\n\n* Fix typos","date":"2021-03-05 02:39:21","modifiedFileCount":"26","status":"B","submitter":"Abhishek Agarwal"},{"authorTime":"2021-04-15 01:49:27","codes":[{"authorDate":"2021-04-15 01:49:27","commitOrder":2,"curCode":"  public void test_makeCursors_factToCountryRightWithBaseFilter()\n  {\n    final Filter baseFilter = Filters.or(Arrays.asList(\n        new SelectorDimFilter(\"countryIsoCode\", \"CA\", null).toFilter(),\n        new SelectorDimFilter(\"countryIsoCode\", \"MatchNothing\", null).toFilter()\n    ));\n\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.RIGHT));\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        baseFilter,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            baseFilter,\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Didier Leclair\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{null, null, \"AU\", \"Australia\", 0L},\n            new Object[]{null, null, \"CL\", \"Chile\", 2L},\n            new Object[]{null, null, \"DE\", \"Germany\", 3L},\n            new Object[]{null, null, \"EC\", \"Ecuador\", 4L},\n            new Object[]{null, null, \"FR\", \"France\", 5L},\n            new Object[]{null, null, \"GB\", \"United Kingdom\", 6L},\n            new Object[]{null, null, \"IT\", \"Italy\", 7L},\n            new Object[]{null, null, \"JP\", \"Japan\", 8L},\n            new Object[]{null, null, \"KR\", \"Republic of Korea\", 9L},\n            new Object[]{null, null, \"MX\", \"Mexico\", 10L},\n            new Object[]{null, null, \"NO\", \"Norway\", 11L},\n            new Object[]{null, null, \"SV\", \"El Salvador\", 12L},\n            new Object[]{null, null, \"US\", \"United States\", 13L},\n            new Object[]{null, null, \"AX\", \"Atlantis\", 14L},\n            new Object[]{null, null, \"SU\", \"States United\", 15L},\n            new Object[]{null, null, \"USCA\", \"Usca\", 16L},\n            new Object[]{null, null, \"MMMM\", \"Fourems\", 205L}\n        )\n    );\n  }\n","date":"2021-04-15 01:49:27","endLine":2170,"groupId":"106142","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryRightWithBaseFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/10/d048305f8160fd6487525dd3a1ab83d1ead4ad.src","preCode":"  public void test_makeCursors_factToCountryRightWithBaseFilter()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.RIGHT));\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        null,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            Filters.or(Arrays.asList(\n                new SelectorDimFilter(\"countryIsoCode\", \"CA\", null).toFilter(),\n                new SelectorDimFilter(\"countryIsoCode\", \"MatchNothing\", null).toFilter()\n            )),\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Didier Leclair\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{null, null, \"AU\", \"Australia\", 0L},\n            new Object[]{null, null, \"CL\", \"Chile\", 2L},\n            new Object[]{null, null, \"DE\", \"Germany\", 3L},\n            new Object[]{null, null, \"EC\", \"Ecuador\", 4L},\n            new Object[]{null, null, \"FR\", \"France\", 5L},\n            new Object[]{null, null, \"GB\", \"United Kingdom\", 6L},\n            new Object[]{null, null, \"IT\", \"Italy\", 7L},\n            new Object[]{null, null, \"JP\", \"Japan\", 8L},\n            new Object[]{null, null, \"KR\", \"Republic of Korea\", 9L},\n            new Object[]{null, null, \"MX\", \"Mexico\", 10L},\n            new Object[]{null, null, \"NO\", \"Norway\", 11L},\n            new Object[]{null, null, \"SV\", \"El Salvador\", 12L},\n            new Object[]{null, null, \"US\", \"United States\", 13L},\n            new Object[]{null, null, \"AX\", \"Atlantis\", 14L},\n            new Object[]{null, null, \"SU\", \"States United\", 15L},\n            new Object[]{null, null, \"USCA\", \"Usca\", 16L},\n            new Object[]{null, null, \"MMMM\", \"Fourems\", 205L}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2113,"status":"M"},{"authorDate":"2021-04-15 01:49:27","commitOrder":2,"curCode":"  public void test_makeCursors_factToCountryFullWithBaseFilter()\n  {\n    final Filter baseFilter = Filters.or(Arrays.asList(\n        new SelectorDimFilter(\"countryIsoCode\", \"CA\", null).toFilter(),\n        new SelectorDimFilter(\"countryIsoCode\", \"MatchNothing\", null).toFilter()\n    ));\n\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.FULL));\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        baseFilter,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            baseFilter,\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Didier Leclair\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Orange Soda\", \"MatchNothing\", null, null, NullHandling.sqlCompatible() ? null : 0L},\n            new Object[]{null, null, \"AU\", \"Australia\", 0L},\n            new Object[]{null, null, \"CL\", \"Chile\", 2L},\n            new Object[]{null, null, \"DE\", \"Germany\", 3L},\n            new Object[]{null, null, \"EC\", \"Ecuador\", 4L},\n            new Object[]{null, null, \"FR\", \"France\", 5L},\n            new Object[]{null, null, \"GB\", \"United Kingdom\", 6L},\n            new Object[]{null, null, \"IT\", \"Italy\", 7L},\n            new Object[]{null, null, \"JP\", \"Japan\", 8L},\n            new Object[]{null, null, \"KR\", \"Republic of Korea\", 9L},\n            new Object[]{null, null, \"MX\", \"Mexico\", 10L},\n            new Object[]{null, null, \"NO\", \"Norway\", 11L},\n            new Object[]{null, null, \"SV\", \"El Salvador\", 12L},\n            new Object[]{null, null, \"US\", \"United States\", 13L},\n            new Object[]{null, null, \"AX\", \"Atlantis\", 14L},\n            new Object[]{null, null, \"SU\", \"States United\", 15L},\n            new Object[]{null, null, \"USCA\", \"Usca\", 16L},\n            new Object[]{null, null, \"MMMM\", \"Fourems\", 205L}\n        )\n    );\n  }\n","date":"2021-04-15 01:49:27","endLine":2231,"groupId":"106142","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryFullWithBaseFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/10/d048305f8160fd6487525dd3a1ab83d1ead4ad.src","preCode":"  public void test_makeCursors_factToCountryFullWithBaseFilter()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.FULL));\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        null,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            Filters.or(Arrays.asList(\n                new SelectorDimFilter(\"countryIsoCode\", \"CA\", null).toFilter(),\n                new SelectorDimFilter(\"countryIsoCode\", \"MatchNothing\", null).toFilter()\n            )),\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Didier Leclair\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"Orange Soda\", \"MatchNothing\", null, null, NullHandling.sqlCompatible() ? null : 0L},\n            new Object[]{null, null, \"AU\", \"Australia\", 0L},\n            new Object[]{null, null, \"CL\", \"Chile\", 2L},\n            new Object[]{null, null, \"DE\", \"Germany\", 3L},\n            new Object[]{null, null, \"EC\", \"Ecuador\", 4L},\n            new Object[]{null, null, \"FR\", \"France\", 5L},\n            new Object[]{null, null, \"GB\", \"United Kingdom\", 6L},\n            new Object[]{null, null, \"IT\", \"Italy\", 7L},\n            new Object[]{null, null, \"JP\", \"Japan\", 8L},\n            new Object[]{null, null, \"KR\", \"Republic of Korea\", 9L},\n            new Object[]{null, null, \"MX\", \"Mexico\", 10L},\n            new Object[]{null, null, \"NO\", \"Norway\", 11L},\n            new Object[]{null, null, \"SV\", \"El Salvador\", 12L},\n            new Object[]{null, null, \"US\", \"United States\", 13L},\n            new Object[]{null, null, \"AX\", \"Atlantis\", 14L},\n            new Object[]{null, null, \"SU\", \"States United\", 15L},\n            new Object[]{null, null, \"USCA\", \"Usca\", 16L},\n            new Object[]{null, null, \"MMMM\", \"Fourems\", 205L}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2173,"status":"M"}],"commitId":"202c78c8f32bd3ec5e70e021b1494d878f38d678","commitMessage":"@@@Enable rewriting certain inner joins as filters. (#11068)\n\n* Enable rewriting certain inner joins as filters.\n\nThe main logic for doing the rewrite is in JoinableFactoryWrapper's\nsegmentMapFn method. The requirements are:\n\n- It must be an inner equi-join.\n- The right-hand columns referenced by the condition must not contain any\n  duplicate values. (If they did.  the inner join would not be guaranteed\n  to return at most one row for each left-hand-side row.)\n- No columns from the right-hand side can be used by anything other than\n  the join condition itself.\n\nHashJoinSegmentStorageAdapter is also modified to pass through to\nthe base adapter (even allowing vectorization!) in the case where 100%\nof join clauses could be rewritten as filters.\n\nIn support of this goal:\n\n- Add Query getRequiredColumns() method to help us figure out whether\n  the right-hand side of a join datasource is being used or not.\n- Add JoinConditionAnalysis getRequiredColumns() method to help us\n  figure out if the right-hand side of a join is being used by later\n  join clauses acting on the same base.\n- Add Joinable getNonNullColumnValuesIfAllUnique method to enable\n  retrieving the set of values that will form the \"in\" filter.\n- Add LookupExtractor canGetKeySet() and keySet() methods to support\n  LookupJoinable in its efforts to implement the new Joinable method.\n- Add \"enableRewriteJoinToFilter\" feature flag to\n  JoinFilterRewriteConfig. The default is disabled.\n\n* Test improvements.\n\n* Test fixes.\n\n* Avoid slow size() call.\n\n* Remove invalid test.\n\n* Fix style.\n\n* Fix mistaken default.\n\n* Small fixes.\n\n* Fix logic error.","date":"2021-04-15 01:49:27","modifiedFileCount":"38","status":"M","submitter":"Gian Merlino"}]
