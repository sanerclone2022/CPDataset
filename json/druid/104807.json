[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    \r\n    final TaskLock myLock = Iterables.getOnlyElement(getTaskLocks(toolbox.getTaskActionClient()));\n\n    if (!myLock.getDataSource().equals(getDataSource())) {\n      throw new ISE(\"WTF?! Lock dataSource[%s] != task dataSource[%s]\", myLock.getDataSource(), getDataSource());\n    }\n\n    if (!myLock.getInterval().equals(getInterval())) {\n      throw new ISE(\"WTF?! Lock interval[%s] != task interval[%s]\", myLock.getInterval(), getInterval());\n    }\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new SegmentListUnusedAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getIdentifier(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to move segment: %s\", unusedSegment.getIdentifier());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment movedSegment = toolbox.getDataSegmentMover().move(segment, targetLoadSpec);\n      toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(movedSegment)));\n    }\n\n    return TaskStatus.success(getId());\n  }\n","date":"2018-08-31 00:56:26","endLine":112,"groupId":"12637","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"(TaskToolboxtoolbox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cc/b1dc07253bc3be8de2fafed265f62715cce019.src","preCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    \r\n    final TaskLock myLock = Iterables.getOnlyElement(getTaskLocks(toolbox.getTaskActionClient()));\n\n    if (!myLock.getDataSource().equals(getDataSource())) {\n      throw new ISE(\"WTF?! Lock dataSource[%s] != task dataSource[%s]\", myLock.getDataSource(), getDataSource());\n    }\n\n    if (!myLock.getInterval().equals(getInterval())) {\n      throw new ISE(\"WTF?! Lock interval[%s] != task interval[%s]\", myLock.getInterval(), getInterval());\n    }\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new SegmentListUnusedAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getIdentifier(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to move segment: %s\", unusedSegment.getIdentifier());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment movedSegment = toolbox.getDataSegmentMover().move(segment, targetLoadSpec);\n      toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(movedSegment)));\n    }\n\n    return TaskStatus.success(getId());\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/MoveTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    \r\n    final TaskLock myLock = Iterables.getOnlyElement(getTaskLocks(toolbox.getTaskActionClient()));\n\n    if (!myLock.getDataSource().equals(getDataSource())) {\n      throw new ISE(\"WTF?! Lock dataSource[%s] != task dataSource[%s]\", myLock.getDataSource(), getDataSource());\n    }\n\n    if (!myLock.getInterval().equals(getInterval())) {\n      throw new ISE(\"WTF?! Lock interval[%s] != task interval[%s]\", myLock.getInterval(), getInterval());\n    }\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new SegmentListUnusedAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getIdentifier(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to archive segment: %s\", unusedSegment.getIdentifier());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment archivedSegment = toolbox.getDataSegmentArchiver().archive(segment);\n      if (archivedSegment != null) {\n        toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(archivedSegment)));\n      } else {\n        log.info(\"No action was taken for [%s]\", segment);\n      }\n    }\n\n    return TaskStatus.success(getId());\n  }\n","date":"2018-08-31 00:56:26","endLine":107,"groupId":"12637","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"(TaskToolboxtoolbox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/11/96c7fa4847768765b42297f00a2a2bff111688.src","preCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    \r\n    final TaskLock myLock = Iterables.getOnlyElement(getTaskLocks(toolbox.getTaskActionClient()));\n\n    if (!myLock.getDataSource().equals(getDataSource())) {\n      throw new ISE(\"WTF?! Lock dataSource[%s] != task dataSource[%s]\", myLock.getDataSource(), getDataSource());\n    }\n\n    if (!myLock.getInterval().equals(getInterval())) {\n      throw new ISE(\"WTF?! Lock interval[%s] != task interval[%s]\", myLock.getInterval(), getInterval());\n    }\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new SegmentListUnusedAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getIdentifier(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to archive segment: %s\", unusedSegment.getIdentifier());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment archivedSegment = toolbox.getDataSegmentArchiver().archive(segment);\n      if (archivedSegment != null) {\n        toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(archivedSegment)));\n      } else {\n        log.info(\"No action was taken for [%s]\", segment);\n      }\n    }\n\n    return TaskStatus.success(getId());\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/ArchiveTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    \r\n    final TaskLock myLock = Iterables.getOnlyElement(getTaskLocks(toolbox.getTaskActionClient()));\n\n    if (!myLock.getDataSource().equals(getDataSource())) {\n      throw new ISE(\"WTF?! Lock dataSource[%s] != task dataSource[%s]\", myLock.getDataSource(), getDataSource());\n    }\n\n    if (!myLock.getInterval().equals(getInterval())) {\n      throw new ISE(\"WTF?! Lock interval[%s] != task interval[%s]\", myLock.getInterval(), getInterval());\n    }\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new SegmentListUnusedAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to move segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment movedSegment = toolbox.getDataSegmentMover().move(segment, targetLoadSpec);\n      toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(movedSegment)));\n    }\n\n    return TaskStatus.success(getId());\n  }\n","date":"2019-01-22 03:11:10","endLine":111,"groupId":"17985","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"(TaskToolboxtoolbox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6b/daef816c1ab0ddc3f5a2028746674e5f71e744.src","preCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    \r\n    final TaskLock myLock = Iterables.getOnlyElement(getTaskLocks(toolbox.getTaskActionClient()));\n\n    if (!myLock.getDataSource().equals(getDataSource())) {\n      throw new ISE(\"WTF?! Lock dataSource[%s] != task dataSource[%s]\", myLock.getDataSource(), getDataSource());\n    }\n\n    if (!myLock.getInterval().equals(getInterval())) {\n      throw new ISE(\"WTF?! Lock interval[%s] != task interval[%s]\", myLock.getInterval(), getInterval());\n    }\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new SegmentListUnusedAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getIdentifier(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to move segment: %s\", unusedSegment.getIdentifier());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment movedSegment = toolbox.getDataSegmentMover().move(segment, targetLoadSpec);\n      toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(movedSegment)));\n    }\n\n    return TaskStatus.success(getId());\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/MoveTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    \r\n    final TaskLock myLock = Iterables.getOnlyElement(getTaskLocks(toolbox.getTaskActionClient()));\n\n    if (!myLock.getDataSource().equals(getDataSource())) {\n      throw new ISE(\"WTF?! Lock dataSource[%s] != task dataSource[%s]\", myLock.getDataSource(), getDataSource());\n    }\n\n    if (!myLock.getInterval().equals(getInterval())) {\n      throw new ISE(\"WTF?! Lock interval[%s] != task interval[%s]\", myLock.getInterval(), getInterval());\n    }\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new SegmentListUnusedAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to archive segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment archivedSegment = toolbox.getDataSegmentArchiver().archive(segment);\n      if (archivedSegment != null) {\n        toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(archivedSegment)));\n      } else {\n        log.info(\"No action was taken for [%s]\", segment);\n      }\n    }\n\n    return TaskStatus.success(getId());\n  }\n","date":"2019-01-22 03:11:10","endLine":107,"groupId":"17985","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"(TaskToolboxtoolbox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/01/d2448a88dbc09042f0cf3f52eb75c089f53128.src","preCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    \r\n    final TaskLock myLock = Iterables.getOnlyElement(getTaskLocks(toolbox.getTaskActionClient()));\n\n    if (!myLock.getDataSource().equals(getDataSource())) {\n      throw new ISE(\"WTF?! Lock dataSource[%s] != task dataSource[%s]\", myLock.getDataSource(), getDataSource());\n    }\n\n    if (!myLock.getInterval().equals(getInterval())) {\n      throw new ISE(\"WTF?! Lock interval[%s] != task interval[%s]\", myLock.getInterval(), getInterval());\n    }\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new SegmentListUnusedAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getIdentifier(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to archive segment: %s\", unusedSegment.getIdentifier());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment archivedSegment = toolbox.getDataSegmentArchiver().archive(segment);\n      if (archivedSegment != null) {\n        toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(archivedSegment)));\n      } else {\n        log.info(\"No action was taken for [%s]\", segment);\n      }\n    }\n\n    return TaskStatus.success(getId());\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/ArchiveTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-11-07 03:07:04","codes":[{"authorDate":"2019-11-07 03:07:04","commitOrder":3,"curCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    \r\n    final TaskLock myLock = Iterables.getOnlyElement(getTaskLocks(toolbox.getTaskActionClient()));\n\n    if (!myLock.getDataSource().equals(getDataSource())) {\n      throw new ISE(\"WTF?! Lock dataSource[%s] != task dataSource[%s]\", myLock.getDataSource(), getDataSource());\n    }\n\n    if (!myLock.getInterval().equals(getInterval())) {\n      throw new ISE(\"WTF?! Lock interval[%s] != task interval[%s]\", myLock.getInterval(), getInterval());\n    }\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new RetrieveUnusedSegmentsAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to move segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment movedSegment = toolbox.getDataSegmentMover().move(segment, targetLoadSpec);\n      toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(movedSegment)));\n    }\n\n    return TaskStatus.success(getId());\n  }\n","date":"2019-11-07 03:07:04","endLine":111,"groupId":"17985","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"(TaskToolboxtoolbox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/04/7ec343c9aeb0e7e962e8416c53b256bff915f5.src","preCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    \r\n    final TaskLock myLock = Iterables.getOnlyElement(getTaskLocks(toolbox.getTaskActionClient()));\n\n    if (!myLock.getDataSource().equals(getDataSource())) {\n      throw new ISE(\"WTF?! Lock dataSource[%s] != task dataSource[%s]\", myLock.getDataSource(), getDataSource());\n    }\n\n    if (!myLock.getInterval().equals(getInterval())) {\n      throw new ISE(\"WTF?! Lock interval[%s] != task interval[%s]\", myLock.getInterval(), getInterval());\n    }\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new SegmentListUnusedAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to move segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment movedSegment = toolbox.getDataSegmentMover().move(segment, targetLoadSpec);\n      toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(movedSegment)));\n    }\n\n    return TaskStatus.success(getId());\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/MoveTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2019-11-07 03:07:04","commitOrder":3,"curCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    \r\n    final TaskLock myLock = Iterables.getOnlyElement(getTaskLocks(toolbox.getTaskActionClient()));\n\n    if (!myLock.getDataSource().equals(getDataSource())) {\n      throw new ISE(\"WTF?! Lock dataSource[%s] != task dataSource[%s]\", myLock.getDataSource(), getDataSource());\n    }\n\n    if (!myLock.getInterval().equals(getInterval())) {\n      throw new ISE(\"WTF?! Lock interval[%s] != task interval[%s]\", myLock.getInterval(), getInterval());\n    }\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new RetrieveUnusedSegmentsAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to archive segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment archivedSegment = toolbox.getDataSegmentArchiver().archive(segment);\n      if (archivedSegment != null) {\n        toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(archivedSegment)));\n      } else {\n        log.info(\"No action was taken for [%s]\", segment);\n      }\n    }\n\n    return TaskStatus.success(getId());\n  }\n","date":"2019-11-07 03:07:04","endLine":107,"groupId":"17985","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"(TaskToolboxtoolbox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a5/3e63106d73e5e593ec8b0b47fa7058f1e2d0e5.src","preCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    \r\n    final TaskLock myLock = Iterables.getOnlyElement(getTaskLocks(toolbox.getTaskActionClient()));\n\n    if (!myLock.getDataSource().equals(getDataSource())) {\n      throw new ISE(\"WTF?! Lock dataSource[%s] != task dataSource[%s]\", myLock.getDataSource(), getDataSource());\n    }\n\n    if (!myLock.getInterval().equals(getInterval())) {\n      throw new ISE(\"WTF?! Lock interval[%s] != task interval[%s]\", myLock.getInterval(), getInterval());\n    }\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new SegmentListUnusedAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to archive segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment archivedSegment = toolbox.getDataSegmentArchiver().archive(segment);\n      if (archivedSegment != null) {\n        toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(archivedSegment)));\n      } else {\n        log.info(\"No action was taken for [%s]\", segment);\n      }\n    }\n\n    return TaskStatus.success(getId());\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/ArchiveTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"5c0fc0a13ab4d259b430bf50b322f631504c4529","commitMessage":"@@@Fix ambiguity about IndexerSQLMetadataStorageCoordinator.getUsedSegmentsForInterval() returning only non-overshadowed or all used segments (#8564)\n\n* IndexerSQLMetadataStorageCoordinator.getTimelineForIntervalsWithHandle() don't fetch abutting intervals; simplify getUsedSegmentsForIntervals()\n\n* Add VersionedIntervalTimeline.findNonOvershadowedObjectsInInterval() method; Propagate the decision about whether only visible segmetns or visible and overshadowed segments should be returned from IndexerMetadataStorageCoordinator's methods to the user logic; Rename SegmentListUsedAction to RetrieveUsedSegmentsAction.  SegmetnListUnusedAction to RetrieveUnusedSegmentsAction.  and UsedSegmentLister to UsedSegmentsRetriever\n\n* Fix tests\n\n* More fixes\n\n* Add javadoc notes about returning Collection instead of Set. Add JacksonUtils.readValue() to reduce boilerplate code\n\n* Fix KinesisIndexTaskTest.  factor out common parts from KinesisIndexTaskTest and KafkaIndexTaskTest into SeekableStreamIndexTaskTestBase\n\n* More test fixes\n\n* More test fixes\n\n* Add a comment to VersionedIntervalTimelineTestBase\n\n* Fix tests\n\n* Set DataSegment.size(0) in more tests\n\n* Specify DataSegment.size(0) in more places in tests\n\n* Fix more tests\n\n* Fix DruidSchemaTest\n\n* Set DataSegment's size in more tests and benchmarks\n\n* Fix HdfsDataSegmentPusherTest\n\n* Doc changes addressing comments\n\n* Extended doc for visibility\n\n* Typo\n\n* Typo 2\n\n* Address comment\n","date":"2019-11-07 03:07:04","modifiedFileCount":"88","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-01-28 03:24:29","codes":[{"authorDate":"2020-01-28 03:24:29","commitOrder":4,"curCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    final TaskLock myLock = getAndCheckLock(toolbox);\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new RetrieveUnusedSegmentsAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to move segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment movedSegment = toolbox.getDataSegmentMover().move(segment, targetLoadSpec);\n      toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(movedSegment)));\n    }\n\n    return TaskStatus.success(getId());\n  }\n","date":"2020-01-28 03:24:29","endLine":101,"groupId":"17985","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"(TaskToolboxtoolbox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4a/0b3ac7a38680460534b075d9cfc9e4b4d5a23e.src","preCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    \r\n    final TaskLock myLock = Iterables.getOnlyElement(getTaskLocks(toolbox.getTaskActionClient()));\n\n    if (!myLock.getDataSource().equals(getDataSource())) {\n      throw new ISE(\"WTF?! Lock dataSource[%s] != task dataSource[%s]\", myLock.getDataSource(), getDataSource());\n    }\n\n    if (!myLock.getInterval().equals(getInterval())) {\n      throw new ISE(\"WTF?! Lock interval[%s] != task interval[%s]\", myLock.getInterval(), getInterval());\n    }\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new RetrieveUnusedSegmentsAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to move segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment movedSegment = toolbox.getDataSegmentMover().move(segment, targetLoadSpec);\n      toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(movedSegment)));\n    }\n\n    return TaskStatus.success(getId());\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/MoveTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-01-28 03:24:29","commitOrder":4,"curCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    final TaskLock myLock = getAndCheckLock(toolbox);\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new RetrieveUnusedSegmentsAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to archive segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment archivedSegment = toolbox.getDataSegmentArchiver().archive(segment);\n      if (archivedSegment != null) {\n        toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(archivedSegment)));\n      } else {\n        log.info(\"No action was taken for [%s]\", segment);\n      }\n    }\n\n    return TaskStatus.success(getId());\n  }\n","date":"2020-01-28 03:24:29","endLine":97,"groupId":"17985","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"(TaskToolboxtoolbox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/97/79989a2d1e339f6a93f7955936f2b0272c7719.src","preCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    \r\n    final TaskLock myLock = Iterables.getOnlyElement(getTaskLocks(toolbox.getTaskActionClient()));\n\n    if (!myLock.getDataSource().equals(getDataSource())) {\n      throw new ISE(\"WTF?! Lock dataSource[%s] != task dataSource[%s]\", myLock.getDataSource(), getDataSource());\n    }\n\n    if (!myLock.getInterval().equals(getInterval())) {\n      throw new ISE(\"WTF?! Lock interval[%s] != task interval[%s]\", myLock.getInterval(), getInterval());\n    }\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new RetrieveUnusedSegmentsAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to archive segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment archivedSegment = toolbox.getDataSegmentArchiver().archive(segment);\n      if (archivedSegment != null) {\n        toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(archivedSegment)));\n      } else {\n        log.info(\"No action was taken for [%s]\", segment);\n      }\n    }\n\n    return TaskStatus.success(getId());\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/ArchiveTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"b9186f8f9ff2ff52aceda42bc5f24ffd47a7d17e","commitMessage":"@@@Reconcile terminology and method naming to 'used/unused segments'; Rename MetadataSegmentManager to MetadataSegmentsManager (#7306)\n\n* Reconcile terminology and method naming to 'used/unused segments'; Don't use terms 'enable/disable data source'; Rename MetadataSegmentManager to MetadataSegments; Make REST API methods which mark segments as used/unused to return server error instead of an empty response in case of error\n\n* Fix brace\n\n* Import order\n\n* Rename withKillDataSourceWhitelist to withSpecificDataSourcesToKill\n\n* Fix tests\n\n* Fix tests by adding proper methods without interval parameters to IndexerMetadataStorageCoordinator instead of hacking with Intervals.ETERNITY\n\n* More aligned names of DruidCoordinatorHelpers.  rename several CoordinatorDynamicConfig parameters\n\n* Rename ClientCompactTaskQuery to ClientCompactionTaskQuery for consistency with CompactionTask; ClientCompactQueryTuningConfig to ClientCompactionTaskQueryTuningConfig\n\n* More variable and method renames\n\n* Rename MetadataSegments to SegmentsMetadata\n\n* Javadoc update\n\n* Simplify SegmentsMetadata.getUnusedSegmentIntervals().  more javadocs\n\n* Update Javadoc of VersionedIntervalTimeline.iterateAllObjects()\n\n* Reorder imports\n\n* Rename SegmentsMetadata.tryMark... methods to mark... and make them to return boolean and the numbers of segments changed and relay exceptions to callers\n\n* Complete merge\n\n* Add CollectionUtils.newTreeSet(); Refactor DruidCoordinatorRuntimeParams creation in tests\n\n* Remove MetadataSegmentManager\n\n* Rename millisLagSinceCoordinatorBecomesLeaderBeforeCanMarkAsUnusedOvershadowedSegments to leadingTimeMillisBeforeCanMarkAsUnusedOvershadowedSegments\n\n* Fix tests.  refactor DruidCluster creation in tests into DruidClusterBuilder\n\n* Fix inspections\n\n* Fix SQLMetadataSegmentManagerEmptyTest and rename it to SqlSegmentsMetadataEmptyTest\n\n* Rename SegmentsAndMetadata to SegmentsAndCommitMetadata to reduce the similarity with SegmentsMetadata; Rename some methods\n\n* Rename DruidCoordinatorHelper to CoordinatorDuty.  refactor DruidCoordinator\n\n* Unused import\n\n* Optimize imports\n\n* Rename IndexerSQLMetadataStorageCoordinator.getDataSourceMetadata() to retrieveDataSourceMetadata()\n\n* Unused import\n\n* Update terminology in datasource-view.tsx\n\n* Fix label in datasource-view.spec.tsx.snap\n\n* Fix lint errors in datasource-view.tsx\n\n* Doc improvements\n\n* Another attempt to please TSLint\n\n* Another attempt to please TSLint\n\n* Style fixes\n\n* Fix IndexerSQLMetadataStorageCoordinator.createUsedSegmentsSqlQueryForIntervals() (wrong merge)\n\n* Try to fix docs build issue\n\n* Javadoc and spelling fixes\n\n* Rename SegmentsMetadata to SegmentsMetadataManager.  address other comments\n\n* Address more comments\n","date":"2020-01-28 03:24:29","modifiedFileCount":"127","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-02-08 13:42:45","codes":[{"authorDate":"2020-01-28 03:24:29","commitOrder":5,"curCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    final TaskLock myLock = getAndCheckLock(toolbox);\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new RetrieveUnusedSegmentsAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to move segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment movedSegment = toolbox.getDataSegmentMover().move(segment, targetLoadSpec);\n      toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(movedSegment)));\n    }\n\n    return TaskStatus.success(getId());\n  }\n","date":"2020-01-28 03:24:29","endLine":101,"groupId":"17985","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"(TaskToolboxtoolbox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4a/0b3ac7a38680460534b075d9cfc9e4b4d5a23e.src","preCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    final TaskLock myLock = getAndCheckLock(toolbox);\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new RetrieveUnusedSegmentsAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to move segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment movedSegment = toolbox.getDataSegmentMover().move(segment, targetLoadSpec);\n      toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(movedSegment)));\n    }\n\n    return TaskStatus.success(getId());\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/MoveTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2020-02-08 13:42:45","commitOrder":5,"curCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    final TaskLock myLock = getAndCheckLock(toolbox);\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new RetrieveUnusedSegmentsAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to archive segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment archivedSegment = toolbox.getDataSegmentArchiver().archive(segment);\n      if (archivedSegment != null) {\n        toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(archivedSegment)));\n      } else {\n        log.info(\"No action was taken for [%s]\", segment.getId());\n      }\n    }\n\n    return TaskStatus.success(getId());\n  }\n","date":"2020-02-08 13:42:45","endLine":97,"groupId":"17985","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"(TaskToolboxtoolbox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9f/6509968b5ece6e93b80b009c1cbc404c171d58.src","preCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    final TaskLock myLock = getAndCheckLock(toolbox);\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new RetrieveUnusedSegmentsAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to archive segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment archivedSegment = toolbox.getDataSegmentArchiver().archive(segment);\n      if (archivedSegment != null) {\n        toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(archivedSegment)));\n      } else {\n        log.info(\"No action was taken for [%s]\", segment);\n      }\n    }\n\n    return TaskStatus.success(getId());\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/ArchiveTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"831ec172f15ae852f1cc9510337f7afc99b39460","commitMessage":"@@@Logging large segment list handling (#9312)\n\n* better handling of large segment lists in logs\n\n* more\n\n* adjust\n\n* exceptions\n\n* fixes\n\n* refactor\n\n* debug\n\n* heh\n\n* dang\n","date":"2020-02-08 13:42:45","modifiedFileCount":"48","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-08-29 02:38:50","codes":[{"authorDate":"2020-08-29 02:38:50","commitOrder":6,"curCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    final TaskLock myLock = getAndCheckLock(toolbox);\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new RetrieveUnusedSegmentsAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to move segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment movedSegment = toolbox.getDataSegmentMover().move(segment, targetLoadSpec);\n      toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(movedSegment)));\n    }\n\n    return TaskStatus.success(getId());\n  }\n","date":"2020-08-29 02:38:50","endLine":101,"groupId":"104807","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"run","params":"(TaskToolboxtoolbox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/15/2eb33043b6830dc9a80082e00de0d319af484d.src","preCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    final TaskLock myLock = getAndCheckLock(toolbox);\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new RetrieveUnusedSegmentsAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to move segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment movedSegment = toolbox.getDataSegmentMover().move(segment, targetLoadSpec);\n      toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(movedSegment)));\n    }\n\n    return TaskStatus.success(getId());\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/MoveTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-08-29 02:38:50","commitOrder":6,"curCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    final TaskLock myLock = getAndCheckLock(toolbox);\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new RetrieveUnusedSegmentsAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to archive segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment archivedSegment = toolbox.getDataSegmentArchiver().archive(segment);\n      if (archivedSegment != null) {\n        toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(archivedSegment)));\n      } else {\n        log.info(\"No action was taken for [%s]\", segment.getId());\n      }\n    }\n\n    return TaskStatus.success(getId());\n  }\n","date":"2020-08-29 02:38:50","endLine":97,"groupId":"104807","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"run","params":"(TaskToolboxtoolbox)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4e/048ad4d2bf678a81dadd9e0e281b0cf885ac25.src","preCode":"  public TaskStatus run(TaskToolbox toolbox) throws Exception\n  {\n    final TaskLock myLock = getAndCheckLock(toolbox);\n\n    \r\n    final List<DataSegment> unusedSegments = toolbox\n        .getTaskActionClient()\n        .submit(new RetrieveUnusedSegmentsAction(myLock.getDataSource(), myLock.getInterval()));\n\n    \r\n    for (final DataSegment unusedSegment : unusedSegments) {\n      if (unusedSegment.getVersion().compareTo(myLock.getVersion()) > 0) {\n        throw new ISE(\n            \"WTF?! Unused segment[%s] has version[%s] > task version[%s]\",\n            unusedSegment.getId(),\n            unusedSegment.getVersion(),\n            myLock.getVersion()\n        );\n      }\n\n      log.info(\"OK to archive segment: %s\", unusedSegment.getId());\n    }\n\n    \r\n    for (DataSegment segment : unusedSegments) {\n      final DataSegment archivedSegment = toolbox.getDataSegmentArchiver().archive(segment);\n      if (archivedSegment != null) {\n        toolbox.getTaskActionClient().submit(new SegmentMetadataUpdateAction(ImmutableSet.of(archivedSegment)));\n      } else {\n        log.info(\"No action was taken for [%s]\", segment.getId());\n      }\n    }\n\n    return TaskStatus.success(getId());\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/ArchiveTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"8ab19793043c65bd79315de6fb26683f561a8a58","commitMessage":"@@@Remove implied profanity from error messages. (#10270)\n\ni.e. WTF.  WTH.","date":"2020-08-29 02:38:50","modifiedFileCount":"76","status":"M","submitter":"Gian Merlino"}]
