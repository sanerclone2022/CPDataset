[{"authorTime":"2021-04-08 01:04:47","codes":[{"authorDate":"2021-04-08 01:04:47","commitOrder":3,"curCode":"  public void testNullLongFilter() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM druid.numfoo\\n\"\n        + \"WHERE l1 IS NULL\",\n        useDefault\n        ? ImmutableList.of(\n            Druids.newScanQueryBuilder()\n                  .dataSource(\n                      InlineDataSource.fromIterable(\n                          ImmutableList.of(new Object[]{0L}),\n                          RowSignature.builder().add(\"EXPR$0\", ValueType.LONG).build()\n                      )\n                  )\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .columns(\"EXPR$0\")\n                  .resultFormat(ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                  .legacy(false)\n                  .build()\n        )\n        : ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(selector(\"l1\", null, null))\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            useDefault ? new Object[]{0L} : new Object[]{3L}\n        )\n    );\n  }\n","date":"2021-04-08 01:04:47","endLine":4665,"groupId":"18995","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullLongFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/788721575b655fed5e5862490b8e3b2323f52e.src","preCode":"  public void testNullLongFilter() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM druid.numfoo\\n\"\n        + \"WHERE l1 IS NULL\",\n        useDefault\n        ? ImmutableList.of(\n            Druids.newScanQueryBuilder()\n                  .dataSource(\n                      InlineDataSource.fromIterable(\n                          ImmutableList.of(new Object[]{0L}),\n                          RowSignature.builder().add(\"EXPR$0\", ValueType.LONG).build()\n                      )\n                  )\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .columns(\"EXPR$0\")\n                  .resultFormat(ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                  .legacy(false)\n                  .build()\n        )\n        : ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(selector(\"l1\", null, null))\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            useDefault ? new Object[]{0L} : new Object[]{3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4630,"status":"MB"},{"authorDate":"2021-04-08 01:04:47","commitOrder":3,"curCode":"  public void testSelectConstantParamGetsConstant() throws Exception\n  {\n    testQuery(\n        \"SELECT 1 + ?\",\n        ImmutableList.of(\n            Druids.newScanQueryBuilder()\n                  .dataSource(\n                      InlineDataSource.fromIterable(\n                          ImmutableList.of(new Object[]{2L}),\n                          RowSignature.builder().add(\"EXPR$0\", ValueType.LONG).build()\n                      )\n                  )\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .columns(\"EXPR$0\")\n                  .resultFormat(ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                  .legacy(false)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{2}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.INTEGER, 1))\n    );\n  }\n","date":"2021-04-08 01:04:47","endLine":79,"groupId":"18995","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectConstantParamGetsConstant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/03/087832abe440ce4d6fff8fea2dbf87cb0c3494.src","preCode":"  public void testSelectConstantParamGetsConstant() throws Exception\n  {\n    testQuery(\n        \"SELECT 1 + ?\",\n        ImmutableList.of(\n            Druids.newScanQueryBuilder()\n                  .dataSource(\n                      InlineDataSource.fromIterable(\n                          ImmutableList.of(new Object[]{2L}),\n                          RowSignature.builder().add(\"EXPR$0\", ValueType.LONG).build()\n                      )\n                  )\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .columns(\"EXPR$0\")\n                  .resultFormat(ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                  .legacy(false)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{2}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.INTEGER, 1))\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteParameterQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"}],"commitId":"b51ede5b49c0a5e5dbdd6e3bcc5b513fc85e2803","commitMessage":"@@@Add a planner rule to handle empty tables (#11058)\n\n* Add a planner rule to handle empty tables\n\n* adjust comment\n\n* type handling\n\n* add tests\n\n* unused imports and fix test\n\n* fix more tests\n\n* fix more test\n\n* javadoc","date":"2021-04-08 01:04:47","modifiedFileCount":"7","status":"M","submitter":"Jihoon Son"},{"authorTime":"2021-04-08 01:04:47","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":4,"curCode":"  public void testNullLongFilter() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM druid.numfoo\\n\"\n        + \"WHERE l1 IS NULL\",\n        useDefault\n        ? ImmutableList.of(\n            Druids.newScanQueryBuilder()\n                  .dataSource(\n                      InlineDataSource.fromIterable(\n                          ImmutableList.of(new Object[]{0L}),\n                          RowSignature.builder().add(\"EXPR$0\", ValueType.LONG).build()\n                      )\n                  )\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .columns(\"EXPR$0\")\n                  .resultFormat(ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                  .legacy(false)\n                  .build()\n        )\n        : ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(selector(\"l1\", null, null))\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            useDefault ? new Object[]{0L} : new Object[]{3L}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":4753,"groupId":"101675","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullLongFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testNullLongFilter() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*)\\n\"\n        + \"FROM druid.numfoo\\n\"\n        + \"WHERE l1 IS NULL\",\n        useDefault\n        ? ImmutableList.of(\n            Druids.newScanQueryBuilder()\n                  .dataSource(\n                      InlineDataSource.fromIterable(\n                          ImmutableList.of(new Object[]{0L}),\n                          RowSignature.builder().add(\"EXPR$0\", ValueType.LONG).build()\n                      )\n                  )\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .columns(\"EXPR$0\")\n                  .resultFormat(ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                  .legacy(false)\n                  .build()\n        )\n        : ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(selector(\"l1\", null, null))\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            useDefault ? new Object[]{0L} : new Object[]{3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4718,"status":"M"},{"authorDate":"2021-04-08 01:04:47","commitOrder":4,"curCode":"  public void testSelectConstantParamGetsConstant() throws Exception\n  {\n    testQuery(\n        \"SELECT 1 + ?\",\n        ImmutableList.of(\n            Druids.newScanQueryBuilder()\n                  .dataSource(\n                      InlineDataSource.fromIterable(\n                          ImmutableList.of(new Object[]{2L}),\n                          RowSignature.builder().add(\"EXPR$0\", ValueType.LONG).build()\n                      )\n                  )\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .columns(\"EXPR$0\")\n                  .resultFormat(ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                  .legacy(false)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{2}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.INTEGER, 1))\n    );\n  }\n","date":"2021-04-08 01:04:47","endLine":79,"groupId":"101675","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectConstantParamGetsConstant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/03/087832abe440ce4d6fff8fea2dbf87cb0c3494.src","preCode":"  public void testSelectConstantParamGetsConstant() throws Exception\n  {\n    testQuery(\n        \"SELECT 1 + ?\",\n        ImmutableList.of(\n            Druids.newScanQueryBuilder()\n                  .dataSource(\n                      InlineDataSource.fromIterable(\n                          ImmutableList.of(new Object[]{2L}),\n                          RowSignature.builder().add(\"EXPR$0\", ValueType.LONG).build()\n                      )\n                  )\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .columns(\"EXPR$0\")\n                  .resultFormat(ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                  .legacy(false)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{2}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.INTEGER, 1))\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteParameterQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
