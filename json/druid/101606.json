[{"authorTime":"2020-01-17 06:40:32","codes":[{"authorDate":"2020-01-17 13:02:37","commitOrder":2,"curCode":"  public void testStringLatestInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val) FROM (SELECT dim2, LATEST(dim1, 10) AS val FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(new StringLastAggregatorFactory(\"a0:a\", \"dim1\", 10)))\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(new DoubleSumAggregatorFactory(\"_a0\", null, \"CAST(\\\"a0\\\", 'DOUBLE')\", ExprMacroTable.nil())))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.sqlCompatible() ? 3 : 1.0}\n        )\n    );\n  }\n","date":"2020-01-17 13:02:37","endLine":1550,"groupId":"23496","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringLatestInSubquery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/20/8db301e077c61dfcf9a39916242aa75d468a54.src","preCode":"  public void testStringLatestInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val) FROM (SELECT dim2, LATEST(dim1, 10) AS val FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(new StringLastAggregatorFactory(\"a0:a\", \"dim1\", 10)))\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(new DoubleSumAggregatorFactory(\"_a0\", null, \"CAST(\\\"a0\\\", 'DOUBLE')\", ExprMacroTable.nil())))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.sqlCompatible() ? 3 : 1.0}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1516,"status":"B"},{"authorDate":"2020-01-17 06:40:32","commitOrder":2,"curCode":"  public void testStringAnyInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val) FROM (SELECT dim2, ANY_VALUE(dim1, 10) AS val FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(new StringAnyAggregatorFactory(\"a0:a\", \"dim1\", 10)))\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(new DoubleSumAggregatorFactory(\"_a0\", null, \"CAST(\\\"a0\\\", 'DOUBLE')\", ExprMacroTable.nil())))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.sqlCompatible() ? 12.1 : 11.1}\n        )\n    );\n  }\n","date":"2020-01-17 06:40:32","endLine":1537,"groupId":"23496","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStringAnyInSubquery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/89/9ffa2897512cf59d731da308cefd6cccdb7837.src","preCode":"  public void testStringAnyInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val) FROM (SELECT dim2, ANY_VALUE(dim1, 10) AS val FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(new StringAnyAggregatorFactory(\"a0:a\", \"dim1\", 10)))\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(new DoubleSumAggregatorFactory(\"_a0\", null, \"CAST(\\\"a0\\\", 'DOUBLE')\", ExprMacroTable.nil())))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.sqlCompatible() ? 12.1 : 11.1}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1503,"status":"NB"}],"commitId":"68ed2a2c8fd1337d87f8fcb62ce1f91701b8e472","commitMessage":"@@@Fix LATEST / EARLIEST Buffer Aggregator does not work on String column  (#9197)\n\n* fix buff limit bug\n\n* add tests\n\n* add test\n\n* add tests\n\n* fix checkstyle\n","date":"2020-01-17 13:02:37","modifiedFileCount":"2","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-02-13 06:01:41","codes":[{"authorDate":"2020-01-17 13:02:37","commitOrder":3,"curCode":"  public void testStringLatestInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val) FROM (SELECT dim2, LATEST(dim1, 10) AS val FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(new StringLastAggregatorFactory(\"a0:a\", \"dim1\", 10)))\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(new DoubleSumAggregatorFactory(\"_a0\", null, \"CAST(\\\"a0\\\", 'DOUBLE')\", ExprMacroTable.nil())))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.sqlCompatible() ? 3 : 1.0}\n        )\n    );\n  }\n","date":"2020-01-17 13:02:37","endLine":1550,"groupId":"23496","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringLatestInSubquery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/20/8db301e077c61dfcf9a39916242aa75d468a54.src","preCode":"  public void testStringLatestInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val) FROM (SELECT dim2, LATEST(dim1, 10) AS val FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(new StringLastAggregatorFactory(\"a0:a\", \"dim1\", 10)))\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(new DoubleSumAggregatorFactory(\"_a0\", null, \"CAST(\\\"a0\\\", 'DOUBLE')\", ExprMacroTable.nil())))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.sqlCompatible() ? 3 : 1.0}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1516,"status":"N"},{"authorDate":"2020-02-13 06:01:41","commitOrder":3,"curCode":"  public void testStringAnyInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val) FROM (SELECT dim2, ANY_VALUE(dim1, 10) AS val FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(new StringAnyAggregatorFactory(\"a0:a\", \"dim1\", 10)))\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(new DoubleSumAggregatorFactory(\"_a0\", null, \"CAST(\\\"a0\\\", 'DOUBLE')\", ExprMacroTable.nil())))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.sqlCompatible() ? 12.1 : 10.1}\n        )\n    );\n  }\n","date":"2020-02-13 06:01:41","endLine":1683,"groupId":"23496","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStringAnyInSubquery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/dd06b3faaa4821d3759ff1a6fc9207d35e634f.src","preCode":"  public void testStringAnyInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val) FROM (SELECT dim2, ANY_VALUE(dim1, 10) AS val FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(new StringAnyAggregatorFactory(\"a0:a\", \"dim1\", 10)))\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(new DoubleSumAggregatorFactory(\"_a0\", null, \"CAST(\\\"a0\\\", 'DOUBLE')\", ExprMacroTable.nil())))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.sqlCompatible() ? 12.1 : 11.1}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1649,"status":"M"}],"commitId":"c30579e47b2df3c8c86b782a015a5a989102f0fb","commitMessage":"@@@ANY Aggregator should not skip null values implementation (#9317)\n\n* ANY Aggregator should not skip null values implementation\n\n* add tests\n\n* add more tests\n\n* Update documentation\n\n* add more tests\n\n* address review comments\n\n* optimize StringAnyBufferAggregator\n\n* fix failing tests\n\n* address pr comments\n","date":"2020-02-13 06:01:41","modifiedFileCount":"15","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-09-15 10:44:58","codes":[{"authorDate":"2020-01-17 13:02:37","commitOrder":4,"curCode":"  public void testStringLatestInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val) FROM (SELECT dim2, LATEST(dim1, 10) AS val FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(new StringLastAggregatorFactory(\"a0:a\", \"dim1\", 10)))\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(new DoubleSumAggregatorFactory(\"_a0\", null, \"CAST(\\\"a0\\\", 'DOUBLE')\", ExprMacroTable.nil())))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.sqlCompatible() ? 3 : 1.0}\n        )\n    );\n  }\n","date":"2020-01-17 13:02:37","endLine":1550,"groupId":"101606","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringLatestInSubquery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/20/8db301e077c61dfcf9a39916242aa75d468a54.src","preCode":"  public void testStringLatestInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val) FROM (SELECT dim2, LATEST(dim1, 10) AS val FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(new StringLastAggregatorFactory(\"a0:a\", \"dim1\", 10)))\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(new DoubleSumAggregatorFactory(\"_a0\", null, \"CAST(\\\"a0\\\", 'DOUBLE')\", ExprMacroTable.nil())))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.sqlCompatible() ? 3 : 1.0}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1516,"status":"N"},{"authorDate":"2020-09-15 10:44:58","commitOrder":4,"curCode":"  public void testStringAnyInSubquery() throws Exception\n  {\n    testQuery(\n        \"SELECT SUM(val) FROM (SELECT dim2, ANY_VALUE(dim1, 10) AS val FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(new StringAnyAggregatorFactory(\"a0:a\", \"dim1\", 10)))\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(new DoubleSumAggregatorFactory(\"_a0\", null, \"CAST(\\\"a0\\\", 'DOUBLE')\", ExprMacroTable.nil())))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.sqlCompatible() ? 12.1 : 10.1}\n        )\n    );\n  }\n","date":"2020-09-15 10:44:58","endLine":2281,"groupId":"101606","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStringAnyInSubquery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/eb/7fa4ceed3c7b804ab1ca49735882421e2e2569.src","preCode":"  public void testStringAnyInSubquery() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT SUM(val) FROM (SELECT dim2, ANY_VALUE(dim1, 10) AS val FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim2\", \"d0\")))\n                                        .setAggregatorSpecs(aggregators(new StringAnyAggregatorFactory(\"a0:a\", \"dim1\", 10)))\n                                        .setPostAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new FinalizingFieldAccessPostAggregator(\"a0\", \"a0:a\")\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(aggregators(new DoubleSumAggregatorFactory(\"_a0\", null, \"CAST(\\\"a0\\\", 'DOUBLE')\", ExprMacroTable.nil())))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.sqlCompatible() ? 12.1 : 10.1}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2250,"status":"M"}],"commitId":"f71ba6f2c202d3edc0cdf8efa2274d0e247ddca8","commitMessage":"@@@Vectorized ANY aggregators (#10338)\n\n* WIP vectorized ANY aggregators\n\n* tests\n\n* fix aggs\n\n* cleanup\n\n* code review + tests\n\n* docs\n\n* use NilVectorSelector when needed\n\n* fix spellcheck\n\n* dont instantiate vectors\n\n* cleanup","date":"2020-09-15 10:44:58","modifiedFileCount":"5","status":"M","submitter":"Suneet Saldanha"}]
