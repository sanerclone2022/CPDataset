[{"authorTime":"2018-09-08 04:17:49","codes":[{"authorDate":"2018-12-22 03:49:24","commitOrder":3,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n  }\n","date":"2018-12-22 03:49:24","endLine":198,"groupId":"237","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/0b9247d792032ba5dba7aad3d99eb263413dcd.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"},{"authorDate":"2018-09-08 04:17:49","commitOrder":3,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    tuningConfig = new KafkaSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n  }\n","date":"2018-09-08 04:17:49","endLine":223,"groupId":"11503","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/96/4f5f7cac6f16bb3d370df208cbac42fd75e83c.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    tuningConfig = new KafkaSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"NB"}],"commitId":"7c7997e8a1183a7bffad731ca94e8b4c381e8665","commitMessage":"@@@Add Kinesis Indexing Service to core Druid (#6431)\n\n* created seekablestream classes\n\n* created seekablestreamsupervisor class\n\n* first attempt to integrate kafa indexing service to use SeekableStream\n\n* seekablestream bug fixes\n\n* kafkarecordsupplier\n\n* integrated kafka indexing service with seekablestream\n\n* implemented resume/suspend and refactored some package names\n\n* moved kinesis indexing service into core druid extensions\n\n* merged some changes from kafka supervisor race condition\n\n* integrated kinesis-indexing-service with seekablestream\n\n* unite tests for kinesis-indexing-service\n\n* various bug fixes for kinesis-indexing-service\n\n* refactored kinesisindexingtask\n\n* finished up more kinesis unit tests\n\n* more bug fixes for kinesis-indexing-service\n\n* finsihed refactoring kinesis unit tests\n\n* removed KinesisParititons and KafkaPartitions to use SeekableStreamPartitions\n\n* kinesis-indexing-service code cleanup and docs\n\n* merge #6291\n\nmerge #6337\n\nmerge #6383\n\n* added more docs and reordered methods\n\n* fixd kinesis tests after merging master and added docs in seekablestream\n\n* fix various things from pr comment\n\n* improve recordsupplier and add unit tests\n\n* migrated to aws-java-sdk-kinesis\n\n* merge changes from master\n\n* fix pom files and forbiddenapi checks\n\n* checkpoint JavaType bug fix\n\n* fix pom and stuff\n\n* disable checkpointing in kinesis\n\n* fix kinesis sequence number null in closed shard\n\n* merge changes from master\n\n* fixes for kinesis tasks\n\n* capitalized <partitionType.  sequenceType>\n\n* removed abstract class loggers\n\n* conform to guava api restrictions\n\n* add docker for travis other modules test\n\n* address comments\n\n* improve RecordSupplier to supply records in batch\n\n* fix strict compile issue\n\n* add test scope for localstack dependency\n\n* kinesis indexing task refactoring\n\n* comments\n\n* github comments\n\n* minor fix\n\n* removed unneeded readme\n\n* fix deserialization bug\n\n* fix various bugs\n\n* KinesisRecordSupplier unable to catch up to earliest position in stream bug fix\n\n* minor changes to kinesis\n\n* implement deaggregate for kinesis\n\n* Merge remote-tracking branch 'upstream/master' into seekablestream\n\n* fix kinesis offset discrepancy with kafka\n\n* kinesis record supplier disable getPosition\n\n* pr comments\n\n* mock for kinesis tests and remove docker dependency for unit tests\n\n* PR comments\n\n* avg lag in kafkasupervisor #6587\n\n* refacotred SequenceMetadata in taskRunners\n\n* small fix\n\n* more small fix\n\n* recordsupplier resource leak\n\n* revert .travis.yml formatting\n\n* fix style\n\n* kinesis docs\n\n* doc part2\n\n* more docs\n\n* comments\n\n* comments*2\n\n* revert string replace changes\n\n* comments\n\n* teamcity\n\n* comments part 1\n\n* comments part 2\n\n* comments part 3\n\n* merge #6754\n\n* fix injection binding\n\n* comments\n\n* KinesisRegion refactor\n\n* comments part idk lol\n\n* can't think of a commit msg anymore\n\n* remove possiblyResetDataSourceMetadata() for IncrementalPublishingTaskRunner\n\n* commmmmmmmmmments\n\n* extra error handling in KinesisRecordSupplier getRecords\n\n* comments\n\n* quickfix\n\n* typo\n\n* oof\n","date":"2018-12-22 03:49:24","modifiedFileCount":"22","status":"M","submitter":"Joshua Sun"},{"authorTime":"2019-06-01 08:16:01","codes":[{"authorDate":"2019-06-01 08:16:01","commitOrder":4,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2019-06-01 08:16:01","endLine":202,"groupId":"237","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c2/2e57d30e48eaa4fb198dac4cfc90c4eeac0ca1.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2019-06-01 08:16:01","commitOrder":4,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    tuningConfig = new KafkaSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2019-06-01 08:16:01","endLine":245,"groupId":"11503","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2e/ff41c7106c8b4e0ad8fd243280839cac2354e7.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    tuningConfig = new KafkaSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"}],"commitId":"8032c4add8f78d0c15044d0847201c618e27dc25","commitMessage":"@@@Add errors and state to stream supervisor status API endpoint (#7428)\n\n* Add state and error tracking for seekable stream supervisors\n\n* Fixed nits in docs\n\n* Made inner class static and updated spec test with jackson inject\n\n* Review changes\n\n* Remove redundant config param in supervisor\n\n* Style\n\n* Applied some of Jon's recommendations\n\n* Add transience field\n\n* write test\n\n* implement code review changes except for reconsidering logic of markRunFinishedAndEvaluateHealth()\n\n* remove transience reporting and fix SeekableStreamSupervisorStateManager impl\n\n* move call to stateManager.markRunFinished() from RunNotice to runInternal() for tests\n\n* remove stateHistory because it wasn't adding much value.  some fixes.  and add more tests\n\n* fix tests\n\n* code review changes and add HTTP health check status\n\n* fix test failure\n\n* refactor to split into a generic SupervisorStateManager and a specific SeekableStreamSupervisorStateManager\n\n* fixup after merge\n\n* code review changes - add additional docs\n\n* cleanup KafkaIndexTaskTest\n\n* add additional documentation for Kinesis indexing\n\n* remove unused throws class\n","date":"2019-06-01 08:16:01","modifiedFileCount":"32","status":"M","submitter":"Justin Borromeo"},{"authorTime":"2019-07-11 03:22:24","codes":[{"authorDate":"2019-07-11 03:22:24","commitOrder":5,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2019-07-11 03:22:24","endLine":198,"groupId":"21380","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/be/5a87e61280a754dbc7c106f9fa274f39857ce5.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"},{"authorDate":"2019-07-11 03:22:24","commitOrder":5,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    tuningConfig = new KafkaSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2019-07-11 03:22:24","endLine":239,"groupId":"11503","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/e46adaaa02c0b3d21419f70a64776303f861ee.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    tuningConfig = new KafkaSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"14aec7fceca90dfaf9b2ce4dae68186d04ffcc47","commitMessage":"@@@add config to optionally disable all compression  in intermediate segment persists while ingestion (#7919)\n\n* disable all compression in intermediate segment persists while ingestion\n\n* more changes and build fix\n\n* by default retain existing indexingSpec for intermediate persisted segments\n\n* document indexSpecForIntermediatePersists index tuning config\n\n* fix build issues\n\n* update serde tests\n","date":"2019-07-11 03:22:24","modifiedFileCount":"56","status":"M","submitter":"Himanshu"},{"authorTime":"2019-08-23 05:51:25","codes":[{"authorDate":"2019-07-11 03:22:24","commitOrder":6,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2019-07-11 03:22:24","endLine":198,"groupId":"21380","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/be/5a87e61280a754dbc7c106f9fa274f39857ce5.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"N"},{"authorDate":"2019-08-23 05:51:25","commitOrder":6,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2019-08-23 05:51:25","endLine":212,"groupId":"13334","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0d/255b66d24d58735694d9fe14274069e9ba5ee9.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    tuningConfig = new KafkaSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"fba92ae469b512cca6cdf86ffc1c1a2090808453","commitMessage":"@@@Fix to always use end sequenceNumber for reset (#8305)\n\n* Fix to always use end sequenceNumber for reset\n\n* fix checkstyle\n\n* fix style and add log\n","date":"2019-08-23 05:51:25","modifiedFileCount":"8","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-08-23 05:51:25","codes":[{"authorDate":"2019-10-16 14:19:17","commitOrder":7,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2019-10-16 14:19:17","endLine":202,"groupId":"21380","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6b/87e4b1c528a6ae31a000c6d18098d01f89dc4c.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2019-08-23 05:51:25","commitOrder":7,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2019-08-23 05:51:25","endLine":212,"groupId":"13334","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0d/255b66d24d58735694d9fe14274069e9ba5ee9.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"N"}],"commitId":"89ce6384f57cb13c776cfcc9fc7b97126b834fac","commitMessage":"@@@More Kinesis resharding adjustments (#8671)\n\n* More Kinesis resharding adjustments\n\n* Fix TC inspection\n\n* Fix comment'\n\n* Adjust comment.  small refactor\n\n* Make repartition transition time configurable\n\n* Add spellcheck exclusion\n\n* Spelling fix\n","date":"2019-10-16 14:19:17","modifiedFileCount":"13","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2019-08-23 05:51:25","codes":[{"authorDate":"2020-03-17 12:39:53","commitOrder":8,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2020-03-17 12:39:53","endLine":208,"groupId":"21380","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/94/ca6bf693b0f756794d2354302ba22e8b2b1d8f.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2019-08-23 05:51:25","commitOrder":8,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2019-08-23 05:51:25","endLine":212,"groupId":"13334","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0d/255b66d24d58735694d9fe14274069e9ba5ee9.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"N"}],"commitId":"142742f291daaf1ac9afea319cacbbe2a3077952","commitMessage":"@@@add kinesis lag metric (#9509)\n\n* add kinesis lag metric\n\n* fixes\n\n* heh\n\n* do it right this time\n\n* more test\n\n* split out supervisor report lags into lagMillis.  remove latest offsets from kinesis supervisor report since always null.  review stuffs","date":"2020-03-17 12:39:53","modifiedFileCount":"17","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-08-23 05:51:25","codes":[{"authorDate":"2020-10-24 09:34:26","commitOrder":9,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        null,\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2020-10-24 09:34:26","endLine":208,"groupId":"2136","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3d/57a6bbe1b29c0f56e344865f0dfcb620e9ff34.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2019-08-23 05:51:25","commitOrder":9,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2019-08-23 05:51:25","endLine":212,"groupId":"13334","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0d/255b66d24d58735694d9fe14274069e9ba5ee9.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"N"}],"commitId":"f3a2903218573f5d336b082b1c9b8a60a19e8c54","commitMessage":"@@@Configurable Index Type (#10335)\n\n* Introduce a Configurable Index Type\n\n* Change to @UnstableApi\n\n* Add AppendableIndexSpecTest\n\n* Update doc\n\n* Add spelling exception\n\n* Add tests coverage\n\n* Revert some of the changes to reduce diff\n\n* Minor fixes\n\n* Update getMaxBytesInMemoryOrDefault() comment\n\n* Fix typo.  remove redundant interface\n\n* Remove off-heap spec (postponed to a later PR)\n\n* Add javadocs to AppendableIndexSpec\n\n* Describe testCreateTask()\n\n* Add tests for AppendableIndexSpec within TuningConfig\n\n* Modify hashCode() to conform with equals()\n\n* Add comment where building incremental-index\n\n* Add \"EqualsVerifier\" tests\n\n* Revert some of the API back to AppenderatorConfig\n\n* Don't use multi-line comments\n\n* Remove knob documentation (deferred)","date":"2020-10-24 09:34:26","modifiedFileCount":"72","status":"M","submitter":"Liran Funaro"},{"authorTime":"2019-08-23 05:51:25","codes":[{"authorDate":"2021-01-27 16:34:56","commitOrder":10,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        null,\n        1000,\n        null,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2021-01-27 16:34:56","endLine":210,"groupId":"2136","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3f/3520458799cfd3225d2c594ebd770cae378cd6.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        null,\n        1000,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2019-08-23 05:51:25","commitOrder":10,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2019-08-23 05:51:25","endLine":212,"groupId":"13334","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0d/255b66d24d58735694d9fe14274069e9ba5ee9.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"N"}],"commitId":"a46d561bd7e2b045a08a2e475847d4a7505a1c93","commitMessage":"@@@Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead (#10740)\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* fix checkstyle\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* fix test\n\n* fix test\n\n* add log\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* address comments\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add config to skip overhead memory calculation\n\n* add test for the skipBytesInMemoryOverheadCheck config\n\n* add docs\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix spelling\n\n* address comments\n\n* fix travis\n\n* address comments","date":"2021-01-27 16:34:56","modifiedFileCount":"50","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-03-06 17:06:52","codes":[{"authorDate":"2021-01-27 16:34:56","commitOrder":11,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        null,\n        1000,\n        null,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2021-01-27 16:34:56","endLine":210,"groupId":"2136","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3f/3520458799cfd3225d2c594ebd770cae378cd6.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        null,\n        1000,\n        null,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"N"},{"authorDate":"2021-03-06 17:06:52","commitOrder":11,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n    ingestionSchema = EasyMock.createMock(KafkaSupervisorIngestionSpec.class);\n  }\n","date":"2021-03-06 17:06:52","endLine":222,"groupId":"13334","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ac/6b6e50590f06e42808368c88192fade7284e26.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"bddacbb1c3abccf6ad035a4756a6960761fd43a2","commitMessage":"@@@Dynamic auto scale Kafka-Stream ingest tasks (#10524)\n\n* druid task auto scale based on kafka lag\n\n* fix kafkaSupervisorIOConfig and KinesisSupervisorIOConfig\n\n* druid task auto scale based on kafka lag\n\n* fix kafkaSupervisorIOConfig and KinesisSupervisorIOConfig\n\n* test dynamic auto scale done\n\n* auto scale tasks tested on prd cluster\n\n* auto scale tasks tested on prd cluster\n\n* modify code style to solve 29055.10 29055.9 29055.17 29055.18 29055.19 29055.20\n\n* rename test fiel function\n\n* change codes and add docs based on capistrant reviewed\n\n* midify test docs\n\n* modify docs\n\n* modify docs\n\n* modify docs\n\n* merge from master\n\n* Extract the autoScale logic out of SeekableStreamSupervisor to minimize putting more stuff inside there &&  Make autoscaling algorithm configurable and scalable.\n\n* fix ci failed\n\n* revert msic.xml\n\n* add uts to test autoscaler create && scale out/in and kafka ingest with scale enable\n\n* add more uts\n\n* fix inner class check\n\n* add IT for kafka ingestion with autoscaler\n\n* add new IT in groups=kafka-index named testKafkaIndexDataWithWithAutoscaler\n\n* review change\n\n* code review\n\n* remove unused imports\n\n* fix NLP\n\n* fix docs and UTs\n\n* revert misc.xml\n\n* use jackson to build autoScaleConfig with default values\n\n* add uts\n\n* use jackson to init AutoScalerConfig in IOConfig instead of Map<>\n\n* autoscalerConfig interface and provide a defaultAutoScalerConfig\n\n* modify uts\n\n* modify docs\n\n* fix checkstyle\n\n* revert misc.xml\n\n* modify uts\n\n* reviewed code change\n\n* reviewed code change\n\n* code reviewed\n\n* code review\n\n* log changed\n\n* do StringUtils.encodeForFormat when create allocationExec\n\n* code review && limit taskCountMax to partitionNumbers\n\n* modify docs\n\n* code review\n\nCo-authored-by: yuezhang <yuezhang@freewheel.tv>","date":"2021-03-06 17:06:52","modifiedFileCount":"24","status":"M","submitter":"zhangyue19921010"},{"authorTime":"2021-03-06 17:06:52","codes":[{"authorDate":"2021-06-24 07:36:46","commitOrder":12,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        null,\n        1000,\n        null,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","date":"2021-06-24 07:36:46","endLine":211,"groupId":"102257","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/52/ef70a9760646f8a74d40d0fd510ce010ac442f.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KinesisIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n    supervisorRecordSupplier = createMock(KinesisRecordSupplier.class);\n\n    tuningConfig = new KinesisSupervisorTuningConfig(\n        null,\n        1000,\n        null,\n        null,\n        50000,\n        null,\n        new Period(\"P1Y\"),\n        new File(\"/test\"),\n        null,\n        null,\n        null,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        numThreads,\n        TEST_CHAT_THREADS,\n        TEST_CHAT_RETRIES,\n        TEST_HTTP_TIMEOUT,\n        TEST_SHUTDOWN_TIMEOUT,\n        null,\n        null,\n        null,\n        5000,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2021-03-06 17:06:52","commitOrder":12,"curCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n    ingestionSchema = EasyMock.createMock(KafkaSupervisorIngestionSpec.class);\n  }\n","date":"2021-03-06 17:06:52","endLine":222,"groupId":"102257","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"setupTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ac/6b6e50590f06e42808368c88192fade7284e26.src","preCode":"  public void setupTest()\n  {\n    taskStorage = createMock(TaskStorage.class);\n    taskMaster = createMock(TaskMaster.class);\n    taskRunner = createMock(TaskRunner.class);\n    indexerMetadataStorageCoordinator = createMock(IndexerMetadataStorageCoordinator.class);\n    taskClient = createMock(KafkaIndexTaskClient.class);\n    taskQueue = createMock(TaskQueue.class);\n\n    topic = getTopic();\n    rowIngestionMetersFactory = new TestUtils().getRowIngestionMetersFactory();\n    serviceEmitter = new ExceptionCapturingServiceEmitter();\n    EmittingLogger.registerEmitter(serviceEmitter);\n    supervisorConfig = new SupervisorStateManagerConfig();\n    ingestionSchema = EasyMock.createMock(KafkaSupervisorIngestionSpec.class);\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"N"}],"commitId":"de8daf8139dcb8a497f1191587dcd5e7ea992092","commitMessage":"@@@Delete buildV9Directly in Kafka and Kinesis Indexing Service (#11351)\n\n* delete_buildV9Directly_in_kafka_and_kinesis_indexing_service\n\n* delete\n\n* delete them from server\n\n* delete buildV9Directly from hadoop indexing\n\n* bug fixed\n\nCo-authored-by: yuanyi <yuanyi@freewheel.tv>","date":"2021-06-24 07:36:46","modifiedFileCount":"38","status":"M","submitter":"Yi Yuan"}]
