[{"authorTime":"2020-09-24 04:56:38","codes":[{"authorDate":"2020-09-24 04:56:38","commitOrder":1,"curCode":"  public static <T> ExprVectorProcessor<T> greaterThan(\n      Expr.VectorInputBindingTypes inputTypes,\n      Expr left,\n      Expr right\n  )\n  {\n    return VectorMathProcessors.makeMathProcessor(\n        inputTypes,\n        left,\n        right,\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return Evals.asLong(left > right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        }\n    );\n  }\n","date":"2020-09-24 04:56:38","endLine":269,"groupId":"2805","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"greaterThan","params":"(Expr.VectorInputBindingTypesinputTypes@Exprleft@Exprright)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/97/2d1d62e07cf239303aa280548ae0b26ad49c15.src","preCode":"  public static <T> ExprVectorProcessor<T> greaterThan(\n      Expr.VectorInputBindingTypes inputTypes,\n      Expr left,\n      Expr right\n  )\n  {\n    return VectorMathProcessors.makeMathProcessor(\n        inputTypes,\n        left,\n        right,\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return Evals.asLong(left > right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        }\n    );\n  }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/vector/VectorComparisonProcessors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"B"},{"authorDate":"2020-09-24 04:56:38","commitOrder":1,"curCode":"  public static <T> ExprVectorProcessor<T> lessThanOrEqual(\n      Expr.VectorInputBindingTypes inputTypes,\n      Expr left,\n      Expr right\n  )\n  {\n    return VectorMathProcessors.makeMathProcessor(\n        inputTypes,\n        left,\n        right,\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return Evals.asLong(left <= right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        }\n    );\n  }\n","date":"2020-09-24 04:56:38","endLine":330,"groupId":"2805","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"lessThanOrEqual","params":"(Expr.VectorInputBindingTypesinputTypes@Exprleft@Exprright)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/97/2d1d62e07cf239303aa280548ae0b26ad49c15.src","preCode":"  public static <T> ExprVectorProcessor<T> lessThanOrEqual(\n      Expr.VectorInputBindingTypes inputTypes,\n      Expr left,\n      Expr right\n  )\n  {\n    return VectorMathProcessors.makeMathProcessor(\n        inputTypes,\n        left,\n        right,\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return Evals.asLong(left <= right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        }\n    );\n  }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/vector/VectorComparisonProcessors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"B"}],"commitId":"19c4b1664086539a3bb495eb402616cf8b6f2a77","commitMessage":"@@@vectorized expressions and expression virtual columns (#10401)\n\n* vectorized expression virtual columns\n\n* cleanup\n\n* fixes\n\n* preserve float if explicitly specified\n\n* oops\n\n* null handling fixes.  more tests\n\n* what is an expression planner?\n\n* better names\n\n* remove unused method.  add pi\n\n* move vector processor builders into static methods\n\n* reduce boilerplate\n\n* oops\n\n* more naming adjustments\n\n* changes\n\n* nullable\n\n* missing hex\n\n* more","date":"2020-09-24 04:56:38","modifiedFileCount":"56","status":"B","submitter":"Clint Wylie"},{"authorTime":"2020-10-27 10:55:24","codes":[{"authorDate":"2020-10-27 10:55:24","commitOrder":2,"curCode":"  public static <T> ExprVectorProcessor<T> greaterThan(\n      Expr.VectorInputBindingInspector inspector,\n      Expr left,\n      Expr right\n  )\n  {\n    return VectorMathProcessors.makeMathProcessor(\n        inspector,\n        left,\n        right,\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return Evals.asLong(left > right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        }\n    );\n  }\n","date":"2020-10-27 10:55:24","endLine":269,"groupId":"2805","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"greaterThan","params":"(Expr.VectorInputBindingInspectorinspector@Exprleft@Exprright)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cd/cf2bf7335829e49c5dc1f1a6cc27e9899c2cb4.src","preCode":"  public static <T> ExprVectorProcessor<T> greaterThan(\n      Expr.VectorInputBindingTypes inputTypes,\n      Expr left,\n      Expr right\n  )\n  {\n    return VectorMathProcessors.makeMathProcessor(\n        inputTypes,\n        left,\n        right,\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return Evals.asLong(left > right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        }\n    );\n  }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/vector/VectorComparisonProcessors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"},{"authorDate":"2020-10-27 10:55:24","commitOrder":2,"curCode":"  public static <T> ExprVectorProcessor<T> lessThanOrEqual(\n      Expr.VectorInputBindingInspector inspector,\n      Expr left,\n      Expr right\n  )\n  {\n    return VectorMathProcessors.makeMathProcessor(\n        inspector,\n        left,\n        right,\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return Evals.asLong(left <= right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        }\n    );\n  }\n","date":"2020-10-27 10:55:24","endLine":330,"groupId":"2805","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"lessThanOrEqual","params":"(Expr.VectorInputBindingInspectorinspector@Exprleft@Exprright)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cd/cf2bf7335829e49c5dc1f1a6cc27e9899c2cb4.src","preCode":"  public static <T> ExprVectorProcessor<T> lessThanOrEqual(\n      Expr.VectorInputBindingTypes inputTypes,\n      Expr left,\n      Expr right\n  )\n  {\n    return VectorMathProcessors.makeMathProcessor(\n        inputTypes,\n        left,\n        right,\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return Evals.asLong(left <= right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inputTypes),\n            right.buildVectorized(inputTypes),\n            inputTypes.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        }\n    );\n  }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/vector/VectorComparisonProcessors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"}],"commitId":"d0821de8540686eb64a9b3e22fe4a637b58920ef","commitMessage":"@@@support for vectorizing expressions with non-existent inputs.  more consistent type handling for non-vectorized expressions (#10499)\n\n* support for vectorizing expressions with non-existent inputs.  more consistent type handling for non-vectorized expressions\n\n* inspector\n\n* changes\n\n* more test\n\n* clean","date":"2020-10-27 10:55:24","modifiedFileCount":"56","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-03-17 02:46:50","codes":[{"authorDate":"2021-03-17 02:46:50","commitOrder":3,"curCode":"  public static <T> ExprVectorProcessor<T> greaterThan(\n      Expr.VectorInputBindingInspector inspector,\n      Expr left,\n      Expr right\n  )\n  {\n    return makeComparisonProcessor(\n        inspector,\n        left,\n        right,\n        () -> new LongOutStringsInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Nullable\n          @Override\n          Long processValue(@Nullable String leftVal, @Nullable String rightVal)\n          {\n            return Evals.asLong(Comparators.<String>naturalNullsFirst().compare(leftVal, rightVal) > 0);\n          }\n        },\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return Evals.asLong(left > right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        }\n    );\n  }\n","date":"2021-03-17 02:46:50","endLine":369,"groupId":"105371","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"greaterThan","params":"(Expr.VectorInputBindingInspectorinspector@Exprleft@Exprright)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/71/2b6b92464306b9a50ec7848c79294b2d5b09df.src","preCode":"  public static <T> ExprVectorProcessor<T> greaterThan(\n      Expr.VectorInputBindingInspector inspector,\n      Expr left,\n      Expr right\n  )\n  {\n    return VectorMathProcessors.makeMathProcessor(\n        inspector,\n        left,\n        right,\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return Evals.asLong(left > right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) > 0);\n          }\n        }\n    );\n  }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/vector/VectorComparisonProcessors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2021-03-17 02:46:50","commitOrder":3,"curCode":"  public static <T> ExprVectorProcessor<T> lessThanOrEqual(\n      Expr.VectorInputBindingInspector inspector,\n      Expr left,\n      Expr right\n  )\n  {\n    return makeComparisonProcessor(\n        inspector,\n        left,\n        right,\n        () -> new LongOutStringsInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Nullable\n          @Override\n          Long processValue(@Nullable String leftVal, @Nullable String rightVal)\n          {\n            return Evals.asLong(Comparators.<String>naturalNullsFirst().compare(leftVal, rightVal) <= 0);\n          }\n        },\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return Evals.asLong(left <= right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        }\n    );\n  }\n","date":"2021-03-17 02:46:50","endLine":443,"groupId":"105371","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"lessThanOrEqual","params":"(Expr.VectorInputBindingInspectorinspector@Exprleft@Exprright)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/71/2b6b92464306b9a50ec7848c79294b2d5b09df.src","preCode":"  public static <T> ExprVectorProcessor<T> lessThanOrEqual(\n      Expr.VectorInputBindingInspector inspector,\n      Expr left,\n      Expr right\n  )\n  {\n    return VectorMathProcessors.makeMathProcessor(\n        inspector,\n        left,\n        right,\n        () -> new LongOutLongsInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public long apply(long left, long right)\n          {\n            return Evals.asLong(left <= right);\n          }\n        },\n        () -> new DoubleOutLongDoubleInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(long left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        },\n        () -> new DoubleOutDoubleLongInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, long right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        },\n        () -> new DoubleOutDoublesInFunctionVectorProcessor(\n            left.buildVectorized(inspector),\n            right.buildVectorized(inspector),\n            inspector.getMaxVectorSize()\n        )\n        {\n          @Override\n          public double apply(double left, double right)\n          {\n            return Evals.asDouble(Double.compare(left, right) <= 0);\n          }\n        }\n    );\n  }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/vector/VectorComparisonProcessors.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":371,"status":"M"}],"commitId":"4cd4a22f87616ad6b4a722a8a47bad9ce25fa790","commitMessage":"@@@expression filter support for vectorized query engines (#10613)\n\n* expression filter support for vectorized query engines\n\n* remove unused codes\n\n* more tests\n\n* refactor.  more tests\n\n* suppress\n\n* more\n\n* more\n\n* more\n\n* oops.  i was wrong\n\n* comment\n\n* remove decorate.  object dimension selector.  more javadocs\n\n* style","date":"2021-03-17 02:46:50","modifiedFileCount":"48","status":"M","submitter":"Clint Wylie"}]
