[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testPickIPv6() throws Exception\n  {\n    final String ADDRESS = \"2001:0db8:0000:0000:0000:ff00:0042:8329\";\n    EasyMock.expect(serviceProvider.getInstance()).andReturn(instance).anyTimes();\n    EasyMock.expect(instance.getAddress()).andReturn(ADDRESS).anyTimes();\n    EasyMock.expect(instance.getPort()).andReturn(PORT).anyTimes();\n    EasyMock.expect(instance.getSslPort()).andReturn(-1).anyTimes();\n    EasyMock.replay(instance, serviceProvider);\n    Server server = serverDiscoverySelector.pick();\n    Assert.assertEquals(PORT, server.getPort());\n    Assert.assertEquals(ADDRESS, server.getAddress());\n    Assert.assertTrue(server.getHost().contains(Integer.toString(PORT)));\n    Assert.assertTrue(server.getHost().contains(ADDRESS));\n    Assert.assertEquals(\"http\", server.getScheme());\n    EasyMock.verify(instance, serviceProvider);\n    final URI uri = new URI(\n        server.getScheme(),\n        null,\n        server.getAddress(),\n        server.getPort(),\n        \"/druid/indexer/v1/action\",\n        null,\n        null\n    );\n    Assert.assertEquals(PORT, uri.getPort());\n    Assert.assertEquals(StringUtils.format(\"[%s]\", ADDRESS), uri.getHost());\n    Assert.assertEquals(\"http\", uri.getScheme());\n  }\n","date":"2018-08-31 00:56:26","endLine":167,"groupId":"16392","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPickIPv6","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c6/cf6516438f4810d0fdeccd097df1847e496923.src","preCode":"  public void testPickIPv6() throws Exception\n  {\n    final String ADDRESS = \"2001:0db8:0000:0000:0000:ff00:0042:8329\";\n    EasyMock.expect(serviceProvider.getInstance()).andReturn(instance).anyTimes();\n    EasyMock.expect(instance.getAddress()).andReturn(ADDRESS).anyTimes();\n    EasyMock.expect(instance.getPort()).andReturn(PORT).anyTimes();\n    EasyMock.expect(instance.getSslPort()).andReturn(-1).anyTimes();\n    EasyMock.replay(instance, serviceProvider);\n    Server server = serverDiscoverySelector.pick();\n    Assert.assertEquals(PORT, server.getPort());\n    Assert.assertEquals(ADDRESS, server.getAddress());\n    Assert.assertTrue(server.getHost().contains(Integer.toString(PORT)));\n    Assert.assertTrue(server.getHost().contains(ADDRESS));\n    Assert.assertEquals(\"http\", server.getScheme());\n    EasyMock.verify(instance, serviceProvider);\n    final URI uri = new URI(\n        server.getScheme(),\n        null,\n        server.getAddress(),\n        server.getPort(),\n        \"/druid/indexer/v1/action\",\n        null,\n        null\n    );\n    Assert.assertEquals(PORT, uri.getPort());\n    Assert.assertEquals(StringUtils.format(\"[%s]\", ADDRESS), uri.getHost());\n    Assert.assertEquals(\"http\", uri.getScheme());\n  }\n","realPath":"server/src/test/java/org/apache/druid/curator/discovery/ServerDiscoverySelectorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testPickIPv6Bracket() throws Exception\n  {\n    final String ADDRESS = \"[2001:0db8:0000:0000:0000:ff00:0042:8329]\";\n    EasyMock.expect(serviceProvider.getInstance()).andReturn(instance).anyTimes();\n    EasyMock.expect(instance.getAddress()).andReturn(ADDRESS).anyTimes();\n    EasyMock.expect(instance.getPort()).andReturn(PORT).anyTimes();\n    EasyMock.expect(instance.getSslPort()).andReturn(-1).anyTimes();\n    EasyMock.replay(instance, serviceProvider);\n    Server server = serverDiscoverySelector.pick();\n    Assert.assertEquals(PORT, server.getPort());\n    Assert.assertEquals(ADDRESS, server.getAddress());\n    Assert.assertTrue(server.getHost().contains(Integer.toString(PORT)));\n    Assert.assertTrue(server.getHost().contains(ADDRESS));\n    Assert.assertEquals(\"http\", server.getScheme());\n    EasyMock.verify(instance, serviceProvider);\n    final URI uri = new URI(\n        server.getScheme(),\n        null,\n        server.getAddress(),\n        server.getPort(),\n        \"/druid/indexer/v1/action\",\n        null,\n        null\n    );\n    Assert.assertEquals(PORT, uri.getPort());\n    Assert.assertEquals(ADDRESS, uri.getHost());\n    Assert.assertEquals(\"http\", uri.getScheme());\n  }\n","date":"2018-08-31 00:56:26","endLine":198,"groupId":"16392","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPickIPv6Bracket","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c6/cf6516438f4810d0fdeccd097df1847e496923.src","preCode":"  public void testPickIPv6Bracket() throws Exception\n  {\n    final String ADDRESS = \"[2001:0db8:0000:0000:0000:ff00:0042:8329]\";\n    EasyMock.expect(serviceProvider.getInstance()).andReturn(instance).anyTimes();\n    EasyMock.expect(instance.getAddress()).andReturn(ADDRESS).anyTimes();\n    EasyMock.expect(instance.getPort()).andReturn(PORT).anyTimes();\n    EasyMock.expect(instance.getSslPort()).andReturn(-1).anyTimes();\n    EasyMock.replay(instance, serviceProvider);\n    Server server = serverDiscoverySelector.pick();\n    Assert.assertEquals(PORT, server.getPort());\n    Assert.assertEquals(ADDRESS, server.getAddress());\n    Assert.assertTrue(server.getHost().contains(Integer.toString(PORT)));\n    Assert.assertTrue(server.getHost().contains(ADDRESS));\n    Assert.assertEquals(\"http\", server.getScheme());\n    EasyMock.verify(instance, serviceProvider);\n    final URI uri = new URI(\n        server.getScheme(),\n        null,\n        server.getAddress(),\n        server.getPort(),\n        \"/druid/indexer/v1/action\",\n        null,\n        null\n    );\n    Assert.assertEquals(PORT, uri.getPort());\n    Assert.assertEquals(ADDRESS, uri.getHost());\n    Assert.assertEquals(\"http\", uri.getScheme());\n  }\n","realPath":"server/src/test/java/org/apache/druid/curator/discovery/ServerDiscoverySelectorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-05-24 00:40:28","codes":[{"authorDate":"2019-05-24 00:40:28","commitOrder":2,"curCode":"  public void testPickIPv6() throws Exception\n  {\n    final String address = \"2001:0db8:0000:0000:0000:ff00:0042:8329\";\n    EasyMock.expect(serviceProvider.getInstance()).andReturn(instance).anyTimes();\n    EasyMock.expect(instance.getAddress()).andReturn(address).anyTimes();\n    EasyMock.expect(instance.getPort()).andReturn(PORT).anyTimes();\n    EasyMock.expect(instance.getSslPort()).andReturn(-1).anyTimes();\n    EasyMock.replay(instance, serviceProvider);\n    Server server = serverDiscoverySelector.pick();\n    Assert.assertEquals(PORT, server.getPort());\n    Assert.assertEquals(address, server.getAddress());\n    Assert.assertTrue(server.getHost().contains(Integer.toString(PORT)));\n    Assert.assertTrue(server.getHost().contains(address));\n    Assert.assertEquals(\"http\", server.getScheme());\n    EasyMock.verify(instance, serviceProvider);\n    final URI uri = new URI(\n        server.getScheme(),\n        null,\n        server.getAddress(),\n        server.getPort(),\n        \"/druid/indexer/v1/action\",\n        null,\n        null\n    );\n    Assert.assertEquals(PORT, uri.getPort());\n    Assert.assertEquals(StringUtils.format(\"[%s]\", address), uri.getHost());\n    Assert.assertEquals(\"http\", uri.getScheme());\n  }\n","date":"2019-05-24 00:40:28","endLine":167,"groupId":"10847","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testPickIPv6","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0d/0180725d1f7c3cd471c211515dbb8a594319ff.src","preCode":"  public void testPickIPv6() throws Exception\n  {\n    final String ADDRESS = \"2001:0db8:0000:0000:0000:ff00:0042:8329\";\n    EasyMock.expect(serviceProvider.getInstance()).andReturn(instance).anyTimes();\n    EasyMock.expect(instance.getAddress()).andReturn(ADDRESS).anyTimes();\n    EasyMock.expect(instance.getPort()).andReturn(PORT).anyTimes();\n    EasyMock.expect(instance.getSslPort()).andReturn(-1).anyTimes();\n    EasyMock.replay(instance, serviceProvider);\n    Server server = serverDiscoverySelector.pick();\n    Assert.assertEquals(PORT, server.getPort());\n    Assert.assertEquals(ADDRESS, server.getAddress());\n    Assert.assertTrue(server.getHost().contains(Integer.toString(PORT)));\n    Assert.assertTrue(server.getHost().contains(ADDRESS));\n    Assert.assertEquals(\"http\", server.getScheme());\n    EasyMock.verify(instance, serviceProvider);\n    final URI uri = new URI(\n        server.getScheme(),\n        null,\n        server.getAddress(),\n        server.getPort(),\n        \"/druid/indexer/v1/action\",\n        null,\n        null\n    );\n    Assert.assertEquals(PORT, uri.getPort());\n    Assert.assertEquals(StringUtils.format(\"[%s]\", ADDRESS), uri.getHost());\n    Assert.assertEquals(\"http\", uri.getScheme());\n  }\n","realPath":"server/src/test/java/org/apache/druid/curator/discovery/ServerDiscoverySelectorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2019-05-24 00:40:28","commitOrder":2,"curCode":"  public void testPickIPv6Bracket() throws Exception\n  {\n    final String address = \"[2001:0db8:0000:0000:0000:ff00:0042:8329]\";\n    EasyMock.expect(serviceProvider.getInstance()).andReturn(instance).anyTimes();\n    EasyMock.expect(instance.getAddress()).andReturn(address).anyTimes();\n    EasyMock.expect(instance.getPort()).andReturn(PORT).anyTimes();\n    EasyMock.expect(instance.getSslPort()).andReturn(-1).anyTimes();\n    EasyMock.replay(instance, serviceProvider);\n    Server server = serverDiscoverySelector.pick();\n    Assert.assertEquals(PORT, server.getPort());\n    Assert.assertEquals(address, server.getAddress());\n    Assert.assertTrue(server.getHost().contains(Integer.toString(PORT)));\n    Assert.assertTrue(server.getHost().contains(address));\n    Assert.assertEquals(\"http\", server.getScheme());\n    EasyMock.verify(instance, serviceProvider);\n    final URI uri = new URI(\n        server.getScheme(),\n        null,\n        server.getAddress(),\n        server.getPort(),\n        \"/druid/indexer/v1/action\",\n        null,\n        null\n    );\n    Assert.assertEquals(PORT, uri.getPort());\n    Assert.assertEquals(address, uri.getHost());\n    Assert.assertEquals(\"http\", uri.getScheme());\n  }\n","date":"2019-05-24 00:40:28","endLine":198,"groupId":"10847","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testPickIPv6Bracket","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0d/0180725d1f7c3cd471c211515dbb8a594319ff.src","preCode":"  public void testPickIPv6Bracket() throws Exception\n  {\n    final String ADDRESS = \"[2001:0db8:0000:0000:0000:ff00:0042:8329]\";\n    EasyMock.expect(serviceProvider.getInstance()).andReturn(instance).anyTimes();\n    EasyMock.expect(instance.getAddress()).andReturn(ADDRESS).anyTimes();\n    EasyMock.expect(instance.getPort()).andReturn(PORT).anyTimes();\n    EasyMock.expect(instance.getSslPort()).andReturn(-1).anyTimes();\n    EasyMock.replay(instance, serviceProvider);\n    Server server = serverDiscoverySelector.pick();\n    Assert.assertEquals(PORT, server.getPort());\n    Assert.assertEquals(ADDRESS, server.getAddress());\n    Assert.assertTrue(server.getHost().contains(Integer.toString(PORT)));\n    Assert.assertTrue(server.getHost().contains(ADDRESS));\n    Assert.assertEquals(\"http\", server.getScheme());\n    EasyMock.verify(instance, serviceProvider);\n    final URI uri = new URI(\n        server.getScheme(),\n        null,\n        server.getAddress(),\n        server.getPort(),\n        \"/druid/indexer/v1/action\",\n        null,\n        null\n    );\n    Assert.assertEquals(PORT, uri.getPort());\n    Assert.assertEquals(ADDRESS, uri.getHost());\n    Assert.assertEquals(\"http\", uri.getScheme());\n  }\n","realPath":"server/src/test/java/org/apache/druid/curator/discovery/ServerDiscoverySelectorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"}],"commitId":"26fad7e06a61ae76a670a0ced0690767ed76c6c7","commitMessage":"@@@Add checkstyle for \"Local variable names shouldn't start with capital\" (#7681)\n\n* Add checkstyle for \"Local variable names shouldn't start with capital\"\n\n* Adjust some local variables to constants\n\n* Replace StringUtils.LINE_SEPARATOR with System.lineSeparator()\n","date":"2019-05-24 00:40:28","modifiedFileCount":"13","status":"M","submitter":"Merlin Lee"}]
