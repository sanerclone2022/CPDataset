[{"authorTime":"2020-03-10 17:57:16","codes":[{"authorDate":"2020-03-10 17:57:16","commitOrder":2,"curCode":"  public void setUp() throws Exception\n  {\n    executorService = MoreExecutors.listeningDecorator(\n      Execs.multiThreaded(8, \"test_sql_resource_%s\")\n    );\n    scheduler = new QueryScheduler(5, new HiLoQueryLaningStrategy(40), new ServerConfig());\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, CalciteTests.TEST_AUTHORIZER_MAPPER);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    resource = new SqlResource(\n        JSON_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            new NoopServiceEmitter(),\n            testRequestLogger\n        )\n    );\n  }\n","date":"2020-03-10 17:57:16","endLine":179,"groupId":"12419","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/a35828559733967753c58eaa027fa48d39b19c.src","preCode":"  public void setUp() throws Exception\n  {\n    executorService = MoreExecutors.listeningDecorator(\n      Execs.multiThreaded(8, \"test_sql_resource_%s\")\n    );\n    scheduler = new QueryScheduler(5, new HiLoQueryLaningStrategy(40), new ServerConfig());\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, CalciteTests.TEST_AUTHORIZER_MAPPER);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    resource = new SqlResource(\n        JSON_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            new NoopServiceEmitter(),\n            testRequestLogger\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"MB"},{"authorDate":"2020-03-10 17:57:16","commitOrder":2,"curCode":"  private HttpServletRequest makeExpectedReq()\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","date":"2020-03-10 17:57:16","endLine":866,"groupId":"12419","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"makeExpectedReq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/a35828559733967753c58eaa027fa48d39b19c.src","preCode":"  private HttpServletRequest makeExpectedReq()\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":845,"status":"B"}],"commitId":"8b9fe6f58461f1fc3f453c14f1634f9e779aeb71","commitMessage":"@@@query laning and load shedding (#9407)\n\n* prototype\n\n* merge QueryScheduler and QueryManager\n\n* everything in its right place\n\n* adjustments\n\n* docs\n\n* fixes\n\n* doc fixes\n\n* use resilience4j instead of semaphore\n\n* more tests\n\n* simplify\n\n* checkstyle\n\n* spelling\n\n* oops heh\n\n* remove unused\n\n* simplify\n\n* concurrency tests\n\n* add SqlResource tests.  refactor error response\n\n* add json config tests\n\n* use LongAdder instead of AtomicLong\n\n* remove test only stuffs from scheduler\n\n* javadocs.  etc\n\n* style\n\n* partial review stuffs\n\n* adjust\n\n* review stuffs\n\n* more javadoc\n\n* error response documentation\n\n* spelling\n\n* preserve user specified lane for NoSchedulingStrategy\n\n* more test.  why not\n\n* doc adjustment\n\n* style\n\n* missed review for make a thing a constant\n\n* fixes and tests\n\n* fix test\n\n* Update docs/configuration/index.md\n\nCo-Authored-By: sthetland <steve.hetland@imply.io>\n\n* doc update\n\nCo-authored-by: sthetland <steve.hetland@imply.io>","date":"2020-03-10 17:57:16","modifiedFileCount":"26","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-03-10 17:57:16","codes":[{"authorDate":"2020-03-13 16:41:54","commitOrder":3,"curCode":"  public void setUp() throws Exception\n  {\n    executorService = MoreExecutors.listeningDecorator(\n      Execs.multiThreaded(8, \"test_sql_resource_%s\")\n    );\n    scheduler = new QueryScheduler(\n        5,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(40),\n        new ServerConfig()\n    );\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, CalciteTests.TEST_AUTHORIZER_MAPPER);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    resource = new SqlResource(\n        JSON_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            new NoopServiceEmitter(),\n            testRequestLogger\n        )\n    );\n  }\n","date":"2020-03-13 16:41:54","endLine":185,"groupId":"12419","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4e/462afaded35d4f5350ca0736fa29e818d19bea.src","preCode":"  public void setUp() throws Exception\n  {\n    executorService = MoreExecutors.listeningDecorator(\n      Execs.multiThreaded(8, \"test_sql_resource_%s\")\n    );\n    scheduler = new QueryScheduler(5, new HiLoQueryLaningStrategy(40), new ServerConfig());\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, CalciteTests.TEST_AUTHORIZER_MAPPER);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    resource = new SqlResource(\n        JSON_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            new NoopServiceEmitter(),\n            testRequestLogger\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2020-03-10 17:57:16","commitOrder":3,"curCode":"  private HttpServletRequest makeExpectedReq()\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","date":"2020-03-10 17:57:16","endLine":866,"groupId":"12419","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"makeExpectedReq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/a35828559733967753c58eaa027fa48d39b19c.src","preCode":"  private HttpServletRequest makeExpectedReq()\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":845,"status":"N"}],"commitId":"6afd55c8f4b49802d873ca181727231670abd566","commitMessage":"@@@threshold based automatic query prioritization (#9493)\n\n* threshold based automatic query prioritization\n\n* fixes\n\n* spelling and fixes\n\n* fix docs\n\n* spelling\n\n* checkstyle\n\n* adjustments\n\n* doc fix","date":"2020-03-13 16:41:54","modifiedFileCount":"13","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-03-10 17:57:16","codes":[{"authorDate":"2020-03-19 06:06:45","commitOrder":4,"curCode":"  public void setUp() throws Exception\n  {\n    final QueryScheduler scheduler = new QueryScheduler(\n        5,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(40),\n        new ServerConfig()\n    );\n\n    executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8, \"test_sql_resource_%s\"));\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(\n        conglomerate,\n        walker,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER\n    );\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    resource = new SqlResource(\n        JSON_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            new NoopServiceEmitter(),\n            testRequestLogger\n        )\n    );\n  }\n","date":"2020-03-19 06:06:45","endLine":187,"groupId":"12419","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ee/b91f8ce07554cff9b4a74aba42aceb801dd670.src","preCode":"  public void setUp() throws Exception\n  {\n    executorService = MoreExecutors.listeningDecorator(\n      Execs.multiThreaded(8, \"test_sql_resource_%s\")\n    );\n    scheduler = new QueryScheduler(\n        5,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(40),\n        new ServerConfig()\n    );\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, CalciteTests.TEST_AUTHORIZER_MAPPER);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    resource = new SqlResource(\n        JSON_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            new NoopServiceEmitter(),\n            testRequestLogger\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2020-03-10 17:57:16","commitOrder":4,"curCode":"  private HttpServletRequest makeExpectedReq()\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","date":"2020-03-10 17:57:16","endLine":866,"groupId":"12419","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"makeExpectedReq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/a35828559733967753c58eaa027fa48d39b19c.src","preCode":"  private HttpServletRequest makeExpectedReq()\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":845,"status":"N"}],"commitId":"1ef25a438fd9456f40f2adb36549eeaf86fef4f2","commitMessage":"@@@Broker: Add ability to inline subqueries. (#9533)\n\n* Broker: Add ability to inline subqueries.\n\nThe main changes:\n\n- ClientQuerySegmentWalker: Add ability to inline queries.\n- Query: Add \"getSubQueryId\" and \"withSubQueryId\" methods.\n- QueryMetrics: Add \"subQueryId\" dimension.\n- ServerConfig: Add new \"maxSubqueryRows\" parameter.  which is used by\n  ClientQuerySegmentWalker to limit how many rows can be inlined per\n  query.\n- IndexedTableJoinMatcher: Allow creating keys on top of unknown types. \n  by assuming they are strings. This is useful because not all types are\n  known for fields in query results.\n- InlineDataSource: Store RowSignature rather than component parts. Add\n  more zealous \"equals\" and \"hashCode\" methods to ease testing.\n- Moved QuerySegmentWalker test code from CalciteTests and\n  SpecificSegmentsQueryWalker in druid-sql to QueryStackTests in\n  druid-server. Use this to spin up a new ClientQuerySegmentWalkerTest.\n\n* Adjustments from CI.\n\n* Fix integration test.","date":"2020-03-19 06:06:45","modifiedFileCount":"46","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-03-10 17:57:16","codes":[{"authorDate":"2021-03-26 18:43:28","commitOrder":5,"curCode":"  public void setUp() throws Exception\n  {\n    final QueryScheduler scheduler = new QueryScheduler(\n        5,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(40),\n        new ServerConfig()\n    )\n    {\n      @Override\n      public <T> Sequence<T> run(Query<?> query, Sequence<T> resultSequence)\n      {\n        return super.run(\n            query,\n            new LazySequence<T>(() -> {\n              if (sleep) {\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n              }\n              return resultSequence;\n            })\n        );\n      }\n    };\n\n    executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8, \"test_sql_resource_%s\"));\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(\n        conglomerate,\n        walker,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER\n    );\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    resource = new SqlResource(\n        JSON_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            new NoopServiceEmitter(),\n            testRequestLogger\n        )\n    );\n  }\n","date":"2021-03-26 18:43:28","endLine":215,"groupId":"12419","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4b/44bc4a4bb2803b50eaeeb905b95e8bffb1e94d.src","preCode":"  public void setUp() throws Exception\n  {\n    final QueryScheduler scheduler = new QueryScheduler(\n        5,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(40),\n        new ServerConfig()\n    );\n\n    executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8, \"test_sql_resource_%s\"));\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(\n        conglomerate,\n        walker,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER\n    );\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    resource = new SqlResource(\n        JSON_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            new NoopServiceEmitter(),\n            testRequestLogger\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2020-03-10 17:57:16","commitOrder":5,"curCode":"  private HttpServletRequest makeExpectedReq()\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","date":"2020-03-10 17:57:16","endLine":866,"groupId":"12419","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"makeExpectedReq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/a35828559733967753c58eaa027fa48d39b19c.src","preCode":"  private HttpServletRequest makeExpectedReq()\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":845,"status":"N"}],"commitId":"bacad04aa29f797f80f484ead0e265912be0b9e5","commitMessage":"@@@make SqlResource laning test less sensitive to timing (#11032)\n\n* make laning test less sensitive to timing\n\n* style","date":"2021-03-26 18:43:28","modifiedFileCount":"1","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-03-10 17:57:16","codes":[{"authorDate":"2021-09-06 01:57:45","commitOrder":6,"curCode":"  public void setUp() throws Exception\n  {\n    final QueryScheduler scheduler = new QueryScheduler(\n        5,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(40),\n        new ServerConfig()\n    )\n    {\n      @Override\n      public <T> Sequence<T> run(Query<?> query, Sequence<T> resultSequence)\n      {\n        return super.run(\n            query,\n            new LazySequence<T>(() -> {\n              if (sleep) {\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n              }\n              return resultSequence;\n            })\n        );\n      }\n    };\n\n    executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8, \"test_sql_resource_%s\"));\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(\n        conglomerate,\n        walker,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER\n    );\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    lifecycleManager = new SqlLifecycleManager()\n    {\n      @Override\n      public void add(String sqlQueryId, SqlLifecycle lifecycle)\n      {\n        super.add(sqlQueryId, lifecycle);\n        if (lifecycleAddLatch != null) {\n          lifecycleAddLatch.countDown();\n        }\n      }\n    };\n    final ServiceEmitter emitter = new NoopServiceEmitter();\n    resource = new SqlResource(\n        JSON_MAPPER,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            emitter,\n            testRequestLogger,\n            scheduler\n        )\n        {\n          @Override\n          public SqlLifecycle factorize()\n          {\n            return new TestSqlLifecycle(\n                plannerFactory,\n                emitter,\n                testRequestLogger,\n                scheduler,\n                System.currentTimeMillis(),\n                System.nanoTime(),\n                validateAndAuthorizeLatchSupplier,\n                planLatchSupplier,\n                executeLatchSupplier\n            );\n          }\n        },\n        lifecycleManager\n    );\n  }\n","date":"2021-09-06 01:57:45","endLine":263,"groupId":"12419","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/f596adbdaab2d96bcd83e41fc1de166d07cb8a.src","preCode":"  public void setUp() throws Exception\n  {\n    final QueryScheduler scheduler = new QueryScheduler(\n        5,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(40),\n        new ServerConfig()\n    )\n    {\n      @Override\n      public <T> Sequence<T> run(Query<?> query, Sequence<T> resultSequence)\n      {\n        return super.run(\n            query,\n            new LazySequence<T>(() -> {\n              if (sleep) {\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n              }\n              return resultSequence;\n            })\n        );\n      }\n    };\n\n    executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8, \"test_sql_resource_%s\"));\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(\n        conglomerate,\n        walker,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER\n    );\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    resource = new SqlResource(\n        JSON_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            new NoopServiceEmitter(),\n            testRequestLogger\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2020-03-10 17:57:16","commitOrder":6,"curCode":"  private HttpServletRequest makeExpectedReq()\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","date":"2020-03-10 17:57:16","endLine":866,"groupId":"12419","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"makeExpectedReq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/a35828559733967753c58eaa027fa48d39b19c.src","preCode":"  private HttpServletRequest makeExpectedReq()\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":845,"status":"N"}],"commitId":"82049bbf0a6409c09889ba9b3ea6131c9da86705","commitMessage":"@@@Cancel API for sqls (#11643)\n\n* initial work\n\n* reduce lock in sqlLifecycle\n\n* Integration test for sql canceling\n\n* javadoc.  cleanup.  more tests\n\n* log level to debug\n\n* fix test\n\n* checkstyle\n\n* fix flaky test; address comments\n\n* rowTransformer\n\n* cancelled state\n\n* use lock\n\n* explode instead of noop\n\n* oops\n\n* unused import\n\n* less aggressive with state\n\n* fix calcite charset\n\n* don't emit metrics when you are not authorized","date":"2021-09-06 01:57:45","modifiedFileCount":"17","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-03-10 17:57:16","codes":[{"authorDate":"2021-09-15 06:59:05","commitOrder":7,"curCode":"  public void setUp() throws Exception\n  {\n    final QueryScheduler scheduler = new QueryScheduler(\n        5,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(40),\n        new ServerConfig()\n    )\n    {\n      @Override\n      public <T> Sequence<T> run(Query<?> query, Sequence<T> resultSequence)\n      {\n        return super.run(\n            query,\n            new LazySequence<T>(() -> {\n              if (sleep) {\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n              }\n              return resultSequence;\n            })\n        );\n      }\n    };\n\n    executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8, \"test_sql_resource_%s\"));\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(\n        conglomerate,\n        walker,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER\n    );\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    lifecycleManager = new SqlLifecycleManager()\n    {\n      @Override\n      public void add(String sqlQueryId, SqlLifecycle lifecycle)\n      {\n        super.add(sqlQueryId, lifecycle);\n        if (lifecycleAddLatch != null) {\n          lifecycleAddLatch.countDown();\n        }\n      }\n    };\n    final ServiceEmitter emitter = new NoopServiceEmitter();\n    resource = new SqlResource(\n        JSON_MAPPER,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            emitter,\n            testRequestLogger,\n            scheduler\n        )\n        {\n          @Override\n          public SqlLifecycle factorize()\n          {\n            return new TestSqlLifecycle(\n                plannerFactory,\n                emitter,\n                testRequestLogger,\n                scheduler,\n                System.currentTimeMillis(),\n                System.nanoTime(),\n                validateAndAuthorizeLatchSupplier,\n                planLatchSupplier,\n                executeLatchSupplier,\n                sequenceMapFnSupplier\n            );\n          }\n        },\n        lifecycleManager\n    );\n  }\n","date":"2021-09-15 06:59:05","endLine":267,"groupId":"12419","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/d68ef2ecce56d37f7d3d3e093e538f9b09e6a9.src","preCode":"  public void setUp() throws Exception\n  {\n    final QueryScheduler scheduler = new QueryScheduler(\n        5,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(40),\n        new ServerConfig()\n    )\n    {\n      @Override\n      public <T> Sequence<T> run(Query<?> query, Sequence<T> resultSequence)\n      {\n        return super.run(\n            query,\n            new LazySequence<T>(() -> {\n              if (sleep) {\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n              }\n              return resultSequence;\n            })\n        );\n      }\n    };\n\n    executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8, \"test_sql_resource_%s\"));\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(\n        conglomerate,\n        walker,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER\n    );\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    lifecycleManager = new SqlLifecycleManager()\n    {\n      @Override\n      public void add(String sqlQueryId, SqlLifecycle lifecycle)\n      {\n        super.add(sqlQueryId, lifecycle);\n        if (lifecycleAddLatch != null) {\n          lifecycleAddLatch.countDown();\n        }\n      }\n    };\n    final ServiceEmitter emitter = new NoopServiceEmitter();\n    resource = new SqlResource(\n        JSON_MAPPER,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            emitter,\n            testRequestLogger,\n            scheduler\n        )\n        {\n          @Override\n          public SqlLifecycle factorize()\n          {\n            return new TestSqlLifecycle(\n                plannerFactory,\n                emitter,\n                testRequestLogger,\n                scheduler,\n                System.currentTimeMillis(),\n                System.nanoTime(),\n                validateAndAuthorizeLatchSupplier,\n                planLatchSupplier,\n                executeLatchSupplier\n            );\n          }\n        },\n        lifecycleManager\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2020-03-10 17:57:16","commitOrder":7,"curCode":"  private HttpServletRequest makeExpectedReq()\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","date":"2020-03-10 17:57:16","endLine":866,"groupId":"12419","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"makeExpectedReq","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/a35828559733967753c58eaa027fa48d39b19c.src","preCode":"  private HttpServletRequest makeExpectedReq()\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":845,"status":"N"}],"commitId":"7220d0466bc31dda4b5396742ad08e18f9e01250","commitMessage":"@@@Fix truncation detectability for SQL array.  object formats. (#11685)\n\nThe SQL \"array\" and \"object\" formats are intended to return invalid JSON\n(lacking a ] terminator) if an error occurs midstream. This enables callers\nto detect truncated responses. But JsonGenerators.  by default.  close JSON\narrays even when not explicitly told to.\n\nThis patch disables automatic array closing.  which fixes the problem with\ntruncated response detection. It also adds tests for truncated responses\nfor all result formats.","date":"2021-09-15 06:59:05","modifiedFileCount":"3","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-09-15 18:32:19","codes":[{"authorDate":"2021-09-15 06:59:05","commitOrder":8,"curCode":"  public void setUp() throws Exception\n  {\n    final QueryScheduler scheduler = new QueryScheduler(\n        5,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(40),\n        new ServerConfig()\n    )\n    {\n      @Override\n      public <T> Sequence<T> run(Query<?> query, Sequence<T> resultSequence)\n      {\n        return super.run(\n            query,\n            new LazySequence<T>(() -> {\n              if (sleep) {\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n              }\n              return resultSequence;\n            })\n        );\n      }\n    };\n\n    executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8, \"test_sql_resource_%s\"));\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(\n        conglomerate,\n        walker,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER\n    );\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    lifecycleManager = new SqlLifecycleManager()\n    {\n      @Override\n      public void add(String sqlQueryId, SqlLifecycle lifecycle)\n      {\n        super.add(sqlQueryId, lifecycle);\n        if (lifecycleAddLatch != null) {\n          lifecycleAddLatch.countDown();\n        }\n      }\n    };\n    final ServiceEmitter emitter = new NoopServiceEmitter();\n    resource = new SqlResource(\n        JSON_MAPPER,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            emitter,\n            testRequestLogger,\n            scheduler\n        )\n        {\n          @Override\n          public SqlLifecycle factorize()\n          {\n            return new TestSqlLifecycle(\n                plannerFactory,\n                emitter,\n                testRequestLogger,\n                scheduler,\n                System.currentTimeMillis(),\n                System.nanoTime(),\n                validateAndAuthorizeLatchSupplier,\n                planLatchSupplier,\n                executeLatchSupplier,\n                sequenceMapFnSupplier\n            );\n          }\n        },\n        lifecycleManager\n    );\n  }\n","date":"2021-09-15 06:59:05","endLine":267,"groupId":"12419","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/d68ef2ecce56d37f7d3d3e093e538f9b09e6a9.src","preCode":"  public void setUp() throws Exception\n  {\n    final QueryScheduler scheduler = new QueryScheduler(\n        5,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(40),\n        new ServerConfig()\n    )\n    {\n      @Override\n      public <T> Sequence<T> run(Query<?> query, Sequence<T> resultSequence)\n      {\n        return super.run(\n            query,\n            new LazySequence<T>(() -> {\n              if (sleep) {\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n              }\n              return resultSequence;\n            })\n        );\n      }\n    };\n\n    executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8, \"test_sql_resource_%s\"));\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(\n        conglomerate,\n        walker,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER\n    );\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    lifecycleManager = new SqlLifecycleManager()\n    {\n      @Override\n      public void add(String sqlQueryId, SqlLifecycle lifecycle)\n      {\n        super.add(sqlQueryId, lifecycle);\n        if (lifecycleAddLatch != null) {\n          lifecycleAddLatch.countDown();\n        }\n      }\n    };\n    final ServiceEmitter emitter = new NoopServiceEmitter();\n    resource = new SqlResource(\n        JSON_MAPPER,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            emitter,\n            testRequestLogger,\n            scheduler\n        )\n        {\n          @Override\n          public SqlLifecycle factorize()\n          {\n            return new TestSqlLifecycle(\n                plannerFactory,\n                emitter,\n                testRequestLogger,\n                scheduler,\n                System.currentTimeMillis(),\n                System.nanoTime(),\n                validateAndAuthorizeLatchSupplier,\n                planLatchSupplier,\n                executeLatchSupplier,\n                sequenceMapFnSupplier\n            );\n          }\n        },\n        lifecycleManager\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"},{"authorDate":"2021-09-15 18:32:19","commitOrder":8,"curCode":"  private HttpServletRequest makeExpectedReq(AuthenticationResult authenticationResult)\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(authenticationResult)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(authenticationResult)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(authenticationResult)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","date":"2021-09-15 18:32:19","endLine":1282,"groupId":"2216","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"makeExpectedReq","params":"(AuthenticationResultauthenticationResult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/87/0342afb5c1a3f98595648f19620c2c9286a19b.src","preCode":"  private HttpServletRequest makeExpectedReq()\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1261,"status":"M"}],"commitId":"0cbd71ebda5888a1decafbbd1269cfa50a1c8065","commitMessage":"@@@Return forbidden when authorization fails for sql query canceling (#11710)\n\nSwitching http response code for authorization failures for sql query canceling to match to sql query posting.","date":"2021-09-15 18:32:19","modifiedFileCount":"2","status":"M","submitter":"Jihoon Son"},{"authorTime":"2021-09-15 18:32:19","codes":[{"authorDate":"2021-09-18 00:53:25","commitOrder":9,"curCode":"  public void setUp() throws Exception\n  {\n    final QueryScheduler scheduler = new QueryScheduler(\n        5,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(40),\n        new ServerConfig()\n    )\n    {\n      @Override\n      public <T> Sequence<T> run(Query<?> query, Sequence<T> resultSequence)\n      {\n        return super.run(\n            query,\n            new LazySequence<T>(() -> {\n              if (sleep) {\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n              }\n              return resultSequence;\n            })\n        );\n      }\n    };\n\n    executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8, \"test_sql_resource_%s\"));\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final DruidSchemaCatalog rootSchema = CalciteTests.createMockRootSchema(\n        conglomerate,\n        walker,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER\n    );\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    lifecycleManager = new SqlLifecycleManager()\n    {\n      @Override\n      public void add(String sqlQueryId, SqlLifecycle lifecycle)\n      {\n        super.add(sqlQueryId, lifecycle);\n        if (lifecycleAddLatch != null) {\n          lifecycleAddLatch.countDown();\n        }\n      }\n    };\n    final ServiceEmitter emitter = new NoopServiceEmitter();\n    resource = new SqlResource(\n        JSON_MAPPER,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            emitter,\n            testRequestLogger,\n            scheduler\n        )\n        {\n          @Override\n          public SqlLifecycle factorize()\n          {\n            return new TestSqlLifecycle(\n                plannerFactory,\n                emitter,\n                testRequestLogger,\n                scheduler,\n                System.currentTimeMillis(),\n                System.nanoTime(),\n                validateAndAuthorizeLatchSupplier,\n                planLatchSupplier,\n                executeLatchSupplier,\n                sequenceMapFnSupplier\n            );\n          }\n        },\n        lifecycleManager\n    );\n  }\n","date":"2021-09-18 00:53:25","endLine":268,"groupId":"101537","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c7/387ac6fb55d0c1f05091f8f4d8c7b8e75df585.src","preCode":"  public void setUp() throws Exception\n  {\n    final QueryScheduler scheduler = new QueryScheduler(\n        5,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(40),\n        new ServerConfig()\n    )\n    {\n      @Override\n      public <T> Sequence<T> run(Query<?> query, Sequence<T> resultSequence)\n      {\n        return super.run(\n            query,\n            new LazySequence<T>(() -> {\n              if (sleep) {\n                try {\n                  \r\n                  Thread.sleep(500);\n                }\n                catch (InterruptedException ignored) {\n                }\n              }\n              return resultSequence;\n            })\n        );\n      }\n    };\n\n    executorService = MoreExecutors.listeningDecorator(Execs.multiThreaded(8, \"test_sql_resource_%s\"));\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder(), scheduler);\n\n    final PlannerConfig plannerConfig = new PlannerConfig()\n    {\n      @Override\n      public boolean shouldSerializeComplexValues()\n      {\n        return false;\n      }\n    };\n    final SchemaPlus rootSchema = CalciteTests.createMockRootSchema(\n        conglomerate,\n        walker,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER\n    );\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT)\n            .anyTimes();\n    EasyMock.replay(req);\n\n    testRequestLogger = new TestRequestLogger();\n\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        rootSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper(),\n        CalciteTests.DRUID_SCHEMA_NAME\n    );\n\n    lifecycleManager = new SqlLifecycleManager()\n    {\n      @Override\n      public void add(String sqlQueryId, SqlLifecycle lifecycle)\n      {\n        super.add(sqlQueryId, lifecycle);\n        if (lifecycleAddLatch != null) {\n          lifecycleAddLatch.countDown();\n        }\n      }\n    };\n    final ServiceEmitter emitter = new NoopServiceEmitter();\n    resource = new SqlResource(\n        JSON_MAPPER,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        new SqlLifecycleFactory(\n            plannerFactory,\n            emitter,\n            testRequestLogger,\n            scheduler\n        )\n        {\n          @Override\n          public SqlLifecycle factorize()\n          {\n            return new TestSqlLifecycle(\n                plannerFactory,\n                emitter,\n                testRequestLogger,\n                scheduler,\n                System.currentTimeMillis(),\n                System.nanoTime(),\n                validateAndAuthorizeLatchSupplier,\n                planLatchSupplier,\n                executeLatchSupplier,\n                sequenceMapFnSupplier\n            );\n          }\n        },\n        lifecycleManager\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2021-09-15 18:32:19","commitOrder":9,"curCode":"  private HttpServletRequest makeExpectedReq(AuthenticationResult authenticationResult)\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(authenticationResult)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(authenticationResult)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(authenticationResult)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","date":"2021-09-15 18:32:19","endLine":1282,"groupId":"101537","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"makeExpectedReq","params":"(AuthenticationResultauthenticationResult)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/87/0342afb5c1a3f98595648f19620c2c9286a19b.src","preCode":"  private HttpServletRequest makeExpectedReq(AuthenticationResult authenticationResult)\n  {\n    HttpServletRequest req = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(req.getRemoteAddr()).andReturn(null).once();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(authenticationResult)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED))\n            .andReturn(null)\n            .anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(authenticationResult)\n            .anyTimes();\n    req.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(req.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT))\n            .andReturn(authenticationResult)\n            .anyTimes();\n    EasyMock.replay(req);\n    return req;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1261,"status":"N"}],"commitId":"392f0ca1b52ee66aa8b3affed58eb117bb44d910","commitMessage":"@@@refactor sql authorization to get resource type from schema.  resource type to be string (#11692)\n\n* refactor sql authorization to get resource type from schema.  refactor resource type from enum to string\n\n* information schema auth filtering adjustments\n\n* refactor\n\n* minor stuff\n\n* Update SqlResourceCollectorShuttle.java","date":"2021-09-18 00:53:25","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"}]
