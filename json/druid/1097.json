[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","date":"2018-08-31 00:56:26","endLine":222,"groupId":"5659","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOverlapMetricNameAndDim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6c/5c5d490c2a06fe93b827173011642e6bf08778.src","preCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testEmptyDatasource() throws Exception\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\n        \"dataSource cannot be null or empty. Please provide a dataSource.\"\n    );\n\n    DataSchema schema = new DataSchema(\n        \"\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":324,"groupId":"5497","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyDatasource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6c/5c5d490c2a06fe93b827173011642e6bf08778.src","preCode":"  public void testEmptyDatasource() throws Exception\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\n        \"dataSource cannot be null or empty. Please provide a dataSource.\"\n    );\n\n    DataSchema schema = new DataSchema(\n        \"\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-03-26 08:11:01","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","date":"2018-08-31 00:56:26","endLine":222,"groupId":"5659","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOverlapMetricNameAndDim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6c/5c5d490c2a06fe93b827173011642e6bf08778.src","preCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"N"},{"authorDate":"2019-03-26 08:11:01","commitOrder":2,"curCode":"  public void testEmptyDatasource()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\n        \"dataSource cannot be null or empty. Please provide a dataSource.\"\n    );\n\n    DataSchema schema = new DataSchema(\n        \"\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n  }\n","date":"2019-03-26 08:11:01","endLine":324,"groupId":"5497","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyDatasource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2e/ac08137185f5ba92254d6ea2eea6984c571a8d.src","preCode":"  public void testEmptyDatasource() throws Exception\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\n        \"dataSource cannot be null or empty. Please provide a dataSource.\"\n    );\n\n    DataSchema schema = new DataSchema(\n        \"\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"}],"commitId":"bca40dcdaf3177b95d01187f413e1c0c6865964b","commitMessage":"@@@Fix some IntelliJ inspections (#7273)\n\nPrepare TeamCity for IntelliJ 2018.3.1 upgrade. Mostly removed redundant exceptions declarations in `throws` clauses.","date":"2019-03-26 08:11:01","modifiedFileCount":"26","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-03-26 08:11:01","codes":[{"authorDate":"2020-04-07 07:02:50","commitOrder":3,"curCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        VALID_DATASOURCE_CHARS_NAME,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","date":"2020-04-07 07:02:50","endLine":232,"groupId":"5414","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testOverlapMetricNameAndDim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ff/081c598b70dbd94e2ef113d2ef95dd4de2fd15.src","preCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2019-03-26 08:11:01","commitOrder":3,"curCode":"  public void testEmptyDatasource()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\n        \"dataSource cannot be null or empty. Please provide a dataSource.\"\n    );\n\n    DataSchema schema = new DataSchema(\n        \"\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n  }\n","date":"2019-03-26 08:11:01","endLine":324,"groupId":"5497","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyDatasource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2e/ac08137185f5ba92254d6ea2eea6984c571a8d.src","preCode":"  public void testEmptyDatasource()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\n        \"dataSource cannot be null or empty. Please provide a dataSource.\"\n    );\n\n    DataSchema schema = new DataSchema(\n        \"\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"N"}],"commitId":"7bf1ebb0b86f3b5af224cc4ae56868a4d703a061","commitMessage":"@@@Add tests for valid and invalid datasource names (#9614)\n\n* Add tests for valid and invalid datasource names\n\n* code review\n\n* clean up dependencies","date":"2020-04-07 07:02:50","modifiedFileCount":"1","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2019-03-26 08:11:01","codes":[{"authorDate":"2020-04-08 00:47:18","commitOrder":4,"curCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","date":"2020-04-08 00:47:18","endLine":230,"groupId":"5414","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testOverlapMetricNameAndDim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8c/e50d3817b90d84d8cb2ce65890e7a31ea5ac7f.src","preCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        VALID_DATASOURCE_CHARS_NAME,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2019-03-26 08:11:01","commitOrder":4,"curCode":"  public void testEmptyDatasource()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\n        \"dataSource cannot be null or empty. Please provide a dataSource.\"\n    );\n\n    DataSchema schema = new DataSchema(\n        \"\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n  }\n","date":"2019-03-26 08:11:01","endLine":324,"groupId":"5497","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyDatasource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2e/ac08137185f5ba92254d6ea2eea6984c571a8d.src","preCode":"  public void testEmptyDatasource()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\n        \"dataSource cannot be null or empty. Please provide a dataSource.\"\n    );\n\n    DataSchema schema = new DataSchema(\n        \"\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"N"}],"commitId":"d267b1c414b9b55b129729692755273d2a35e304","commitMessage":"@@@check paths used for shuffle intermediary data manager get and delete (#9630)\n\n* check paths used for shuffle intermediary data manager get and delete\n\n* add test\n\n* newline\n\n* meh","date":"2020-04-08 00:47:18","modifiedFileCount":"10","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-05-09 12:53:39","codes":[{"authorDate":"2020-05-09 12:53:39","commitOrder":5,"curCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","date":"2020-05-09 12:53:39","endLine":234,"groupId":"17996","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testOverlapMetricNameAndDim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/116b4fe7481bd79f3d8221e1e7627d99cfec3a.src","preCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"},{"authorDate":"2020-05-09 12:53:39","commitOrder":5,"curCode":"  public void testEmptyDatasource()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\n        \"dataSource cannot be null or empty. Please provide a dataSource.\"\n    );\n\n    DataSchema schema = new DataSchema(\n        \"\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n  }\n","date":"2020-05-09 12:53:39","endLine":338,"groupId":"17798","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyDatasource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/116b4fe7481bd79f3d8221e1e7627d99cfec3a.src","preCode":"  public void testEmptyDatasource()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\n        \"dataSource cannot be null or empty. Please provide a dataSource.\"\n    );\n\n    DataSchema schema = new DataSchema(\n        \"\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"}],"commitId":"28be107a1c18ef1fd9fd268c8b04e232efb63695","commitMessage":"@@@add flag to flattenSpec to keep null columns (#9814)\n\n* add flag to flattenSpec to keep null columns\n\n* remove changes to inputFormat interface\n\n* add comment\n\n* change comment message\n\n* update web console e2e test\n\n* move keepNullColmns to JSONParseSpec\n\n* fix merge conflicts\n\n* fix tests\n\n* set keepNullColumns to false by default\n\n* fix lgtm\n\n* change Boolean to boolean.  add keepNullColumns to hash.  add tests for keepKeepNullColumns false + true with no nuulul columns\n\n* Add equals verifier tests","date":"2020-05-09 12:53:39","modifiedFileCount":"41","status":"M","submitter":"mcbrewster"},{"authorTime":"2020-05-09 12:53:39","codes":[{"authorDate":"2020-07-14 12:15:54","commitOrder":6,"curCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        IdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","date":"2020-07-14 12:15:54","endLine":234,"groupId":"17996","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testOverlapMetricNameAndDim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/13/bf27d2c1781d3ed6db3e3d17d12c760ca63d78.src","preCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"},{"authorDate":"2020-05-09 12:53:39","commitOrder":6,"curCode":"  public void testEmptyDatasource()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\n        \"dataSource cannot be null or empty. Please provide a dataSource.\"\n    );\n\n    DataSchema schema = new DataSchema(\n        \"\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n  }\n","date":"2020-05-09 12:53:39","endLine":338,"groupId":"17798","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyDatasource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/116b4fe7481bd79f3d8221e1e7627d99cfec3a.src","preCode":"  public void testEmptyDatasource()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\n        \"dataSource cannot be null or empty. Please provide a dataSource.\"\n    );\n\n    DataSchema schema = new DataSchema(\n        \"\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"N"}],"commitId":"e6c9142129f1462feabefb4b13aa8a037fbe793f","commitMessage":"@@@Add validation for authenticator and authorizer name (#10106)\n\n* Add validation for authorizer name\n\n* fix deps\n\n* add javadocs\n\n* Do not use resource filters\n\n* Fix BasicAuthenticatorResource as well\n\n* Add integration tests\n\n* fix test\n\n* fix","date":"2020-07-14 12:15:54","modifiedFileCount":"16","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2020-05-09 12:53:39","codes":[{"authorDate":"2021-04-13 10:03:15","commitOrder":7,"curCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        IdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\n        \"Cannot specify a column more than once: [metric1] seen in dimensions list, metricsSpec list\"\n    );\n\n    schema.getParser();\n  }\n","date":"2021-04-13 10:03:15","endLine":243,"groupId":"1097","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"testOverlapMetricNameAndDim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/90b6796414794a9c2db506b613b93c0f95224f.src","preCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        IdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"},{"authorDate":"2020-05-09 12:53:39","commitOrder":7,"curCode":"  public void testEmptyDatasource()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\n        \"dataSource cannot be null or empty. Please provide a dataSource.\"\n    );\n\n    DataSchema schema = new DataSchema(\n        \"\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n  }\n","date":"2020-05-09 12:53:39","endLine":338,"groupId":"1097","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptyDatasource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/116b4fe7481bd79f3d8221e1e7627d99cfec3a.src","preCode":"  public void testEmptyDatasource()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    expectedException.expect(CoreMatchers.instanceOf(IllegalArgumentException.class));\n    expectedException.expectMessage(\n        \"dataSource cannot be null or empty. Please provide a dataSource.\"\n    );\n\n    DataSchema schema = new DataSchema(\n        \"\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"N"}],"commitId":"c3faa24f269ad2e8fb7102255cb3738dd01e0536","commitMessage":"@@@DataSchema: Improve duplicate-column error message. (#11082)\n\n* DataSchema: Improve duplicate-column error message.\n\nNow.  when duplicate columns are specified.  the error message will include\ninformation about where those duplicate columns were seen. Also.  if there\nare multiple duplicate columns.  all will be listed in the error message\ninstead of just the first one encountered.\n\n* Fix style for checkstyle.\n\n* Further improve error message.","date":"2021-04-13 10:03:15","modifiedFileCount":"2","status":"M","submitter":"Gian Merlino"}]
