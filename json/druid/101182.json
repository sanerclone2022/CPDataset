[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(\"CONFIG\", ResourceType.CONFIG),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","date":"2018-08-31 00:56:26","endLine":70,"groupId":"14025","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"filter","params":"(ContainerRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2a/7d32c1f505d17e3cbdc5aefdcc713b4ba82c07.src","preCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(\"CONFIG\", ResourceType.CONFIG),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/security/ConfigResourceFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    final String taskId = Preconditions.checkNotNull(\n        request.getPathSegments()\n               .get(\n                   Iterables.indexOf(\n                       request.getPathSegments(),\n                       new Predicate<PathSegment>()\n                       {\n                         @Override\n                         public boolean apply(PathSegment input)\n                         {\n                           return \"task\".equals(input.getPath());\n                         }\n                       }\n                   ) + 1\n               ).getPath()\n    );\n\n    Optional<Task> taskOptional = taskStorageQueryAdapter.getTask(taskId);\n    if (!taskOptional.isPresent()) {\n      throw new WebApplicationException(\n          Response.status(Response.Status.BAD_REQUEST)\n                  .entity(StringUtils.format(\"Cannot find any task with id: [%s]\", taskId))\n                  .build()\n      );\n    }\n    final String dataSourceName = Preconditions.checkNotNull(taskOptional.get().getDataSource());\n\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(dataSourceName, ResourceType.DATASOURCE),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","date":"2018-08-31 00:56:26","endLine":112,"groupId":"14025","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"filter","params":"(ContainerRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/12/ef0b7b6bde5e182f5d69b23f96e33f28110f3a.src","preCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    final String taskId = Preconditions.checkNotNull(\n        request.getPathSegments()\n               .get(\n                   Iterables.indexOf(\n                       request.getPathSegments(),\n                       new Predicate<PathSegment>()\n                       {\n                         @Override\n                         public boolean apply(PathSegment input)\n                         {\n                           return \"task\".equals(input.getPath());\n                         }\n                       }\n                   ) + 1\n               ).getPath()\n    );\n\n    Optional<Task> taskOptional = taskStorageQueryAdapter.getTask(taskId);\n    if (!taskOptional.isPresent()) {\n      throw new WebApplicationException(\n          Response.status(Response.Status.BAD_REQUEST)\n                  .entity(StringUtils.format(\"Cannot find any task with id: [%s]\", taskId))\n                  .build()\n      );\n    }\n    final String dataSourceName = Preconditions.checkNotNull(taskOptional.get().getDataSource());\n\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(dataSourceName, ResourceType.DATASOURCE),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/security/TaskResourceFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-01-16 00:33:31","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(\"CONFIG\", ResourceType.CONFIG),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","date":"2018-08-31 00:56:26","endLine":70,"groupId":"14025","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"filter","params":"(ContainerRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2a/7d32c1f505d17e3cbdc5aefdcc713b4ba82c07.src","preCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(\"CONFIG\", ResourceType.CONFIG),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/security/ConfigResourceFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"},{"authorDate":"2019-01-16 00:33:31","commitOrder":2,"curCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    String taskId = Preconditions.checkNotNull(\n        request.getPathSegments()\n               .get(\n                   Iterables.indexOf(\n                       request.getPathSegments(),\n                       new Predicate<PathSegment>()\n                       {\n                         @Override\n                         public boolean apply(PathSegment input)\n                         {\n                           return \"task\".equals(input.getPath());\n                         }\n                       }\n                   ) + 1\n               ).getPath()\n    );\n    taskId = StringUtils.urlDecode(taskId);\n\n    Optional<Task> taskOptional = taskStorageQueryAdapter.getTask(taskId);\n    if (!taskOptional.isPresent()) {\n      throw new WebApplicationException(\n          Response.status(Response.Status.BAD_REQUEST)\n                  .entity(StringUtils.format(\"Cannot find any task with id: [%s]\", taskId))\n                  .build()\n      );\n    }\n    final String dataSourceName = Preconditions.checkNotNull(taskOptional.get().getDataSource());\n\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(dataSourceName, ResourceType.DATASOURCE),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","date":"2019-01-16 00:33:31","endLine":111,"groupId":"14025","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"filter","params":"(ContainerRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/1f8222d1f53afa57e9cc1d52f0f5b3fee82c3e.src","preCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    final String taskId = Preconditions.checkNotNull(\n        request.getPathSegments()\n               .get(\n                   Iterables.indexOf(\n                       request.getPathSegments(),\n                       new Predicate<PathSegment>()\n                       {\n                         @Override\n                         public boolean apply(PathSegment input)\n                         {\n                           return \"task\".equals(input.getPath());\n                         }\n                       }\n                   ) + 1\n               ).getPath()\n    );\n\n    Optional<Task> taskOptional = taskStorageQueryAdapter.getTask(taskId);\n    if (!taskOptional.isPresent()) {\n      throw new WebApplicationException(\n          Response.status(Response.Status.BAD_REQUEST)\n                  .entity(StringUtils.format(\"Cannot find any task with id: [%s]\", taskId))\n                  .build()\n      );\n    }\n    final String dataSourceName = Preconditions.checkNotNull(taskOptional.get().getDataSource());\n\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(dataSourceName, ResourceType.DATASOURCE),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/security/TaskResourceFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"8537a771b00ce53cf6f2f4f9070eb3cd5d50d632","commitMessage":"@@@Some fixes and tests for spaces/non-ASCII chars in datasource names (#6761)\n\n* Fixes and tests for spaces/non-ASCII datasource names\n\n* Some unit test fixes\n\n* Fix ITRealtimeIndexTaskTest\n\n* Checkstyle\n\n* TeamCity\n\n* PR comments\n","date":"2019-01-16 00:33:31","modifiedFileCount":"26","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2020-04-11 01:36:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":3,"curCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(\"CONFIG\", ResourceType.CONFIG),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","date":"2018-08-31 00:56:26","endLine":70,"groupId":"14025","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"filter","params":"(ContainerRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2a/7d32c1f505d17e3cbdc5aefdcc713b4ba82c07.src","preCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(\"CONFIG\", ResourceType.CONFIG),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/security/ConfigResourceFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"},{"authorDate":"2020-04-11 01:36:26","commitOrder":3,"curCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    String taskId = Preconditions.checkNotNull(\n        request.getPathSegments()\n               .get(\n                   Iterables.indexOf(\n                       request.getPathSegments(),\n                       new Predicate<PathSegment>()\n                       {\n                         @Override\n                         public boolean apply(PathSegment input)\n                         {\n                           return \"task\".equals(input.getPath());\n                         }\n                       }\n                   ) + 1\n               ).getPath()\n    );\n    taskId = StringUtils.urlDecode(taskId);\n    TaskIdUtils.validateId(\"taskId\", taskId);\n\n    Optional<Task> taskOptional = taskStorageQueryAdapter.getTask(taskId);\n    if (!taskOptional.isPresent()) {\n      throw new WebApplicationException(\n          Response.status(Response.Status.BAD_REQUEST)\n                  .entity(StringUtils.format(\"Cannot find any task with id: [%s]\", taskId))\n                  .build()\n      );\n    }\n    final String dataSourceName = Preconditions.checkNotNull(taskOptional.get().getDataSource());\n\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(dataSourceName, ResourceType.DATASOURCE),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","date":"2020-04-11 01:36:26","endLine":113,"groupId":"14025","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"filter","params":"(ContainerRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/04/2c2a2b6f5fc45ac921d5bb06f218c7ed877a59.src","preCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    String taskId = Preconditions.checkNotNull(\n        request.getPathSegments()\n               .get(\n                   Iterables.indexOf(\n                       request.getPathSegments(),\n                       new Predicate<PathSegment>()\n                       {\n                         @Override\n                         public boolean apply(PathSegment input)\n                         {\n                           return \"task\".equals(input.getPath());\n                         }\n                       }\n                   ) + 1\n               ).getPath()\n    );\n    taskId = StringUtils.urlDecode(taskId);\n\n    Optional<Task> taskOptional = taskStorageQueryAdapter.getTask(taskId);\n    if (!taskOptional.isPresent()) {\n      throw new WebApplicationException(\n          Response.status(Response.Status.BAD_REQUEST)\n                  .entity(StringUtils.format(\"Cannot find any task with id: [%s]\", taskId))\n                  .build()\n      );\n    }\n    final String dataSourceName = Preconditions.checkNotNull(taskOptional.get().getDataSource());\n\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(dataSourceName, ResourceType.DATASOURCE),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/security/TaskResourceFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"642fe838979fd3bc0890f53ef31737a0ed4354c1","commitMessage":"@@@Indexing Service validates externally received taskId (#9666)\n\nAddresses issues flagged by https://lgtm.com/rules/5970070/","date":"2020-04-11 01:36:26","modifiedFileCount":"2","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2020-07-14 12:15:54","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":4,"curCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(\"CONFIG\", ResourceType.CONFIG),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","date":"2018-08-31 00:56:26","endLine":70,"groupId":"14025","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"filter","params":"(ContainerRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2a/7d32c1f505d17e3cbdc5aefdcc713b4ba82c07.src","preCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(\"CONFIG\", ResourceType.CONFIG),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/security/ConfigResourceFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"},{"authorDate":"2020-07-14 12:15:54","commitOrder":4,"curCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    String taskId = Preconditions.checkNotNull(\n        request.getPathSegments()\n               .get(\n                   Iterables.indexOf(\n                       request.getPathSegments(),\n                       new Predicate<PathSegment>()\n                       {\n                         @Override\n                         public boolean apply(PathSegment input)\n                         {\n                           return \"task\".equals(input.getPath());\n                         }\n                       }\n                   ) + 1\n               ).getPath()\n    );\n    taskId = StringUtils.urlDecode(taskId);\n    IdUtils.validateId(\"taskId\", taskId);\n\n    Optional<Task> taskOptional = taskStorageQueryAdapter.getTask(taskId);\n    if (!taskOptional.isPresent()) {\n      throw new WebApplicationException(\n          Response.status(Response.Status.BAD_REQUEST)\n                  .entity(StringUtils.format(\"Cannot find any task with id: [%s]\", taskId))\n                  .build()\n      );\n    }\n    final String dataSourceName = Preconditions.checkNotNull(taskOptional.get().getDataSource());\n\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(dataSourceName, ResourceType.DATASOURCE),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","date":"2020-07-14 12:15:54","endLine":113,"groupId":"14025","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"filter","params":"(ContainerRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/51/b17f81def84542abdf6987758ad4f0e0c39b13.src","preCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    String taskId = Preconditions.checkNotNull(\n        request.getPathSegments()\n               .get(\n                   Iterables.indexOf(\n                       request.getPathSegments(),\n                       new Predicate<PathSegment>()\n                       {\n                         @Override\n                         public boolean apply(PathSegment input)\n                         {\n                           return \"task\".equals(input.getPath());\n                         }\n                       }\n                   ) + 1\n               ).getPath()\n    );\n    taskId = StringUtils.urlDecode(taskId);\n    TaskIdUtils.validateId(\"taskId\", taskId);\n\n    Optional<Task> taskOptional = taskStorageQueryAdapter.getTask(taskId);\n    if (!taskOptional.isPresent()) {\n      throw new WebApplicationException(\n          Response.status(Response.Status.BAD_REQUEST)\n                  .entity(StringUtils.format(\"Cannot find any task with id: [%s]\", taskId))\n                  .build()\n      );\n    }\n    final String dataSourceName = Preconditions.checkNotNull(taskOptional.get().getDataSource());\n\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(dataSourceName, ResourceType.DATASOURCE),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/security/TaskResourceFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"e6c9142129f1462feabefb4b13aa8a037fbe793f","commitMessage":"@@@Add validation for authenticator and authorizer name (#10106)\n\n* Add validation for authorizer name\n\n* fix deps\n\n* add javadocs\n\n* Do not use resource filters\n\n* Fix BasicAuthenticatorResource as well\n\n* Add integration tests\n\n* fix test\n\n* fix","date":"2020-07-14 12:15:54","modifiedFileCount":"16","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2020-12-07 14:35:11","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":5,"curCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(\"CONFIG\", ResourceType.CONFIG),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","date":"2018-08-31 00:56:26","endLine":70,"groupId":"14025","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"filter","params":"(ContainerRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2a/7d32c1f505d17e3cbdc5aefdcc713b4ba82c07.src","preCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(\"CONFIG\", ResourceType.CONFIG),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/security/ConfigResourceFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"},{"authorDate":"2020-12-07 14:35:11","commitOrder":5,"curCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    String taskId = Preconditions.checkNotNull(\n        request.getPathSegments()\n               .get(\n                   Iterables.indexOf(\n                       request.getPathSegments(),\n                       input -> \"task\".equals(input.getPath())\n                   ) + 1\n               ).getPath()\n    );\n\n    IdUtils.validateId(\"taskId\", taskId);\n\n    Optional<Task> taskOptional = taskStorageQueryAdapter.getTask(taskId);\n    if (!taskOptional.isPresent()) {\n      throw new WebApplicationException(\n          Response.status(Response.Status.BAD_REQUEST)\n                  .entity(StringUtils.format(\"Cannot find any task with id: [%s]\", taskId))\n                  .build()\n      );\n    }\n    final String dataSourceName = Preconditions.checkNotNull(taskOptional.get().getDataSource());\n\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(dataSourceName, ResourceType.DATASOURCE),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","date":"2020-12-07 14:35:11","endLine":104,"groupId":"14025","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"filter","params":"(ContainerRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/da/1e5c558ee7a65d8cbe9a52631f74f2f10355df.src","preCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    String taskId = Preconditions.checkNotNull(\n        request.getPathSegments()\n               .get(\n                   Iterables.indexOf(\n                       request.getPathSegments(),\n                       new Predicate<PathSegment>()\n                       {\n                         @Override\n                         public boolean apply(PathSegment input)\n                         {\n                           return \"task\".equals(input.getPath());\n                         }\n                       }\n                   ) + 1\n               ).getPath()\n    );\n    taskId = StringUtils.urlDecode(taskId);\n    IdUtils.validateId(\"taskId\", taskId);\n\n    Optional<Task> taskOptional = taskStorageQueryAdapter.getTask(taskId);\n    if (!taskOptional.isPresent()) {\n      throw new WebApplicationException(\n          Response.status(Response.Status.BAD_REQUEST)\n                  .entity(StringUtils.format(\"Cannot find any task with id: [%s]\", taskId))\n                  .build()\n      );\n    }\n    final String dataSourceName = Preconditions.checkNotNull(taskOptional.get().getDataSource());\n\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(dataSourceName, ResourceType.DATASOURCE),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/security/TaskResourceFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"b7641f644cc19a80b33b3607ef6ef23d977236c6","commitMessage":"@@@Two fixes related to encoding of % symbols. (#10645)\n\n* Two fixes related to encoding of % symbols.\n\n1) TaskResourceFilter: Don't double-decode task ids. request.getPathSegments()\n   returns already-decoded strings. Applying StringUtils.urlDecode on\n   top of that causes erroneous behavior with '%' characters.\n\n2) Update various ThreadFactoryBuilder name formats to escape '%'\n   characters. This fixes situations where substrings starting with '%'\n   are erroneously treated as format specifiers.\n\nITs are updated to include a '%' in extra.datasource.name.suffix.\n\n* Avoid String.replace.\n\n* Work around surefire bug.\n\n* Fix xml encoding.\n\n* Another try at the proper encoding.\n\n* Give up on the emojis.\n\n* Less ambitious testing.\n\n* Fix an additional problem.\n\n* Adjust encodeForFormat to return null if the input is null.","date":"2020-12-07 14:35:11","modifiedFileCount":"16","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-09-10 02:55:30","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":6,"curCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(\"CONFIG\", ResourceType.CONFIG),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","date":"2018-08-31 00:56:26","endLine":70,"groupId":"101182","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"filter","params":"(ContainerRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2a/7d32c1f505d17e3cbdc5aefdcc713b4ba82c07.src","preCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(\"CONFIG\", ResourceType.CONFIG),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/security/ConfigResourceFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"N"},{"authorDate":"2021-09-10 02:55:30","commitOrder":6,"curCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    String taskId = Preconditions.checkNotNull(\n        request.getPathSegments()\n               .get(\n                   Iterables.indexOf(\n                       request.getPathSegments(),\n                       input -> \"task\".equals(input.getPath())\n                   ) + 1\n               ).getPath()\n    );\n\n    IdUtils.validateId(\"taskId\", taskId);\n\n    Optional<Task> taskOptional = taskStorageQueryAdapter.getTask(taskId);\n    if (!taskOptional.isPresent()) {\n      throw new WebApplicationException(\n          Response.status(Response.Status.BAD_REQUEST)\n                  .entity(StringUtils.format(\"Cannot find any task with id: [%s]\", taskId))\n                  .build()\n      );\n    }\n    final String dataSourceName = Preconditions.checkNotNull(taskOptional.get().getDataSource());\n\n    \r\n    \r\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(dataSourceName, ResourceType.DATASOURCE),\n        Action.WRITE\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","date":"2021-09-10 02:55:30","endLine":107,"groupId":"101182","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"filter","params":"(ContainerRequestrequest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/8977c769f5a3a202420eb73a48c788a0d5aaea.src","preCode":"  public ContainerRequest filter(ContainerRequest request)\n  {\n    String taskId = Preconditions.checkNotNull(\n        request.getPathSegments()\n               .get(\n                   Iterables.indexOf(\n                       request.getPathSegments(),\n                       input -> \"task\".equals(input.getPath())\n                   ) + 1\n               ).getPath()\n    );\n\n    IdUtils.validateId(\"taskId\", taskId);\n\n    Optional<Task> taskOptional = taskStorageQueryAdapter.getTask(taskId);\n    if (!taskOptional.isPresent()) {\n      throw new WebApplicationException(\n          Response.status(Response.Status.BAD_REQUEST)\n                  .entity(StringUtils.format(\"Cannot find any task with id: [%s]\", taskId))\n                  .build()\n      );\n    }\n    final String dataSourceName = Preconditions.checkNotNull(taskOptional.get().getDataSource());\n\n    final ResourceAction resourceAction = new ResourceAction(\n        new Resource(dataSourceName, ResourceType.DATASOURCE),\n        getAction(request)\n    );\n\n    final Access authResult = AuthorizationUtils.authorizeResourceAction(\n        getReq(),\n        resourceAction,\n        getAuthorizerMapper()\n    );\n\n    if (!authResult.isAllowed()) {\n      throw new ForbiddenException(authResult.toString());\n    }\n\n    return request;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/security/TaskResourceFilter.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"6779c4652d531b4d2c7056a69660f4e318f4aef6","commitMessage":"@@@Require DATASOURCE WRITE access in SupervisorResourceFilter and TaskResourceFilter (#11680)\n\n* Require DATASOURCE WRITE access in SupervisorResourceFilter and TaskResourceFilter\n\n* Remove unused imports\n\n* Add SupervisorResourceFilterTest\n\n* Verify mocks in test","date":"2021-09-10 02:55:30","modifiedFileCount":"2","status":"M","submitter":"Kashif Faraz"}]
