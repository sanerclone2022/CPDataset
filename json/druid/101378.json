[{"authorTime":"2020-02-14 06:58:32","codes":[{"authorDate":"2020-02-14 06:58:32","commitOrder":1,"curCode":"  public void readOrFilter(Blackhole blackhole)\n  {\n    Filter filter = new NoBitmapSelectorFilter(\"dimSequential\", \"199\");\n    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(\"dimMultivalEnumerated2\", \"Corundum\"), new NoBitmapSelectorFilter(\"dimMultivalEnumerated\", \"Bar\")));\n    Filter orFilter = new OrFilter(Arrays.asList(filter, filter2));\n\n    StorageAdapter sa = new QueryableIndexStorageAdapter(qIndex);\n    Sequence<Cursor> cursors = makeCursors(sa, orFilter);\n    readCursors(cursors, blackhole);\n  }\n","date":"2020-02-14 06:58:32","endLine":368,"groupId":"11070","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"readOrFilter","params":"(Blackholeblackhole)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b5/2cde14809f7f1cd74c3e6aa3c53262d3919fe6.src","preCode":"  public void readOrFilter(Blackhole blackhole)\n  {\n    Filter filter = new NoBitmapSelectorFilter(\"dimSequential\", \"199\");\n    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(\"dimMultivalEnumerated2\", \"Corundum\"), new NoBitmapSelectorFilter(\"dimMultivalEnumerated\", \"Bar\")));\n    Filter orFilter = new OrFilter(Arrays.asList(filter, filter2));\n\n    StorageAdapter sa = new QueryableIndexStorageAdapter(qIndex);\n    Sequence<Cursor> cursors = makeCursors(sa, orFilter);\n    readCursors(cursors, blackhole);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/FilterPartitionBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"B"},{"authorDate":"2020-02-14 06:58:32","commitOrder":1,"curCode":"  public void readOrFilterCNF(Blackhole blackhole)\n  {\n    Filter filter = new NoBitmapSelectorFilter(\"dimSequential\", \"199\");\n    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(\"dimMultivalEnumerated2\", \"Corundum\"), new NoBitmapSelectorFilter(\"dimMultivalEnumerated\", \"Bar\")));\n    Filter orFilter = new OrFilter(Arrays.asList(filter, filter2));\n\n    StorageAdapter sa = new QueryableIndexStorageAdapter(qIndex);\n    Sequence<Cursor> cursors = makeCursors(sa, Filters.convertToCNF(orFilter));\n    readCursors(cursors, blackhole);\n  }\n","date":"2020-02-14 06:58:32","endLine":382,"groupId":"11070","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"readOrFilterCNF","params":"(Blackholeblackhole)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b5/2cde14809f7f1cd74c3e6aa3c53262d3919fe6.src","preCode":"  public void readOrFilterCNF(Blackhole blackhole)\n  {\n    Filter filter = new NoBitmapSelectorFilter(\"dimSequential\", \"199\");\n    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(\"dimMultivalEnumerated2\", \"Corundum\"), new NoBitmapSelectorFilter(\"dimMultivalEnumerated\", \"Bar\")));\n    Filter orFilter = new OrFilter(Arrays.asList(filter, filter2));\n\n    StorageAdapter sa = new QueryableIndexStorageAdapter(qIndex);\n    Sequence<Cursor> cursors = makeCursors(sa, Filters.convertToCNF(orFilter));\n    readCursors(cursors, blackhole);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/FilterPartitionBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"B"}],"commitId":"e9aebd994aa0e243446b4f76d819a503401104e3","commitMessage":"@@@Fix for building in Eclipse & VS Code. (#7481)\n\nFixes #6866\nReverse dependencies from /main/ to /test/\nAdd generated-test-sources to source path for Eclipse","date":"2020-02-14 06:58:32","modifiedFileCount":"1","status":"B","submitter":"Adam Peck"},{"authorTime":"2020-04-06 13:29:41","codes":[{"authorDate":"2020-02-14 06:58:32","commitOrder":2,"curCode":"  public void readOrFilter(Blackhole blackhole)\n  {\n    Filter filter = new NoBitmapSelectorFilter(\"dimSequential\", \"199\");\n    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(\"dimMultivalEnumerated2\", \"Corundum\"), new NoBitmapSelectorFilter(\"dimMultivalEnumerated\", \"Bar\")));\n    Filter orFilter = new OrFilter(Arrays.asList(filter, filter2));\n\n    StorageAdapter sa = new QueryableIndexStorageAdapter(qIndex);\n    Sequence<Cursor> cursors = makeCursors(sa, orFilter);\n    readCursors(cursors, blackhole);\n  }\n","date":"2020-02-14 06:58:32","endLine":368,"groupId":"11070","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"readOrFilter","params":"(Blackholeblackhole)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b5/2cde14809f7f1cd74c3e6aa3c53262d3919fe6.src","preCode":"  public void readOrFilter(Blackhole blackhole)\n  {\n    Filter filter = new NoBitmapSelectorFilter(\"dimSequential\", \"199\");\n    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(\"dimMultivalEnumerated2\", \"Corundum\"), new NoBitmapSelectorFilter(\"dimMultivalEnumerated\", \"Bar\")));\n    Filter orFilter = new OrFilter(Arrays.asList(filter, filter2));\n\n    StorageAdapter sa = new QueryableIndexStorageAdapter(qIndex);\n    Sequence<Cursor> cursors = makeCursors(sa, orFilter);\n    readCursors(cursors, blackhole);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/FilterPartitionBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"N"},{"authorDate":"2020-04-06 13:29:41","commitOrder":2,"curCode":"  public void readOrFilterCNF(Blackhole blackhole)\n  {\n    Filter filter = new NoBitmapSelectorFilter(\"dimSequential\", \"199\");\n    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(\"dimMultivalEnumerated2\", \"Corundum\"), new NoBitmapSelectorFilter(\"dimMultivalEnumerated\", \"Bar\")));\n    Filter orFilter = new OrFilter(Arrays.asList(filter, filter2));\n\n    StorageAdapter sa = new QueryableIndexStorageAdapter(qIndex);\n    Sequence<Cursor> cursors = makeCursors(sa, Filters.toCNF(orFilter));\n    readCursors(cursors, blackhole);\n  }\n","date":"2020-04-06 13:29:41","endLine":382,"groupId":"11070","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"readOrFilterCNF","params":"(Blackholeblackhole)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/54/7784e653f93ce1525ffa03ece7daf4a566c6f6.src","preCode":"  public void readOrFilterCNF(Blackhole blackhole)\n  {\n    Filter filter = new NoBitmapSelectorFilter(\"dimSequential\", \"199\");\n    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(\"dimMultivalEnumerated2\", \"Corundum\"), new NoBitmapSelectorFilter(\"dimMultivalEnumerated\", \"Bar\")));\n    Filter orFilter = new OrFilter(Arrays.asList(filter, filter2));\n\n    StorageAdapter sa = new QueryableIndexStorageAdapter(qIndex);\n    Sequence<Cursor> cursors = makeCursors(sa, Filters.convertToCNF(orFilter));\n    readCursors(cursors, blackhole);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/FilterPartitionBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"M"}],"commitId":"40e84a171b8be8e87db20b0c5c189aef1b860f41","commitMessage":"@@@Eliminate common subfilters when converting it to a CNF (#9608)\n\n","date":"2020-04-06 13:29:41","modifiedFileCount":"16","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-04-09 12:31:17","codes":[{"authorDate":"2020-02-14 06:58:32","commitOrder":3,"curCode":"  public void readOrFilter(Blackhole blackhole)\n  {\n    Filter filter = new NoBitmapSelectorFilter(\"dimSequential\", \"199\");\n    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(\"dimMultivalEnumerated2\", \"Corundum\"), new NoBitmapSelectorFilter(\"dimMultivalEnumerated\", \"Bar\")));\n    Filter orFilter = new OrFilter(Arrays.asList(filter, filter2));\n\n    StorageAdapter sa = new QueryableIndexStorageAdapter(qIndex);\n    Sequence<Cursor> cursors = makeCursors(sa, orFilter);\n    readCursors(cursors, blackhole);\n  }\n","date":"2020-02-14 06:58:32","endLine":368,"groupId":"101378","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"readOrFilter","params":"(Blackholeblackhole)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b5/2cde14809f7f1cd74c3e6aa3c53262d3919fe6.src","preCode":"  public void readOrFilter(Blackhole blackhole)\n  {\n    Filter filter = new NoBitmapSelectorFilter(\"dimSequential\", \"199\");\n    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(\"dimMultivalEnumerated2\", \"Corundum\"), new NoBitmapSelectorFilter(\"dimMultivalEnumerated\", \"Bar\")));\n    Filter orFilter = new OrFilter(Arrays.asList(filter, filter2));\n\n    StorageAdapter sa = new QueryableIndexStorageAdapter(qIndex);\n    Sequence<Cursor> cursors = makeCursors(sa, orFilter);\n    readCursors(cursors, blackhole);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/FilterPartitionBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"N"},{"authorDate":"2020-04-09 12:31:17","commitOrder":3,"curCode":"  public void readOrFilterCNF(Blackhole blackhole)\n  {\n    Filter filter = new NoBitmapSelectorFilter(\"dimSequential\", \"199\");\n    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(\"dimMultivalEnumerated2\", \"Corundum\"), new NoBitmapSelectorFilter(\"dimMultivalEnumerated\", \"Bar\")));\n    Filter orFilter = new OrFilter(Arrays.asList(filter, filter2));\n\n    StorageAdapter sa = new QueryableIndexStorageAdapter(qIndex);\n    Sequence<Cursor> cursors = makeCursors(sa, Filters.toCnf(orFilter));\n    readCursors(cursors, blackhole);\n  }\n","date":"2020-04-09 12:31:17","endLine":382,"groupId":"101378","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"readOrFilterCNF","params":"(Blackholeblackhole)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/51/2f1eb932db78c7cd698db8b77a973ad0ace003.src","preCode":"  public void readOrFilterCNF(Blackhole blackhole)\n  {\n    Filter filter = new NoBitmapSelectorFilter(\"dimSequential\", \"199\");\n    Filter filter2 = new AndFilter(Arrays.asList(new SelectorFilter(\"dimMultivalEnumerated2\", \"Corundum\"), new NoBitmapSelectorFilter(\"dimMultivalEnumerated\", \"Bar\")));\n    Filter orFilter = new OrFilter(Arrays.asList(filter, filter2));\n\n    StorageAdapter sa = new QueryableIndexStorageAdapter(qIndex);\n    Sequence<Cursor> cursors = makeCursors(sa, Filters.toCNF(orFilter));\n    readCursors(cursors, blackhole);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/FilterPartitionBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"M"}],"commitId":"a6790ff22a9d883d789f3b5de0da02b9d8d19b69","commitMessage":"@@@More optimize CNF conversion of filters (#9634)\n\n* More optimize CNF conversion of filters\n\n* update license\n\n* fix build\n\n* checkstyle\n\n* remove unnecessary code\n\n* split helper\n\n* license\n\n* checkstyle\n\n* add comments on cnf conversion","date":"2020-04-09 12:31:17","modifiedFileCount":"6","status":"M","submitter":"Jihoon Son"}]
