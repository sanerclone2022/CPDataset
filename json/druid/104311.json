[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTaskAddedOrUpdated1() throws Exception\n  {\n    Task task = NoopTask.create(\"task\");\n    List<Object> listenerNotificationsAccumulator = new ArrayList<>();\n    HttpRemoteTaskRunner taskRunner = createTaskRunnerForTestTaskAddedOrUpdated(\n        EasyMock.createStrictMock(TaskStorage.class),\n        listenerNotificationsAccumulator\n    );\n\n    WorkerHolder workerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(workerHolder.getWorker()).andReturn(new Worker(\"http\", \"worker\", \"127.0.0.1\", 1, \"v1\")).anyTimes();\n    workerHolder.setLastCompletedTaskTime(EasyMock.anyObject());\n    workerHolder.resetContinuouslyFailedTasksCount();\n    EasyMock.expect(workerHolder.getContinuouslyFailedTasksCount()).andReturn(0);\n    EasyMock.replay(workerHolder);\n\n    Future<TaskStatus> future = taskRunner.run(task);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getPendingTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1000, 1001)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    WorkerHolder rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\")).anyTimes();\n    rogueWorkerHolder.shutdownTask(task.getId());\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\")).anyTimes();\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.failure(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.success(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\")).anyTimes();\n    rogueWorkerHolder.shutdownTask(task.getId());\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\")).anyTimes();\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.failure(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    EasyMock.verify(workerHolder);\n\n    Assert.assertEquals(\n        listenerNotificationsAccumulator,\n        ImmutableList.of(\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1000, 1001)),\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1, 2)),\n            ImmutableList.of(task.getId(), TaskStatus.success(task.getId()))\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":1018,"groupId":"22896","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskAddedOrUpdated1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/73/09452adaa0ef961132121053aac282dac857ce.src","preCode":"  public void testTaskAddedOrUpdated1() throws Exception\n  {\n    Task task = NoopTask.create(\"task\");\n    List<Object> listenerNotificationsAccumulator = new ArrayList<>();\n    HttpRemoteTaskRunner taskRunner = createTaskRunnerForTestTaskAddedOrUpdated(\n        EasyMock.createStrictMock(TaskStorage.class),\n        listenerNotificationsAccumulator\n    );\n\n    WorkerHolder workerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(workerHolder.getWorker()).andReturn(new Worker(\"http\", \"worker\", \"127.0.0.1\", 1, \"v1\")).anyTimes();\n    workerHolder.setLastCompletedTaskTime(EasyMock.anyObject());\n    workerHolder.resetContinuouslyFailedTasksCount();\n    EasyMock.expect(workerHolder.getContinuouslyFailedTasksCount()).andReturn(0);\n    EasyMock.replay(workerHolder);\n\n    Future<TaskStatus> future = taskRunner.run(task);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getPendingTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1000, 1001)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    WorkerHolder rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\")).anyTimes();\n    rogueWorkerHolder.shutdownTask(task.getId());\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\")).anyTimes();\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.failure(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.success(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\")).anyTimes();\n    rogueWorkerHolder.shutdownTask(task.getId());\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker()).andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\")).anyTimes();\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.failure(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    EasyMock.verify(workerHolder);\n\n    Assert.assertEquals(\n        listenerNotificationsAccumulator,\n        ImmutableList.of(\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1000, 1001)),\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1, 2)),\n            ImmutableList.of(task.getId(), TaskStatus.success(task.getId()))\n        )\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":904,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTaskAddedOrUpdated2() throws Exception\n  {\n    Task task = NoopTask.create(\"task\");\n    List<Object> listenerNotificationsAccumulator = new ArrayList<>();\n    HttpRemoteTaskRunner taskRunner = createTaskRunnerForTestTaskAddedOrUpdated(\n        EasyMock.createStrictMock(TaskStorage.class),\n        listenerNotificationsAccumulator\n    );\n\n    Worker worker = new Worker(\"http\", \"localhost\", \"127.0.0.1\", 1, \"v1\");\n\n    WorkerHolder workerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(workerHolder.getWorker()).andReturn(worker).anyTimes();\n    workerHolder.setLastCompletedTaskTime(EasyMock.anyObject());\n    workerHolder.resetContinuouslyFailedTasksCount();\n    EasyMock.expect(workerHolder.getContinuouslyFailedTasksCount()).andReturn(0);\n    EasyMock.replay(workerHolder);\n\n    Future<TaskStatus> future = taskRunner.run(task);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getPendingTasks()).getTaskId());\n\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.success(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    EasyMock.verify(workerHolder);\n\n    Assert.assertEquals(\n        listenerNotificationsAccumulator,\n        ImmutableList.of(\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1, 2)),\n            ImmutableList.of(task.getId(), TaskStatus.success(task.getId()))\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":1064,"groupId":"9605","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTaskAddedOrUpdated2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/73/09452adaa0ef961132121053aac282dac857ce.src","preCode":"  public void testTaskAddedOrUpdated2() throws Exception\n  {\n    Task task = NoopTask.create(\"task\");\n    List<Object> listenerNotificationsAccumulator = new ArrayList<>();\n    HttpRemoteTaskRunner taskRunner = createTaskRunnerForTestTaskAddedOrUpdated(\n        EasyMock.createStrictMock(TaskStorage.class),\n        listenerNotificationsAccumulator\n    );\n\n    Worker worker = new Worker(\"http\", \"localhost\", \"127.0.0.1\", 1, \"v1\");\n\n    WorkerHolder workerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(workerHolder.getWorker()).andReturn(worker).anyTimes();\n    workerHolder.setLastCompletedTaskTime(EasyMock.anyObject());\n    workerHolder.resetContinuouslyFailedTasksCount();\n    EasyMock.expect(workerHolder.getContinuouslyFailedTasksCount()).andReturn(0);\n    EasyMock.replay(workerHolder);\n\n    Future<TaskStatus> future = taskRunner.run(task);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getPendingTasks()).getTaskId());\n\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.success(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    EasyMock.verify(workerHolder);\n\n    Assert.assertEquals(\n        listenerNotificationsAccumulator,\n        ImmutableList.of(\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1, 2)),\n            ImmutableList.of(task.getId(), TaskStatus.success(task.getId()))\n        )\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1025,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-10-18 03:57:19","codes":[{"authorDate":"2019-10-18 03:57:19","commitOrder":2,"curCode":"  public void testTaskAddedOrUpdated1() throws Exception\n  {\n    Task task = NoopTask.create(\"task\");\n    List<Object> listenerNotificationsAccumulator = new ArrayList<>();\n    HttpRemoteTaskRunner taskRunner = createTaskRunnerForTestTaskAddedOrUpdated(\n        EasyMock.createStrictMock(TaskStorage.class),\n        listenerNotificationsAccumulator\n    );\n\n    WorkerHolder workerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(workerHolder.getWorker()).andReturn(new Worker(\"http\", \"worker\", \"127.0.0.1\", 1, \"v1\", WorkerConfig.DEFAULT_CATEGORY)).anyTimes();\n    workerHolder.setLastCompletedTaskTime(EasyMock.anyObject());\n    workerHolder.resetContinuouslyFailedTasksCount();\n    EasyMock.expect(workerHolder.getContinuouslyFailedTasksCount()).andReturn(0);\n    EasyMock.replay(workerHolder);\n\n    Future<TaskStatus> future = taskRunner.run(task);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getPendingTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1000, 1001)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    WorkerHolder rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\", WorkerConfig.DEFAULT_CATEGORY))\n            .anyTimes();\n    rogueWorkerHolder.shutdownTask(task.getId());\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\", WorkerConfig.DEFAULT_CATEGORY))\n            .anyTimes();\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.failure(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.success(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\", WorkerConfig.DEFAULT_CATEGORY))\n            .anyTimes();\n    rogueWorkerHolder.shutdownTask(task.getId());\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\", WorkerConfig.DEFAULT_CATEGORY))\n            .anyTimes();\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.failure(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    EasyMock.verify(workerHolder);\n\n    Assert.assertEquals(\n        listenerNotificationsAccumulator,\n        ImmutableList.of(\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1000, 1001)),\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1, 2)),\n            ImmutableList.of(task.getId(), TaskStatus.success(task.getId()))\n        )\n    );\n  }\n","date":"2019-10-18 03:57:19","endLine":1082,"groupId":"22896","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskAddedOrUpdated1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/dc/87de699bdbbd4b71f1df3c23830c59322f2504.src","preCode":"  public void testTaskAddedOrUpdated1() throws Exception\n  {\n    Task task = NoopTask.create(\"task\");\n    List<Object> listenerNotificationsAccumulator = new ArrayList<>();\n    HttpRemoteTaskRunner taskRunner = createTaskRunnerForTestTaskAddedOrUpdated(\n        EasyMock.createStrictMock(TaskStorage.class),\n        listenerNotificationsAccumulator\n    );\n\n    WorkerHolder workerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(workerHolder.getWorker()).andReturn(new Worker(\"http\", \"worker\", \"127.0.0.1\", 1, \"v1\")).anyTimes();\n    workerHolder.setLastCompletedTaskTime(EasyMock.anyObject());\n    workerHolder.resetContinuouslyFailedTasksCount();\n    EasyMock.expect(workerHolder.getContinuouslyFailedTasksCount()).andReturn(0);\n    EasyMock.replay(workerHolder);\n\n    Future<TaskStatus> future = taskRunner.run(task);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getPendingTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1000, 1001)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    WorkerHolder rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\"))\n            .anyTimes();\n    rogueWorkerHolder.shutdownTask(task.getId());\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\"))\n            .anyTimes();\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.failure(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.success(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\"))\n            .anyTimes();\n    rogueWorkerHolder.shutdownTask(task.getId());\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\"))\n            .anyTimes();\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.failure(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    EasyMock.verify(workerHolder);\n\n    Assert.assertEquals(\n        listenerNotificationsAccumulator,\n        ImmutableList.of(\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1000, 1001)),\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1, 2)),\n            ImmutableList.of(task.getId(), TaskStatus.success(task.getId()))\n        )\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":960,"status":"M"},{"authorDate":"2019-10-18 03:57:19","commitOrder":2,"curCode":"  public void testTaskAddedOrUpdated2() throws Exception\n  {\n    Task task = NoopTask.create(\"task\");\n    List<Object> listenerNotificationsAccumulator = new ArrayList<>();\n    HttpRemoteTaskRunner taskRunner = createTaskRunnerForTestTaskAddedOrUpdated(\n        EasyMock.createStrictMock(TaskStorage.class),\n        listenerNotificationsAccumulator\n    );\n\n    Worker worker = new Worker(\"http\", \"localhost\", \"127.0.0.1\", 1, \"v1\", WorkerConfig.DEFAULT_CATEGORY);\n\n    WorkerHolder workerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(workerHolder.getWorker()).andReturn(worker).anyTimes();\n    workerHolder.setLastCompletedTaskTime(EasyMock.anyObject());\n    workerHolder.resetContinuouslyFailedTasksCount();\n    EasyMock.expect(workerHolder.getContinuouslyFailedTasksCount()).andReturn(0);\n    EasyMock.replay(workerHolder);\n\n    Future<TaskStatus> future = taskRunner.run(task);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getPendingTasks()).getTaskId());\n\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.success(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    EasyMock.verify(workerHolder);\n\n    Assert.assertEquals(\n        listenerNotificationsAccumulator,\n        ImmutableList.of(\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1, 2)),\n            ImmutableList.of(task.getId(), TaskStatus.success(task.getId()))\n        )\n    );\n  }\n","date":"2019-10-18 03:57:19","endLine":1128,"groupId":"9605","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTaskAddedOrUpdated2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/dc/87de699bdbbd4b71f1df3c23830c59322f2504.src","preCode":"  public void testTaskAddedOrUpdated2() throws Exception\n  {\n    Task task = NoopTask.create(\"task\");\n    List<Object> listenerNotificationsAccumulator = new ArrayList<>();\n    HttpRemoteTaskRunner taskRunner = createTaskRunnerForTestTaskAddedOrUpdated(\n        EasyMock.createStrictMock(TaskStorage.class),\n        listenerNotificationsAccumulator\n    );\n\n    Worker worker = new Worker(\"http\", \"localhost\", \"127.0.0.1\", 1, \"v1\");\n\n    WorkerHolder workerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(workerHolder.getWorker()).andReturn(worker).anyTimes();\n    workerHolder.setLastCompletedTaskTime(EasyMock.anyObject());\n    workerHolder.resetContinuouslyFailedTasksCount();\n    EasyMock.expect(workerHolder.getContinuouslyFailedTasksCount()).andReturn(0);\n    EasyMock.replay(workerHolder);\n\n    Future<TaskStatus> future = taskRunner.run(task);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getPendingTasks()).getTaskId());\n\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.success(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    EasyMock.verify(workerHolder);\n\n    Assert.assertEquals(\n        listenerNotificationsAccumulator,\n        ImmutableList.of(\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1, 2)),\n            ImmutableList.of(task.getId(), TaskStatus.success(task.getId()))\n        )\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1089,"status":"M"}],"commitId":"2c758ef5ff07891619b7ffedfb28dc31a6850c59","commitMessage":"@@@Support assign tasks to run on different categories of MiddleManagers (#7066)\n\n* Support assign tasks to run on different tiers of MiddleManagers\n\n* address comments\n\n* address comments\n\n* rename tier to category and docs\n\n* doc\n\n* fix doc\n\n* fix spelling errors\n\n* docs\n","date":"2019-10-18 03:57:19","modifiedFileCount":"27","status":"M","submitter":"Mingming Qiu"},{"authorTime":"2019-10-18 03:57:19","codes":[{"authorDate":"2021-08-03 03:11:28","commitOrder":3,"curCode":"  public void testTaskAddedOrUpdated1() throws Exception\n  {\n    Task task = NoopTask.create(\"task\");\n    List<Object> listenerNotificationsAccumulator = new ArrayList<>();\n    HttpRemoteTaskRunner taskRunner = createTaskRunnerForTestTaskAddedOrUpdated(\n        EasyMock.createStrictMock(TaskStorage.class),\n        listenerNotificationsAccumulator\n    );\n\n    WorkerHolder workerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(workerHolder.getWorker()).andReturn(new Worker(\"http\", \"worker\", \"127.0.0.1\", 1, \"v1\", WorkerConfig.DEFAULT_CATEGORY)).anyTimes();\n    workerHolder.setLastCompletedTaskTime(EasyMock.anyObject());\n    workerHolder.resetContinuouslyFailedTasksCount();\n    EasyMock.expect(workerHolder.getContinuouslyFailedTasksCount()).andReturn(0);\n    EasyMock.replay(workerHolder);\n\n    Future<TaskStatus> future = taskRunner.run(task);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getPendingTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1000, 1001)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    WorkerHolder rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\", WorkerConfig.DEFAULT_CATEGORY))\n            .anyTimes();\n    rogueWorkerHolder.shutdownTask(task.getId());\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\", WorkerConfig.DEFAULT_CATEGORY))\n            .anyTimes();\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.failure(task.getId(), \"Dummy task status failure err message\"),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.success(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\", WorkerConfig.DEFAULT_CATEGORY))\n            .anyTimes();\n    rogueWorkerHolder.shutdownTask(task.getId());\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\", WorkerConfig.DEFAULT_CATEGORY))\n            .anyTimes();\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.failure(task.getId(), \"Dummy task status failure for testing\"),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    EasyMock.verify(workerHolder);\n\n    Assert.assertEquals(\n        listenerNotificationsAccumulator,\n        ImmutableList.of(\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1000, 1001)),\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1, 2)),\n            ImmutableList.of(task.getId(), TaskStatus.success(task.getId()))\n        )\n    );\n  }\n","date":"2021-08-03 03:11:28","endLine":1143,"groupId":"104311","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testTaskAddedOrUpdated1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7e/eb50ee06053e9d81112e8385fed812a64c5ad6.src","preCode":"  public void testTaskAddedOrUpdated1() throws Exception\n  {\n    Task task = NoopTask.create(\"task\");\n    List<Object> listenerNotificationsAccumulator = new ArrayList<>();\n    HttpRemoteTaskRunner taskRunner = createTaskRunnerForTestTaskAddedOrUpdated(\n        EasyMock.createStrictMock(TaskStorage.class),\n        listenerNotificationsAccumulator\n    );\n\n    WorkerHolder workerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(workerHolder.getWorker()).andReturn(new Worker(\"http\", \"worker\", \"127.0.0.1\", 1, \"v1\", WorkerConfig.DEFAULT_CATEGORY)).anyTimes();\n    workerHolder.setLastCompletedTaskTime(EasyMock.anyObject());\n    workerHolder.resetContinuouslyFailedTasksCount();\n    EasyMock.expect(workerHolder.getContinuouslyFailedTasksCount()).andReturn(0);\n    EasyMock.replay(workerHolder);\n\n    Future<TaskStatus> future = taskRunner.run(task);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getPendingTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1000, 1001)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n\n    \r\n    WorkerHolder rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\", WorkerConfig.DEFAULT_CATEGORY))\n            .anyTimes();\n    rogueWorkerHolder.shutdownTask(task.getId());\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\", WorkerConfig.DEFAULT_CATEGORY))\n            .anyTimes();\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.failure(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getRunningTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.success(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\", WorkerConfig.DEFAULT_CATEGORY))\n            .anyTimes();\n    rogueWorkerHolder.shutdownTask(task.getId());\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.running(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    \r\n    rogueWorkerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(rogueWorkerHolder.getWorker())\n            .andReturn(new Worker(\"http\", \"rogue-worker\", \"127.0.0.1\", 5, \"v1\", WorkerConfig.DEFAULT_CATEGORY))\n            .anyTimes();\n    EasyMock.replay(rogueWorkerHolder);\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.failure(task.getId()),\n        TaskLocation.create(\"rogue-worker\", 1, 2)\n    ), rogueWorkerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n    EasyMock.verify(rogueWorkerHolder);\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    EasyMock.verify(workerHolder);\n\n    Assert.assertEquals(\n        listenerNotificationsAccumulator,\n        ImmutableList.of(\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1000, 1001)),\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1, 2)),\n            ImmutableList.of(task.getId(), TaskStatus.success(task.getId()))\n        )\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1021,"status":"M"},{"authorDate":"2019-10-18 03:57:19","commitOrder":3,"curCode":"  public void testTaskAddedOrUpdated2() throws Exception\n  {\n    Task task = NoopTask.create(\"task\");\n    List<Object> listenerNotificationsAccumulator = new ArrayList<>();\n    HttpRemoteTaskRunner taskRunner = createTaskRunnerForTestTaskAddedOrUpdated(\n        EasyMock.createStrictMock(TaskStorage.class),\n        listenerNotificationsAccumulator\n    );\n\n    Worker worker = new Worker(\"http\", \"localhost\", \"127.0.0.1\", 1, \"v1\", WorkerConfig.DEFAULT_CATEGORY);\n\n    WorkerHolder workerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(workerHolder.getWorker()).andReturn(worker).anyTimes();\n    workerHolder.setLastCompletedTaskTime(EasyMock.anyObject());\n    workerHolder.resetContinuouslyFailedTasksCount();\n    EasyMock.expect(workerHolder.getContinuouslyFailedTasksCount()).andReturn(0);\n    EasyMock.replay(workerHolder);\n\n    Future<TaskStatus> future = taskRunner.run(task);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getPendingTasks()).getTaskId());\n\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.success(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    EasyMock.verify(workerHolder);\n\n    Assert.assertEquals(\n        listenerNotificationsAccumulator,\n        ImmutableList.of(\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1, 2)),\n            ImmutableList.of(task.getId(), TaskStatus.success(task.getId()))\n        )\n    );\n  }\n","date":"2019-10-18 03:57:19","endLine":1128,"groupId":"104311","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTaskAddedOrUpdated2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/dc/87de699bdbbd4b71f1df3c23830c59322f2504.src","preCode":"  public void testTaskAddedOrUpdated2() throws Exception\n  {\n    Task task = NoopTask.create(\"task\");\n    List<Object> listenerNotificationsAccumulator = new ArrayList<>();\n    HttpRemoteTaskRunner taskRunner = createTaskRunnerForTestTaskAddedOrUpdated(\n        EasyMock.createStrictMock(TaskStorage.class),\n        listenerNotificationsAccumulator\n    );\n\n    Worker worker = new Worker(\"http\", \"localhost\", \"127.0.0.1\", 1, \"v1\", WorkerConfig.DEFAULT_CATEGORY);\n\n    WorkerHolder workerHolder = EasyMock.createMock(WorkerHolder.class);\n    EasyMock.expect(workerHolder.getWorker()).andReturn(worker).anyTimes();\n    workerHolder.setLastCompletedTaskTime(EasyMock.anyObject());\n    workerHolder.resetContinuouslyFailedTasksCount();\n    EasyMock.expect(workerHolder.getContinuouslyFailedTasksCount()).andReturn(0);\n    EasyMock.replay(workerHolder);\n\n    Future<TaskStatus> future = taskRunner.run(task);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getPendingTasks()).getTaskId());\n\n    taskRunner.taskAddedOrUpdated(TaskAnnouncement.create(\n        task,\n        TaskStatus.success(task.getId()),\n        TaskLocation.create(\"worker\", 1, 2)\n    ), workerHolder);\n    Assert.assertEquals(task.getId(), Iterables.getOnlyElement(taskRunner.getCompletedTasks()).getTaskId());\n\n    Assert.assertEquals(TaskState.SUCCESS, future.get().getStatusCode());\n\n    EasyMock.verify(workerHolder);\n\n    Assert.assertEquals(\n        listenerNotificationsAccumulator,\n        ImmutableList.of(\n            ImmutableList.of(task.getId(), TaskLocation.create(\"worker\", 1, 2)),\n            ImmutableList.of(task.getId(), TaskStatus.success(task.getId()))\n        )\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1089,"status":"N"}],"commitId":"a2da407b704db8eed85b97cd7c1d22541f2b1102","commitMessage":"@@@Add error msg to parallel task's TaskStatus (#11486)\n\n* Add error msg to parallel task's TaskStatus\n\n* Consolidate failure block\n\n* Add failure test\n\n* Make it fail\n\n* Add fail while stopped\n\n* Simplify hash task test using a runner that fails after so many runs (parameter)\n\n* Remove unthrown exception\n\n* Use runner names to identify phase\n\n* Added range partition kill test & fixed a timing bug with the custom runner\n\n* Forbidden api\n\n* Style\n\n* Unit test code cleanup\n\n* Added message to invalid state exception and improved readability  of the phase error messages for the parallel task failure unit tests","date":"2021-08-03 03:11:28","modifiedFileCount":"19","status":"M","submitter":"Agustin Gonzalez"}]
