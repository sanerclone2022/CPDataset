[{"authorTime":"2019-02-21 07:10:29","codes":[{"authorDate":"2019-03-09 09:54:05","commitOrder":3,"curCode":"  public void setup() throws IOException\n  {\n    segmentPuller = new TestSegmentPuller();\n    objectMapper = new DefaultObjectMapper()\n        .registerModule(\n            new SimpleModule().registerSubtypes(new NamedType(LocalLoadSpec.class, \"local\"), new NamedType(TestSegmentizerFactory.class, \"test\"))\n        )\n        .setInjectableValues(new Std().addValue(LocalDataSegmentPuller.class, segmentPuller));\n    indexIO = new IndexIO(objectMapper, () -> 0);\n    segmentCacheDir = temporaryFolder.newFolder();\n    segmentDeepStorageDir = temporaryFolder.newFolder();\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig().setPath(segmentCacheDir)\n            );\n          }\n        },\n        objectMapper\n    );\n    segmentManager = new SegmentManager(segmentLoader);\n    exec = Execs.multiThreaded(NUM_THREAD, \"SegmentManagerThreadSafetyTest-%d\");\n    EmittingLogger.registerEmitter(new NoopServiceEmitter());\n  }\n","date":"2019-03-09 09:54:05","endLine":117,"groupId":"139","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ab/78689751e4fd58ba09790f18aafe5b0228ee03.src","preCode":"  public void setup() throws IOException\n  {\n    segmentPuller = new TestSegmentPuller();\n    objectMapper = new DefaultObjectMapper()\n        .registerModule(\n            new SimpleModule().registerSubtypes(new NamedType(LocalLoadSpec.class, \"local\"), new NamedType(TestSegmentizerFactory.class, \"test\"))\n        )\n        .setInjectableValues(new Std().addValue(LocalDataSegmentPuller.class, segmentPuller));\n    indexIO = new IndexIO(objectMapper, () -> 0);\n    segmentCacheDir = temporaryFolder.newFolder();\n    segmentDeepStorageDir = temporaryFolder.newFolder();\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig().setPath(segmentCacheDir)\n            );\n          }\n        },\n        objectMapper\n    );\n    segmentManager = new SegmentManager(segmentLoader);\n    exec = Execs.multiThreaded(NUM_THREAD, \"SegmentManagerThreadSafetyTest-%d\");\n    EmittingLogger.registerEmitter(new NoopServiceEmitter());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/SegmentManagerThreadSafetyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"},{"authorDate":"2019-02-21 07:10:29","commitOrder":3,"curCode":"  public void setup() throws IOException\n  {\n    reportsFile = temporaryFolder.newFile(\n        StringUtils.format(\"IndexTaskTestReports-%s.json\", System.currentTimeMillis())\n    );\n\n    final File deepStorageDir = temporaryFolder.newFolder();\n    final File cacheDir = temporaryFolder.newFolder();\n\n    pusher = new LocalDataSegmentPusher(\n        new LocalDataSegmentPusherConfig()\n        {\n          @Override\n          public File getStorageDirectory()\n          {\n            return deepStorageDir;\n          }\n        }\n    )\n    {\n      @Override\n      public DataSegment push(final File dataSegmentFile, final DataSegment segment, final boolean useUniquePath)\n          throws IOException\n      {\n        final DataSegment returnSegment = super.push(dataSegmentFile, segment, useUniquePath);\n        segments.add(returnSegment);\n        return returnSegment;\n      }\n    };\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig().setPath(cacheDir)\n            );\n          }\n        },\n        jsonMapper\n    );\n    segments = new ArrayList<>();\n\n  }\n","date":"2019-02-21 07:10:29","endLine":216,"groupId":"14254","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/60/a3a87f8b761875b3cc4394e4632c4b2d9579e0.src","preCode":"  public void setup() throws IOException\n  {\n    reportsFile = temporaryFolder.newFile(\n        StringUtils.format(\"IndexTaskTestReports-%s.json\", System.currentTimeMillis())\n    );\n\n    final File deepStorageDir = temporaryFolder.newFolder();\n    final File cacheDir = temporaryFolder.newFolder();\n\n    pusher = new LocalDataSegmentPusher(\n        new LocalDataSegmentPusherConfig()\n        {\n          @Override\n          public File getStorageDirectory()\n          {\n            return deepStorageDir;\n          }\n        }\n    )\n    {\n      @Override\n      public DataSegment push(final File dataSegmentFile, final DataSegment segment, final boolean useUniquePath)\n          throws IOException\n      {\n        final DataSegment returnSegment = super.push(dataSegmentFile, segment, useUniquePath);\n        segments.add(returnSegment);\n        return returnSegment;\n      }\n    };\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig().setPath(cacheDir)\n            );\n          }\n        },\n        jsonMapper\n    );\n    segments = new ArrayList<>();\n\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"NB"}],"commitId":"9bebf113ba188dbac242dd7fcc74845e34105d7f","commitMessage":"@@@Fix race in historical when loading segments in parallel (#7203)\n\n* Fix race in historical when loading segments in parallel\n\n* revert unnecessary change\n\n* remove synchronized\n\n* add reference counting locking\n\n* fix build\n\n* fix comment\n","date":"2019-03-09 09:54:05","modifiedFileCount":"12","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-07-19 05:46:47","codes":[{"authorDate":"2019-07-19 05:46:47","commitOrder":4,"curCode":"  public void setup() throws IOException\n  {\n    segmentPuller = new TestSegmentPuller();\n    objectMapper = new DefaultObjectMapper()\n        .registerModule(\n            new SimpleModule().registerSubtypes(new NamedType(LocalLoadSpec.class, \"local\"), new NamedType(TestSegmentizerFactory.class, \"test\"))\n        )\n        .setInjectableValues(new Std().addValue(LocalDataSegmentPuller.class, segmentPuller));\n    indexIO = new IndexIO(objectMapper, () -> 0);\n    segmentCacheDir = temporaryFolder.newFolder();\n    segmentDeepStorageDir = temporaryFolder.newFolder();\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig(segmentCacheDir, null, null)\n            );\n          }\n        },\n        objectMapper\n    );\n    segmentManager = new SegmentManager(segmentLoader);\n    exec = Execs.multiThreaded(NUM_THREAD, \"SegmentManagerThreadSafetyTest-%d\");\n    EmittingLogger.registerEmitter(new NoopServiceEmitter());\n  }\n","date":"2019-07-19 05:46:47","endLine":117,"groupId":"139","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fd/d89d1962ca5350856bc46e490088786ee6e62b.src","preCode":"  public void setup() throws IOException\n  {\n    segmentPuller = new TestSegmentPuller();\n    objectMapper = new DefaultObjectMapper()\n        .registerModule(\n            new SimpleModule().registerSubtypes(new NamedType(LocalLoadSpec.class, \"local\"), new NamedType(TestSegmentizerFactory.class, \"test\"))\n        )\n        .setInjectableValues(new Std().addValue(LocalDataSegmentPuller.class, segmentPuller));\n    indexIO = new IndexIO(objectMapper, () -> 0);\n    segmentCacheDir = temporaryFolder.newFolder();\n    segmentDeepStorageDir = temporaryFolder.newFolder();\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig().setPath(segmentCacheDir)\n            );\n          }\n        },\n        objectMapper\n    );\n    segmentManager = new SegmentManager(segmentLoader);\n    exec = Execs.multiThreaded(NUM_THREAD, \"SegmentManagerThreadSafetyTest-%d\");\n    EmittingLogger.registerEmitter(new NoopServiceEmitter());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/SegmentManagerThreadSafetyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2019-07-19 05:46:47","commitOrder":4,"curCode":"  public void setup() throws IOException\n  {\n    reportsFile = temporaryFolder.newFile(\n        StringUtils.format(\"IndexTaskTestReports-%s.json\", System.currentTimeMillis())\n    );\n\n    final File deepStorageDir = temporaryFolder.newFolder();\n    final File cacheDir = temporaryFolder.newFolder();\n\n    pusher = new LocalDataSegmentPusher(\n        new LocalDataSegmentPusherConfig()\n        {\n          @Override\n          public File getStorageDirectory()\n          {\n            return deepStorageDir;\n          }\n        }\n    )\n    {\n      @Override\n      public DataSegment push(final File dataSegmentFile, final DataSegment segment, final boolean useUniquePath)\n          throws IOException\n      {\n        final DataSegment returnSegment = super.push(dataSegmentFile, segment, useUniquePath);\n        segments.add(returnSegment);\n        return returnSegment;\n      }\n    };\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig(cacheDir, null, null)\n            );\n          }\n        },\n        jsonMapper\n    );\n    segments = new ArrayList<>();\n\n  }\n","date":"2019-07-19 05:46:47","endLine":215,"groupId":"14254","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a8/f02e603ca8c598ce18ebf6a690d7c721a87482.src","preCode":"  public void setup() throws IOException\n  {\n    reportsFile = temporaryFolder.newFile(\n        StringUtils.format(\"IndexTaskTestReports-%s.json\", System.currentTimeMillis())\n    );\n\n    final File deepStorageDir = temporaryFolder.newFolder();\n    final File cacheDir = temporaryFolder.newFolder();\n\n    pusher = new LocalDataSegmentPusher(\n        new LocalDataSegmentPusherConfig()\n        {\n          @Override\n          public File getStorageDirectory()\n          {\n            return deepStorageDir;\n          }\n        }\n    )\n    {\n      @Override\n      public DataSegment push(final File dataSegmentFile, final DataSegment segment, final boolean useUniquePath)\n          throws IOException\n      {\n        final DataSegment returnSegment = super.push(dataSegmentFile, segment, useUniquePath);\n        segments.add(returnSegment);\n        return returnSegment;\n      }\n    };\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig().setPath(cacheDir)\n            );\n          }\n        },\n        jsonMapper\n    );\n    segments = new ArrayList<>();\n\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"c7eb7cd01837c48914ba284d08b6096b47c957b0","commitMessage":"@@@Add intermediary data server for shuffle (#8088)\n\n* Add intermediary data server for shuffle\n\n* javadoc\n\n* adjust timeout\n\n* resolved todo\n\n* fix test\n\n* style\n\n* address comments\n\n* rename to shuffleDataLocations\n\n* Address comments\n\n* bit adjustment StorageLocation\n\n* fix test\n\n* address comment & fix test\n\n* handle interrupted exception\n","date":"2019-07-19 05:46:47","modifiedFileCount":"29","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-07-25 08:35:46","codes":[{"authorDate":"2019-07-19 05:46:47","commitOrder":5,"curCode":"  public void setup() throws IOException\n  {\n    segmentPuller = new TestSegmentPuller();\n    objectMapper = new DefaultObjectMapper()\n        .registerModule(\n            new SimpleModule().registerSubtypes(new NamedType(LocalLoadSpec.class, \"local\"), new NamedType(TestSegmentizerFactory.class, \"test\"))\n        )\n        .setInjectableValues(new Std().addValue(LocalDataSegmentPuller.class, segmentPuller));\n    indexIO = new IndexIO(objectMapper, () -> 0);\n    segmentCacheDir = temporaryFolder.newFolder();\n    segmentDeepStorageDir = temporaryFolder.newFolder();\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig(segmentCacheDir, null, null)\n            );\n          }\n        },\n        objectMapper\n    );\n    segmentManager = new SegmentManager(segmentLoader);\n    exec = Execs.multiThreaded(NUM_THREAD, \"SegmentManagerThreadSafetyTest-%d\");\n    EmittingLogger.registerEmitter(new NoopServiceEmitter());\n  }\n","date":"2019-07-19 05:46:47","endLine":117,"groupId":"139","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fd/d89d1962ca5350856bc46e490088786ee6e62b.src","preCode":"  public void setup() throws IOException\n  {\n    segmentPuller = new TestSegmentPuller();\n    objectMapper = new DefaultObjectMapper()\n        .registerModule(\n            new SimpleModule().registerSubtypes(new NamedType(LocalLoadSpec.class, \"local\"), new NamedType(TestSegmentizerFactory.class, \"test\"))\n        )\n        .setInjectableValues(new Std().addValue(LocalDataSegmentPuller.class, segmentPuller));\n    indexIO = new IndexIO(objectMapper, () -> 0);\n    segmentCacheDir = temporaryFolder.newFolder();\n    segmentDeepStorageDir = temporaryFolder.newFolder();\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig(segmentCacheDir, null, null)\n            );\n          }\n        },\n        objectMapper\n    );\n    segmentManager = new SegmentManager(segmentLoader);\n    exec = Execs.multiThreaded(NUM_THREAD, \"SegmentManagerThreadSafetyTest-%d\");\n    EmittingLogger.registerEmitter(new NoopServiceEmitter());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/SegmentManagerThreadSafetyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"N"},{"authorDate":"2019-07-25 08:35:46","commitOrder":5,"curCode":"  public void setup() throws IOException\n  {\n    final File cacheDir = temporaryFolder.newFolder();\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig(cacheDir, null, null)\n            );\n          }\n        },\n        jsonMapper\n    );\n    taskRunner = new TestTaskRunner();\n  }\n","date":"2019-07-25 08:35:46","endLine":176,"groupId":"139","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/45/ced1688e1327635091e00a3a7d366dfc7b9133.src","preCode":"  public void setup() throws IOException\n  {\n    reportsFile = temporaryFolder.newFile(\n        StringUtils.format(\"IndexTaskTestReports-%s.json\", System.currentTimeMillis())\n    );\n\n    final File deepStorageDir = temporaryFolder.newFolder();\n    final File cacheDir = temporaryFolder.newFolder();\n\n    pusher = new LocalDataSegmentPusher(\n        new LocalDataSegmentPusherConfig()\n        {\n          @Override\n          public File getStorageDirectory()\n          {\n            return deepStorageDir;\n          }\n        }\n    )\n    {\n      @Override\n      public DataSegment push(final File dataSegmentFile, final DataSegment segment, final boolean useUniquePath)\n          throws IOException\n      {\n        final DataSegment returnSegment = super.push(dataSegmentFile, segment, useUniquePath);\n        segments.add(returnSegment);\n        return returnSegment;\n      }\n    };\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig(cacheDir, null, null)\n            );\n          }\n        },\n        jsonMapper\n    );\n    segments = new ArrayList<>();\n\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"db149462073d59e7563f0d3834e69d44a2bb4011","commitMessage":"@@@Add support minor compaction with segment locking (#7547)\n\n* Segment locking\n\n* Allow both timeChunk and segment lock in the same gruop\n\n* fix it test\n\n* Fix adding same chunk to atomicUpdateGroup\n\n* resolving todos\n\n* Fix segments to lock\n\n* fix segments to lock\n\n* fix kill task\n\n* resolving todos\n\n* resolving todos\n\n* fix teamcity\n\n* remove unused class\n\n* fix single map\n\n* resolving todos\n\n* fix build\n\n* fix SQLMetadataSegmentManager\n\n* fix findInputSegments\n\n* adding more tests\n\n* fixing task lock checks\n\n* add SegmentTransactionalOverwriteAction\n\n* changing publisher\n\n* fixing something\n\n* fix for perfect rollup\n\n* fix test\n\n* adjust package-lock.json\n\n* fix test\n\n* fix style\n\n* adding javadocs\n\n* remove unused classes\n\n* add more javadocs\n\n* unused import\n\n* fix test\n\n* fix test\n\n* Support forceTimeChunk context and force timeChunk lock for parallel index task if intervals are missing\n\n* fix travis\n\n* fix travis\n\n* unused import\n\n* spotbug\n\n* revert getMaxVersion\n\n* address comments\n\n* fix tc\n\n* add missing error handling\n\n* fix backward compatibility\n\n* unused import\n\n* Fix perf of versionedIntervalTimeline\n\n* fix timeline\n\n* fix tc\n\n* remove remaining todos\n\n* add comment for parallel index\n\n* fix javadoc and typos\n\n* typo\n\n* address comments\n","date":"2019-07-25 08:35:46","modifiedFileCount":"130","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-07-30 08:06:33","codes":[{"authorDate":"2019-07-19 05:46:47","commitOrder":6,"curCode":"  public void setup() throws IOException\n  {\n    segmentPuller = new TestSegmentPuller();\n    objectMapper = new DefaultObjectMapper()\n        .registerModule(\n            new SimpleModule().registerSubtypes(new NamedType(LocalLoadSpec.class, \"local\"), new NamedType(TestSegmentizerFactory.class, \"test\"))\n        )\n        .setInjectableValues(new Std().addValue(LocalDataSegmentPuller.class, segmentPuller));\n    indexIO = new IndexIO(objectMapper, () -> 0);\n    segmentCacheDir = temporaryFolder.newFolder();\n    segmentDeepStorageDir = temporaryFolder.newFolder();\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig(segmentCacheDir, null, null)\n            );\n          }\n        },\n        objectMapper\n    );\n    segmentManager = new SegmentManager(segmentLoader);\n    exec = Execs.multiThreaded(NUM_THREAD, \"SegmentManagerThreadSafetyTest-%d\");\n    EmittingLogger.registerEmitter(new NoopServiceEmitter());\n  }\n","date":"2019-07-19 05:46:47","endLine":117,"groupId":"139","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fd/d89d1962ca5350856bc46e490088786ee6e62b.src","preCode":"  public void setup() throws IOException\n  {\n    segmentPuller = new TestSegmentPuller();\n    objectMapper = new DefaultObjectMapper()\n        .registerModule(\n            new SimpleModule().registerSubtypes(new NamedType(LocalLoadSpec.class, \"local\"), new NamedType(TestSegmentizerFactory.class, \"test\"))\n        )\n        .setInjectableValues(new Std().addValue(LocalDataSegmentPuller.class, segmentPuller));\n    indexIO = new IndexIO(objectMapper, () -> 0);\n    segmentCacheDir = temporaryFolder.newFolder();\n    segmentDeepStorageDir = temporaryFolder.newFolder();\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig(segmentCacheDir, null, null)\n            );\n          }\n        },\n        objectMapper\n    );\n    segmentManager = new SegmentManager(segmentLoader);\n    exec = Execs.multiThreaded(NUM_THREAD, \"SegmentManagerThreadSafetyTest-%d\");\n    EmittingLogger.registerEmitter(new NoopServiceEmitter());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/SegmentManagerThreadSafetyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"N"},{"authorDate":"2019-07-30 08:06:33","commitOrder":6,"curCode":"  public void setup() throws IOException\n  {\n    appenderatorsManager = new TestAppenderatorsManager();\n\n    final File cacheDir = temporaryFolder.newFolder();\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig(cacheDir, null, null)\n            );\n          }\n        },\n        jsonMapper\n    );\n    taskRunner = new TestTaskRunner();\n  }\n","date":"2019-07-30 08:06:33","endLine":180,"groupId":"139","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d3/150aeb5249e06c4f038c9972b2d9b93ea8fa7f.src","preCode":"  public void setup() throws IOException\n  {\n    final File cacheDir = temporaryFolder.newFolder();\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig(cacheDir, null, null)\n            );\n          }\n        },\n        jsonMapper\n    );\n    taskRunner = new TestTaskRunner();\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"640b7afc1cee911a27de7bf938dda24a85ba1510","commitMessage":"@@@Add CliIndexer process type and initial task runner implementation (#8107)\n\n* Add CliIndexer process type and initial task runner implementation\n\n* Fix HttpRemoteTaskRunnerTest\n\n* Remove batch sanity check on PeonAppenderatorsManager\n\n* Fix paralle index tests\n\n* PR comments\n\n* Adjust Jersey resource logging\n\n* Additional cleanup\n\n* Fix SystemSchemaTest\n\n* Add comment to LocalDataSegmentPusherTest absolute path test\n\n* More PR comments\n\n* Use Server annotated with RemoteChatHandler\n\n* More PR comments\n\n* Checkstyle\n\n* PR comments\n\n* Add task shutdown to stopGracefully\n\n* Small cleanup\n\n* Compile fix\n\n* Address PR comments\n\n* Adjust TaskReportFileWriter and fix nits\n\n* Remove unnecessary closer\n\n* More PR comments\n\n* Minor adjustments\n\n* PR comments\n\n* ThreadingTaskRunner: cancel  task run future not shutdownFuture and remove thread from workitem\n","date":"2019-07-30 08:06:33","modifiedFileCount":"64","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2021-07-21 02:44:19","codes":[{"authorDate":"2021-07-21 02:44:19","commitOrder":7,"curCode":"  public void setup() throws IOException\n  {\n    segmentPuller = new TestSegmentPuller();\n    objectMapper = new DefaultObjectMapper()\n        .registerModule(\n            new SimpleModule().registerSubtypes(new NamedType(LocalLoadSpec.class, \"local\"), new NamedType(TestSegmentizerFactory.class, \"test\"))\n        )\n        .setInjectableValues(new Std().addValue(LocalDataSegmentPuller.class, segmentPuller));\n    indexIO = new IndexIO(objectMapper, () -> 0);\n    segmentCacheDir = temporaryFolder.newFolder();\n    segmentDeepStorageDir = temporaryFolder.newFolder();\n    segmentCacheManager = new SegmentLocalCacheManager(\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig(segmentCacheDir, null, null)\n            );\n          }\n        },\n        objectMapper\n    );\n    segmentManager = new SegmentManager(new SegmentLocalCacheLoader(segmentCacheManager, indexIO, objectMapper));\n    exec = Execs.multiThreaded(NUM_THREAD, \"SegmentManagerThreadSafetyTest-%d\");\n    EmittingLogger.registerEmitter(new NoopServiceEmitter());\n  }\n","date":"2021-07-21 02:44:19","endLine":119,"groupId":"10541","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/52/95b9dcde51e33fd905a5e59bf8e35ab1a3f97a.src","preCode":"  public void setup() throws IOException\n  {\n    segmentPuller = new TestSegmentPuller();\n    objectMapper = new DefaultObjectMapper()\n        .registerModule(\n            new SimpleModule().registerSubtypes(new NamedType(LocalLoadSpec.class, \"local\"), new NamedType(TestSegmentizerFactory.class, \"test\"))\n        )\n        .setInjectableValues(new Std().addValue(LocalDataSegmentPuller.class, segmentPuller));\n    indexIO = new IndexIO(objectMapper, () -> 0);\n    segmentCacheDir = temporaryFolder.newFolder();\n    segmentDeepStorageDir = temporaryFolder.newFolder();\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig(segmentCacheDir, null, null)\n            );\n          }\n        },\n        objectMapper\n    );\n    segmentManager = new SegmentManager(segmentLoader);\n    exec = Execs.multiThreaded(NUM_THREAD, \"SegmentManagerThreadSafetyTest-%d\");\n    EmittingLogger.registerEmitter(new NoopServiceEmitter());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/SegmentManagerThreadSafetyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2021-07-21 02:44:19","commitOrder":7,"curCode":"  public void setup() throws IOException\n  {\n    appenderatorsManager = new TestAppenderatorsManager();\n\n    final File cacheDir = temporaryFolder.newFolder();\n    segmentCacheManager = new SegmentLocalCacheManager(\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig(cacheDir, null, null)\n            );\n          }\n        },\n        jsonMapper\n    );\n    taskRunner = new TestTaskRunner();\n  }\n","date":"2021-07-21 02:44:19","endLine":207,"groupId":"10541","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f8/05b2c5ce247677e2665cfbfeba7b2350142693.src","preCode":"  public void setup() throws IOException\n  {\n    appenderatorsManager = new TestAppenderatorsManager();\n\n    final File cacheDir = temporaryFolder.newFolder();\n    segmentLoader = new SegmentLoaderLocalCacheManager(\n        indexIO,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return Collections.singletonList(\n                new StorageLocationConfig(cacheDir, null, null)\n            );\n          }\n        },\n        jsonMapper\n    );\n    taskRunner = new TestTaskRunner();\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"94c1671eaf7b050972602fdedcb1971cdbde692d","commitMessage":"@@@Split SegmentLoader into SegmentLoader and SegmentCacheManager (#11466)\n\nThis PR splits current SegmentLoader into SegmentLoader and SegmentCacheManager.\n\nSegmentLoader - this class is responsible for building the segment object but does not expose any methods for downloading.  cache space management.  etc. Default implementation delegates the download operations to SegmentCacheManager and only contains the logic for building segments once downloaded. . This class will be used in SegmentManager to construct Segment objects.\n\nSegmentCacheManager - this class manages the segment cache on the local disk. It fetches the segment files to the local disk.  can clean up the cache.  and in the future.  support reserve and release on cache space. [See https://github.com/Make SegmentLoader extensible and customizable #11398]. This class will be used in ingestion tasks such as compaction.  re-indexing where segment files need to be downloaded locally.","date":"2021-07-21 02:44:19","modifiedFileCount":"41","status":"M","submitter":"Abhishek Agarwal"}]
