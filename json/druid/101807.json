[{"authorTime":"2019-01-24 14:36:52","codes":[{"authorDate":"2019-01-24 14:36:52","commitOrder":1,"curCode":"  public void testFilterDoubleDimension() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1 FROM numfoo WHERE d1 = 1.7 LIMIT 1\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(QSS(Filtration.eternity()))\n                .columns(\"dim1\")\n                .filters(SELECTOR(\"d1\", \"1.7\", null))\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .limit(1)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\"}\n        )\n    );\n  }\n","date":"2019-01-24 14:36:52","endLine":7563,"groupId":"10090","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterDoubleDimension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/46/aed6e589ef2b6cf2ce1dc43cfa4b56dbe499d9.src","preCode":"  public void testFilterDoubleDimension() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1 FROM numfoo WHERE d1 = 1.7 LIMIT 1\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(QSS(Filtration.eternity()))\n                .columns(\"dim1\")\n                .filters(SELECTOR(\"d1\", \"1.7\", null))\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .limit(1)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7544,"status":"B"},{"authorDate":"2019-01-24 14:36:52","commitOrder":1,"curCode":"  public void testFilterLongDimension() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1 FROM numfoo WHERE l1 = 7 LIMIT 1\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(QSS(Filtration.eternity()))\n                .columns(\"dim1\")\n                .filters(SELECTOR(\"l1\", \"7\", null))\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .limit(1)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"}\n        )\n    );\n  }\n","date":"2019-01-24 14:36:52","endLine":7585,"groupId":"10090","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterLongDimension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/46/aed6e589ef2b6cf2ce1dc43cfa4b56dbe499d9.src","preCode":"  public void testFilterLongDimension() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1 FROM numfoo WHERE l1 = 7 LIMIT 1\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(QSS(Filtration.eternity()))\n                .columns(\"dim1\")\n                .filters(SELECTOR(\"l1\", \"7\", null))\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .limit(1)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7566,"status":"B"}],"commitId":"66f64cd8bdf3a742d3d6a812b7560a9ffc0c28b8","commitMessage":"@@@fix long/float/double dimension filtering for columns with nulls (#6906)\n\n* fix long. float.  double dimension filtering when sql compatible null handling is enabled and the column has null values\n\n* revert unintended change\n\n* fix tests\n","date":"2019-01-24 14:36:52","modifiedFileCount":"6","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testFilterDoubleDimension() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1 FROM numfoo WHERE d1 = 1.7 LIMIT 1\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"dim1\")\n                .filters(selector(\"d1\", \"1.7\", null))\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .limit(1)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\"}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":7578,"groupId":"10090","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterDoubleDimension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testFilterDoubleDimension() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1 FROM numfoo WHERE d1 = 1.7 LIMIT 1\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(QSS(Filtration.eternity()))\n                .columns(\"dim1\")\n                .filters(SELECTOR(\"d1\", \"1.7\", null))\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .limit(1)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7559,"status":"M"},{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testFilterLongDimension() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1 FROM numfoo WHERE l1 = 7 LIMIT 1\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"dim1\")\n                .filters(selector(\"l1\", \"7\", null))\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .limit(1)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":7600,"groupId":"10090","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterLongDimension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testFilterLongDimension() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1 FROM numfoo WHERE l1 = 7 LIMIT 1\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(QSS(Filtration.eternity()))\n                .columns(\"dim1\")\n                .filters(SELECTOR(\"l1\", \"7\", null))\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .limit(1)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7581,"status":"M"}],"commitId":"8b803cbc22b15799fd0526de8d6d0eea155ad733","commitMessage":"@@@Added checkstyle for \"Methods starting with Capital Letters\"  (#7118)\n\n* Added checkstyle for \"Methods starting with Capital Letters\" and changed the method names violating this.\n\n* Un-abbreviate the method names in the calcite tests\n\n* Fixed checkstyle errors\n\n* Changed asserts position in the code\n","date":"2019-02-24 12:10:31","modifiedFileCount":"24","status":"M","submitter":"Himanshu Pandey"},{"authorTime":"2019-03-29 05:37:09","codes":[{"authorDate":"2019-03-29 05:37:09","commitOrder":3,"curCode":"  public void testFilterDoubleDimension() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1 FROM numfoo WHERE d1 = 1.7 LIMIT 1\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"dim1\")\n                .filters(selector(\"d1\", \"1.7\", null))\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .limit(1)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\"}\n        )\n    );\n  }\n","date":"2019-03-29 05:37:09","endLine":7602,"groupId":"101807","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterDoubleDimension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/7887cc5b629c34eac2672f4aae9bc27d95fa4b.src","preCode":"  public void testFilterDoubleDimension() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1 FROM numfoo WHERE d1 = 1.7 LIMIT 1\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"dim1\")\n                .filters(selector(\"d1\", \"1.7\", null))\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .limit(1)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7583,"status":"M"},{"authorDate":"2019-03-29 05:37:09","commitOrder":3,"curCode":"  public void testFilterLongDimension() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1 FROM numfoo WHERE l1 = 7 LIMIT 1\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"dim1\")\n                .filters(selector(\"l1\", \"7\", null))\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .limit(1)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"}\n        )\n    );\n  }\n","date":"2019-03-29 05:37:09","endLine":7624,"groupId":"101807","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterLongDimension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/7887cc5b629c34eac2672f4aae9bc27d95fa4b.src","preCode":"  public void testFilterLongDimension() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1 FROM numfoo WHERE l1 = 7 LIMIT 1\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"dim1\")\n                .filters(selector(\"l1\", \"7\", null))\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .limit(1)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7605,"status":"M"}],"commitId":"ad7862c58ac7f05cb28108543c017e2b186d1031","commitMessage":"@@@Time Ordering On Scans (#7133)\n\n* Moved Scan Builder to Druids class and started on Scan Benchmark setup\n\n* Need to form queries\n\n* It runs.\n\n* Stuff for time-ordered scan query\n\n* Move ScanResultValue timestamp comparator to a separate class for testing\n\n* Licensing stuff\n\n* Change benchmark\n\n* Remove todos\n\n* Added TimestampComparator tests\n\n* Change number of benchmark iterations\n\n* Added time ordering to the scan benchmark\n\n* Changed benchmark params\n\n* More param changes\n\n* Benchmark param change\n\n* Made Jon's changes and removed TODOs\n\n* Broke some long lines into two lines\n\n* nit\n\n* Decrease segment size for less memory usage\n\n* Wrote tests for heapsort scan result values and fixed bug where iterator\nwasn't returning elements in correct order\n\n* Wrote more tests for scan result value sort\n\n* Committing a param change to kick teamcity\n\n* Fixed codestyle and forbidden API errors\n\n* .\n\n* Improved conciseness\n\n* nit\n\n* Created an error message for when someone tries to time order a result\nset > threshold limit\n\n* Set to spaces over tabs\n\n* Fixing tests WIP\n\n* Fixed failing calcite tests\n\n* Kicking travis with change to benchmark param\n\n* added all query types to scan benchmark\n\n* Fixed benchmark queries\n\n* Renamed sort function\n\n* Added javadoc on ScanResultValueTimestampComparator\n\n* Unused import\n\n* Added more javadoc\n\n* improved doc\n\n* Removed unused import to satisfy PMD check\n\n* Small changes\n\n* Changes based on Gian's comments\n\n* Fixed failing test due to null resultFormat\n\n* Added config and get # of segments\n\n* Set up time ordering strategy decision tree\n\n* Refactor and pQueue works\n\n* Cleanup\n\n* Ordering is correct on n-way merge -> still need to batch events into\nScanResultValues\n\n* WIP\n\n* Sequence stuff is so dirty :(\n\n* Fixed bug introduced by replacing deque with list\n\n* Wrote docs\n\n* Multi-historical setup works\n\n* WIP\n\n* Change so batching only occurs on broker for time-ordered scans\n\nRestricted batching to broker for time-ordered queries and adjusted\ntests\n\nFormatting\n\nCleanup\n\n* Fixed mistakes in merge\n\n* Fixed failing tests\n\n* Reset config\n\n* Wrote tests and added Javadoc\n\n* Nit-change on javadoc\n\n* Checkstyle fix\n\n* Improved test and appeased TeamCity\n\n* Sorry.  checkstyle\n\n* Applied Jon's recommended changes\n\n* Checkstyle fix\n\n* Optimization\n\n* Fixed tests\n\n* Updated error message\n\n* Added error message for UOE\n\n* Renaming\n\n* Finish rename\n\n* Smarter limiting for pQueue method\n\n* Optimized n-way merge strategy\n\n* Rename segment limit -> segment partitions limit\n\n* Added a bit of docs\n\n* More comments\n\n* Fix checkstyle and test\n\n* Nit comment\n\n* Fixed failing tests -> allow usage of all types of segment spec\n\n* Fixed failing tests -> allow usage of all types of segment spec\n\n* Revert \"Fixed failing tests -> allow usage of all types of segment spec\"\n\nThis reverts commit ec470288c7b725f5310bcf69d1db9f85ff509c8d.\n\n* Revert \"Merge branch '6088-Time-Ordering-On-Scans-N-Way-Merge' of github.com:justinborromeo/incubator-druid into 6088-Time-Ordering-On-Scans-N-Way-Merge\"\n\nThis reverts commit 57033f36df6e3ef887e5f0399ad74bb091306de8.  reversing\nchanges made to 8f01d8dd16f40d10c60519ca0ec0d2e6b2dde941.\n\n* Check type of segment spec before using for time ordering\n\n* Fix bug in numRowsScanned\n\n* Fix bug messing up count of rows\n\n* Fix docs and flipped boolean in ScanQueryLimitRowIterator\n\n* Refactor n-way merge\n\n* Added test for n-way merge\n\n* Refixed regression\n\n* Checkstyle and doc update\n\n* Modified sequence limit to accept longs and added test for long limits\n\n* doc fix\n\n* Implemented Clint's recommendations\n","date":"2019-03-29 05:37:09","modifiedFileCount":"23","status":"M","submitter":"Justin Borromeo"}]
