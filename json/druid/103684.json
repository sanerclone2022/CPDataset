[{"authorTime":"2020-04-23 01:43:34","codes":[{"authorDate":"2020-04-23 01:43:34","commitOrder":1,"curCode":"  private void testIndexWithLosingNodeHelper(Runnable restartRunnable, Runnable waitForReadyRunnable) throws Exception\n  {\n    StreamEventWriter streamEventWriter = createStreamEventWriter(config);\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig();\n    try (\n        final Closeable ignored1 = unloader(generatedTestConfig.getFullDatasourceName())\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform().apply(getResourceAsString(INDEXER_FILE_INPUT_FORMAT));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateFirstRound, FIRST_EVENT_TIME);\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      LOG.info(\"Restarting Druid process\");\n      restartRunnable.run();\n      LOG.info(\"Restarted Druid process\");\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateSecondRound, FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound));\n      \r\n      LOG.info(\"Waiting for Druid process to be available\");\n      waitForReadyRunnable.run();\n      LOG.info(\"Druid process is now available\");\n      \r\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateRemaining, FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound));\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig);\n    }\n    finally {\n      doMethodTeardown(generatedTestConfig, streamEventWriter);\n    }\n  }\n","date":"2020-04-23 01:43:34","endLine":260,"groupId":"18349","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexWithLosingNodeHelper","params":"(RunnablerestartRunnable@RunnablewaitForReadyRunnable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/0c65afaebc659faae906384b5e0c259abf0767.src","preCode":"  private void testIndexWithLosingNodeHelper(Runnable restartRunnable, Runnable waitForReadyRunnable) throws Exception\n  {\n    StreamEventWriter streamEventWriter = createStreamEventWriter(config);\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig();\n    try (\n        final Closeable ignored1 = unloader(generatedTestConfig.getFullDatasourceName())\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform().apply(getResourceAsString(INDEXER_FILE_INPUT_FORMAT));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateFirstRound, FIRST_EVENT_TIME);\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      LOG.info(\"Restarting Druid process\");\n      restartRunnable.run();\n      LOG.info(\"Restarted Druid process\");\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateSecondRound, FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound));\n      \r\n      LOG.info(\"Waiting for Druid process to be available\");\n      waitForReadyRunnable.run();\n      LOG.info(\"Druid process is now available\");\n      \r\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateRemaining, FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound));\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig);\n    }\n    finally {\n      doMethodTeardown(generatedTestConfig, streamEventWriter);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"B"},{"authorDate":"2020-04-23 01:43:34","commitOrder":1,"curCode":"  private void testIndexWithStreamReshardHelper(int newShardCount) throws Exception\n  {\n    StreamEventWriter streamEventWriter = createStreamEventWriter(config);\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig();\n    try (\n        final Closeable ignored1 = unloader(generatedTestConfig.getFullDatasourceName())\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform().apply(getResourceAsString(INDEXER_FILE_INPUT_FORMAT));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateFirstRound, FIRST_EVENT_TIME);\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      streamAdminClient.updatePartitionCount(generatedTestConfig.getStreamName(), newShardCount, true);\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateSecondRound, FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound));\n      \r\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.isStreamActive(generatedTestConfig.getStreamName()),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.verfiyPartitionCountUpdated(generatedTestConfig.getStreamName(), STREAM_SHARD_COUNT, newShardCount),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      \r\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateRemaining, FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound));\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig);\n    }\n    finally {\n      doMethodTeardown(generatedTestConfig, streamEventWriter);\n    }\n  }\n","date":"2020-04-23 01:43:34","endLine":324,"groupId":"18349","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexWithStreamReshardHelper","params":"(intnewShardCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/0c65afaebc659faae906384b5e0c259abf0767.src","preCode":"  private void testIndexWithStreamReshardHelper(int newShardCount) throws Exception\n  {\n    StreamEventWriter streamEventWriter = createStreamEventWriter(config);\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig();\n    try (\n        final Closeable ignored1 = unloader(generatedTestConfig.getFullDatasourceName())\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform().apply(getResourceAsString(INDEXER_FILE_INPUT_FORMAT));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateFirstRound, FIRST_EVENT_TIME);\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      streamAdminClient.updatePartitionCount(generatedTestConfig.getStreamName(), newShardCount, true);\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateSecondRound, FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound));\n      \r\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.isStreamActive(generatedTestConfig.getStreamName()),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.verfiyPartitionCountUpdated(generatedTestConfig.getStreamName(), STREAM_SHARD_COUNT, newShardCount),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      \r\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateRemaining, FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound));\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig);\n    }\n    finally {\n      doMethodTeardown(generatedTestConfig, streamEventWriter);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"B"}],"commitId":"16f5ae440510951b247920d41833da98804897d0","commitMessage":"@@@Add integration tests for kafka ingestion (#9724)\n\n* add kafka admin and kafka writer\n\n* refactor kinesis IT\n\n* fix typo refactor\n\n* parallel\n\n* parallel\n\n* parallel\n\n* parallel works now\n\n* add kafka it\n\n* add doc to readme\n\n* fix tests\n\n* fix failing test\n\n* test\n\n* test\n\n* test\n\n* test\n\n* address comments\n\n* addressed comments","date":"2020-04-23 01:43:34","modifiedFileCount":"9","status":"B","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-04-30 04:18:01","codes":[{"authorDate":"2020-04-30 04:18:01","commitOrder":2,"curCode":"  private void testIndexWithLosingNodeHelper(\n      Runnable restartRunnable,\n      Runnable waitForReadyRunnable,\n      boolean transactionEnabled\n  ) throws Exception\n  {\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(\n        INPUT_FORMAT,\n        getResourceAsString(JSON_INPUT_FORMAT_PATH)\n    );\n    try (\n        final Closeable closer = createResourceCloser(generatedTestConfig);\n        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n          new JsonEventSerializer(jsonMapper),\n          EVENTS_PER_SECOND,\n          CYCLE_PADDING_MS\n      );\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateFirstRound,\n          FIRST_EVENT_TIME\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      LOG.info(\"Restarting Druid process\");\n      restartRunnable.run();\n      LOG.info(\"Restarted Druid process\");\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateSecondRound,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound)\n      );\n      \r\n      LOG.info(\"Waiting for Druid process to be available\");\n      waitForReadyRunnable.run();\n      LOG.info(\"Druid process is now available\");\n      \r\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateRemaining,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig);\n    }\n  }\n","date":"2020-04-30 04:18:01","endLine":377,"groupId":"19758","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexWithLosingNodeHelper","params":"(RunnablerestartRunnable@RunnablewaitForReadyRunnable@booleantransactionEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/50/6e80fe1ec232961f8eff1dbd978623b6d421ef.src","preCode":"  private void testIndexWithLosingNodeHelper(Runnable restartRunnable, Runnable waitForReadyRunnable) throws Exception\n  {\n    StreamEventWriter streamEventWriter = createStreamEventWriter(config);\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig();\n    try (\n        final Closeable ignored1 = unloader(generatedTestConfig.getFullDatasourceName())\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform().apply(getResourceAsString(INDEXER_FILE_INPUT_FORMAT));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateFirstRound, FIRST_EVENT_TIME);\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      LOG.info(\"Restarting Druid process\");\n      restartRunnable.run();\n      LOG.info(\"Restarted Druid process\");\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateSecondRound, FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound));\n      \r\n      LOG.info(\"Waiting for Druid process to be available\");\n      waitForReadyRunnable.run();\n      LOG.info(\"Druid process is now available\");\n      \r\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateRemaining, FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound));\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig);\n    }\n    finally {\n      doMethodTeardown(generatedTestConfig, streamEventWriter);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"},{"authorDate":"2020-04-30 04:18:01","commitOrder":2,"curCode":"  private void testIndexWithStreamReshardHelper(boolean transactionEnabled, int newShardCount) throws Exception\n  {\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(\n        INPUT_FORMAT,\n        getResourceAsString(JSON_INPUT_FORMAT_PATH)\n    );\n    try (\n        final Closeable closer = createResourceCloser(generatedTestConfig);\n        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n          new JsonEventSerializer(jsonMapper),\n          EVENTS_PER_SECOND,\n          CYCLE_PADDING_MS\n      );\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateFirstRound,\n          FIRST_EVENT_TIME\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      streamAdminClient.updatePartitionCount(generatedTestConfig.getStreamName(), newShardCount, true);\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateSecondRound,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.isStreamActive(generatedTestConfig.getStreamName()),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.verfiyPartitionCountUpdated(\n              generatedTestConfig.getStreamName(),\n              STREAM_SHARD_COUNT,\n              newShardCount\n          ),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      \r\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateRemaining,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig);\n    }\n  }\n","date":"2020-04-30 04:18:01","endLine":466,"groupId":"19758","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexWithStreamReshardHelper","params":"(booleantransactionEnabled@intnewShardCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/50/6e80fe1ec232961f8eff1dbd978623b6d421ef.src","preCode":"  private void testIndexWithStreamReshardHelper(int newShardCount) throws Exception\n  {\n    StreamEventWriter streamEventWriter = createStreamEventWriter(config);\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig();\n    try (\n        final Closeable ignored1 = unloader(generatedTestConfig.getFullDatasourceName())\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform().apply(getResourceAsString(INDEXER_FILE_INPUT_FORMAT));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateFirstRound, FIRST_EVENT_TIME);\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      streamAdminClient.updatePartitionCount(generatedTestConfig.getStreamName(), newShardCount, true);\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateSecondRound, FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound));\n      \r\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.isStreamActive(generatedTestConfig.getStreamName()),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.verfiyPartitionCountUpdated(generatedTestConfig.getStreamName(), STREAM_SHARD_COUNT, newShardCount),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      \r\n      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, secondsToGenerateRemaining, FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound));\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig);\n    }\n    finally {\n      doMethodTeardown(generatedTestConfig, streamEventWriter);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":379,"status":"M"}],"commitId":"39722bd0646464ca67d1a0bf6966c0b7e4aedaf9","commitMessage":"@@@Integration tests for stream ingestion with various data formats (#9783)\n\n* Integration tests for stream ingestion with various data formats\n\n* fix npe\n\n* better logging; fix tsv\n\n* fix tsv\n\n* exclude kinesis from travis\n\n* some readme","date":"2020-04-30 04:18:01","modifiedFileCount":"19","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-05-12 23:56:43","codes":[{"authorDate":"2020-05-12 23:56:43","commitOrder":3,"curCode":"  private void testIndexWithLosingNodeHelper(\n      Runnable restartRunnable,\n      Runnable waitForReadyRunnable,\n      @Nullable Boolean transactionEnabled\n  ) throws Exception\n  {\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(\n        INPUT_FORMAT,\n        getResourceAsString(JSON_INPUT_FORMAT_PATH)\n    );\n    try (\n        final Closeable closer = createResourceCloser(generatedTestConfig);\n        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n          new JsonEventSerializer(jsonMapper),\n          EVENTS_PER_SECOND,\n          CYCLE_PADDING_MS\n      );\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateFirstRound,\n          FIRST_EVENT_TIME\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      LOG.info(\"Restarting Druid process\");\n      restartRunnable.run();\n      LOG.info(\"Restarted Druid process\");\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateSecondRound,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound)\n      );\n      \r\n      LOG.info(\"Waiting for Druid process to be available\");\n      waitForReadyRunnable.run();\n      LOG.info(\"Druid process is now available\");\n      \r\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateRemaining,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig);\n    }\n  }\n","date":"2020-05-12 23:56:43","endLine":384,"groupId":"19758","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexWithLosingNodeHelper","params":"(RunnablerestartRunnable@RunnablewaitForReadyRunnable@@NullableBooleantransactionEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9a/1dbb32e62c659488dfb5f9aada70a82cf2168b.src","preCode":"  private void testIndexWithLosingNodeHelper(\n      Runnable restartRunnable,\n      Runnable waitForReadyRunnable,\n      boolean transactionEnabled\n  ) throws Exception\n  {\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(\n        INPUT_FORMAT,\n        getResourceAsString(JSON_INPUT_FORMAT_PATH)\n    );\n    try (\n        final Closeable closer = createResourceCloser(generatedTestConfig);\n        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n          new JsonEventSerializer(jsonMapper),\n          EVENTS_PER_SECOND,\n          CYCLE_PADDING_MS\n      );\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateFirstRound,\n          FIRST_EVENT_TIME\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      LOG.info(\"Restarting Druid process\");\n      restartRunnable.run();\n      LOG.info(\"Restarted Druid process\");\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateSecondRound,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound)\n      );\n      \r\n      LOG.info(\"Waiting for Druid process to be available\");\n      waitForReadyRunnable.run();\n      LOG.info(\"Druid process is now available\");\n      \r\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateRemaining,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"M"},{"authorDate":"2020-05-12 23:56:43","commitOrder":3,"curCode":"  private void testIndexWithStreamReshardHelper(@Nullable Boolean transactionEnabled, int newShardCount)\n      throws Exception\n  {\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(\n        INPUT_FORMAT,\n        getResourceAsString(JSON_INPUT_FORMAT_PATH)\n    );\n    try (\n        final Closeable closer = createResourceCloser(generatedTestConfig);\n        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n          new JsonEventSerializer(jsonMapper),\n          EVENTS_PER_SECOND,\n          CYCLE_PADDING_MS\n      );\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateFirstRound,\n          FIRST_EVENT_TIME\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      streamAdminClient.updatePartitionCount(generatedTestConfig.getStreamName(), newShardCount, true);\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateSecondRound,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.isStreamActive(generatedTestConfig.getStreamName()),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.verfiyPartitionCountUpdated(\n              generatedTestConfig.getStreamName(),\n              STREAM_SHARD_COUNT,\n              newShardCount\n          ),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      \r\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateRemaining,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig);\n    }\n  }\n","date":"2020-05-12 23:56:43","endLine":474,"groupId":"19758","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexWithStreamReshardHelper","params":"(@NullableBooleantransactionEnabled@intnewShardCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9a/1dbb32e62c659488dfb5f9aada70a82cf2168b.src","preCode":"  private void testIndexWithStreamReshardHelper(boolean transactionEnabled, int newShardCount) throws Exception\n  {\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(\n        INPUT_FORMAT,\n        getResourceAsString(JSON_INPUT_FORMAT_PATH)\n    );\n    try (\n        final Closeable closer = createResourceCloser(generatedTestConfig);\n        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n          new JsonEventSerializer(jsonMapper),\n          EVENTS_PER_SECOND,\n          CYCLE_PADDING_MS\n      );\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateFirstRound,\n          FIRST_EVENT_TIME\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      streamAdminClient.updatePartitionCount(generatedTestConfig.getStreamName(), newShardCount, true);\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateSecondRound,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.isStreamActive(generatedTestConfig.getStreamName()),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.verfiyPartitionCountUpdated(\n              generatedTestConfig.getStreamName(),\n              STREAM_SHARD_COUNT,\n              newShardCount\n          ),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      \r\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateRemaining,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"}],"commitId":"c06d3f14b148d7b68ab4a9c45bbb082ba33618aa","commitMessage":"@@@Add javadoc for stream ingestion integration tests (#9795)\n\n","date":"2020-05-12 23:56:43","modifiedFileCount":"10","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-12-08 02:59:29","codes":[{"authorDate":"2020-12-08 02:59:29","commitOrder":4,"curCode":"  private void testIndexWithLosingNodeHelper(\n      Runnable restartRunnable,\n      Runnable waitForReadyRunnable,\n      @Nullable Boolean transactionEnabled\n  ) throws Exception\n  {\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(\n        INPUT_FORMAT,\n        getResourceAsString(JSON_INPUT_FORMAT_PATH)\n    );\n    try (\n        final Closeable closer = createResourceCloser(generatedTestConfig);\n        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n          new JsonEventSerializer(jsonMapper),\n          EVENTS_PER_SECOND,\n          CYCLE_PADDING_MS\n      );\n      long numWritten = streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateFirstRound,\n          FIRST_EVENT_TIME\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      LOG.info(\"Restarting Druid process\");\n      restartRunnable.run();\n      LOG.info(\"Restarted Druid process\");\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      numWritten += streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateSecondRound,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound)\n      );\n      \r\n      LOG.info(\"Waiting for Druid process to be available\");\n      waitForReadyRunnable.run();\n      LOG.info(\"Druid process is now available\");\n      \r\n      numWritten += streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateRemaining,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig, numWritten);\n    }\n  }\n","date":"2020-12-08 02:59:29","endLine":386,"groupId":"12390","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexWithLosingNodeHelper","params":"(RunnablerestartRunnable@RunnablewaitForReadyRunnable@@NullableBooleantransactionEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/71/3687e60254d3dda7d98249deb8320dbd5be405.src","preCode":"  private void testIndexWithLosingNodeHelper(\n      Runnable restartRunnable,\n      Runnable waitForReadyRunnable,\n      @Nullable Boolean transactionEnabled\n  ) throws Exception\n  {\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(\n        INPUT_FORMAT,\n        getResourceAsString(JSON_INPUT_FORMAT_PATH)\n    );\n    try (\n        final Closeable closer = createResourceCloser(generatedTestConfig);\n        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n          new JsonEventSerializer(jsonMapper),\n          EVENTS_PER_SECOND,\n          CYCLE_PADDING_MS\n      );\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateFirstRound,\n          FIRST_EVENT_TIME\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      LOG.info(\"Restarting Druid process\");\n      restartRunnable.run();\n      LOG.info(\"Restarted Druid process\");\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateSecondRound,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound)\n      );\n      \r\n      LOG.info(\"Waiting for Druid process to be available\");\n      waitForReadyRunnable.run();\n      LOG.info(\"Druid process is now available\");\n      \r\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateRemaining,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"},{"authorDate":"2020-12-08 02:59:29","commitOrder":4,"curCode":"  private void testIndexWithStreamReshardHelper(@Nullable Boolean transactionEnabled, int newShardCount)\n      throws Exception\n  {\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(\n        INPUT_FORMAT,\n        getResourceAsString(JSON_INPUT_FORMAT_PATH)\n    );\n    try (\n        final Closeable closer = createResourceCloser(generatedTestConfig);\n        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n          new JsonEventSerializer(jsonMapper),\n          EVENTS_PER_SECOND,\n          CYCLE_PADDING_MS\n      );\n      long numWritten = streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateFirstRound,\n          FIRST_EVENT_TIME\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      streamAdminClient.updatePartitionCount(generatedTestConfig.getStreamName(), newShardCount, true);\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      numWritten += streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateSecondRound,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.isStreamActive(generatedTestConfig.getStreamName()),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.verfiyPartitionCountUpdated(\n              generatedTestConfig.getStreamName(),\n              STREAM_SHARD_COUNT,\n              newShardCount\n          ),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      \r\n      numWritten += streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateRemaining,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig, numWritten);\n    }\n  }\n","date":"2020-12-08 02:59:29","endLine":476,"groupId":"12390","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexWithStreamReshardHelper","params":"(@NullableBooleantransactionEnabled@intnewShardCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/71/3687e60254d3dda7d98249deb8320dbd5be405.src","preCode":"  private void testIndexWithStreamReshardHelper(@Nullable Boolean transactionEnabled, int newShardCount)\n      throws Exception\n  {\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(\n        INPUT_FORMAT,\n        getResourceAsString(JSON_INPUT_FORMAT_PATH)\n    );\n    try (\n        final Closeable closer = createResourceCloser(generatedTestConfig);\n        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n          new JsonEventSerializer(jsonMapper),\n          EVENTS_PER_SECOND,\n          CYCLE_PADDING_MS\n      );\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateFirstRound,\n          FIRST_EVENT_TIME\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      streamAdminClient.updatePartitionCount(generatedTestConfig.getStreamName(), newShardCount, true);\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateSecondRound,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.isStreamActive(generatedTestConfig.getStreamName()),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.verfiyPartitionCountUpdated(\n              generatedTestConfig.getStreamName(),\n              STREAM_SHARD_COUNT,\n              newShardCount\n          ),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      \r\n      streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateRemaining,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":388,"status":"M"}],"commitId":"b681861f0551ed4f6b0c3abdc1b787107b819bbe","commitMessage":"@@@Speed up integration tests in two ways. (#10648)\n\n1) Accelerate coordinator runs to speed up segment load after publishing.\n\n2) For streaming ingestion tests.  Instead of waiting 3 minutes for data to\n   load.  wait until the expected number of rows is loaded.\n\nAlso updates segment-count check in ITCompactionTaskTest to eliminate a\nrace condition (it was looking for 6 segments.  which only exist together\nbriefly.  until the older 4 are marked unused).","date":"2020-12-08 02:59:29","modifiedFileCount":"7","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-03-12 14:04:58","codes":[{"authorDate":"2020-12-08 02:59:29","commitOrder":5,"curCode":"  private void testIndexWithLosingNodeHelper(\n      Runnable restartRunnable,\n      Runnable waitForReadyRunnable,\n      @Nullable Boolean transactionEnabled\n  ) throws Exception\n  {\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(\n        INPUT_FORMAT,\n        getResourceAsString(JSON_INPUT_FORMAT_PATH)\n    );\n    try (\n        final Closeable closer = createResourceCloser(generatedTestConfig);\n        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n          new JsonEventSerializer(jsonMapper),\n          EVENTS_PER_SECOND,\n          CYCLE_PADDING_MS\n      );\n      long numWritten = streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateFirstRound,\n          FIRST_EVENT_TIME\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      LOG.info(\"Restarting Druid process\");\n      restartRunnable.run();\n      LOG.info(\"Restarted Druid process\");\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      numWritten += streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateSecondRound,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound)\n      );\n      \r\n      LOG.info(\"Waiting for Druid process to be available\");\n      waitForReadyRunnable.run();\n      LOG.info(\"Druid process is now available\");\n      \r\n      numWritten += streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateRemaining,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig, numWritten);\n    }\n  }\n","date":"2020-12-08 02:59:29","endLine":386,"groupId":"103684","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexWithLosingNodeHelper","params":"(RunnablerestartRunnable@RunnablewaitForReadyRunnable@@NullableBooleantransactionEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/71/3687e60254d3dda7d98249deb8320dbd5be405.src","preCode":"  private void testIndexWithLosingNodeHelper(\n      Runnable restartRunnable,\n      Runnable waitForReadyRunnable,\n      @Nullable Boolean transactionEnabled\n  ) throws Exception\n  {\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(\n        INPUT_FORMAT,\n        getResourceAsString(JSON_INPUT_FORMAT_PATH)\n    );\n    try (\n        final Closeable closer = createResourceCloser(generatedTestConfig);\n        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n          new JsonEventSerializer(jsonMapper),\n          EVENTS_PER_SECOND,\n          CYCLE_PADDING_MS\n      );\n      long numWritten = streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateFirstRound,\n          FIRST_EVENT_TIME\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      LOG.info(\"Restarting Druid process\");\n      restartRunnable.run();\n      LOG.info(\"Restarted Druid process\");\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      numWritten += streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateSecondRound,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound)\n      );\n      \r\n      LOG.info(\"Waiting for Druid process to be available\");\n      waitForReadyRunnable.run();\n      LOG.info(\"Druid process is now available\");\n      \r\n      numWritten += streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateRemaining,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig, numWritten);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"N"},{"authorDate":"2021-03-12 14:04:58","commitOrder":5,"curCode":"  private void testIndexWithStreamReshardHelper(@Nullable Boolean transactionEnabled, int newShardCount)\n      throws Exception\n  {\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(\n        INPUT_FORMAT,\n        getResourceAsString(JSON_INPUT_FORMAT_PATH)\n    );\n    try (\n        final Closeable closer = createResourceCloser(generatedTestConfig);\n        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n          new JsonEventSerializer(jsonMapper),\n          EVENTS_PER_SECOND,\n          CYCLE_PADDING_MS\n      );\n      long numWritten = streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateFirstRound,\n          FIRST_EVENT_TIME\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      streamAdminClient.updatePartitionCount(generatedTestConfig.getStreamName(), newShardCount, true);\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      numWritten += streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateSecondRound,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.isStreamActive(generatedTestConfig.getStreamName()),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.verfiyPartitionCountUpdated(\n              generatedTestConfig.getStreamName(),\n              STREAM_SHARD_COUNT,\n              newShardCount\n          ),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      \r\n      numWritten += streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateRemaining,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig, numWritten);\n    }\n    \r\n    List<TaskResponseObject> completedTasks = indexer.getCompleteTasksForDataSource(generatedTestConfig.getFullDatasourceName());\n    for (TaskResponseObject task : completedTasks) {\n      try {\n        RowIngestionMetersTotals stats = indexer.getTaskStats(task.getId());\n        Assert.assertEquals(0L, stats.getThrownAway());\n      }\n      catch (Exception e) {\n        \r\n        if (!task.getStatus().isFailure()) {\n          throw e;\n        }\n      }\n    }\n  }\n","date":"2021-03-12 14:04:58","endLine":561,"groupId":"103684","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexWithStreamReshardHelper","params":"(@NullableBooleantransactionEnabled@intnewShardCount)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b3/d0214d624ae92d69e2a72e504e3bd455decb8a.src","preCode":"  private void testIndexWithStreamReshardHelper(@Nullable Boolean transactionEnabled, int newShardCount)\n      throws Exception\n  {\n    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(\n        INPUT_FORMAT,\n        getResourceAsString(JSON_INPUT_FORMAT_PATH)\n    );\n    try (\n        final Closeable closer = createResourceCloser(generatedTestConfig);\n        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n    ) {\n      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n      \r\n      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n      LOG.info(\"Submitted supervisor\");\n      \r\n      int secondsToGenerateRemaining = TOTAL_NUMBER_OF_SECOND;\n      int secondsToGenerateFirstRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateFirstRound;\n      final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n          new JsonEventSerializer(jsonMapper),\n          EVENTS_PER_SECOND,\n          CYCLE_PADDING_MS\n      );\n      long numWritten = streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateFirstRound,\n          FIRST_EVENT_TIME\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      streamAdminClient.updatePartitionCount(generatedTestConfig.getStreamName(), newShardCount, true);\n      \r\n      int secondsToGenerateSecondRound = TOTAL_NUMBER_OF_SECOND / 3;\n      secondsToGenerateRemaining = secondsToGenerateRemaining - secondsToGenerateSecondRound;\n      numWritten += streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateSecondRound,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.isStreamActive(generatedTestConfig.getStreamName()),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      ITRetryUtil.retryUntil(\n          () -> streamAdminClient.verfiyPartitionCountUpdated(\n              generatedTestConfig.getStreamName(),\n              STREAM_SHARD_COUNT,\n              newShardCount\n          ),\n          true,\n          10000,\n          30,\n          \"Waiting for stream to finish resharding\"\n      );\n      \r\n      numWritten += streamGenerator.run(\n          generatedTestConfig.getStreamName(),\n          streamEventWriter,\n          secondsToGenerateRemaining,\n          FIRST_EVENT_TIME.plusSeconds(secondsToGenerateFirstRound + secondsToGenerateSecondRound)\n      );\n      \r\n      ITRetryUtil.retryUntil(\n          () -> SupervisorStateManager.BasicState.RUNNING.equals(indexer.getSupervisorStatus(generatedTestConfig.getSupervisorId())),\n          true,\n          10000,\n          30,\n          \"Waiting for supervisor to be healthy\"\n      );\n      \r\n      verifyIngestedData(generatedTestConfig, numWritten);\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":459,"status":"M"}],"commitId":"ed91a2bb384df8c70a39abdb1813cff7d3d48a17","commitMessage":"@@@Fix Kinesis should not increment throwAway count on EOS record (#10976)\n\n* fix Kinesis increament throwAway on EOS record\n\n* fix checkstyle\n\n* fix IT\n\n* fix test\n\n* fix IT\n\n* fix IT\n\n* fix IT\n\n* fix IT","date":"2021-03-12 14:04:58","modifiedFileCount":"6","status":"M","submitter":"Maytas Monsereenusorn"}]
