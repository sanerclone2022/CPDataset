[{"authorTime":"2021-02-19 07:57:45","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  private Injector makeInjectorWithProperties(final Properties props)\n  {\n    return Guice.createInjector(\n        ImmutableList.of(\n            new DruidGuiceExtensions(),\n            new LifecycleModule(),\n            new ServerModule(),\n            new JacksonModule(),\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bind(Validator.class).toInstance(Validation.buildDefaultValidatorFactory().getValidator());\n                binder.bind(JsonConfigurator.class).in(LazySingleton.class);\n                binder.bind(Properties.class).toInstance(props);\n              }\n            },\n            new EmitterModule(props)\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":85,"groupId":"22967","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"makeInjectorWithProperties","params":"(finalPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/87/c4e506a11c8daaa97ee9fbcbe032576abc2fb8.src","preCode":"  private Injector makeInjectorWithProperties(final Properties props)\n  {\n    return Guice.createInjector(\n        ImmutableList.of(\n            new DruidGuiceExtensions(),\n            new LifecycleModule(),\n            new ServerModule(),\n            new JacksonModule(),\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bind(Validator.class).toInstance(Validation.buildDefaultValidatorFactory().getValidator());\n                binder.bind(JsonConfigurator.class).in(LazySingleton.class);\n                binder.bind(Properties.class).toInstance(props);\n              }\n            },\n            new EmitterModule(props)\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/emitter/EmitterModuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"NB"},{"authorDate":"2021-02-19 07:57:45","commitOrder":2,"curCode":"  private Injector makeInjectorWithProperties(final Properties props)\n  {\n    return Guice.createInjector(\n        ImmutableList.of(\n            new DruidGuiceExtensions(),\n            new LifecycleModule(),\n            new ServerModule(),\n            new JacksonModule(),\n            (Module) binder -> {\n              binder.bind(Validator.class).toInstance(Validation.buildDefaultValidatorFactory().getValidator());\n              binder.bind(JsonConfigurator.class).in(LazySingleton.class);\n              binder.bind(Properties.class).toInstance(props);\n              binder.bind(ExprMacroTable.class).toInstance(ExprMacroTable.nil());\n              binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n              binder.bind(Escalator.class).toInstance(new NoopEscalator());\n              binder.bind(ServiceEmitter.class).toInstance(serviceEmitter);\n              binder.bind(RequestLogger.class).toInstance(new NoopRequestLogger());\n              binder.bind(new TypeLiteral<Supplier<DefaultQueryConfig>>(){}).toInstance(Suppliers.ofInstance(new DefaultQueryConfig(null)));\n              binder.bind(InventoryView.class).toInstance(inventoryView);\n              binder.bind(TimelineServerView.class).toInstance(timelineServerView);\n              binder.bind(DruidLeaderClient.class).annotatedWith(Coordinator.class).toInstance(druidLeaderClient);\n              binder.bind(DruidLeaderClient.class).annotatedWith(IndexingService.class).toInstance(druidLeaderClient);\n              binder.bind(DruidNodeDiscoveryProvider.class).toInstance(druidNodeDiscoveryProvider);\n              binder.bind(GenericQueryMetricsFactory.class).toInstance(genericQueryMetricsFactory);\n              binder.bind(QuerySegmentWalker.class).toInstance(querySegmentWalker);\n              binder.bind(QueryToolChestWarehouse.class).toInstance(queryToolChestWarehouse);\n              binder.bind(LookupExtractorFactoryContainerProvider.class).toInstance(lookupExtractorFactoryContainerProvider);\n              binder.bind(JoinableFactory.class).toInstance(joinableFactory);\n              binder.bind(SegmentLoader.class).toInstance(segmentLoader);\n\n            },\n            new SqlModule(props),\n            new TestViewManagerModule()\n        )\n    );\n  }\n","date":"2021-02-19 07:57:45","endLine":201,"groupId":"13447","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"makeInjectorWithProperties","params":"(finalPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b5/c4aa740ae7cb2210f12768b418c957ee6cf97d.src","preCode":"  private Injector makeInjectorWithProperties(final Properties props)\n  {\n    return Guice.createInjector(\n        ImmutableList.of(\n            new DruidGuiceExtensions(),\n            new LifecycleModule(),\n            new ServerModule(),\n            new JacksonModule(),\n            (Module) binder -> {\n              binder.bind(Validator.class).toInstance(Validation.buildDefaultValidatorFactory().getValidator());\n              binder.bind(JsonConfigurator.class).in(LazySingleton.class);\n              binder.bind(Properties.class).toInstance(props);\n              binder.bind(ExprMacroTable.class).toInstance(ExprMacroTable.nil());\n              binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n              binder.bind(Escalator.class).toInstance(new NoopEscalator());\n              binder.bind(ServiceEmitter.class).toInstance(serviceEmitter);\n              binder.bind(RequestLogger.class).toInstance(new NoopRequestLogger());\n              binder.bind(new TypeLiteral<Supplier<DefaultQueryConfig>>(){}).toInstance(Suppliers.ofInstance(new DefaultQueryConfig(null)));\n              binder.bind(InventoryView.class).toInstance(inventoryView);\n              binder.bind(TimelineServerView.class).toInstance(timelineServerView);\n              binder.bind(DruidLeaderClient.class).annotatedWith(Coordinator.class).toInstance(druidLeaderClient);\n              binder.bind(DruidLeaderClient.class).annotatedWith(IndexingService.class).toInstance(druidLeaderClient);\n              binder.bind(DruidNodeDiscoveryProvider.class).toInstance(druidNodeDiscoveryProvider);\n              binder.bind(GenericQueryMetricsFactory.class).toInstance(genericQueryMetricsFactory);\n              binder.bind(QuerySegmentWalker.class).toInstance(querySegmentWalker);\n              binder.bind(QueryToolChestWarehouse.class).toInstance(queryToolChestWarehouse);\n              binder.bind(LookupExtractorFactoryContainerProvider.class).toInstance(lookupExtractorFactoryContainerProvider);\n              binder.bind(JoinableFactory.class).toInstance(joinableFactory);\n              binder.bind(SegmentLoader.class).toInstance(segmentLoader);\n\n            },\n            new SqlModule(props),\n            new TestViewManagerModule()\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/guice/SqlModuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"B"}],"commitId":"84341737d56b7279c9ccdd2f0f48a8aa5a517859","commitMessage":"@@@Add property for binding view manager type (#10895)\n\n* Add property for binding view manager type\n\n* Checkstyle\n\n* Fix constructor\n\n* Add @Test","date":"2021-02-19 07:57:45","modifiedFileCount":"2","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2021-09-06 01:57:45","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":3,"curCode":"  private Injector makeInjectorWithProperties(final Properties props)\n  {\n    return Guice.createInjector(\n        ImmutableList.of(\n            new DruidGuiceExtensions(),\n            new LifecycleModule(),\n            new ServerModule(),\n            new JacksonModule(),\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bind(Validator.class).toInstance(Validation.buildDefaultValidatorFactory().getValidator());\n                binder.bind(JsonConfigurator.class).in(LazySingleton.class);\n                binder.bind(Properties.class).toInstance(props);\n              }\n            },\n            new EmitterModule(props)\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":85,"groupId":"10283","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"makeInjectorWithProperties","params":"(finalPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/87/c4e506a11c8daaa97ee9fbcbe032576abc2fb8.src","preCode":"  private Injector makeInjectorWithProperties(final Properties props)\n  {\n    return Guice.createInjector(\n        ImmutableList.of(\n            new DruidGuiceExtensions(),\n            new LifecycleModule(),\n            new ServerModule(),\n            new JacksonModule(),\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bind(Validator.class).toInstance(Validation.buildDefaultValidatorFactory().getValidator());\n                binder.bind(JsonConfigurator.class).in(LazySingleton.class);\n                binder.bind(Properties.class).toInstance(props);\n              }\n            },\n            new EmitterModule(props)\n        )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/emitter/EmitterModuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2021-09-06 01:57:45","commitOrder":3,"curCode":"  private Injector makeInjectorWithProperties(final Properties props)\n  {\n    return Guice.createInjector(\n        ImmutableList.of(\n            new DruidGuiceExtensions(),\n            new LifecycleModule(),\n            new ServerModule(),\n            new JacksonModule(),\n            (Module) binder -> {\n              binder.bind(Validator.class).toInstance(Validation.buildDefaultValidatorFactory().getValidator());\n              binder.bind(JsonConfigurator.class).in(LazySingleton.class);\n              binder.bind(Properties.class).toInstance(props);\n              binder.bind(ExprMacroTable.class).toInstance(ExprMacroTable.nil());\n              binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n              binder.bind(Escalator.class).toInstance(new NoopEscalator());\n              binder.bind(ServiceEmitter.class).toInstance(serviceEmitter);\n              binder.bind(RequestLogger.class).toInstance(new NoopRequestLogger());\n              binder.bind(new TypeLiteral<Supplier<DefaultQueryConfig>>(){}).toInstance(Suppliers.ofInstance(new DefaultQueryConfig(null)));\n              binder.bind(InventoryView.class).toInstance(inventoryView);\n              binder.bind(TimelineServerView.class).toInstance(timelineServerView);\n              binder.bind(DruidLeaderClient.class).annotatedWith(Coordinator.class).toInstance(druidLeaderClient);\n              binder.bind(DruidLeaderClient.class).annotatedWith(IndexingService.class).toInstance(druidLeaderClient);\n              binder.bind(DruidNodeDiscoveryProvider.class).toInstance(druidNodeDiscoveryProvider);\n              binder.bind(GenericQueryMetricsFactory.class).toInstance(genericQueryMetricsFactory);\n              binder.bind(QuerySegmentWalker.class).toInstance(querySegmentWalker);\n              binder.bind(QueryToolChestWarehouse.class).toInstance(queryToolChestWarehouse);\n              binder.bind(LookupExtractorFactoryContainerProvider.class).toInstance(lookupExtractorFactoryContainerProvider);\n              binder.bind(JoinableFactory.class).toInstance(joinableFactory);\n              binder.bind(SegmentLoader.class).toInstance(segmentLoader);\n              binder.bind(QuerySchedulerProvider.class).in(LazySingleton.class);\n              binder.bind(QueryScheduler.class)\n                    .toProvider(QuerySchedulerProvider.class)\n                    .in(LazySingleton.class);\n            },\n            new SqlModule(props),\n            new TestViewManagerModule()\n        )\n    );\n  }\n","date":"2021-09-06 01:57:45","endLine":206,"groupId":"10283","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"makeInjectorWithProperties","params":"(finalPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/0ae48cb86a3eabedbcf983f9361320e3ab5dfb.src","preCode":"  private Injector makeInjectorWithProperties(final Properties props)\n  {\n    return Guice.createInjector(\n        ImmutableList.of(\n            new DruidGuiceExtensions(),\n            new LifecycleModule(),\n            new ServerModule(),\n            new JacksonModule(),\n            (Module) binder -> {\n              binder.bind(Validator.class).toInstance(Validation.buildDefaultValidatorFactory().getValidator());\n              binder.bind(JsonConfigurator.class).in(LazySingleton.class);\n              binder.bind(Properties.class).toInstance(props);\n              binder.bind(ExprMacroTable.class).toInstance(ExprMacroTable.nil());\n              binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n              binder.bind(Escalator.class).toInstance(new NoopEscalator());\n              binder.bind(ServiceEmitter.class).toInstance(serviceEmitter);\n              binder.bind(RequestLogger.class).toInstance(new NoopRequestLogger());\n              binder.bind(new TypeLiteral<Supplier<DefaultQueryConfig>>(){}).toInstance(Suppliers.ofInstance(new DefaultQueryConfig(null)));\n              binder.bind(InventoryView.class).toInstance(inventoryView);\n              binder.bind(TimelineServerView.class).toInstance(timelineServerView);\n              binder.bind(DruidLeaderClient.class).annotatedWith(Coordinator.class).toInstance(druidLeaderClient);\n              binder.bind(DruidLeaderClient.class).annotatedWith(IndexingService.class).toInstance(druidLeaderClient);\n              binder.bind(DruidNodeDiscoveryProvider.class).toInstance(druidNodeDiscoveryProvider);\n              binder.bind(GenericQueryMetricsFactory.class).toInstance(genericQueryMetricsFactory);\n              binder.bind(QuerySegmentWalker.class).toInstance(querySegmentWalker);\n              binder.bind(QueryToolChestWarehouse.class).toInstance(queryToolChestWarehouse);\n              binder.bind(LookupExtractorFactoryContainerProvider.class).toInstance(lookupExtractorFactoryContainerProvider);\n              binder.bind(JoinableFactory.class).toInstance(joinableFactory);\n              binder.bind(SegmentLoader.class).toInstance(segmentLoader);\n\n            },\n            new SqlModule(props),\n            new TestViewManagerModule()\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/guice/SqlModuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"82049bbf0a6409c09889ba9b3ea6131c9da86705","commitMessage":"@@@Cancel API for sqls (#11643)\n\n* initial work\n\n* reduce lock in sqlLifecycle\n\n* Integration test for sql canceling\n\n* javadoc.  cleanup.  more tests\n\n* log level to debug\n\n* fix test\n\n* checkstyle\n\n* fix flaky test; address comments\n\n* rowTransformer\n\n* cancelled state\n\n* use lock\n\n* explode instead of noop\n\n* oops\n\n* unused import\n\n* less aggressive with state\n\n* fix calcite charset\n\n* don't emit metrics when you are not authorized","date":"2021-09-06 01:57:45","modifiedFileCount":"17","status":"M","submitter":"Jihoon Son"}]
