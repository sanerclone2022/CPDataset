[{"authorTime":"2019-04-19 02:54:06","codes":[{"authorDate":"2019-04-19 02:54:06","commitOrder":2,"curCode":"  public void testMergeValuesWithBuffersForGroupByV1() throws IOException\n  {\n    final TestBloomFilterBufferColumnSelector mergeDim =\n        new TestBloomFilterBufferColumnSelector(\n            ImmutableList.of(\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter1)),\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter2))\n            )\n        );\n\n    BloomFilterMergeAggregator mergeAggregator =\n        new BloomFilterMergeAggregator(mergeDim, maxNumValues, true);\n\n    for (int i = 0; i < 2; ++i) {\n      aggregateColumn(Collections.singletonList(mergeDim), mergeAggregator);\n    }\n\n\n    BloomKFilter merged = BloomKFilter.deserialize(\n        (ByteBuffer) valueAggregatorFactory.getCombiningFactory().finalizeComputation(mergeAggregator.get())\n    );\n    String serialized = filterToString(merged);\n    Assert.assertEquals(serializedCombinedFilter, serialized);\n  }\n","date":"2019-04-19 02:54:06","endLine":476,"groupId":"1792","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeValuesWithBuffersForGroupByV1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/da/4479beca9af64c92dafdb9d9b22c0509d42f2b.src","preCode":"  public void testMergeValuesWithBuffersForGroupByV1() throws IOException\n  {\n    final TestBloomFilterBufferColumnSelector mergeDim =\n        new TestBloomFilterBufferColumnSelector(\n            ImmutableList.of(\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter1)),\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter2))\n            )\n        );\n\n    BloomFilterMergeAggregator mergeAggregator =\n        new BloomFilterMergeAggregator(mergeDim, maxNumValues, true);\n\n    for (int i = 0; i < 2; ++i) {\n      aggregateColumn(Collections.singletonList(mergeDim), mergeAggregator);\n    }\n\n\n    BloomKFilter merged = BloomKFilter.deserialize(\n        (ByteBuffer) valueAggregatorFactory.getCombiningFactory().finalizeComputation(mergeAggregator.get())\n    );\n    String serialized = filterToString(merged);\n    Assert.assertEquals(serializedCombinedFilter, serialized);\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/test/java/org/apache/druid/query/aggregation/bloom/BloomFilterAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"MB"},{"authorDate":"2019-04-19 02:54:06","commitOrder":2,"curCode":"  public void testBuferMergeValues() throws IOException\n  {\n    final TestBloomFilterBufferColumnSelector mergeDim =\n        new TestBloomFilterBufferColumnSelector(\n            ImmutableList.of(\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter1)),\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter2))\n            )\n        );\n\n    BloomFilterMergeAggregator mergeAggregator = new BloomFilterMergeAggregator(mergeDim, maxNumValues, false);\n\n    int maxSize = valueAggregatorFactory.getCombiningFactory().getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    mergeAggregator.init(buf, pos);\n\n    for (int i = 0; i < 2; ++i) {\n      bufferAggregateColumn(Collections.singletonList(mergeDim), mergeAggregator, buf, pos);\n    }\n\n    BloomKFilter merged = BloomKFilter.deserialize(\n        (ByteBuffer) valueAggregatorFactory.getCombiningFactory().finalizeComputation(mergeAggregator.get(buf, pos))\n    );\n    String serialized = filterToString(merged);\n\n    Assert.assertEquals(serializedCombinedFilter, serialized);\n  }\n","date":"2019-04-19 02:54:06","endLine":508,"groupId":"1792","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuferMergeValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/da/4479beca9af64c92dafdb9d9b22c0509d42f2b.src","preCode":"  public void testBuferMergeValues() throws IOException\n  {\n    final TestBloomFilterBufferColumnSelector mergeDim =\n        new TestBloomFilterBufferColumnSelector(\n            ImmutableList.of(\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter1)),\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter2))\n            )\n        );\n\n    BloomFilterMergeAggregator mergeAggregator = new BloomFilterMergeAggregator(mergeDim, maxNumValues, false);\n\n    int maxSize = valueAggregatorFactory.getCombiningFactory().getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    mergeAggregator.init(buf, pos);\n\n    for (int i = 0; i < 2; ++i) {\n      bufferAggregateColumn(Collections.singletonList(mergeDim), mergeAggregator, buf, pos);\n    }\n\n    BloomKFilter merged = BloomKFilter.deserialize(\n        (ByteBuffer) valueAggregatorFactory.getCombiningFactory().finalizeComputation(mergeAggregator.get(buf, pos))\n    );\n    String serialized = filterToString(merged);\n\n    Assert.assertEquals(serializedCombinedFilter, serialized);\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/test/java/org/apache/druid/query/aggregation/bloom/BloomFilterAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":479,"status":"MB"}],"commitId":"be65cca248d7b3dd5ebacc2a537aa3d25d420475","commitMessage":"@@@refactor druid-bloom-filter aggregators (#7496)\n\n* now with 100% more buffer\n\n* there can be only 1\n\n* simplify\n\n* javadoc\n\n* clean up unused test method\n\n* fix exception message\n\n* style\n\n* why does style hate javadocs\n\n* review stuff\n\n* style :(\n","date":"2019-04-19 02:54:06","modifiedFileCount":"13","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testMergeValuesWithBuffersForGroupByV1() throws IOException\n  {\n    final TestBloomFilterBufferColumnSelector mergeDim =\n        new TestBloomFilterBufferColumnSelector(\n            ImmutableList.of(\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter1)),\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter2))\n            )\n        );\n\n    BloomFilterMergeAggregator mergeAggregator =\n        new BloomFilterMergeAggregator(mergeDim, MAX_NUM_VALUES, true);\n\n    for (int i = 0; i < 2; ++i) {\n      aggregateColumn(Collections.singletonList(mergeDim), mergeAggregator);\n    }\n\n\n    BloomKFilter merged = BloomKFilter.deserialize(\n        (ByteBuffer) valueAggregatorFactory.getCombiningFactory().finalizeComputation(mergeAggregator.get())\n    );\n    String serialized = filterToString(merged);\n    Assert.assertEquals(serializedCombinedFilter, serialized);\n  }\n","date":"2019-08-23 18:13:54","endLine":476,"groupId":"103273","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeValuesWithBuffersForGroupByV1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/edc8441660bce5e4b3f3c22363012472302fdd.src","preCode":"  public void testMergeValuesWithBuffersForGroupByV1() throws IOException\n  {\n    final TestBloomFilterBufferColumnSelector mergeDim =\n        new TestBloomFilterBufferColumnSelector(\n            ImmutableList.of(\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter1)),\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter2))\n            )\n        );\n\n    BloomFilterMergeAggregator mergeAggregator =\n        new BloomFilterMergeAggregator(mergeDim, maxNumValues, true);\n\n    for (int i = 0; i < 2; ++i) {\n      aggregateColumn(Collections.singletonList(mergeDim), mergeAggregator);\n    }\n\n\n    BloomKFilter merged = BloomKFilter.deserialize(\n        (ByteBuffer) valueAggregatorFactory.getCombiningFactory().finalizeComputation(mergeAggregator.get())\n    );\n    String serialized = filterToString(merged);\n    Assert.assertEquals(serializedCombinedFilter, serialized);\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/test/java/org/apache/druid/query/aggregation/bloom/BloomFilterAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testBuferMergeValues() throws IOException\n  {\n    final TestBloomFilterBufferColumnSelector mergeDim =\n        new TestBloomFilterBufferColumnSelector(\n            ImmutableList.of(\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter1)),\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter2))\n            )\n        );\n\n    BloomFilterMergeAggregator mergeAggregator = new BloomFilterMergeAggregator(mergeDim, MAX_NUM_VALUES, false);\n\n    int maxSize = valueAggregatorFactory.getCombiningFactory().getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    mergeAggregator.init(buf, pos);\n\n    for (int i = 0; i < 2; ++i) {\n      bufferAggregateColumn(Collections.singletonList(mergeDim), mergeAggregator, buf, pos);\n    }\n\n    BloomKFilter merged = BloomKFilter.deserialize(\n        (ByteBuffer) valueAggregatorFactory.getCombiningFactory().finalizeComputation(mergeAggregator.get(buf, pos))\n    );\n    String serialized = filterToString(merged);\n\n    Assert.assertEquals(serializedCombinedFilter, serialized);\n  }\n","date":"2019-08-23 18:13:54","endLine":508,"groupId":"103273","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuferMergeValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/edc8441660bce5e4b3f3c22363012472302fdd.src","preCode":"  public void testBuferMergeValues() throws IOException\n  {\n    final TestBloomFilterBufferColumnSelector mergeDim =\n        new TestBloomFilterBufferColumnSelector(\n            ImmutableList.of(\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter1)),\n                ByteBuffer.wrap(BloomFilterSerializersModule.bloomKFilterToBytes(filter2))\n            )\n        );\n\n    BloomFilterMergeAggregator mergeAggregator = new BloomFilterMergeAggregator(mergeDim, maxNumValues, false);\n\n    int maxSize = valueAggregatorFactory.getCombiningFactory().getMaxIntermediateSizeWithNulls();\n    ByteBuffer buf = ByteBuffer.allocate(maxSize + 64);\n    int pos = 10;\n    buf.limit(pos + maxSize);\n\n    mergeAggregator.init(buf, pos);\n\n    for (int i = 0; i < 2; ++i) {\n      bufferAggregateColumn(Collections.singletonList(mergeDim), mergeAggregator, buf, pos);\n    }\n\n    BloomKFilter merged = BloomKFilter.deserialize(\n        (ByteBuffer) valueAggregatorFactory.getCombiningFactory().finalizeComputation(mergeAggregator.get(buf, pos))\n    );\n    String serialized = filterToString(merged);\n\n    Assert.assertEquals(serializedCombinedFilter, serialized);\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/test/java/org/apache/druid/query/aggregation/bloom/BloomFilterAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":479,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
