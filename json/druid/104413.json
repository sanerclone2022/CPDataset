[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testBasics() throws Exception\n  {\n    final TestIndexerMetadataStorageCoordinator mdc = new TestIndexerMetadataStorageCoordinator();\n    final RealtimeIndexTask task = makeRealtimeTask(null);\n    final TaskToolbox taskToolbox = makeToolbox(task, mdc, tempFolder.newFolder());\n    final ListenableFuture<TaskStatus> statusFuture = runTask(task, taskToolbox);\n    final DataSegment publishedSegment;\n\n    \r\n    while (task.getFirehose() == null) {\n      Thread.sleep(50);\n    }\n\n    final TestFirehose firehose = (TestFirehose) task.getFirehose();\n\n    firehose.addRows(\n        ImmutableList.of(\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim1\", \"foo\", \"met1\", \"1\"),\n            ImmutableMap.of(\"t\", now.minus(new Period(\"P1D\")).getMillis(), \"dim1\", \"foo\", \"met1\", 2.0),\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim2\", \"bar\", \"met1\", 2.0)\n        )\n    );\n\n    \r\n    firehose.close();\n\n    \r\n    while (mdc.getPublished().isEmpty()) {\n      Thread.sleep(50);\n    }\n\n    publishedSegment = Iterables.getOnlyElement(mdc.getPublished());\n\n    \r\n    Assert.assertEquals(2, task.getMetrics().processed());\n    Assert.assertEquals(1, task.getMetrics().thrownAway());\n    Assert.assertEquals(0, task.getMetrics().unparseable());\n\n    \r\n    Assert.assertEquals(2, sumMetric(task, null, \"rows\").longValue());\n    Assert.assertEquals(3, sumMetric(task, null, \"met1\").longValue());\n\n    \r\n    for (Map.Entry<SegmentDescriptor, Pair<Executor, Runnable>> entry : handOffCallbacks.entrySet()) {\n      final Pair<Executor, Runnable> executorRunnablePair = entry.getValue();\n      Assert.assertEquals(\n          new SegmentDescriptor(\n              publishedSegment.getInterval(),\n              publishedSegment.getVersion(),\n              publishedSegment.getShardSpec().getPartitionNum()\n          ),\n          entry.getKey()\n      );\n      executorRunnablePair.lhs.execute(executorRunnablePair.rhs);\n    }\n    handOffCallbacks.clear();\n\n    \r\n    final TaskStatus taskStatus = statusFuture.get();\n    Assert.assertEquals(TaskState.SUCCESS, taskStatus.getStatusCode());\n  }\n","date":"2018-08-31 00:56:26","endLine":379,"groupId":"18945","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/88/a5a43ac6348dcc06d166c7ecd82fe32df01520.src","preCode":"  public void testBasics() throws Exception\n  {\n    final TestIndexerMetadataStorageCoordinator mdc = new TestIndexerMetadataStorageCoordinator();\n    final RealtimeIndexTask task = makeRealtimeTask(null);\n    final TaskToolbox taskToolbox = makeToolbox(task, mdc, tempFolder.newFolder());\n    final ListenableFuture<TaskStatus> statusFuture = runTask(task, taskToolbox);\n    final DataSegment publishedSegment;\n\n    \r\n    while (task.getFirehose() == null) {\n      Thread.sleep(50);\n    }\n\n    final TestFirehose firehose = (TestFirehose) task.getFirehose();\n\n    firehose.addRows(\n        ImmutableList.of(\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim1\", \"foo\", \"met1\", \"1\"),\n            ImmutableMap.of(\"t\", now.minus(new Period(\"P1D\")).getMillis(), \"dim1\", \"foo\", \"met1\", 2.0),\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim2\", \"bar\", \"met1\", 2.0)\n        )\n    );\n\n    \r\n    firehose.close();\n\n    \r\n    while (mdc.getPublished().isEmpty()) {\n      Thread.sleep(50);\n    }\n\n    publishedSegment = Iterables.getOnlyElement(mdc.getPublished());\n\n    \r\n    Assert.assertEquals(2, task.getMetrics().processed());\n    Assert.assertEquals(1, task.getMetrics().thrownAway());\n    Assert.assertEquals(0, task.getMetrics().unparseable());\n\n    \r\n    Assert.assertEquals(2, sumMetric(task, null, \"rows\").longValue());\n    Assert.assertEquals(3, sumMetric(task, null, \"met1\").longValue());\n\n    \r\n    for (Map.Entry<SegmentDescriptor, Pair<Executor, Runnable>> entry : handOffCallbacks.entrySet()) {\n      final Pair<Executor, Runnable> executorRunnablePair = entry.getValue();\n      Assert.assertEquals(\n          new SegmentDescriptor(\n              publishedSegment.getInterval(),\n              publishedSegment.getVersion(),\n              publishedSegment.getShardSpec().getPartitionNum()\n          ),\n          entry.getKey()\n      );\n      executorRunnablePair.lhs.execute(executorRunnablePair.rhs);\n    }\n    handOffCallbacks.clear();\n\n    \r\n    final TaskStatus taskStatus = statusFuture.get();\n    Assert.assertEquals(TaskState.SUCCESS, taskStatus.getStatusCode());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/RealtimeIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testNoReportParseExceptions() throws Exception\n  {\n    final TestIndexerMetadataStorageCoordinator mdc = new TestIndexerMetadataStorageCoordinator();\n    final RealtimeIndexTask task = makeRealtimeTask(null, false);\n    final TaskToolbox taskToolbox = makeToolbox(task, mdc, tempFolder.newFolder());\n    final ListenableFuture<TaskStatus> statusFuture = runTask(task, taskToolbox);\n    final DataSegment publishedSegment;\n\n    \r\n    while (task.getFirehose() == null) {\n      Thread.sleep(50);\n    }\n\n    final TestFirehose firehose = (TestFirehose) task.getFirehose();\n\n    firehose.addRows(\n        Arrays.asList(\n            \r\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim1\", \"foo\", \"met1\", \"1\"),\n\n            \r\n            null,\n\n            \r\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim1\", \"foo\", \"met1\", \"foo\"),\n\n            \r\n            ImmutableMap.of(\"dim1\", \"foo\", \"met1\", 2.0, FAIL_DIM, \"x\"),\n\n            \r\n            ImmutableMap.of(\"t\", now.minus(Period.days(1)).getMillis(), \"dim1\", \"foo\", \"met1\", 2.0),\n\n            \r\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim2\", \"bar\", \"met1\", 2.0)\n        )\n    );\n\n    \r\n    firehose.close();\n\n    \r\n    while (mdc.getPublished().isEmpty()) {\n      Thread.sleep(50);\n    }\n\n    publishedSegment = Iterables.getOnlyElement(mdc.getPublished());\n\n    \r\n    Assert.assertEquals(3, task.getMetrics().processed());\n    Assert.assertEquals(1, task.getMetrics().thrownAway());\n    Assert.assertEquals(2, task.getMetrics().unparseable());\n\n    \r\n    Assert.assertEquals(3, sumMetric(task, null, \"rows\").longValue());\n    Assert.assertEquals(3, sumMetric(task, null, \"met1\").longValue());\n\n    \r\n    for (Map.Entry<SegmentDescriptor, Pair<Executor, Runnable>> entry : handOffCallbacks.entrySet()) {\n      final Pair<Executor, Runnable> executorRunnablePair = entry.getValue();\n      Assert.assertEquals(\n          new SegmentDescriptor(\n              publishedSegment.getInterval(),\n              publishedSegment.getVersion(),\n              publishedSegment.getShardSpec().getPartitionNum()\n          ),\n          entry.getKey()\n      );\n      executorRunnablePair.lhs.execute(executorRunnablePair.rhs);\n    }\n    handOffCallbacks.clear();\n\n    \r\n    final TaskStatus taskStatus = statusFuture.get();\n    Assert.assertEquals(TaskState.SUCCESS, taskStatus.getStatusCode());\n  }\n","date":"2018-08-31 00:56:26","endLine":571,"groupId":"18945","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoReportParseExceptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/88/a5a43ac6348dcc06d166c7ecd82fe32df01520.src","preCode":"  public void testNoReportParseExceptions() throws Exception\n  {\n    final TestIndexerMetadataStorageCoordinator mdc = new TestIndexerMetadataStorageCoordinator();\n    final RealtimeIndexTask task = makeRealtimeTask(null, false);\n    final TaskToolbox taskToolbox = makeToolbox(task, mdc, tempFolder.newFolder());\n    final ListenableFuture<TaskStatus> statusFuture = runTask(task, taskToolbox);\n    final DataSegment publishedSegment;\n\n    \r\n    while (task.getFirehose() == null) {\n      Thread.sleep(50);\n    }\n\n    final TestFirehose firehose = (TestFirehose) task.getFirehose();\n\n    firehose.addRows(\n        Arrays.asList(\n            \r\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim1\", \"foo\", \"met1\", \"1\"),\n\n            \r\n            null,\n\n            \r\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim1\", \"foo\", \"met1\", \"foo\"),\n\n            \r\n            ImmutableMap.of(\"dim1\", \"foo\", \"met1\", 2.0, FAIL_DIM, \"x\"),\n\n            \r\n            ImmutableMap.of(\"t\", now.minus(Period.days(1)).getMillis(), \"dim1\", \"foo\", \"met1\", 2.0),\n\n            \r\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim2\", \"bar\", \"met1\", 2.0)\n        )\n    );\n\n    \r\n    firehose.close();\n\n    \r\n    while (mdc.getPublished().isEmpty()) {\n      Thread.sleep(50);\n    }\n\n    publishedSegment = Iterables.getOnlyElement(mdc.getPublished());\n\n    \r\n    Assert.assertEquals(3, task.getMetrics().processed());\n    Assert.assertEquals(1, task.getMetrics().thrownAway());\n    Assert.assertEquals(2, task.getMetrics().unparseable());\n\n    \r\n    Assert.assertEquals(3, sumMetric(task, null, \"rows\").longValue());\n    Assert.assertEquals(3, sumMetric(task, null, \"met1\").longValue());\n\n    \r\n    for (Map.Entry<SegmentDescriptor, Pair<Executor, Runnable>> entry : handOffCallbacks.entrySet()) {\n      final Pair<Executor, Runnable> executorRunnablePair = entry.getValue();\n      Assert.assertEquals(\n          new SegmentDescriptor(\n              publishedSegment.getInterval(),\n              publishedSegment.getVersion(),\n              publishedSegment.getShardSpec().getPartitionNum()\n          ),\n          entry.getKey()\n      );\n      executorRunnablePair.lhs.execute(executorRunnablePair.rhs);\n    }\n    handOffCallbacks.clear();\n\n    \r\n    final TaskStatus taskStatus = statusFuture.get();\n    Assert.assertEquals(TaskState.SUCCESS, taskStatus.getStatusCode());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/RealtimeIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":497,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-05-02 13:37:14","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testBasics() throws Exception\n  {\n    final TestIndexerMetadataStorageCoordinator mdc = new TestIndexerMetadataStorageCoordinator();\n    final RealtimeIndexTask task = makeRealtimeTask(null);\n    final TaskToolbox taskToolbox = makeToolbox(task, mdc, tempFolder.newFolder());\n    final ListenableFuture<TaskStatus> statusFuture = runTask(task, taskToolbox);\n    final DataSegment publishedSegment;\n\n    \r\n    while (task.getFirehose() == null) {\n      Thread.sleep(50);\n    }\n\n    final TestFirehose firehose = (TestFirehose) task.getFirehose();\n\n    firehose.addRows(\n        ImmutableList.of(\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim1\", \"foo\", \"met1\", \"1\"),\n            ImmutableMap.of(\"t\", now.minus(new Period(\"P1D\")).getMillis(), \"dim1\", \"foo\", \"met1\", 2.0),\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim2\", \"bar\", \"met1\", 2.0)\n        )\n    );\n\n    \r\n    firehose.close();\n\n    \r\n    while (mdc.getPublished().isEmpty()) {\n      Thread.sleep(50);\n    }\n\n    publishedSegment = Iterables.getOnlyElement(mdc.getPublished());\n\n    \r\n    Assert.assertEquals(2, task.getMetrics().processed());\n    Assert.assertEquals(1, task.getMetrics().thrownAway());\n    Assert.assertEquals(0, task.getMetrics().unparseable());\n\n    \r\n    Assert.assertEquals(2, sumMetric(task, null, \"rows\").longValue());\n    Assert.assertEquals(3, sumMetric(task, null, \"met1\").longValue());\n\n    \r\n    for (Map.Entry<SegmentDescriptor, Pair<Executor, Runnable>> entry : handOffCallbacks.entrySet()) {\n      final Pair<Executor, Runnable> executorRunnablePair = entry.getValue();\n      Assert.assertEquals(\n          new SegmentDescriptor(\n              publishedSegment.getInterval(),\n              publishedSegment.getVersion(),\n              publishedSegment.getShardSpec().getPartitionNum()\n          ),\n          entry.getKey()\n      );\n      executorRunnablePair.lhs.execute(executorRunnablePair.rhs);\n    }\n    handOffCallbacks.clear();\n\n    \r\n    final TaskStatus taskStatus = statusFuture.get();\n    Assert.assertEquals(TaskState.SUCCESS, taskStatus.getStatusCode());\n  }\n","date":"2018-08-31 00:56:26","endLine":379,"groupId":"104413","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/88/a5a43ac6348dcc06d166c7ecd82fe32df01520.src","preCode":"  public void testBasics() throws Exception\n  {\n    final TestIndexerMetadataStorageCoordinator mdc = new TestIndexerMetadataStorageCoordinator();\n    final RealtimeIndexTask task = makeRealtimeTask(null);\n    final TaskToolbox taskToolbox = makeToolbox(task, mdc, tempFolder.newFolder());\n    final ListenableFuture<TaskStatus> statusFuture = runTask(task, taskToolbox);\n    final DataSegment publishedSegment;\n\n    \r\n    while (task.getFirehose() == null) {\n      Thread.sleep(50);\n    }\n\n    final TestFirehose firehose = (TestFirehose) task.getFirehose();\n\n    firehose.addRows(\n        ImmutableList.of(\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim1\", \"foo\", \"met1\", \"1\"),\n            ImmutableMap.of(\"t\", now.minus(new Period(\"P1D\")).getMillis(), \"dim1\", \"foo\", \"met1\", 2.0),\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim2\", \"bar\", \"met1\", 2.0)\n        )\n    );\n\n    \r\n    firehose.close();\n\n    \r\n    while (mdc.getPublished().isEmpty()) {\n      Thread.sleep(50);\n    }\n\n    publishedSegment = Iterables.getOnlyElement(mdc.getPublished());\n\n    \r\n    Assert.assertEquals(2, task.getMetrics().processed());\n    Assert.assertEquals(1, task.getMetrics().thrownAway());\n    Assert.assertEquals(0, task.getMetrics().unparseable());\n\n    \r\n    Assert.assertEquals(2, sumMetric(task, null, \"rows\").longValue());\n    Assert.assertEquals(3, sumMetric(task, null, \"met1\").longValue());\n\n    \r\n    for (Map.Entry<SegmentDescriptor, Pair<Executor, Runnable>> entry : handOffCallbacks.entrySet()) {\n      final Pair<Executor, Runnable> executorRunnablePair = entry.getValue();\n      Assert.assertEquals(\n          new SegmentDescriptor(\n              publishedSegment.getInterval(),\n              publishedSegment.getVersion(),\n              publishedSegment.getShardSpec().getPartitionNum()\n          ),\n          entry.getKey()\n      );\n      executorRunnablePair.lhs.execute(executorRunnablePair.rhs);\n    }\n    handOffCallbacks.clear();\n\n    \r\n    final TaskStatus taskStatus = statusFuture.get();\n    Assert.assertEquals(TaskState.SUCCESS, taskStatus.getStatusCode());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/RealtimeIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"N"},{"authorDate":"2019-05-02 13:37:14","commitOrder":2,"curCode":"  public void testNoReportParseExceptions() throws Exception\n  {\n    final TestIndexerMetadataStorageCoordinator mdc = new TestIndexerMetadataStorageCoordinator();\n    final RealtimeIndexTask task = makeRealtimeTask(null, false);\n    final TaskToolbox taskToolbox = makeToolbox(task, mdc, tempFolder.newFolder());\n    final ListenableFuture<TaskStatus> statusFuture = runTask(task, taskToolbox);\n    final DataSegment publishedSegment;\n\n    \r\n    while (task.getFirehose() == null) {\n      Thread.sleep(50);\n    }\n\n    final TestFirehose firehose = (TestFirehose) task.getFirehose();\n\n    firehose.addRows(\n        Arrays.asList(\n            \r\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim1\", \"foo\", \"met1\", \"1\"),\n\n            \r\n            null,\n\n            \r\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim1\", \"foo\", \"met1\", \"foo\"),\n\n            \r\n            ImmutableMap.of(\"dim1\", \"foo\", \"met1\", 2.0, TestFirehose.FAIL_DIM, \"x\"),\n\n            \r\n            ImmutableMap.of(\"t\", now.minus(Period.days(1)).getMillis(), \"dim1\", \"foo\", \"met1\", 2.0),\n\n            \r\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim2\", \"bar\", \"met1\", 2.0)\n        )\n    );\n\n    \r\n    firehose.close();\n\n    \r\n    while (mdc.getPublished().isEmpty()) {\n      Thread.sleep(50);\n    }\n\n    publishedSegment = Iterables.getOnlyElement(mdc.getPublished());\n\n    \r\n    Assert.assertEquals(3, task.getMetrics().processed());\n    Assert.assertEquals(1, task.getMetrics().thrownAway());\n    Assert.assertEquals(2, task.getMetrics().unparseable());\n\n    \r\n    Assert.assertEquals(3, sumMetric(task, null, \"rows\").longValue());\n    Assert.assertEquals(3, sumMetric(task, null, \"met1\").longValue());\n\n    \r\n    for (Map.Entry<SegmentDescriptor, Pair<Executor, Runnable>> entry : handOffCallbacks.entrySet()) {\n      final Pair<Executor, Runnable> executorRunnablePair = entry.getValue();\n      Assert.assertEquals(\n          new SegmentDescriptor(\n              publishedSegment.getInterval(),\n              publishedSegment.getVersion(),\n              publishedSegment.getShardSpec().getPartitionNum()\n          ),\n          entry.getKey()\n      );\n      executorRunnablePair.lhs.execute(executorRunnablePair.rhs);\n    }\n    handOffCallbacks.clear();\n\n    \r\n    final TaskStatus taskStatus = statusFuture.get();\n    Assert.assertEquals(TaskState.SUCCESS, taskStatus.getStatusCode());\n  }\n","date":"2019-05-02 13:37:14","endLine":485,"groupId":"104413","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoReportParseExceptions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e2/a24f582377a4b8ab7268e409aeda32cfc707b3.src","preCode":"  public void testNoReportParseExceptions() throws Exception\n  {\n    final TestIndexerMetadataStorageCoordinator mdc = new TestIndexerMetadataStorageCoordinator();\n    final RealtimeIndexTask task = makeRealtimeTask(null, false);\n    final TaskToolbox taskToolbox = makeToolbox(task, mdc, tempFolder.newFolder());\n    final ListenableFuture<TaskStatus> statusFuture = runTask(task, taskToolbox);\n    final DataSegment publishedSegment;\n\n    \r\n    while (task.getFirehose() == null) {\n      Thread.sleep(50);\n    }\n\n    final TestFirehose firehose = (TestFirehose) task.getFirehose();\n\n    firehose.addRows(\n        Arrays.asList(\n            \r\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim1\", \"foo\", \"met1\", \"1\"),\n\n            \r\n            null,\n\n            \r\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim1\", \"foo\", \"met1\", \"foo\"),\n\n            \r\n            ImmutableMap.of(\"dim1\", \"foo\", \"met1\", 2.0, FAIL_DIM, \"x\"),\n\n            \r\n            ImmutableMap.of(\"t\", now.minus(Period.days(1)).getMillis(), \"dim1\", \"foo\", \"met1\", 2.0),\n\n            \r\n            ImmutableMap.of(\"t\", now.getMillis(), \"dim2\", \"bar\", \"met1\", 2.0)\n        )\n    );\n\n    \r\n    firehose.close();\n\n    \r\n    while (mdc.getPublished().isEmpty()) {\n      Thread.sleep(50);\n    }\n\n    publishedSegment = Iterables.getOnlyElement(mdc.getPublished());\n\n    \r\n    Assert.assertEquals(3, task.getMetrics().processed());\n    Assert.assertEquals(1, task.getMetrics().thrownAway());\n    Assert.assertEquals(2, task.getMetrics().unparseable());\n\n    \r\n    Assert.assertEquals(3, sumMetric(task, null, \"rows\").longValue());\n    Assert.assertEquals(3, sumMetric(task, null, \"met1\").longValue());\n\n    \r\n    for (Map.Entry<SegmentDescriptor, Pair<Executor, Runnable>> entry : handOffCallbacks.entrySet()) {\n      final Pair<Executor, Runnable> executorRunnablePair = entry.getValue();\n      Assert.assertEquals(\n          new SegmentDescriptor(\n              publishedSegment.getInterval(),\n              publishedSegment.getVersion(),\n              publishedSegment.getShardSpec().getPartitionNum()\n          ),\n          entry.getKey()\n      );\n      executorRunnablePair.lhs.execute(executorRunnablePair.rhs);\n    }\n    handOffCallbacks.clear();\n\n    \r\n    final TaskStatus taskStatus = statusFuture.get();\n    Assert.assertEquals(TaskState.SUCCESS, taskStatus.getStatusCode());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/RealtimeIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"}],"commitId":"ec8562c885f212d1c070a40322001a3da8048a0f","commitMessage":"@@@Data loader (sampler component) (#7531)\n\n* sampler initial check-in\nfix checkstyle issues\nadd sampler fix to process CSV files from cache properly\nchange to composition and rename some classes\nadd tests and report num rows read and indexed\nremove excludedByFilter flag and don't send filtered out data\nfix tests to handle both settings for druid.generic.useDefaultValueForNull\n\n* wrap sampler firehose in TimedShutoffFirehoseFactory to support timeouts\n\n* code review changes - add additional comments.  limit maxRows\n","date":"2019-05-02 13:37:14","modifiedFileCount":"8","status":"M","submitter":"David Lim"}]
