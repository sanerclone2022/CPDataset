[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testAddToExistingNumberedShardSpecsFinerPreferredGranularity() throws Exception\n  {\n    final Task task = new NoopTask(null, null, 0, 0, null, null, null);\n\n    taskActionTestKit.getMetadataStorageCoordinator().announceHistoricalSegments(\n        ImmutableSet.of(\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(0, 2))\n                       .build(),\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(1, 2))\n                       .build()\n        )\n    );\n\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdentifier id1 = allocate(task, PARTY_TIME, Granularities.NONE, Granularities.MINUTE, \"s1\", null);\n\n    assertSameIdentifier(\n        id1,\n        new SegmentIdentifier(\n            DATA_SOURCE,\n            Granularities.HOUR.bucket(PARTY_TIME),\n            PARTY_TIME.toString(),\n            new NumberedShardSpec(2, 2)\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":604,"groupId":"18474","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddToExistingNumberedShardSpecsFinerPreferredGranularity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/64/bb9a86049d5587b0ab967d6882fc8a3910b83b.src","preCode":"  public void testAddToExistingNumberedShardSpecsFinerPreferredGranularity() throws Exception\n  {\n    final Task task = new NoopTask(null, null, 0, 0, null, null, null);\n\n    taskActionTestKit.getMetadataStorageCoordinator().announceHistoricalSegments(\n        ImmutableSet.of(\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(0, 2))\n                       .build(),\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(1, 2))\n                       .build()\n        )\n    );\n\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdentifier id1 = allocate(task, PARTY_TIME, Granularities.NONE, Granularities.MINUTE, \"s1\", null);\n\n    assertSameIdentifier(\n        id1,\n        new SegmentIdentifier(\n            DATA_SOURCE,\n            Granularities.HOUR.bucket(PARTY_TIME),\n            PARTY_TIME.toString(),\n            new NumberedShardSpec(2, 2)\n        )\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/actions/SegmentAllocateActionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testCannotDoAnythingWithSillyQueryGranularity()\n  {\n    final Task task = new NoopTask(null, null, 0, 0, null, null, null);\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdentifier id1 = allocate(task, PARTY_TIME, Granularities.DAY, Granularities.HOUR, \"s1\", null);\n\n    Assert.assertNull(id1);\n  }\n","date":"2018-08-31 00:56:26","endLine":644,"groupId":"17989","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCannotDoAnythingWithSillyQueryGranularity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/64/bb9a86049d5587b0ab967d6882fc8a3910b83b.src","preCode":"  public void testCannotDoAnythingWithSillyQueryGranularity()\n  {\n    final Task task = new NoopTask(null, null, 0, 0, null, null, null);\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdentifier id1 = allocate(task, PARTY_TIME, Granularities.DAY, Granularities.HOUR, \"s1\", null);\n\n    Assert.assertNull(id1);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/actions/SegmentAllocateActionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":636,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void testAddToExistingNumberedShardSpecsFinerPreferredGranularity() throws Exception\n  {\n    final Task task = new NoopTask(null, null, 0, 0, null, null, null);\n\n    taskActionTestKit.getMetadataStorageCoordinator().announceHistoricalSegments(\n        ImmutableSet.of(\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(0, 2))\n                       .build(),\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(1, 2))\n                       .build()\n        )\n    );\n\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdWithShardSpec id1 = allocate(task, PARTY_TIME, Granularities.NONE, Granularities.MINUTE, \"s1\", null);\n\n    assertSameIdentifier(\n        id1,\n        new SegmentIdWithShardSpec(\n            DATA_SOURCE,\n            Granularities.HOUR.bucket(PARTY_TIME),\n            PARTY_TIME.toString(),\n            new NumberedShardSpec(2, 2)\n        )\n    );\n  }\n","date":"2019-01-22 03:11:10","endLine":604,"groupId":"18474","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddToExistingNumberedShardSpecsFinerPreferredGranularity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1d/ebc77f6b452c18fa95a9140992ad212deb4d7c.src","preCode":"  public void testAddToExistingNumberedShardSpecsFinerPreferredGranularity() throws Exception\n  {\n    final Task task = new NoopTask(null, null, 0, 0, null, null, null);\n\n    taskActionTestKit.getMetadataStorageCoordinator().announceHistoricalSegments(\n        ImmutableSet.of(\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(0, 2))\n                       .build(),\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(1, 2))\n                       .build()\n        )\n    );\n\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdentifier id1 = allocate(task, PARTY_TIME, Granularities.NONE, Granularities.MINUTE, \"s1\", null);\n\n    assertSameIdentifier(\n        id1,\n        new SegmentIdentifier(\n            DATA_SOURCE,\n            Granularities.HOUR.bucket(PARTY_TIME),\n            PARTY_TIME.toString(),\n            new NumberedShardSpec(2, 2)\n        )\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/actions/SegmentAllocateActionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void testCannotDoAnythingWithSillyQueryGranularity()\n  {\n    final Task task = new NoopTask(null, null, 0, 0, null, null, null);\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdWithShardSpec id1 = allocate(task, PARTY_TIME, Granularities.DAY, Granularities.HOUR, \"s1\", null);\n\n    Assert.assertNull(id1);\n  }\n","date":"2019-01-22 03:11:10","endLine":644,"groupId":"234","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCannotDoAnythingWithSillyQueryGranularity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1d/ebc77f6b452c18fa95a9140992ad212deb4d7c.src","preCode":"  public void testCannotDoAnythingWithSillyQueryGranularity()\n  {\n    final Task task = new NoopTask(null, null, 0, 0, null, null, null);\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdentifier id1 = allocate(task, PARTY_TIME, Granularities.DAY, Granularities.HOUR, \"s1\", null);\n\n    Assert.assertNull(id1);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/actions/SegmentAllocateActionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":636,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-07-25 08:35:46","codes":[{"authorDate":"2019-07-25 08:35:46","commitOrder":3,"curCode":"  public void testAddToExistingNumberedShardSpecsFinerPreferredGranularity() throws Exception\n  {\n    final Task task = NoopTask.create();\n\n    taskActionTestKit.getMetadataStorageCoordinator().announceHistoricalSegments(\n        ImmutableSet.of(\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(0, 2))\n                       .build(),\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(1, 2))\n                       .build()\n        )\n    );\n\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdWithShardSpec id1 = allocate(task, PARTY_TIME, Granularities.NONE, Granularities.MINUTE, \"s1\", null);\n\n    assertSameIdentifier(\n        new SegmentIdWithShardSpec(\n            DATA_SOURCE,\n            Granularities.HOUR.bucket(PARTY_TIME),\n            PARTY_TIME.toString(),\n            new NumberedShardSpec(2, 2)\n        ),\n        id1\n    );\n  }\n","date":"2019-07-25 08:35:46","endLine":818,"groupId":"18474","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddToExistingNumberedShardSpecsFinerPreferredGranularity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5c/abcf598cb69aa1d16125b360beb974a72c3e70.src","preCode":"  public void testAddToExistingNumberedShardSpecsFinerPreferredGranularity() throws Exception\n  {\n    final Task task = new NoopTask(null, null, 0, 0, null, null, null);\n\n    taskActionTestKit.getMetadataStorageCoordinator().announceHistoricalSegments(\n        ImmutableSet.of(\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(0, 2))\n                       .build(),\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(1, 2))\n                       .build()\n        )\n    );\n\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdWithShardSpec id1 = allocate(task, PARTY_TIME, Granularities.NONE, Granularities.MINUTE, \"s1\", null);\n\n    assertSameIdentifier(\n        id1,\n        new SegmentIdWithShardSpec(\n            DATA_SOURCE,\n            Granularities.HOUR.bucket(PARTY_TIME),\n            PARTY_TIME.toString(),\n            new NumberedShardSpec(2, 2)\n        )\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/actions/SegmentAllocateActionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":784,"status":"M"},{"authorDate":"2019-07-25 08:35:46","commitOrder":3,"curCode":"  public void testCannotDoAnythingWithSillyQueryGranularity()\n  {\n    final Task task = NoopTask.create();\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdWithShardSpec id1 = allocate(task, PARTY_TIME, Granularities.DAY, Granularities.HOUR, \"s1\", null);\n\n    Assert.assertNull(id1);\n  }\n","date":"2019-07-25 08:35:46","endLine":858,"groupId":"234","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCannotDoAnythingWithSillyQueryGranularity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5c/abcf598cb69aa1d16125b360beb974a72c3e70.src","preCode":"  public void testCannotDoAnythingWithSillyQueryGranularity()\n  {\n    final Task task = new NoopTask(null, null, 0, 0, null, null, null);\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdWithShardSpec id1 = allocate(task, PARTY_TIME, Granularities.DAY, Granularities.HOUR, \"s1\", null);\n\n    Assert.assertNull(id1);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/actions/SegmentAllocateActionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":850,"status":"M"}],"commitId":"db149462073d59e7563f0d3834e69d44a2bb4011","commitMessage":"@@@Add support minor compaction with segment locking (#7547)\n\n* Segment locking\n\n* Allow both timeChunk and segment lock in the same gruop\n\n* fix it test\n\n* Fix adding same chunk to atomicUpdateGroup\n\n* resolving todos\n\n* Fix segments to lock\n\n* fix segments to lock\n\n* fix kill task\n\n* resolving todos\n\n* resolving todos\n\n* fix teamcity\n\n* remove unused class\n\n* fix single map\n\n* resolving todos\n\n* fix build\n\n* fix SQLMetadataSegmentManager\n\n* fix findInputSegments\n\n* adding more tests\n\n* fixing task lock checks\n\n* add SegmentTransactionalOverwriteAction\n\n* changing publisher\n\n* fixing something\n\n* fix for perfect rollup\n\n* fix test\n\n* adjust package-lock.json\n\n* fix test\n\n* fix style\n\n* adding javadocs\n\n* remove unused classes\n\n* add more javadocs\n\n* unused import\n\n* fix test\n\n* fix test\n\n* Support forceTimeChunk context and force timeChunk lock for parallel index task if intervals are missing\n\n* fix travis\n\n* fix travis\n\n* unused import\n\n* spotbug\n\n* revert getMaxVersion\n\n* address comments\n\n* fix tc\n\n* add missing error handling\n\n* fix backward compatibility\n\n* unused import\n\n* Fix perf of versionedIntervalTimeline\n\n* fix timeline\n\n* fix tc\n\n* remove remaining todos\n\n* add comment for parallel index\n\n* fix javadoc and typos\n\n* typo\n\n* address comments\n","date":"2019-07-25 08:35:46","modifiedFileCount":"130","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-07-25 08:35:46","codes":[{"authorDate":"2019-11-07 03:07:04","commitOrder":4,"curCode":"  public void testAddToExistingNumberedShardSpecsFinerPreferredGranularity() throws Exception\n  {\n    final Task task = NoopTask.create();\n\n    taskActionTestKit.getMetadataStorageCoordinator().announceHistoricalSegments(\n        ImmutableSet.of(\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(0, 2))\n                       .size(0)\n                       .build(),\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(1, 2))\n                       .size(0)\n                       .build()\n        )\n    );\n\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdWithShardSpec id1 = allocate(task, PARTY_TIME, Granularities.NONE, Granularities.MINUTE, \"s1\", null);\n\n    assertSameIdentifier(\n        new SegmentIdWithShardSpec(\n            DATA_SOURCE,\n            Granularities.HOUR.bucket(PARTY_TIME),\n            PARTY_TIME.toString(),\n            new NumberedShardSpec(2, 2)\n        ),\n        id1\n    );\n  }\n","date":"2019-11-07 03:07:04","endLine":826,"groupId":"104393","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddToExistingNumberedShardSpecsFinerPreferredGranularity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/71/87bdbf07e36672403b32dad0c97074e903aace.src","preCode":"  public void testAddToExistingNumberedShardSpecsFinerPreferredGranularity() throws Exception\n  {\n    final Task task = NoopTask.create();\n\n    taskActionTestKit.getMetadataStorageCoordinator().announceHistoricalSegments(\n        ImmutableSet.of(\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(0, 2))\n                       .build(),\n            DataSegment.builder()\n                       .dataSource(DATA_SOURCE)\n                       .interval(Granularities.HOUR.bucket(PARTY_TIME))\n                       .version(PARTY_TIME.toString())\n                       .shardSpec(new NumberedShardSpec(1, 2))\n                       .build()\n        )\n    );\n\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdWithShardSpec id1 = allocate(task, PARTY_TIME, Granularities.NONE, Granularities.MINUTE, \"s1\", null);\n\n    assertSameIdentifier(\n        new SegmentIdWithShardSpec(\n            DATA_SOURCE,\n            Granularities.HOUR.bucket(PARTY_TIME),\n            PARTY_TIME.toString(),\n            new NumberedShardSpec(2, 2)\n        ),\n        id1\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/actions/SegmentAllocateActionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":790,"status":"M"},{"authorDate":"2019-07-25 08:35:46","commitOrder":4,"curCode":"  public void testCannotDoAnythingWithSillyQueryGranularity()\n  {\n    final Task task = NoopTask.create();\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdWithShardSpec id1 = allocate(task, PARTY_TIME, Granularities.DAY, Granularities.HOUR, \"s1\", null);\n\n    Assert.assertNull(id1);\n  }\n","date":"2019-07-25 08:35:46","endLine":858,"groupId":"104393","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCannotDoAnythingWithSillyQueryGranularity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5c/abcf598cb69aa1d16125b360beb974a72c3e70.src","preCode":"  public void testCannotDoAnythingWithSillyQueryGranularity()\n  {\n    final Task task = NoopTask.create();\n    taskActionTestKit.getTaskLockbox().add(task);\n\n    final SegmentIdWithShardSpec id1 = allocate(task, PARTY_TIME, Granularities.DAY, Granularities.HOUR, \"s1\", null);\n\n    Assert.assertNull(id1);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/actions/SegmentAllocateActionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":850,"status":"N"}],"commitId":"5c0fc0a13ab4d259b430bf50b322f631504c4529","commitMessage":"@@@Fix ambiguity about IndexerSQLMetadataStorageCoordinator.getUsedSegmentsForInterval() returning only non-overshadowed or all used segments (#8564)\n\n* IndexerSQLMetadataStorageCoordinator.getTimelineForIntervalsWithHandle() don't fetch abutting intervals; simplify getUsedSegmentsForIntervals()\n\n* Add VersionedIntervalTimeline.findNonOvershadowedObjectsInInterval() method; Propagate the decision about whether only visible segmetns or visible and overshadowed segments should be returned from IndexerMetadataStorageCoordinator's methods to the user logic; Rename SegmentListUsedAction to RetrieveUsedSegmentsAction.  SegmetnListUnusedAction to RetrieveUnusedSegmentsAction.  and UsedSegmentLister to UsedSegmentsRetriever\n\n* Fix tests\n\n* More fixes\n\n* Add javadoc notes about returning Collection instead of Set. Add JacksonUtils.readValue() to reduce boilerplate code\n\n* Fix KinesisIndexTaskTest.  factor out common parts from KinesisIndexTaskTest and KafkaIndexTaskTest into SeekableStreamIndexTaskTestBase\n\n* More test fixes\n\n* More test fixes\n\n* Add a comment to VersionedIntervalTimelineTestBase\n\n* Fix tests\n\n* Set DataSegment.size(0) in more tests\n\n* Specify DataSegment.size(0) in more places in tests\n\n* Fix more tests\n\n* Fix DruidSchemaTest\n\n* Set DataSegment's size in more tests and benchmarks\n\n* Fix HdfsDataSegmentPusherTest\n\n* Doc changes addressing comments\n\n* Extended doc for visibility\n\n* Typo\n\n* Typo 2\n\n* Address comment\n","date":"2019-11-07 03:07:04","modifiedFileCount":"88","status":"M","submitter":"Roman Leventov"}]
