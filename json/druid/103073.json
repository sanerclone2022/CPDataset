[{"authorTime":"2019-10-09 08:08:27","codes":[{"authorDate":"2019-10-09 08:08:27","commitOrder":1,"curCode":"  public void handleAuthenticatorUserMapUpdate(String authenticatorPrefix, byte[] serializedUserMap)\n  {\n    LOG.debug(\"Received user cache update for authenticator [%s].\", authenticatorPrefix);\n    Preconditions.checkState(lifecycleLock.awaitStarted(1, TimeUnit.MILLISECONDS));\n    try {\n      cachedUserMaps.put(\n          authenticatorPrefix,\n          objectMapper.readValue(\n              serializedUserMap,\n              BasicAuthUtils.AUTHENTICATOR_USER_MAP_TYPE_REFERENCE\n          )\n      );\n\n      if (commonCacheConfig.getCacheDirectory() != null) {\n        writeUserMapToDisk(authenticatorPrefix, serializedUserMap);\n      }\n    }\n    catch (Exception e) {\n      LOG.makeAlert(e, \"Could not deserialize user map received from coordinator.\").emit();\n    }\n  }\n","date":"2019-10-09 08:08:27","endLine":175,"groupId":"10125","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"handleAuthenticatorUserMapUpdate","params":"(StringauthenticatorPrefix@byte[]serializedUserMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cd/fd8027c3be0a5eb7a26b7c9a67461036e178a4.src","preCode":"  public void handleAuthenticatorUserMapUpdate(String authenticatorPrefix, byte[] serializedUserMap)\n  {\n    LOG.debug(\"Received user cache update for authenticator [%s].\", authenticatorPrefix);\n    Preconditions.checkState(lifecycleLock.awaitStarted(1, TimeUnit.MILLISECONDS));\n    try {\n      cachedUserMaps.put(\n          authenticatorPrefix,\n          objectMapper.readValue(\n              serializedUserMap,\n              BasicAuthUtils.AUTHENTICATOR_USER_MAP_TYPE_REFERENCE\n          )\n      );\n\n      if (commonCacheConfig.getCacheDirectory() != null) {\n        writeUserMapToDisk(authenticatorPrefix, serializedUserMap);\n      }\n    }\n    catch (Exception e) {\n      LOG.makeAlert(e, \"Could not deserialize user map received from coordinator.\").emit();\n    }\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/authentication/db/cache/CoordinatorPollingBasicAuthenticatorCacheManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"B"},{"authorDate":"2019-10-09 08:08:27","commitOrder":1,"curCode":"  public void handleAuthorizerUserUpdate(String authorizerPrefix, byte[] serializedUserAndRoleMap)\n  {\n    LOG.debug(\"Received userMap cache update for authorizer [%s].\", authorizerPrefix);\n    Preconditions.checkState(lifecycleLock.awaitStarted(1, TimeUnit.MILLISECONDS));\n    try {\n      UserAndRoleMap userAndRoleMap = objectMapper.readValue(\n          serializedUserAndRoleMap,\n          BasicAuthUtils.AUTHORIZER_USER_AND_ROLE_MAP_TYPE_REFERENCE\n      );\n\n      cachedUserMaps.put(authorizerPrefix, userAndRoleMap.getUserMap());\n      cachedRoleMaps.put(authorizerPrefix, userAndRoleMap.getRoleMap());\n\n      if (commonCacheConfig.getCacheDirectory() != null) {\n        writeUserMapToDisk(authorizerPrefix, serializedUserAndRoleMap);\n      }\n    }\n    catch (Exception e) {\n      LOG.makeAlert(e, \"WTF? Could not deserialize user/role map received from coordinator.\").emit();\n    }\n  }\n","date":"2019-10-09 08:08:27","endLine":210,"groupId":"11437","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"handleAuthorizerUserUpdate","params":"(StringauthorizerPrefix@byte[]serializedUserAndRoleMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d4/58d977a490bf94aeb8c63bd63770efbec4c111.src","preCode":"  public void handleAuthorizerUserUpdate(String authorizerPrefix, byte[] serializedUserAndRoleMap)\n  {\n    LOG.debug(\"Received userMap cache update for authorizer [%s].\", authorizerPrefix);\n    Preconditions.checkState(lifecycleLock.awaitStarted(1, TimeUnit.MILLISECONDS));\n    try {\n      UserAndRoleMap userAndRoleMap = objectMapper.readValue(\n          serializedUserAndRoleMap,\n          BasicAuthUtils.AUTHORIZER_USER_AND_ROLE_MAP_TYPE_REFERENCE\n      );\n\n      cachedUserMaps.put(authorizerPrefix, userAndRoleMap.getUserMap());\n      cachedRoleMaps.put(authorizerPrefix, userAndRoleMap.getRoleMap());\n\n      if (commonCacheConfig.getCacheDirectory() != null) {\n        writeUserMapToDisk(authorizerPrefix, serializedUserAndRoleMap);\n      }\n    }\n    catch (Exception e) {\n      LOG.makeAlert(e, \"WTF? Could not deserialize user/role map received from coordinator.\").emit();\n    }\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/authorization/db/cache/CoordinatorPollingBasicAuthorizerCacheManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"}],"commitId":"18758f52283696ba12ab0763260909b7ca734f1e","commitMessage":"@@@Support LDAP authentication/authorization (#6972)\n\n* Support LDAP authentication/authorization\n\n* fixed integration-tests\n\n* fixed Travis CI build errors related to druid-security module\n\n* fixed failing test\n\n* fixed failing test header\n\n* added comments.  force build\n\n* fixes for strict compilation spotbugs checks\n\n* removed authenticator rolling credential update feature\n\n* removed escalator rolling credential update feature\n\n* fixed teamcity inspection deprecated API usage error\n\n* fixed checkstyle execution error.  removed unused import\n\n* removed cached config as part of removing authenticator rolling credential update feature\n\n* removed config bundle entity as part of removing authenticator rolling credential update feature\n\n* refactored ldao configuration\n\n* added support for SSLContext configuration and TLSCertificateChecker\n\n* removed check to return authentication failure when user has no group assigned.  will be checked and handled by the authorizer\n\n* Separate out authorizer checks between metadata-backed store user and LDAP user/groups\n\n* refactored BasicSecuritySSLSocketFactory usage to fix strict compilation spotbugs checks\n\n* fixes build issue\n\n* final review comments updates\n\n* final review comments updates\n\n* fixed LGTM and spellcheck alerts\n\n* Fixed Avatica auth failure error message check\n\n* Updated metadata credentials validator exception message string.  replaced DB with metadata store\n","date":"2019-10-09 08:08:27","modifiedFileCount":"44","status":"B","submitter":"Mohammad J. Khan"},{"authorTime":"2020-08-29 02:38:50","codes":[{"authorDate":"2019-10-09 08:08:27","commitOrder":2,"curCode":"  public void handleAuthenticatorUserMapUpdate(String authenticatorPrefix, byte[] serializedUserMap)\n  {\n    LOG.debug(\"Received user cache update for authenticator [%s].\", authenticatorPrefix);\n    Preconditions.checkState(lifecycleLock.awaitStarted(1, TimeUnit.MILLISECONDS));\n    try {\n      cachedUserMaps.put(\n          authenticatorPrefix,\n          objectMapper.readValue(\n              serializedUserMap,\n              BasicAuthUtils.AUTHENTICATOR_USER_MAP_TYPE_REFERENCE\n          )\n      );\n\n      if (commonCacheConfig.getCacheDirectory() != null) {\n        writeUserMapToDisk(authenticatorPrefix, serializedUserMap);\n      }\n    }\n    catch (Exception e) {\n      LOG.makeAlert(e, \"Could not deserialize user map received from coordinator.\").emit();\n    }\n  }\n","date":"2019-10-09 08:08:27","endLine":175,"groupId":"103073","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"handleAuthenticatorUserMapUpdate","params":"(StringauthenticatorPrefix@byte[]serializedUserMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cd/fd8027c3be0a5eb7a26b7c9a67461036e178a4.src","preCode":"  public void handleAuthenticatorUserMapUpdate(String authenticatorPrefix, byte[] serializedUserMap)\n  {\n    LOG.debug(\"Received user cache update for authenticator [%s].\", authenticatorPrefix);\n    Preconditions.checkState(lifecycleLock.awaitStarted(1, TimeUnit.MILLISECONDS));\n    try {\n      cachedUserMaps.put(\n          authenticatorPrefix,\n          objectMapper.readValue(\n              serializedUserMap,\n              BasicAuthUtils.AUTHENTICATOR_USER_MAP_TYPE_REFERENCE\n          )\n      );\n\n      if (commonCacheConfig.getCacheDirectory() != null) {\n        writeUserMapToDisk(authenticatorPrefix, serializedUserMap);\n      }\n    }\n    catch (Exception e) {\n      LOG.makeAlert(e, \"Could not deserialize user map received from coordinator.\").emit();\n    }\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/authentication/db/cache/CoordinatorPollingBasicAuthenticatorCacheManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"N"},{"authorDate":"2020-08-29 02:38:50","commitOrder":2,"curCode":"  public void handleAuthorizerUserUpdate(String authorizerPrefix, byte[] serializedUserAndRoleMap)\n  {\n    LOG.debug(\"Received userMap cache update for authorizer [%s].\", authorizerPrefix);\n    Preconditions.checkState(lifecycleLock.awaitStarted(1, TimeUnit.MILLISECONDS));\n    try {\n      UserAndRoleMap userAndRoleMap = objectMapper.readValue(\n          serializedUserAndRoleMap,\n          BasicAuthUtils.AUTHORIZER_USER_AND_ROLE_MAP_TYPE_REFERENCE\n      );\n\n      cachedUserMaps.put(authorizerPrefix, userAndRoleMap.getUserMap());\n      cachedRoleMaps.put(authorizerPrefix, userAndRoleMap.getRoleMap());\n\n      if (commonCacheConfig.getCacheDirectory() != null) {\n        writeUserMapToDisk(authorizerPrefix, serializedUserAndRoleMap);\n      }\n    }\n    catch (Exception e) {\n      LOG.makeAlert(e, \"Could not deserialize user/role map received from coordinator\").emit();\n    }\n  }\n","date":"2020-08-29 02:38:50","endLine":211,"groupId":"103073","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"handleAuthorizerUserUpdate","params":"(StringauthorizerPrefix@byte[]serializedUserAndRoleMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5c/cd04b7ef127dc771deb5cc2823c4c0f298975b.src","preCode":"  public void handleAuthorizerUserUpdate(String authorizerPrefix, byte[] serializedUserAndRoleMap)\n  {\n    LOG.debug(\"Received userMap cache update for authorizer [%s].\", authorizerPrefix);\n    Preconditions.checkState(lifecycleLock.awaitStarted(1, TimeUnit.MILLISECONDS));\n    try {\n      UserAndRoleMap userAndRoleMap = objectMapper.readValue(\n          serializedUserAndRoleMap,\n          BasicAuthUtils.AUTHORIZER_USER_AND_ROLE_MAP_TYPE_REFERENCE\n      );\n\n      cachedUserMaps.put(authorizerPrefix, userAndRoleMap.getUserMap());\n      cachedRoleMaps.put(authorizerPrefix, userAndRoleMap.getRoleMap());\n\n      if (commonCacheConfig.getCacheDirectory() != null) {\n        writeUserMapToDisk(authorizerPrefix, serializedUserAndRoleMap);\n      }\n    }\n    catch (Exception e) {\n      LOG.makeAlert(e, \"WTF? Could not deserialize user/role map received from coordinator.\").emit();\n    }\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/authorization/db/cache/CoordinatorPollingBasicAuthorizerCacheManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"8ab19793043c65bd79315de6fb26683f561a8a58","commitMessage":"@@@Remove implied profanity from error messages. (#10270)\n\ni.e. WTF.  WTH.","date":"2020-08-29 02:38:50","modifiedFileCount":"76","status":"M","submitter":"Gian Merlino"}]
