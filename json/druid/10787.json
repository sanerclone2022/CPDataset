[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testCoordinatorDatasources() throws Exception\n  {\n    coordinatorExpectedRequest.path = \"/druid/coordinator/v1/datasources\";\n    coordinatorExpectedRequest.method = \"GET\";\n    coordinatorExpectedRequest.headers = ImmutableMap.of(\"Authorization\", \"Basic bXl1c2VyOm15cGFzc3dvcmQ=\");\n\n    HttpURLConnection connection = ((HttpURLConnection)\n        new URL(StringUtils.format(\"http://localhost:%d%s\", port, coordinatorExpectedRequest.path))\n            .openConnection());\n    connection.setRequestMethod(coordinatorExpectedRequest.method);\n\n    coordinatorExpectedRequest.headers.forEach(connection::setRequestProperty);\n\n    Assert.assertEquals(200, connection.getResponseCode());\n    Assert.assertTrue(\"coordinator called\", coordinatorExpectedRequest.called);\n    Assert.assertFalse(\"overlord called\", overlordExpectedRequest.called);\n  }\n","date":"2018-08-31 00:56:26","endLine":151,"groupId":"13702","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCoordinatorDatasources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fa/6d540ac0354bd00a1744d486192f4d223fc732.src","preCode":"  public void testCoordinatorDatasources() throws Exception\n  {\n    coordinatorExpectedRequest.path = \"/druid/coordinator/v1/datasources\";\n    coordinatorExpectedRequest.method = \"GET\";\n    coordinatorExpectedRequest.headers = ImmutableMap.of(\"Authorization\", \"Basic bXl1c2VyOm15cGFzc3dvcmQ=\");\n\n    HttpURLConnection connection = ((HttpURLConnection)\n        new URL(StringUtils.format(\"http://localhost:%d%s\", port, coordinatorExpectedRequest.path))\n            .openConnection());\n    connection.setRequestMethod(coordinatorExpectedRequest.method);\n\n    coordinatorExpectedRequest.headers.forEach(connection::setRequestProperty);\n\n    Assert.assertEquals(200, connection.getResponseCode());\n    Assert.assertTrue(\"coordinator called\", coordinatorExpectedRequest.called);\n    Assert.assertFalse(\"overlord called\", overlordExpectedRequest.called);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/AsyncManagementForwardingServletTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testOverlordProxyLeader() throws Exception\n  {\n    overlordExpectedRequest.path = \"/druid/indexer/v1/leader\";\n    overlordExpectedRequest.method = \"GET\";\n    overlordExpectedRequest.headers = ImmutableMap.of(\"Authorization\", \"Basic bXl1c2VyOm15cGFzc3dvcmQ=\");\n\n    HttpURLConnection connection = ((HttpURLConnection)\n        new URL(StringUtils.format(\"http://localhost:%d/proxy/overlord/%s\", port, overlordExpectedRequest.path))\n            .openConnection());\n    connection.setRequestMethod(overlordExpectedRequest.method);\n\n    overlordExpectedRequest.headers.forEach(connection::setRequestProperty);\n\n    Assert.assertEquals(200, connection.getResponseCode());\n    Assert.assertFalse(\"coordinator called\", coordinatorExpectedRequest.called);\n    Assert.assertTrue(\"overlord called\", overlordExpectedRequest.called);\n  }\n","date":"2018-08-31 00:56:26","endLine":314,"groupId":"13702","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlordProxyLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fa/6d540ac0354bd00a1744d486192f4d223fc732.src","preCode":"  public void testOverlordProxyLeader() throws Exception\n  {\n    overlordExpectedRequest.path = \"/druid/indexer/v1/leader\";\n    overlordExpectedRequest.method = \"GET\";\n    overlordExpectedRequest.headers = ImmutableMap.of(\"Authorization\", \"Basic bXl1c2VyOm15cGFzc3dvcmQ=\");\n\n    HttpURLConnection connection = ((HttpURLConnection)\n        new URL(StringUtils.format(\"http://localhost:%d/proxy/overlord/%s\", port, overlordExpectedRequest.path))\n            .openConnection());\n    connection.setRequestMethod(overlordExpectedRequest.method);\n\n    overlordExpectedRequest.headers.forEach(connection::setRequestProperty);\n\n    Assert.assertEquals(200, connection.getResponseCode());\n    Assert.assertFalse(\"coordinator called\", coordinatorExpectedRequest.called);\n    Assert.assertTrue(\"overlord called\", overlordExpectedRequest.called);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/AsyncManagementForwardingServletTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-01 03:29:51","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testCoordinatorDatasources() throws Exception\n  {\n    coordinatorExpectedRequest.path = \"/druid/coordinator/v1/datasources\";\n    coordinatorExpectedRequest.method = \"GET\";\n    coordinatorExpectedRequest.headers = ImmutableMap.of(\"Authorization\", \"Basic bXl1c2VyOm15cGFzc3dvcmQ=\");\n\n    HttpURLConnection connection = ((HttpURLConnection)\n        new URL(StringUtils.format(\"http://localhost:%d%s\", port, coordinatorExpectedRequest.path))\n            .openConnection());\n    connection.setRequestMethod(coordinatorExpectedRequest.method);\n\n    coordinatorExpectedRequest.headers.forEach(connection::setRequestProperty);\n\n    Assert.assertEquals(200, connection.getResponseCode());\n    Assert.assertTrue(\"coordinator called\", coordinatorExpectedRequest.called);\n    Assert.assertFalse(\"overlord called\", overlordExpectedRequest.called);\n  }\n","date":"2018-08-31 00:56:26","endLine":151,"groupId":"13702","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCoordinatorDatasources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fa/6d540ac0354bd00a1744d486192f4d223fc732.src","preCode":"  public void testCoordinatorDatasources() throws Exception\n  {\n    coordinatorExpectedRequest.path = \"/druid/coordinator/v1/datasources\";\n    coordinatorExpectedRequest.method = \"GET\";\n    coordinatorExpectedRequest.headers = ImmutableMap.of(\"Authorization\", \"Basic bXl1c2VyOm15cGFzc3dvcmQ=\");\n\n    HttpURLConnection connection = ((HttpURLConnection)\n        new URL(StringUtils.format(\"http://localhost:%d%s\", port, coordinatorExpectedRequest.path))\n            .openConnection());\n    connection.setRequestMethod(coordinatorExpectedRequest.method);\n\n    coordinatorExpectedRequest.headers.forEach(connection::setRequestProperty);\n\n    Assert.assertEquals(200, connection.getResponseCode());\n    Assert.assertTrue(\"coordinator called\", coordinatorExpectedRequest.called);\n    Assert.assertFalse(\"overlord called\", overlordExpectedRequest.called);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/AsyncManagementForwardingServletTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"N"},{"authorDate":"2018-10-01 03:29:51","commitOrder":2,"curCode":"  public void testOverlordProxyLeader() throws Exception\n  {\n    overlordExpectedRequest.path = \"/druid/indexer/v1/leader\";\n    overlordExpectedRequest.method = \"GET\";\n    overlordExpectedRequest.headers = ImmutableMap.of(\"Authorization\", \"Basic bXl1c2VyOm15cGFzc3dvcmQ=\");\n\n    HttpURLConnection connection = ((HttpURLConnection)\n        new URL(StringUtils.format(\"http://localhost:%d/proxy/overlord%s\", port, overlordExpectedRequest.path))\n            .openConnection());\n    connection.setRequestMethod(overlordExpectedRequest.method);\n\n    overlordExpectedRequest.headers.forEach(connection::setRequestProperty);\n\n    Assert.assertEquals(200, connection.getResponseCode());\n    Assert.assertFalse(\"coordinator called\", coordinatorExpectedRequest.called);\n    Assert.assertTrue(\"overlord called\", overlordExpectedRequest.called);\n  }\n","date":"2018-10-01 03:29:51","endLine":314,"groupId":"13702","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlordProxyLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a2/f4261763d5a7a7e3e0f0cd0d915834e1167633.src","preCode":"  public void testOverlordProxyLeader() throws Exception\n  {\n    overlordExpectedRequest.path = \"/druid/indexer/v1/leader\";\n    overlordExpectedRequest.method = \"GET\";\n    overlordExpectedRequest.headers = ImmutableMap.of(\"Authorization\", \"Basic bXl1c2VyOm15cGFzc3dvcmQ=\");\n\n    HttpURLConnection connection = ((HttpURLConnection)\n        new URL(StringUtils.format(\"http://localhost:%d/proxy/overlord/%s\", port, overlordExpectedRequest.path))\n            .openConnection());\n    connection.setRequestMethod(overlordExpectedRequest.method);\n\n    overlordExpectedRequest.headers.forEach(connection::setRequestProperty);\n\n    Assert.assertEquals(200, connection.getResponseCode());\n    Assert.assertFalse(\"coordinator called\", coordinatorExpectedRequest.called);\n    Assert.assertTrue(\"overlord called\", overlordExpectedRequest.called);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/AsyncManagementForwardingServletTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"}],"commitId":"9fa4afdb8ec1bd1881b30076e4e2a503418e5386","commitMessage":"@@@URL encode datasources.  task ids.  authenticator names. (#5938)\n\n* URL encode datasources.  task ids.  authenticator names.\n\n* Fix URL encoding for router forwarding servlets.\n\n* Fix log-with-offset API.\n\n* Fix test.\n\n* Test adjustments.\n\n* Task client fixes.\n\n* Remove unused import.\n","date":"2018-10-01 03:29:51","modifiedFileCount":"20","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testCoordinatorDatasources() throws Exception\n  {\n    COORDINATOR_EXPECTED_REQUEST.path = \"/druid/coordinator/v1/datasources\";\n    COORDINATOR_EXPECTED_REQUEST.method = \"GET\";\n    COORDINATOR_EXPECTED_REQUEST.headers = ImmutableMap.of(\"Authorization\", \"Basic bXl1c2VyOm15cGFzc3dvcmQ=\");\n\n    HttpURLConnection connection = ((HttpURLConnection)\n        new URL(StringUtils.format(\"http://localhost:%d%s\", port, COORDINATOR_EXPECTED_REQUEST.path))\n            .openConnection());\n    connection.setRequestMethod(COORDINATOR_EXPECTED_REQUEST.method);\n\n    COORDINATOR_EXPECTED_REQUEST.headers.forEach(connection::setRequestProperty);\n\n    Assert.assertEquals(200, connection.getResponseCode());\n    Assert.assertTrue(\"coordinator called\", COORDINATOR_EXPECTED_REQUEST.called);\n    Assert.assertFalse(\"overlord called\", OVERLORD_EXPECTED_REQUEST.called);\n  }\n","date":"2019-08-23 18:13:54","endLine":155,"groupId":"10787","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testCoordinatorDatasources","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/ff015a03baec9292c31e586a402ff1baa39809.src","preCode":"  public void testCoordinatorDatasources() throws Exception\n  {\n    coordinatorExpectedRequest.path = \"/druid/coordinator/v1/datasources\";\n    coordinatorExpectedRequest.method = \"GET\";\n    coordinatorExpectedRequest.headers = ImmutableMap.of(\"Authorization\", \"Basic bXl1c2VyOm15cGFzc3dvcmQ=\");\n\n    HttpURLConnection connection = ((HttpURLConnection)\n        new URL(StringUtils.format(\"http://localhost:%d%s\", port, coordinatorExpectedRequest.path))\n            .openConnection());\n    connection.setRequestMethod(coordinatorExpectedRequest.method);\n\n    coordinatorExpectedRequest.headers.forEach(connection::setRequestProperty);\n\n    Assert.assertEquals(200, connection.getResponseCode());\n    Assert.assertTrue(\"coordinator called\", coordinatorExpectedRequest.called);\n    Assert.assertFalse(\"overlord called\", overlordExpectedRequest.called);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/AsyncManagementForwardingServletTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testOverlordProxyLeader() throws Exception\n  {\n    OVERLORD_EXPECTED_REQUEST.path = \"/druid/indexer/v1/leader\";\n    OVERLORD_EXPECTED_REQUEST.method = \"GET\";\n    OVERLORD_EXPECTED_REQUEST.headers = ImmutableMap.of(\"Authorization\", \"Basic bXl1c2VyOm15cGFzc3dvcmQ=\");\n\n    HttpURLConnection connection = ((HttpURLConnection)\n        new URL(StringUtils.format(\"http://localhost:%d/proxy/overlord%s\", port, OVERLORD_EXPECTED_REQUEST.path))\n            .openConnection());\n    connection.setRequestMethod(OVERLORD_EXPECTED_REQUEST.method);\n\n    OVERLORD_EXPECTED_REQUEST.headers.forEach(connection::setRequestProperty);\n\n    Assert.assertEquals(200, connection.getResponseCode());\n    Assert.assertFalse(\"coordinator called\", COORDINATOR_EXPECTED_REQUEST.called);\n    Assert.assertTrue(\"overlord called\", OVERLORD_EXPECTED_REQUEST.called);\n  }\n","date":"2019-08-23 18:13:54","endLine":318,"groupId":"10787","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testOverlordProxyLeader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/ff015a03baec9292c31e586a402ff1baa39809.src","preCode":"  public void testOverlordProxyLeader() throws Exception\n  {\n    overlordExpectedRequest.path = \"/druid/indexer/v1/leader\";\n    overlordExpectedRequest.method = \"GET\";\n    overlordExpectedRequest.headers = ImmutableMap.of(\"Authorization\", \"Basic bXl1c2VyOm15cGFzc3dvcmQ=\");\n\n    HttpURLConnection connection = ((HttpURLConnection)\n        new URL(StringUtils.format(\"http://localhost:%d/proxy/overlord%s\", port, overlordExpectedRequest.path))\n            .openConnection());\n    connection.setRequestMethod(overlordExpectedRequest.method);\n\n    overlordExpectedRequest.headers.forEach(connection::setRequestProperty);\n\n    Assert.assertEquals(200, connection.getResponseCode());\n    Assert.assertFalse(\"coordinator called\", coordinatorExpectedRequest.called);\n    Assert.assertTrue(\"overlord called\", overlordExpectedRequest.called);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/AsyncManagementForwardingServletTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":302,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
