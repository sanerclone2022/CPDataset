[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTopNUnionQuery()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.unionDataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnInterval)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    QueryRunnerTestHelper.commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            Arrays.asList(\n                QueryRunnerTestHelper.addRowsIndexConstant,\n                QueryRunnerTestHelper.dependentPostAgg,\n                QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n            )\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 862719.3151855469D)\n                        .put(\"addRowsIndexConstant\", 863464.3151855469D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 864209.3151855469D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.9217529296875D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 768184.4240722656D)\n                        .put(\"addRowsIndexConstant\", 768929.4240722656D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 769674.4240722656D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.06103515625D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 3348L)\n                        .put(\"index\", 382426.28929138184D)\n                        .put(\"addRowsIndexConstant\", 385775.28929138184D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 389124.28929138184D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.2735290527344D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query), context));\n  }\n","date":"2018-08-31 00:56:26","endLine":187,"groupId":"19109","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNUnionQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/49/13fbbff90fa99ae37ac14817fa735e44213a8c.src","preCode":"  public void testTopNUnionQuery()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.unionDataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnInterval)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    QueryRunnerTestHelper.commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            Arrays.asList(\n                QueryRunnerTestHelper.addRowsIndexConstant,\n                QueryRunnerTestHelper.dependentPostAgg,\n                QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n            )\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 862719.3151855469D)\n                        .put(\"addRowsIndexConstant\", 863464.3151855469D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 864209.3151855469D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.9217529296875D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 768184.4240722656D)\n                        .put(\"addRowsIndexConstant\", 768929.4240722656D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 769674.4240722656D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.06103515625D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 3348L)\n                        .put(\"index\", 382426.28929138184D)\n                        .put(\"addRowsIndexConstant\", 385775.28929138184D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 389124.28929138184D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.2735290527344D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query), context));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNUnionQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTopNDependentPostAgg()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnInterval)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            Arrays.asList(\n                QueryRunnerTestHelper.addRowsIndexConstant,\n                QueryRunnerTestHelper.dependentPostAgg,\n                QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n            )\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 215679.82879638672D)\n                        .put(\"addRowsIndexConstant\", 215866.82879638672D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 216053.82879638672D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.92175D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 192046.1060180664D)\n                        .put(\"addRowsIndexConstant\", 192233.1060180664D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 192420.1060180664D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.061029D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 837L)\n                        .put(\"index\", 95606.57232284546D)\n                        .put(\"addRowsIndexConstant\", 96444.57232284546D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 97282.57232284546D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.273533D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","date":"2018-08-31 00:56:26","endLine":3702,"groupId":"19109","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopNDependentPostAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d8/05065b1a763d6958ac6c554b91a76be76340a5.src","preCode":"  public void testTopNDependentPostAgg()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnInterval)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            Arrays.asList(\n                QueryRunnerTestHelper.addRowsIndexConstant,\n                QueryRunnerTestHelper.dependentPostAgg,\n                QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n            )\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 215679.82879638672D)\n                        .put(\"addRowsIndexConstant\", 215866.82879638672D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 216053.82879638672D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.92175D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 192046.1060180664D)\n                        .put(\"addRowsIndexConstant\", 192233.1060180664D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 192420.1060180664D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.061029D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 837L)\n                        .put(\"index\", 95606.57232284546D)\n                        .put(\"addRowsIndexConstant\", 96444.57232284546D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 97282.57232284546D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.273533D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":3621,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void testTopNUnionQuery()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.unionDataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    QueryRunnerTestHelper.commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            Arrays.asList(\n                QueryRunnerTestHelper.addRowsIndexConstant,\n                QueryRunnerTestHelper.dependentPostAgg,\n                QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n            )\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 862719.3151855469D)\n                        .put(\"addRowsIndexConstant\", 863464.3151855469D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 864209.3151855469D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.9217529296875D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 768184.4240722656D)\n                        .put(\"addRowsIndexConstant\", 768929.4240722656D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 769674.4240722656D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.06103515625D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 3348L)\n                        .put(\"index\", 382426.28929138184D)\n                        .put(\"addRowsIndexConstant\", 385775.28929138184D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 389124.28929138184D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.2735290527344D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query), context));\n  }\n","date":"2019-01-22 03:11:10","endLine":187,"groupId":"19109","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNUnionQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0a/a1fcde8827684e8e96f3b8a40b08fe64725ce6.src","preCode":"  public void testTopNUnionQuery()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.unionDataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnInterval)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    QueryRunnerTestHelper.commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            Arrays.asList(\n                QueryRunnerTestHelper.addRowsIndexConstant,\n                QueryRunnerTestHelper.dependentPostAgg,\n                QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n            )\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 862719.3151855469D)\n                        .put(\"addRowsIndexConstant\", 863464.3151855469D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 864209.3151855469D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.9217529296875D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 768184.4240722656D)\n                        .put(\"addRowsIndexConstant\", 768929.4240722656D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 769674.4240722656D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.06103515625D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 3348L)\n                        .put(\"index\", 382426.28929138184D)\n                        .put(\"addRowsIndexConstant\", 385775.28929138184D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 389124.28929138184D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.2735290527344D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query), context));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNUnionQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void testTopNDependentPostAgg()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            Arrays.asList(\n                QueryRunnerTestHelper.addRowsIndexConstant,\n                QueryRunnerTestHelper.dependentPostAgg,\n                QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n            )\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 215679.82879638672D)\n                        .put(\"addRowsIndexConstant\", 215866.82879638672D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 216053.82879638672D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.92175D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 192046.1060180664D)\n                        .put(\"addRowsIndexConstant\", 192233.1060180664D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 192420.1060180664D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.061029D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 837L)\n                        .put(\"index\", 95606.57232284546D)\n                        .put(\"addRowsIndexConstant\", 96444.57232284546D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 97282.57232284546D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.273533D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","date":"2019-01-22 03:11:10","endLine":3701,"groupId":"19109","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopNDependentPostAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/da/23ca673a73841a537a373894cd2e3a58281cc4.src","preCode":"  public void testTopNDependentPostAgg()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnInterval)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            Arrays.asList(\n                QueryRunnerTestHelper.addRowsIndexConstant,\n                QueryRunnerTestHelper.dependentPostAgg,\n                QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n            )\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 215679.82879638672D)\n                        .put(\"addRowsIndexConstant\", 215866.82879638672D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 216053.82879638672D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.92175D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 192046.1060180664D)\n                        .put(\"addRowsIndexConstant\", 192233.1060180664D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 192420.1060180664D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.061029D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 837L)\n                        .put(\"index\", 95606.57232284546D)\n                        .put(\"addRowsIndexConstant\", 96444.57232284546D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 97282.57232284546D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.273533D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":3620,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-07-19 04:16:28","codes":[{"authorDate":"2019-07-19 04:16:28","commitOrder":3,"curCode":"  public void testTopNUnionQuery()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.unionDataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    QueryRunnerTestHelper.commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            QueryRunnerTestHelper.addRowsIndexConstant,\n            QueryRunnerTestHelper.dependentPostAgg,\n            QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 862719.3151855469D)\n                        .put(\"addRowsIndexConstant\", 863464.3151855469D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 864209.3151855469D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.9217529296875D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 768184.4240722656D)\n                        .put(\"addRowsIndexConstant\", 768929.4240722656D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 769674.4240722656D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.06103515625D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 3348L)\n                        .put(\"index\", 382426.28929138184D)\n                        .put(\"addRowsIndexConstant\", 385775.28929138184D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 389124.28929138184D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.2735290527344D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query), context));\n  }\n","date":"2019-07-19 04:16:28","endLine":185,"groupId":"19109","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNUnionQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6f/6f9eeb5f5aaf504c92e23800b1e281dcb0b91d.src","preCode":"  public void testTopNUnionQuery()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.unionDataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    QueryRunnerTestHelper.commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            Arrays.asList(\n                QueryRunnerTestHelper.addRowsIndexConstant,\n                QueryRunnerTestHelper.dependentPostAgg,\n                QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n            )\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 862719.3151855469D)\n                        .put(\"addRowsIndexConstant\", 863464.3151855469D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 864209.3151855469D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.9217529296875D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 768184.4240722656D)\n                        .put(\"addRowsIndexConstant\", 768929.4240722656D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 769674.4240722656D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.06103515625D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 3348L)\n                        .put(\"index\", 382426.28929138184D)\n                        .put(\"addRowsIndexConstant\", 385775.28929138184D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 389124.28929138184D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.2735290527344D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query), context));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNUnionQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2019-07-19 04:16:28","commitOrder":3,"curCode":"  public void testTopNDependentPostAgg()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            QueryRunnerTestHelper.addRowsIndexConstant,\n            QueryRunnerTestHelper.dependentPostAgg,\n            QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 215679.82879638672D)\n                        .put(\"addRowsIndexConstant\", 215866.82879638672D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 216053.82879638672D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.92175D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 192046.1060180664D)\n                        .put(\"addRowsIndexConstant\", 192233.1060180664D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 192420.1060180664D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.061029D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 837L)\n                        .put(\"index\", 95606.57232284546D)\n                        .put(\"addRowsIndexConstant\", 96444.57232284546D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 97282.57232284546D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.273533D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","date":"2019-07-19 04:16:28","endLine":3726,"groupId":"19109","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopNDependentPostAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4b/9fb51afb036dca9148a4c39b6dbecbf810868c.src","preCode":"  public void testTopNDependentPostAgg()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            Arrays.asList(\n                QueryRunnerTestHelper.addRowsIndexConstant,\n                QueryRunnerTestHelper.dependentPostAgg,\n                QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n            )\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<TopNResultValue>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 215679.82879638672D)\n                        .put(\"addRowsIndexConstant\", 215866.82879638672D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 216053.82879638672D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.92175D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 192046.1060180664D)\n                        .put(\"addRowsIndexConstant\", 192233.1060180664D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 192420.1060180664D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.061029D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 837L)\n                        .put(\"index\", 95606.57232284546D)\n                        .put(\"addRowsIndexConstant\", 96444.57232284546D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 97282.57232284546D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.273533D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":3647,"status":"M"}],"commitId":"03e55d30ebcac9ec97edb1a638a5a99886c41374","commitMessage":"@@@add CachingClusteredClient benchmark.  refactor some stuff (#8089)\n\n* add CachingClusteredClient benchmark.  refactor some stuff\n\n* revert WeightedServerSelectorStrategy to ConnectionCountServerSelectorStrategy and remove getWeight since felt artificial.  default mergeResults in toolchest implementation for topn.  search.  select\n\n* adjust javadoc\n\n* adjustments\n\n* oops\n\n* use it\n\n* use BinaryOperator.  remove CombiningFunction.  use Comparator instead of Ordering.  other review adjustments\n\n* rename createComparator to createResultComparator.  fix typo.  firstNonNull nullable parameters\n","date":"2019-07-19 04:16:28","modifiedFileCount":"50","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-07-19 04:16:28","codes":[{"authorDate":"2019-07-24 23:29:03","commitOrder":4,"curCode":"  public void testTopNUnionQuery()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.unionDataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    QueryRunnerTestHelper.commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            QueryRunnerTestHelper.addRowsIndexConstant,\n            QueryRunnerTestHelper.dependentPostAgg,\n            QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 862719.3151855469D)\n                        .put(\"addRowsIndexConstant\", 863464.3151855469D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 864209.3151855469D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.9217529296875D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 768184.4240722656D)\n                        .put(\"addRowsIndexConstant\", 768929.4240722656D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 769674.4240722656D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.06103515625D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 3348L)\n                        .put(\"index\", 382426.28929138184D)\n                        .put(\"addRowsIndexConstant\", 385775.28929138184D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 389124.28929138184D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.2735290527344D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query)));\n  }\n","date":"2019-07-24 23:29:03","endLine":183,"groupId":"19109","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNUnionQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/89/7b483285881ad68196015a2eb0d02af330e490.src","preCode":"  public void testTopNUnionQuery()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.unionDataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    QueryRunnerTestHelper.commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            QueryRunnerTestHelper.addRowsIndexConstant,\n            QueryRunnerTestHelper.dependentPostAgg,\n            QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 862719.3151855469D)\n                        .put(\"addRowsIndexConstant\", 863464.3151855469D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 864209.3151855469D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.9217529296875D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 768184.4240722656D)\n                        .put(\"addRowsIndexConstant\", 768929.4240722656D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 769674.4240722656D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.06103515625D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 3348L)\n                        .put(\"index\", 382426.28929138184D)\n                        .put(\"addRowsIndexConstant\", 385775.28929138184D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 389124.28929138184D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.2735290527344D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query), context));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNUnionQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2019-07-19 04:16:28","commitOrder":4,"curCode":"  public void testTopNDependentPostAgg()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            QueryRunnerTestHelper.addRowsIndexConstant,\n            QueryRunnerTestHelper.dependentPostAgg,\n            QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 215679.82879638672D)\n                        .put(\"addRowsIndexConstant\", 215866.82879638672D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 216053.82879638672D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.92175D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 192046.1060180664D)\n                        .put(\"addRowsIndexConstant\", 192233.1060180664D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 192420.1060180664D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.061029D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 837L)\n                        .put(\"index\", 95606.57232284546D)\n                        .put(\"addRowsIndexConstant\", 96444.57232284546D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 97282.57232284546D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.273533D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","date":"2019-07-19 04:16:28","endLine":3726,"groupId":"19109","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopNDependentPostAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4b/9fb51afb036dca9148a4c39b6dbecbf810868c.src","preCode":"  public void testTopNDependentPostAgg()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            QueryRunnerTestHelper.addRowsIndexConstant,\n            QueryRunnerTestHelper.dependentPostAgg,\n            QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 215679.82879638672D)\n                        .put(\"addRowsIndexConstant\", 215866.82879638672D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 216053.82879638672D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.92175D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 192046.1060180664D)\n                        .put(\"addRowsIndexConstant\", 192233.1060180664D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 192420.1060180664D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.061029D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 837L)\n                        .put(\"index\", 95606.57232284546D)\n                        .put(\"addRowsIndexConstant\", 96444.57232284546D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 97282.57232284546D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.273533D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":3647,"status":"N"}],"commitId":"799d20249fe6333ea86b020f6d09c91fa4d3f998","commitMessage":"@@@Response context refactoring (#8110)\n\n* Response context refactoring\n\n* Serialization/Deserialization of ResponseContext\n\n* Added java doc comments\n\n* Renamed vars related to ResponseContext\n\n* Renamed empty() methods to createEmpty()\n\n* Fixed ResponseContext usage\n\n* Renamed multiple ResponseContext static fields\n\n* Added PublicApi annotations\n\n* Renamed QueryResponseContext class to ResourceIOReaderWriter\n\n* Moved the protected method below public static constants\n\n* Added createEmpty method to ResponseContext with DefaultResponseContext creation\n\n* Fixed inspection error\n\n* Added comments to the ResponseContext length limit and ResponseContext\nhttp header name\n\n* Added a comment of possible future refactoring\n\n* Removed .gitignore file of indexing-service\n\n* Removed a never-used method\n\n* VisibleForTesting method reducing boilerplate\n\nCo-Authored-By: Clint Wylie <cjwylie@gmail.com>\n\n* Reduced boilerplate\n\n* Renamed the method serialize to serializeWith\n\n* Removed unused import\n\n* Fixed incorrectly refactored test method\n\n* Added comments for ResponseContext keys\n\n* Fixed incorrectly refactored test method\n\n* Fixed IntervalChunkingQueryRunnerTest mocks\n","date":"2019-07-24 23:29:03","modifiedFileCount":"142","status":"M","submitter":"Eugene Sevastianov"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":5,"curCode":"  public void testTopNUnionQuery()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.UNION_DATA_SOURCE)\n        .granularity(QueryRunnerTestHelper.ALL_GRAN)\n        .dimension(QueryRunnerTestHelper.MARKET_DIMENSION)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    QueryRunnerTestHelper.COMMON_DOUBLE_AGGREGATORS,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            QueryRunnerTestHelper.ADD_ROWS_INDEX_CONSTANT,\n            QueryRunnerTestHelper.DEPENDENT_POST_AGG,\n            QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.MARKET_DIMENSION, \"total_market\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 862719.3151855469D)\n                        .put(\"addRowsIndexConstant\", 863464.3151855469D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 864209.3151855469D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.9217529296875D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.HYPER_UNIQUE_FINALIZING_POST_AGG_METRIC,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.MARKET_DIMENSION, \"upfront\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 768184.4240722656D)\n                        .put(\"addRowsIndexConstant\", 768929.4240722656D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 769674.4240722656D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.06103515625D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.HYPER_UNIQUE_FINALIZING_POST_AGG_METRIC,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.MARKET_DIMENSION, \"spot\")\n                        .put(\"rows\", 3348L)\n                        .put(\"index\", 382426.28929138184D)\n                        .put(\"addRowsIndexConstant\", 385775.28929138184D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 389124.28929138184D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.HYPER_UNIQUE_FINALIZING_POST_AGG_METRIC,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.2735290527344D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query)));\n  }\n","date":"2019-08-23 18:13:54","endLine":183,"groupId":"106348","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTopNUnionQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/e6a8e8244c378ce91de0ee2a35721b83f08b70.src","preCode":"  public void testTopNUnionQuery()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.unionDataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    QueryRunnerTestHelper.commonDoubleAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            QueryRunnerTestHelper.addRowsIndexConstant,\n            QueryRunnerTestHelper.dependentPostAgg,\n            QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 862719.3151855469D)\n                        .put(\"addRowsIndexConstant\", 863464.3151855469D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 864209.3151855469D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.9217529296875D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 744L)\n                        .put(\"index\", 768184.4240722656D)\n                        .put(\"addRowsIndexConstant\", 768929.4240722656D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 769674.4240722656D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.06103515625D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 3348L)\n                        .put(\"index\", 382426.28929138184D)\n                        .put(\"addRowsIndexConstant\", 385775.28929138184D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 389124.28929138184D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.2735290527344D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    TestHelper.assertExpectedResults(expectedResults, runner.run(QueryPlus.wrap(query)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNUnionQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":5,"curCode":"  public void testTopNDependentPostAgg()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .granularity(QueryRunnerTestHelper.ALL_GRAN)\n        .dimension(QueryRunnerTestHelper.MARKET_DIMENSION)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            QueryRunnerTestHelper.ADD_ROWS_INDEX_CONSTANT,\n            QueryRunnerTestHelper.DEPENDENT_POST_AGG,\n            QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.MARKET_DIMENSION, \"total_market\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 215679.82879638672D)\n                        .put(\"addRowsIndexConstant\", 215866.82879638672D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 216053.82879638672D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.92175D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.HYPER_UNIQUE_FINALIZING_POST_AGG_METRIC,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.MARKET_DIMENSION, \"upfront\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 192046.1060180664D)\n                        .put(\"addRowsIndexConstant\", 192233.1060180664D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 192420.1060180664D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.061029D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.HYPER_UNIQUE_FINALIZING_POST_AGG_METRIC,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.MARKET_DIMENSION, \"spot\")\n                        .put(\"rows\", 837L)\n                        .put(\"index\", 95606.57232284546D)\n                        .put(\"addRowsIndexConstant\", 96444.57232284546D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 97282.57232284546D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.HYPER_UNIQUE_FINALIZING_POST_AGG_METRIC,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.273533D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","date":"2019-08-23 18:13:54","endLine":3723,"groupId":"106348","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopNDependentPostAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c6/f894ad5ddd5fccc9520230d8961edd721a636c.src","preCode":"  public void testTopNDependentPostAgg()\n  {\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.allGran)\n        .dimension(QueryRunnerTestHelper.marketDimension)\n        .metric(QueryRunnerTestHelper.dependentPostAggMetric)\n        .threshold(4)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(\n            Lists.newArrayList(\n                Iterables.concat(\n                    commonAggregators,\n                    Lists.newArrayList(\n                        new DoubleMaxAggregatorFactory(\"maxIndex\", \"index\"),\n                        new DoubleMinAggregatorFactory(\"minIndex\", \"index\")\n                    )\n                )\n            )\n        )\n        .postAggregators(\n            QueryRunnerTestHelper.addRowsIndexConstant,\n            QueryRunnerTestHelper.dependentPostAgg,\n            QueryRunnerTestHelper.hyperUniqueFinalizingPostAgg\n        )\n        .build();\n\n    List<Result<TopNResultValue>> expectedResults = Collections.singletonList(\n        new Result<>(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            new TopNResultValue(\n                Arrays.<Map<String, Object>>asList(\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"total_market\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 215679.82879638672D)\n                        .put(\"addRowsIndexConstant\", 215866.82879638672D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 216053.82879638672D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1743.92175D)\n                        .put(\"minIndex\", 792.3260498046875D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"upfront\")\n                        .put(\"rows\", 186L)\n                        .put(\"index\", 192046.1060180664D)\n                        .put(\"addRowsIndexConstant\", 192233.1060180664D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 192420.1060180664D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_2)\n                        .put(\"maxIndex\", 1870.061029D)\n                        .put(\"minIndex\", 545.9906005859375D)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_2 + 1.0\n                        )\n                        .build(),\n                    ImmutableMap.<String, Object>builder()\n                        .put(QueryRunnerTestHelper.marketDimension, \"spot\")\n                        .put(\"rows\", 837L)\n                        .put(\"index\", 95606.57232284546D)\n                        .put(\"addRowsIndexConstant\", 96444.57232284546D)\n                        .put(QueryRunnerTestHelper.dependentPostAggMetric, 97282.57232284546D)\n                        .put(\"uniques\", QueryRunnerTestHelper.UNIQUES_9)\n                        .put(\n                            QueryRunnerTestHelper.hyperUniqueFinalizingPostAggMetric,\n                            QueryRunnerTestHelper.UNIQUES_9 + 1.0\n                        )\n                        .put(\"maxIndex\", 277.273533D)\n                        .put(\"minIndex\", 59.02102279663086D)\n                        .build()\n                )\n            )\n        )\n    );\n    assertExpectedResults(expectedResults, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/TopNQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":3644,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
