[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private HttpRemoteTaskRunner createTaskRunnerForTestTaskAddedOrUpdated(\n      TaskStorage taskStorage,\n      List<Object> listenerNotificationsAccumulator\n  )\n  {\n    TestDruidNodeDiscovery druidNodeDiscovery = new TestDruidNodeDiscovery();\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(DruidNodeDiscoveryProvider.NODE_TYPE_MM))\n            .andReturn(druidNodeDiscovery);\n    EasyMock.replay(druidNodeDiscoveryProvider);\n\n    HttpRemoteTaskRunner taskRunner = new HttpRemoteTaskRunner(\n        TestHelper.makeJsonMapper(),\n        new HttpRemoteTaskRunnerConfig()\n        {\n          @Override\n          public int getPendingTasksRunnerNumThreads()\n          {\n            return 3;\n          }\n        },\n        EasyMock.createNiceMock(HttpClient.class),\n        DSuppliers.of(new AtomicReference<>(DefaultWorkerBehaviorConfig.defaultConfig())),\n        new NoopProvisioningStrategy<>(),\n        druidNodeDiscoveryProvider,\n        taskStorage,\n        EasyMock.createNiceMock(CuratorFramework.class),\n        new IndexerZkConfig(new ZkPathsConfig(), null, null, null, null)\n    );\n\n    taskRunner.start();\n\n    if (listenerNotificationsAccumulator != null) {\n      taskRunner.registerListener(\n          new TaskRunnerListener()\n          {\n            @Override\n            public String getListenerId()\n            {\n              return \"test-listener\";\n            }\n\n            @Override\n            public void locationChanged(String taskId, TaskLocation newLocation)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, newLocation));\n            }\n\n            @Override\n            public void statusChanged(String taskId, TaskStatus status)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, status));\n            }\n          },\n          MoreExecutors.sameThreadExecutor()\n      );\n    }\n\n    return taskRunner;\n  }\n","date":"2018-08-31 00:56:26","endLine":1214,"groupId":"9602","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createTaskRunnerForTestTaskAddedOrUpdated","params":"(TaskStoragetaskStorage@List<Object>listenerNotificationsAccumulator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/73/09452adaa0ef961132121053aac282dac857ce.src","preCode":"  private HttpRemoteTaskRunner createTaskRunnerForTestTaskAddedOrUpdated(\n      TaskStorage taskStorage,\n      List<Object> listenerNotificationsAccumulator\n  )\n  {\n    TestDruidNodeDiscovery druidNodeDiscovery = new TestDruidNodeDiscovery();\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(DruidNodeDiscoveryProvider.NODE_TYPE_MM))\n            .andReturn(druidNodeDiscovery);\n    EasyMock.replay(druidNodeDiscoveryProvider);\n\n    HttpRemoteTaskRunner taskRunner = new HttpRemoteTaskRunner(\n        TestHelper.makeJsonMapper(),\n        new HttpRemoteTaskRunnerConfig()\n        {\n          @Override\n          public int getPendingTasksRunnerNumThreads()\n          {\n            return 3;\n          }\n        },\n        EasyMock.createNiceMock(HttpClient.class),\n        DSuppliers.of(new AtomicReference<>(DefaultWorkerBehaviorConfig.defaultConfig())),\n        new NoopProvisioningStrategy<>(),\n        druidNodeDiscoveryProvider,\n        taskStorage,\n        EasyMock.createNiceMock(CuratorFramework.class),\n        new IndexerZkConfig(new ZkPathsConfig(), null, null, null, null)\n    );\n\n    taskRunner.start();\n\n    if (listenerNotificationsAccumulator != null) {\n      taskRunner.registerListener(\n          new TaskRunnerListener()\n          {\n            @Override\n            public String getListenerId()\n            {\n              return \"test-listener\";\n            }\n\n            @Override\n            public void locationChanged(String taskId, TaskLocation newLocation)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, newLocation));\n            }\n\n            @Override\n            public void statusChanged(String taskId, TaskStatus status)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, status));\n            }\n          },\n          MoreExecutors.sameThreadExecutor()\n      );\n    }\n\n    return taskRunner;\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1155,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private void registerLocationListener()\n  {\n    taskRunner.registerListener(\n        new TaskRunnerListener()\n        {\n          @Override\n          public String getListenerId()\n          {\n            return \"WorkerTaskManager\";\n          }\n\n          @Override\n          public void locationChanged(final String taskId, final TaskLocation newLocation)\n          {\n            submitNoticeToExec(new LocationNotice(taskId, newLocation));\n          }\n\n          @Override\n          public void statusChanged(final String taskId, final TaskStatus status)\n          {\n            \r\n          }\n        },\n        MoreExecutors.sameThreadExecutor()\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":231,"groupId":"9602","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"registerLocationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a8/58f88fd7e1eb200c3659cfd149ad8468cf2515.src","preCode":"  private void registerLocationListener()\n  {\n    taskRunner.registerListener(\n        new TaskRunnerListener()\n        {\n          @Override\n          public String getListenerId()\n          {\n            return \"WorkerTaskManager\";\n          }\n\n          @Override\n          public void locationChanged(final String taskId, final TaskLocation newLocation)\n          {\n            submitNoticeToExec(new LocationNotice(taskId, newLocation));\n          }\n\n          @Override\n          public void statusChanged(final String taskId, final TaskStatus status)\n          {\n            \r\n          }\n        },\n        MoreExecutors.sameThreadExecutor()\n    );\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/worker/WorkerTaskManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-10-15 11:49:38","commitOrder":2,"curCode":"  private HttpRemoteTaskRunner createTaskRunnerForTestTaskAddedOrUpdated(\n      TaskStorage taskStorage,\n      List<Object> listenerNotificationsAccumulator\n  )\n  {\n    TestDruidNodeDiscovery druidNodeDiscovery = new TestDruidNodeDiscovery();\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.MIDDLE_MANAGER))\n            .andReturn(druidNodeDiscovery);\n    EasyMock.replay(druidNodeDiscoveryProvider);\n\n    HttpRemoteTaskRunner taskRunner = new HttpRemoteTaskRunner(\n        TestHelper.makeJsonMapper(),\n        new HttpRemoteTaskRunnerConfig()\n        {\n          @Override\n          public int getPendingTasksRunnerNumThreads()\n          {\n            return 3;\n          }\n        },\n        EasyMock.createNiceMock(HttpClient.class),\n        DSuppliers.of(new AtomicReference<>(DefaultWorkerBehaviorConfig.defaultConfig())),\n        new NoopProvisioningStrategy<>(),\n        druidNodeDiscoveryProvider,\n        taskStorage,\n        EasyMock.createNiceMock(CuratorFramework.class),\n        new IndexerZkConfig(new ZkPathsConfig(), null, null, null, null)\n    );\n\n    taskRunner.start();\n\n    if (listenerNotificationsAccumulator != null) {\n      taskRunner.registerListener(\n          new TaskRunnerListener()\n          {\n            @Override\n            public String getListenerId()\n            {\n              return \"test-listener\";\n            }\n\n            @Override\n            public void locationChanged(String taskId, TaskLocation newLocation)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, newLocation));\n            }\n\n            @Override\n            public void statusChanged(String taskId, TaskStatus status)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, status));\n            }\n          },\n          MoreExecutors.sameThreadExecutor()\n      );\n    }\n\n    return taskRunner;\n  }\n","date":"2018-10-15 11:49:38","endLine":1215,"groupId":"9602","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createTaskRunnerForTestTaskAddedOrUpdated","params":"(TaskStoragetaskStorage@List<Object>listenerNotificationsAccumulator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/86/194f13dc65bea32aea34fd05ffc40562caa0ce.src","preCode":"  private HttpRemoteTaskRunner createTaskRunnerForTestTaskAddedOrUpdated(\n      TaskStorage taskStorage,\n      List<Object> listenerNotificationsAccumulator\n  )\n  {\n    TestDruidNodeDiscovery druidNodeDiscovery = new TestDruidNodeDiscovery();\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(DruidNodeDiscoveryProvider.NODE_TYPE_MM))\n            .andReturn(druidNodeDiscovery);\n    EasyMock.replay(druidNodeDiscoveryProvider);\n\n    HttpRemoteTaskRunner taskRunner = new HttpRemoteTaskRunner(\n        TestHelper.makeJsonMapper(),\n        new HttpRemoteTaskRunnerConfig()\n        {\n          @Override\n          public int getPendingTasksRunnerNumThreads()\n          {\n            return 3;\n          }\n        },\n        EasyMock.createNiceMock(HttpClient.class),\n        DSuppliers.of(new AtomicReference<>(DefaultWorkerBehaviorConfig.defaultConfig())),\n        new NoopProvisioningStrategy<>(),\n        druidNodeDiscoveryProvider,\n        taskStorage,\n        EasyMock.createNiceMock(CuratorFramework.class),\n        new IndexerZkConfig(new ZkPathsConfig(), null, null, null, null)\n    );\n\n    taskRunner.start();\n\n    if (listenerNotificationsAccumulator != null) {\n      taskRunner.registerListener(\n          new TaskRunnerListener()\n          {\n            @Override\n            public String getListenerId()\n            {\n              return \"test-listener\";\n            }\n\n            @Override\n            public void locationChanged(String taskId, TaskLocation newLocation)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, newLocation));\n            }\n\n            @Override\n            public void statusChanged(String taskId, TaskStatus status)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, status));\n            }\n          },\n          MoreExecutors.sameThreadExecutor()\n      );\n    }\n\n    return taskRunner;\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1156,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  private void registerLocationListener()\n  {\n    taskRunner.registerListener(\n        new TaskRunnerListener()\n        {\n          @Override\n          public String getListenerId()\n          {\n            return \"WorkerTaskManager\";\n          }\n\n          @Override\n          public void locationChanged(final String taskId, final TaskLocation newLocation)\n          {\n            submitNoticeToExec(new LocationNotice(taskId, newLocation));\n          }\n\n          @Override\n          public void statusChanged(final String taskId, final TaskStatus status)\n          {\n            \r\n          }\n        },\n        MoreExecutors.sameThreadExecutor()\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":231,"groupId":"9602","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"registerLocationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a8/58f88fd7e1eb200c3659cfd149ad8468cf2515.src","preCode":"  private void registerLocationListener()\n  {\n    taskRunner.registerListener(\n        new TaskRunnerListener()\n        {\n          @Override\n          public String getListenerId()\n          {\n            return \"WorkerTaskManager\";\n          }\n\n          @Override\n          public void locationChanged(final String taskId, final TaskLocation newLocation)\n          {\n            submitNoticeToExec(new LocationNotice(taskId, newLocation));\n          }\n\n          @Override\n          public void statusChanged(final String taskId, final TaskStatus status)\n          {\n            \r\n          }\n        },\n        MoreExecutors.sameThreadExecutor()\n    );\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/worker/WorkerTaskManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"N"}],"commitId":"aa121da25f019ad3345c747ce56261fbb7e77885","commitMessage":"@@@Use NodeType enum instead of Strings (#6377)\n\n* Use NodeType enum instead of Strings\n\n* Make NodeType constants uppercase\n\n* Fix CommonCacheNotifier and NodeType/ServerType comments\n\n* Reconsidering comment\n\n* Fix import\n\n* Add a comment to CommonCacheNotifier.NODE_TYPES\n","date":"2018-10-15 11:49:38","modifiedFileCount":"30","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-01-12 02:42:19","codes":[{"authorDate":"2019-01-12 02:42:19","commitOrder":3,"curCode":"  private HttpRemoteTaskRunner createTaskRunnerForTestTaskAddedOrUpdated(\n      TaskStorage taskStorage,\n      List<Object> listenerNotificationsAccumulator\n  )\n  {\n    TestDruidNodeDiscovery druidNodeDiscovery = new TestDruidNodeDiscovery();\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.MIDDLE_MANAGER))\n            .andReturn(druidNodeDiscovery);\n    EasyMock.replay(druidNodeDiscoveryProvider);\n\n    HttpRemoteTaskRunner taskRunner = new HttpRemoteTaskRunner(\n        TestHelper.makeJsonMapper(),\n        new HttpRemoteTaskRunnerConfig()\n        {\n          @Override\n          public int getPendingTasksRunnerNumThreads()\n          {\n            return 3;\n          }\n        },\n        EasyMock.createNiceMock(HttpClient.class),\n        DSuppliers.of(new AtomicReference<>(DefaultWorkerBehaviorConfig.defaultConfig())),\n        new NoopProvisioningStrategy<>(),\n        druidNodeDiscoveryProvider,\n        taskStorage,\n        EasyMock.createNiceMock(CuratorFramework.class),\n        new IndexerZkConfig(new ZkPathsConfig(), null, null, null, null)\n    );\n\n    taskRunner.start();\n\n    if (listenerNotificationsAccumulator != null) {\n      taskRunner.registerListener(\n          new TaskRunnerListener()\n          {\n            @Override\n            public String getListenerId()\n            {\n              return \"test-listener\";\n            }\n\n            @Override\n            public void locationChanged(String taskId, TaskLocation newLocation)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, newLocation));\n            }\n\n            @Override\n            public void statusChanged(String taskId, TaskStatus status)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, status));\n            }\n          },\n          Execs.directExecutor()\n      );\n    }\n\n    return taskRunner;\n  }\n","date":"2019-01-12 02:42:19","endLine":1260,"groupId":"9602","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createTaskRunnerForTestTaskAddedOrUpdated","params":"(TaskStoragetaskStorage@List<Object>listenerNotificationsAccumulator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/81/4a20f5e8cd1d8cff958b2ed6ac3c7fa2e47c23.src","preCode":"  private HttpRemoteTaskRunner createTaskRunnerForTestTaskAddedOrUpdated(\n      TaskStorage taskStorage,\n      List<Object> listenerNotificationsAccumulator\n  )\n  {\n    TestDruidNodeDiscovery druidNodeDiscovery = new TestDruidNodeDiscovery();\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.MIDDLE_MANAGER))\n            .andReturn(druidNodeDiscovery);\n    EasyMock.replay(druidNodeDiscoveryProvider);\n\n    HttpRemoteTaskRunner taskRunner = new HttpRemoteTaskRunner(\n        TestHelper.makeJsonMapper(),\n        new HttpRemoteTaskRunnerConfig()\n        {\n          @Override\n          public int getPendingTasksRunnerNumThreads()\n          {\n            return 3;\n          }\n        },\n        EasyMock.createNiceMock(HttpClient.class),\n        DSuppliers.of(new AtomicReference<>(DefaultWorkerBehaviorConfig.defaultConfig())),\n        new NoopProvisioningStrategy<>(),\n        druidNodeDiscoveryProvider,\n        taskStorage,\n        EasyMock.createNiceMock(CuratorFramework.class),\n        new IndexerZkConfig(new ZkPathsConfig(), null, null, null, null)\n    );\n\n    taskRunner.start();\n\n    if (listenerNotificationsAccumulator != null) {\n      taskRunner.registerListener(\n          new TaskRunnerListener()\n          {\n            @Override\n            public String getListenerId()\n            {\n              return \"test-listener\";\n            }\n\n            @Override\n            public void locationChanged(String taskId, TaskLocation newLocation)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, newLocation));\n            }\n\n            @Override\n            public void statusChanged(String taskId, TaskStatus status)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, status));\n            }\n          },\n          MoreExecutors.sameThreadExecutor()\n      );\n    }\n\n    return taskRunner;\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1201,"status":"M"},{"authorDate":"2019-01-12 02:42:19","commitOrder":3,"curCode":"  private void registerLocationListener()\n  {\n    taskRunner.registerListener(\n        new TaskRunnerListener()\n        {\n          @Override\n          public String getListenerId()\n          {\n            return \"WorkerTaskManager\";\n          }\n\n          @Override\n          public void locationChanged(final String taskId, final TaskLocation newLocation)\n          {\n            submitNoticeToExec(new LocationNotice(taskId, newLocation));\n          }\n\n          @Override\n          public void statusChanged(final String taskId, final TaskStatus status)\n          {\n            \r\n          }\n        },\n        Execs.directExecutor()\n    );\n  }\n","date":"2019-01-12 02:42:19","endLine":230,"groupId":"9602","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"registerLocationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0e/c7b41089ff6fa4d90ef64c0e49ad45df4fb717.src","preCode":"  private void registerLocationListener()\n  {\n    taskRunner.registerListener(\n        new TaskRunnerListener()\n        {\n          @Override\n          public String getListenerId()\n          {\n            return \"WorkerTaskManager\";\n          }\n\n          @Override\n          public void locationChanged(final String taskId, final TaskLocation newLocation)\n          {\n            submitNoticeToExec(new LocationNotice(taskId, newLocation));\n          }\n\n          @Override\n          public void statusChanged(final String taskId, final TaskStatus status)\n          {\n            \r\n          }\n        },\n        MoreExecutors.sameThreadExecutor()\n    );\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/worker/WorkerTaskManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"}],"commitId":"5d2947cd5229d683494b904a4146249f5dfac05f","commitMessage":"@@@Use Guava Compatible immediate executor service (#6815)\n\n* Use multi-guava version friendly direct executor implementation\n\n* Don't use a singleton\n\n* Fix strict compliation complaints\n\n* Copy Guava's DirectExecutor\n\n* Fix javadoc\n\n* Imports are the devil\n","date":"2019-01-12 02:42:19","modifiedFileCount":"41","status":"M","submitter":"Charles Allen"},{"authorTime":"2019-01-12 02:42:19","codes":[{"authorDate":"2019-07-30 08:06:33","commitOrder":4,"curCode":"  private HttpRemoteTaskRunner createTaskRunnerForTestTaskAddedOrUpdated(\n      TaskStorage taskStorage,\n      List<Object> listenerNotificationsAccumulator\n  )\n  {\n    TestDruidNodeDiscovery druidNodeDiscovery = new TestDruidNodeDiscovery();\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForService(WorkerNodeService.DISCOVERY_SERVICE_KEY))\n            .andReturn(druidNodeDiscovery);\n    EasyMock.replay(druidNodeDiscoveryProvider);\n\n    HttpRemoteTaskRunner taskRunner = new HttpRemoteTaskRunner(\n        TestHelper.makeJsonMapper(),\n        new HttpRemoteTaskRunnerConfig()\n        {\n          @Override\n          public int getPendingTasksRunnerNumThreads()\n          {\n            return 3;\n          }\n        },\n        EasyMock.createNiceMock(HttpClient.class),\n        DSuppliers.of(new AtomicReference<>(DefaultWorkerBehaviorConfig.defaultConfig())),\n        new NoopProvisioningStrategy<>(),\n        druidNodeDiscoveryProvider,\n        taskStorage,\n        EasyMock.createNiceMock(CuratorFramework.class),\n        new IndexerZkConfig(new ZkPathsConfig(), null, null, null, null)\n    );\n\n    taskRunner.start();\n\n    if (listenerNotificationsAccumulator != null) {\n      taskRunner.registerListener(\n          new TaskRunnerListener()\n          {\n            @Override\n            public String getListenerId()\n            {\n              return \"test-listener\";\n            }\n\n            @Override\n            public void locationChanged(String taskId, TaskLocation newLocation)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, newLocation));\n            }\n\n            @Override\n            public void statusChanged(String taskId, TaskStatus status)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, status));\n            }\n          },\n          Execs.directExecutor()\n      );\n    }\n\n    return taskRunner;\n  }\n","date":"2019-07-30 08:06:33","endLine":1261,"groupId":"104313","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createTaskRunnerForTestTaskAddedOrUpdated","params":"(TaskStoragetaskStorage@List<Object>listenerNotificationsAccumulator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a9/4dd5e9475d8a3fb39f7d1a15d71b14b886cfc5.src","preCode":"  private HttpRemoteTaskRunner createTaskRunnerForTestTaskAddedOrUpdated(\n      TaskStorage taskStorage,\n      List<Object> listenerNotificationsAccumulator\n  )\n  {\n    TestDruidNodeDiscovery druidNodeDiscovery = new TestDruidNodeDiscovery();\n    DruidNodeDiscoveryProvider druidNodeDiscoveryProvider = EasyMock.createMock(DruidNodeDiscoveryProvider.class);\n    EasyMock.expect(druidNodeDiscoveryProvider.getForNodeType(NodeType.MIDDLE_MANAGER))\n            .andReturn(druidNodeDiscovery);\n    EasyMock.replay(druidNodeDiscoveryProvider);\n\n    HttpRemoteTaskRunner taskRunner = new HttpRemoteTaskRunner(\n        TestHelper.makeJsonMapper(),\n        new HttpRemoteTaskRunnerConfig()\n        {\n          @Override\n          public int getPendingTasksRunnerNumThreads()\n          {\n            return 3;\n          }\n        },\n        EasyMock.createNiceMock(HttpClient.class),\n        DSuppliers.of(new AtomicReference<>(DefaultWorkerBehaviorConfig.defaultConfig())),\n        new NoopProvisioningStrategy<>(),\n        druidNodeDiscoveryProvider,\n        taskStorage,\n        EasyMock.createNiceMock(CuratorFramework.class),\n        new IndexerZkConfig(new ZkPathsConfig(), null, null, null, null)\n    );\n\n    taskRunner.start();\n\n    if (listenerNotificationsAccumulator != null) {\n      taskRunner.registerListener(\n          new TaskRunnerListener()\n          {\n            @Override\n            public String getListenerId()\n            {\n              return \"test-listener\";\n            }\n\n            @Override\n            public void locationChanged(String taskId, TaskLocation newLocation)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, newLocation));\n            }\n\n            @Override\n            public void statusChanged(String taskId, TaskStatus status)\n            {\n              listenerNotificationsAccumulator.add(ImmutableList.of(taskId, status));\n            }\n          },\n          Execs.directExecutor()\n      );\n    }\n\n    return taskRunner;\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1202,"status":"M"},{"authorDate":"2019-01-12 02:42:19","commitOrder":4,"curCode":"  private void registerLocationListener()\n  {\n    taskRunner.registerListener(\n        new TaskRunnerListener()\n        {\n          @Override\n          public String getListenerId()\n          {\n            return \"WorkerTaskManager\";\n          }\n\n          @Override\n          public void locationChanged(final String taskId, final TaskLocation newLocation)\n          {\n            submitNoticeToExec(new LocationNotice(taskId, newLocation));\n          }\n\n          @Override\n          public void statusChanged(final String taskId, final TaskStatus status)\n          {\n            \r\n          }\n        },\n        Execs.directExecutor()\n    );\n  }\n","date":"2019-01-12 02:42:19","endLine":230,"groupId":"104313","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"registerLocationListener","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0e/c7b41089ff6fa4d90ef64c0e49ad45df4fb717.src","preCode":"  private void registerLocationListener()\n  {\n    taskRunner.registerListener(\n        new TaskRunnerListener()\n        {\n          @Override\n          public String getListenerId()\n          {\n            return \"WorkerTaskManager\";\n          }\n\n          @Override\n          public void locationChanged(final String taskId, final TaskLocation newLocation)\n          {\n            submitNoticeToExec(new LocationNotice(taskId, newLocation));\n          }\n\n          @Override\n          public void statusChanged(final String taskId, final TaskStatus status)\n          {\n            \r\n          }\n        },\n        Execs.directExecutor()\n    );\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/worker/WorkerTaskManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"N"}],"commitId":"640b7afc1cee911a27de7bf938dda24a85ba1510","commitMessage":"@@@Add CliIndexer process type and initial task runner implementation (#8107)\n\n* Add CliIndexer process type and initial task runner implementation\n\n* Fix HttpRemoteTaskRunnerTest\n\n* Remove batch sanity check on PeonAppenderatorsManager\n\n* Fix paralle index tests\n\n* PR comments\n\n* Adjust Jersey resource logging\n\n* Additional cleanup\n\n* Fix SystemSchemaTest\n\n* Add comment to LocalDataSegmentPusherTest absolute path test\n\n* More PR comments\n\n* Use Server annotated with RemoteChatHandler\n\n* More PR comments\n\n* Checkstyle\n\n* PR comments\n\n* Add task shutdown to stopGracefully\n\n* Small cleanup\n\n* Compile fix\n\n* Address PR comments\n\n* Adjust TaskReportFileWriter and fix nits\n\n* Remove unnecessary closer\n\n* More PR comments\n\n* Minor adjustments\n\n* PR comments\n\n* ThreadingTaskRunner: cancel  task run future not shutdownFuture and remove thread from workitem\n","date":"2019-07-30 08:06:33","modifiedFileCount":"64","status":"M","submitter":"Jonathan Wei"}]
