[{"authorTime":"2019-08-06 22:06:28","codes":[{"authorDate":"2019-08-06 22:06:28","commitOrder":5,"curCode":"  public void testGroupByWithSubtotalsSpecOfDimensionsPrefixes()\n  {\n    \r\n    cannotVectorize();\n\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setVirtualColumns(new ExpressionVirtualColumn(\"alias\", \"quality\", ValueType.STRING, TestExprMacroTable.INSTANCE))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"market\", \"market2\"),\n            new DefaultDimensionSpec(\"alias\", \"alias2\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.rowsCount,\n                new LongSumAggregatorFactory(\"idx\", \"index\")\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"market2\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1102L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2836L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2681L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2514L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2193L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            6619L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            5827L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","date":"2019-08-06 22:06:28","endLine":6494,"groupId":"13932","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByWithSubtotalsSpecOfDimensionsPrefixes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b2/33fd8b0399ac13eb8f078c0fb29c722c493d75.src","preCode":"  public void testGroupByWithSubtotalsSpecOfDimensionsPrefixes()\n  {\n    \r\n    cannotVectorize();\n\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setVirtualColumns(new ExpressionVirtualColumn(\"alias\", \"quality\", ValueType.STRING, TestExprMacroTable.INSTANCE))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"market\", \"market2\"),\n            new DefaultDimensionSpec(\"alias\", \"alias2\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.rowsCount,\n                new LongSumAggregatorFactory(\"idx\", \"index\")\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"market2\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1102L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2836L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2681L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2514L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2193L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            6619L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            5827L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6381,"status":"B"},{"authorDate":"2019-08-06 22:06:28","commitOrder":5,"curCode":"  public void testGroupByWithSubtotalsSpecWithLongDimensionColumn()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"qualityLong\", \"ql\", ValueType.LONG),\n            new DefaultDimensionSpec(\"market\", \"market2\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.rowsCount,\n                new LongSumAggregatorFactory(\"idx\", \"index\")\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"ql\"),\n            ImmutableList.of(\"market2\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1000L,\n            \"rows\",\n            1L,\n            \"idx\",\n            135L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1100L,\n            \"rows\",\n            1L,\n            \"idx\",\n            118L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1200L,\n            \"rows\",\n            1L,\n            \"idx\",\n            158L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1300L,\n            \"rows\",\n            1L,\n            \"idx\",\n            120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1400L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2870L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1500L,\n            \"rows\",\n            1L,\n            \"idx\",\n            121L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1600L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2900L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1700L,\n            \"rows\",\n            1L,\n            \"idx\",\n            78L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1800L,\n            \"rows\",\n            1L,\n            \"idx\",\n            119L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1000L,\n            \"rows\",\n            1L,\n            \"idx\",\n            147L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1100L,\n            \"rows\",\n            1L,\n            \"idx\",\n            112L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1200L,\n            \"rows\",\n            1L,\n            \"idx\",\n            166L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1300L,\n            \"rows\",\n            1L,\n            \"idx\",\n            113L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1400L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2447L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1500L,\n            \"rows\",\n            1L,\n            \"idx\",\n            114L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1600L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2505L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1700L,\n            \"rows\",\n            1L,\n            \"idx\",\n            97L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1800L,\n            \"rows\",\n            1L,\n            \"idx\",\n            126L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1102L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2836L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2681L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2514L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2193L\n        ),\n\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            6619L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            5827L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal-long-dim\");\n  }\n","date":"2019-08-06 22:06:28","endLine":7240,"groupId":"21108","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByWithSubtotalsSpecWithLongDimensionColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b2/33fd8b0399ac13eb8f078c0fb29c722c493d75.src","preCode":"  public void testGroupByWithSubtotalsSpecWithLongDimensionColumn()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"qualityLong\", \"ql\", ValueType.LONG),\n            new DefaultDimensionSpec(\"market\", \"market2\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.rowsCount,\n                new LongSumAggregatorFactory(\"idx\", \"index\")\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"ql\"),\n            ImmutableList.of(\"market2\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1000L,\n            \"rows\",\n            1L,\n            \"idx\",\n            135L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1100L,\n            \"rows\",\n            1L,\n            \"idx\",\n            118L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1200L,\n            \"rows\",\n            1L,\n            \"idx\",\n            158L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1300L,\n            \"rows\",\n            1L,\n            \"idx\",\n            120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1400L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2870L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1500L,\n            \"rows\",\n            1L,\n            \"idx\",\n            121L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1600L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2900L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1700L,\n            \"rows\",\n            1L,\n            \"idx\",\n            78L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1800L,\n            \"rows\",\n            1L,\n            \"idx\",\n            119L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1000L,\n            \"rows\",\n            1L,\n            \"idx\",\n            147L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1100L,\n            \"rows\",\n            1L,\n            \"idx\",\n            112L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1200L,\n            \"rows\",\n            1L,\n            \"idx\",\n            166L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1300L,\n            \"rows\",\n            1L,\n            \"idx\",\n            113L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1400L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2447L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1500L,\n            \"rows\",\n            1L,\n            \"idx\",\n            114L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1600L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2505L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1700L,\n            \"rows\",\n            1L,\n            \"idx\",\n            97L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1800L,\n            \"rows\",\n            1L,\n            \"idx\",\n            126L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1102L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2836L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2681L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2514L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2193L\n        ),\n\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            6619L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            5827L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal-long-dim\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6948,"status":"MB"}],"commitId":"4507a4f8f18b265bab7be10270e0a9ee0c369483","commitMessage":"@@@fix merging of groupBy subtotal spec results (#8109)\n\n* fix merging of groupBy subtotal spec results\n\n* add post agg to subtotals spec ut\n\n* add comment\n\n* remove unnecessary agg transformation\n\n* fix build\n\n* fix test\n\n* ignore unknown columns in ordering spec\n\n* change variable names based on comment for easy read\n\n* formatting\n\n* don't ignore unknown columns in DefaultLimitSpec to not change existing behavior\n\n* handle limit spec columns correctly\n\n* uncomment inadvertantly commented lines\n\n* GroupByStrategyV2 changes\n\n* test changes wip\n\n* more fixes to handle merge buffer closing and limit spec\n\n* uncomment line commented accidentally\n","date":"2019-08-06 22:06:28","modifiedFileCount":"7","status":"M","submitter":"Himanshu"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":6,"curCode":"  public void testGroupByWithSubtotalsSpecOfDimensionsPrefixes()\n  {\n    \r\n    cannotVectorize();\n\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setVirtualColumns(new ExpressionVirtualColumn(\"alias\", \"quality\", ValueType.STRING, TestExprMacroTable.INSTANCE))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"market\", \"market2\"),\n            new DefaultDimensionSpec(\"alias\", \"alias2\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.ROWS_COUNT,\n                new LongSumAggregatorFactory(\"idx\", \"index\")\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"market2\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1102L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2836L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2681L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2514L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2193L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            6619L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            5827L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","date":"2019-08-23 18:13:54","endLine":6494,"groupId":"13932","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByWithSubtotalsSpecOfDimensionsPrefixes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/62/70f6bf822e9df520831f224e31e00bb9d44650.src","preCode":"  public void testGroupByWithSubtotalsSpecOfDimensionsPrefixes()\n  {\n    \r\n    cannotVectorize();\n\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setVirtualColumns(new ExpressionVirtualColumn(\"alias\", \"quality\", ValueType.STRING, TestExprMacroTable.INSTANCE))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"market\", \"market2\"),\n            new DefaultDimensionSpec(\"alias\", \"alias2\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.rowsCount,\n                new LongSumAggregatorFactory(\"idx\", \"index\")\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"market2\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1102L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2836L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2681L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2514L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2193L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            6619L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            5827L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6381,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":6,"curCode":"  public void testGroupByWithSubtotalsSpecWithLongDimensionColumn()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"qualityLong\", \"ql\", ValueType.LONG),\n            new DefaultDimensionSpec(\"market\", \"market2\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.ROWS_COUNT,\n                new LongSumAggregatorFactory(\"idx\", \"index\")\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"ql\"),\n            ImmutableList.of(\"market2\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1000L,\n            \"rows\",\n            1L,\n            \"idx\",\n            135L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1100L,\n            \"rows\",\n            1L,\n            \"idx\",\n            118L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1200L,\n            \"rows\",\n            1L,\n            \"idx\",\n            158L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1300L,\n            \"rows\",\n            1L,\n            \"idx\",\n            120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1400L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2870L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1500L,\n            \"rows\",\n            1L,\n            \"idx\",\n            121L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1600L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2900L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1700L,\n            \"rows\",\n            1L,\n            \"idx\",\n            78L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1800L,\n            \"rows\",\n            1L,\n            \"idx\",\n            119L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1000L,\n            \"rows\",\n            1L,\n            \"idx\",\n            147L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1100L,\n            \"rows\",\n            1L,\n            \"idx\",\n            112L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1200L,\n            \"rows\",\n            1L,\n            \"idx\",\n            166L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1300L,\n            \"rows\",\n            1L,\n            \"idx\",\n            113L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1400L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2447L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1500L,\n            \"rows\",\n            1L,\n            \"idx\",\n            114L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1600L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2505L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1700L,\n            \"rows\",\n            1L,\n            \"idx\",\n            97L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1800L,\n            \"rows\",\n            1L,\n            \"idx\",\n            126L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1102L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2836L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2681L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2514L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2193L\n        ),\n\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            6619L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            5827L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal-long-dim\");\n  }\n","date":"2019-08-23 18:13:54","endLine":7240,"groupId":"21108","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByWithSubtotalsSpecWithLongDimensionColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/62/70f6bf822e9df520831f224e31e00bb9d44650.src","preCode":"  public void testGroupByWithSubtotalsSpecWithLongDimensionColumn()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird)\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"qualityLong\", \"ql\", ValueType.LONG),\n            new DefaultDimensionSpec(\"market\", \"market2\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.rowsCount,\n                new LongSumAggregatorFactory(\"idx\", \"index\")\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.dayGran)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"ql\"),\n            ImmutableList.of(\"market2\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1000L,\n            \"rows\",\n            1L,\n            \"idx\",\n            135L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1100L,\n            \"rows\",\n            1L,\n            \"idx\",\n            118L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1200L,\n            \"rows\",\n            1L,\n            \"idx\",\n            158L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1300L,\n            \"rows\",\n            1L,\n            \"idx\",\n            120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1400L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2870L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1500L,\n            \"rows\",\n            1L,\n            \"idx\",\n            121L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1600L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2900L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1700L,\n            \"rows\",\n            1L,\n            \"idx\",\n            78L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1800L,\n            \"rows\",\n            1L,\n            \"idx\",\n            119L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1000L,\n            \"rows\",\n            1L,\n            \"idx\",\n            147L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1100L,\n            \"rows\",\n            1L,\n            \"idx\",\n            112L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1200L,\n            \"rows\",\n            1L,\n            \"idx\",\n            166L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1300L,\n            \"rows\",\n            1L,\n            \"idx\",\n            113L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1400L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2447L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1500L,\n            \"rows\",\n            1L,\n            \"idx\",\n            114L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1600L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2505L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1700L,\n            \"rows\",\n            1L,\n            \"idx\",\n            97L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1800L,\n            \"rows\",\n            1L,\n            \"idx\",\n            126L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1102L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2836L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2681L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2514L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2193L\n        ),\n\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            6619L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            5827L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal-long-dim\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6948,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2021-04-09 10:23:39","commitOrder":7,"curCode":"  public void testGroupByWithSubtotalsSpecOfDimensionsPrefixes()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setVirtualColumns(new ExpressionVirtualColumn(\"alias\", \"quality\", ValueType.STRING, TestExprMacroTable.INSTANCE))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"market\", \"market2\"),\n            new DefaultDimensionSpec(\"alias\", \"alias2\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.ROWS_COUNT,\n                new LongSumAggregatorFactory(\"idx\", \"index\")\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"market2\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1102L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2836L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2681L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2514L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2193L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            6619L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            5827L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","date":"2021-04-09 10:23:39","endLine":6506,"groupId":"106455","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByWithSubtotalsSpecOfDimensionsPrefixes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/eb/1ea62744182ebd93313ee3748cf71a1538535d.src","preCode":"  public void testGroupByWithSubtotalsSpecOfDimensionsPrefixes()\n  {\n    \r\n    cannotVectorize();\n\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setVirtualColumns(new ExpressionVirtualColumn(\"alias\", \"quality\", ValueType.STRING, TestExprMacroTable.INSTANCE))\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"market\", \"market2\"),\n            new DefaultDimensionSpec(\"alias\", \"alias2\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.ROWS_COUNT,\n                new LongSumAggregatorFactory(\"idx\", \"index\")\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"market2\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1102L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2836L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2681L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2514L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2193L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            6619L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            5827L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6396,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":7,"curCode":"  public void testGroupByWithSubtotalsSpecWithLongDimensionColumn()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"qualityLong\", \"ql\", ValueType.LONG),\n            new DefaultDimensionSpec(\"market\", \"market2\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.ROWS_COUNT,\n                new LongSumAggregatorFactory(\"idx\", \"index\")\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"ql\"),\n            ImmutableList.of(\"market2\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1000L,\n            \"rows\",\n            1L,\n            \"idx\",\n            135L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1100L,\n            \"rows\",\n            1L,\n            \"idx\",\n            118L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1200L,\n            \"rows\",\n            1L,\n            \"idx\",\n            158L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1300L,\n            \"rows\",\n            1L,\n            \"idx\",\n            120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1400L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2870L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1500L,\n            \"rows\",\n            1L,\n            \"idx\",\n            121L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1600L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2900L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1700L,\n            \"rows\",\n            1L,\n            \"idx\",\n            78L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1800L,\n            \"rows\",\n            1L,\n            \"idx\",\n            119L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1000L,\n            \"rows\",\n            1L,\n            \"idx\",\n            147L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1100L,\n            \"rows\",\n            1L,\n            \"idx\",\n            112L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1200L,\n            \"rows\",\n            1L,\n            \"idx\",\n            166L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1300L,\n            \"rows\",\n            1L,\n            \"idx\",\n            113L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1400L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2447L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1500L,\n            \"rows\",\n            1L,\n            \"idx\",\n            114L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1600L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2505L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1700L,\n            \"rows\",\n            1L,\n            \"idx\",\n            97L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1800L,\n            \"rows\",\n            1L,\n            \"idx\",\n            126L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1102L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2836L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2681L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2514L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2193L\n        ),\n\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            6619L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            5827L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal-long-dim\");\n  }\n","date":"2019-08-23 18:13:54","endLine":7240,"groupId":"106455","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByWithSubtotalsSpecWithLongDimensionColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/62/70f6bf822e9df520831f224e31e00bb9d44650.src","preCode":"  public void testGroupByWithSubtotalsSpecWithLongDimensionColumn()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setQuerySegmentSpec(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setDimensions(Lists.newArrayList(\n            new DefaultDimensionSpec(\"qualityLong\", \"ql\", ValueType.LONG),\n            new DefaultDimensionSpec(\"market\", \"market2\")\n        ))\n        .setAggregatorSpecs(\n            Arrays.asList(\n                QueryRunnerTestHelper.ROWS_COUNT,\n                new LongSumAggregatorFactory(\"idx\", \"index\")\n            )\n        )\n        .setGranularity(QueryRunnerTestHelper.DAY_GRAN)\n        .setSubtotalsSpec(ImmutableList.of(\n            ImmutableList.of(\"ql\"),\n            ImmutableList.of(\"market2\"),\n            ImmutableList.of()\n        ))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1000L,\n            \"rows\",\n            1L,\n            \"idx\",\n            135L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1100L,\n            \"rows\",\n            1L,\n            \"idx\",\n            118L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1200L,\n            \"rows\",\n            1L,\n            \"idx\",\n            158L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1300L,\n            \"rows\",\n            1L,\n            \"idx\",\n            120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1400L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2870L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1500L,\n            \"rows\",\n            1L,\n            \"idx\",\n            121L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1600L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2900L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1700L,\n            \"rows\",\n            1L,\n            \"idx\",\n            78L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"ql\",\n            1800L,\n            \"rows\",\n            1L,\n            \"idx\",\n            119L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1000L,\n            \"rows\",\n            1L,\n            \"idx\",\n            147L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1100L,\n            \"rows\",\n            1L,\n            \"idx\",\n            112L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1200L,\n            \"rows\",\n            1L,\n            \"idx\",\n            166L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1300L,\n            \"rows\",\n            1L,\n            \"idx\",\n            113L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1400L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2447L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1500L,\n            \"rows\",\n            1L,\n            \"idx\",\n            114L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1600L,\n            \"rows\",\n            3L,\n            \"idx\",\n            2505L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1700L,\n            \"rows\",\n            1L,\n            \"idx\",\n            97L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"ql\",\n            1800L,\n            \"rows\",\n            1L,\n            \"idx\",\n            126L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1102L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2836L\n        ),\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2681L\n        ),\n\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"spot\",\n            \"rows\",\n            9L,\n            \"idx\",\n            1120L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"total_market\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2514L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"market2\",\n            \"upfront\",\n            \"rows\",\n            2L,\n            \"idx\",\n            2193L\n        ),\n\n\n        makeRow(\n            query,\n            \"2011-04-01T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            6619L\n        ),\n        makeRow(\n            query,\n            \"2011-04-02T00:00:00.000Z\",\n            \"rows\",\n            13L,\n            \"idx\",\n            5827L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"subtotal-long-dim\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6948,"status":"N"}],"commitId":"338886fd5f1bc32cd6c5cadbc408838723099e75","commitMessage":"@@@vector group by support for string expressions (#11010)\n\n* vector group by support for string expressions\n\n* fix test\n\n* comments.  javadoc","date":"2021-04-09 10:23:39","modifiedFileCount":"15","status":"M","submitter":"Clint Wylie"}]
