[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDatabaseMetaDataColumns() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", \"foo\", null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":491,"groupId":"11022","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDatabaseMetaDataColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8f/a788c34b6f2611483de86ee589999bdb12a2af.src","preCode":"  public void testDatabaseMetaDataColumns() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", \"foo\", null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":424,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDatabaseMetaDataColumnsWithSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", CalciteTests.FORBIDDEN_DATASOURCE, null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":574,"groupId":"4156","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatabaseMetaDataColumnsWithSuperuser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8f/a788c34b6f2611483de86ee589999bdb12a2af.src","preCode":"  public void testDatabaseMetaDataColumnsWithSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", CalciteTests.FORBIDDEN_DATASOURCE, null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-10-16 05:01:21","commitOrder":2,"curCode":"  public void testDatabaseMetaDataColumns() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim3\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", \"foo\", null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","date":"2018-10-16 05:01:21","endLine":502,"groupId":"20896","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDatabaseMetaDataColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/de/e3d2fc6e1e2e9583eb7e679a37cc2a3738ba6e.src","preCode":"  public void testDatabaseMetaDataColumns() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", \"foo\", null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testDatabaseMetaDataColumnsWithSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", CalciteTests.FORBIDDEN_DATASOURCE, null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":574,"groupId":"4156","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatabaseMetaDataColumnsWithSuperuser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8f/a788c34b6f2611483de86ee589999bdb12a2af.src","preCode":"  public void testDatabaseMetaDataColumnsWithSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", CalciteTests.FORBIDDEN_DATASOURCE, null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"N"}],"commitId":"f537c0069a724c55161168ed8c7fc1e1d4b52293","commitMessage":"@@@SQL: Support for selecting multi-value dimensions. (#6462)\n\n* SQL: Support for selecting multi-value dimensions.\n\nFixes #4637. Doesn't completely address everything mentioned in #4638. \nbut at least fixes one issue on the way there.\n\n* Fix null cases in tests.\n","date":"2018-10-16 05:01:21","modifiedFileCount":"6","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":3,"curCode":"  public void testDatabaseMetaDataColumns() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim3\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", \"foo\", null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":529,"groupId":"20896","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDatabaseMetaDataColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/5632d5ded865ca8d161debd750d87c00a32910.src","preCode":"  public void testDatabaseMetaDataColumns() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim3\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", \"foo\", null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":454,"status":"M"},{"authorDate":"2019-02-24 12:10:31","commitOrder":3,"curCode":"  public void testDatabaseMetaDataColumnsWithSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", CalciteTests.FORBIDDEN_DATASOURCE, null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":612,"groupId":"4156","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatabaseMetaDataColumnsWithSuperuser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/5632d5ded865ca8d161debd750d87c00a32910.src","preCode":"  public void testDatabaseMetaDataColumnsWithSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", CalciteTests.FORBIDDEN_DATASOURCE, null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"M"}],"commitId":"8b803cbc22b15799fd0526de8d6d0eea155ad733","commitMessage":"@@@Added checkstyle for \"Methods starting with Capital Letters\"  (#7118)\n\n* Added checkstyle for \"Methods starting with Capital Letters\" and changed the method names violating this.\n\n* Un-abbreviate the method names in the calcite tests\n\n* Fixed checkstyle errors\n\n* Changed asserts position in the code\n","date":"2019-02-24 12:10:31","modifiedFileCount":"24","status":"M","submitter":"Himanshu Pandey"},{"authorTime":"2019-12-19 05:30:34","codes":[{"authorDate":"2019-12-19 05:30:34","commitOrder":4,"curCode":"  public void testDatabaseMetaDataColumns() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", nullNumeric ? \"YES\" : \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim3\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", nullNumeric ? \"YES\" : \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", nullNumeric ? \"YES\" : \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", \"foo\", null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","date":"2019-12-19 05:30:34","endLine":558,"groupId":"101526","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDatabaseMetaDataColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5d/318689abf63200c70ad6b63faa9035ee7fadaa.src","preCode":"  public void testDatabaseMetaDataColumns() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"dim3\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", \"foo\", null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":483,"status":"M"},{"authorDate":"2019-12-19 05:30:34","commitOrder":4,"curCode":"  public void testDatabaseMetaDataColumnsWithSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", nullNumeric ? \"YES\" : \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", nullNumeric ? \"YES\" : \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", nullNumeric ? \"YES\" : \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", CalciteTests.FORBIDDEN_DATASOURCE, null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","date":"2019-12-19 05:30:34","endLine":641,"groupId":"101526","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatabaseMetaDataColumnsWithSuperuser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5d/318689abf63200c70ad6b63faa9035ee7fadaa.src","preCode":"  public void testDatabaseMetaDataColumnsWithSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"__time\"),\n                Pair.of(\"DATA_TYPE\", Types.TIMESTAMP),\n                Pair.of(\"TYPE_NAME\", \"TIMESTAMP\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"cnt\"),\n                Pair.of(\"DATA_TYPE\", Types.BIGINT),\n                Pair.of(\"TYPE_NAME\", \"BIGINT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"dim2\"),\n                Pair.of(\"DATA_TYPE\", Types.VARCHAR),\n                Pair.of(\"TYPE_NAME\", \"VARCHAR\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m1\"),\n                Pair.of(\"DATA_TYPE\", Types.FLOAT),\n                Pair.of(\"TYPE_NAME\", \"FLOAT\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"m2\"),\n                Pair.of(\"DATA_TYPE\", Types.DOUBLE),\n                Pair.of(\"TYPE_NAME\", \"DOUBLE\"),\n                Pair.of(\"IS_NULLABLE\", \"NO\")\n            ),\n            row(\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"COLUMN_NAME\", \"unique_dim1\"),\n                Pair.of(\"DATA_TYPE\", Types.OTHER),\n                Pair.of(\"TYPE_NAME\", \"OTHER\"),\n                Pair.of(\"IS_NULLABLE\", \"YES\")\n            )\n        ),\n        getRows(\n            metaData.getColumns(null, \"dr_id\", CalciteTests.FORBIDDEN_DATASOURCE, null),\n            ImmutableSet.of(\"IS_NULLABLE\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"COLUMN_NAME\", \"DATA_TYPE\", \"TYPE_NAME\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":574,"status":"M"}],"commitId":"84ef8b819e961cf9e2684197c534875e82bf3461","commitMessage":"@@@fix druid-sql issue with filtering numeric columns by null values (#9061)\n\n* fix druid-sql issue with filtering numeric columns by null values\n\n* fix tests\n\n* fix tests for reals\n","date":"2019-12-19 05:30:34","modifiedFileCount":"3","status":"M","submitter":"Clint Wylie"}]
