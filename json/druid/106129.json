[{"authorTime":"2020-05-07 07:10:41","codes":[{"authorDate":"2020-04-17 13:12:20","commitOrder":4,"curCode":"  public void test_makeCursors_factToCountryUsingVirtualColumn()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            new IndexedTableJoinable(countriesTable),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%scountryIsoCode\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        virtualColumns,\n        null,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","date":"2020-04-17 13:12:20","endLine":1348,"groupId":"5009","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryUsingVirtualColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a9/b02e24a12dddadb864ef4c3e932243d10ce6f1.src","preCode":"  public void test_makeCursors_factToCountryUsingVirtualColumn()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            new IndexedTableJoinable(countriesTable),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%scountryIsoCode\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        virtualColumns,\n        null,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1285,"status":"NB"},{"authorDate":"2020-05-07 07:10:41","commitOrder":4,"curCode":"  public void test_makeCursors_factToCountryUsingVirtualColumnUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            LookupJoinable.wrap(countryIsoCodeToNameLookup),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%sk\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        virtualColumns,\n        null,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","date":"2020-05-07 07:10:41","endLine":1733,"groupId":"5011","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryUsingVirtualColumnUsingLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b7/e9a58c80a786076b9386103a8a1fd33ef4003c.src","preCode":"  public void test_makeCursors_factToCountryUsingVirtualColumnUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            LookupJoinable.wrap(countryIsoCodeToNameLookup),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%sk\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        virtualColumns,\n        null,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1670,"status":"B"}],"commitId":"accd710115efea87120d58f01b08342065d6ae5f","commitMessage":"@@@Add equivalent test coverage for all RHS join impls (#9831)\n\n* Add equivalent test coverage for all RHS join impls\n\n* address comments","date":"2020-05-07 07:10:41","modifiedFileCount":"2","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-05-30 06:03:35","codes":[{"authorDate":"2020-05-30 06:03:35","commitOrder":5,"curCode":"  public void test_makeCursors_factToCountryUsingVirtualColumn()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            new IndexedTableJoinable(countriesTable),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%scountryIsoCode\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        JoinableClauses.fromList(joinableClauses),\n        virtualColumns,\n        null,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","date":"2020-05-30 06:03:35","endLine":1669,"groupId":"5009","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryUsingVirtualColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2e/863b2487a2d635bd13d7c53183c95e11e33459.src","preCode":"  public void test_makeCursors_factToCountryUsingVirtualColumn()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            new IndexedTableJoinable(countriesTable),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%scountryIsoCode\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        virtualColumns,\n        null,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1606,"status":"M"},{"authorDate":"2020-05-30 06:03:35","commitOrder":5,"curCode":"  public void test_makeCursors_factToCountryUsingVirtualColumnUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            LookupJoinable.wrap(countryIsoCodeToNameLookup),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%sk\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        JoinableClauses.fromList(joinableClauses),\n        virtualColumns,\n        null,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","date":"2020-05-30 06:03:35","endLine":1735,"groupId":"5011","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryUsingVirtualColumnUsingLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2e/863b2487a2d635bd13d7c53183c95e11e33459.src","preCode":"  public void test_makeCursors_factToCountryUsingVirtualColumnUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            LookupJoinable.wrap(countryIsoCodeToNameLookup),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%sk\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        virtualColumns,\n        null,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1672,"status":"M"}],"commitId":"9c40bebc02dfd13e1bd58f2f45fd24424e4530a4","commitMessage":"@@@Refactor JoinFilterAnalyzer - part 2 (#9929)\n\n* Refactor JoinFilterAnalyzer\n\nThis patch attempts to make it easier to follow the join filter analysis code\nwith the hope of making it easier to add rewrite optimizations in the future.\n\nTo keep the patch small and easy to review.  this is the first of at least 2\npatches that are planned.\n\nThis patch adds a builder to the Pre-Analysis.  so that it is easier to\ninstantiate the preAnalysis. It also moves some of the filter normalization\ncode out to Fitlers with associated tests.\n\n* fix tests\n\n* Refactor JoinFilterAnalyzer - part 2\n\nThis change introduces the following components:\n * RhsRewriteCandidates - a wrapper for a list of candidates and associated\n     functions to operate on the set of candidates.\n * JoinableClauses - a wrapper for the list of JoinableClause that represent\n     a join condition and the associated functions to operate on the clauses.\n * Equiconditions - a wrapper representing the equiconditions that are used\n     in the join condition.\n\nAnd associated test changes.\n\nThis refactoring surfaced 2 bugs:\n - Missing equals and hashcode implementation for RhsRewriteCandidate.  thus\n   allowing potential duplicates in the rhs rewrite candidates\n - Missing Filter#supportsRequiredColumnRewrite check in\n   analyzeJoinFilterClause.  which could result in UnsupportedOperationException\n   being thrown by the filter\n\n* fix compile error\n\n* remove unused class","date":"2020-05-30 06:03:35","modifiedFileCount":"10","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2020-06-19 12:32:29","codes":[{"authorDate":"2020-06-19 12:32:29","commitOrder":6,"curCode":"  public void test_makeCursors_factToCountryUsingVirtualColumn()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            new IndexedTableJoinable(countriesTable),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%scountryIsoCode\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = makeDefaultConfigPreAnalysisGroup(\n        null,\n        joinableClauses,\n        virtualColumns\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysisGroup\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","date":"2020-06-19 12:32:29","endLine":1546,"groupId":"5009","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryUsingVirtualColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ed/6e1782f3a4acf3f698b6c9a7151c4541fea56a.src","preCode":"  public void test_makeCursors_factToCountryUsingVirtualColumn()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            new IndexedTableJoinable(countriesTable),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%scountryIsoCode\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        JoinableClauses.fromList(joinableClauses),\n        virtualColumns,\n        null,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1488,"status":"M"},{"authorDate":"2020-06-19 12:32:29","commitOrder":6,"curCode":"  public void test_makeCursors_factToCountryUsingVirtualColumnUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            LookupJoinable.wrap(countryIsoCodeToNameLookup),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%sk\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = makeDefaultConfigPreAnalysisGroup(\n        null,\n        joinableClauses,\n        virtualColumns\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysisGroup\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","date":"2020-06-19 12:32:29","endLine":1607,"groupId":"19766","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryUsingVirtualColumnUsingLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ed/6e1782f3a4acf3f698b6c9a7151c4541fea56a.src","preCode":"  public void test_makeCursors_factToCountryUsingVirtualColumnUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            LookupJoinable.wrap(countryIsoCodeToNameLookup),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%sk\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        JoinableClauses.fromList(joinableClauses),\n        virtualColumns,\n        null,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1549,"status":"M"}],"commitId":"37e150c0755c0efba609601b1122cd6bc8a271fb","commitMessage":"@@@Fix join filter rewrites with nested queries (#10015)\n\n* Fix join filter rewrites with nested queries\n\n* Fix test.  inspection.  coverage\n\n* Remove clauses from group key\n\n* Fix import order\n\nCo-authored-by: Gian Merlino <gianmerlino@gmail.com>","date":"2020-06-19 12:32:29","modifiedFileCount":"20","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2020-07-01 10:14:22","codes":[{"authorDate":"2020-07-01 10:14:22","commitOrder":7,"curCode":"  public void test_makeCursors_factToCountryUsingVirtualColumn()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            new IndexedTableJoinable(countriesTable),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%scountryIsoCode\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        null,\n        joinableClauses,\n        virtualColumns\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","date":"2020-07-01 10:14:22","endLine":1546,"groupId":"5009","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryUsingVirtualColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/80bd2094c58c27ff04849566ae8a600563769f.src","preCode":"  public void test_makeCursors_factToCountryUsingVirtualColumn()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            new IndexedTableJoinable(countriesTable),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%scountryIsoCode\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = makeDefaultConfigPreAnalysisGroup(\n        null,\n        joinableClauses,\n        virtualColumns\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysisGroup\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1488,"status":"M"},{"authorDate":"2020-07-01 10:14:22","commitOrder":7,"curCode":"  public void test_makeCursors_factToCountryUsingVirtualColumnUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            LookupJoinable.wrap(countryIsoCodeToNameLookup),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%sk\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        null,\n        joinableClauses,\n        virtualColumns\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","date":"2020-07-01 10:14:22","endLine":1607,"groupId":"19766","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryUsingVirtualColumnUsingLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/80bd2094c58c27ff04849566ae8a600563769f.src","preCode":"  public void test_makeCursors_factToCountryUsingVirtualColumnUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            LookupJoinable.wrap(countryIsoCodeToNameLookup),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%sk\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = makeDefaultConfigPreAnalysisGroup(\n        null,\n        joinableClauses,\n        virtualColumns\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysisGroup\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1549,"status":"M"}],"commitId":"5faa897a342096b2ac88587ad62e6e15022b01dd","commitMessage":"@@@Join filter pre-analysis simplifications and sanity checks. (#10104)\n\n* Join filter pre-analysis simplifications and sanity checks.\n\n- At pre-analysis time.  only compute pre-analysis for the innermost\n  root query.  since this is the one that will run on the join that involves\n  the base datasource. Previously.  pre-analyses were computed for multiple\n  levels of the query.  some of which were unnecessary.\n- Remove JoinFilterPreAnalysisGroup and join query level gathering code. \n  since they existed to support precomputation of multiple pre-analyses.\n- Embed JoinFilterPreAnalysisKey into JoinFilterPreAnalysis and use it to\n  sanity check?at processing time that the correct pre-analysis was done.\n\nTangentially related changes:\n\n- Remove prioritizeAndLaneQuery functionality from LocalQuerySegmentWalker.\n  The computed priority and lanes were not being used.\n- Add \"getBaseQuery\" method to DataSourceAnalysis to support identification\n  of the proper subquery for filter pre-analysis.\n\n* Fix compilation errors.\n\n* Adjust tests.","date":"2020-07-01 10:14:22","modifiedFileCount":"20","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-10-13 04:04:55","codes":[{"authorDate":"2020-10-13 04:04:55","commitOrder":8,"curCode":"  public void test_makeCursors_factToCountryUsingVirtualColumn()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            new IndexedTableJoinable(countriesTable),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%scountryIsoCode\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            makeExpressionVirtualColumn(\"concat(substring(countryIsoCode, 0, 1),'L')\")\n        )\n    );\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        null,\n        joinableClauses,\n        virtualColumns\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","date":"2020-10-13 04:04:55","endLine":1542,"groupId":"106129","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryUsingVirtualColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/55/469624ac828d97ff5baf0159654318a8f12699.src","preCode":"  public void test_makeCursors_factToCountryUsingVirtualColumn()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            new IndexedTableJoinable(countriesTable),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%scountryIsoCode\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        null,\n        joinableClauses,\n        virtualColumns\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1489,"status":"M"},{"authorDate":"2020-10-13 04:04:55","commitOrder":8,"curCode":"  public void test_makeCursors_factToCountryUsingVirtualColumnUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            LookupJoinable.wrap(countryIsoCodeToNameLookup),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%sk\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            makeExpressionVirtualColumn(\"concat(substring(countryIsoCode, 0, 1),'L')\")\n        )\n    );\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        null,\n        joinableClauses,\n        virtualColumns\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","date":"2020-10-13 04:04:55","endLine":1598,"groupId":"106129","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryUsingVirtualColumnUsingLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/55/469624ac828d97ff5baf0159654318a8f12699.src","preCode":"  public void test_makeCursors_factToCountryUsingVirtualColumnUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        new JoinableClause(\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n            LookupJoinable.wrap(countryIsoCodeToNameLookup),\n            JoinType.INNER,\n            JoinConditionAnalysis.forExpression(\n                StringUtils.format(\"\\\"%sk\\\" == virtual\", FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX),\n                FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    VirtualColumns virtualColumns = VirtualColumns.create(\n        Collections.singletonList(\n            new ExpressionVirtualColumn(\n                \"virtual\",\n                \"concat(substring(countryIsoCode, 0, 1),'L')\",\n                ValueType.STRING,\n                ExprMacroTable.nil()\n            )\n        )\n    );\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        null,\n        joinableClauses,\n        virtualColumns\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            null,\n            Intervals.ETERNITY,\n            virtualColumns,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"virtual\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Golpe de Estado en Chile de 1973\", \"CL\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Didier Leclair\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Les Argonautes\", \"CA\", \"CL\", \"CL\", \"Chile\"},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CL\", \"CL\", \"Chile\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1545,"status":"M"}],"commitId":"567e38170500d3649cbfaa28cf7aa6f5275d02e7","commitMessage":"@@@Any virtual column on \"__time\" should be a pre-join virtual column (#10451)\n\n* Virtual column on __time should be in pre-join\n\n* Add unit test","date":"2020-10-13 04:04:55","modifiedFileCount":"3","status":"M","submitter":"Abhishek Agarwal"}]
