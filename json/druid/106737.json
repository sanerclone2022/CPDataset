[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testFilteredTimeBoundaryQuery() throws IOException\n  {\n    QueryRunner customRunner = getCustomRunner();\n    TimeBoundaryQuery timeBoundaryQuery = Druids.newTimeBoundaryQueryBuilder()\n                                                .dataSource(\"testing\")\n                                                .filters(\"quality\", \"automotive\")\n                                                .build();\n    Assert.assertTrue(timeBoundaryQuery.hasFilters());\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    List<Result<TimeBoundaryResultValue>> results =\n        customRunner.run(QueryPlus.wrap(timeBoundaryQuery), context).toList();\n\n    Assert.assertTrue(Iterables.size(results) > 0);\n\n    TimeBoundaryResultValue val = results.iterator().next().getValue();\n    DateTime minTime = val.getMinTime();\n    DateTime maxTime = val.getMaxTime();\n\n    Assert.assertEquals(DateTimes.of(\"2011-01-13T00:00:00.000Z\"), minTime);\n    Assert.assertEquals(DateTimes.of(\"2011-01-16T00:00:00.000Z\"), maxTime);\n  }\n","date":"2018-08-31 00:56:26","endLine":190,"groupId":"17164","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilteredTimeBoundaryQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/16/d30acf5134ce3ec2dd44bbe185527487bbe6e2.src","preCode":"  public void testFilteredTimeBoundaryQuery() throws IOException\n  {\n    QueryRunner customRunner = getCustomRunner();\n    TimeBoundaryQuery timeBoundaryQuery = Druids.newTimeBoundaryQueryBuilder()\n                                                .dataSource(\"testing\")\n                                                .filters(\"quality\", \"automotive\")\n                                                .build();\n    Assert.assertTrue(timeBoundaryQuery.hasFilters());\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    List<Result<TimeBoundaryResultValue>> results =\n        customRunner.run(QueryPlus.wrap(timeBoundaryQuery), context).toList();\n\n    Assert.assertTrue(Iterables.size(results) > 0);\n\n    TimeBoundaryResultValue val = results.iterator().next().getValue();\n    DateTime minTime = val.getMinTime();\n    DateTime maxTime = val.getMaxTime();\n\n    Assert.assertEquals(DateTimes.of(\"2011-01-13T00:00:00.000Z\"), minTime);\n    Assert.assertEquals(DateTimes.of(\"2011-01-16T00:00:00.000Z\"), maxTime);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/timeboundary/TimeBoundaryQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testFilteredTimeBoundaryQueryNoMatches() throws IOException\n  {\n    QueryRunner customRunner = getCustomRunner();\n    TimeBoundaryQuery timeBoundaryQuery = Druids.newTimeBoundaryQueryBuilder()\n                                                .dataSource(\"testing\")\n                                                .filters(\"quality\", \"foobar\") \r\n                                                .build();\n    Assert.assertTrue(timeBoundaryQuery.hasFilters());\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    List<Result<TimeBoundaryResultValue>> results =\n        customRunner.run(QueryPlus.wrap(timeBoundaryQuery), context).toList();\n\n    Assert.assertTrue(Iterables.size(results) == 0);\n  }\n","date":"2018-08-31 00:56:26","endLine":207,"groupId":"13726","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilteredTimeBoundaryQueryNoMatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/16/d30acf5134ce3ec2dd44bbe185527487bbe6e2.src","preCode":"  public void testFilteredTimeBoundaryQueryNoMatches() throws IOException\n  {\n    QueryRunner customRunner = getCustomRunner();\n    TimeBoundaryQuery timeBoundaryQuery = Druids.newTimeBoundaryQueryBuilder()\n                                                .dataSource(\"testing\")\n                                                .filters(\"quality\", \"foobar\") \r\n                                                .build();\n    Assert.assertTrue(timeBoundaryQuery.hasFilters());\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    List<Result<TimeBoundaryResultValue>> results =\n        customRunner.run(QueryPlus.wrap(timeBoundaryQuery), context).toList();\n\n    Assert.assertTrue(Iterables.size(results) == 0);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/timeboundary/TimeBoundaryQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-07-24 23:29:03","codes":[{"authorDate":"2019-07-24 23:29:03","commitOrder":2,"curCode":"  public void testFilteredTimeBoundaryQuery() throws IOException\n  {\n    QueryRunner customRunner = getCustomRunner();\n    TimeBoundaryQuery timeBoundaryQuery = Druids.newTimeBoundaryQueryBuilder()\n                                                .dataSource(\"testing\")\n                                                .filters(\"quality\", \"automotive\")\n                                                .build();\n    Assert.assertTrue(timeBoundaryQuery.hasFilters());\n    List<Result<TimeBoundaryResultValue>> results =\n        customRunner.run(QueryPlus.wrap(timeBoundaryQuery)).toList();\n\n    Assert.assertTrue(Iterables.size(results) > 0);\n\n    TimeBoundaryResultValue val = results.iterator().next().getValue();\n    DateTime minTime = val.getMinTime();\n    DateTime maxTime = val.getMaxTime();\n\n    Assert.assertEquals(DateTimes.of(\"2011-01-13T00:00:00.000Z\"), minTime);\n    Assert.assertEquals(DateTimes.of(\"2011-01-16T00:00:00.000Z\"), maxTime);\n  }\n","date":"2019-07-24 23:29:03","endLine":175,"groupId":"106737","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilteredTimeBoundaryQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/de/ac09264927d9973d8014544649b92bb3c37146.src","preCode":"  public void testFilteredTimeBoundaryQuery() throws IOException\n  {\n    QueryRunner customRunner = getCustomRunner();\n    TimeBoundaryQuery timeBoundaryQuery = Druids.newTimeBoundaryQueryBuilder()\n                                                .dataSource(\"testing\")\n                                                .filters(\"quality\", \"automotive\")\n                                                .build();\n    Assert.assertTrue(timeBoundaryQuery.hasFilters());\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    List<Result<TimeBoundaryResultValue>> results =\n        customRunner.run(QueryPlus.wrap(timeBoundaryQuery), context).toList();\n\n    Assert.assertTrue(Iterables.size(results) > 0);\n\n    TimeBoundaryResultValue val = results.iterator().next().getValue();\n    DateTime minTime = val.getMinTime();\n    DateTime maxTime = val.getMaxTime();\n\n    Assert.assertEquals(DateTimes.of(\"2011-01-13T00:00:00.000Z\"), minTime);\n    Assert.assertEquals(DateTimes.of(\"2011-01-16T00:00:00.000Z\"), maxTime);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/timeboundary/TimeBoundaryQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2019-07-24 23:29:03","commitOrder":2,"curCode":"  public void testFilteredTimeBoundaryQueryNoMatches() throws IOException\n  {\n    QueryRunner customRunner = getCustomRunner();\n    TimeBoundaryQuery timeBoundaryQuery = Druids.newTimeBoundaryQueryBuilder()\n                                                .dataSource(\"testing\")\n                                                .filters(\"quality\", \"foobar\") \r\n                                                .build();\n    Assert.assertTrue(timeBoundaryQuery.hasFilters());\n    List<Result<TimeBoundaryResultValue>> results =\n        customRunner.run(QueryPlus.wrap(timeBoundaryQuery)).toList();\n\n    Assert.assertTrue(Iterables.size(results) == 0);\n  }\n","date":"2019-07-24 23:29:03","endLine":191,"groupId":"106737","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilteredTimeBoundaryQueryNoMatches","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/de/ac09264927d9973d8014544649b92bb3c37146.src","preCode":"  public void testFilteredTimeBoundaryQueryNoMatches() throws IOException\n  {\n    QueryRunner customRunner = getCustomRunner();\n    TimeBoundaryQuery timeBoundaryQuery = Druids.newTimeBoundaryQueryBuilder()\n                                                .dataSource(\"testing\")\n                                                .filters(\"quality\", \"foobar\") \r\n                                                .build();\n    Assert.assertTrue(timeBoundaryQuery.hasFilters());\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    List<Result<TimeBoundaryResultValue>> results =\n        customRunner.run(QueryPlus.wrap(timeBoundaryQuery), context).toList();\n\n    Assert.assertTrue(Iterables.size(results) == 0);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/timeboundary/TimeBoundaryQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"799d20249fe6333ea86b020f6d09c91fa4d3f998","commitMessage":"@@@Response context refactoring (#8110)\n\n* Response context refactoring\n\n* Serialization/Deserialization of ResponseContext\n\n* Added java doc comments\n\n* Renamed vars related to ResponseContext\n\n* Renamed empty() methods to createEmpty()\n\n* Fixed ResponseContext usage\n\n* Renamed multiple ResponseContext static fields\n\n* Added PublicApi annotations\n\n* Renamed QueryResponseContext class to ResourceIOReaderWriter\n\n* Moved the protected method below public static constants\n\n* Added createEmpty method to ResponseContext with DefaultResponseContext creation\n\n* Fixed inspection error\n\n* Added comments to the ResponseContext length limit and ResponseContext\nhttp header name\n\n* Added a comment of possible future refactoring\n\n* Removed .gitignore file of indexing-service\n\n* Removed a never-used method\n\n* VisibleForTesting method reducing boilerplate\n\nCo-Authored-By: Clint Wylie <cjwylie@gmail.com>\n\n* Reduced boilerplate\n\n* Renamed the method serialize to serializeWith\n\n* Removed unused import\n\n* Fixed incorrectly refactored test method\n\n* Added comments for ResponseContext keys\n\n* Fixed incorrectly refactored test method\n\n* Fixed IntervalChunkingQueryRunnerTest mocks\n","date":"2019-07-24 23:29:03","modifiedFileCount":"142","status":"M","submitter":"Eugene Sevastianov"}]
