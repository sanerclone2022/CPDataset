[{"authorTime":"2019-08-03 17:05:21","codes":[{"authorDate":"2019-08-03 17:05:21","commitOrder":1,"curCode":"  public void serializeWithTruncateValueTest() throws IOException\n  {\n    final ResponseContext ctx = ResponseContext.createEmpty();\n    ctx.put(ResponseContext.Key.NUM_SCANNED_ROWS, 100);\n    ctx.put(ResponseContext.Key.ETAG, \"long-string-that-is-supposed-to-be-removed-from-result\");\n    final DefaultObjectMapper objectMapper = new DefaultObjectMapper();\n    final String fullString = objectMapper.writeValueAsString(ctx.getDelegate());\n    final ResponseContext.SerializationResult res1 = ctx.serializeWith(objectMapper, Integer.MAX_VALUE);\n    Assert.assertEquals(fullString, res1.getTruncatedResult());\n    final ResponseContext ctxCopy = ResponseContext.createEmpty();\n    ctxCopy.merge(ctx);\n    final ResponseContext.SerializationResult res2 = ctx.serializeWith(objectMapper, 30);\n    ctxCopy.remove(ResponseContext.Key.ETAG);\n    ctxCopy.put(ResponseContext.Key.TRUNCATED, true);\n    Assert.assertEquals(\n        ctxCopy.getDelegate(),\n        ResponseContext.deserialize(res2.getTruncatedResult(), objectMapper).getDelegate()\n    );\n  }\n","date":"2019-08-03 17:05:21","endLine":247,"groupId":"16574","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"serializeWithTruncateValueTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/354c3ea6b3c4a43ab3ccf22b895335ea17df56.src","preCode":"  public void serializeWithTruncateValueTest() throws IOException\n  {\n    final ResponseContext ctx = ResponseContext.createEmpty();\n    ctx.put(ResponseContext.Key.NUM_SCANNED_ROWS, 100);\n    ctx.put(ResponseContext.Key.ETAG, \"long-string-that-is-supposed-to-be-removed-from-result\");\n    final DefaultObjectMapper objectMapper = new DefaultObjectMapper();\n    final String fullString = objectMapper.writeValueAsString(ctx.getDelegate());\n    final ResponseContext.SerializationResult res1 = ctx.serializeWith(objectMapper, Integer.MAX_VALUE);\n    Assert.assertEquals(fullString, res1.getTruncatedResult());\n    final ResponseContext ctxCopy = ResponseContext.createEmpty();\n    ctxCopy.merge(ctx);\n    final ResponseContext.SerializationResult res2 = ctx.serializeWith(objectMapper, 30);\n    ctxCopy.remove(ResponseContext.Key.ETAG);\n    ctxCopy.put(ResponseContext.Key.TRUNCATED, true);\n    Assert.assertEquals(\n        ctxCopy.getDelegate(),\n        ResponseContext.deserialize(res2.getTruncatedResult(), objectMapper).getDelegate()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/context/ResponseContextTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"B"},{"authorDate":"2019-08-03 17:05:21","commitOrder":1,"curCode":"  public void serializeWithTruncateArrayTest() throws IOException\n  {\n    final ResponseContext ctx = ResponseContext.createEmpty();\n    ctx.put(ResponseContext.Key.NUM_SCANNED_ROWS, 100);\n    ctx.put(\n        ResponseContext.Key.UNCOVERED_INTERVALS,\n        Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n    );\n    ctx.put(\n        ResponseContext.Key.MISSING_SEGMENTS,\n        Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n    );\n    final DefaultObjectMapper objectMapper = new DefaultObjectMapper();\n    final String fullString = objectMapper.writeValueAsString(ctx.getDelegate());\n    final ResponseContext.SerializationResult res1 = ctx.serializeWith(objectMapper, Integer.MAX_VALUE);\n    Assert.assertEquals(fullString, res1.getTruncatedResult());\n    final ResponseContext ctxCopy = ResponseContext.createEmpty();\n    ctxCopy.merge(ctx);\n    final ResponseContext.SerializationResult res2 = ctx.serializeWith(objectMapper, 70);\n    ctxCopy.put(ResponseContext.Key.UNCOVERED_INTERVALS, Arrays.asList(0, 1, 2, 3, 4));\n    ctxCopy.remove(ResponseContext.Key.MISSING_SEGMENTS);\n    ctxCopy.put(ResponseContext.Key.TRUNCATED, true);\n    Assert.assertEquals(\n        ctxCopy.getDelegate(),\n        ResponseContext.deserialize(res2.getTruncatedResult(), objectMapper).getDelegate()\n    );\n  }\n","date":"2019-08-03 17:05:21","endLine":276,"groupId":"16574","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeWithTruncateArrayTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/354c3ea6b3c4a43ab3ccf22b895335ea17df56.src","preCode":"  public void serializeWithTruncateArrayTest() throws IOException\n  {\n    final ResponseContext ctx = ResponseContext.createEmpty();\n    ctx.put(ResponseContext.Key.NUM_SCANNED_ROWS, 100);\n    ctx.put(\n        ResponseContext.Key.UNCOVERED_INTERVALS,\n        Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n    );\n    ctx.put(\n        ResponseContext.Key.MISSING_SEGMENTS,\n        Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n    );\n    final DefaultObjectMapper objectMapper = new DefaultObjectMapper();\n    final String fullString = objectMapper.writeValueAsString(ctx.getDelegate());\n    final ResponseContext.SerializationResult res1 = ctx.serializeWith(objectMapper, Integer.MAX_VALUE);\n    Assert.assertEquals(fullString, res1.getTruncatedResult());\n    final ResponseContext ctxCopy = ResponseContext.createEmpty();\n    ctxCopy.merge(ctx);\n    final ResponseContext.SerializationResult res2 = ctx.serializeWith(objectMapper, 70);\n    ctxCopy.put(ResponseContext.Key.UNCOVERED_INTERVALS, Arrays.asList(0, 1, 2, 3, 4));\n    ctxCopy.remove(ResponseContext.Key.MISSING_SEGMENTS);\n    ctxCopy.put(ResponseContext.Key.TRUNCATED, true);\n    Assert.assertEquals(\n        ctxCopy.getDelegate(),\n        ResponseContext.deserialize(res2.getTruncatedResult(), objectMapper).getDelegate()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/context/ResponseContextTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"B"}],"commitId":"3f3162b85e269749bf0aa848f435409b3a1db8fe","commitMessage":"@@@Enum of ResponseContext keys (#8157)\n\n* Refactored ResponseContext and aggregated its keys into Enum\n\n* Added unit tests for ResponseContext and refactored the serialization\n\n* Removed unused methods\n\n* Fixed code style\n\n* Fixed code style\n\n* Fixed code style\n\n* Made SerializationResult static\n\n* Updated according to the PR discussion:\n\nRenamed an argument\n\nUpdated comparator\n\nReplaced Pair usage with Map.Entry\n\nAdded a comment about quadratic complexity\n\nRemoved boolean field with an expression\n\nRenamed SerializationResult field\n\nRenamed the method merge to add and renamed several context keys\n\nRenamed field and method related to scanRowsLimit\n\nUpdated a comment\n\nSimplified a block of code\n\nRenamed a variable\n\n* Added JsonProperty annotation to renamed ScanQuery field\n\n* Extension-friendly context key implementation\n\n* Refactored ResponseContext: updated delegate type.  comments and exceptions\n\nReducing serialized context length by removing some of its'\ncollection elements\n\n* Fixed tests\n\n* Simplified response context truncation during serialization\n\n* Extracted a method of removing elements from a response context and\nadded some comments\n\n* Fixed typos and updated comments\n","date":"2019-08-03 17:05:21","modifiedFileCount":"28","status":"B","submitter":"Eugene Sevastianov"},{"authorTime":"2020-07-02 05:02:21","codes":[{"authorDate":"2020-07-02 05:02:21","commitOrder":2,"curCode":"  public void serializeWithTruncateValueTest() throws IOException\n  {\n    final ResponseContext ctx = ResponseContext.createEmpty();\n    ctx.put(ResponseContext.Key.NUM_SCANNED_ROWS, 100);\n    ctx.put(ResponseContext.Key.ETAG, \"long-string-that-is-supposed-to-be-removed-from-result\");\n    final DefaultObjectMapper objectMapper = new DefaultObjectMapper();\n    final String fullString = objectMapper.writeValueAsString(ctx.getDelegate());\n    final ResponseContext.SerializationResult res1 = ctx.serializeWith(objectMapper, Integer.MAX_VALUE);\n    Assert.assertEquals(fullString, res1.getResult());\n    final ResponseContext ctxCopy = ResponseContext.createEmpty();\n    ctxCopy.merge(ctx);\n    final ResponseContext.SerializationResult res2 = ctx.serializeWith(objectMapper, 30);\n    ctxCopy.remove(ResponseContext.Key.ETAG);\n    ctxCopy.put(ResponseContext.Key.TRUNCATED, true);\n    Assert.assertEquals(\n        ctxCopy.getDelegate(),\n        ResponseContext.deserialize(res2.getResult(), objectMapper).getDelegate()\n    );\n  }\n","date":"2020-07-02 05:02:21","endLine":262,"groupId":"106422","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"serializeWithTruncateValueTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8c/3294417340008d1f2d776aeb4fa518a4f54c9a.src","preCode":"  public void serializeWithTruncateValueTest() throws IOException\n  {\n    final ResponseContext ctx = ResponseContext.createEmpty();\n    ctx.put(ResponseContext.Key.NUM_SCANNED_ROWS, 100);\n    ctx.put(ResponseContext.Key.ETAG, \"long-string-that-is-supposed-to-be-removed-from-result\");\n    final DefaultObjectMapper objectMapper = new DefaultObjectMapper();\n    final String fullString = objectMapper.writeValueAsString(ctx.getDelegate());\n    final ResponseContext.SerializationResult res1 = ctx.serializeWith(objectMapper, Integer.MAX_VALUE);\n    Assert.assertEquals(fullString, res1.getTruncatedResult());\n    final ResponseContext ctxCopy = ResponseContext.createEmpty();\n    ctxCopy.merge(ctx);\n    final ResponseContext.SerializationResult res2 = ctx.serializeWith(objectMapper, 30);\n    ctxCopy.remove(ResponseContext.Key.ETAG);\n    ctxCopy.put(ResponseContext.Key.TRUNCATED, true);\n    Assert.assertEquals(\n        ctxCopy.getDelegate(),\n        ResponseContext.deserialize(res2.getTruncatedResult(), objectMapper).getDelegate()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/context/ResponseContextTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2020-07-02 05:02:21","commitOrder":2,"curCode":"  public void serializeWithTruncateArrayTest() throws IOException\n  {\n    final ResponseContext ctx = ResponseContext.createEmpty();\n    ctx.put(ResponseContext.Key.NUM_SCANNED_ROWS, 100);\n    ctx.put(\n        ResponseContext.Key.UNCOVERED_INTERVALS,\n        Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n    );\n    ctx.put(\n        ResponseContext.Key.MISSING_SEGMENTS,\n        Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n    );\n    final DefaultObjectMapper objectMapper = new DefaultObjectMapper();\n    final String fullString = objectMapper.writeValueAsString(ctx.getDelegate());\n    final ResponseContext.SerializationResult res1 = ctx.serializeWith(objectMapper, Integer.MAX_VALUE);\n    Assert.assertEquals(fullString, res1.getResult());\n    final ResponseContext ctxCopy = ResponseContext.createEmpty();\n    ctxCopy.merge(ctx);\n    final ResponseContext.SerializationResult res2 = ctx.serializeWith(objectMapper, 70);\n    ctxCopy.put(ResponseContext.Key.UNCOVERED_INTERVALS, Arrays.asList(0, 1, 2, 3, 4));\n    ctxCopy.remove(ResponseContext.Key.MISSING_SEGMENTS);\n    ctxCopy.put(ResponseContext.Key.TRUNCATED, true);\n    Assert.assertEquals(\n        ctxCopy.getDelegate(),\n        ResponseContext.deserialize(res2.getResult(), objectMapper).getDelegate()\n    );\n  }\n","date":"2020-07-02 05:02:21","endLine":291,"groupId":"106422","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"serializeWithTruncateArrayTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8c/3294417340008d1f2d776aeb4fa518a4f54c9a.src","preCode":"  public void serializeWithTruncateArrayTest() throws IOException\n  {\n    final ResponseContext ctx = ResponseContext.createEmpty();\n    ctx.put(ResponseContext.Key.NUM_SCANNED_ROWS, 100);\n    ctx.put(\n        ResponseContext.Key.UNCOVERED_INTERVALS,\n        Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n    );\n    ctx.put(\n        ResponseContext.Key.MISSING_SEGMENTS,\n        Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n    );\n    final DefaultObjectMapper objectMapper = new DefaultObjectMapper();\n    final String fullString = objectMapper.writeValueAsString(ctx.getDelegate());\n    final ResponseContext.SerializationResult res1 = ctx.serializeWith(objectMapper, Integer.MAX_VALUE);\n    Assert.assertEquals(fullString, res1.getTruncatedResult());\n    final ResponseContext ctxCopy = ResponseContext.createEmpty();\n    ctxCopy.merge(ctx);\n    final ResponseContext.SerializationResult res2 = ctx.serializeWith(objectMapper, 70);\n    ctxCopy.put(ResponseContext.Key.UNCOVERED_INTERVALS, Arrays.asList(0, 1, 2, 3, 4));\n    ctxCopy.remove(ResponseContext.Key.MISSING_SEGMENTS);\n    ctxCopy.put(ResponseContext.Key.TRUNCATED, true);\n    Assert.assertEquals(\n        ctxCopy.getDelegate(),\n        ResponseContext.deserialize(res2.getTruncatedResult(), objectMapper).getDelegate()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/context/ResponseContextTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"}],"commitId":"657f8ee80fa86779cf26a01072814b1530277aa7","commitMessage":"@@@Fix RetryQueryRunner to actually do the job (#10082)\n\n* Fix RetryQueryRunner to actually do the job\n\n* more javadoc\n\n* fix test and checkstyle\n\n* don't combine for testing\n\n* address comments\n\n* fix unit tests\n\n* always initialize response context in cachingClusteredClient\n\n* fix subquery\n\n* address comments\n\n* fix test\n\n* query id for builders\n\n* make queryId optional in the builders and ClusterQueryResult\n\n* fix test\n\n* suppress tests and unused methods\n\n* exclude groupBy builder\n\n* fix jacoco exclusion\n\n* add tests for builders\n\n* address comments\n\n* don't truncate","date":"2020-07-02 05:02:21","modifiedFileCount":"33","status":"M","submitter":"Jihoon Son"}]
