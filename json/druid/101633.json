[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testGroupByLong() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt, COUNT(*) FROM druid.foo GROUP BY cnt\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(AGGS(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":971,"groupId":"19139","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testGroupByLong() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt, COUNT(*) FROM druid.foo GROUP BY cnt\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(AGGS(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":953,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testCaseFilteredAggregationWithGroupBy() throws Exception\n  {\n    testQuery(\n        \"SELECT\\n\"\n        + \"  cnt,\\n\"\n        + \"  SUM(CASE WHEN dim1 <> '1' THEN 1 ELSE 0 END) + SUM(cnt)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"GROUP BY cnt\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(AGGS(\n                            new FilteredAggregatorFactory(\n                                new CountAggregatorFactory(\"a0\"),\n                                NOT(SELECTOR(\"dim1\", \"1\", null))\n                            ),\n                            new LongSumAggregatorFactory(\"a1\", \"cnt\")\n                        ))\n                        .setPostAggregatorSpecs(ImmutableList.of(EXPRESSION_POST_AGG(\"p0\", \"(\\\"a0\\\" + \\\"a1\\\")\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 11L}\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":2771,"groupId":"10946","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCaseFilteredAggregationWithGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testCaseFilteredAggregationWithGroupBy() throws Exception\n  {\n    testQuery(\n        \"SELECT\\n\"\n        + \"  cnt,\\n\"\n        + \"  SUM(CASE WHEN dim1 <> '1' THEN 1 ELSE 0 END) + SUM(cnt)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"GROUP BY cnt\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(AGGS(\n                            new FilteredAggregatorFactory(\n                                new CountAggregatorFactory(\"a0\"),\n                                NOT(SELECTOR(\"dim1\", \"1\", null))\n                            ),\n                            new LongSumAggregatorFactory(\"a1\", \"cnt\")\n                        ))\n                        .setPostAggregatorSpecs(ImmutableList.of(EXPRESSION_POST_AGG(\"p0\", \"(\\\"a0\\\" + \\\"a1\\\")\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 11L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2742,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testGroupByLong() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt, COUNT(*) FROM druid.foo GROUP BY cnt\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensionSpec(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":810,"groupId":"499","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testGroupByLong() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt, COUNT(*) FROM druid.foo GROUP BY cnt\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(AGGS(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":792,"status":"M"},{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testCaseFilteredAggregationWithGroupBy() throws Exception\n  {\n    testQuery(\n        \"SELECT\\n\"\n        + \"  cnt,\\n\"\n        + \"  SUM(CASE WHEN dim1 <> '1' THEN 1 ELSE 0 END) + SUM(cnt)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"GROUP BY cnt\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensionSpec(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(\n                            new FilteredAggregatorFactory(\n                                new CountAggregatorFactory(\"a0\"),\n                                not(selector(\"dim1\", \"1\", null))\n                            ),\n                            new LongSumAggregatorFactory(\"a1\", \"cnt\")\n                        ))\n                        .setPostAggregatorSpecs(ImmutableList.of(expresionPostAgg(\"p0\", \"(\\\"a0\\\" + \\\"a1\\\")\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 11L}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":2623,"groupId":"18162","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCaseFilteredAggregationWithGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testCaseFilteredAggregationWithGroupBy() throws Exception\n  {\n    testQuery(\n        \"SELECT\\n\"\n        + \"  cnt,\\n\"\n        + \"  SUM(CASE WHEN dim1 <> '1' THEN 1 ELSE 0 END) + SUM(cnt)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"GROUP BY cnt\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(AGGS(\n                            new FilteredAggregatorFactory(\n                                new CountAggregatorFactory(\"a0\"),\n                                NOT(SELECTOR(\"dim1\", \"1\", null))\n                            ),\n                            new LongSumAggregatorFactory(\"a1\", \"cnt\")\n                        ))\n                        .setPostAggregatorSpecs(ImmutableList.of(EXPRESSION_POST_AGG(\"p0\", \"(\\\"a0\\\" + \\\"a1\\\")\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 11L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2594,"status":"M"}],"commitId":"8b803cbc22b15799fd0526de8d6d0eea155ad733","commitMessage":"@@@Added checkstyle for \"Methods starting with Capital Letters\"  (#7118)\n\n* Added checkstyle for \"Methods starting with Capital Letters\" and changed the method names violating this.\n\n* Un-abbreviate the method names in the calcite tests\n\n* Fixed checkstyle errors\n\n* Changed asserts position in the code\n","date":"2019-02-24 12:10:31","modifiedFileCount":"24","status":"M","submitter":"Himanshu Pandey"},{"authorTime":"2019-03-12 02:37:58","codes":[{"authorDate":"2019-03-12 02:37:58","commitOrder":3,"curCode":"  public void testGroupByLong() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt, COUNT(*) FROM druid.foo GROUP BY cnt\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":810,"groupId":"101633","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testGroupByLong() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt, COUNT(*) FROM druid.foo GROUP BY cnt\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensionSpec(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":792,"status":"M"},{"authorDate":"2019-03-12 02:37:58","commitOrder":3,"curCode":"  public void testCaseFilteredAggregationWithGroupBy() throws Exception\n  {\n    testQuery(\n        \"SELECT\\n\"\n        + \"  cnt,\\n\"\n        + \"  SUM(CASE WHEN dim1 <> '1' THEN 1 ELSE 0 END) + SUM(cnt)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"GROUP BY cnt\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(\n                            new FilteredAggregatorFactory(\n                                new CountAggregatorFactory(\"a0\"),\n                                not(selector(\"dim1\", \"1\", null))\n                            ),\n                            new LongSumAggregatorFactory(\"a1\", \"cnt\")\n                        ))\n                        .setPostAggregatorSpecs(ImmutableList.of(expressionPostAgg(\"p0\", \"(\\\"a0\\\" + \\\"a1\\\")\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 11L}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":2632,"groupId":"101633","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCaseFilteredAggregationWithGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testCaseFilteredAggregationWithGroupBy() throws Exception\n  {\n    testQuery(\n        \"SELECT\\n\"\n        + \"  cnt,\\n\"\n        + \"  SUM(CASE WHEN dim1 <> '1' THEN 1 ELSE 0 END) + SUM(cnt)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"GROUP BY cnt\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensionSpec(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(\n                            new FilteredAggregatorFactory(\n                                new CountAggregatorFactory(\"a0\"),\n                                not(selector(\"dim1\", \"1\", null))\n                            ),\n                            new LongSumAggregatorFactory(\"a1\", \"cnt\")\n                        ))\n                        .setPostAggregatorSpecs(ImmutableList.of(expresionPostAgg(\"p0\", \"(\\\"a0\\\" + \\\"a1\\\")\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 11L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2603,"status":"M"}],"commitId":"d7ba19d477732578fc310831ed28365b36332752","commitMessage":"@@@sql.  filters.  and virtual columns  (#6902)\n\n* refactor sql planning to re-use expression virtual columns when possible when constructing a DruidQuery.  allowing virtual columns to be defined in filter expressions.  and making resulting native druid queries more concise. also minor refactor of built-in sql aggregators to maximize code re-use\n\n* fix it\n\n* fix it in the right place\n\n* fixup for base64 stuff\n\n* fixup tests\n\n* fix merge conflict on import order\n\n* fixup\n\n* fix imports\n\n* fix tests\n\n* review comments\n\n* refactor\n\n* re-arrange\n\n* better javadoc\n\n* fixup merge\n\n* fixup tests\n\n* fix accidental changes\n","date":"2019-03-12 02:37:58","modifiedFileCount":"33","status":"M","submitter":"Clint Wylie"}]
