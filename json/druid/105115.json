[{"authorTime":"2018-10-15 11:37:37","codes":[{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testDefaults()\n  {\n    final Properties props = new Properties();\n    props.put(\"org.apache.druid.java.util.emitter.recipientBaseUrl\", \"http://example.com/\");\n\n    final ObjectMapper objectMapper = new ObjectMapper();\n    final HttpEmitterConfig config = objectMapper.convertValue(\n        Emitters.makeCustomFactoryMap(props),\n        HttpEmitterConfig.class\n    );\n\n    Assert.assertEquals(60000, config.getFlushMillis());\n    Assert.assertEquals(500, config.getFlushCount());\n    Assert.assertEquals(\"http://example.com/\", config.getRecipientBaseUrl());\n    Assert.assertEquals(null, config.getBasicAuthentication());\n    Assert.assertEquals(BatchingStrategy.ARRAY, config.getBatchingStrategy());\n    Pair<Integer, Integer> batchConfigPair = BaseHttpEmittingConfig.getDefaultBatchSizeAndLimit(\n        Runtime.getRuntime().maxMemory()\n    );\n    Assert.assertEquals(batchConfigPair.lhs.intValue(), config.getMaxBatchSize());\n    Assert.assertEquals(batchConfigPair.rhs.intValue(), config.getBatchQueueSizeLimit());\n    Assert.assertEquals(Long.MAX_VALUE, config.getFlushTimeOut());\n    Assert.assertEquals(2.0f, config.getHttpTimeoutAllowanceFactor(), 0.0f);\n    Assert.assertEquals(0, config.getMinHttpTimeoutMillis());\n  }\n","date":"2018-10-15 11:37:37","endLine":56,"groupId":"22056","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/66/e8645a189e069459866c946bff857a60266315.src","preCode":"  public void testDefaults()\n  {\n    final Properties props = new Properties();\n    props.put(\"org.apache.druid.java.util.emitter.recipientBaseUrl\", \"http://example.com/\");\n\n    final ObjectMapper objectMapper = new ObjectMapper();\n    final HttpEmitterConfig config = objectMapper.convertValue(\n        Emitters.makeCustomFactoryMap(props),\n        HttpEmitterConfig.class\n    );\n\n    Assert.assertEquals(60000, config.getFlushMillis());\n    Assert.assertEquals(500, config.getFlushCount());\n    Assert.assertEquals(\"http://example.com/\", config.getRecipientBaseUrl());\n    Assert.assertEquals(null, config.getBasicAuthentication());\n    Assert.assertEquals(BatchingStrategy.ARRAY, config.getBatchingStrategy());\n    Pair<Integer, Integer> batchConfigPair = BaseHttpEmittingConfig.getDefaultBatchSizeAndLimit(\n        Runtime.getRuntime().maxMemory()\n    );\n    Assert.assertEquals(batchConfigPair.lhs.intValue(), config.getMaxBatchSize());\n    Assert.assertEquals(batchConfigPair.rhs.intValue(), config.getBatchQueueSizeLimit());\n    Assert.assertEquals(Long.MAX_VALUE, config.getFlushTimeOut());\n    Assert.assertEquals(2.0f, config.getHttpTimeoutAllowanceFactor(), 0.0f);\n    Assert.assertEquals(0, config.getMinHttpTimeoutMillis());\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/emitter/core/HttpEmitterConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"B"},{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testDefaultsLegacy()\n  {\n    final Properties props = new Properties();\n    props.put(\"org.apache.druid.java.util.emitter.http.url\", \"http://example.com/\");\n\n    final ObjectMapper objectMapper = new ObjectMapper();\n    final HttpEmitterConfig config = objectMapper.convertValue(Emitters.makeHttpMap(props), HttpEmitterConfig.class);\n\n    Assert.assertEquals(60000, config.getFlushMillis());\n    Assert.assertEquals(300, config.getFlushCount());\n    Assert.assertEquals(\"http://example.com/\", config.getRecipientBaseUrl());\n    Assert.assertEquals(null, config.getBasicAuthentication());\n    Assert.assertEquals(BatchingStrategy.ARRAY, config.getBatchingStrategy());\n    Pair<Integer, Integer> batchConfigPair = BaseHttpEmittingConfig.getDefaultBatchSizeAndLimit(\n        Runtime.getRuntime().maxMemory()\n    );\n    Assert.assertEquals(batchConfigPair.lhs.intValue(), config.getMaxBatchSize());\n    Assert.assertEquals(batchConfigPair.rhs.intValue(), config.getBatchQueueSizeLimit());\n    Assert.assertEquals(Long.MAX_VALUE, config.getFlushTimeOut());\n    Assert.assertEquals(2.0f, config.getHttpTimeoutAllowanceFactor(), 0.0f);\n    Assert.assertEquals(0, config.getMinHttpTimeoutMillis());\n  }\n","date":"2018-10-15 11:37:37","endLine":80,"groupId":"22056","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultsLegacy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/66/e8645a189e069459866c946bff857a60266315.src","preCode":"  public void testDefaultsLegacy()\n  {\n    final Properties props = new Properties();\n    props.put(\"org.apache.druid.java.util.emitter.http.url\", \"http://example.com/\");\n\n    final ObjectMapper objectMapper = new ObjectMapper();\n    final HttpEmitterConfig config = objectMapper.convertValue(Emitters.makeHttpMap(props), HttpEmitterConfig.class);\n\n    Assert.assertEquals(60000, config.getFlushMillis());\n    Assert.assertEquals(300, config.getFlushCount());\n    Assert.assertEquals(\"http://example.com/\", config.getRecipientBaseUrl());\n    Assert.assertEquals(null, config.getBasicAuthentication());\n    Assert.assertEquals(BatchingStrategy.ARRAY, config.getBatchingStrategy());\n    Pair<Integer, Integer> batchConfigPair = BaseHttpEmittingConfig.getDefaultBatchSizeAndLimit(\n        Runtime.getRuntime().maxMemory()\n    );\n    Assert.assertEquals(batchConfigPair.lhs.intValue(), config.getMaxBatchSize());\n    Assert.assertEquals(batchConfigPair.rhs.intValue(), config.getBatchQueueSizeLimit());\n    Assert.assertEquals(Long.MAX_VALUE, config.getFlushTimeOut());\n    Assert.assertEquals(2.0f, config.getHttpTimeoutAllowanceFactor(), 0.0f);\n    Assert.assertEquals(0, config.getMinHttpTimeoutMillis());\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/emitter/core/HttpEmitterConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"84598fba3b283cbfd6a5addd2602c7b12ba8c00c","commitMessage":"@@@combine druid-api.  druid-common.  java-util into druid-core (#6443)\n\n* combine druid-api.  druid-common.  java-util\n\n* spacing\n","date":"2018-10-15 11:37:37","modifiedFileCount":"0","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-10-03 06:59:17","codes":[{"authorDate":"2019-10-03 06:59:17","commitOrder":2,"curCode":"  public void testDefaults()\n  {\n    final Properties props = new Properties();\n    props.put(\"org.apache.druid.java.util.emitter.recipientBaseUrl\", \"http://example.com/\");\n\n    final ObjectMapper objectMapper = new ObjectMapper();\n    final HttpEmitterConfig config = objectMapper.convertValue(\n        Emitters.makeCustomFactoryMap(props),\n        HttpEmitterConfig.class\n    );\n\n    Assert.assertEquals(60000, config.getFlushMillis());\n    Assert.assertEquals(500, config.getFlushCount());\n    Assert.assertEquals(\"http://example.com/\", config.getRecipientBaseUrl());\n    Assert.assertNull(config.getBasicAuthentication());\n    Assert.assertEquals(BatchingStrategy.ARRAY, config.getBatchingStrategy());\n    Pair<Integer, Integer> batchConfigPair = BaseHttpEmittingConfig.getDefaultBatchSizeAndLimit(\n        Runtime.getRuntime().maxMemory()\n    );\n    Assert.assertEquals(batchConfigPair.lhs.intValue(), config.getMaxBatchSize());\n    Assert.assertEquals(batchConfigPair.rhs.intValue(), config.getBatchQueueSizeLimit());\n    Assert.assertEquals(Long.MAX_VALUE, config.getFlushTimeOut());\n    Assert.assertEquals(2.0f, config.getHttpTimeoutAllowanceFactor(), 0.0f);\n    Assert.assertEquals(0, config.getMinHttpTimeoutMillis());\n  }\n","date":"2019-10-03 06:59:17","endLine":56,"groupId":"105115","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testDefaults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/14/7776b4b99f34fe8939058054659682c1ccb31e.src","preCode":"  public void testDefaults()\n  {\n    final Properties props = new Properties();\n    props.put(\"org.apache.druid.java.util.emitter.recipientBaseUrl\", \"http://example.com/\");\n\n    final ObjectMapper objectMapper = new ObjectMapper();\n    final HttpEmitterConfig config = objectMapper.convertValue(\n        Emitters.makeCustomFactoryMap(props),\n        HttpEmitterConfig.class\n    );\n\n    Assert.assertEquals(60000, config.getFlushMillis());\n    Assert.assertEquals(500, config.getFlushCount());\n    Assert.assertEquals(\"http://example.com/\", config.getRecipientBaseUrl());\n    Assert.assertEquals(null, config.getBasicAuthentication());\n    Assert.assertEquals(BatchingStrategy.ARRAY, config.getBatchingStrategy());\n    Pair<Integer, Integer> batchConfigPair = BaseHttpEmittingConfig.getDefaultBatchSizeAndLimit(\n        Runtime.getRuntime().maxMemory()\n    );\n    Assert.assertEquals(batchConfigPair.lhs.intValue(), config.getMaxBatchSize());\n    Assert.assertEquals(batchConfigPair.rhs.intValue(), config.getBatchQueueSizeLimit());\n    Assert.assertEquals(Long.MAX_VALUE, config.getFlushTimeOut());\n    Assert.assertEquals(2.0f, config.getHttpTimeoutAllowanceFactor(), 0.0f);\n    Assert.assertEquals(0, config.getMinHttpTimeoutMillis());\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/emitter/core/HttpEmitterConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2019-10-03 06:59:17","commitOrder":2,"curCode":"  public void testDefaultsLegacy()\n  {\n    final Properties props = new Properties();\n    props.put(\"org.apache.druid.java.util.emitter.http.url\", \"http://example.com/\");\n\n    final ObjectMapper objectMapper = new ObjectMapper();\n    final HttpEmitterConfig config = objectMapper.convertValue(Emitters.makeHttpMap(props), HttpEmitterConfig.class);\n\n    Assert.assertEquals(60000, config.getFlushMillis());\n    Assert.assertEquals(300, config.getFlushCount());\n    Assert.assertEquals(\"http://example.com/\", config.getRecipientBaseUrl());\n    Assert.assertNull(config.getBasicAuthentication());\n    Assert.assertEquals(BatchingStrategy.ARRAY, config.getBatchingStrategy());\n    Pair<Integer, Integer> batchConfigPair = BaseHttpEmittingConfig.getDefaultBatchSizeAndLimit(\n        Runtime.getRuntime().maxMemory()\n    );\n    Assert.assertEquals(batchConfigPair.lhs.intValue(), config.getMaxBatchSize());\n    Assert.assertEquals(batchConfigPair.rhs.intValue(), config.getBatchQueueSizeLimit());\n    Assert.assertEquals(Long.MAX_VALUE, config.getFlushTimeOut());\n    Assert.assertEquals(2.0f, config.getHttpTimeoutAllowanceFactor(), 0.0f);\n    Assert.assertEquals(0, config.getMinHttpTimeoutMillis());\n  }\n","date":"2019-10-03 06:59:17","endLine":80,"groupId":"105115","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testDefaultsLegacy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/14/7776b4b99f34fe8939058054659682c1ccb31e.src","preCode":"  public void testDefaultsLegacy()\n  {\n    final Properties props = new Properties();\n    props.put(\"org.apache.druid.java.util.emitter.http.url\", \"http://example.com/\");\n\n    final ObjectMapper objectMapper = new ObjectMapper();\n    final HttpEmitterConfig config = objectMapper.convertValue(Emitters.makeHttpMap(props), HttpEmitterConfig.class);\n\n    Assert.assertEquals(60000, config.getFlushMillis());\n    Assert.assertEquals(300, config.getFlushCount());\n    Assert.assertEquals(\"http://example.com/\", config.getRecipientBaseUrl());\n    Assert.assertEquals(null, config.getBasicAuthentication());\n    Assert.assertEquals(BatchingStrategy.ARRAY, config.getBatchingStrategy());\n    Pair<Integer, Integer> batchConfigPair = BaseHttpEmittingConfig.getDefaultBatchSizeAndLimit(\n        Runtime.getRuntime().maxMemory()\n    );\n    Assert.assertEquals(batchConfigPair.lhs.intValue(), config.getMaxBatchSize());\n    Assert.assertEquals(batchConfigPair.rhs.intValue(), config.getBatchQueueSizeLimit());\n    Assert.assertEquals(Long.MAX_VALUE, config.getFlushTimeOut());\n    Assert.assertEquals(2.0f, config.getHttpTimeoutAllowanceFactor(), 0.0f);\n    Assert.assertEquals(0, config.getMinHttpTimeoutMillis());\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/emitter/core/HttpEmitterConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"f0d74b240d795b7dd1b2cd425f67615319810134","commitMessage":"@@@password provider for basic authentication of HttpEmitterConfig (#8618)\n\n","date":"2019-10-03 06:59:17","modifiedFileCount":"6","status":"M","submitter":"Parag Jain"}]
