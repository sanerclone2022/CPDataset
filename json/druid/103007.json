[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testHashPassword()\n  {\n    char[] password = \"HELLO\".toCharArray();\n    int iterations = BasicAuthUtils.DEFAULT_KEY_ITERATIONS;\n    byte[] salt = BasicAuthUtils.generateSalt();\n    byte[] hash = BasicAuthUtils.hashPassword(password, salt, iterations);\n\n    Assert.assertEquals(BasicAuthUtils.SALT_LENGTH, salt.length);\n    Assert.assertEquals(BasicAuthUtils.KEY_LENGTH / 8, hash.length);\n  }\n","date":"2018-08-31 00:56:26","endLine":38,"groupId":"17829","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHashPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/14/2e44afb4bbb35fceceb9318aac386fb617c6cf.src","preCode":"  public void testHashPassword()\n  {\n    char[] password = \"HELLO\".toCharArray();\n    int iterations = BasicAuthUtils.DEFAULT_KEY_ITERATIONS;\n    byte[] salt = BasicAuthUtils.generateSalt();\n    byte[] hash = BasicAuthUtils.hashPassword(password, salt, iterations);\n\n    Assert.assertEquals(BasicAuthUtils.SALT_LENGTH, salt.length);\n    Assert.assertEquals(BasicAuthUtils.KEY_LENGTH / 8, hash.length);\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/BasicAuthUtilsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testUserCredentials()\n  {\n    Response response = resource.createUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.updateUserCredentials(\n        req,\n        AUTHENTICATOR_NAME,\n        \"druid\",\n        new BasicAuthenticatorCredentialUpdate(\"helloworld\", null)\n    );\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n    BasicAuthenticatorUser actualUser = (BasicAuthenticatorUser) response.getEntity();\n    Assert.assertEquals(\"druid\", actualUser.getName());\n    BasicAuthenticatorCredentials credentials = actualUser.getCredentials();\n\n    byte[] salt = credentials.getSalt();\n    byte[] hash = credentials.getHash();\n    int iterations = credentials.getIterations();\n    Assert.assertEquals(BasicAuthUtils.SALT_LENGTH, salt.length);\n    Assert.assertEquals(BasicAuthUtils.KEY_LENGTH / 8, hash.length);\n    Assert.assertEquals(BasicAuthUtils.DEFAULT_KEY_ITERATIONS, iterations);\n\n    byte[] recalculatedHash = BasicAuthUtils.hashPassword(\n        \"helloworld\".toCharArray(),\n        salt,\n        iterations\n    );\n    Assert.assertArrayEquals(recalculatedHash, hash);\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.updateUserCredentials(\n        req,\n        AUTHENTICATOR_NAME,\n        \"druid\",\n        new BasicAuthenticatorCredentialUpdate(\"helloworld\", null)\n    );\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","date":"2018-08-31 00:56:26","endLine":280,"groupId":"4950","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUserCredentials","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/72/f1c2fba3d375f4859b87ead491caaa898ddc21.src","preCode":"  public void testUserCredentials()\n  {\n    Response response = resource.createUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.updateUserCredentials(\n        req,\n        AUTHENTICATOR_NAME,\n        \"druid\",\n        new BasicAuthenticatorCredentialUpdate(\"helloworld\", null)\n    );\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n    BasicAuthenticatorUser actualUser = (BasicAuthenticatorUser) response.getEntity();\n    Assert.assertEquals(\"druid\", actualUser.getName());\n    BasicAuthenticatorCredentials credentials = actualUser.getCredentials();\n\n    byte[] salt = credentials.getSalt();\n    byte[] hash = credentials.getHash();\n    int iterations = credentials.getIterations();\n    Assert.assertEquals(BasicAuthUtils.SALT_LENGTH, salt.length);\n    Assert.assertEquals(BasicAuthUtils.KEY_LENGTH / 8, hash.length);\n    Assert.assertEquals(BasicAuthUtils.DEFAULT_KEY_ITERATIONS, iterations);\n\n    byte[] recalculatedHash = BasicAuthUtils.hashPassword(\n        \"helloworld\".toCharArray(),\n        salt,\n        iterations\n    );\n    Assert.assertArrayEquals(recalculatedHash, hash);\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.updateUserCredentials(\n        req,\n        AUTHENTICATOR_NAME,\n        \"druid\",\n        new BasicAuthenticatorCredentialUpdate(\"helloworld\", null)\n    );\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authentication/CoordinatorBasicAuthenticatorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-10-09 08:08:27","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testHashPassword()\n  {\n    char[] password = \"HELLO\".toCharArray();\n    int iterations = BasicAuthUtils.DEFAULT_KEY_ITERATIONS;\n    byte[] salt = BasicAuthUtils.generateSalt();\n    byte[] hash = BasicAuthUtils.hashPassword(password, salt, iterations);\n\n    Assert.assertEquals(BasicAuthUtils.SALT_LENGTH, salt.length);\n    Assert.assertEquals(BasicAuthUtils.KEY_LENGTH / 8, hash.length);\n  }\n","date":"2018-08-31 00:56:26","endLine":38,"groupId":"103007","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testHashPassword","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/14/2e44afb4bbb35fceceb9318aac386fb617c6cf.src","preCode":"  public void testHashPassword()\n  {\n    char[] password = \"HELLO\".toCharArray();\n    int iterations = BasicAuthUtils.DEFAULT_KEY_ITERATIONS;\n    byte[] salt = BasicAuthUtils.generateSalt();\n    byte[] hash = BasicAuthUtils.hashPassword(password, salt, iterations);\n\n    Assert.assertEquals(BasicAuthUtils.SALT_LENGTH, salt.length);\n    Assert.assertEquals(BasicAuthUtils.KEY_LENGTH / 8, hash.length);\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/BasicAuthUtilsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":29,"status":"N"},{"authorDate":"2019-10-09 08:08:27","commitOrder":2,"curCode":"  public void testUserCredentials()\n  {\n    Response response = resource.createUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.updateUserCredentials(\n        req,\n        AUTHENTICATOR_NAME,\n        \"druid\",\n        new BasicAuthenticatorCredentialUpdate(\"helloworld\", null)\n    );\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n    BasicAuthenticatorUser actualUser = (BasicAuthenticatorUser) response.getEntity();\n    Assert.assertEquals(\"druid\", actualUser.getName());\n    BasicAuthenticatorCredentials credentials = actualUser.getCredentials();\n\n    byte[] salt = credentials.getSalt();\n    byte[] hash = credentials.getHash();\n    int iterations = credentials.getIterations();\n    Assert.assertEquals(BasicAuthUtils.SALT_LENGTH, salt.length);\n    Assert.assertEquals(BasicAuthUtils.KEY_LENGTH / 8, hash.length);\n    Assert.assertEquals(BasicAuthUtils.DEFAULT_KEY_ITERATIONS, iterations);\n\n    byte[] recalculatedHash = BasicAuthUtils.hashPassword(\n        \"helloworld\".toCharArray(),\n        salt,\n        iterations\n    );\n    Assert.assertArrayEquals(recalculatedHash, hash);\n\n    response = resource.getCachedSerializedUserMap(req, AUTHENTICATOR_NAME);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertTrue(response.getEntity() instanceof byte[]);\n    Map<String, BasicAuthenticatorUser> cachedUserMap = BasicAuthUtils.deserializeAuthenticatorUserMap(objectMapper, (byte[]) response.getEntity());\n    Assert.assertNotNull(cachedUserMap);\n    Assert.assertNotNull(cachedUserMap.get(\"druid\"));\n    Assert.assertEquals(\"druid\", cachedUserMap.get(\"druid\").getName());\n    BasicAuthenticatorCredentials cachedUserCredentials = cachedUserMap.get(\"druid\").getCredentials();\n\n    salt = cachedUserCredentials.getSalt();\n    hash = cachedUserCredentials.getHash();\n    iterations = cachedUserCredentials.getIterations();\n    Assert.assertEquals(BasicAuthUtils.SALT_LENGTH, salt.length);\n    Assert.assertEquals(BasicAuthUtils.KEY_LENGTH / 8, hash.length);\n    Assert.assertEquals(BasicAuthUtils.DEFAULT_KEY_ITERATIONS, iterations);\n\n    recalculatedHash = BasicAuthUtils.hashPassword(\n        \"helloworld\".toCharArray(),\n        salt,\n        iterations\n    );\n    Assert.assertArrayEquals(recalculatedHash, hash);\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.updateUserCredentials(\n        req,\n        AUTHENTICATOR_NAME,\n        \"druid\",\n        new BasicAuthenticatorCredentialUpdate(\"helloworld\", null)\n    );\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","date":"2019-10-09 08:08:27","endLine":379,"groupId":"103007","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUserCredentials","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cc/e1b2402c7a62af49d416098533744a8eb0ad32.src","preCode":"  public void testUserCredentials()\n  {\n    Response response = resource.createUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.updateUserCredentials(\n        req,\n        AUTHENTICATOR_NAME,\n        \"druid\",\n        new BasicAuthenticatorCredentialUpdate(\"helloworld\", null)\n    );\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n    BasicAuthenticatorUser actualUser = (BasicAuthenticatorUser) response.getEntity();\n    Assert.assertEquals(\"druid\", actualUser.getName());\n    BasicAuthenticatorCredentials credentials = actualUser.getCredentials();\n\n    byte[] salt = credentials.getSalt();\n    byte[] hash = credentials.getHash();\n    int iterations = credentials.getIterations();\n    Assert.assertEquals(BasicAuthUtils.SALT_LENGTH, salt.length);\n    Assert.assertEquals(BasicAuthUtils.KEY_LENGTH / 8, hash.length);\n    Assert.assertEquals(BasicAuthUtils.DEFAULT_KEY_ITERATIONS, iterations);\n\n    byte[] recalculatedHash = BasicAuthUtils.hashPassword(\n        \"helloworld\".toCharArray(),\n        salt,\n        iterations\n    );\n    Assert.assertArrayEquals(recalculatedHash, hash);\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.updateUserCredentials(\n        req,\n        AUTHENTICATOR_NAME,\n        \"druid\",\n        new BasicAuthenticatorCredentialUpdate(\"helloworld\", null)\n    );\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authentication/CoordinatorBasicAuthenticatorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"}],"commitId":"18758f52283696ba12ab0763260909b7ca734f1e","commitMessage":"@@@Support LDAP authentication/authorization (#6972)\n\n* Support LDAP authentication/authorization\n\n* fixed integration-tests\n\n* fixed Travis CI build errors related to druid-security module\n\n* fixed failing test\n\n* fixed failing test header\n\n* added comments.  force build\n\n* fixes for strict compilation spotbugs checks\n\n* removed authenticator rolling credential update feature\n\n* removed escalator rolling credential update feature\n\n* fixed teamcity inspection deprecated API usage error\n\n* fixed checkstyle execution error.  removed unused import\n\n* removed cached config as part of removing authenticator rolling credential update feature\n\n* removed config bundle entity as part of removing authenticator rolling credential update feature\n\n* refactored ldao configuration\n\n* added support for SSLContext configuration and TLSCertificateChecker\n\n* removed check to return authentication failure when user has no group assigned.  will be checked and handled by the authorizer\n\n* Separate out authorizer checks between metadata-backed store user and LDAP user/groups\n\n* refactored BasicSecuritySSLSocketFactory usage to fix strict compilation spotbugs checks\n\n* fixes build issue\n\n* final review comments updates\n\n* final review comments updates\n\n* fixed LGTM and spellcheck alerts\n\n* Fixed Avatica auth failure error message check\n\n* Updated metadata credentials validator exception message string.  replaced DB with metadata store\n","date":"2019-10-09 08:08:27","modifiedFileCount":"44","status":"M","submitter":"Mohammad J. Khan"}]
