[{"authorTime":"2019-04-10 11:46:29","codes":[{"authorDate":"2019-04-10 11:46:29","commitOrder":1,"curCode":"  public void testRight()\n  {\n    testExpression(\n        rexBuilder.makeCall(\n            new RightOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(1)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",1)\"),\n        \"o\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RightOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(2)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",2)\"),\n        \"oo\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RightOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(3)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",3)\"),\n        \"foo\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RightOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(4)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",4)\"),\n        \"foo\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RightOperatorConversion().calciteOperator(),\n            inputRef(\"tstr\"),\n            integerLiteral(5)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"tstr\\\",5)\"),\n        \"05:06\"\n    );\n  }\n","date":"2019-04-10 11:46:29","endLine":1016,"groupId":"16977","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRight","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fa/890a10379f4d62e223e9f36583aa99b27cf74e.src","preCode":"  public void testRight()\n  {\n    testExpression(\n        rexBuilder.makeCall(\n            new RightOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(1)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",1)\"),\n        \"o\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RightOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(2)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",2)\"),\n        \"oo\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RightOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(3)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",3)\"),\n        \"foo\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RightOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(4)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",4)\"),\n        \"foo\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RightOperatorConversion().calciteOperator(),\n            inputRef(\"tstr\"),\n            integerLiteral(5)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"tstr\\\",5)\"),\n        \"05:06\"\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":965,"status":"B"},{"authorDate":"2019-04-10 11:46:29","commitOrder":1,"curCode":"  public void testRepeat()\n  {\n    testExpression(\n        rexBuilder.makeCall(\n            new RepeatOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(1)\n        ),\n        DruidExpression.fromExpression(\"repeat(\\\"s\\\",1)\"),\n        \"foo\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RepeatOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(3)\n        ),\n        DruidExpression.fromExpression(\"repeat(\\\"s\\\",3)\"),\n        \"foofoofoo\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RepeatOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(-1)\n        ),\n        DruidExpression.fromExpression(\"repeat(\\\"s\\\",-1)\"),\n        null\n    );\n  }\n","date":"2019-04-10 11:46:29","endLine":1174,"groupId":"16977","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRepeat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fa/890a10379f4d62e223e9f36583aa99b27cf74e.src","preCode":"  public void testRepeat()\n  {\n    testExpression(\n        rexBuilder.makeCall(\n            new RepeatOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(1)\n        ),\n        DruidExpression.fromExpression(\"repeat(\\\"s\\\",1)\"),\n        \"foo\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RepeatOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(3)\n        ),\n        DruidExpression.fromExpression(\"repeat(\\\"s\\\",3)\"),\n        \"foofoofoo\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RepeatOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(-1)\n        ),\n        DruidExpression.fromExpression(\"repeat(\\\"s\\\",-1)\"),\n        null\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1143,"status":"B"}],"commitId":"2f64414ade164576e0ca60dfbd7ba43262d9c373","commitMessage":"@@@Add \"REVERSE\" / \"REPEAT\" / \"RIGHT\" / \"LEFT\" functions (#7334)\n\n* Add \"REVERSE\" / \"REPEAT\" / \"RIGHT\" / \"LEFT\" functions\n\n* Fix ImportOrder\n\n* Use RuntimeException instead of OutOfMemoryError according to \"Effective Java\"\n\n* Simplify\n\n* Patch suggestions\n","date":"2019-04-10 11:46:29","modifiedFileCount":"5","status":"B","submitter":"Benedict Jin"},{"authorTime":"2019-08-02 12:29:58","codes":[{"authorDate":"2019-08-02 12:29:58","commitOrder":2,"curCode":"  public void testRight()\n  {\n    testHelper.testExpression(\n        new RightOperatorConversion().calciteOperator(),\n        ImmutableList.of(\n            testHelper.makeInputRef(\"s\"),\n            testHelper.makeLiteral(1)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",1)\"),\n        \"o\"\n    );\n\n    testHelper.testExpression(\n        new RightOperatorConversion().calciteOperator(),\n        ImmutableList.of(\n            testHelper.makeInputRef(\"s\"),\n            testHelper.makeLiteral(2)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",2)\"),\n        \"oo\"\n    );\n\n    testHelper.testExpression(\n        new RightOperatorConversion().calciteOperator(),\n        ImmutableList.of(\n            testHelper.makeInputRef(\"s\"),\n            testHelper.makeLiteral(3)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",3)\"),\n        \"foo\"\n    );\n\n    testHelper.testExpression(\n        new RightOperatorConversion().calciteOperator(),\n        ImmutableList.of(\n            testHelper.makeInputRef(\"s\"),\n            testHelper.makeLiteral(4)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",4)\"),\n        \"foo\"\n    );\n\n    testHelper.testExpression(\n        new RightOperatorConversion().calciteOperator(),\n        ImmutableList.of(\n            testHelper.makeInputRef(\"tstr\"),\n            testHelper.makeLiteral(5)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"tstr\\\",5)\"),\n        \"05:06\"\n    );\n  }\n","date":"2019-08-02 12:29:58","endLine":1171,"groupId":"101867","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRight","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/35/267c843f709aa8a7c3387e0c290037c57428de.src","preCode":"  public void testRight()\n  {\n    testExpression(\n        rexBuilder.makeCall(\n            new RightOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(1)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",1)\"),\n        \"o\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RightOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(2)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",2)\"),\n        \"oo\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RightOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(3)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",3)\"),\n        \"foo\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RightOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(4)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"s\\\",4)\"),\n        \"foo\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RightOperatorConversion().calciteOperator(),\n            inputRef(\"tstr\"),\n            integerLiteral(5)\n        ),\n        DruidExpression.fromExpression(\"right(\\\"tstr\\\",5)\"),\n        \"05:06\"\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1120,"status":"M"},{"authorDate":"2019-08-02 12:29:58","commitOrder":2,"curCode":"  public void testRepeat()\n  {\n    testHelper.testExpression(\n        new RepeatOperatorConversion().calciteOperator(),\n        ImmutableList.of(\n            testHelper.makeInputRef(\"s\"),\n            testHelper.makeLiteral(1)\n        ),\n        DruidExpression.fromExpression(\"repeat(\\\"s\\\",1)\"),\n        \"foo\"\n    );\n\n    testHelper.testExpression(\n        new RepeatOperatorConversion().calciteOperator(),\n        ImmutableList.of(\n            testHelper.makeInputRef(\"s\"),\n            testHelper.makeLiteral(3)\n        ),\n        DruidExpression.fromExpression(\"repeat(\\\"s\\\",3)\"),\n        \"foofoofoo\"\n    );\n\n    testHelper.testExpression(\n        new RepeatOperatorConversion().calciteOperator(),\n        ImmutableList.of(\n            testHelper.makeInputRef(\"s\"),\n            testHelper.makeLiteral(-1)\n        ),\n        DruidExpression.fromExpression(\"repeat(\\\"s\\\",-1)\"),\n        null\n    );\n  }\n","date":"2019-08-02 12:29:58","endLine":1323,"groupId":"101867","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRepeat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/35/267c843f709aa8a7c3387e0c290037c57428de.src","preCode":"  public void testRepeat()\n  {\n    testExpression(\n        rexBuilder.makeCall(\n            new RepeatOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(1)\n        ),\n        DruidExpression.fromExpression(\"repeat(\\\"s\\\",1)\"),\n        \"foo\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RepeatOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(3)\n        ),\n        DruidExpression.fromExpression(\"repeat(\\\"s\\\",3)\"),\n        \"foofoofoo\"\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new RepeatOperatorConversion().calciteOperator(),\n            inputRef(\"s\"),\n            integerLiteral(-1)\n        ),\n        DruidExpression.fromExpression(\"repeat(\\\"s\\\",-1)\"),\n        null\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1292,"status":"M"}],"commitId":"4bd3bad8ba960c9dd4166336eebe019a39d00562","commitMessage":"@@@Add IPv4 SQL functions (#8223)\n\n* Add IPv4 SQL functions\n\nNew SQL functions for filtering IPv4 addresses:\n- IPV4_MATCH: Check if IP address belongs to a subnet\n- IPV4_PARSE: Convert string IP address to integer\n- IPV4_STRINGIFY: Convert integer IP address to string\n\nThese are the SQL analogs of the druid expressions with the same name.\nFiltering is more efficient when operating on IP addresses as integers\ninstead of strings.\n\n* Refactor operator conversions into named constants\n","date":"2019-08-02 12:29:58","modifiedFileCount":"2","status":"M","submitter":"Chi Cao Minh"}]
