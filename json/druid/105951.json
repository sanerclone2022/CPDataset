[{"authorTime":"2019-07-13 03:54:07","codes":[{"authorDate":"2019-11-08 09:46:59","commitOrder":4,"curCode":"  public void testConstantExpression()\n  {\n    assertFilterMatchesSkipVectorize(edf(\"1 + 1\"), ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"));\n    assertFilterMatchesSkipVectorize(edf(\"'true'\"), ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"));\n\n    assertFilterMatchesSkipVectorize(edf(\"0 + 0\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"'false'\"), ImmutableList.of());\n  }\n","date":"2019-11-08 09:46:59","endLine":195,"groupId":"16155","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstantExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c3/fb6aefc26bd84d863cfb09c956eb9ded724604.src","preCode":"  public void testConstantExpression()\n  {\n    assertFilterMatchesSkipVectorize(edf(\"1 + 1\"), ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"));\n    assertFilterMatchesSkipVectorize(edf(\"'true'\"), ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"));\n\n    assertFilterMatchesSkipVectorize(edf(\"0 + 0\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"'false'\"), ImmutableList.of());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/ExpressionFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"B"},{"authorDate":"2019-07-13 03:54:07","commitOrder":4,"curCode":"  public void testMissingColumn()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatchesSkipVectorize(\n          edf(\"missing == ''\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n    } else {\n      \r\n      assertFilterMatchesSkipVectorize(edf(\"missing == null\"), ImmutableList.of());\n    }\n    assertFilterMatchesSkipVectorize(edf(\"missing == '1'\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"missing == 2\"), ImmutableList.of());\n    if (NullHandling.replaceWithDefault()) {\n      \r\n      assertFilterMatchesSkipVectorize(\n          edf(\"missing < '2'\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n      assertFilterMatchesSkipVectorize(\n          edf(\"missing < 2\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n      assertFilterMatchesSkipVectorize(\n          edf(\"missing < 2.0\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n    } else {\n      \r\n      assertFilterMatchesSkipVectorize(edf(\"missing < '2'\"), ImmutableList.of());\n      assertFilterMatchesSkipVectorize(edf(\"missing < 2\"), ImmutableList.of());\n      assertFilterMatchesSkipVectorize(edf(\"missing < 2.0\"), ImmutableList.of());\n    }\n    assertFilterMatchesSkipVectorize(edf(\"missing > '2'\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"missing > 2\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"missing > 2.0\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"like(missing, '1%')\"), ImmutableList.of());\n  }\n","date":"2019-07-13 03:54:07","endLine":255,"groupId":"16155","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMissingColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/8e4d2af0c49078111abcfc95e45a7a05375607.src","preCode":"  public void testMissingColumn()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatchesSkipVectorize(\n          edf(\"missing == ''\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n    } else {\n      \r\n      assertFilterMatchesSkipVectorize(edf(\"missing == null\"), ImmutableList.of());\n    }\n    assertFilterMatchesSkipVectorize(edf(\"missing == '1'\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"missing == 2\"), ImmutableList.of());\n    if (NullHandling.replaceWithDefault()) {\n      \r\n      assertFilterMatchesSkipVectorize(\n          edf(\"missing < '2'\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n      assertFilterMatchesSkipVectorize(\n          edf(\"missing < 2\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n      assertFilterMatchesSkipVectorize(\n          edf(\"missing < 2.0\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n    } else {\n      \r\n      assertFilterMatchesSkipVectorize(edf(\"missing < '2'\"), ImmutableList.of());\n      assertFilterMatchesSkipVectorize(edf(\"missing < 2\"), ImmutableList.of());\n      assertFilterMatchesSkipVectorize(edf(\"missing < 2.0\"), ImmutableList.of());\n    }\n    assertFilterMatchesSkipVectorize(edf(\"missing > '2'\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"missing > 2\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"missing > 2.0\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"like(missing, '1%')\"), ImmutableList.of());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/ExpressionFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"NB"}],"commitId":"c204d6837613ef2a36eb093707e66db78407311b","commitMessage":"@@@Fixes.  adjustments to numeric null handling and string first/last aggregators. (#8834)\n\nThere is a class of bugs due to the fact that BaseObjectColumnValueSelector\nhas both \"getObject\" and \"isNull\" methods.  but in most selector implementations\nand most call sites.  it is clear that the intent of \"isNull\" is only to apply\nto the primitive getters.  not the object getter. This makes sense.  because the\npurpose of isNull is to enable detection of nulls in otherwise-primitive columns.\nImagine a string column with a numeric selector built on top of it. You would\nwant it to return isNull = true.  so numeric aggregators don't treat it as\nall zeroes.\n\nSometimes this design leads people to accidentally guard non-primitive get\nmethods with \"selector.isNull\" checks.  which is improper.\n\nThis patch has three goals:\n\n1) Fix null-handling bugs that already exist in this class.\n2) Make interface and doc changes that reduce the probability of future bugs.\n3) Fix other.  unrelated bugs I noticed in the stringFirst and stringLast\n   aggregators while fixing null-handling bugs. I thought about splitting this\n   into its own patch.  but it ended up being tough to split from the\n   null-handling fixes.\n\nFor (1) the fixes are. \n\n- Fix StringFirst and StringLastAggregatorFactory to stop guarding getObject\n  calls on isNull.  by no longer extending NullableAggregatorFactory. Now uses\n  -1 as a sigil value for null.  to differentiate nulls and empty strings.\n- Fix ExpressionFilter to stop guarding getObject calls on isNull. Also.  use\n  eval.asBoolean() to avoid calling getLong on the selector after already\n  calling getObject.\n- Fix ObjectBloomFilterAggregator to stop guarding DimensionSelector calls\n  on isNull. Also.  refactored slightly to avoid the overhead of calling\n  getObject followed by another getter (see BloomFilterAggregatorFactory for\n  part of this).\n\nFor (2) the main changes are. \n\n- Remove the \"isNull\" method from BaseObjectColumnValueSelector.\n- Clarify \"isNull\" doc on BaseNullableColumnValueSelector.\n- Rename NullableAggregatorFactory -> NullbleNumericAggregatorFactory to emphasize\n  that it only works on aggregators that take numbers as input.\n- Similar naming changes to the Aggregator.  BufferAggregator.  and AggregateCombiner.\n- Similar naming changes to helper methods for groupBy.  ValueMatchers.  etc.\n\nFor (3) the other fixes for StringFirst and StringLastAggregatorFactory are. \n\n- Fixed buffer overrun in the buffer aggregators when some characters in the string\n  code into more than one byte (the old code used \"substring\" to apply a byte limit. \n  which is bad). I did this by introducing a new StringUtils.toUtf8WithLimit method.\n- Fixed weird IncrementalIndex logic that led to reading nulls for the timestamp.\n- Adjusted weird StringFirst/Last logic that worked around the weird IncrementalIndex\n  behavior.\n- Refactored to share code between the four aggregators.\n- Improved test coverage.\n- Made the base stringFirst.  stringLast aggregators adaptive.  and streamlined the\n  xFold versions into aliases. The adaptiveness is similar to how other aggregators\n  like hyperUnique work.","date":"2019-11-08 09:46:59","modifiedFileCount":"45","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-03-17 02:46:50","codes":[{"authorDate":"2021-03-17 02:46:50","commitOrder":5,"curCode":"  public void testConstantExpression()\n  {\n    assertFilterMatches(edf(\"1 + 1\"), ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"));\n    assertFilterMatches(edf(\"'true'\"), ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"));\n\n    assertFilterMatches(edf(\"0 + 0\"), ImmutableList.of());\n    assertFilterMatches(edf(\"'false'\"), ImmutableList.of());\n  }\n","date":"2021-03-17 02:46:50","endLine":216,"groupId":"105951","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testConstantExpression","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ef/a3cf5555b7613792135a2a7af088d0cc0ddf50.src","preCode":"  public void testConstantExpression()\n  {\n    assertFilterMatchesSkipVectorize(edf(\"1 + 1\"), ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"));\n    assertFilterMatchesSkipVectorize(edf(\"'true'\"), ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"));\n\n    assertFilterMatchesSkipVectorize(edf(\"0 + 0\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"'false'\"), ImmutableList.of());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/ExpressionFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"},{"authorDate":"2021-03-17 02:46:50","commitOrder":5,"curCode":"  public void testMissingColumn()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatches(\n          edf(\"missing == ''\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n      assertFilterMatches(\n          edf(\"missing == otherMissing\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n    } else {\n      \r\n      assertFilterMatches(edf(\"missing == null\"), ImmutableList.of());\n      \r\n      assertFilterMatches(\n          edf(\"missing == otherMissing\"),\n          ImmutableList.of()\n      );\n    }\n    assertFilterMatches(edf(\"missing == '1'\"), ImmutableList.of());\n    assertFilterMatches(edf(\"missing == 2\"), ImmutableList.of());\n    if (NullHandling.replaceWithDefault()) {\n      \r\n      assertFilterMatches(\n          edf(\"missing < '2'\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n      assertFilterMatches(\n          edf(\"missing < 2\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n      assertFilterMatches(\n          edf(\"missing < 2.0\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n    } else {\n      \r\n      assertFilterMatches(edf(\"missing < '2'\"), ImmutableList.of());\n      assertFilterMatches(edf(\"missing < 2\"), ImmutableList.of());\n      assertFilterMatches(edf(\"missing < 2.0\"), ImmutableList.of());\n    }\n    assertFilterMatches(edf(\"missing > '2'\"), ImmutableList.of());\n    assertFilterMatches(edf(\"missing > 2\"), ImmutableList.of());\n    assertFilterMatches(edf(\"missing > 2.0\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"like(missing, '1%')\"), ImmutableList.of());\n  }\n","date":"2021-03-17 02:46:50","endLine":289,"groupId":"105951","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testMissingColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ef/a3cf5555b7613792135a2a7af088d0cc0ddf50.src","preCode":"  public void testMissingColumn()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatchesSkipVectorize(\n          edf(\"missing == ''\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n    } else {\n      \r\n      assertFilterMatchesSkipVectorize(edf(\"missing == null\"), ImmutableList.of());\n    }\n    assertFilterMatchesSkipVectorize(edf(\"missing == '1'\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"missing == 2\"), ImmutableList.of());\n    if (NullHandling.replaceWithDefault()) {\n      \r\n      assertFilterMatchesSkipVectorize(\n          edf(\"missing < '2'\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n      assertFilterMatchesSkipVectorize(\n          edf(\"missing < 2\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n      assertFilterMatchesSkipVectorize(\n          edf(\"missing < 2.0\"),\n          ImmutableList.of(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n      );\n    } else {\n      \r\n      assertFilterMatchesSkipVectorize(edf(\"missing < '2'\"), ImmutableList.of());\n      assertFilterMatchesSkipVectorize(edf(\"missing < 2\"), ImmutableList.of());\n      assertFilterMatchesSkipVectorize(edf(\"missing < 2.0\"), ImmutableList.of());\n    }\n    assertFilterMatchesSkipVectorize(edf(\"missing > '2'\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"missing > 2\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"missing > 2.0\"), ImmutableList.of());\n    assertFilterMatchesSkipVectorize(edf(\"like(missing, '1%')\"), ImmutableList.of());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/ExpressionFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"}],"commitId":"4cd4a22f87616ad6b4a722a8a47bad9ce25fa790","commitMessage":"@@@expression filter support for vectorized query engines (#10613)\n\n* expression filter support for vectorized query engines\n\n* remove unused codes\n\n* more tests\n\n* refactor.  more tests\n\n* suppress\n\n* more\n\n* more\n\n* more\n\n* oops.  i was wrong\n\n* comment\n\n* remove decorate.  object dimension selector.  more javadocs\n\n* style","date":"2021-03-17 02:46:50","modifiedFileCount":"48","status":"M","submitter":"Clint Wylie"}]
