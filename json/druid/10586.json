[{"authorTime":"2020-06-17 14:48:30","codes":[{"authorDate":"2020-06-17 14:48:30","commitOrder":1,"curCode":"  public void testGetDatasourceLoadstatusDefault()\n  {\n    DataSegment datasource1Segment1 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        10\n    );\n\n    DataSegment datasource1Segment2 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-22/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        20\n    );\n    DataSegment datasource2Segment1 = new DataSegment(\n        \"datasource2\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        30\n    );\n    List<DataSegment> segments = ImmutableList.of(datasource1Segment1, datasource1Segment2);\n    Map<SegmentId, SegmentLoadInfo> completedLoadInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1),\n        datasource1Segment2.getId(), new SegmentLoadInfo(datasource1Segment2),\n        datasource2Segment1.getId(), new SegmentLoadInfo(datasource2Segment1)\n    );\n    Map<SegmentId, SegmentLoadInfo> halfLoadedInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1)\n    );\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(completedLoadInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    Response response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, null, null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(100.0, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n    EasyMock.reset(segmentsMetadataManager, inventoryView);\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(halfLoadedInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, null, null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(50.0, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n  }\n","date":"2020-06-17 14:48:30","endLine":1307,"groupId":"1743","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetDatasourceLoadstatusDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/e02ae86def99bf67659243d8f5ac660473b7a5.src","preCode":"  public void testGetDatasourceLoadstatusDefault()\n  {\n    DataSegment datasource1Segment1 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        10\n    );\n\n    DataSegment datasource1Segment2 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-22/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        20\n    );\n    DataSegment datasource2Segment1 = new DataSegment(\n        \"datasource2\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        30\n    );\n    List<DataSegment> segments = ImmutableList.of(datasource1Segment1, datasource1Segment2);\n    Map<SegmentId, SegmentLoadInfo> completedLoadInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1),\n        datasource1Segment2.getId(), new SegmentLoadInfo(datasource1Segment2),\n        datasource2Segment1.getId(), new SegmentLoadInfo(datasource2Segment1)\n    );\n    Map<SegmentId, SegmentLoadInfo> halfLoadedInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1)\n    );\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(completedLoadInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    Response response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, null, null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(100.0, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n    EasyMock.reset(segmentsMetadataManager, inventoryView);\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(halfLoadedInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, null, null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(50.0, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1231,"status":"B"},{"authorDate":"2020-06-17 14:48:30","commitOrder":1,"curCode":"  public void testGetDatasourceLoadstatusSimple()\n  {\n    DataSegment datasource1Segment1 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        10\n    );\n\n    DataSegment datasource1Segment2 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-22/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        20\n    );\n    DataSegment datasource2Segment1 = new DataSegment(\n        \"datasource2\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        30\n    );\n    List<DataSegment> segments = ImmutableList.of(datasource1Segment1, datasource1Segment2);\n    Map<SegmentId, SegmentLoadInfo> completedLoadInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1),\n        datasource1Segment2.getId(), new SegmentLoadInfo(datasource1Segment2),\n        datasource2Segment1.getId(), new SegmentLoadInfo(datasource2Segment1)\n    );\n    Map<SegmentId, SegmentLoadInfo> halfLoadedInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1)\n    );\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(completedLoadInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    Response response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, \"simple\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(0, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n    EasyMock.reset(segmentsMetadataManager, inventoryView);\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(halfLoadedInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, \"simple\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(1, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n  }\n","date":"2020-06-17 14:48:30","endLine":1386,"groupId":"1743","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetDatasourceLoadstatusSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/e02ae86def99bf67659243d8f5ac660473b7a5.src","preCode":"  public void testGetDatasourceLoadstatusSimple()\n  {\n    DataSegment datasource1Segment1 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        10\n    );\n\n    DataSegment datasource1Segment2 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-22/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        20\n    );\n    DataSegment datasource2Segment1 = new DataSegment(\n        \"datasource2\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        30\n    );\n    List<DataSegment> segments = ImmutableList.of(datasource1Segment1, datasource1Segment2);\n    Map<SegmentId, SegmentLoadInfo> completedLoadInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1),\n        datasource1Segment2.getId(), new SegmentLoadInfo(datasource1Segment2),\n        datasource2Segment1.getId(), new SegmentLoadInfo(datasource2Segment1)\n    );\n    Map<SegmentId, SegmentLoadInfo> halfLoadedInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1)\n    );\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(completedLoadInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    Response response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, \"simple\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(0, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n    EasyMock.reset(segmentsMetadataManager, inventoryView);\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(halfLoadedInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, \"simple\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(1, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1310,"status":"B"}],"commitId":"1a2620606d8187da7725088e9c52ce41b8a692b0","commitMessage":"@@@API to verify a datasource has the latest ingested data (#9965)\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* fix checksyle\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* fix spelling\n\n* address comments\n\n* fix checkstyle\n\n* update docs\n\n* fix tests\n\n* fix doc\n\n* address comments\n\n* fix typo\n\n* fix spelling\n\n* address comments\n\n* address comments\n\n* fix typo in docs","date":"2020-06-17 14:48:30","modifiedFileCount":"7","status":"B","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-04-05 12:02:43","codes":[{"authorDate":"2021-04-05 12:02:43","commitOrder":2,"curCode":"  public void testGetDatasourceLoadstatusDefault()\n  {\n    DataSegment datasource1Segment1 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        10\n    );\n\n    DataSegment datasource1Segment2 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-22/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        20\n    );\n    DataSegment datasource2Segment1 = new DataSegment(\n        \"datasource2\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        30\n    );\n    List<DataSegment> segments = ImmutableList.of(datasource1Segment1, datasource1Segment2);\n    Map<SegmentId, SegmentLoadInfo> completedLoadInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1),\n        datasource1Segment2.getId(), new SegmentLoadInfo(datasource1Segment2),\n        datasource2Segment1.getId(), new SegmentLoadInfo(datasource2Segment1)\n    );\n    Map<SegmentId, SegmentLoadInfo> halfLoadedInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1)\n    );\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(completedLoadInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    Response response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, null, null, null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(100.0, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n    EasyMock.reset(segmentsMetadataManager, inventoryView);\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(halfLoadedInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, null, null, null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(50.0, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n  }\n","date":"2021-04-05 12:02:43","endLine":1307,"groupId":"10586","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testGetDatasourceLoadstatusDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3c/a1e0fe6da1d9fd55c8fcb7510b092491de72ab.src","preCode":"  public void testGetDatasourceLoadstatusDefault()\n  {\n    DataSegment datasource1Segment1 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        10\n    );\n\n    DataSegment datasource1Segment2 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-22/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        20\n    );\n    DataSegment datasource2Segment1 = new DataSegment(\n        \"datasource2\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        30\n    );\n    List<DataSegment> segments = ImmutableList.of(datasource1Segment1, datasource1Segment2);\n    Map<SegmentId, SegmentLoadInfo> completedLoadInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1),\n        datasource1Segment2.getId(), new SegmentLoadInfo(datasource1Segment2),\n        datasource2Segment1.getId(), new SegmentLoadInfo(datasource2Segment1)\n    );\n    Map<SegmentId, SegmentLoadInfo> halfLoadedInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1)\n    );\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(completedLoadInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    Response response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, null, null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(100.0, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n    EasyMock.reset(segmentsMetadataManager, inventoryView);\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(halfLoadedInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, null, null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(50.0, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1231,"status":"M"},{"authorDate":"2021-04-05 12:02:43","commitOrder":2,"curCode":"  public void testGetDatasourceLoadstatusSimple()\n  {\n    DataSegment datasource1Segment1 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        10\n    );\n\n    DataSegment datasource1Segment2 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-22/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        20\n    );\n    DataSegment datasource2Segment1 = new DataSegment(\n        \"datasource2\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        30\n    );\n    List<DataSegment> segments = ImmutableList.of(datasource1Segment1, datasource1Segment2);\n    Map<SegmentId, SegmentLoadInfo> completedLoadInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1),\n        datasource1Segment2.getId(), new SegmentLoadInfo(datasource1Segment2),\n        datasource2Segment1.getId(), new SegmentLoadInfo(datasource2Segment1)\n    );\n    Map<SegmentId, SegmentLoadInfo> halfLoadedInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1)\n    );\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(completedLoadInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    Response response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, \"simple\", null, null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(0, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n    EasyMock.reset(segmentsMetadataManager, inventoryView);\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(halfLoadedInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, \"simple\", null, null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(1, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n  }\n","date":"2021-04-05 12:02:43","endLine":1386,"groupId":"10586","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testGetDatasourceLoadstatusSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3c/a1e0fe6da1d9fd55c8fcb7510b092491de72ab.src","preCode":"  public void testGetDatasourceLoadstatusSimple()\n  {\n    DataSegment datasource1Segment1 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        10\n    );\n\n    DataSegment datasource1Segment2 = new DataSegment(\n        \"datasource1\",\n        Intervals.of(\"2010-01-22/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        20\n    );\n    DataSegment datasource2Segment1 = new DataSegment(\n        \"datasource2\",\n        Intervals.of(\"2010-01-01/P1D\"),\n        \"\",\n        null,\n        null,\n        null,\n        null,\n        0x9,\n        30\n    );\n    List<DataSegment> segments = ImmutableList.of(datasource1Segment1, datasource1Segment2);\n    Map<SegmentId, SegmentLoadInfo> completedLoadInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1),\n        datasource1Segment2.getId(), new SegmentLoadInfo(datasource1Segment2),\n        datasource2Segment1.getId(), new SegmentLoadInfo(datasource2Segment1)\n    );\n    Map<SegmentId, SegmentLoadInfo> halfLoadedInfoMap = ImmutableMap.of(\n        datasource1Segment1.getId(), new SegmentLoadInfo(datasource1Segment1)\n    );\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(completedLoadInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    Response response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, \"simple\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(0, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n    EasyMock.reset(segmentsMetadataManager, inventoryView);\n\n    \r\n    EasyMock.expect(segmentsMetadataManager.iterateAllUsedNonOvershadowedSegmentsForDatasourceInterval(EasyMock.eq(\"datasource1\"), EasyMock.anyObject(Interval.class), EasyMock.anyBoolean()))\n            .andReturn(Optional.of(segments)).once();\n    EasyMock.expect(inventoryView.getSegmentLoadInfos()).andReturn(halfLoadedInfoMap).once();\n    EasyMock.replay(segmentsMetadataManager, inventoryView);\n\n    dataSourcesResource = new DataSourcesResource(inventoryView, segmentsMetadataManager, null, null, null, null);\n    response = dataSourcesResource.getDatasourceLoadstatus(\"datasource1\", true, null, \"simple\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertNotNull(response.getEntity());\n    Assert.assertEquals(1, ((Map) response.getEntity()).size());\n    Assert.assertTrue(((Map) response.getEntity()).containsKey(\"datasource1\"));\n    Assert.assertEquals(1, ((Map) response.getEntity()).get(\"datasource1\"));\n    EasyMock.verify(segmentsMetadataManager, inventoryView);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1310,"status":"M"}],"commitId":"8cf1e835431edac3290a6dfbe0b4cbb134ba19a8","commitMessage":"@@@Add paramter to loadstatus API to compute underdeplication against cluster view (#11056)\n\n* Add paramter to loadstatus API to compute underdeplication against cluster view\n\nThis change adds a query parameter `computeUsingClusterView` to loadstatus apis\nthat if specified have the coordinator compute undereplication for segments based\non the number of services available within cluster that the segment can be replicated\non.  instead of the configured replication count configured in load rule. A default\nload rule is created in all clusters that specified that all segments should be\nreplicated 2 times. As replicas are forced to be on separate nodes in the cluster. \nthis causes the loadstatus api to report that there are under-replicated segments\nwhen there is only 1 data server in the cluster. In this case.  calling loadstatus\napi without this new query parameter will always result in a response indicating\nunder-replication of segments\n\n* * fix exception mapper\n\n* * Address review comments\n\n* * update external API docs\n\n* Apply suggestions from code review\n\nCo-authored-by: Charles Smith <38529548+techdocsmith@users.noreply.github.com>\n\n* * update more external docs\n\n* * update javadoc\n\n* Apply suggestions from code review\n\nCo-authored-by: Charles Smith <38529548+techdocsmith@users.noreply.github.com>\n\nCo-authored-by: Charles Smith <38529548+techdocsmith@users.noreply.github.com>","date":"2021-04-05 12:02:43","modifiedFileCount":"9","status":"M","submitter":"zachjsh"}]
