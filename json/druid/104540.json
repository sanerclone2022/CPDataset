[{"authorTime":"2021-03-03 03:23:52","codes":[{"authorDate":"2021-02-18 17:35:10","commitOrder":11,"curCode":"  public void testRunCompactionTwice() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    final CompactionTask compactionTask2 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    resultPair = runTask(compactionTask2);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(\n                PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,\n                0,\n                2,\n                (short) 2,\n                (short) 1\n            ),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","date":"2021-02-18 17:35:10","endLine":436,"groupId":"1002","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunCompactionTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0e/287721c4408ce0efb2b96ff33fd4aa78db4f90.src","preCode":"  public void testRunCompactionTwice() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    final CompactionTask compactionTask2 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    resultPair = runTask(compactionTask2);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(\n                PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,\n                0,\n                2,\n                (short) 2,\n                (short) 1\n            ),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"NB"},{"authorDate":"2021-03-03 03:23:52","commitOrder":11,"curCode":"  public void testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .granularitySpec(new ClientCompactionTaskGranularitySpec(null, null))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","date":"2021-03-03 03:23:52","endLine":765,"groupId":"1002","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/95/f0aaf16c738625235a79dcd2e058222d681b19.src","preCode":"  public void testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .granularitySpec(new ClientCompactionTaskGranularitySpec(null, null))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":724,"status":"B"}],"commitId":"b7b0ee83627dd7887392e8f9d6fb5cb29465c28c","commitMessage":"@@@Add query granularity to compaction task (#10900)\n\n* add query granularity to compaction task\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix test\n\n* fix test\n\n* add tests\n\n* fix test\n\n* fix test\n\n* cleanup\n\n* rename class\n\n* fix test\n\n* fix test\n\n* add test\n\n* fix test","date":"2021-03-03 03:23:52","modifiedFileCount":"15","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-07-21 02:44:19","codes":[{"authorDate":"2021-07-21 02:44:19","commitOrder":12,"curCode":"  public void testRunCompactionTwice() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentCacheManagerFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    final CompactionTask compactionTask2 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    resultPair = runTask(compactionTask2);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(\n                PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,\n                0,\n                2,\n                (short) 2,\n                (short) 1\n            ),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","date":"2021-07-21 02:44:19","endLine":440,"groupId":"104540","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunCompactionTwice","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b6/098ea9854c6e2a2db0c789a1b7ff67c3239486.src","preCode":"  public void testRunCompactionTwice() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(PartitionIds.NON_ROOT_GEN_START_PARTITION_ID, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n\n    final CompactionTask compactionTask2 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .build();\n\n    resultPair = runTask(compactionTask2);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(\n                PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 1,\n                0,\n                2,\n                (short) 2,\n                (short) 1\n            ),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"},{"authorDate":"2021-07-21 02:44:19","commitOrder":12,"curCode":"  public void testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentCacheManagerFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .granularitySpec(new ClientCompactionTaskGranularitySpec(null, null))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","date":"2021-07-21 02:44:19","endLine":769,"groupId":"104540","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b6/098ea9854c6e2a2db0c789a1b7ff67c3239486.src","preCode":"  public void testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .granularitySpec(new ClientCompactionTaskGranularitySpec(null, null))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":728,"status":"M"}],"commitId":"94c1671eaf7b050972602fdedcb1971cdbde692d","commitMessage":"@@@Split SegmentLoader into SegmentLoader and SegmentCacheManager (#11466)\n\nThis PR splits current SegmentLoader into SegmentLoader and SegmentCacheManager.\n\nSegmentLoader - this class is responsible for building the segment object but does not expose any methods for downloading.  cache space management.  etc. Default implementation delegates the download operations to SegmentCacheManager and only contains the logic for building segments once downloaded. . This class will be used in SegmentManager to construct Segment objects.\n\nSegmentCacheManager - this class manages the segment cache on the local disk. It fetches the segment files to the local disk.  can clean up the cache.  and in the future.  support reserve and release on cache space. [See https://github.com/Make SegmentLoader extensible and customizable #11398]. This class will be used in ingestion tasks such as compaction.  re-indexing where segment files need to be downloaded locally.","date":"2021-07-21 02:44:19","modifiedFileCount":"41","status":"M","submitter":"Abhishek Agarwal"}]
