[{"authorTime":"2020-06-26 04:37:31","codes":[{"authorDate":"2020-06-26 04:37:31","commitOrder":1,"curCode":"  public void testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"DynamicPartitionsSpec must be used for best-effort rollup\");\n    final boolean forceGuaranteedRollup = false;\n    new ParallelIndexTuningConfig(\n        null,\n        null,\n        10,\n        1000L,\n        null,\n        null,\n        null,\n        new HashedPartitionsSpec(null, 10, null),\n        new IndexSpec(\n            new RoaringBitmapSerdeFactory(true),\n            CompressionStrategy.UNCOMPRESSED,\n            CompressionStrategy.LZF,\n            LongEncodingStrategy.LONGS\n        ),\n        new IndexSpec(),\n        1,\n        forceGuaranteedRollup,\n        true,\n        10000L,\n        OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n        null,\n        10,\n        100,\n        20L,\n        new Duration(3600),\n        128,\n        null,\n        null,\n        false,\n        null,\n        null\n    );\n  }\n","date":"2020-06-26 04:37:31","endLine":271,"groupId":"22881","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/10/1c97473485cf0ee65af0326208076168dc9f53.src","preCode":"  public void testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"DynamicPartitionsSpec must be used for best-effort rollup\");\n    final boolean forceGuaranteedRollup = false;\n    new ParallelIndexTuningConfig(\n        null,\n        null,\n        10,\n        1000L,\n        null,\n        null,\n        null,\n        new HashedPartitionsSpec(null, 10, null),\n        new IndexSpec(\n            new RoaringBitmapSerdeFactory(true),\n            CompressionStrategy.UNCOMPRESSED,\n            CompressionStrategy.LZF,\n            LongEncodingStrategy.LONGS\n        ),\n        new IndexSpec(),\n        1,\n        forceGuaranteedRollup,\n        true,\n        10000L,\n        OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n        null,\n        10,\n        100,\n        20L,\n        new Duration(3600),\n        128,\n        null,\n        null,\n        false,\n        null,\n        null\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"B"},{"authorDate":"2020-06-26 04:37:31","commitOrder":1,"curCode":"    public void testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet()\n    {\n      final boolean appendToExisting = true;\n      final boolean forceGuaranteedRollup = true;\n      final ParallelIndexIOConfig ioConfig = new ParallelIndexIOConfig(\n          null,\n          new InlineInputSource(\"test\"),\n          new JsonInputFormat(null, null, null),\n          appendToExisting\n      );\n      final ParallelIndexTuningConfig tuningConfig = new ParallelIndexTuningConfig(\n          null,\n          null,\n          10,\n          1000L,\n          null,\n          null,\n          null,\n          new HashedPartitionsSpec(null, 10, null),\n          new IndexSpec(\n              new RoaringBitmapSerdeFactory(true),\n              CompressionStrategy.UNCOMPRESSED,\n              CompressionStrategy.LZF,\n              LongEncodingStrategy.LONGS\n          ),\n          new IndexSpec(),\n          1,\n          forceGuaranteedRollup,\n          true,\n          10000L,\n          OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n          null,\n          10,\n          100,\n          20L,\n          new Duration(3600),\n          128,\n          null,\n          null,\n          false,\n          null,\n          null\n      );\n      final ParallelIndexIngestionSpec indexIngestionSpec = new ParallelIndexIngestionSpec(\n          new DataSchema(\n              \"datasource\",\n              new TimestampSpec(null, null, null),\n              DimensionsSpec.EMPTY,\n              null,\n              null,\n              null\n          ),\n          ioConfig,\n          tuningConfig\n      );\n      expectedException.expect(IllegalArgumentException.class);\n      expectedException.expectMessage(\"Perfect rollup cannot be guaranteed when appending to existing dataSources\");\n      new ParallelIndexSupervisorTask(\n          null,\n          null,\n          null,\n          indexIngestionSpec,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null\n      );\n    }\n","date":"2020-06-26 04:37:31","endLine":239,"groupId":"22881","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/25/937101b215c922f48213370d5e3ac09f2d5629.src","preCode":"    public void testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet()\n    {\n      final boolean appendToExisting = true;\n      final boolean forceGuaranteedRollup = true;\n      final ParallelIndexIOConfig ioConfig = new ParallelIndexIOConfig(\n          null,\n          new InlineInputSource(\"test\"),\n          new JsonInputFormat(null, null, null),\n          appendToExisting\n      );\n      final ParallelIndexTuningConfig tuningConfig = new ParallelIndexTuningConfig(\n          null,\n          null,\n          10,\n          1000L,\n          null,\n          null,\n          null,\n          new HashedPartitionsSpec(null, 10, null),\n          new IndexSpec(\n              new RoaringBitmapSerdeFactory(true),\n              CompressionStrategy.UNCOMPRESSED,\n              CompressionStrategy.LZF,\n              LongEncodingStrategy.LONGS\n          ),\n          new IndexSpec(),\n          1,\n          forceGuaranteedRollup,\n          true,\n          10000L,\n          OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n          null,\n          10,\n          100,\n          20L,\n          new Duration(3600),\n          128,\n          null,\n          null,\n          false,\n          null,\n          null\n      );\n      final ParallelIndexIngestionSpec indexIngestionSpec = new ParallelIndexIngestionSpec(\n          new DataSchema(\n              \"datasource\",\n              new TimestampSpec(null, null, null),\n              DimensionsSpec.EMPTY,\n              null,\n              null,\n              null\n          ),\n          ioConfig,\n          tuningConfig\n      );\n      expectedException.expect(IllegalArgumentException.class);\n      expectedException.expectMessage(\"Perfect rollup cannot be guaranteed when appending to existing dataSources\");\n      new ParallelIndexSupervisorTask(\n          null,\n          null,\n          null,\n          indexIngestionSpec,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null\n      );\n    }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"}],"commitId":"aaee72c781dea0f06bd5781d085b356d5d4241d0","commitMessage":"@@@Allow append to existing datasources when dynamic partitioning is used (#10033)\n\n* Fill in the core partition set size properly for batch ingestion with\ndynamic partitioning\n\n* incomplete javadoc\n\n* Address comments\n\n* fix tests\n\n* fix json serde.  add tests\n\n* checkstyle\n\n* Set core partition set size for hash-partitioned segments properly in\nbatch ingestion\n\n* test for both parallel and single-threaded task\n\n* unused variables\n\n* fix test\n\n* unused imports\n\n* add hash/range buckets\n\n* some test adjustment and missing json serde\n\n* centralized partition id allocation in parallel and simple tasks\n\n* remove string partition chunk\n\n* revive string partition chunk\n\n* fill numCorePartitions for hadoop\n\n* clean up hash stuffs\n\n* resolved todos\n\n* javadocs\n\n* Fix tests\n\n* add more tests\n\n* doc\n\n* unused imports\n\n* Allow append to existing datasources when dynamic partitioing is used\n\n* fix test\n\n* checkstyle\n\n* checkstyle\n\n* fix test\n\n* fix test\n\n* fix other tests..\n\n* checkstyle\n\n* hansle unknown core partitions size in overlord segment allocation\n\n* fail to append when numCorePartitions is unknown\n\n* log\n\n* fix comment; rename to be more intuitive\n\n* double append test\n\n* cleanup complete(); add tests\n\n* fix build\n\n* add tests\n\n* address comments\n\n* checkstyle","date":"2020-06-26 04:37:31","modifiedFileCount":"53","status":"B","submitter":"Jihoon Son"},{"authorTime":"2020-08-27 08:08:12","codes":[{"authorDate":"2020-06-26 04:37:31","commitOrder":2,"curCode":"  public void testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"DynamicPartitionsSpec must be used for best-effort rollup\");\n    final boolean forceGuaranteedRollup = false;\n    new ParallelIndexTuningConfig(\n        null,\n        null,\n        10,\n        1000L,\n        null,\n        null,\n        null,\n        new HashedPartitionsSpec(null, 10, null),\n        new IndexSpec(\n            new RoaringBitmapSerdeFactory(true),\n            CompressionStrategy.UNCOMPRESSED,\n            CompressionStrategy.LZF,\n            LongEncodingStrategy.LONGS\n        ),\n        new IndexSpec(),\n        1,\n        forceGuaranteedRollup,\n        true,\n        10000L,\n        OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n        null,\n        10,\n        100,\n        20L,\n        new Duration(3600),\n        128,\n        null,\n        null,\n        false,\n        null,\n        null\n    );\n  }\n","date":"2020-06-26 04:37:31","endLine":271,"groupId":"22881","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/10/1c97473485cf0ee65af0326208076168dc9f53.src","preCode":"  public void testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"DynamicPartitionsSpec must be used for best-effort rollup\");\n    final boolean forceGuaranteedRollup = false;\n    new ParallelIndexTuningConfig(\n        null,\n        null,\n        10,\n        1000L,\n        null,\n        null,\n        null,\n        new HashedPartitionsSpec(null, 10, null),\n        new IndexSpec(\n            new RoaringBitmapSerdeFactory(true),\n            CompressionStrategy.UNCOMPRESSED,\n            CompressionStrategy.LZF,\n            LongEncodingStrategy.LONGS\n        ),\n        new IndexSpec(),\n        1,\n        forceGuaranteedRollup,\n        true,\n        10000L,\n        OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n        null,\n        10,\n        100,\n        20L,\n        new Duration(3600),\n        128,\n        null,\n        null,\n        false,\n        null,\n        null\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"N"},{"authorDate":"2020-08-27 08:08:12","commitOrder":2,"curCode":"    public void testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet()\n    {\n      final boolean appendToExisting = true;\n      final boolean forceGuaranteedRollup = true;\n      final ParallelIndexIOConfig ioConfig = new ParallelIndexIOConfig(\n          null,\n          new InlineInputSource(\"test\"),\n          new JsonInputFormat(null, null, null),\n          appendToExisting\n      );\n      final ParallelIndexTuningConfig tuningConfig = new ParallelIndexTuningConfig(\n          null,\n          null,\n          10,\n          1000L,\n          null,\n          null,\n          null,\n          new HashedPartitionsSpec(null, 10, null),\n          new IndexSpec(\n              new RoaringBitmapSerdeFactory(true),\n              CompressionStrategy.UNCOMPRESSED,\n              CompressionStrategy.LZF,\n              LongEncodingStrategy.LONGS\n          ),\n          new IndexSpec(),\n          1,\n          forceGuaranteedRollup,\n          true,\n          10000L,\n          OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n          null,\n          10,\n          100,\n          20L,\n          new Duration(3600),\n          128,\n          null,\n          null,\n          false,\n          null,\n          null\n      );\n      final ParallelIndexIngestionSpec indexIngestionSpec = new ParallelIndexIngestionSpec(\n          new DataSchema(\n              \"datasource\",\n              new TimestampSpec(null, null, null),\n              DimensionsSpec.EMPTY,\n              null,\n              null,\n              null\n          ),\n          ioConfig,\n          tuningConfig\n      );\n      expectedException.expect(IllegalArgumentException.class);\n      expectedException.expectMessage(\"Perfect rollup cannot be guaranteed when appending to existing dataSources\");\n      new ParallelIndexSupervisorTask(\n          null,\n          null,\n          null,\n          indexIngestionSpec,\n          null\n      );\n    }\n","date":"2020-08-27 08:08:12","endLine":234,"groupId":"22881","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/19/fdc008eb44bfcbd3e9352b324f596d0f5123c3.src","preCode":"    public void testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet()\n    {\n      final boolean appendToExisting = true;\n      final boolean forceGuaranteedRollup = true;\n      final ParallelIndexIOConfig ioConfig = new ParallelIndexIOConfig(\n          null,\n          new InlineInputSource(\"test\"),\n          new JsonInputFormat(null, null, null),\n          appendToExisting\n      );\n      final ParallelIndexTuningConfig tuningConfig = new ParallelIndexTuningConfig(\n          null,\n          null,\n          10,\n          1000L,\n          null,\n          null,\n          null,\n          new HashedPartitionsSpec(null, 10, null),\n          new IndexSpec(\n              new RoaringBitmapSerdeFactory(true),\n              CompressionStrategy.UNCOMPRESSED,\n              CompressionStrategy.LZF,\n              LongEncodingStrategy.LONGS\n          ),\n          new IndexSpec(),\n          1,\n          forceGuaranteedRollup,\n          true,\n          10000L,\n          OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n          null,\n          10,\n          100,\n          20L,\n          new Duration(3600),\n          128,\n          null,\n          null,\n          false,\n          null,\n          null\n      );\n      final ParallelIndexIngestionSpec indexIngestionSpec = new ParallelIndexIngestionSpec(\n          new DataSchema(\n              \"datasource\",\n              new TimestampSpec(null, null, null),\n              DimensionsSpec.EMPTY,\n              null,\n              null,\n              null\n          ),\n          ioConfig,\n          tuningConfig\n      );\n      expectedException.expect(IllegalArgumentException.class);\n      expectedException.expectMessage(\"Perfect rollup cannot be guaranteed when appending to existing dataSources\");\n      new ParallelIndexSupervisorTask(\n          null,\n          null,\n          null,\n          indexIngestionSpec,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null\n      );\n    }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"f82fd22fa7de175200b7127c34c2eb2900bf7317","commitMessage":"@@@Move tools for indexing to TaskToolbox instead of injecting them in constructor (#10308)\n\n* Move tools for indexing to TaskToolbox instead of injecting them in constructor\n\n* oops.  other changes\n\n* fix test\n\n* unnecessary new file\n\n* fix test\n\n* fix build","date":"2020-08-27 08:08:12","modifiedFileCount":"67","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-10-24 09:34:26","codes":[{"authorDate":"2020-10-24 09:34:26","commitOrder":3,"curCode":"  public void testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"DynamicPartitionsSpec must be used for best-effort rollup\");\n    final boolean forceGuaranteedRollup = false;\n    new ParallelIndexTuningConfig(\n        null,\n        null,\n        null,\n        10,\n        1000L,\n        null,\n        null,\n        null,\n        new HashedPartitionsSpec(null, 10, null),\n        new IndexSpec(\n            new RoaringBitmapSerdeFactory(true),\n            CompressionStrategy.UNCOMPRESSED,\n            CompressionStrategy.LZF,\n            LongEncodingStrategy.LONGS\n        ),\n        new IndexSpec(),\n        1,\n        forceGuaranteedRollup,\n        true,\n        10000L,\n        OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n        null,\n        10,\n        100,\n        20L,\n        new Duration(3600),\n        128,\n        null,\n        null,\n        false,\n        null,\n        null\n    );\n  }\n","date":"2020-10-24 09:34:26","endLine":277,"groupId":"22881","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a8/26ae9cd42d53a5fef735ddcf7a678adc0af771.src","preCode":"  public void testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"DynamicPartitionsSpec must be used for best-effort rollup\");\n    final boolean forceGuaranteedRollup = false;\n    new ParallelIndexTuningConfig(\n        null,\n        null,\n        10,\n        1000L,\n        null,\n        null,\n        null,\n        new HashedPartitionsSpec(null, 10, null),\n        new IndexSpec(\n            new RoaringBitmapSerdeFactory(true),\n            CompressionStrategy.UNCOMPRESSED,\n            CompressionStrategy.LZF,\n            LongEncodingStrategy.LONGS\n        ),\n        new IndexSpec(),\n        1,\n        forceGuaranteedRollup,\n        true,\n        10000L,\n        OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n        null,\n        10,\n        100,\n        20L,\n        new Duration(3600),\n        128,\n        null,\n        null,\n        false,\n        null,\n        null\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"M"},{"authorDate":"2020-10-24 09:34:26","commitOrder":3,"curCode":"    public void testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet()\n    {\n      final boolean appendToExisting = true;\n      final boolean forceGuaranteedRollup = true;\n      final ParallelIndexIOConfig ioConfig = new ParallelIndexIOConfig(\n          null,\n          new InlineInputSource(\"test\"),\n          new JsonInputFormat(null, null, null),\n          appendToExisting\n      );\n      final ParallelIndexTuningConfig tuningConfig = new ParallelIndexTuningConfig(\n          null,\n          null,\n          null,\n          10,\n          1000L,\n          null,\n          null,\n          null,\n          new HashedPartitionsSpec(null, 10, null),\n          new IndexSpec(\n              new RoaringBitmapSerdeFactory(true),\n              CompressionStrategy.UNCOMPRESSED,\n              CompressionStrategy.LZF,\n              LongEncodingStrategy.LONGS\n          ),\n          new IndexSpec(),\n          1,\n          forceGuaranteedRollup,\n          true,\n          10000L,\n          OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n          null,\n          10,\n          100,\n          20L,\n          new Duration(3600),\n          128,\n          null,\n          null,\n          false,\n          null,\n          null\n      );\n      final ParallelIndexIngestionSpec indexIngestionSpec = new ParallelIndexIngestionSpec(\n          new DataSchema(\n              \"datasource\",\n              new TimestampSpec(null, null, null),\n              DimensionsSpec.EMPTY,\n              null,\n              null,\n              null\n          ),\n          ioConfig,\n          tuningConfig\n      );\n      expectedException.expect(IllegalArgumentException.class);\n      expectedException.expectMessage(\"Perfect rollup cannot be guaranteed when appending to existing dataSources\");\n      new ParallelIndexSupervisorTask(\n          null,\n          null,\n          null,\n          indexIngestionSpec,\n          null\n      );\n    }\n","date":"2020-10-24 09:34:26","endLine":250,"groupId":"22881","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/60/882358cb1f050ff4fc828ff79bb3e98b44ee9d.src","preCode":"    public void testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet()\n    {\n      final boolean appendToExisting = true;\n      final boolean forceGuaranteedRollup = true;\n      final ParallelIndexIOConfig ioConfig = new ParallelIndexIOConfig(\n          null,\n          new InlineInputSource(\"test\"),\n          new JsonInputFormat(null, null, null),\n          appendToExisting\n      );\n      final ParallelIndexTuningConfig tuningConfig = new ParallelIndexTuningConfig(\n          null,\n          null,\n          10,\n          1000L,\n          null,\n          null,\n          null,\n          new HashedPartitionsSpec(null, 10, null),\n          new IndexSpec(\n              new RoaringBitmapSerdeFactory(true),\n              CompressionStrategy.UNCOMPRESSED,\n              CompressionStrategy.LZF,\n              LongEncodingStrategy.LONGS\n          ),\n          new IndexSpec(),\n          1,\n          forceGuaranteedRollup,\n          true,\n          10000L,\n          OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n          null,\n          10,\n          100,\n          20L,\n          new Duration(3600),\n          128,\n          null,\n          null,\n          false,\n          null,\n          null\n      );\n      final ParallelIndexIngestionSpec indexIngestionSpec = new ParallelIndexIngestionSpec(\n          new DataSchema(\n              \"datasource\",\n              new TimestampSpec(null, null, null),\n              DimensionsSpec.EMPTY,\n              null,\n              null,\n              null\n          ),\n          ioConfig,\n          tuningConfig\n      );\n      expectedException.expect(IllegalArgumentException.class);\n      expectedException.expectMessage(\"Perfect rollup cannot be guaranteed when appending to existing dataSources\");\n      new ParallelIndexSupervisorTask(\n          null,\n          null,\n          null,\n          indexIngestionSpec,\n          null\n      );\n    }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"f3a2903218573f5d336b082b1c9b8a60a19e8c54","commitMessage":"@@@Configurable Index Type (#10335)\n\n* Introduce a Configurable Index Type\n\n* Change to @UnstableApi\n\n* Add AppendableIndexSpecTest\n\n* Update doc\n\n* Add spelling exception\n\n* Add tests coverage\n\n* Revert some of the changes to reduce diff\n\n* Minor fixes\n\n* Update getMaxBytesInMemoryOrDefault() comment\n\n* Fix typo.  remove redundant interface\n\n* Remove off-heap spec (postponed to a later PR)\n\n* Add javadocs to AppendableIndexSpec\n\n* Describe testCreateTask()\n\n* Add tests for AppendableIndexSpec within TuningConfig\n\n* Modify hashCode() to conform with equals()\n\n* Add comment where building incremental-index\n\n* Add \"EqualsVerifier\" tests\n\n* Revert some of the API back to AppenderatorConfig\n\n* Don't use multi-line comments\n\n* Remove knob documentation (deferred)","date":"2020-10-24 09:34:26","modifiedFileCount":"72","status":"M","submitter":"Liran Funaro"},{"authorTime":"2021-01-06 14:19:09","codes":[{"authorDate":"2021-01-06 14:19:09","commitOrder":4,"curCode":"  public void testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"DynamicPartitionsSpec must be used for best-effort rollup\");\n    final boolean forceGuaranteedRollup = false;\n    new ParallelIndexTuningConfig(\n        null,\n        null,\n        null,\n        10,\n        1000L,\n        null,\n        null,\n        null,\n        new HashedPartitionsSpec(null, 10, null),\n        new IndexSpec(\n            new RoaringBitmapSerdeFactory(true),\n            CompressionStrategy.UNCOMPRESSED,\n            CompressionStrategy.LZF,\n            LongEncodingStrategy.LONGS\n        ),\n        new IndexSpec(),\n        1,\n        forceGuaranteedRollup,\n        true,\n        10000L,\n        OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n        null,\n        10,\n        100,\n        20L,\n        new Duration(3600),\n        128,\n        null,\n        null,\n        false,\n        null,\n        null,\n        null\n    );\n  }\n","date":"2021-01-06 14:19:09","endLine":282,"groupId":"22881","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cf/862ff6a9e78ce0a22fba7e1d7861ce67113be3.src","preCode":"  public void testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"DynamicPartitionsSpec must be used for best-effort rollup\");\n    final boolean forceGuaranteedRollup = false;\n    new ParallelIndexTuningConfig(\n        null,\n        null,\n        null,\n        10,\n        1000L,\n        null,\n        null,\n        null,\n        new HashedPartitionsSpec(null, 10, null),\n        new IndexSpec(\n            new RoaringBitmapSerdeFactory(true),\n            CompressionStrategy.UNCOMPRESSED,\n            CompressionStrategy.LZF,\n            LongEncodingStrategy.LONGS\n        ),\n        new IndexSpec(),\n        1,\n        forceGuaranteedRollup,\n        true,\n        10000L,\n        OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n        null,\n        10,\n        100,\n        20L,\n        new Duration(3600),\n        128,\n        null,\n        null,\n        false,\n        null,\n        null\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2021-01-06 14:19:09","commitOrder":4,"curCode":"    public void testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet()\n    {\n      final boolean appendToExisting = true;\n      final boolean forceGuaranteedRollup = true;\n      final ParallelIndexIOConfig ioConfig = new ParallelIndexIOConfig(\n          null,\n          new InlineInputSource(\"test\"),\n          new JsonInputFormat(null, null, null),\n          appendToExisting\n      );\n      final ParallelIndexTuningConfig tuningConfig = new ParallelIndexTuningConfig(\n          null,\n          null,\n          null,\n          10,\n          1000L,\n          null,\n          null,\n          null,\n          new HashedPartitionsSpec(null, 10, null),\n          new IndexSpec(\n              new RoaringBitmapSerdeFactory(true),\n              CompressionStrategy.UNCOMPRESSED,\n              CompressionStrategy.LZF,\n              LongEncodingStrategy.LONGS\n          ),\n          new IndexSpec(),\n          1,\n          forceGuaranteedRollup,\n          true,\n          10000L,\n          OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n          null,\n          10,\n          100,\n          20L,\n          new Duration(3600),\n          128,\n          null,\n          null,\n          false,\n          null,\n          null,\n          null\n      );\n      final ParallelIndexIngestionSpec indexIngestionSpec = new ParallelIndexIngestionSpec(\n          new DataSchema(\n              \"datasource\",\n              new TimestampSpec(null, null, null),\n              DimensionsSpec.EMPTY,\n              null,\n              null,\n              null\n          ),\n          ioConfig,\n          tuningConfig\n      );\n      expectedException.expect(IllegalArgumentException.class);\n      expectedException.expectMessage(\"Perfect rollup cannot be guaranteed when appending to existing dataSources\");\n      new ParallelIndexSupervisorTask(\n          null,\n          null,\n          null,\n          indexIngestionSpec,\n          null\n      );\n    }\n","date":"2021-01-06 14:19:09","endLine":251,"groupId":"22881","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/46/663c6fba12aaadaaa16bd4a2b937cdc559b08d.src","preCode":"    public void testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet()\n    {\n      final boolean appendToExisting = true;\n      final boolean forceGuaranteedRollup = true;\n      final ParallelIndexIOConfig ioConfig = new ParallelIndexIOConfig(\n          null,\n          new InlineInputSource(\"test\"),\n          new JsonInputFormat(null, null, null),\n          appendToExisting\n      );\n      final ParallelIndexTuningConfig tuningConfig = new ParallelIndexTuningConfig(\n          null,\n          null,\n          null,\n          10,\n          1000L,\n          null,\n          null,\n          null,\n          new HashedPartitionsSpec(null, 10, null),\n          new IndexSpec(\n              new RoaringBitmapSerdeFactory(true),\n              CompressionStrategy.UNCOMPRESSED,\n              CompressionStrategy.LZF,\n              LongEncodingStrategy.LONGS\n          ),\n          new IndexSpec(),\n          1,\n          forceGuaranteedRollup,\n          true,\n          10000L,\n          OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n          null,\n          10,\n          100,\n          20L,\n          new Duration(3600),\n          128,\n          null,\n          null,\n          false,\n          null,\n          null\n      );\n      final ParallelIndexIngestionSpec indexIngestionSpec = new ParallelIndexIngestionSpec(\n          new DataSchema(\n              \"datasource\",\n              new TimestampSpec(null, null, null),\n              DimensionsSpec.EMPTY,\n              null,\n              null,\n              null\n          ),\n          ioConfig,\n          tuningConfig\n      );\n      expectedException.expect(IllegalArgumentException.class);\n      expectedException.expectMessage(\"Perfect rollup cannot be guaranteed when appending to existing dataSources\");\n      new ParallelIndexSupervisorTask(\n          null,\n          null,\n          null,\n          indexIngestionSpec,\n          null\n      );\n    }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"68bb038b314c26bcc57aa96e1078c22d2f24fd35","commitMessage":"@@@Multiphase segment merge for IndexMergerV9 (#10689)\n\n* Multiphase merge for IndexMergerV9\n\n* JSON fix\n\n* Cleanup temp files\n\n* Docs\n\n* Address logging and add IT\n\n* Fix spelling and test unloader datasource name","date":"2021-01-06 14:19:09","modifiedFileCount":"40","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2021-01-27 16:34:56","codes":[{"authorDate":"2021-01-27 16:34:56","commitOrder":5,"curCode":"  public void testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"DynamicPartitionsSpec must be used for best-effort rollup\");\n    final boolean forceGuaranteedRollup = false;\n    new ParallelIndexTuningConfig(\n        null,\n        null,\n        null,\n        10,\n        1000L,\n        null,\n        null,\n        null,\n        null,\n        new HashedPartitionsSpec(null, 10, null),\n        new IndexSpec(\n            new RoaringBitmapSerdeFactory(true),\n            CompressionStrategy.UNCOMPRESSED,\n            CompressionStrategy.LZF,\n            LongEncodingStrategy.LONGS\n        ),\n        new IndexSpec(),\n        1,\n        forceGuaranteedRollup,\n        true,\n        10000L,\n        OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n        null,\n        10,\n        100,\n        20L,\n        new Duration(3600),\n        128,\n        null,\n        null,\n        false,\n        null,\n        null,\n        null\n    );\n  }\n","date":"2021-01-27 16:34:56","endLine":287,"groupId":"22881","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/84/34e2f6981853dcff83ca53bbf3828c6801ddc1.src","preCode":"  public void testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"DynamicPartitionsSpec must be used for best-effort rollup\");\n    final boolean forceGuaranteedRollup = false;\n    new ParallelIndexTuningConfig(\n        null,\n        null,\n        null,\n        10,\n        1000L,\n        null,\n        null,\n        null,\n        new HashedPartitionsSpec(null, 10, null),\n        new IndexSpec(\n            new RoaringBitmapSerdeFactory(true),\n            CompressionStrategy.UNCOMPRESSED,\n            CompressionStrategy.LZF,\n            LongEncodingStrategy.LONGS\n        ),\n        new IndexSpec(),\n        1,\n        forceGuaranteedRollup,\n        true,\n        10000L,\n        OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n        null,\n        10,\n        100,\n        20L,\n        new Duration(3600),\n        128,\n        null,\n        null,\n        false,\n        null,\n        null,\n        null\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"},{"authorDate":"2021-01-27 16:34:56","commitOrder":5,"curCode":"    public void testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet()\n    {\n      final boolean appendToExisting = true;\n      final boolean forceGuaranteedRollup = true;\n      final ParallelIndexIOConfig ioConfig = new ParallelIndexIOConfig(\n          null,\n          new InlineInputSource(\"test\"),\n          new JsonInputFormat(null, null, null),\n          appendToExisting\n      );\n      final ParallelIndexTuningConfig tuningConfig = new ParallelIndexTuningConfig(\n          null,\n          null,\n          null,\n          10,\n          1000L,\n          null,\n          null,\n          null,\n          null,\n          new HashedPartitionsSpec(null, 10, null),\n          new IndexSpec(\n              new RoaringBitmapSerdeFactory(true),\n              CompressionStrategy.UNCOMPRESSED,\n              CompressionStrategy.LZF,\n              LongEncodingStrategy.LONGS\n          ),\n          new IndexSpec(),\n          1,\n          forceGuaranteedRollup,\n          true,\n          10000L,\n          OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n          null,\n          10,\n          100,\n          20L,\n          new Duration(3600),\n          128,\n          null,\n          null,\n          false,\n          null,\n          null,\n          null\n      );\n      final ParallelIndexIngestionSpec indexIngestionSpec = new ParallelIndexIngestionSpec(\n          new DataSchema(\n              \"datasource\",\n              new TimestampSpec(null, null, null),\n              DimensionsSpec.EMPTY,\n              null,\n              null,\n              null\n          ),\n          ioConfig,\n          tuningConfig\n      );\n      expectedException.expect(IllegalArgumentException.class);\n      expectedException.expectMessage(\"Perfect rollup cannot be guaranteed when appending to existing dataSources\");\n      new ParallelIndexSupervisorTask(\n          null,\n          null,\n          null,\n          indexIngestionSpec,\n          null\n      );\n    }\n","date":"2021-01-27 16:34:56","endLine":252,"groupId":"22881","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b4/ee01394126cccf4372632aef53e900adbb426b.src","preCode":"    public void testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet()\n    {\n      final boolean appendToExisting = true;\n      final boolean forceGuaranteedRollup = true;\n      final ParallelIndexIOConfig ioConfig = new ParallelIndexIOConfig(\n          null,\n          new InlineInputSource(\"test\"),\n          new JsonInputFormat(null, null, null),\n          appendToExisting\n      );\n      final ParallelIndexTuningConfig tuningConfig = new ParallelIndexTuningConfig(\n          null,\n          null,\n          null,\n          10,\n          1000L,\n          null,\n          null,\n          null,\n          new HashedPartitionsSpec(null, 10, null),\n          new IndexSpec(\n              new RoaringBitmapSerdeFactory(true),\n              CompressionStrategy.UNCOMPRESSED,\n              CompressionStrategy.LZF,\n              LongEncodingStrategy.LONGS\n          ),\n          new IndexSpec(),\n          1,\n          forceGuaranteedRollup,\n          true,\n          10000L,\n          OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n          null,\n          10,\n          100,\n          20L,\n          new Duration(3600),\n          128,\n          null,\n          null,\n          false,\n          null,\n          null,\n          null\n      );\n      final ParallelIndexIngestionSpec indexIngestionSpec = new ParallelIndexIngestionSpec(\n          new DataSchema(\n              \"datasource\",\n              new TimestampSpec(null, null, null),\n              DimensionsSpec.EMPTY,\n              null,\n              null,\n              null\n          ),\n          ioConfig,\n          tuningConfig\n      );\n      expectedException.expect(IllegalArgumentException.class);\n      expectedException.expectMessage(\"Perfect rollup cannot be guaranteed when appending to existing dataSources\");\n      new ParallelIndexSupervisorTask(\n          null,\n          null,\n          null,\n          indexIngestionSpec,\n          null\n      );\n    }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"a46d561bd7e2b045a08a2e475847d4a7505a1c93","commitMessage":"@@@Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead (#10740)\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* fix checkstyle\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* fix test\n\n* fix test\n\n* add log\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* address comments\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add config to skip overhead memory calculation\n\n* add test for the skipBytesInMemoryOverheadCheck config\n\n* add docs\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix spelling\n\n* address comments\n\n* fix travis\n\n* address comments","date":"2021-01-27 16:34:56","modifiedFileCount":"50","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-04-02 03:29:36","codes":[{"authorDate":"2021-01-27 16:34:56","commitOrder":6,"curCode":"  public void testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"DynamicPartitionsSpec must be used for best-effort rollup\");\n    final boolean forceGuaranteedRollup = false;\n    new ParallelIndexTuningConfig(\n        null,\n        null,\n        null,\n        10,\n        1000L,\n        null,\n        null,\n        null,\n        null,\n        new HashedPartitionsSpec(null, 10, null),\n        new IndexSpec(\n            new RoaringBitmapSerdeFactory(true),\n            CompressionStrategy.UNCOMPRESSED,\n            CompressionStrategy.LZF,\n            LongEncodingStrategy.LONGS\n        ),\n        new IndexSpec(),\n        1,\n        forceGuaranteedRollup,\n        true,\n        10000L,\n        OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n        null,\n        10,\n        100,\n        20L,\n        new Duration(3600),\n        128,\n        null,\n        null,\n        false,\n        null,\n        null,\n        null\n    );\n  }\n","date":"2021-01-27 16:34:56","endLine":287,"groupId":"22881","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/84/34e2f6981853dcff83ca53bbf3828c6801ddc1.src","preCode":"  public void testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"DynamicPartitionsSpec must be used for best-effort rollup\");\n    final boolean forceGuaranteedRollup = false;\n    new ParallelIndexTuningConfig(\n        null,\n        null,\n        null,\n        10,\n        1000L,\n        null,\n        null,\n        null,\n        null,\n        new HashedPartitionsSpec(null, 10, null),\n        new IndexSpec(\n            new RoaringBitmapSerdeFactory(true),\n            CompressionStrategy.UNCOMPRESSED,\n            CompressionStrategy.LZF,\n            LongEncodingStrategy.LONGS\n        ),\n        new IndexSpec(),\n        1,\n        forceGuaranteedRollup,\n        true,\n        10000L,\n        OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n        null,\n        10,\n        100,\n        20L,\n        new Duration(3600),\n        128,\n        null,\n        null,\n        false,\n        null,\n        null,\n        null\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"N"},{"authorDate":"2021-04-02 03:29:36","commitOrder":6,"curCode":"    public void testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet()\n    {\n      final boolean appendToExisting = true;\n      final boolean forceGuaranteedRollup = true;\n      final ParallelIndexIOConfig ioConfig = new ParallelIndexIOConfig(\n          null,\n          new InlineInputSource(\"test\"),\n          new JsonInputFormat(null, null, null),\n          appendToExisting,\n          null\n      );\n      final ParallelIndexTuningConfig tuningConfig = new ParallelIndexTuningConfig(\n          null,\n          null,\n          null,\n          10,\n          1000L,\n          null,\n          null,\n          null,\n          null,\n          new HashedPartitionsSpec(null, 10, null),\n          new IndexSpec(\n              new RoaringBitmapSerdeFactory(true),\n              CompressionStrategy.UNCOMPRESSED,\n              CompressionStrategy.LZF,\n              LongEncodingStrategy.LONGS\n          ),\n          new IndexSpec(),\n          1,\n          forceGuaranteedRollup,\n          true,\n          10000L,\n          OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n          null,\n          10,\n          100,\n          20L,\n          new Duration(3600),\n          128,\n          null,\n          null,\n          false,\n          null,\n          null,\n          null\n      );\n      final ParallelIndexIngestionSpec indexIngestionSpec = new ParallelIndexIngestionSpec(\n          new DataSchema(\n              \"datasource\",\n              new TimestampSpec(null, null, null),\n              DimensionsSpec.EMPTY,\n              null,\n              null,\n              null\n          ),\n          ioConfig,\n          tuningConfig\n      );\n      expectedException.expect(IllegalArgumentException.class);\n      expectedException.expectMessage(\"Perfect rollup cannot be guaranteed when appending to existing dataSources\");\n      new ParallelIndexSupervisorTask(\n          null,\n          null,\n          null,\n          indexIngestionSpec,\n          null\n      );\n    }\n","date":"2021-04-02 03:29:36","endLine":253,"groupId":"22881","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b2/9b6cf8e06d3cc4aacea12cd3ba31fe50c9f5d6.src","preCode":"    public void testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet()\n    {\n      final boolean appendToExisting = true;\n      final boolean forceGuaranteedRollup = true;\n      final ParallelIndexIOConfig ioConfig = new ParallelIndexIOConfig(\n          null,\n          new InlineInputSource(\"test\"),\n          new JsonInputFormat(null, null, null),\n          appendToExisting\n      );\n      final ParallelIndexTuningConfig tuningConfig = new ParallelIndexTuningConfig(\n          null,\n          null,\n          null,\n          10,\n          1000L,\n          null,\n          null,\n          null,\n          null,\n          new HashedPartitionsSpec(null, 10, null),\n          new IndexSpec(\n              new RoaringBitmapSerdeFactory(true),\n              CompressionStrategy.UNCOMPRESSED,\n              CompressionStrategy.LZF,\n              LongEncodingStrategy.LONGS\n          ),\n          new IndexSpec(),\n          1,\n          forceGuaranteedRollup,\n          true,\n          10000L,\n          OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n          null,\n          10,\n          100,\n          20L,\n          new Duration(3600),\n          128,\n          null,\n          null,\n          false,\n          null,\n          null,\n          null\n      );\n      final ParallelIndexIngestionSpec indexIngestionSpec = new ParallelIndexIngestionSpec(\n          new DataSchema(\n              \"datasource\",\n              new TimestampSpec(null, null, null),\n              DimensionsSpec.EMPTY,\n              null,\n              null,\n              null\n          ),\n          ioConfig,\n          tuningConfig\n      );\n      expectedException.expect(IllegalArgumentException.class);\n      expectedException.expectMessage(\"Perfect rollup cannot be guaranteed when appending to existing dataSources\");\n      new ParallelIndexSupervisorTask(\n          null,\n          null,\n          null,\n          indexIngestionSpec,\n          null\n      );\n    }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"d7f529336463dad273a742808b49d524bdc4ae11","commitMessage":"@@@Add an option for ingestion task to drop (mark unused) all existing segments that are contained by interval in the ingestionSpec (#11025)\n\n* Auto-Compaction can run indefinitely when segmentGranularity is changed from coarser to finer.\n\n* Add option to drop segments after ingestion\n\n* fix checkstyle\n\n* add tests\n\n* add tests\n\n* add tests\n\n* fix test\n\n* add tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add docs\n\n* fix docs\n\n* address comments\n\n* address comments\n\n* fix spelling","date":"2021-04-02 03:29:36","modifiedFileCount":"44","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-04-09 12:03:00","codes":[{"authorDate":"2021-04-09 12:03:00","commitOrder":7,"curCode":"  public void testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"DynamicPartitionsSpec must be used for best-effort rollup\");\n    final boolean forceGuaranteedRollup = false;\n    new ParallelIndexTuningConfig(\n        null,\n        null,\n        null,\n        10,\n        1000L,\n        null,\n        null,\n        null,\n        null,\n        new HashedPartitionsSpec(null, 10, null),\n        new IndexSpec(\n            new RoaringBitmapSerdeFactory(true),\n            CompressionStrategy.UNCOMPRESSED,\n            CompressionStrategy.LZF,\n            LongEncodingStrategy.LONGS\n        ),\n        new IndexSpec(),\n        1,\n        forceGuaranteedRollup,\n        true,\n        10000L,\n        OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n        null,\n        10,\n        100,\n        20L,\n        new Duration(3600),\n        128,\n        null,\n        null,\n        false,\n        null,\n        null,\n        null,\n        null\n    );\n  }\n","date":"2021-04-09 12:03:00","endLine":292,"groupId":"104432","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/da/e67edaf029f32d6853ff87f5a7d1adee23491c.src","preCode":"  public void testConstructorWithHashedPartitionsSpecAndNonForceGuaranteedRollupFailToCreate()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"DynamicPartitionsSpec must be used for best-effort rollup\");\n    final boolean forceGuaranteedRollup = false;\n    new ParallelIndexTuningConfig(\n        null,\n        null,\n        null,\n        10,\n        1000L,\n        null,\n        null,\n        null,\n        null,\n        new HashedPartitionsSpec(null, 10, null),\n        new IndexSpec(\n            new RoaringBitmapSerdeFactory(true),\n            CompressionStrategy.UNCOMPRESSED,\n            CompressionStrategy.LZF,\n            LongEncodingStrategy.LONGS\n        ),\n        new IndexSpec(),\n        1,\n        forceGuaranteedRollup,\n        true,\n        10000L,\n        OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n        null,\n        10,\n        100,\n        20L,\n        new Duration(3600),\n        128,\n        null,\n        null,\n        false,\n        null,\n        null,\n        null\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"},{"authorDate":"2021-04-09 12:03:00","commitOrder":7,"curCode":"    public void testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet()\n    {\n      final boolean appendToExisting = true;\n      final boolean forceGuaranteedRollup = true;\n      final ParallelIndexIOConfig ioConfig = new ParallelIndexIOConfig(\n          null,\n          new InlineInputSource(\"test\"),\n          new JsonInputFormat(null, null, null),\n          appendToExisting,\n          null\n      );\n      final ParallelIndexTuningConfig tuningConfig = new ParallelIndexTuningConfig(\n          null,\n          null,\n          null,\n          10,\n          1000L,\n          null,\n          null,\n          null,\n          null,\n          new HashedPartitionsSpec(null, 10, null),\n          new IndexSpec(\n              new RoaringBitmapSerdeFactory(true),\n              CompressionStrategy.UNCOMPRESSED,\n              CompressionStrategy.LZF,\n              LongEncodingStrategy.LONGS\n          ),\n          new IndexSpec(),\n          1,\n          forceGuaranteedRollup,\n          true,\n          10000L,\n          OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n          null,\n          10,\n          100,\n          20L,\n          new Duration(3600),\n          128,\n          null,\n          null,\n          false,\n          null,\n          null,\n          null,\n          null\n      );\n      final ParallelIndexIngestionSpec indexIngestionSpec = new ParallelIndexIngestionSpec(\n          new DataSchema(\n              \"datasource\",\n              new TimestampSpec(null, null, null),\n              DimensionsSpec.EMPTY,\n              null,\n              null,\n              null\n          ),\n          ioConfig,\n          tuningConfig\n      );\n      expectedException.expect(IllegalArgumentException.class);\n      expectedException.expectMessage(\"Perfect rollup cannot be guaranteed when appending to existing dataSources\");\n      new ParallelIndexSupervisorTask(\n          null,\n          null,\n          null,\n          indexIngestionSpec,\n          null\n      );\n    }\n","date":"2021-04-09 12:03:00","endLine":254,"groupId":"104432","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a2/8fb1efe1d0b8d933de3c8337500e7b4228949a.src","preCode":"    public void testFailToConstructWhenBothAppendToExistingAndForceGuaranteedRollupAreSet()\n    {\n      final boolean appendToExisting = true;\n      final boolean forceGuaranteedRollup = true;\n      final ParallelIndexIOConfig ioConfig = new ParallelIndexIOConfig(\n          null,\n          new InlineInputSource(\"test\"),\n          new JsonInputFormat(null, null, null),\n          appendToExisting,\n          null\n      );\n      final ParallelIndexTuningConfig tuningConfig = new ParallelIndexTuningConfig(\n          null,\n          null,\n          null,\n          10,\n          1000L,\n          null,\n          null,\n          null,\n          null,\n          new HashedPartitionsSpec(null, 10, null),\n          new IndexSpec(\n              new RoaringBitmapSerdeFactory(true),\n              CompressionStrategy.UNCOMPRESSED,\n              CompressionStrategy.LZF,\n              LongEncodingStrategy.LONGS\n          ),\n          new IndexSpec(),\n          1,\n          forceGuaranteedRollup,\n          true,\n          10000L,\n          OffHeapMemorySegmentWriteOutMediumFactory.instance(),\n          null,\n          10,\n          100,\n          20L,\n          new Duration(3600),\n          128,\n          null,\n          null,\n          false,\n          null,\n          null,\n          null\n      );\n      final ParallelIndexIngestionSpec indexIngestionSpec = new ParallelIndexIngestionSpec(\n          new DataSchema(\n              \"datasource\",\n              new TimestampSpec(null, null, null),\n              DimensionsSpec.EMPTY,\n              null,\n              null,\n              null\n          ),\n          ioConfig,\n          tuningConfig\n      );\n      expectedException.expect(IllegalArgumentException.class);\n      expectedException.expectMessage(\"Perfect rollup cannot be guaranteed when appending to existing dataSources\");\n      new ParallelIndexSupervisorTask(\n          null,\n          null,\n          null,\n          indexIngestionSpec,\n          null\n      );\n    }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"8264203cee688607091232897749e959e7706010","commitMessage":"@@@Allow client to configure batch ingestion task to wait to complete until segments are confirmed to be available by other (#10676)\n\n* Add ability to wait for segment availability for batch jobs\n\n* IT updates\n\n* fix queries in legacy hadoop IT\n\n* Fix broken indexing integration tests\n\n* address an lgtm flag\n\n* spell checker still flagging for hadoop doc. adding under that file header too\n\n* fix compaction IT\n\n* Updates to wait for availability method\n\n* improve unit testing for patch\n\n* fix bad indentation\n\n* refactor waitForSegmentAvailability\n\n* Fixes based off of review comments\n\n* cleanup to get compile after merging with master\n\n* fix failing test after previous logic update\n\n* add back code that must have gotten deleted during conflict resolution\n\n* update some logging code\n\n* fixes to get compilation working after merge with master\n\n* reset interrupt flag in catch block after code review pointed it out\n\n* small changes following self-review\n\n* fixup some issues brought on by merge with master\n\n* small changes after review\n\n* cleanup a little bit after merge with master\n\n* Fix potential resource leak in AbstractBatchIndexTask\n\n* syntax fix\n\n* Add a Compcation TuningConfig type\n\n* add docs stipulating the lack of support by Compaction tasks for the new config\n\n* Fixup compilation errors after merge with master\n\n* Remove erreneous newline","date":"2021-04-09 12:03:00","modifiedFileCount":"106","status":"M","submitter":"Lucas Capistrant"}]
