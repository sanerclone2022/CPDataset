[{"authorTime":"2020-09-27 14:30:14","codes":[{"authorDate":"2019-06-20 04:57:37","commitOrder":2,"curCode":"    protected final ExprEval eval(ExprEval x, ExprEval y)\n    {\n      if (x.type() == ExprType.STRING || y.type() == ExprType.STRING) {\n        return ExprEval.of(null);\n      }\n      if (x.type() == ExprType.LONG && y.type() == ExprType.LONG) {\n        return eval(x.asLong(), y.asLong());\n      } else {\n        return eval(x.asDouble(), y.asDouble());\n      }\n    }\n","date":"2019-06-20 04:57:37","endLine":179,"groupId":"4269","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"eval","params":"(ExprEvalx@ExprEvaly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/65/643e226d77166dc243436ca671c0ed82b04958.src","preCode":"    protected final ExprEval eval(ExprEval x, ExprEval y)\n    {\n      if (x.type() == ExprType.STRING || y.type() == ExprType.STRING) {\n        return ExprEval.of(null);\n      }\n      if (x.type() == ExprType.LONG && y.type() == ExprType.LONG) {\n        return eval(x.asLong(), y.asLong());\n      } else {\n        return eval(x.asDouble(), y.asDouble());\n      }\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Function.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"NB"},{"authorDate":"2020-09-27 14:30:14","commitOrder":2,"curCode":"    protected ExprEval eval(ExprEval x, ExprEval y)\n    {\n      if (x.type() == ExprType.STRING || y.type() == ExprType.STRING) {\n        return ExprEval.of(null);\n      }\n      if (NullHandling.sqlCompatible() && x.isNumericNull() || y.isNumericNull()) {\n        return ExprEval.of(null);\n      }\n      return ExprEval.of(Math.scalb(x.asDouble(), y.asInt()));\n    }\n","date":"2020-09-27 14:30:14","endLine":1534,"groupId":"9249","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"eval","params":"(ExprEvalx@ExprEvaly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d8/12fa830b18f1a4c6e71cce83720778be4502d4.src","preCode":"    protected ExprEval eval(ExprEval x, ExprEval y)\n    {\n      if (x.type() == ExprType.STRING || y.type() == ExprType.STRING) {\n        return ExprEval.of(null);\n      }\n      if (NullHandling.sqlCompatible() && x.isNumericNull() || y.isNumericNull()) {\n        return ExprEval.of(null);\n      }\n      return ExprEval.of(Math.scalb(x.asDouble(), y.asInt()));\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Function.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1525,"status":"B"}],"commitId":"3d700a5e31eaea131f1152e90b6c78a572edd7fc","commitMessage":"@@@vectorize remaining math expressions (#10429)\n\n* vectorize remaining math expressions\n\n* fixes\n\n* remove cannotVectorize() where no longer true\n\n* disable vectorized groupby for numeric columns with nulls\n\n* fixes","date":"2020-09-27 14:30:14","modifiedFileCount":"11","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-10-27 10:55:24","codes":[{"authorDate":"2020-10-27 10:55:24","commitOrder":3,"curCode":"    protected final ExprEval eval(ExprEval x, ExprEval y)\n    {\n      \r\n      if (NullHandling.sqlCompatible() && (x.value() == null || y.value() == null)) {\n        return ExprEval.of(null);\n      }\n\n      ExprType type = ExprTypeConversion.autoDetect(x, y);\n      switch (type) {\n        case STRING:\n          return ExprEval.of(null);\n        case LONG:\n          return eval(x.asLong(), y.asLong());\n        case DOUBLE:\n        default:\n          return eval(x.asDouble(), y.asDouble());\n      }\n    }\n","date":"2020-10-27 10:55:24","endLine":273,"groupId":"115473","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"eval","params":"(ExprEvalx@ExprEvaly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2c/4ff6853749503f7e61b6b39c422d454eaae6d0.src","preCode":"    protected final ExprEval eval(ExprEval x, ExprEval y)\n    {\n      if (x.type() == ExprType.STRING || y.type() == ExprType.STRING) {\n        return ExprEval.of(null);\n      }\n      if (x.type() == ExprType.LONG && y.type() == ExprType.LONG) {\n        return eval(x.asLong(), y.asLong());\n      } else {\n        return eval(x.asDouble(), y.asDouble());\n      }\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Function.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"},{"authorDate":"2020-10-27 10:55:24","commitOrder":3,"curCode":"    protected ExprEval eval(ExprEval x, ExprEval y)\n    {\n      if (NullHandling.sqlCompatible() && (x.value() == null || y.value() == null)) {\n        return ExprEval.of(null);\n      }\n\n      ExprType type = ExprTypeConversion.autoDetect(x, y);\n      switch (type) {\n        case STRING:\n          return ExprEval.of(null);\n        default:\n          return ExprEval.of(Math.scalb(x.asDouble(), y.asInt()));\n      }\n    }\n","date":"2020-10-27 10:55:24","endLine":1549,"groupId":"115473","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"eval","params":"(ExprEvalx@ExprEvaly)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2c/4ff6853749503f7e61b6b39c422d454eaae6d0.src","preCode":"    protected ExprEval eval(ExprEval x, ExprEval y)\n    {\n      if (x.type() == ExprType.STRING || y.type() == ExprType.STRING) {\n        return ExprEval.of(null);\n      }\n      if (NullHandling.sqlCompatible() && x.isNumericNull() || y.isNumericNull()) {\n        return ExprEval.of(null);\n      }\n      return ExprEval.of(Math.scalb(x.asDouble(), y.asInt()));\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Function.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1536,"status":"M"}],"commitId":"d0821de8540686eb64a9b3e22fe4a637b58920ef","commitMessage":"@@@support for vectorizing expressions with non-existent inputs.  more consistent type handling for non-vectorized expressions (#10499)\n\n* support for vectorizing expressions with non-existent inputs.  more consistent type handling for non-vectorized expressions\n\n* inspector\n\n* changes\n\n* more test\n\n* clean","date":"2020-10-27 10:55:24","modifiedFileCount":"56","status":"M","submitter":"Clint Wylie"}]
