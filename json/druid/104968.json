[{"authorTime":"2018-10-15 11:37:37","codes":[{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testSanity() throws Exception\n  {\n    Lifecycle lifecycle = new Lifecycle();\n\n    List<Integer> startOrder = Lists.newArrayList();\n    List<Integer> stopOrder = Lists.newArrayList();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(1, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(2, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(3, startOrder, stopOrder), Lifecycle.Stage.LAST);\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(6, startOrder, stopOrder), Lifecycle.Stage.LAST);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n\n    final List<Integer> expectedOrder = Arrays.asList(0, 1, 2, 4, 5, 7, 3, 6);\n\n    lifecycle.start();\n\n    Assert.assertEquals(8, startOrder.size());\n    Assert.assertEquals(0, stopOrder.size());\n    Assert.assertEquals(expectedOrder, startOrder);\n\n    lifecycle.stop();\n\n    Assert.assertEquals(8, startOrder.size());\n    Assert.assertEquals(8, stopOrder.size());\n    Assert.assertEquals(Lists.reverse(expectedOrder), stopOrder);\n  }\n","date":"2018-10-15 11:37:37","endLine":194,"groupId":"11939","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSanity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/45/4909a44db70d49fffd3c21163ce4368d9cf23a.src","preCode":"  public void testSanity() throws Exception\n  {\n    Lifecycle lifecycle = new Lifecycle();\n\n    List<Integer> startOrder = Lists.newArrayList();\n    List<Integer> stopOrder = Lists.newArrayList();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(1, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(2, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(3, startOrder, stopOrder), Lifecycle.Stage.LAST);\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(6, startOrder, stopOrder), Lifecycle.Stage.LAST);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n\n    final List<Integer> expectedOrder = Arrays.asList(0, 1, 2, 4, 5, 7, 3, 6);\n\n    lifecycle.start();\n\n    Assert.assertEquals(8, startOrder.size());\n    Assert.assertEquals(0, stopOrder.size());\n    Assert.assertEquals(expectedOrder, startOrder);\n\n    lifecycle.stop();\n\n    Assert.assertEquals(8, startOrder.size());\n    Assert.assertEquals(8, stopOrder.size());\n    Assert.assertEquals(Lists.reverse(expectedOrder), stopOrder);\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/lifecycle/LifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"B"},{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testAddToLifecycleInStartMethod() throws Exception\n  {\n    final Lifecycle lifecycle = new Lifecycle();\n\n    final List<Integer> startOrder = Lists.newArrayList();\n    final List<Integer> stopOrder = Lists.newArrayList();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addHandler(\n        new Lifecycle.Handler()\n        {\n          @Override\n          public void start() throws Exception\n          {\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(1, startOrder, stopOrder), Lifecycle.Stage.NORMAL\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(2, startOrder, stopOrder), Lifecycle.Stage.NORMAL\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(3, startOrder, stopOrder), Lifecycle.Stage.LAST\n            );\n            lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n            lifecycle.addMaybeStartStartCloseInstance(\n                new ObjectToBeLifecycled(6, startOrder, stopOrder), Lifecycle.Stage.LAST\n            );\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n          }\n\n          @Override\n          public void stop()\n          {\n\n          }\n        }\n    );\n\n    final List<Integer> expectedOrder = Arrays.asList(0, 1, 2, 4, 5, 7, 3, 6);\n\n    lifecycle.start();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(0, stopOrder.size());\n\n    lifecycle.stop();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(Lists.reverse(expectedOrder), stopOrder);\n  }\n","date":"2018-10-15 11:37:37","endLine":247,"groupId":"11940","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddToLifecycleInStartMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/45/4909a44db70d49fffd3c21163ce4368d9cf23a.src","preCode":"  public void testAddToLifecycleInStartMethod() throws Exception\n  {\n    final Lifecycle lifecycle = new Lifecycle();\n\n    final List<Integer> startOrder = Lists.newArrayList();\n    final List<Integer> stopOrder = Lists.newArrayList();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addHandler(\n        new Lifecycle.Handler()\n        {\n          @Override\n          public void start() throws Exception\n          {\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(1, startOrder, stopOrder), Lifecycle.Stage.NORMAL\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(2, startOrder, stopOrder), Lifecycle.Stage.NORMAL\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(3, startOrder, stopOrder), Lifecycle.Stage.LAST\n            );\n            lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n            lifecycle.addMaybeStartStartCloseInstance(\n                new ObjectToBeLifecycled(6, startOrder, stopOrder), Lifecycle.Stage.LAST\n            );\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n          }\n\n          @Override\n          public void stop()\n          {\n\n          }\n        }\n    );\n\n    final List<Integer> expectedOrder = Arrays.asList(0, 1, 2, 4, 5, 7, 3, 6);\n\n    lifecycle.start();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(0, stopOrder.size());\n\n    lifecycle.stop();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(Lists.reverse(expectedOrder), stopOrder);\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/lifecycle/LifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"B"}],"commitId":"84598fba3b283cbfd6a5addd2602c7b12ba8c00c","commitMessage":"@@@combine druid-api.  druid-common.  java-util into druid-core (#6443)\n\n* combine druid-api.  druid-common.  java-util\n\n* spacing\n","date":"2018-10-15 11:37:37","modifiedFileCount":"0","status":"B","submitter":"Clint Wylie"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testSanity() throws Exception\n  {\n    Lifecycle lifecycle = new Lifecycle();\n\n    List<Integer> startOrder = new ArrayList<>();\n    List<Integer> stopOrder = new ArrayList<>();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(1, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(2, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(3, startOrder, stopOrder), Lifecycle.Stage.LAST);\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(6, startOrder, stopOrder), Lifecycle.Stage.LAST);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n\n    final List<Integer> expectedOrder = Arrays.asList(0, 1, 2, 4, 5, 7, 3, 6);\n\n    lifecycle.start();\n\n    Assert.assertEquals(8, startOrder.size());\n    Assert.assertEquals(0, stopOrder.size());\n    Assert.assertEquals(expectedOrder, startOrder);\n\n    lifecycle.stop();\n\n    Assert.assertEquals(8, startOrder.size());\n    Assert.assertEquals(8, stopOrder.size());\n    Assert.assertEquals(Lists.reverse(expectedOrder), stopOrder);\n  }\n","date":"2018-10-29 20:02:43","endLine":194,"groupId":"11939","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSanity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/be51b3b4e4720fa2f11256ca38c52c479094ee.src","preCode":"  public void testSanity() throws Exception\n  {\n    Lifecycle lifecycle = new Lifecycle();\n\n    List<Integer> startOrder = Lists.newArrayList();\n    List<Integer> stopOrder = Lists.newArrayList();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(1, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(2, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(3, startOrder, stopOrder), Lifecycle.Stage.LAST);\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(6, startOrder, stopOrder), Lifecycle.Stage.LAST);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n\n    final List<Integer> expectedOrder = Arrays.asList(0, 1, 2, 4, 5, 7, 3, 6);\n\n    lifecycle.start();\n\n    Assert.assertEquals(8, startOrder.size());\n    Assert.assertEquals(0, stopOrder.size());\n    Assert.assertEquals(expectedOrder, startOrder);\n\n    lifecycle.stop();\n\n    Assert.assertEquals(8, startOrder.size());\n    Assert.assertEquals(8, stopOrder.size());\n    Assert.assertEquals(Lists.reverse(expectedOrder), stopOrder);\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/lifecycle/LifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testAddToLifecycleInStartMethod() throws Exception\n  {\n    final Lifecycle lifecycle = new Lifecycle();\n\n    final List<Integer> startOrder = new ArrayList<>();\n    final List<Integer> stopOrder = new ArrayList<>();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addHandler(\n        new Lifecycle.Handler()\n        {\n          @Override\n          public void start() throws Exception\n          {\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(1, startOrder, stopOrder), Lifecycle.Stage.NORMAL\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(2, startOrder, stopOrder), Lifecycle.Stage.NORMAL\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(3, startOrder, stopOrder), Lifecycle.Stage.LAST\n            );\n            lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n            lifecycle.addMaybeStartStartCloseInstance(\n                new ObjectToBeLifecycled(6, startOrder, stopOrder), Lifecycle.Stage.LAST\n            );\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n          }\n\n          @Override\n          public void stop()\n          {\n\n          }\n        }\n    );\n\n    final List<Integer> expectedOrder = Arrays.asList(0, 1, 2, 4, 5, 7, 3, 6);\n\n    lifecycle.start();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(0, stopOrder.size());\n\n    lifecycle.stop();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(Lists.reverse(expectedOrder), stopOrder);\n  }\n","date":"2018-10-29 20:02:43","endLine":247,"groupId":"11940","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddToLifecycleInStartMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/be51b3b4e4720fa2f11256ca38c52c479094ee.src","preCode":"  public void testAddToLifecycleInStartMethod() throws Exception\n  {\n    final Lifecycle lifecycle = new Lifecycle();\n\n    final List<Integer> startOrder = Lists.newArrayList();\n    final List<Integer> stopOrder = Lists.newArrayList();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addHandler(\n        new Lifecycle.Handler()\n        {\n          @Override\n          public void start() throws Exception\n          {\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(1, startOrder, stopOrder), Lifecycle.Stage.NORMAL\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(2, startOrder, stopOrder), Lifecycle.Stage.NORMAL\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(3, startOrder, stopOrder), Lifecycle.Stage.LAST\n            );\n            lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n            lifecycle.addMaybeStartStartCloseInstance(\n                new ObjectToBeLifecycled(6, startOrder, stopOrder), Lifecycle.Stage.LAST\n            );\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n          }\n\n          @Override\n          public void stop()\n          {\n\n          }\n        }\n    );\n\n    final List<Integer> expectedOrder = Arrays.asList(0, 1, 2, 4, 5, 7, 3, 6);\n\n    lifecycle.start();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(0, stopOrder.size());\n\n    lifecycle.stop();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(Lists.reverse(expectedOrder), stopOrder);\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/lifecycle/LifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2019-01-22 01:01:36","codes":[{"authorDate":"2019-01-22 01:01:36","commitOrder":3,"curCode":"  public void testSanity() throws Exception\n  {\n    Lifecycle lifecycle = new Lifecycle();\n\n    List<Integer> startOrder = new ArrayList<>();\n    List<Integer> stopOrder = new ArrayList<>();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(1, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(2, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(3, startOrder, stopOrder), Lifecycle.Stage.LAST);\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(6, startOrder, stopOrder), Lifecycle.Stage.LAST);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(8, startOrder, stopOrder), Lifecycle.Stage.INIT);\n\n    final List<Integer> expectedOrder = Arrays.asList(8, 0, 1, 2, 4, 5, 7, 3, 6);\n\n    lifecycle.start();\n\n    Assert.assertEquals(9, startOrder.size());\n    Assert.assertEquals(0, stopOrder.size());\n    Assert.assertEquals(expectedOrder, startOrder);\n\n    lifecycle.stop();\n\n    Assert.assertEquals(9, startOrder.size());\n    Assert.assertEquals(9, stopOrder.size());\n    Assert.assertEquals(Lists.reverse(expectedOrder), stopOrder);\n  }\n","date":"2019-01-22 01:01:36","endLine":195,"groupId":"11939","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSanity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/63/54cdd79d43423f78ec41b18f39f708b5f3b17d.src","preCode":"  public void testSanity() throws Exception\n  {\n    Lifecycle lifecycle = new Lifecycle();\n\n    List<Integer> startOrder = new ArrayList<>();\n    List<Integer> stopOrder = new ArrayList<>();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(1, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(2, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(3, startOrder, stopOrder), Lifecycle.Stage.LAST);\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(6, startOrder, stopOrder), Lifecycle.Stage.LAST);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n\n    final List<Integer> expectedOrder = Arrays.asList(0, 1, 2, 4, 5, 7, 3, 6);\n\n    lifecycle.start();\n\n    Assert.assertEquals(8, startOrder.size());\n    Assert.assertEquals(0, stopOrder.size());\n    Assert.assertEquals(expectedOrder, startOrder);\n\n    lifecycle.stop();\n\n    Assert.assertEquals(8, startOrder.size());\n    Assert.assertEquals(8, stopOrder.size());\n    Assert.assertEquals(Lists.reverse(expectedOrder), stopOrder);\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/lifecycle/LifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2019-01-22 01:01:36","commitOrder":3,"curCode":"  public void testAddToLifecycleInStartMethod() throws Exception\n  {\n    final Lifecycle lifecycle = new Lifecycle();\n\n    final List<Integer> startOrder = new ArrayList<>();\n    final List<Integer> stopOrder = new ArrayList<>();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addHandler(\n        new Lifecycle.Handler()\n        {\n          @Override\n          public void start() throws Exception\n          {\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(1, startOrder, stopOrder), Lifecycle.Stage.NORMAL\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(2, startOrder, stopOrder), Lifecycle.Stage.INIT\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(3, startOrder, stopOrder), Lifecycle.Stage.LAST\n            );\n            lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n            lifecycle.addMaybeStartStartCloseInstance(\n                new ObjectToBeLifecycled(6, startOrder, stopOrder), Lifecycle.Stage.LAST\n            );\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n          }\n\n          @Override\n          public void stop()\n          {\n\n          }\n        }\n    );\n\n    final List<Integer> expectedOrder = Arrays.asList(0, 1, 2, 4, 5, 7, 3, 6);\n    final List<Integer> expectedStopOrder = Arrays.asList(6, 3, 7, 5, 4, 1, 0, 2);\n\n    lifecycle.start();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(0, stopOrder.size());\n\n    lifecycle.stop();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(expectedStopOrder, stopOrder);\n  }\n","date":"2019-01-22 01:01:36","endLine":249,"groupId":"11940","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddToLifecycleInStartMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/63/54cdd79d43423f78ec41b18f39f708b5f3b17d.src","preCode":"  public void testAddToLifecycleInStartMethod() throws Exception\n  {\n    final Lifecycle lifecycle = new Lifecycle();\n\n    final List<Integer> startOrder = new ArrayList<>();\n    final List<Integer> stopOrder = new ArrayList<>();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addHandler(\n        new Lifecycle.Handler()\n        {\n          @Override\n          public void start() throws Exception\n          {\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(1, startOrder, stopOrder), Lifecycle.Stage.NORMAL\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(2, startOrder, stopOrder), Lifecycle.Stage.NORMAL\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(3, startOrder, stopOrder), Lifecycle.Stage.LAST\n            );\n            lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n            lifecycle.addMaybeStartStartCloseInstance(\n                new ObjectToBeLifecycled(6, startOrder, stopOrder), Lifecycle.Stage.LAST\n            );\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n          }\n\n          @Override\n          public void stop()\n          {\n\n          }\n        }\n    );\n\n    final List<Integer> expectedOrder = Arrays.asList(0, 1, 2, 4, 5, 7, 3, 6);\n\n    lifecycle.start();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(0, stopOrder.size());\n\n    lifecycle.stop();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(Lists.reverse(expectedOrder), stopOrder);\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/lifecycle/LifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"8ba33b250572fc7f4a1b3b2632f5c18f8c562b9a","commitMessage":"@@@add 'init' lifecycle stage for finer control over startup and shutdown (#6864)\n\n* add Lifecycle.Stage.INIT.  put log shutter downer in init stage.  tests.  rad startup banner\n\n* log cleanup\n\n* log changes\n\n* add task-master lifecycle to module lifecycle to gracefully stop task-master stuff\n\n* fix it the right way\n\n* remove announce spam\n\n* unused import\n\n* one more log\n\n* updated comments\n\n* wrap leadership lifecycle stop to prevent exceptions from wrecking rest of task master stop\n\n* add precondition check\n","date":"2019-01-22 01:01:36","modifiedFileCount":"6","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-03-12 22:09:03","codes":[{"authorDate":"2019-03-12 22:09:03","commitOrder":4,"curCode":"  public void testSanity() throws Exception\n  {\n    Lifecycle lifecycle = new Lifecycle();\n\n    List<Integer> startOrder = new ArrayList<>();\n    List<Integer> stopOrder = new ArrayList<>();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(1, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(2, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(3, startOrder, stopOrder), Lifecycle.Stage.ANNOUNCEMENTS);\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(6, startOrder, stopOrder), Lifecycle.Stage.ANNOUNCEMENTS);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(8, startOrder, stopOrder), Lifecycle.Stage.INIT);\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(9, startOrder, stopOrder), Lifecycle.Stage.SERVER);\n\n    final List<Integer> expectedOrder = Arrays.asList(8, 0, 1, 2, 4, 5, 7, 9, 3, 6);\n\n    lifecycle.start();\n\n    Assert.assertEquals(10, startOrder.size());\n    Assert.assertEquals(0, stopOrder.size());\n    Assert.assertEquals(expectedOrder, startOrder);\n\n    lifecycle.stop();\n\n    Assert.assertEquals(10, startOrder.size());\n    Assert.assertEquals(10, stopOrder.size());\n    Assert.assertEquals(Lists.reverse(expectedOrder), stopOrder);\n  }\n","date":"2019-03-12 22:09:03","endLine":196,"groupId":"104968","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSanity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/26/b19afcf52b8b237ac7a57a8d5db133ba988215.src","preCode":"  public void testSanity() throws Exception\n  {\n    Lifecycle lifecycle = new Lifecycle();\n\n    List<Integer> startOrder = new ArrayList<>();\n    List<Integer> stopOrder = new ArrayList<>();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(1, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(2, startOrder, stopOrder), Lifecycle.Stage.NORMAL);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(3, startOrder, stopOrder), Lifecycle.Stage.LAST);\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(6, startOrder, stopOrder), Lifecycle.Stage.LAST);\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n    lifecycle.addStartCloseInstance(new ObjectToBeLifecycled(8, startOrder, stopOrder), Lifecycle.Stage.INIT);\n\n    final List<Integer> expectedOrder = Arrays.asList(8, 0, 1, 2, 4, 5, 7, 3, 6);\n\n    lifecycle.start();\n\n    Assert.assertEquals(9, startOrder.size());\n    Assert.assertEquals(0, stopOrder.size());\n    Assert.assertEquals(expectedOrder, startOrder);\n\n    lifecycle.stop();\n\n    Assert.assertEquals(9, startOrder.size());\n    Assert.assertEquals(9, stopOrder.size());\n    Assert.assertEquals(Lists.reverse(expectedOrder), stopOrder);\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/lifecycle/LifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2019-03-12 22:09:03","commitOrder":4,"curCode":"  public void testAddToLifecycleInStartMethod() throws Exception\n  {\n    final Lifecycle lifecycle = new Lifecycle();\n\n    final List<Integer> startOrder = new ArrayList<>();\n    final List<Integer> stopOrder = new ArrayList<>();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addHandler(\n        new Lifecycle.Handler()\n        {\n          @Override\n          public void start() throws Exception\n          {\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(1, startOrder, stopOrder),\n                Lifecycle.Stage.NORMAL\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(2, startOrder, stopOrder),\n                Lifecycle.Stage.INIT\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(3, startOrder, stopOrder),\n                Lifecycle.Stage.ANNOUNCEMENTS\n            );\n            lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n            lifecycle.addMaybeStartStartCloseInstance(\n                new ObjectToBeLifecycled(6, startOrder, stopOrder),\n                Lifecycle.Stage.ANNOUNCEMENTS\n            );\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(8, startOrder, stopOrder),\n                Lifecycle.Stage.SERVER\n            );\n          }\n\n          @Override\n          public void stop()\n          {\n\n          }\n        }\n    );\n\n    final List<Integer> expectedOrder = Arrays.asList(0, 1, 2, 4, 5, 7, 8, 3, 6);\n    final List<Integer> expectedStopOrder = Arrays.asList(6, 3, 8, 7, 5, 4, 1, 0, 2);\n\n    lifecycle.start();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(0, stopOrder.size());\n\n    lifecycle.stop();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(expectedStopOrder, stopOrder);\n  }\n","date":"2019-03-12 22:09:03","endLine":258,"groupId":"104968","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddToLifecycleInStartMethod","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/26/b19afcf52b8b237ac7a57a8d5db133ba988215.src","preCode":"  public void testAddToLifecycleInStartMethod() throws Exception\n  {\n    final Lifecycle lifecycle = new Lifecycle();\n\n    final List<Integer> startOrder = new ArrayList<>();\n    final List<Integer> stopOrder = new ArrayList<>();\n\n    lifecycle.addManagedInstance(new ObjectToBeLifecycled(0, startOrder, stopOrder));\n    lifecycle.addHandler(\n        new Lifecycle.Handler()\n        {\n          @Override\n          public void start() throws Exception\n          {\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(1, startOrder, stopOrder), Lifecycle.Stage.NORMAL\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(2, startOrder, stopOrder), Lifecycle.Stage.INIT\n            );\n            lifecycle.addMaybeStartManagedInstance(\n                new ObjectToBeLifecycled(3, startOrder, stopOrder), Lifecycle.Stage.LAST\n            );\n            lifecycle.addMaybeStartStartCloseInstance(new ObjectToBeLifecycled(4, startOrder, stopOrder));\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(5, startOrder, stopOrder));\n            lifecycle.addMaybeStartStartCloseInstance(\n                new ObjectToBeLifecycled(6, startOrder, stopOrder), Lifecycle.Stage.LAST\n            );\n            lifecycle.addMaybeStartManagedInstance(new ObjectToBeLifecycled(7, startOrder, stopOrder));\n          }\n\n          @Override\n          public void stop()\n          {\n\n          }\n        }\n    );\n\n    final List<Integer> expectedOrder = Arrays.asList(0, 1, 2, 4, 5, 7, 3, 6);\n    final List<Integer> expectedStopOrder = Arrays.asList(6, 3, 7, 5, 4, 1, 0, 2);\n\n    lifecycle.start();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(0, stopOrder.size());\n\n    lifecycle.stop();\n\n    Assert.assertEquals(expectedOrder, startOrder);\n    Assert.assertEquals(expectedStopOrder, stopOrder);\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/lifecycle/LifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"4d3987c1ddf1a4089bf02af9d43b3c918ce63560","commitMessage":"@@@lifecycle stage refactor to ensure proper start and stop ordering of servers and announcements (#7234)\n\n* lifecycle stage refactor to ensure proper ordering of servers and announcements\n\n* move DerivativeDataSourceManager to Lifecycle.Stage.NORMAL\n","date":"2019-03-12 22:09:03","modifiedFileCount":"10","status":"M","submitter":"Clint Wylie"}]
