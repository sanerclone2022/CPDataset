[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testRealtimeishTask() throws Exception\n  {\n    final Task rtishTask = new RealtimeishTask();\n    final TaskStatus status = runTask(rtishTask);\n\n    Assert.assertEquals(\"statusCode\", TaskState.SUCCESS, status.getStatusCode());\n    Assert.assertEquals(\"num segments published\", 2, mdc.getPublished().size());\n    Assert.assertEquals(\"num segments nuked\", 0, mdc.getNuked().size());\n  }\n","date":"2018-08-31 00:56:26","endLine":887,"groupId":"20292","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRealtimeishTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0d/e8debf718ced71c74552e50d9d420f45cdfee4.src","preCode":"  public void testRealtimeishTask() throws Exception\n  {\n    final Task rtishTask = new RealtimeishTask();\n    final TaskStatus status = runTask(rtishTask);\n\n    Assert.assertEquals(\"statusCode\", TaskState.SUCCESS, status.getStatusCode());\n    Assert.assertEquals(\"num segments published\", 2, mdc.getPublished().size());\n    Assert.assertEquals(\"num segments nuked\", 0, mdc.getNuked().size());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/TaskLifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":879,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testBadVersion() throws Exception\n  {\n    final Task task = new AbstractFixedIntervalTask(\"id1\", \"id1\", \"ds\", Intervals.of(\"2012-01-01/P1D\"), null)\n    {\n      @Override\n      public String getType()\n      {\n        return \"test\";\n      }\n\n      @Override\n      public TaskStatus run(TaskToolbox toolbox) throws Exception\n      {\n        final TaskLock myLock = Iterables.getOnlyElement(toolbox.getTaskActionClient().submit(new LockListAction()));\n\n        final DataSegment segment = DataSegment.builder()\n                                               .dataSource(\"ds\")\n                                               .interval(Intervals.of(\"2012-01-01/P1D\"))\n                                               .version(myLock.getVersion() + \"1!!!1!!\")\n                                               .build();\n\n        toolbox.getTaskActionClient().submit(new SegmentInsertAction(ImmutableSet.of(segment)));\n        return TaskStatus.success(getId());\n      }\n    };\n\n    final TaskStatus status = runTask(task);\n\n    Assert.assertEquals(\"statusCode\", TaskState.FAILED, status.getStatusCode());\n    Assert.assertEquals(\"segments published\", 0, mdc.getPublished().size());\n    Assert.assertEquals(\"segments nuked\", 0, mdc.getNuked().size());\n  }\n","date":"2018-08-31 00:56:26","endLine":1027,"groupId":"14600","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadVersion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0d/e8debf718ced71c74552e50d9d420f45cdfee4.src","preCode":"  public void testBadVersion() throws Exception\n  {\n    final Task task = new AbstractFixedIntervalTask(\"id1\", \"id1\", \"ds\", Intervals.of(\"2012-01-01/P1D\"), null)\n    {\n      @Override\n      public String getType()\n      {\n        return \"test\";\n      }\n\n      @Override\n      public TaskStatus run(TaskToolbox toolbox) throws Exception\n      {\n        final TaskLock myLock = Iterables.getOnlyElement(toolbox.getTaskActionClient().submit(new LockListAction()));\n\n        final DataSegment segment = DataSegment.builder()\n                                               .dataSource(\"ds\")\n                                               .interval(Intervals.of(\"2012-01-01/P1D\"))\n                                               .version(myLock.getVersion() + \"1!!!1!!\")\n                                               .build();\n\n        toolbox.getTaskActionClient().submit(new SegmentInsertAction(ImmutableSet.of(segment)));\n        return TaskStatus.success(getId());\n      }\n    };\n\n    final TaskStatus status = runTask(task);\n\n    Assert.assertEquals(\"statusCode\", TaskState.FAILED, status.getStatusCode());\n    Assert.assertEquals(\"segments published\", 0, mdc.getPublished().size());\n    Assert.assertEquals(\"segments nuked\", 0, mdc.getNuked().size());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/TaskLifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":996,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-08-13 08:42:06","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testRealtimeishTask() throws Exception\n  {\n    final Task rtishTask = new RealtimeishTask();\n    final TaskStatus status = runTask(rtishTask);\n\n    Assert.assertEquals(\"statusCode\", TaskState.SUCCESS, status.getStatusCode());\n    Assert.assertEquals(\"num segments published\", 2, mdc.getPublished().size());\n    Assert.assertEquals(\"num segments nuked\", 0, mdc.getNuked().size());\n  }\n","date":"2018-08-31 00:56:26","endLine":887,"groupId":"20292","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRealtimeishTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0d/e8debf718ced71c74552e50d9d420f45cdfee4.src","preCode":"  public void testRealtimeishTask() throws Exception\n  {\n    final Task rtishTask = new RealtimeishTask();\n    final TaskStatus status = runTask(rtishTask);\n\n    Assert.assertEquals(\"statusCode\", TaskState.SUCCESS, status.getStatusCode());\n    Assert.assertEquals(\"num segments published\", 2, mdc.getPublished().size());\n    Assert.assertEquals(\"num segments nuked\", 0, mdc.getNuked().size());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/TaskLifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":879,"status":"N"},{"authorDate":"2019-08-13 08:42:06","commitOrder":2,"curCode":"  public void testBadVersion() throws Exception\n  {\n    final Task task = new AbstractFixedIntervalTask(\"id1\", \"id1\", \"ds\", Intervals.of(\"2012-01-01/P1D\"), null)\n    {\n      @Override\n      public String getType()\n      {\n        return \"test\";\n      }\n\n      @Override\n      public void stopGracefully(TaskConfig taskConfig)\n      {\n      }\n\n      @Override\n      public TaskStatus run(TaskToolbox toolbox) throws Exception\n      {\n        final TaskLock myLock = Iterables.getOnlyElement(toolbox.getTaskActionClient().submit(new LockListAction()));\n\n        final DataSegment segment = DataSegment.builder()\n                                               .dataSource(\"ds\")\n                                               .interval(Intervals.of(\"2012-01-01/P1D\"))\n                                               .version(myLock.getVersion() + \"1!!!1!!\")\n                                               .build();\n\n        toolbox.getTaskActionClient().submit(new SegmentInsertAction(ImmutableSet.of(segment)));\n        return TaskStatus.success(getId());\n      }\n    };\n\n    final TaskStatus status = runTask(task);\n\n    Assert.assertEquals(\"statusCode\", TaskState.FAILED, status.getStatusCode());\n    Assert.assertEquals(\"segments published\", 0, mdc.getPublished().size());\n    Assert.assertEquals(\"segments nuked\", 0, mdc.getNuked().size());\n  }\n","date":"2019-08-13 08:42:06","endLine":1063,"groupId":"14600","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadVersion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/47/5b8ef6f68fddee2711cf7578da052f644ef8c5.src","preCode":"  public void testBadVersion() throws Exception\n  {\n    final Task task = new AbstractFixedIntervalTask(\"id1\", \"id1\", \"ds\", Intervals.of(\"2012-01-01/P1D\"), null)\n    {\n      @Override\n      public String getType()\n      {\n        return \"test\";\n      }\n\n      @Override\n      public TaskStatus run(TaskToolbox toolbox) throws Exception\n      {\n        final TaskLock myLock = Iterables.getOnlyElement(toolbox.getTaskActionClient().submit(new LockListAction()));\n\n        final DataSegment segment = DataSegment.builder()\n                                               .dataSource(\"ds\")\n                                               .interval(Intervals.of(\"2012-01-01/P1D\"))\n                                               .version(myLock.getVersion() + \"1!!!1!!\")\n                                               .build();\n\n        toolbox.getTaskActionClient().submit(new SegmentInsertAction(ImmutableSet.of(segment)));\n        return TaskStatus.success(getId());\n      }\n    };\n\n    final TaskStatus status = runTask(task);\n\n    Assert.assertEquals(\"statusCode\", TaskState.FAILED, status.getStatusCode());\n    Assert.assertEquals(\"segments published\", 0, mdc.getPublished().size());\n    Assert.assertEquals(\"segments nuked\", 0, mdc.getNuked().size());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/TaskLifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1027,"status":"M"}],"commitId":"312cdc245239aa1411665e91eaeeadfd13301d25","commitMessage":"@@@Add TaskResourceCleaner; fix a couple of concurrency bugs in batch tasks (#8236)\n\n* Add TaskResourceCleaner; fix a couple of concurrency bugs in batch tasks\n\n* kill runner when it's ready\n\n* add comment\n\n* kill run thread\n\n* fix test\n\n* Take closeable out of Appenderator\n\n* add javadoc\n\n* fix test\n\n* fix test\n\n* update javadoc\n\n* add javadoc about killed task\n\n* address comment\n\n* handling missing exceptions\n\n* more clear javadoc for stopGracefully\n\n* update javadoc\n\n* Add missing statement in javadoc\n\n* typo\n","date":"2019-08-13 08:42:06","modifiedFileCount":"20","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-08-16 05:57:02","codes":[{"authorDate":"2019-08-16 05:57:02","commitOrder":3,"curCode":"  public void testRealtimeishTask() throws Exception\n  {\n    final Task rtishTask = new RealtimeishTask();\n    final TaskStatus status = runTask(rtishTask);\n\n    Assert.assertEquals(\"statusCode\", TaskState.SUCCESS, status.getStatusCode());\n    Assert.assertEquals(taskLocation, status.getLocation());\n    Assert.assertEquals(\"num segments published\", 2, mdc.getPublished().size());\n    Assert.assertEquals(\"num segments nuked\", 0, mdc.getNuked().size());\n  }\n","date":"2019-08-16 05:57:02","endLine":912,"groupId":"20292","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRealtimeishTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1a/e89f7a0a35e2067543a7012d74e3a171e672e6.src","preCode":"  public void testRealtimeishTask() throws Exception\n  {\n    final Task rtishTask = new RealtimeishTask();\n    final TaskStatus status = runTask(rtishTask);\n\n    Assert.assertEquals(\"statusCode\", TaskState.SUCCESS, status.getStatusCode());\n    Assert.assertEquals(\"num segments published\", 2, mdc.getPublished().size());\n    Assert.assertEquals(\"num segments nuked\", 0, mdc.getNuked().size());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/TaskLifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":903,"status":"M"},{"authorDate":"2019-08-16 05:57:02","commitOrder":3,"curCode":"  public void testBadVersion() throws Exception\n  {\n    final Task task = new AbstractFixedIntervalTask(\"id1\", \"id1\", \"ds\", Intervals.of(\"2012-01-01/P1D\"), null)\n    {\n      @Override\n      public String getType()\n      {\n        return \"test\";\n      }\n\n      @Override\n      public void stopGracefully(TaskConfig taskConfig)\n      {\n      }\n\n      @Override\n      public TaskStatus run(TaskToolbox toolbox) throws Exception\n      {\n        final TaskLock myLock = Iterables.getOnlyElement(toolbox.getTaskActionClient().submit(new LockListAction()));\n\n        final DataSegment segment = DataSegment.builder()\n                                               .dataSource(\"ds\")\n                                               .interval(Intervals.of(\"2012-01-01/P1D\"))\n                                               .version(myLock.getVersion() + \"1!!!1!!\")\n                                               .build();\n\n        toolbox.getTaskActionClient().submit(new SegmentInsertAction(ImmutableSet.of(segment)));\n        return TaskStatus.success(getId());\n      }\n    };\n\n    final TaskStatus status = runTask(task);\n\n    Assert.assertEquals(\"statusCode\", TaskState.FAILED, status.getStatusCode());\n    Assert.assertEquals(taskLocation, status.getLocation());\n    Assert.assertEquals(\"segments published\", 0, mdc.getPublished().size());\n    Assert.assertEquals(\"segments nuked\", 0, mdc.getNuked().size());\n  }\n","date":"2019-08-16 05:57:02","endLine":1077,"groupId":"14600","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadVersion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1a/e89f7a0a35e2067543a7012d74e3a171e672e6.src","preCode":"  public void testBadVersion() throws Exception\n  {\n    final Task task = new AbstractFixedIntervalTask(\"id1\", \"id1\", \"ds\", Intervals.of(\"2012-01-01/P1D\"), null)\n    {\n      @Override\n      public String getType()\n      {\n        return \"test\";\n      }\n\n      @Override\n      public void stopGracefully(TaskConfig taskConfig)\n      {\n      }\n\n      @Override\n      public TaskStatus run(TaskToolbox toolbox) throws Exception\n      {\n        final TaskLock myLock = Iterables.getOnlyElement(toolbox.getTaskActionClient().submit(new LockListAction()));\n\n        final DataSegment segment = DataSegment.builder()\n                                               .dataSource(\"ds\")\n                                               .interval(Intervals.of(\"2012-01-01/P1D\"))\n                                               .version(myLock.getVersion() + \"1!!!1!!\")\n                                               .build();\n\n        toolbox.getTaskActionClient().submit(new SegmentInsertAction(ImmutableSet.of(segment)));\n        return TaskStatus.success(getId());\n      }\n    };\n\n    final TaskStatus status = runTask(task);\n\n    Assert.assertEquals(\"statusCode\", TaskState.FAILED, status.getStatusCode());\n    Assert.assertEquals(\"segments published\", 0, mdc.getPublished().size());\n    Assert.assertEquals(\"segments nuked\", 0, mdc.getNuked().size());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/TaskLifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1040,"status":"M"}],"commitId":"ef7b9606f2137a7a724e65c52c28375ce0dff427","commitMessage":"@@@Keep track of task location for completed tasks (#8286)\n\n* Keep track of task location for completed tasks\n\n* Add TaskLifecycleTest location checks\n","date":"2019-08-16 05:57:02","modifiedFileCount":"8","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2019-11-07 03:07:04","codes":[{"authorDate":"2019-08-16 05:57:02","commitOrder":4,"curCode":"  public void testRealtimeishTask() throws Exception\n  {\n    final Task rtishTask = new RealtimeishTask();\n    final TaskStatus status = runTask(rtishTask);\n\n    Assert.assertEquals(\"statusCode\", TaskState.SUCCESS, status.getStatusCode());\n    Assert.assertEquals(taskLocation, status.getLocation());\n    Assert.assertEquals(\"num segments published\", 2, mdc.getPublished().size());\n    Assert.assertEquals(\"num segments nuked\", 0, mdc.getNuked().size());\n  }\n","date":"2019-08-16 05:57:02","endLine":912,"groupId":"104153","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRealtimeishTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1a/e89f7a0a35e2067543a7012d74e3a171e672e6.src","preCode":"  public void testRealtimeishTask() throws Exception\n  {\n    final Task rtishTask = new RealtimeishTask();\n    final TaskStatus status = runTask(rtishTask);\n\n    Assert.assertEquals(\"statusCode\", TaskState.SUCCESS, status.getStatusCode());\n    Assert.assertEquals(taskLocation, status.getLocation());\n    Assert.assertEquals(\"num segments published\", 2, mdc.getPublished().size());\n    Assert.assertEquals(\"num segments nuked\", 0, mdc.getNuked().size());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/TaskLifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":903,"status":"N"},{"authorDate":"2019-11-07 03:07:04","commitOrder":4,"curCode":"  public void testBadVersion() throws Exception\n  {\n    final Task task = new AbstractFixedIntervalTask(\"id1\", \"id1\", \"ds\", Intervals.of(\"2012-01-01/P1D\"), null)\n    {\n      @Override\n      public String getType()\n      {\n        return \"test\";\n      }\n\n      @Override\n      public void stopGracefully(TaskConfig taskConfig)\n      {\n      }\n\n      @Override\n      public TaskStatus run(TaskToolbox toolbox) throws Exception\n      {\n        final TaskLock myLock = Iterables.getOnlyElement(toolbox.getTaskActionClient().submit(new LockListAction()));\n\n        final DataSegment segment = DataSegment\n            .builder()\n            .dataSource(\"ds\")\n            .interval(Intervals.of(\"2012-01-01/P1D\"))\n            .version(myLock.getVersion() + \"1!!!1!!\")\n            .size(0)\n            .build();\n\n        toolbox.getTaskActionClient().submit(new SegmentInsertAction(ImmutableSet.of(segment)));\n        return TaskStatus.success(getId());\n      }\n    };\n\n    final TaskStatus status = runTask(task);\n\n    Assert.assertEquals(\"statusCode\", TaskState.FAILED, status.getStatusCode());\n    Assert.assertEquals(taskLocation, status.getLocation());\n    Assert.assertEquals(\"segments published\", 0, mdc.getPublished().size());\n    Assert.assertEquals(\"segments nuked\", 0, mdc.getNuked().size());\n  }\n","date":"2019-11-07 03:07:04","endLine":1063,"groupId":"104153","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadVersion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5e/4099eac7b05b146653677d2a76084b314afe7e.src","preCode":"  public void testBadVersion() throws Exception\n  {\n    final Task task = new AbstractFixedIntervalTask(\"id1\", \"id1\", \"ds\", Intervals.of(\"2012-01-01/P1D\"), null)\n    {\n      @Override\n      public String getType()\n      {\n        return \"test\";\n      }\n\n      @Override\n      public void stopGracefully(TaskConfig taskConfig)\n      {\n      }\n\n      @Override\n      public TaskStatus run(TaskToolbox toolbox) throws Exception\n      {\n        final TaskLock myLock = Iterables.getOnlyElement(toolbox.getTaskActionClient().submit(new LockListAction()));\n\n        final DataSegment segment = DataSegment.builder()\n                                               .dataSource(\"ds\")\n                                               .interval(Intervals.of(\"2012-01-01/P1D\"))\n                                               .version(myLock.getVersion() + \"1!!!1!!\")\n                                               .build();\n\n        toolbox.getTaskActionClient().submit(new SegmentInsertAction(ImmutableSet.of(segment)));\n        return TaskStatus.success(getId());\n      }\n    };\n\n    final TaskStatus status = runTask(task);\n\n    Assert.assertEquals(\"statusCode\", TaskState.FAILED, status.getStatusCode());\n    Assert.assertEquals(taskLocation, status.getLocation());\n    Assert.assertEquals(\"segments published\", 0, mdc.getPublished().size());\n    Assert.assertEquals(\"segments nuked\", 0, mdc.getNuked().size());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/TaskLifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1024,"status":"M"}],"commitId":"5c0fc0a13ab4d259b430bf50b322f631504c4529","commitMessage":"@@@Fix ambiguity about IndexerSQLMetadataStorageCoordinator.getUsedSegmentsForInterval() returning only non-overshadowed or all used segments (#8564)\n\n* IndexerSQLMetadataStorageCoordinator.getTimelineForIntervalsWithHandle() don't fetch abutting intervals; simplify getUsedSegmentsForIntervals()\n\n* Add VersionedIntervalTimeline.findNonOvershadowedObjectsInInterval() method; Propagate the decision about whether only visible segmetns or visible and overshadowed segments should be returned from IndexerMetadataStorageCoordinator's methods to the user logic; Rename SegmentListUsedAction to RetrieveUsedSegmentsAction.  SegmetnListUnusedAction to RetrieveUnusedSegmentsAction.  and UsedSegmentLister to UsedSegmentsRetriever\n\n* Fix tests\n\n* More fixes\n\n* Add javadoc notes about returning Collection instead of Set. Add JacksonUtils.readValue() to reduce boilerplate code\n\n* Fix KinesisIndexTaskTest.  factor out common parts from KinesisIndexTaskTest and KafkaIndexTaskTest into SeekableStreamIndexTaskTestBase\n\n* More test fixes\n\n* More test fixes\n\n* Add a comment to VersionedIntervalTimelineTestBase\n\n* Fix tests\n\n* Set DataSegment.size(0) in more tests\n\n* Specify DataSegment.size(0) in more places in tests\n\n* Fix more tests\n\n* Fix DruidSchemaTest\n\n* Set DataSegment's size in more tests and benchmarks\n\n* Fix HdfsDataSegmentPusherTest\n\n* Doc changes addressing comments\n\n* Extended doc for visibility\n\n* Typo\n\n* Typo 2\n\n* Address comment\n","date":"2019-11-07 03:07:04","modifiedFileCount":"88","status":"M","submitter":"Roman Leventov"}]
