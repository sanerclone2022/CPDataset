[{"authorTime":"2020-07-30 06:19:18","codes":[{"authorDate":"2020-07-30 06:19:18","commitOrder":1,"curCode":"  public void testGoodQueryWithQueryConfigOverrideDefault() throws IOException\n  {\n    String overrideConfigKey = \"priority\";\n    String overrideConfigValue = \"678\";\n    DefaultQueryConfig overrideConfig = new DefaultQueryConfig(ImmutableMap.of(overrideConfigKey, overrideConfigValue));\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            TEST_SEGMENT_WALKER,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n            Suppliers.ofInstance(overrideConfig)\n        ),\n        JSON_MAPPER,\n        JSON_MAPPER,\n        queryScheduler,\n        new AuthConfig(),\n        null,\n        ResponseContextConfig.newConfig(true),\n        DRUID_NODE\n    );\n\n    expectPermissiveHappyPathAuth();\n\n    Response response = queryResource.doPost(\n        new ByteArrayInputStream(SIMPLE_TIMESERIES_QUERY.getBytes(StandardCharsets.UTF_8)),\n        null ,\n        testServletRequest\n    );\n    Assert.assertNotNull(response);\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ((StreamingOutput) response.getEntity()).write(baos);\n    final List<Result<TimeBoundaryResultValue>> responses = JSON_MAPPER.readValue(\n        baos.toByteArray(),\n        new TypeReference<List<Result<TimeBoundaryResultValue>>>() {}\n    );\n\n    Assert.assertNotNull(response);\n    Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n    Assert.assertEquals(0, responses.size());\n    Assert.assertEquals(1, testRequestLogger.getNativeQuerylogs().size());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext());\n    Assert.assertTrue(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().containsKey(overrideConfigKey));\n    Assert.assertEquals(overrideConfigValue, testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().get(overrideConfigKey));\n  }\n","date":"2020-07-30 06:19:18","endLine":289,"groupId":"1881","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGoodQueryWithQueryConfigOverrideDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0a/24b0edb8ad444d54c2c16cb8338d7c47b2992e.src","preCode":"  public void testGoodQueryWithQueryConfigOverrideDefault() throws IOException\n  {\n    String overrideConfigKey = \"priority\";\n    String overrideConfigValue = \"678\";\n    DefaultQueryConfig overrideConfig = new DefaultQueryConfig(ImmutableMap.of(overrideConfigKey, overrideConfigValue));\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            TEST_SEGMENT_WALKER,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n            Suppliers.ofInstance(overrideConfig)\n        ),\n        JSON_MAPPER,\n        JSON_MAPPER,\n        queryScheduler,\n        new AuthConfig(),\n        null,\n        ResponseContextConfig.newConfig(true),\n        DRUID_NODE\n    );\n\n    expectPermissiveHappyPathAuth();\n\n    Response response = queryResource.doPost(\n        new ByteArrayInputStream(SIMPLE_TIMESERIES_QUERY.getBytes(StandardCharsets.UTF_8)),\n        null ,\n        testServletRequest\n    );\n    Assert.assertNotNull(response);\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ((StreamingOutput) response.getEntity()).write(baos);\n    final List<Result<TimeBoundaryResultValue>> responses = JSON_MAPPER.readValue(\n        baos.toByteArray(),\n        new TypeReference<List<Result<TimeBoundaryResultValue>>>() {}\n    );\n\n    Assert.assertNotNull(response);\n    Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n    Assert.assertEquals(0, responses.size());\n    Assert.assertEquals(1, testRequestLogger.getNativeQuerylogs().size());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext());\n    Assert.assertTrue(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().containsKey(overrideConfigKey));\n    Assert.assertEquals(overrideConfigValue, testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().get(overrideConfigKey));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"B"},{"authorDate":"2020-07-30 06:19:18","commitOrder":1,"curCode":"  public void testGoodQueryWithQueryConfigDoesNotOverrideQueryContext() throws IOException\n  {\n    String overrideConfigKey = \"priority\";\n    String overrideConfigValue = \"678\";\n    DefaultQueryConfig overrideConfig = new DefaultQueryConfig(ImmutableMap.of(overrideConfigKey, overrideConfigValue));\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            TEST_SEGMENT_WALKER,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n            Suppliers.ofInstance(overrideConfig)\n        ),\n        JSON_MAPPER,\n        JSON_MAPPER,\n        queryScheduler,\n        new AuthConfig(),\n        null,\n        ResponseContextConfig.newConfig(true),\n        DRUID_NODE\n    );\n\n    expectPermissiveHappyPathAuth();\n\n    Response response = queryResource.doPost(\n        \r\n        new ByteArrayInputStream(SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY.getBytes(StandardCharsets.UTF_8)),\n        null ,\n        testServletRequest\n    );\n    Assert.assertNotNull(response);\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ((StreamingOutput) response.getEntity()).write(baos);\n    final List<Result<TimeBoundaryResultValue>> responses = JSON_MAPPER.readValue(\n        baos.toByteArray(),\n        new TypeReference<List<Result<TimeBoundaryResultValue>>>() {}\n    );\n\n    Assert.assertNotNull(response);\n    Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n    Assert.assertEquals(0, responses.size());\n    Assert.assertEquals(1, testRequestLogger.getNativeQuerylogs().size());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext());\n    Assert.assertTrue(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().containsKey(overrideConfigKey));\n    Assert.assertEquals(-1, testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().get(overrideConfigKey));\n  }\n","date":"2020-07-30 06:19:18","endLine":342,"groupId":"1881","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGoodQueryWithQueryConfigDoesNotOverrideQueryContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0a/24b0edb8ad444d54c2c16cb8338d7c47b2992e.src","preCode":"  public void testGoodQueryWithQueryConfigDoesNotOverrideQueryContext() throws IOException\n  {\n    String overrideConfigKey = \"priority\";\n    String overrideConfigValue = \"678\";\n    DefaultQueryConfig overrideConfig = new DefaultQueryConfig(ImmutableMap.of(overrideConfigKey, overrideConfigValue));\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            TEST_SEGMENT_WALKER,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n            Suppliers.ofInstance(overrideConfig)\n        ),\n        JSON_MAPPER,\n        JSON_MAPPER,\n        queryScheduler,\n        new AuthConfig(),\n        null,\n        ResponseContextConfig.newConfig(true),\n        DRUID_NODE\n    );\n\n    expectPermissiveHappyPathAuth();\n\n    Response response = queryResource.doPost(\n        \r\n        new ByteArrayInputStream(SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY.getBytes(StandardCharsets.UTF_8)),\n        null ,\n        testServletRequest\n    );\n    Assert.assertNotNull(response);\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ((StreamingOutput) response.getEntity()).write(baos);\n    final List<Result<TimeBoundaryResultValue>> responses = JSON_MAPPER.readValue(\n        baos.toByteArray(),\n        new TypeReference<List<Result<TimeBoundaryResultValue>>>() {}\n    );\n\n    Assert.assertNotNull(response);\n    Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n    Assert.assertEquals(0, responses.size());\n    Assert.assertEquals(1, testRequestLogger.getNativeQuerylogs().size());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext());\n    Assert.assertTrue(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().containsKey(overrideConfigKey));\n    Assert.assertEquals(-1, testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().get(overrideConfigKey));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"B"}],"commitId":"574b062f1f6f1cf0637d99d4ea540a95971c7489","commitMessage":"@@@Cluster wide default query context setting (#10208)\n\n* Cluster wide default query context setting\n\n* Cluster wide default query context setting\n\n* Cluster wide default query context setting\n\n* add docs\n\n* fix docs\n\n* update props\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* update docs\n\n* address comments\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix NPE","date":"2020-07-30 06:19:18","modifiedFileCount":"21","status":"B","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-05-04 13:43:47","codes":[{"authorDate":"2021-05-04 13:43:47","commitOrder":2,"curCode":"  public void testGoodQueryWithQueryConfigOverrideDefault() throws IOException\n  {\n    String overrideConfigKey = \"priority\";\n    String overrideConfigValue = \"678\";\n    DefaultQueryConfig overrideConfig = new DefaultQueryConfig(ImmutableMap.of(overrideConfigKey, overrideConfigValue));\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            TEST_SEGMENT_WALKER,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n            Suppliers.ofInstance(overrideConfig)\n        ),\n        jsonMapper,\n        smileMapper,\n        queryScheduler,\n        new AuthConfig(),\n        null,\n        ResponseContextConfig.newConfig(true),\n        DRUID_NODE\n    );\n\n    expectPermissiveHappyPathAuth();\n\n    Response response = queryResource.doPost(\n        new ByteArrayInputStream(SIMPLE_TIMESERIES_QUERY.getBytes(StandardCharsets.UTF_8)),\n        null ,\n        testServletRequest\n    );\n    Assert.assertNotNull(response);\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ((StreamingOutput) response.getEntity()).write(baos);\n    final List<Result<TimeBoundaryResultValue>> responses = jsonMapper.readValue(\n        baos.toByteArray(),\n        new TypeReference<List<Result<TimeBoundaryResultValue>>>() {}\n    );\n\n    Assert.assertNotNull(response);\n    Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n    Assert.assertEquals(0, responses.size());\n    Assert.assertEquals(1, testRequestLogger.getNativeQuerylogs().size());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext());\n    Assert.assertTrue(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().containsKey(overrideConfigKey));\n    Assert.assertEquals(overrideConfigValue, testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().get(overrideConfigKey));\n  }\n","date":"2021-05-04 13:43:47","endLine":304,"groupId":"10798","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testGoodQueryWithQueryConfigOverrideDefault","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/6af18220878b5785dada0eb6b6e8aaf0d07db2.src","preCode":"  public void testGoodQueryWithQueryConfigOverrideDefault() throws IOException\n  {\n    String overrideConfigKey = \"priority\";\n    String overrideConfigValue = \"678\";\n    DefaultQueryConfig overrideConfig = new DefaultQueryConfig(ImmutableMap.of(overrideConfigKey, overrideConfigValue));\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            TEST_SEGMENT_WALKER,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n            Suppliers.ofInstance(overrideConfig)\n        ),\n        JSON_MAPPER,\n        JSON_MAPPER,\n        queryScheduler,\n        new AuthConfig(),\n        null,\n        ResponseContextConfig.newConfig(true),\n        DRUID_NODE\n    );\n\n    expectPermissiveHappyPathAuth();\n\n    Response response = queryResource.doPost(\n        new ByteArrayInputStream(SIMPLE_TIMESERIES_QUERY.getBytes(StandardCharsets.UTF_8)),\n        null ,\n        testServletRequest\n    );\n    Assert.assertNotNull(response);\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ((StreamingOutput) response.getEntity()).write(baos);\n    final List<Result<TimeBoundaryResultValue>> responses = JSON_MAPPER.readValue(\n        baos.toByteArray(),\n        new TypeReference<List<Result<TimeBoundaryResultValue>>>() {}\n    );\n\n    Assert.assertNotNull(response);\n    Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n    Assert.assertEquals(0, responses.size());\n    Assert.assertEquals(1, testRequestLogger.getNativeQuerylogs().size());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext());\n    Assert.assertTrue(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().containsKey(overrideConfigKey));\n    Assert.assertEquals(overrideConfigValue, testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().get(overrideConfigKey));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"},{"authorDate":"2021-05-04 13:43:47","commitOrder":2,"curCode":"  public void testGoodQueryWithQueryConfigDoesNotOverrideQueryContext() throws IOException\n  {\n    String overrideConfigKey = \"priority\";\n    String overrideConfigValue = \"678\";\n    DefaultQueryConfig overrideConfig = new DefaultQueryConfig(ImmutableMap.of(overrideConfigKey, overrideConfigValue));\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            TEST_SEGMENT_WALKER,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n            Suppliers.ofInstance(overrideConfig)\n        ),\n        jsonMapper,\n        smileMapper,\n        queryScheduler,\n        new AuthConfig(),\n        null,\n        ResponseContextConfig.newConfig(true),\n        DRUID_NODE\n    );\n\n    expectPermissiveHappyPathAuth();\n\n    Response response = queryResource.doPost(\n        \r\n        new ByteArrayInputStream(SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY.getBytes(StandardCharsets.UTF_8)),\n        null ,\n        testServletRequest\n    );\n    Assert.assertNotNull(response);\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ((StreamingOutput) response.getEntity()).write(baos);\n    final List<Result<TimeBoundaryResultValue>> responses = jsonMapper.readValue(\n        baos.toByteArray(),\n        new TypeReference<List<Result<TimeBoundaryResultValue>>>() {}\n    );\n\n    Assert.assertNotNull(response);\n    Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n    Assert.assertEquals(0, responses.size());\n    Assert.assertEquals(1, testRequestLogger.getNativeQuerylogs().size());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext());\n    Assert.assertTrue(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().containsKey(overrideConfigKey));\n    Assert.assertEquals(-1, testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().get(overrideConfigKey));\n  }\n","date":"2021-05-04 13:43:47","endLine":357,"groupId":"10798","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testGoodQueryWithQueryConfigDoesNotOverrideQueryContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/6af18220878b5785dada0eb6b6e8aaf0d07db2.src","preCode":"  public void testGoodQueryWithQueryConfigDoesNotOverrideQueryContext() throws IOException\n  {\n    String overrideConfigKey = \"priority\";\n    String overrideConfigValue = \"678\";\n    DefaultQueryConfig overrideConfig = new DefaultQueryConfig(ImmutableMap.of(overrideConfigKey, overrideConfigValue));\n    queryResource = new QueryResource(\n        new QueryLifecycleFactory(\n            WAREHOUSE,\n            TEST_SEGMENT_WALKER,\n            new DefaultGenericQueryMetricsFactory(),\n            new NoopServiceEmitter(),\n            testRequestLogger,\n            new AuthConfig(),\n            AuthTestUtils.TEST_AUTHORIZER_MAPPER,\n            Suppliers.ofInstance(overrideConfig)\n        ),\n        JSON_MAPPER,\n        JSON_MAPPER,\n        queryScheduler,\n        new AuthConfig(),\n        null,\n        ResponseContextConfig.newConfig(true),\n        DRUID_NODE\n    );\n\n    expectPermissiveHappyPathAuth();\n\n    Response response = queryResource.doPost(\n        \r\n        new ByteArrayInputStream(SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY.getBytes(StandardCharsets.UTF_8)),\n        null ,\n        testServletRequest\n    );\n    Assert.assertNotNull(response);\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ((StreamingOutput) response.getEntity()).write(baos);\n    final List<Result<TimeBoundaryResultValue>> responses = JSON_MAPPER.readValue(\n        baos.toByteArray(),\n        new TypeReference<List<Result<TimeBoundaryResultValue>>>() {}\n    );\n\n    Assert.assertNotNull(response);\n    Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n    Assert.assertEquals(0, responses.size());\n    Assert.assertEquals(1, testRequestLogger.getNativeQuerylogs().size());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery());\n    Assert.assertNotNull(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext());\n    Assert.assertTrue(testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().containsKey(overrideConfigKey));\n    Assert.assertEquals(-1, testRequestLogger.getNativeQuerylogs().get(0).getQuery().getContext().get(overrideConfigKey));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"204901a602bfb151d473adef8586bc13a065d4d0","commitMessage":"@@@Fix Smile encoding for HTTP response (#10980)\n\n* fix Smile encoding bug\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>\n\n* Add unit tests\n\n* Add IT for smile encoding\n\n* Fix cases\n\n* Update javadoc\n\nCo-authored-by: Jihoon Son <jihoonson@apache.org>\n\n* resolve comments\n\nCo-authored-by: Jihoon Son <jihoonson@apache.org>","date":"2021-05-04 13:43:47","modifiedFileCount":"9","status":"M","submitter":"frank chen"}]
