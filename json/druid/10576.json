[{"authorTime":"2019-07-17 22:18:48","codes":[{"authorDate":"2019-07-17 22:18:48","commitOrder":1,"curCode":"  public void testMarkSegmentAsUsed()\n  {\n    MetadataSegmentManager segmentsMetadata = EasyMock.createMock(MetadataSegmentManager.class);\n    DataSegment segment = dataSegmentList.get(0);\n    EasyMock.expect(segmentsMetadata.markSegmentAsUsed(segment.getId().toString())).andReturn(true).once();\n    EasyMock.replay(segmentsMetadata);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(null, segmentsMetadata, null, null, null);\n\n    Response response = dataSourcesResource.markSegmentAsUsed(segment.getDataSource(), segment.getId().toString());\n    Assert.assertEquals(200, response.getStatus());\n    EasyMock.verify(segmentsMetadata);\n  }\n","date":"2019-07-17 22:18:48","endLine":703,"groupId":"1724","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMarkSegmentAsUsed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cb/463fd517592499ab297c3746d0493dad781109.src","preCode":"  public void testMarkSegmentAsUsed()\n  {\n    MetadataSegmentManager segmentsMetadata = EasyMock.createMock(MetadataSegmentManager.class);\n    DataSegment segment = dataSegmentList.get(0);\n    EasyMock.expect(segmentsMetadata.markSegmentAsUsed(segment.getId().toString())).andReturn(true).once();\n    EasyMock.replay(segmentsMetadata);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(null, segmentsMetadata, null, null, null);\n\n    Response response = dataSourcesResource.markSegmentAsUsed(segment.getDataSource(), segment.getId().toString());\n    Assert.assertEquals(200, response.getStatus());\n    EasyMock.verify(segmentsMetadata);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":691,"status":"B"},{"authorDate":"2019-07-17 22:18:48","commitOrder":1,"curCode":"  public void testMarkSegmentAsUsedNoChange()\n  {\n    MetadataSegmentManager segmentsMetadata = EasyMock.createMock(MetadataSegmentManager.class);\n    DataSegment segment = dataSegmentList.get(0);\n    EasyMock.expect(segmentsMetadata.markSegmentAsUsed(segment.getId().toString())).andReturn(false).once();\n    EasyMock.replay(segmentsMetadata);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(null, segmentsMetadata, null, null, null);\n\n    Response response = dataSourcesResource.markSegmentAsUsed(segment.getDataSource(), segment.getId().toString());\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"segmentStateChanged\", false), response.getEntity());\n    EasyMock.verify(segmentsMetadata);\n  }\n","date":"2019-07-17 22:18:48","endLine":719,"groupId":"1724","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMarkSegmentAsUsedNoChange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cb/463fd517592499ab297c3746d0493dad781109.src","preCode":"  public void testMarkSegmentAsUsedNoChange()\n  {\n    MetadataSegmentManager segmentsMetadata = EasyMock.createMock(MetadataSegmentManager.class);\n    DataSegment segment = dataSegmentList.get(0);\n    EasyMock.expect(segmentsMetadata.markSegmentAsUsed(segment.getId().toString())).andReturn(false).once();\n    EasyMock.replay(segmentsMetadata);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(null, segmentsMetadata, null, null, null);\n\n    Response response = dataSourcesResource.markSegmentAsUsed(segment.getDataSource(), segment.getId().toString());\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"segmentStateChanged\", false), response.getEntity());\n    EasyMock.verify(segmentsMetadata);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":706,"status":"B"}],"commitId":"ceb969903f06a72d669bb55ab83223bddb5355ee","commitMessage":"@@@Refactor SQLMetadataSegmentManager; Change contract of REST met? (#7653)\n\n* Refactor SQLMetadataSegmentManager; Change contract of REST methods in DataSourcesResource\n\n* Style fixes\n\n* Unused imports\n\n* Fix tests\n\n* Fix style\n\n* Comments\n\n* Comment fix\n\n* Remove unresolvable Javadoc references; address comments\n\n* Add comments to ImmutableDruidDataSource\n\n* Merge with master\n\n* Fix bad web-console merge\n\n* Fixes in api-reference.md\n\n* Rename in DruidCoordinatorRuntimeParams\n\n* Fix compilation\n\n* Residual changes\n","date":"2019-07-17 22:18:48","modifiedFileCount":"77","status":"B","submitter":"Roman Leventov"},{"authorTime":"2020-01-28 03:24:29","codes":[{"authorDate":"2020-01-28 03:24:29","commitOrder":2,"curCode":"  public void testMarkSegmentAsUsed()\n  {\n    DataSegment segment = dataSegmentList.get(0);\n    EasyMock.expect(segmentsMetadataManager.markSegmentAsUsed(segment.getId().toString())).andReturn(true).once();\n    EasyMock.replay(segmentsMetadataManager);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(null, segmentsMetadataManager, null, null, null);\n\n    Response response = dataSourcesResource.markSegmentAsUsed(segment.getDataSource(), segment.getId().toString());\n    Assert.assertEquals(200, response.getStatus());\n    EasyMock.verify(segmentsMetadataManager);\n  }\n","date":"2020-01-28 03:24:29","endLine":707,"groupId":"1724","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMarkSegmentAsUsed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/10/a7f97300c93e41c58f8dee06e5d7dc9f50b7cb.src","preCode":"  public void testMarkSegmentAsUsed()\n  {\n    MetadataSegmentManager segmentsMetadata = EasyMock.createMock(MetadataSegmentManager.class);\n    DataSegment segment = dataSegmentList.get(0);\n    EasyMock.expect(segmentsMetadata.markSegmentAsUsed(segment.getId().toString())).andReturn(true).once();\n    EasyMock.replay(segmentsMetadata);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(null, segmentsMetadata, null, null, null);\n\n    Response response = dataSourcesResource.markSegmentAsUsed(segment.getDataSource(), segment.getId().toString());\n    Assert.assertEquals(200, response.getStatus());\n    EasyMock.verify(segmentsMetadata);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":696,"status":"M"},{"authorDate":"2020-01-28 03:24:29","commitOrder":2,"curCode":"  public void testMarkSegmentAsUsedNoChange()\n  {\n    DataSegment segment = dataSegmentList.get(0);\n    EasyMock.expect(segmentsMetadataManager.markSegmentAsUsed(segment.getId().toString())).andReturn(false).once();\n    EasyMock.replay(segmentsMetadataManager);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(null, segmentsMetadataManager, null, null, null);\n\n    Response response = dataSourcesResource.markSegmentAsUsed(segment.getDataSource(), segment.getId().toString());\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"segmentStateChanged\", false), response.getEntity());\n    EasyMock.verify(segmentsMetadataManager);\n  }\n","date":"2020-01-28 03:24:29","endLine":722,"groupId":"1724","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMarkSegmentAsUsedNoChange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/10/a7f97300c93e41c58f8dee06e5d7dc9f50b7cb.src","preCode":"  public void testMarkSegmentAsUsedNoChange()\n  {\n    MetadataSegmentManager segmentsMetadata = EasyMock.createMock(MetadataSegmentManager.class);\n    DataSegment segment = dataSegmentList.get(0);\n    EasyMock.expect(segmentsMetadata.markSegmentAsUsed(segment.getId().toString())).andReturn(false).once();\n    EasyMock.replay(segmentsMetadata);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(null, segmentsMetadata, null, null, null);\n\n    Response response = dataSourcesResource.markSegmentAsUsed(segment.getDataSource(), segment.getId().toString());\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"segmentStateChanged\", false), response.getEntity());\n    EasyMock.verify(segmentsMetadata);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":710,"status":"M"}],"commitId":"b9186f8f9ff2ff52aceda42bc5f24ffd47a7d17e","commitMessage":"@@@Reconcile terminology and method naming to 'used/unused segments'; Rename MetadataSegmentManager to MetadataSegmentsManager (#7306)\n\n* Reconcile terminology and method naming to 'used/unused segments'; Don't use terms 'enable/disable data source'; Rename MetadataSegmentManager to MetadataSegments; Make REST API methods which mark segments as used/unused to return server error instead of an empty response in case of error\n\n* Fix brace\n\n* Import order\n\n* Rename withKillDataSourceWhitelist to withSpecificDataSourcesToKill\n\n* Fix tests\n\n* Fix tests by adding proper methods without interval parameters to IndexerMetadataStorageCoordinator instead of hacking with Intervals.ETERNITY\n\n* More aligned names of DruidCoordinatorHelpers.  rename several CoordinatorDynamicConfig parameters\n\n* Rename ClientCompactTaskQuery to ClientCompactionTaskQuery for consistency with CompactionTask; ClientCompactQueryTuningConfig to ClientCompactionTaskQueryTuningConfig\n\n* More variable and method renames\n\n* Rename MetadataSegments to SegmentsMetadata\n\n* Javadoc update\n\n* Simplify SegmentsMetadata.getUnusedSegmentIntervals().  more javadocs\n\n* Update Javadoc of VersionedIntervalTimeline.iterateAllObjects()\n\n* Reorder imports\n\n* Rename SegmentsMetadata.tryMark... methods to mark... and make them to return boolean and the numbers of segments changed and relay exceptions to callers\n\n* Complete merge\n\n* Add CollectionUtils.newTreeSet(); Refactor DruidCoordinatorRuntimeParams creation in tests\n\n* Remove MetadataSegmentManager\n\n* Rename millisLagSinceCoordinatorBecomesLeaderBeforeCanMarkAsUnusedOvershadowedSegments to leadingTimeMillisBeforeCanMarkAsUnusedOvershadowedSegments\n\n* Fix tests.  refactor DruidCluster creation in tests into DruidClusterBuilder\n\n* Fix inspections\n\n* Fix SQLMetadataSegmentManagerEmptyTest and rename it to SqlSegmentsMetadataEmptyTest\n\n* Rename SegmentsAndMetadata to SegmentsAndCommitMetadata to reduce the similarity with SegmentsMetadata; Rename some methods\n\n* Rename DruidCoordinatorHelper to CoordinatorDuty.  refactor DruidCoordinator\n\n* Unused import\n\n* Optimize imports\n\n* Rename IndexerSQLMetadataStorageCoordinator.getDataSourceMetadata() to retrieveDataSourceMetadata()\n\n* Unused import\n\n* Update terminology in datasource-view.tsx\n\n* Fix label in datasource-view.spec.tsx.snap\n\n* Fix lint errors in datasource-view.tsx\n\n* Doc improvements\n\n* Another attempt to please TSLint\n\n* Another attempt to please TSLint\n\n* Style fixes\n\n* Fix IndexerSQLMetadataStorageCoordinator.createUsedSegmentsSqlQueryForIntervals() (wrong merge)\n\n* Try to fix docs build issue\n\n* Javadoc and spelling fixes\n\n* Rename SegmentsMetadata to SegmentsMetadataManager.  address other comments\n\n* Address more comments\n","date":"2020-01-28 03:24:29","modifiedFileCount":"127","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-06-17 14:48:30","codes":[{"authorDate":"2020-06-17 14:48:30","commitOrder":3,"curCode":"  public void testMarkSegmentAsUsed()\n  {\n    DataSegment segment = dataSegmentList.get(0);\n    EasyMock.expect(segmentsMetadataManager.markSegmentAsUsed(segment.getId().toString())).andReturn(true).once();\n    EasyMock.replay(segmentsMetadataManager);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(null, segmentsMetadataManager, null, null, null, null);\n\n    Response response = dataSourcesResource.markSegmentAsUsed(segment.getDataSource(), segment.getId().toString());\n    Assert.assertEquals(200, response.getStatus());\n    EasyMock.verify(segmentsMetadataManager);\n  }\n","date":"2020-06-17 14:48:30","endLine":711,"groupId":"10576","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMarkSegmentAsUsed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/e02ae86def99bf67659243d8f5ac660473b7a5.src","preCode":"  public void testMarkSegmentAsUsed()\n  {\n    DataSegment segment = dataSegmentList.get(0);\n    EasyMock.expect(segmentsMetadataManager.markSegmentAsUsed(segment.getId().toString())).andReturn(true).once();\n    EasyMock.replay(segmentsMetadataManager);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(null, segmentsMetadataManager, null, null, null);\n\n    Response response = dataSourcesResource.markSegmentAsUsed(segment.getDataSource(), segment.getId().toString());\n    Assert.assertEquals(200, response.getStatus());\n    EasyMock.verify(segmentsMetadataManager);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":700,"status":"M"},{"authorDate":"2020-06-17 14:48:30","commitOrder":3,"curCode":"  public void testMarkSegmentAsUsedNoChange()\n  {\n    DataSegment segment = dataSegmentList.get(0);\n    EasyMock.expect(segmentsMetadataManager.markSegmentAsUsed(segment.getId().toString())).andReturn(false).once();\n    EasyMock.replay(segmentsMetadataManager);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(null, segmentsMetadataManager, null, null, null, null);\n\n    Response response = dataSourcesResource.markSegmentAsUsed(segment.getDataSource(), segment.getId().toString());\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"segmentStateChanged\", false), response.getEntity());\n    EasyMock.verify(segmentsMetadataManager);\n  }\n","date":"2020-06-17 14:48:30","endLine":726,"groupId":"10576","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMarkSegmentAsUsedNoChange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/e02ae86def99bf67659243d8f5ac660473b7a5.src","preCode":"  public void testMarkSegmentAsUsedNoChange()\n  {\n    DataSegment segment = dataSegmentList.get(0);\n    EasyMock.expect(segmentsMetadataManager.markSegmentAsUsed(segment.getId().toString())).andReturn(false).once();\n    EasyMock.replay(segmentsMetadataManager);\n\n    DataSourcesResource dataSourcesResource = new DataSourcesResource(null, segmentsMetadataManager, null, null, null);\n\n    Response response = dataSourcesResource.markSegmentAsUsed(segment.getDataSource(), segment.getId().toString());\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"segmentStateChanged\", false), response.getEntity());\n    EasyMock.verify(segmentsMetadataManager);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":714,"status":"M"}],"commitId":"1a2620606d8187da7725088e9c52ce41b8a692b0","commitMessage":"@@@API to verify a datasource has the latest ingested data (#9965)\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* fix checksyle\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* fix spelling\n\n* address comments\n\n* fix checkstyle\n\n* update docs\n\n* fix tests\n\n* fix doc\n\n* address comments\n\n* fix typo\n\n* fix spelling\n\n* address comments\n\n* address comments\n\n* fix typo in docs","date":"2020-06-17 14:48:30","modifiedFileCount":"7","status":"M","submitter":"Maytas Monsereenusorn"}]
