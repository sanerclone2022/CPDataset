[{"authorTime":"2019-07-25 08:35:46","codes":[{"authorDate":"2019-07-25 08:35:46","commitOrder":1,"curCode":"  public void testOvershadowedByReference()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 0, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 1, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 2, 0));\n\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 0, 1, 0, 3, 1, 2));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 1, 1, 0, 3, 1, 2));\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            makeTimelineObjectHolder(\n                \"2019-01-01/2019-01-02\",\n                \"0\",\n                ImmutableList.of(makeNumbered(\"0\", 0, 0), makeNumbered(\"0\", 1, 0), makeNumbered(\"0\", 2, 0))\n            )\n        ),\n        timeline.findFullyOvershadowed()\n    );\n  }\n","date":"2019-07-25 08:35:46","endLine":1744,"groupId":"5208","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOvershadowedByReference","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/69/71833678f9078ca6e9c474ef4010ba5252a836.src","preCode":"  public void testOvershadowedByReference()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 0, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 1, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 2, 0));\n\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 0, 1, 0, 3, 1, 2));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 1, 1, 0, 3, 1, 2));\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            makeTimelineObjectHolder(\n                \"2019-01-01/2019-01-02\",\n                \"0\",\n                ImmutableList.of(makeNumbered(\"0\", 0, 0), makeNumbered(\"0\", 1, 0), makeNumbered(\"0\", 2, 0))\n            )\n        ),\n        timeline.findFullyOvershadowed()\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1723,"status":"B"},{"authorDate":"2019-07-25 08:35:46","commitOrder":1,"curCode":"  public void testOvershadowedByReferenceAndThenVersion()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    \r\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 0, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 1, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 2, 0));\n\n    \r\n    add(\"2019-01-02/2019-01-03\", \"0\", makeNumbered(\"0\", 0, 0));\n    add(\"2019-01-02/2019-01-03\", \"0\", makeNumbered(\"0\", 1, 0));\n\n    \r\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 0, 1, 0, 3, 1, 2));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 1, 1, 0, 3, 1, 2));\n\n    \r\n    add(\"2019-01-01/2019-01-02\", \"1\", makeNumbered(\"1\", 0, 0));\n    add(\"2019-01-01/2019-01-02\", \"1\", makeNumbered(\"1\", 1, 0));\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            makeTimelineObjectHolder(\n                \"2019-01-01/2019-01-02\",\n                \"0\",\n                ImmutableList.of(\n                    makeNumbered(\"0\", 0, 0),\n                    makeNumbered(\"0\", 1, 0),\n                    makeNumbered(\"0\", 2, 0),\n                    makeNumberedOverwriting(\"0\", 0, 1, 0, 3, 1, 2),\n                    makeNumberedOverwriting(\"0\", 1, 1, 0, 3, 1, 2)\n                )\n            )\n        ),\n        timeline.findFullyOvershadowed()\n    );\n  }\n","date":"2019-07-25 08:35:46","endLine":1824,"groupId":"1149","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvershadowedByReferenceAndThenVersion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/69/71833678f9078ca6e9c474ef4010ba5252a836.src","preCode":"  public void testOvershadowedByReferenceAndThenVersion()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    \r\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 0, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 1, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 2, 0));\n\n    \r\n    add(\"2019-01-02/2019-01-03\", \"0\", makeNumbered(\"0\", 0, 0));\n    add(\"2019-01-02/2019-01-03\", \"0\", makeNumbered(\"0\", 1, 0));\n\n    \r\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 0, 1, 0, 3, 1, 2));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 1, 1, 0, 3, 1, 2));\n\n    \r\n    add(\"2019-01-01/2019-01-02\", \"1\", makeNumbered(\"1\", 0, 0));\n    add(\"2019-01-01/2019-01-02\", \"1\", makeNumbered(\"1\", 1, 0));\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            makeTimelineObjectHolder(\n                \"2019-01-01/2019-01-02\",\n                \"0\",\n                ImmutableList.of(\n                    makeNumbered(\"0\", 0, 0),\n                    makeNumbered(\"0\", 1, 0),\n                    makeNumbered(\"0\", 2, 0),\n                    makeNumberedOverwriting(\"0\", 0, 1, 0, 3, 1, 2),\n                    makeNumberedOverwriting(\"0\", 1, 1, 0, 3, 1, 2)\n                )\n            )\n        ),\n        timeline.findFullyOvershadowed()\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1787,"status":"B"}],"commitId":"db149462073d59e7563f0d3834e69d44a2bb4011","commitMessage":"@@@Add support minor compaction with segment locking (#7547)\n\n* Segment locking\n\n* Allow both timeChunk and segment lock in the same gruop\n\n* fix it test\n\n* Fix adding same chunk to atomicUpdateGroup\n\n* resolving todos\n\n* Fix segments to lock\n\n* fix segments to lock\n\n* fix kill task\n\n* resolving todos\n\n* resolving todos\n\n* fix teamcity\n\n* remove unused class\n\n* fix single map\n\n* resolving todos\n\n* fix build\n\n* fix SQLMetadataSegmentManager\n\n* fix findInputSegments\n\n* adding more tests\n\n* fixing task lock checks\n\n* add SegmentTransactionalOverwriteAction\n\n* changing publisher\n\n* fixing something\n\n* fix for perfect rollup\n\n* fix test\n\n* adjust package-lock.json\n\n* fix test\n\n* fix style\n\n* adding javadocs\n\n* remove unused classes\n\n* add more javadocs\n\n* unused import\n\n* fix test\n\n* fix test\n\n* Support forceTimeChunk context and force timeChunk lock for parallel index task if intervals are missing\n\n* fix travis\n\n* fix travis\n\n* unused import\n\n* spotbug\n\n* revert getMaxVersion\n\n* address comments\n\n* fix tc\n\n* add missing error handling\n\n* fix backward compatibility\n\n* unused import\n\n* Fix perf of versionedIntervalTimeline\n\n* fix timeline\n\n* fix tc\n\n* remove remaining todos\n\n* add comment for parallel index\n\n* fix javadoc and typos\n\n* typo\n\n* address comments\n","date":"2019-07-25 08:35:46","modifiedFileCount":"130","status":"B","submitter":"Jihoon Son"},{"authorTime":"2019-11-07 03:07:04","codes":[{"authorDate":"2019-11-07 03:07:04","commitOrder":2,"curCode":"  public void testOvershadowedByReference()\n  {\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 0, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 1, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 2, 0));\n\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 0, 1, 0, 3, 1, 2));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 1, 1, 0, 3, 1, 2));\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            makeTimelineObjectHolder(\n                \"2019-01-01/2019-01-02\",\n                \"0\",\n                ImmutableList.of(makeNumbered(\"0\", 0, 0), makeNumbered(\"0\", 1, 0), makeNumbered(\"0\", 2, 0))\n            )\n        ),\n        timeline.findFullyOvershadowed()\n    );\n  }\n","date":"2019-11-07 03:07:04","endLine":1253,"groupId":"105187","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOvershadowedByReference","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/ab76c506b668abe29f0cfc4c03fbee37bdc94a.src","preCode":"  public void testOvershadowedByReference()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 0, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 1, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 2, 0));\n\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 0, 1, 0, 3, 1, 2));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 1, 1, 0, 3, 1, 2));\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            makeTimelineObjectHolder(\n                \"2019-01-01/2019-01-02\",\n                \"0\",\n                ImmutableList.of(makeNumbered(\"0\", 0, 0), makeNumbered(\"0\", 1, 0), makeNumbered(\"0\", 2, 0))\n            )\n        ),\n        timeline.findFullyOvershadowed()\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1234,"status":"M"},{"authorDate":"2019-11-07 03:07:04","commitOrder":2,"curCode":"  public void testOvershadowedByReferenceAndThenVersion()\n  {\n    \r\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 0, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 1, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 2, 0));\n\n    \r\n    add(\"2019-01-02/2019-01-03\", \"0\", makeNumbered(\"0\", 0, 0));\n    add(\"2019-01-02/2019-01-03\", \"0\", makeNumbered(\"0\", 1, 0));\n\n    \r\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 0, 1, 0, 3, 1, 2));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 1, 1, 0, 3, 1, 2));\n\n    \r\n    add(\"2019-01-01/2019-01-02\", \"1\", makeNumbered(\"1\", 0, 0));\n    add(\"2019-01-01/2019-01-02\", \"1\", makeNumbered(\"1\", 1, 0));\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            makeTimelineObjectHolder(\n                \"2019-01-01/2019-01-02\",\n                \"0\",\n                ImmutableList.of(\n                    makeNumbered(\"0\", 0, 0),\n                    makeNumbered(\"0\", 1, 0),\n                    makeNumbered(\"0\", 2, 0),\n                    makeNumberedOverwriting(\"0\", 0, 1, 0, 3, 1, 2),\n                    makeNumberedOverwriting(\"0\", 1, 1, 0, 3, 1, 2)\n                )\n            )\n        ),\n        timeline.findFullyOvershadowed()\n    );\n  }\n","date":"2019-11-07 03:07:04","endLine":1329,"groupId":"105187","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOvershadowedByReferenceAndThenVersion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/ab76c506b668abe29f0cfc4c03fbee37bdc94a.src","preCode":"  public void testOvershadowedByReferenceAndThenVersion()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    \r\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 0, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 1, 0));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumbered(\"0\", 2, 0));\n\n    \r\n    add(\"2019-01-02/2019-01-03\", \"0\", makeNumbered(\"0\", 0, 0));\n    add(\"2019-01-02/2019-01-03\", \"0\", makeNumbered(\"0\", 1, 0));\n\n    \r\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 0, 1, 0, 3, 1, 2));\n    add(\"2019-01-01/2019-01-02\", \"0\", makeNumberedOverwriting(\"0\", 1, 1, 0, 3, 1, 2));\n\n    \r\n    add(\"2019-01-01/2019-01-02\", \"1\", makeNumbered(\"1\", 0, 0));\n    add(\"2019-01-01/2019-01-02\", \"1\", makeNumbered(\"1\", 1, 0));\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            makeTimelineObjectHolder(\n                \"2019-01-01/2019-01-02\",\n                \"0\",\n                ImmutableList.of(\n                    makeNumbered(\"0\", 0, 0),\n                    makeNumbered(\"0\", 1, 0),\n                    makeNumbered(\"0\", 2, 0),\n                    makeNumberedOverwriting(\"0\", 0, 1, 0, 3, 1, 2),\n                    makeNumberedOverwriting(\"0\", 1, 1, 0, 3, 1, 2)\n                )\n            )\n        ),\n        timeline.findFullyOvershadowed()\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1294,"status":"M"}],"commitId":"5c0fc0a13ab4d259b430bf50b322f631504c4529","commitMessage":"@@@Fix ambiguity about IndexerSQLMetadataStorageCoordinator.getUsedSegmentsForInterval() returning only non-overshadowed or all used segments (#8564)\n\n* IndexerSQLMetadataStorageCoordinator.getTimelineForIntervalsWithHandle() don't fetch abutting intervals; simplify getUsedSegmentsForIntervals()\n\n* Add VersionedIntervalTimeline.findNonOvershadowedObjectsInInterval() method; Propagate the decision about whether only visible segmetns or visible and overshadowed segments should be returned from IndexerMetadataStorageCoordinator's methods to the user logic; Rename SegmentListUsedAction to RetrieveUsedSegmentsAction.  SegmetnListUnusedAction to RetrieveUnusedSegmentsAction.  and UsedSegmentLister to UsedSegmentsRetriever\n\n* Fix tests\n\n* More fixes\n\n* Add javadoc notes about returning Collection instead of Set. Add JacksonUtils.readValue() to reduce boilerplate code\n\n* Fix KinesisIndexTaskTest.  factor out common parts from KinesisIndexTaskTest and KafkaIndexTaskTest into SeekableStreamIndexTaskTestBase\n\n* More test fixes\n\n* More test fixes\n\n* Add a comment to VersionedIntervalTimelineTestBase\n\n* Fix tests\n\n* Set DataSegment.size(0) in more tests\n\n* Specify DataSegment.size(0) in more places in tests\n\n* Fix more tests\n\n* Fix DruidSchemaTest\n\n* Set DataSegment's size in more tests and benchmarks\n\n* Fix HdfsDataSegmentPusherTest\n\n* Doc changes addressing comments\n\n* Extended doc for visibility\n\n* Typo\n\n* Typo 2\n\n* Address comment\n","date":"2019-11-07 03:07:04","modifiedFileCount":"88","status":"M","submitter":"Roman Leventov"}]
