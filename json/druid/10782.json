[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDropSegment() throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    for (DataSegment eachSegment : segments) {\n      Assert.assertTrue(segmentManager.loadSegment(eachSegment));\n    }\n\n    final List<Future<Void>> futures = ImmutableList.of(segments.get(0), segments.get(2)).stream()\n                                                    .map(\n                                                        segment -> executor.submit(\n                                                            () -> {\n                                                              segmentManager.dropSegment(segment);\n                                                              return (Void) null;\n                                                            }\n                                                        )\n                                                    )\n                                                    .collect(Collectors.toList());\n\n    for (Future<Void> eachFuture : futures) {\n      eachFuture.get();\n    }\n\n    assertResult(\n        ImmutableList.of(segments.get(1), segments.get(3), segments.get(4))\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":259,"groupId":"13691","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropSegment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/aa/a1b04a89fb758d8596dc93c85c025d2e084158.src","preCode":"  public void testDropSegment() throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    for (DataSegment eachSegment : segments) {\n      Assert.assertTrue(segmentManager.loadSegment(eachSegment));\n    }\n\n    final List<Future<Void>> futures = ImmutableList.of(segments.get(0), segments.get(2)).stream()\n                                                    .map(\n                                                        segment -> executor.submit(\n                                                            () -> {\n                                                              segmentManager.dropSegment(segment);\n                                                              return (Void) null;\n                                                            }\n                                                        )\n                                                    )\n                                                    .collect(Collectors.toList());\n\n    for (Future<Void> eachFuture : futures) {\n      eachFuture.get();\n    }\n\n    assertResult(\n        ImmutableList.of(segments.get(1), segments.get(3), segments.get(4))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/SegmentManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testNonExistingSegmentsInParallel()\n      throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    segmentManager.loadSegment(segments.get(0));\n    final List<Future<Void>> futures = ImmutableList.of(segments.get(1), segments.get(2)).stream()\n                                                       .map(\n                                                           segment -> executor.submit(\n                                                               () -> {\n                                                                 segmentManager.dropSegment(segment);\n                                                                 return (Void) null;\n                                                               }\n                                                           )\n                                                       )\n                                                       .collect(Collectors.toList());\n\n    for (Future<Void> future : futures) {\n      future.get();\n    }\n\n    assertResult(ImmutableList.of(segments.get(0)));\n  }\n","date":"2018-08-31 00:56:26","endLine":368,"groupId":"13691","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonExistingSegmentsInParallel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/aa/a1b04a89fb758d8596dc93c85c025d2e084158.src","preCode":"  public void testNonExistingSegmentsInParallel()\n      throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    segmentManager.loadSegment(segments.get(0));\n    final List<Future<Void>> futures = ImmutableList.of(segments.get(1), segments.get(2)).stream()\n                                                       .map(\n                                                           segment -> executor.submit(\n                                                               () -> {\n                                                                 segmentManager.dropSegment(segment);\n                                                                 return (Void) null;\n                                                               }\n                                                           )\n                                                       )\n                                                       .collect(Collectors.toList());\n\n    for (Future<Void> future : futures) {\n      future.get();\n    }\n\n    assertResult(ImmutableList.of(segments.get(0)));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/SegmentManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":2,"curCode":"  public void testDropSegment() throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    for (DataSegment eachSegment : SEGMENTS) {\n      Assert.assertTrue(segmentManager.loadSegment(eachSegment));\n    }\n\n    final List<Future<Void>> futures = ImmutableList.of(SEGMENTS.get(0), SEGMENTS.get(2)).stream()\n                                                    .map(\n                                                        segment -> executor.submit(\n                                                            () -> {\n                                                              segmentManager.dropSegment(segment);\n                                                              return (Void) null;\n                                                            }\n                                                        )\n                                                    )\n                                                    .collect(Collectors.toList());\n\n    for (Future<Void> eachFuture : futures) {\n      eachFuture.get();\n    }\n\n    assertResult(\n        ImmutableList.of(SEGMENTS.get(1), SEGMENTS.get(3), SEGMENTS.get(4))\n    );\n  }\n","date":"2019-08-23 18:13:54","endLine":259,"groupId":"13691","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropSegment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/31/7e9c7f3aca346de3d4620173aee2953c4a922f.src","preCode":"  public void testDropSegment() throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    for (DataSegment eachSegment : segments) {\n      Assert.assertTrue(segmentManager.loadSegment(eachSegment));\n    }\n\n    final List<Future<Void>> futures = ImmutableList.of(segments.get(0), segments.get(2)).stream()\n                                                    .map(\n                                                        segment -> executor.submit(\n                                                            () -> {\n                                                              segmentManager.dropSegment(segment);\n                                                              return (Void) null;\n                                                            }\n                                                        )\n                                                    )\n                                                    .collect(Collectors.toList());\n\n    for (Future<Void> eachFuture : futures) {\n      eachFuture.get();\n    }\n\n    assertResult(\n        ImmutableList.of(segments.get(1), segments.get(3), segments.get(4))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/SegmentManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":2,"curCode":"  public void testNonExistingSegmentsInParallel()\n      throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    segmentManager.loadSegment(SEGMENTS.get(0));\n    final List<Future<Void>> futures = ImmutableList.of(SEGMENTS.get(1), SEGMENTS.get(2))\n                                                    .stream()\n                                                    .map(\n                                                        segment -> executor.submit(\n                                                            () -> {\n                                                              segmentManager.dropSegment(segment);\n                                                              return (Void) null;\n                                                            }\n                                                        )\n                                                    )\n                                                    .collect(Collectors.toList());\n\n    for (Future<Void> future : futures) {\n      future.get();\n    }\n\n    assertResult(ImmutableList.of(SEGMENTS.get(0)));\n  }\n","date":"2019-08-23 18:13:54","endLine":370,"groupId":"13691","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonExistingSegmentsInParallel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/31/7e9c7f3aca346de3d4620173aee2953c4a922f.src","preCode":"  public void testNonExistingSegmentsInParallel()\n      throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    segmentManager.loadSegment(segments.get(0));\n    final List<Future<Void>> futures = ImmutableList.of(segments.get(1), segments.get(2))\n                                                    .stream()\n                                                    .map(\n                                                        segment -> executor.submit(\n                                                            () -> {\n                                                              segmentManager.dropSegment(segment);\n                                                              return (Void) null;\n                                                            }\n                                                        )\n                                                    )\n                                                    .collect(Collectors.toList());\n\n    for (Future<Void> future : futures) {\n      future.get();\n    }\n\n    assertResult(ImmutableList.of(segments.get(0)));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/SegmentManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"},{"authorTime":"2019-12-04 01:47:01","codes":[{"authorDate":"2019-12-04 01:47:01","commitOrder":3,"curCode":"  public void testDropSegment() throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    for (DataSegment eachSegment : SEGMENTS) {\n      Assert.assertTrue(segmentManager.loadSegment(eachSegment, false));\n    }\n\n    final List<Future<Void>> futures = ImmutableList.of(SEGMENTS.get(0), SEGMENTS.get(2)).stream()\n                                                    .map(\n                                                        segment -> executor.submit(\n                                                            () -> {\n                                                              segmentManager.dropSegment(segment);\n                                                              return (Void) null;\n                                                            }\n                                                        )\n                                                    )\n                                                    .collect(Collectors.toList());\n\n    for (Future<Void> eachFuture : futures) {\n      eachFuture.get();\n    }\n\n    assertResult(\n        ImmutableList.of(SEGMENTS.get(1), SEGMENTS.get(3), SEGMENTS.get(4))\n    );\n  }\n","date":"2019-12-04 01:47:01","endLine":259,"groupId":"13691","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropSegment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b6/c9c1671fc33539e493287f8ff5d425aaa2d504.src","preCode":"  public void testDropSegment() throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    for (DataSegment eachSegment : SEGMENTS) {\n      Assert.assertTrue(segmentManager.loadSegment(eachSegment));\n    }\n\n    final List<Future<Void>> futures = ImmutableList.of(SEGMENTS.get(0), SEGMENTS.get(2)).stream()\n                                                    .map(\n                                                        segment -> executor.submit(\n                                                            () -> {\n                                                              segmentManager.dropSegment(segment);\n                                                              return (Void) null;\n                                                            }\n                                                        )\n                                                    )\n                                                    .collect(Collectors.toList());\n\n    for (Future<Void> eachFuture : futures) {\n      eachFuture.get();\n    }\n\n    assertResult(\n        ImmutableList.of(SEGMENTS.get(1), SEGMENTS.get(3), SEGMENTS.get(4))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/SegmentManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"},{"authorDate":"2019-12-04 01:47:01","commitOrder":3,"curCode":"  public void testNonExistingSegmentsInParallel()\n      throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    segmentManager.loadSegment(SEGMENTS.get(0), false);\n    final List<Future<Void>> futures = ImmutableList.of(SEGMENTS.get(1), SEGMENTS.get(2))\n                                                    .stream()\n                                                    .map(\n                                                        segment -> executor.submit(\n                                                            () -> {\n                                                              segmentManager.dropSegment(segment);\n                                                              return (Void) null;\n                                                            }\n                                                        )\n                                                    )\n                                                    .collect(Collectors.toList());\n\n    for (Future<Void> future : futures) {\n      future.get();\n    }\n\n    assertResult(ImmutableList.of(SEGMENTS.get(0)));\n  }\n","date":"2019-12-04 01:47:01","endLine":370,"groupId":"13691","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonExistingSegmentsInParallel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b6/c9c1671fc33539e493287f8ff5d425aaa2d504.src","preCode":"  public void testNonExistingSegmentsInParallel()\n      throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    segmentManager.loadSegment(SEGMENTS.get(0));\n    final List<Future<Void>> futures = ImmutableList.of(SEGMENTS.get(1), SEGMENTS.get(2))\n                                                    .stream()\n                                                    .map(\n                                                        segment -> executor.submit(\n                                                            () -> {\n                                                              segmentManager.dropSegment(segment);\n                                                              return (Void) null;\n                                                            }\n                                                        )\n                                                    )\n                                                    .collect(Collectors.toList());\n\n    for (Future<Void> future : futures) {\n      future.get();\n    }\n\n    assertResult(ImmutableList.of(SEGMENTS.get(0)));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/SegmentManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"}],"commitId":"187cf0dd3f6079077c07a6c8ef10621c26383d17","commitMessage":"@@@[Improvement] historical fast restart by lazy load columns metadata(20X faster) (#6988)\n\n* historical fast restart by lazy load columns metadata\n\n* delete repeated code\n\n* add documentation for druid.segmentCache.lazyLoadOnStart\n\n* fix unit test fail\n\n* fix spellcheck\n\n* update docs\n\n* update docs mentioning a catch\n","date":"2019-12-04 01:47:01","modifiedFileCount":"15","status":"M","submitter":"Fangyuan Deng"},{"authorTime":"2021-01-17 11:53:30","codes":[{"authorDate":"2021-01-17 11:53:30","commitOrder":4,"curCode":"  public void testDropSegment() throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    for (DataSegment eachSegment : SEGMENTS) {\n      Assert.assertTrue(segmentManager.loadSegment(eachSegment, false, SegmentLazyLoadFailCallback.NOOP));\n    }\n\n    final List<Future<Void>> futures = ImmutableList.of(SEGMENTS.get(0), SEGMENTS.get(2)).stream()\n                                                    .map(\n                                                        segment -> executor.submit(\n                                                            () -> {\n                                                              segmentManager.dropSegment(segment);\n                                                              return (Void) null;\n                                                            }\n                                                        )\n                                                    )\n                                                    .collect(Collectors.toList());\n\n    for (Future<Void> eachFuture : futures) {\n      eachFuture.get();\n    }\n\n    assertResult(\n        ImmutableList.of(SEGMENTS.get(1), SEGMENTS.get(3), SEGMENTS.get(4))\n    );\n  }\n","date":"2021-01-17 11:53:30","endLine":263,"groupId":"10782","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDropSegment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/76/2339f7f1f85f9b78fd56c4361f3b8af9f14eb5.src","preCode":"  public void testDropSegment() throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    for (DataSegment eachSegment : SEGMENTS) {\n      Assert.assertTrue(segmentManager.loadSegment(eachSegment, false));\n    }\n\n    final List<Future<Void>> futures = ImmutableList.of(SEGMENTS.get(0), SEGMENTS.get(2)).stream()\n                                                    .map(\n                                                        segment -> executor.submit(\n                                                            () -> {\n                                                              segmentManager.dropSegment(segment);\n                                                              return (Void) null;\n                                                            }\n                                                        )\n                                                    )\n                                                    .collect(Collectors.toList());\n\n    for (Future<Void> eachFuture : futures) {\n      eachFuture.get();\n    }\n\n    assertResult(\n        ImmutableList.of(SEGMENTS.get(1), SEGMENTS.get(3), SEGMENTS.get(4))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/SegmentManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2021-01-17 11:53:30","commitOrder":4,"curCode":"  public void testNonExistingSegmentsInParallel()\n      throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    segmentManager.loadSegment(SEGMENTS.get(0), false, SegmentLazyLoadFailCallback.NOOP);\n    final List<Future<Void>> futures = ImmutableList.of(SEGMENTS.get(1), SEGMENTS.get(2))\n                                                    .stream()\n                                                    .map(\n                                                        segment -> executor.submit(\n                                                            () -> {\n                                                              segmentManager.dropSegment(segment);\n                                                              return (Void) null;\n                                                            }\n                                                        )\n                                                    )\n                                                    .collect(Collectors.toList());\n\n    for (Future<Void> future : futures) {\n      future.get();\n    }\n\n    assertResult(ImmutableList.of(SEGMENTS.get(0)));\n  }\n","date":"2021-01-17 11:53:30","endLine":374,"groupId":"10782","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonExistingSegmentsInParallel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/76/2339f7f1f85f9b78fd56c4361f3b8af9f14eb5.src","preCode":"  public void testNonExistingSegmentsInParallel()\n      throws SegmentLoadingException, ExecutionException, InterruptedException\n  {\n    segmentManager.loadSegment(SEGMENTS.get(0), false);\n    final List<Future<Void>> futures = ImmutableList.of(SEGMENTS.get(1), SEGMENTS.get(2))\n                                                    .stream()\n                                                    .map(\n                                                        segment -> executor.submit(\n                                                            () -> {\n                                                              segmentManager.dropSegment(segment);\n                                                              return (Void) null;\n                                                            }\n                                                        )\n                                                    )\n                                                    .collect(Collectors.toList());\n\n    for (Future<Void> future : futures) {\n      future.get();\n    }\n\n    assertResult(ImmutableList.of(SEGMENTS.get(0)));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/SegmentManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"M"}],"commitId":"2590ad4f67fab99760eb4562d84b34e8aa55f6c1","commitMessage":"@@@Historical unloads damaged segments automatically when lazy on start. (#10688)\n\n* ready to test\n\n* tested on dev cluster\n\n* tested\n\n* code review\n\n* add UTs\n\n* add UTs\n\n* ut passed\n\n* ut passed\n\n* opti imports\n\n* done\n\n* done\n\n* fix checkstyle\n\n* modify uts\n\n* modify logs\n\n* changing the package of SegmentLazyLoadFailCallback.java to org.apache.druid.segment\n\n* merge from master\n\n* modify import orders\n\n* merge from master\n\n* merge from master\n\n* modify logs\n\n* modify docs\n\n* modify logs to rerun ci\n\n* modify logs to rerun ci\n\n* modify logs to rerun ci\n\n* modify logs to rerun ci\n\n* modify logs to rerun ci\n\n* modify logs to rerun ci\n\n* modify logs to rerun ci\n\n* modify logs to rerun ci\n\nCo-authored-by: yuezhang <yuezhang@freewheel.tv>","date":"2021-01-17 11:53:30","modifiedFileCount":"20","status":"M","submitter":"zhangyue19921010"}]
