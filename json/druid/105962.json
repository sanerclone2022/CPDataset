[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDistributeOrCNF()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"6\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"def\", null),\n            new SelectorDimFilter(\"dim2\", \"c\", null)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.convertToCNF(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"2\", null),\n        new SelectorDimFilter(\"dim0\", \"3\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"HELLO\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(Arrays.asList(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"1\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":679,"groupId":"10724","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDistributeOrCNF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ac/d7498eb5d297915485f8a55cfb8f77812d2a95.src","preCode":"  public void testDistributeOrCNF()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"6\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"def\", null),\n            new SelectorDimFilter(\"dim2\", \"c\", null)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.convertToCNF(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"2\", null),\n        new SelectorDimFilter(\"dim0\", \"3\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"HELLO\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(Arrays.asList(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"1\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/FilterPartitionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":628,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDistributeOrCNFExtractionFn()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-6\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-def\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-c\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.convertToCNF(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-2\", JS_EXTRACTION_FN),\n        new SelectorDimFilter(\"dim0\", \"super-3\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-HELLO\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-1\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":732,"groupId":"22703","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDistributeOrCNFExtractionFn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ac/d7498eb5d297915485f8a55cfb8f77812d2a95.src","preCode":"  public void testDistributeOrCNFExtractionFn()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-6\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-def\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-c\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.convertToCNF(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-2\", JS_EXTRACTION_FN),\n        new SelectorDimFilter(\"dim0\", \"super-3\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-HELLO\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-1\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/FilterPartitionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":682,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-01-28 10:01:01","codes":[{"authorDate":"2020-01-28 10:01:01","commitOrder":2,"curCode":"  public void testDistributeOrCNF()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"6\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"abdef\", null),\n            new SelectorDimFilter(\"dim2\", \"c\", null)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.convertToCNF(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"2\", null),\n        new SelectorDimFilter(\"dim0\", \"3\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"HELLO\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(Arrays.asList(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"1\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","date":"2020-01-28 10:01:01","endLine":663,"groupId":"10724","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDistributeOrCNF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bb/76c54620813560b6cc3ce4a710a4f3e064ded8.src","preCode":"  public void testDistributeOrCNF()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"6\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"def\", null),\n            new SelectorDimFilter(\"dim2\", \"c\", null)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.convertToCNF(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"2\", null),\n        new SelectorDimFilter(\"dim0\", \"3\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"HELLO\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(Arrays.asList(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"1\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/FilterPartitionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":612,"status":"M"},{"authorDate":"2020-01-28 10:01:01","commitOrder":2,"curCode":"  public void testDistributeOrCNFExtractionFn()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-6\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-abdef\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-c\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.convertToCNF(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-2\", JS_EXTRACTION_FN),\n        new SelectorDimFilter(\"dim0\", \"super-3\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-HELLO\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-1\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","date":"2020-01-28 10:01:01","endLine":716,"groupId":"22703","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDistributeOrCNFExtractionFn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bb/76c54620813560b6cc3ce4a710a4f3e064ded8.src","preCode":"  public void testDistributeOrCNFExtractionFn()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-6\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-def\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-c\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.convertToCNF(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-2\", JS_EXTRACTION_FN),\n        new SelectorDimFilter(\"dim0\", \"super-3\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-HELLO\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-1\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/FilterPartitionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"M"}],"commitId":"36c5efe2ab88e03b804eb20bf1f138fae2ef1cf9","commitMessage":"@@@fix some issues with filters on numeric columns with nulls (#9251)\n\n* fix issue with long column predicate filters and nulls\n\n* dang\n\n* uncomment a thing\n\n* styles\n\n* oops\n\n* allcaps\n\n* review stuff\n","date":"2020-01-28 10:01:01","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-04-06 13:29:41","codes":[{"authorDate":"2020-04-06 13:29:41","commitOrder":3,"curCode":"  public void testDistributeOrCNF()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"6\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"abdef\", null),\n            new SelectorDimFilter(\"dim2\", \"c\", null)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.toCNF(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"2\", null),\n        new SelectorDimFilter(\"dim0\", \"3\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"HELLO\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(Arrays.asList(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"1\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","date":"2020-04-06 13:29:41","endLine":663,"groupId":"10724","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDistributeOrCNF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/fd167c6a73f9ce18c646631d48aab9c7c3478e.src","preCode":"  public void testDistributeOrCNF()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"6\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"abdef\", null),\n            new SelectorDimFilter(\"dim2\", \"c\", null)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.convertToCNF(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"2\", null),\n        new SelectorDimFilter(\"dim0\", \"3\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"HELLO\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(Arrays.asList(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"1\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/FilterPartitionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":612,"status":"M"},{"authorDate":"2020-04-06 13:29:41","commitOrder":3,"curCode":"  public void testDistributeOrCNFExtractionFn()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-6\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-abdef\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-c\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.toCNF(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-2\", JS_EXTRACTION_FN),\n        new SelectorDimFilter(\"dim0\", \"super-3\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-HELLO\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-1\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","date":"2020-04-06 13:29:41","endLine":716,"groupId":"22703","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDistributeOrCNFExtractionFn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/fd167c6a73f9ce18c646631d48aab9c7c3478e.src","preCode":"  public void testDistributeOrCNFExtractionFn()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-6\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-abdef\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-c\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.convertToCNF(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-2\", JS_EXTRACTION_FN),\n        new SelectorDimFilter(\"dim0\", \"super-3\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-HELLO\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-1\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/FilterPartitionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"M"}],"commitId":"40e84a171b8be8e87db20b0c5c189aef1b860f41","commitMessage":"@@@Eliminate common subfilters when converting it to a CNF (#9608)\n\n","date":"2020-04-06 13:29:41","modifiedFileCount":"16","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-04-09 12:31:17","codes":[{"authorDate":"2020-04-09 12:31:17","commitOrder":4,"curCode":"  public void testDistributeOrCNF()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"6\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"abdef\", null),\n            new SelectorDimFilter(\"dim2\", \"c\", null)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.toCnf(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"2\", null),\n        new SelectorDimFilter(\"dim0\", \"3\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"HELLO\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(Arrays.asList(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"1\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","date":"2020-04-09 12:31:17","endLine":663,"groupId":"105962","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testDistributeOrCNF","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/32/3b6f29d697e82a9a45cfa75d5f83874f5368b8.src","preCode":"  public void testDistributeOrCNF()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"6\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"abdef\", null),\n            new SelectorDimFilter(\"dim2\", \"c\", null)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.toCNF(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"2\", null),\n        new SelectorDimFilter(\"dim0\", \"3\", null),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"HELLO\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(Arrays.asList(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"1\", null),\n            new SelectorDimFilter(\"dim2\", \"foo\", null)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/FilterPartitionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":612,"status":"M"},{"authorDate":"2020-04-09 12:31:17","commitOrder":4,"curCode":"  public void testDistributeOrCNFExtractionFn()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-6\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-abdef\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-c\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.toCnf(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-2\", JS_EXTRACTION_FN),\n        new SelectorDimFilter(\"dim0\", \"super-3\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-HELLO\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-1\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","date":"2020-04-09 12:31:17","endLine":716,"groupId":"105962","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testDistributeOrCNFExtractionFn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/32/3b6f29d697e82a9a45cfa75d5f83874f5368b8.src","preCode":"  public void testDistributeOrCNFExtractionFn()\n  {\n    DimFilter dimFilter1 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-6\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-abdef\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-c\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    Filter filter1 = dimFilter1.toFilter();\n    Filter filter1CNF = Filters.toCNF(filter1);\n\n    Assert.assertEquals(AndFilter.class, filter1CNF.getClass());\n    Assert.assertEquals(2, ((AndFilter) filter1CNF).getFilters().size());\n\n    assertFilterMatches(\n        dimFilter1,\n        ImmutableList.of(\"4\", \"6\")\n    );\n\n    DimFilter dimFilter2 = new OrDimFilter(Arrays.asList(\n        new SelectorDimFilter(\"dim0\", \"super-2\", JS_EXTRACTION_FN),\n        new SelectorDimFilter(\"dim0\", \"super-3\", JS_EXTRACTION_FN),\n        new AndDimFilter(Arrays.asList(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-HELLO\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n        ))\n    );\n\n    assertFilterMatches(\n        dimFilter2,\n        ImmutableList.of(\"2\", \"3\", \"7\")\n    );\n\n    DimFilter dimFilter3 = new OrDimFilter(\n        dimFilter1,\n        dimFilter2,\n        new AndDimFilter(\n            new NoBitmapSelectorDimFilter(\"dim1\", \"super-1\", JS_EXTRACTION_FN),\n            new SelectorDimFilter(\"dim2\", \"super-foo\", JS_EXTRACTION_FN)\n        )\n    );\n\n    assertFilterMatches(\n        dimFilter3,\n        ImmutableList.of(\"2\", \"3\", \"4\", \"6\", \"7\", \"9\")\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/FilterPartitionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"M"}],"commitId":"a6790ff22a9d883d789f3b5de0da02b9d8d19b69","commitMessage":"@@@More optimize CNF conversion of filters (#9634)\n\n* More optimize CNF conversion of filters\n\n* update license\n\n* fix build\n\n* checkstyle\n\n* remove unnecessary code\n\n* split helper\n\n* license\n\n* checkstyle\n\n* add comments on cnf conversion","date":"2020-04-09 12:31:17","modifiedFileCount":"6","status":"M","submitter":"Jihoon Son"}]
