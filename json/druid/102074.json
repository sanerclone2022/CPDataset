[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final DruidExpression druidExpression = Expressions.toDruidExpression(\n        plannerContext,\n        rowSignature,\n        arg\n    );\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return druidExpression.map(\n          simpleExtraction -> null,\n          expression -> StringUtils.format(\"ceil(%s)\", expression)\n      );\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final RexLiteral flag = (RexLiteral) call.getOperands().get(1);\n      final TimeUnitRange timeUnit = (TimeUnitRange) flag.getValue();\n      final PeriodGranularity granularity = TimeUnits.toQueryGranularity(timeUnit, plannerContext.getTimeZone());\n      if (granularity == null) {\n        return null;\n      }\n\n      \r\n      \r\n      return DruidExpression.fromFunctionCall(\n          \"timestamp_ceil\",\n          Arrays.asList(\n              druidExpression.getExpression(),\n              DruidExpression.stringLiteral(granularity.getPeriod().toString()),\n              DruidExpression.numberLiteral(\n                  granularity.getOrigin() == null ? null : granularity.getOrigin().getMillis()\n              ),\n              DruidExpression.stringLiteral(granularity.getTimeZone().toString())\n          ).stream().map(DruidExpression::fromExpression).collect(Collectors.toList())\n      );\n    } else {\n      \r\n      return null;\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":96,"groupId":"8827","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toDruidExpression","params":"(finalPlannerContextplannerContext@finalRowSignaturerowSignature@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1a/7c031559b5529f1fd68b5463664effa37a85a1.src","preCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final DruidExpression druidExpression = Expressions.toDruidExpression(\n        plannerContext,\n        rowSignature,\n        arg\n    );\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return druidExpression.map(\n          simpleExtraction -> null,\n          expression -> StringUtils.format(\"ceil(%s)\", expression)\n      );\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final RexLiteral flag = (RexLiteral) call.getOperands().get(1);\n      final TimeUnitRange timeUnit = (TimeUnitRange) flag.getValue();\n      final PeriodGranularity granularity = TimeUnits.toQueryGranularity(timeUnit, plannerContext.getTimeZone());\n      if (granularity == null) {\n        return null;\n      }\n\n      \r\n      \r\n      return DruidExpression.fromFunctionCall(\n          \"timestamp_ceil\",\n          Arrays.asList(\n              druidExpression.getExpression(),\n              DruidExpression.stringLiteral(granularity.getPeriod().toString()),\n              DruidExpression.numberLiteral(\n                  granularity.getOrigin() == null ? null : granularity.getOrigin().getMillis()\n              ),\n              DruidExpression.stringLiteral(granularity.getTimeZone().toString())\n          ).stream().map(DruidExpression::fromExpression).collect(Collectors.toList())\n      );\n    } else {\n      \r\n      return null;\n    }\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/CeilOperatorConversion.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final DruidExpression druidExpression = Expressions.toDruidExpression(\n        plannerContext,\n        rowSignature,\n        arg\n    );\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return druidExpression.map(\n          simpleExtraction -> null, \r\n          expression -> StringUtils.format(\"floor(%s)\", expression)\n      );\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final RexLiteral flag = (RexLiteral) call.getOperands().get(1);\n      final TimeUnitRange timeUnit = (TimeUnitRange) flag.getValue();\n      final PeriodGranularity granularity = TimeUnits.toQueryGranularity(timeUnit, plannerContext.getTimeZone());\n      if (granularity == null) {\n        return null;\n      }\n\n      return TimeFloorOperatorConversion.applyTimestampFloor(\n          druidExpression,\n          granularity,\n          plannerContext.getExprMacroTable()\n      );\n    } else {\n      \r\n      return null;\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":85,"groupId":"15669","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toDruidExpression","params":"(finalPlannerContextplannerContext@finalRowSignaturerowSignature@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0b/2d2b8cda54d3a2e160180a9a58a7c4bd9d7ffe.src","preCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final DruidExpression druidExpression = Expressions.toDruidExpression(\n        plannerContext,\n        rowSignature,\n        arg\n    );\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return druidExpression.map(\n          simpleExtraction -> null, \r\n          expression -> StringUtils.format(\"floor(%s)\", expression)\n      );\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final RexLiteral flag = (RexLiteral) call.getOperands().get(1);\n      final TimeUnitRange timeUnit = (TimeUnitRange) flag.getValue();\n      final PeriodGranularity granularity = TimeUnits.toQueryGranularity(timeUnit, plannerContext.getTimeZone());\n      if (granularity == null) {\n        return null;\n      }\n\n      return TimeFloorOperatorConversion.applyTimestampFloor(\n          druidExpression,\n          granularity,\n          plannerContext.getExprMacroTable()\n      );\n    } else {\n      \r\n      return null;\n    }\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/FloorOperatorConversion.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-12-01 08:12:56","commitOrder":2,"curCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final DruidExpression druidExpression = Expressions.toDruidExpression(\n        plannerContext,\n        rowSignature,\n        arg\n    );\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return druidExpression.map(\n          simpleExtraction -> null,\n          expression -> StringUtils.format(\"ceil(%s)\", expression)\n      );\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final RexLiteral flag = (RexLiteral) call.getOperands().get(1);\n      final TimeUnitRange timeUnit = (TimeUnitRange) flag.getValue();\n      final PeriodGranularity granularity = TimeUnits.toQueryGranularity(timeUnit, plannerContext.getTimeZone());\n      if (granularity == null) {\n        return null;\n      }\n\n      \r\n      \r\n      return DruidExpression.fromFunctionCall(\n          \"timestamp_ceil\",\n          Stream\n              .of(\n                  druidExpression.getExpression(),\n                  DruidExpression.stringLiteral(granularity.getPeriod().toString()),\n                  DruidExpression.numberLiteral(\n                      granularity.getOrigin() == null ? null : granularity.getOrigin().getMillis()\n                  ),\n                  DruidExpression.stringLiteral(granularity.getTimeZone().toString())\n              )\n              .map(DruidExpression::fromExpression)\n              .collect(Collectors.toList())\n      );\n    } else {\n      \r\n      return null;\n    }\n  }\n","date":"2018-12-01 08:12:56","endLine":99,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toDruidExpression","params":"(finalPlannerContextplannerContext@finalRowSignaturerowSignature@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7f/0ab00f08cfbdc50a7286fb3e0e3c1e5a036051.src","preCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final DruidExpression druidExpression = Expressions.toDruidExpression(\n        plannerContext,\n        rowSignature,\n        arg\n    );\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return druidExpression.map(\n          simpleExtraction -> null,\n          expression -> StringUtils.format(\"ceil(%s)\", expression)\n      );\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final RexLiteral flag = (RexLiteral) call.getOperands().get(1);\n      final TimeUnitRange timeUnit = (TimeUnitRange) flag.getValue();\n      final PeriodGranularity granularity = TimeUnits.toQueryGranularity(timeUnit, plannerContext.getTimeZone());\n      if (granularity == null) {\n        return null;\n      }\n\n      \r\n      \r\n      return DruidExpression.fromFunctionCall(\n          \"timestamp_ceil\",\n          Arrays.asList(\n              druidExpression.getExpression(),\n              DruidExpression.stringLiteral(granularity.getPeriod().toString()),\n              DruidExpression.numberLiteral(\n                  granularity.getOrigin() == null ? null : granularity.getOrigin().getMillis()\n              ),\n              DruidExpression.stringLiteral(granularity.getTimeZone().toString())\n          ).stream().map(DruidExpression::fromExpression).collect(Collectors.toList())\n      );\n    } else {\n      \r\n      return null;\n    }\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/CeilOperatorConversion.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final DruidExpression druidExpression = Expressions.toDruidExpression(\n        plannerContext,\n        rowSignature,\n        arg\n    );\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return druidExpression.map(\n          simpleExtraction -> null, \r\n          expression -> StringUtils.format(\"floor(%s)\", expression)\n      );\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final RexLiteral flag = (RexLiteral) call.getOperands().get(1);\n      final TimeUnitRange timeUnit = (TimeUnitRange) flag.getValue();\n      final PeriodGranularity granularity = TimeUnits.toQueryGranularity(timeUnit, plannerContext.getTimeZone());\n      if (granularity == null) {\n        return null;\n      }\n\n      return TimeFloorOperatorConversion.applyTimestampFloor(\n          druidExpression,\n          granularity,\n          plannerContext.getExprMacroTable()\n      );\n    } else {\n      \r\n      return null;\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":85,"groupId":"15669","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toDruidExpression","params":"(finalPlannerContextplannerContext@finalRowSignaturerowSignature@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0b/2d2b8cda54d3a2e160180a9a58a7c4bd9d7ffe.src","preCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final DruidExpression druidExpression = Expressions.toDruidExpression(\n        plannerContext,\n        rowSignature,\n        arg\n    );\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return druidExpression.map(\n          simpleExtraction -> null, \r\n          expression -> StringUtils.format(\"floor(%s)\", expression)\n      );\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final RexLiteral flag = (RexLiteral) call.getOperands().get(1);\n      final TimeUnitRange timeUnit = (TimeUnitRange) flag.getValue();\n      final PeriodGranularity granularity = TimeUnits.toQueryGranularity(timeUnit, plannerContext.getTimeZone());\n      if (granularity == null) {\n        return null;\n      }\n\n      return TimeFloorOperatorConversion.applyTimestampFloor(\n          druidExpression,\n          granularity,\n          plannerContext.getExprMacroTable()\n      );\n    } else {\n      \r\n      return null;\n    }\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/FloorOperatorConversion.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"}],"commitId":"ec38df75756b975461bf1234e26cd195c462107d","commitMessage":"@@@Simplify DruidNodeDiscoveryProvider; add DruidNodeDiscovery.Listener.nodeViewInitialized() (#6606)\n\n* Simplify DruidNodeDiscoveryProvider; add DruidNodeDiscovery.Listener.nodeViewInitialized() method; prohibit and eliminate some suboptimal Java 8 patterns\n\n* Fix style\n\n* Fix HttpEmitterTest.timeoutEmptyQueue()\n\n* Add DruidNodeDiscovery.Listener.nodeViewInitialized() calls in tests\n\n* Clarify code\n","date":"2018-12-01 08:12:56","modifiedFileCount":"25","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-07-05 06:40:03","codes":[{"authorDate":"2019-07-05 06:40:03","commitOrder":3,"curCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n\n    if (call.getOperands().size() == 1) {\n      \r\n      return OperatorConversions.convertCall(plannerContext, rowSignature, call, \"ceil\");\n    } else if (call.getOperands().size() == 2) {\n      \r\n      return DruidExpression.fromFunctionCall(\n          \"timestamp_ceil\",\n          TimeFloorOperatorConversion.toTimestampFloorOrCeilArgs(plannerContext, rowSignature, call.getOperands())\n      );\n    } else {\n      \r\n      return null;\n    }\n  }\n","date":"2019-07-05 06:40:03","endLine":65,"groupId":"18650","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"toDruidExpression","params":"(finalPlannerContextplannerContext@finalRowSignaturerowSignature@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d1/1f84cbf2c08c6e39e4e374a745b52c0b192da9.src","preCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final DruidExpression druidExpression = Expressions.toDruidExpression(\n        plannerContext,\n        rowSignature,\n        arg\n    );\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return druidExpression.map(\n          simpleExtraction -> null,\n          expression -> StringUtils.format(\"ceil(%s)\", expression)\n      );\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final RexLiteral flag = (RexLiteral) call.getOperands().get(1);\n      final TimeUnitRange timeUnit = (TimeUnitRange) flag.getValue();\n      final PeriodGranularity granularity = TimeUnits.toQueryGranularity(timeUnit, plannerContext.getTimeZone());\n      if (granularity == null) {\n        return null;\n      }\n\n      \r\n      \r\n      return DruidExpression.fromFunctionCall(\n          \"timestamp_ceil\",\n          Stream\n              .of(\n                  druidExpression.getExpression(),\n                  DruidExpression.stringLiteral(granularity.getPeriod().toString()),\n                  DruidExpression.numberLiteral(\n                      granularity.getOrigin() == null ? null : granularity.getOrigin().getMillis()\n                  ),\n                  DruidExpression.stringLiteral(granularity.getTimeZone().toString())\n              )\n              .map(DruidExpression::fromExpression)\n              .collect(Collectors.toList())\n      );\n    } else {\n      \r\n      return null;\n    }\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/CeilOperatorConversion.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2019-07-05 06:40:03","commitOrder":3,"curCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n\n    if (call.getOperands().size() == 1) {\n      \r\n      return OperatorConversions.convertCall(plannerContext, rowSignature, call, \"floor\");\n    } else if (call.getOperands().size() == 2) {\n      \r\n      return DruidExpression.fromFunctionCall(\n          \"timestamp_floor\",\n          TimeFloorOperatorConversion.toTimestampFloorOrCeilArgs(plannerContext, rowSignature, call.getOperands())\n      );\n    } else {\n      \r\n      return null;\n    }\n  }\n","date":"2019-07-05 06:40:03","endLine":65,"groupId":"18650","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"toDruidExpression","params":"(finalPlannerContextplannerContext@finalRowSignaturerowSignature@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b8/9034381615b23716de9338c694015746029c29.src","preCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n    final RexNode arg = call.getOperands().get(0);\n    final DruidExpression druidExpression = Expressions.toDruidExpression(\n        plannerContext,\n        rowSignature,\n        arg\n    );\n    if (druidExpression == null) {\n      return null;\n    } else if (call.getOperands().size() == 1) {\n      \r\n      return druidExpression.map(\n          simpleExtraction -> null, \r\n          expression -> StringUtils.format(\"floor(%s)\", expression)\n      );\n    } else if (call.getOperands().size() == 2) {\n      \r\n      final RexLiteral flag = (RexLiteral) call.getOperands().get(1);\n      final TimeUnitRange timeUnit = (TimeUnitRange) flag.getValue();\n      final PeriodGranularity granularity = TimeUnits.toQueryGranularity(timeUnit, plannerContext.getTimeZone());\n      if (granularity == null) {\n        return null;\n      }\n\n      return TimeFloorOperatorConversion.applyTimestampFloor(\n          druidExpression,\n          granularity,\n          plannerContext.getExprMacroTable()\n      );\n    } else {\n      \r\n      return null;\n    }\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/FloorOperatorConversion.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"613f09b45a287c169f288aa3f53eb13d21e79249","commitMessage":"@@@SQL: Add TIME_CEIL function. (#8027)\n\nAlso simplify conversions for CEIL.  FLOOR.  and TIME_FLOOR by allowing them to\nshare more code.","date":"2019-07-05 06:40:03","modifiedFileCount":"6","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-08-29 02:38:50","codes":[{"authorDate":"2020-08-29 02:38:50","commitOrder":4,"curCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n\n    if (call.getOperands().size() == 1) {\n      \r\n      return OperatorConversions.convertCall(plannerContext, rowSignature, call, \"ceil\");\n    } else if (call.getOperands().size() == 2) {\n      \r\n      return DruidExpression.fromFunctionCall(\n          \"timestamp_ceil\",\n          TimeFloorOperatorConversion.toTimestampFloorOrCeilArgs(plannerContext, rowSignature, call.getOperands())\n      );\n    } else {\n      throw new ISE(\"Unexpected number of arguments\");\n    }\n  }\n","date":"2020-08-29 02:38:50","endLine":65,"groupId":"102074","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"toDruidExpression","params":"(finalPlannerContextplannerContext@finalRowSignaturerowSignature@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/58/8a2fe80a06d89158dfc186ec594a940abff578.src","preCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n\n    if (call.getOperands().size() == 1) {\n      \r\n      return OperatorConversions.convertCall(plannerContext, rowSignature, call, \"ceil\");\n    } else if (call.getOperands().size() == 2) {\n      \r\n      return DruidExpression.fromFunctionCall(\n          \"timestamp_ceil\",\n          TimeFloorOperatorConversion.toTimestampFloorOrCeilArgs(plannerContext, rowSignature, call.getOperands())\n      );\n    } else {\n      \r\n      return null;\n    }\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/CeilOperatorConversion.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2020-08-29 02:38:50","commitOrder":4,"curCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n\n    if (call.getOperands().size() == 1) {\n      \r\n      return OperatorConversions.convertCall(plannerContext, rowSignature, call, \"floor\");\n    } else if (call.getOperands().size() == 2) {\n      \r\n      return DruidExpression.fromFunctionCall(\n          \"timestamp_floor\",\n          TimeFloorOperatorConversion.toTimestampFloorOrCeilArgs(plannerContext, rowSignature, call.getOperands())\n      );\n    } else {\n      throw new ISE(\"Unexpected number of arguments\");\n    }\n  }\n","date":"2020-08-29 02:38:50","endLine":65,"groupId":"102074","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"toDruidExpression","params":"(finalPlannerContextplannerContext@finalRowSignaturerowSignature@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/be/8d891fc03b9c567c05d38c02683ca5d25f648c.src","preCode":"  public DruidExpression toDruidExpression(\n      final PlannerContext plannerContext,\n      final RowSignature rowSignature,\n      final RexNode rexNode\n  )\n  {\n    final RexCall call = (RexCall) rexNode;\n\n    if (call.getOperands().size() == 1) {\n      \r\n      return OperatorConversions.convertCall(plannerContext, rowSignature, call, \"floor\");\n    } else if (call.getOperands().size() == 2) {\n      \r\n      return DruidExpression.fromFunctionCall(\n          \"timestamp_floor\",\n          TimeFloorOperatorConversion.toTimestampFloorOrCeilArgs(plannerContext, rowSignature, call.getOperands())\n      );\n    } else {\n      \r\n      return null;\n    }\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/FloorOperatorConversion.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"8ab19793043c65bd79315de6fb26683f561a8a58","commitMessage":"@@@Remove implied profanity from error messages. (#10270)\n\ni.e. WTF.  WTH.","date":"2020-08-29 02:38:50","modifiedFileCount":"76","status":"M","submitter":"Gian Merlino"}]
