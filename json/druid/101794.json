[{"authorTime":"2020-02-27 00:52:39","codes":[{"authorDate":"2020-02-27 00:52:39","commitOrder":1,"curCode":"  public void testGroupingSetsWithOrderByDimension() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (), (dim2), (gran) )\\n\"\n        + \"ORDER BY gran, dim2 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"v0\"),\n                                new DefaultDimensionSpec(\"v1\", \"v1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"v0\"),\n                                ImmutableList.of(\"v1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"v1\",\n                                        Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    ),\n                                    new OrderByColumnSpec(\n                                        \"v0\",\n                                        Direction.DESCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", null, 1L},\n            new Object[]{\"a\", null, 2L},\n            new Object[]{\"\", null, 3L},\n            new Object[]{NULL_STRING, null, 6L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L}\n        )\n    );\n  }\n","date":"2020-02-27 00:52:39","endLine":10059,"groupId":"1855","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupingSetsWithOrderByDimension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e2/30635476fcc90ed43f6d3837aae991c2f12c82.src","preCode":"  public void testGroupingSetsWithOrderByDimension() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (), (dim2), (gran) )\\n\"\n        + \"ORDER BY gran, dim2 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"v0\"),\n                                new DefaultDimensionSpec(\"v1\", \"v1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"v0\"),\n                                ImmutableList.of(\"v1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"v1\",\n                                        Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    ),\n                                    new OrderByColumnSpec(\n                                        \"v0\",\n                                        Direction.DESCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", null, 1L},\n            new Object[]{\"a\", null, 2L},\n            new Object[]{\"\", null, 3L},\n            new Object[]{NULL_STRING, null, 6L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":9989,"status":"B"},{"authorDate":"2020-02-27 00:52:39","commitOrder":1,"curCode":"  public void testGroupingSetsWithOrderByAggregatorWithLimit() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (), (dim2), (gran) )\\n\"\n        + \"ORDER BY SUM(cnt)\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"v0\"),\n                                new DefaultDimensionSpec(\"v1\", \"v1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"v0\"),\n                                ImmutableList.of(\"v1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"a0\",\n                                        Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                1\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", null, 1L}\n        )\n    );\n  }\n","date":"2020-02-27 00:52:39","endLine":10191,"groupId":"6110","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupingSetsWithOrderByAggregatorWithLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e2/30635476fcc90ed43f6d3837aae991c2f12c82.src","preCode":"  public void testGroupingSetsWithOrderByAggregatorWithLimit() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (), (dim2), (gran) )\\n\"\n        + \"ORDER BY SUM(cnt)\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"v0\"),\n                                new DefaultDimensionSpec(\"v1\", \"v1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"v0\"),\n                                ImmutableList.of(\"v1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"a0\",\n                                        Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                1\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", null, 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":10130,"status":"B"}],"commitId":"c9faf3e148ad1a1931b3fa5e6e7f00fb1370426c","commitMessage":"@@@Add SQL GROUPING SETS support. (#9122)\n\n* Add SQL GROUPING SETS support.\n\nBuilt on top of the subtotalsSpec feature in the groupBy query. This also involves\ntwo changes to subtotalsSpec:\n\n- Alter behavior so limitSpec is applied after subtotalsSpec.  rather than applied to\n  each grouping set. This is more in line with SQL standard behavior. I think it is okay\n  to make this change.  since the old behavior was not documented.  so users should\n  hopefully not be depending on it.\n- Fix a bug where virtual columns were included in the subtotal queries.  but they\n  should not have been.\n\nAlso fixes two bugs in query equality checking:\n\n- BaseQuery: Use getDuration() instead of \"duration\" in equals and hashCode.  since the\n  latter is lazily initialized and might be null in one query but not the other.\n- GroupByQuery: Include subtotalsSpec in equals and hashCode.\n\n* Fix bugs.\n\n* Fix tests.\n\n* PR updates.\n\n* Grouping class hygiene.\n","date":"2020-02-27 00:52:39","modifiedFileCount":"9","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-03-10 08:48:29","codes":[{"authorDate":"2020-03-10 08:48:29","commitOrder":2,"curCode":"  public void testGroupingSetsWithOrderByDimension() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (), (dim2), (gran) )\\n\"\n        + \"ORDER BY gran, dim2 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d1\",\n                                        Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    ),\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        Direction.DESCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", null, 1L},\n            new Object[]{\"a\", null, 2L},\n            new Object[]{\"\", null, 3L},\n            new Object[]{NULL_STRING, null, 6L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L}\n        )\n    );\n  }\n","date":"2020-03-10 08:48:29","endLine":10059,"groupId":"1855","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupingSetsWithOrderByDimension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/76/cd55b72e7df3dc0e964e31bd267448f02f3a1f.src","preCode":"  public void testGroupingSetsWithOrderByDimension() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (), (dim2), (gran) )\\n\"\n        + \"ORDER BY gran, dim2 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"v0\"),\n                                new DefaultDimensionSpec(\"v1\", \"v1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"v0\"),\n                                ImmutableList.of(\"v1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"v1\",\n                                        Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    ),\n                                    new OrderByColumnSpec(\n                                        \"v0\",\n                                        Direction.DESCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", null, 1L},\n            new Object[]{\"a\", null, 2L},\n            new Object[]{\"\", null, 3L},\n            new Object[]{NULL_STRING, null, 6L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":9989,"status":"M"},{"authorDate":"2020-03-10 08:48:29","commitOrder":2,"curCode":"  public void testGroupingSetsWithOrderByAggregatorWithLimit() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (), (dim2), (gran) )\\n\"\n        + \"ORDER BY SUM(cnt)\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"a0\",\n                                        Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                1\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", null, 1L}\n        )\n    );\n  }\n","date":"2020-03-10 08:48:29","endLine":10191,"groupId":"6110","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupingSetsWithOrderByAggregatorWithLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/76/cd55b72e7df3dc0e964e31bd267448f02f3a1f.src","preCode":"  public void testGroupingSetsWithOrderByAggregatorWithLimit() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (), (dim2), (gran) )\\n\"\n        + \"ORDER BY SUM(cnt)\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"v0\"),\n                                new DefaultDimensionSpec(\"v1\", \"v1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"v0\"),\n                                ImmutableList.of(\"v1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"a0\",\n                                        Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                1\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", null, 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":10130,"status":"M"}],"commitId":"f8b1f2f7f3fe6d49cbb5f19bfe6196a5b716b3ef","commitMessage":"@@@fix issue when distinct grouping dimensions are optimized into the same virtual column expression (#9429)\n\n* fix issue when distinct grouping dimensions are optimized into the same virtual column expression\n\n* fix tests\n\n* more better\n\n* fixes","date":"2020-03-10 08:48:29","modifiedFileCount":"8","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-07-12 01:22:47","codes":[{"authorDate":"2021-07-12 01:22:47","commitOrder":3,"curCode":"  public void testGroupingSetsWithOrderByDimension() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (), (dim2), (gran) )\\n\"\n        + \"ORDER BY gran, dim2 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d1\",\n                                        Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    ),\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        Direction.DESCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(withTimestampResultContext(QUERY_CONTEXT_DEFAULT, \"d1\", 1, Granularities.MONTH))\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", null, 1L},\n            new Object[]{\"a\", null, 2L},\n            new Object[]{\"\", null, 3L},\n            new Object[]{NULL_STRING, null, 6L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L}\n        )\n    );\n  }\n","date":"2021-07-12 01:22:47","endLine":13973,"groupId":"101794","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupingSetsWithOrderByDimension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/77/2d91e626aa3be9648b2dea37c462ae341a18dc.src","preCode":"  public void testGroupingSetsWithOrderByDimension() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (), (dim2), (gran) )\\n\"\n        + \"ORDER BY gran, dim2 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d1\",\n                                        Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    ),\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        Direction.DESCENDING,\n                                        StringComparators.LEXICOGRAPHIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", null, 1L},\n            new Object[]{\"a\", null, 2L},\n            new Object[]{\"\", null, 3L},\n            new Object[]{NULL_STRING, null, 6L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":13903,"status":"M"},{"authorDate":"2021-07-12 01:22:47","commitOrder":3,"curCode":"  public void testGroupingSetsWithOrderByAggregatorWithLimit() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (), (dim2), (gran) )\\n\"\n        + \"ORDER BY SUM(cnt)\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"a0\",\n                                        Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                1\n                            )\n                        )\n                        .setContext(withTimestampResultContext(QUERY_CONTEXT_DEFAULT, \"d1\", 1, Granularities.MONTH))\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", null, 1L}\n        )\n    );\n  }\n","date":"2021-07-12 01:22:47","endLine":14105,"groupId":"101794","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupingSetsWithOrderByAggregatorWithLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/77/2d91e626aa3be9648b2dea37c462ae341a18dc.src","preCode":"  public void testGroupingSetsWithOrderByAggregatorWithLimit() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (), (dim2), (gran) )\\n\"\n        + \"ORDER BY SUM(cnt)\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"a0\",\n                                        Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                1\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", null, 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":14044,"status":"M"}],"commitId":"e39ff44481703499394feac82d467e6999d05d47","commitMessage":"@@@improve groupBy query granularity translation with 2x query performance improve when issued from sql layer (#11379)\n\n* improve groupBy query granularity translation when issued from sql layer\n\n* fix style\n\n* use virtual column to determine timestampResult granularity\n\n* dont' apply postaggregators on compute nodes\n\n* relocate constants\n\n* fix order by correctness issue\n\n* fix ut\n\n* use more easier understanding code in DefaultLimitSpec\n\n* address comment\n\n* rollback use virtual column to determine timestampResult granularity\n\n* fix style\n\n* fix style\n\n* address the comment\n\n* add more detail document to explain the tradeoff\n\n* address the comment\n\n* address the comment","date":"2021-07-12 01:22:47","modifiedFileCount":"7","status":"M","submitter":"kaijianding"}]
