[{"authorTime":"2021-04-23 09:30:16","codes":[{"authorDate":"2021-04-23 09:30:16","commitOrder":1,"curCode":"  public void testStringArrayType()\n  {\n    ExpressionLambdaAggregatorFactory agg = new ExpressionLambdaAggregatorFactory(\n        \"expr_agg_name\",\n        ImmutableSet.of(\"some_column\", \"some_other_column\"),\n        null,\n        \"''\",\n        \"<STRING>[]\",\n        \"concat(__acc, some_column, some_other_column)\",\n        \"array_set_add(__acc, expr_agg_name)\",\n        null,\n        null,\n        new HumanReadableBytes(2048),\n        TestExprMacroTable.INSTANCE\n    );\n\n    Assert.assertEquals(ValueType.STRING, agg.getType());\n    Assert.assertEquals(ValueType.STRING_ARRAY, agg.getCombiningFactory().getType());\n    Assert.assertEquals(ValueType.STRING_ARRAY, agg.getFinalizedType());\n  }\n","date":"2021-04-23 09:30:16","endLine":285,"groupId":"2165","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringArrayType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5b/5c2960af1b2644d6ad439bf409e669231a83ce.src","preCode":"  public void testStringArrayType()\n  {\n    ExpressionLambdaAggregatorFactory agg = new ExpressionLambdaAggregatorFactory(\n        \"expr_agg_name\",\n        ImmutableSet.of(\"some_column\", \"some_other_column\"),\n        null,\n        \"''\",\n        \"<STRING>[]\",\n        \"concat(__acc, some_column, some_other_column)\",\n        \"array_set_add(__acc, expr_agg_name)\",\n        null,\n        null,\n        new HumanReadableBytes(2048),\n        TestExprMacroTable.INSTANCE\n    );\n\n    Assert.assertEquals(ValueType.STRING, agg.getType());\n    Assert.assertEquals(ValueType.STRING_ARRAY, agg.getCombiningFactory().getType());\n    Assert.assertEquals(ValueType.STRING_ARRAY, agg.getFinalizedType());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/ExpressionLambdaAggregatorFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"B"},{"authorDate":"2021-04-23 09:30:16","commitOrder":1,"curCode":"  public void testDoubleArrayType()\n  {\n    ExpressionLambdaAggregatorFactory agg = new ExpressionLambdaAggregatorFactory(\n        \"expr_agg_name\",\n        ImmutableSet.of(\"some_column\", \"some_other_column\"),\n        null,\n        \"0.0\",\n        \"<DOUBLE>[]\",\n        \"__acc + some_column + some_other_column\",\n        \"array_set_add(__acc, expr_agg_name)\",\n        null,\n        null,\n        new HumanReadableBytes(2048),\n        TestExprMacroTable.INSTANCE\n    );\n\n    Assert.assertEquals(ValueType.DOUBLE, agg.getType());\n    Assert.assertEquals(ValueType.DOUBLE_ARRAY, agg.getCombiningFactory().getType());\n    Assert.assertEquals(ValueType.DOUBLE_ARRAY, agg.getFinalizedType());\n  }\n","date":"2021-04-23 09:30:16","endLine":373,"groupId":"2165","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDoubleArrayType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5b/5c2960af1b2644d6ad439bf409e669231a83ce.src","preCode":"  public void testDoubleArrayType()\n  {\n    ExpressionLambdaAggregatorFactory agg = new ExpressionLambdaAggregatorFactory(\n        \"expr_agg_name\",\n        ImmutableSet.of(\"some_column\", \"some_other_column\"),\n        null,\n        \"0.0\",\n        \"<DOUBLE>[]\",\n        \"__acc + some_column + some_other_column\",\n        \"array_set_add(__acc, expr_agg_name)\",\n        null,\n        null,\n        new HumanReadableBytes(2048),\n        TestExprMacroTable.INSTANCE\n    );\n\n    Assert.assertEquals(ValueType.DOUBLE, agg.getType());\n    Assert.assertEquals(ValueType.DOUBLE_ARRAY, agg.getCombiningFactory().getType());\n    Assert.assertEquals(ValueType.DOUBLE_ARRAY, agg.getFinalizedType());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/ExpressionLambdaAggregatorFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"B"}],"commitId":"57ff1f9cdb45370df1467fef03222909700fa768","commitMessage":"@@@expression aggregator (#11104)\n\n* add experimental expression aggregator\n\n* add test\n\n* fix lgtm\n\n* fix test\n\n* adjust test\n\n* use not null constant\n\n* array_set_concat docs\n\n* add equals and hashcode and tostring\n\n* fix it\n\n* spelling\n\n* do multi-value magic for expression agg.  more javadocs.  tests\n\n* formatting\n\n* fix inspection\n\n* more better\n\n* nullable","date":"2021-04-23 09:30:16","modifiedFileCount":"25","status":"B","submitter":"Clint Wylie"},{"authorTime":"2021-06-26 07:51:16","codes":[{"authorDate":"2021-06-26 07:51:16","commitOrder":2,"curCode":"  public void testStringArrayType()\n  {\n    ExpressionLambdaAggregatorFactory agg = new ExpressionLambdaAggregatorFactory(\n        \"expr_agg_name\",\n        ImmutableSet.of(\"some_column\", \"some_other_column\"),\n        null,\n        \"''\",\n        \"<STRING>[]\",\n        null,\n        \"concat(__acc, some_column, some_other_column)\",\n        \"array_set_add(__acc, expr_agg_name)\",\n        null,\n        null,\n        new HumanReadableBytes(2048),\n        TestExprMacroTable.INSTANCE\n    );\n\n    Assert.assertEquals(ValueType.STRING, agg.getType());\n    Assert.assertEquals(ValueType.STRING_ARRAY, agg.getCombiningFactory().getType());\n    Assert.assertEquals(ValueType.STRING_ARRAY, agg.getFinalizedType());\n  }\n","date":"2021-06-26 07:51:16","endLine":296,"groupId":"106879","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testStringArrayType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f4/e8a148597007ddd0685ecb0be83cf4ec967d4d.src","preCode":"  public void testStringArrayType()\n  {\n    ExpressionLambdaAggregatorFactory agg = new ExpressionLambdaAggregatorFactory(\n        \"expr_agg_name\",\n        ImmutableSet.of(\"some_column\", \"some_other_column\"),\n        null,\n        \"''\",\n        \"<STRING>[]\",\n        \"concat(__acc, some_column, some_other_column)\",\n        \"array_set_add(__acc, expr_agg_name)\",\n        null,\n        null,\n        new HumanReadableBytes(2048),\n        TestExprMacroTable.INSTANCE\n    );\n\n    Assert.assertEquals(ValueType.STRING, agg.getType());\n    Assert.assertEquals(ValueType.STRING_ARRAY, agg.getCombiningFactory().getType());\n    Assert.assertEquals(ValueType.STRING_ARRAY, agg.getFinalizedType());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/ExpressionLambdaAggregatorFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"},{"authorDate":"2021-06-26 07:51:16","commitOrder":2,"curCode":"  public void testDoubleArrayType()\n  {\n    ExpressionLambdaAggregatorFactory agg = new ExpressionLambdaAggregatorFactory(\n        \"expr_agg_name\",\n        ImmutableSet.of(\"some_column\", \"some_other_column\"),\n        null,\n        \"0.0\",\n        \"<DOUBLE>[]\",\n        null,\n        \"__acc + some_column + some_other_column\",\n        \"array_set_add(__acc, expr_agg_name)\",\n        null,\n        null,\n        new HumanReadableBytes(2048),\n        TestExprMacroTable.INSTANCE\n    );\n\n    Assert.assertEquals(ValueType.DOUBLE, agg.getType());\n    Assert.assertEquals(ValueType.DOUBLE_ARRAY, agg.getCombiningFactory().getType());\n    Assert.assertEquals(ValueType.DOUBLE_ARRAY, agg.getFinalizedType());\n  }\n","date":"2021-06-26 07:51:16","endLine":388,"groupId":"106879","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testDoubleArrayType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f4/e8a148597007ddd0685ecb0be83cf4ec967d4d.src","preCode":"  public void testDoubleArrayType()\n  {\n    ExpressionLambdaAggregatorFactory agg = new ExpressionLambdaAggregatorFactory(\n        \"expr_agg_name\",\n        ImmutableSet.of(\"some_column\", \"some_other_column\"),\n        null,\n        \"0.0\",\n        \"<DOUBLE>[]\",\n        \"__acc + some_column + some_other_column\",\n        \"array_set_add(__acc, expr_agg_name)\",\n        null,\n        null,\n        new HumanReadableBytes(2048),\n        TestExprMacroTable.INSTANCE\n    );\n\n    Assert.assertEquals(ValueType.DOUBLE, agg.getType());\n    Assert.assertEquals(ValueType.DOUBLE_ARRAY, agg.getCombiningFactory().getType());\n    Assert.assertEquals(ValueType.DOUBLE_ARRAY, agg.getFinalizedType());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/ExpressionLambdaAggregatorFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"M"}],"commitId":"df9b57aa1a25f3c7fd41becb5aab9e87291f9841","commitMessage":"@@@bitwise aggregators.  better null handling options for expression agg (#11280)\n\n* bitwise aggregators.  better nulls for expression agg\n\n* correct behavior\n\n* rework deserialize.  better names\n\n* fix json.  share mask","date":"2021-06-26 07:51:16","modifiedFileCount":"13","status":"M","submitter":"Clint Wylie"}]
