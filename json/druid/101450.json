[{"authorTime":"2020-02-14 06:58:32","codes":[{"authorDate":"2020-02-14 06:58:32","commitOrder":1,"curCode":"  public void queryMultiQueryableIndexX(Blackhole blackhole)\n  {\n    QueryToolChest<ResultRow, GroupByQuery> toolChest = factory.getToolchest();\n    QueryRunner<ResultRow> theRunner = new FinalizeResultsQueryRunner<>(\n        toolChest.mergeResults(\n            factory.mergeRunners(executorService, makeMultiRunners())\n        ),\n        (QueryToolChest) toolChest\n    );\n\n    Sequence<ResultRow> queryResult = theRunner.run(QueryPlus.wrap(query), ResponseContext.createEmpty());\n    List<ResultRow> results = queryResult.toList();\n    blackhole.consume(results);\n  }\n","date":"2020-02-14 06:58:32","endLine":686,"groupId":"13988","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"queryMultiQueryableIndexX","params":"(Blackholeblackhole)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/f910be1b73ac8bdda0204dfbb2a8de7d5a1566.src","preCode":"  public void queryMultiQueryableIndexX(Blackhole blackhole)\n  {\n    QueryToolChest<ResultRow, GroupByQuery> toolChest = factory.getToolchest();\n    QueryRunner<ResultRow> theRunner = new FinalizeResultsQueryRunner<>(\n        toolChest.mergeResults(\n            factory.mergeRunners(executorService, makeMultiRunners())\n        ),\n        (QueryToolChest) toolChest\n    );\n\n    Sequence<ResultRow> queryResult = theRunner.run(QueryPlus.wrap(query), ResponseContext.createEmpty());\n    List<ResultRow> results = queryResult.toList();\n    blackhole.consume(results);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/GroupByBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":673,"status":"B"},{"authorDate":"2020-02-14 06:58:32","commitOrder":1,"curCode":"  public void queryMultiQueryableIndexWithSerde(Blackhole blackhole)\n  {\n    QueryToolChest<ResultRow, GroupByQuery> toolChest = factory.getToolchest();\n    \r\n    QueryRunner<ResultRow> theRunner = new FinalizeResultsQueryRunner<>(\n        toolChest.mergeResults(\n            new SerializingQueryRunner<>(\n                new DefaultObjectMapper(new SmileFactory()),\n                ResultRow.class,\n                toolChest.mergeResults(\n                    factory.mergeRunners(executorService, makeMultiRunners())\n                )\n            )\n        ),\n        (QueryToolChest) toolChest\n    );\n\n    Sequence<ResultRow> queryResult = theRunner.run(QueryPlus.wrap(query), ResponseContext.createEmpty());\n    List<ResultRow> results = queryResult.toList();\n    blackhole.consume(results);\n  }\n","date":"2020-02-14 06:58:32","endLine":732,"groupId":"23140","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"queryMultiQueryableIndexWithSerde","params":"(Blackholeblackhole)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/f910be1b73ac8bdda0204dfbb2a8de7d5a1566.src","preCode":"  public void queryMultiQueryableIndexWithSerde(Blackhole blackhole)\n  {\n    QueryToolChest<ResultRow, GroupByQuery> toolChest = factory.getToolchest();\n    \r\n    QueryRunner<ResultRow> theRunner = new FinalizeResultsQueryRunner<>(\n        toolChest.mergeResults(\n            new SerializingQueryRunner<>(\n                new DefaultObjectMapper(new SmileFactory()),\n                ResultRow.class,\n                toolChest.mergeResults(\n                    factory.mergeRunners(executorService, makeMultiRunners())\n                )\n            )\n        ),\n        (QueryToolChest) toolChest\n    );\n\n    Sequence<ResultRow> queryResult = theRunner.run(QueryPlus.wrap(query), ResponseContext.createEmpty());\n    List<ResultRow> results = queryResult.toList();\n    blackhole.consume(results);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/GroupByBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":712,"status":"B"}],"commitId":"e9aebd994aa0e243446b4f76d819a503401104e3","commitMessage":"@@@Fix for building in Eclipse & VS Code. (#7481)\n\nFixes #6866\nReverse dependencies from /main/ to /test/\nAdd generated-test-sources to source path for Eclipse","date":"2020-02-14 06:58:32","modifiedFileCount":"1","status":"B","submitter":"Adam Peck"},{"authorTime":"2021-01-08 14:18:47","codes":[{"authorDate":"2021-01-08 14:18:47","commitOrder":2,"curCode":"  public void queryMultiQueryableIndexX(Blackhole blackhole, QueryableIndexState state)\n  {\n    QueryToolChest<ResultRow, GroupByQuery> toolChest = factory.getToolchest();\n    QueryRunner<ResultRow> theRunner = new FinalizeResultsQueryRunner<>(\n        toolChest.mergeResults(\n            factory.mergeRunners(state.executorService, makeMultiRunners(state))\n        ),\n        (QueryToolChest) toolChest\n    );\n\n    Sequence<ResultRow> queryResult = theRunner.run(QueryPlus.wrap(query), ResponseContext.createEmpty());\n    List<ResultRow> results = queryResult.toList();\n    blackhole.consume(results);\n  }\n","date":"2021-01-08 14:18:47","endLine":707,"groupId":"101450","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"queryMultiQueryableIndexX","params":"(Blackholeblackhole@QueryableIndexStatestate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b9/808c9cad697150d05351972b866576f545f74c.src","preCode":"  public void queryMultiQueryableIndexX(Blackhole blackhole)\n  {\n    QueryToolChest<ResultRow, GroupByQuery> toolChest = factory.getToolchest();\n    QueryRunner<ResultRow> theRunner = new FinalizeResultsQueryRunner<>(\n        toolChest.mergeResults(\n            factory.mergeRunners(executorService, makeMultiRunners())\n        ),\n        (QueryToolChest) toolChest\n    );\n\n    Sequence<ResultRow> queryResult = theRunner.run(QueryPlus.wrap(query), ResponseContext.createEmpty());\n    List<ResultRow> results = queryResult.toList();\n    blackhole.consume(results);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/GroupByBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":694,"status":"M"},{"authorDate":"2021-01-08 14:18:47","commitOrder":2,"curCode":"  public void queryMultiQueryableIndexWithSerde(Blackhole blackhole, QueryableIndexState state)\n  {\n    QueryToolChest<ResultRow, GroupByQuery> toolChest = factory.getToolchest();\n    \r\n    QueryRunner<ResultRow> theRunner = new FinalizeResultsQueryRunner<>(\n        toolChest.mergeResults(\n            new SerializingQueryRunner<>(\n                new DefaultObjectMapper(new SmileFactory()),\n                ResultRow.class,\n                toolChest.mergeResults(\n                    factory.mergeRunners(state.executorService, makeMultiRunners(state))\n                )\n            )\n        ),\n        (QueryToolChest) toolChest\n    );\n\n    Sequence<ResultRow> queryResult = theRunner.run(QueryPlus.wrap(query), ResponseContext.createEmpty());\n    List<ResultRow> results = queryResult.toList();\n    blackhole.consume(results);\n  }\n","date":"2021-01-08 14:18:47","endLine":801,"groupId":"101450","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"queryMultiQueryableIndexWithSerde","params":"(Blackholeblackhole@QueryableIndexStatestate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b9/808c9cad697150d05351972b866576f545f74c.src","preCode":"  public void queryMultiQueryableIndexWithSerde(Blackhole blackhole)\n  {\n    QueryToolChest<ResultRow, GroupByQuery> toolChest = factory.getToolchest();\n    \r\n    QueryRunner<ResultRow> theRunner = new FinalizeResultsQueryRunner<>(\n        toolChest.mergeResults(\n            new SerializingQueryRunner<>(\n                new DefaultObjectMapper(new SmileFactory()),\n                ResultRow.class,\n                toolChest.mergeResults(\n                    factory.mergeRunners(executorService, makeMultiRunners())\n                )\n            )\n        ),\n        (QueryToolChest) toolChest\n    );\n\n    Sequence<ResultRow> queryResult = theRunner.run(QueryPlus.wrap(query), ResponseContext.createEmpty());\n    List<ResultRow> results = queryResult.toList();\n    blackhole.consume(results);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/GroupByBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":781,"status":"M"}],"commitId":"08ab82f55ca856d60dfe1088c1c0393428b0bb6d","commitMessage":"@@@IncrementalIndex Tests and Benchmarks Parametrization (#10593)\n\n* Remove redundant IncrementalIndex.Builder\n\n* Parametrize incremental index tests and benchmarks\n\n- Reveal and fix a bug in OffheapIncrementalIndex\n\n* Fix forbiddenapis error: Forbidden method invocation: java.lang.String#format(java.lang.String. java.lang.Object[]) [Uses default locale]\n\n* Fix Intellij errors: declared exception is never thrown\n\n* Add documentation and validate before closing objects on tearDown.\n\n* Add documentation to OffheapIncrementalIndexTestSpec\n\n* Doc corrections and minor changes.\n\n* Add logging for generated rows.\n\n* Refactor new tests/benchmarks.\n\n* Improve IncrementalIndexCreator documentation\n\n* Add required tests for DataGenerator\n\n* Revert \"rollupOpportunity\" to be a string","date":"2021-01-08 14:18:47","modifiedFileCount":"62","status":"M","submitter":"Liran Funaro"}]
