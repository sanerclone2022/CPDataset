[{"authorTime":"2020-06-19 09:40:43","codes":[{"authorDate":"2020-06-19 09:40:43","commitOrder":2,"curCode":"  public void testSerde() throws JsonProcessingException\n  {\n    final ObjectMapper mapper = ShardSpecTestUtils.initObjectMapper();\n    mapper.registerSubtypes(new NamedType(NumberedOverwriteShardSpec.class, NumberedOverwriteShardSpec.TYPE));\n    final NumberedOverwriteShardSpec original = new NumberedOverwriteShardSpec(\n        PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 2,\n        0,\n        10,\n        (short) 1,\n        (short) 3\n    );\n    final String json = mapper.writeValueAsString(original);\n    final NumberedOverwriteShardSpec fromJson = (NumberedOverwriteShardSpec) mapper.readValue(json, ShardSpec.class);\n    Assert.assertEquals(original, fromJson);\n  }\n","date":"2020-06-19 09:40:43","endLine":52,"groupId":"22755","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerde","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c6/d7935b56990ce024cb568b0b68bd7d85442547.src","preCode":"  public void testSerde() throws JsonProcessingException\n  {\n    final ObjectMapper mapper = ShardSpecTestUtils.initObjectMapper();\n    mapper.registerSubtypes(new NamedType(NumberedOverwriteShardSpec.class, NumberedOverwriteShardSpec.TYPE));\n    final NumberedOverwriteShardSpec original = new NumberedOverwriteShardSpec(\n        PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 2,\n        0,\n        10,\n        (short) 1,\n        (short) 3\n    );\n    final String json = mapper.writeValueAsString(original);\n    final NumberedOverwriteShardSpec fromJson = (NumberedOverwriteShardSpec) mapper.readValue(json, ShardSpec.class);\n    Assert.assertEquals(original, fromJson);\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/partition/NumberedOverwriteShardSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"MB"},{"authorDate":"2020-06-19 09:40:43","commitOrder":2,"curCode":"  public void testSerde() throws JsonProcessingException\n  {\n    mapper.registerSubtypes(\n        new NamedType(BuildingHashBasedNumberedShardSpec.class, BuildingHashBasedNumberedShardSpec.TYPE)\n    );\n    mapper.setInjectableValues(new Std().addValue(ObjectMapper.class, mapper));\n    final BuildingHashBasedNumberedShardSpec original = new BuildingHashBasedNumberedShardSpec(\n        3,\n        5,\n        12,\n        ImmutableList.of(\"dim\"),\n        mapper\n    );\n    final String json = mapper.writeValueAsString(original);\n    final BuildingHashBasedNumberedShardSpec fromJson = (BuildingHashBasedNumberedShardSpec) mapper.readValue(\n        json,\n        ShardSpec.class\n    );\n    Assert.assertEquals(original, fromJson);\n  }\n","date":"2020-06-19 09:40:43","endLine":74,"groupId":"412","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerde","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2c/052d51c22813fab991155e24114aac6bfd64ca.src","preCode":"  public void testSerde() throws JsonProcessingException\n  {\n    mapper.registerSubtypes(\n        new NamedType(BuildingHashBasedNumberedShardSpec.class, BuildingHashBasedNumberedShardSpec.TYPE)\n    );\n    mapper.setInjectableValues(new Std().addValue(ObjectMapper.class, mapper));\n    final BuildingHashBasedNumberedShardSpec original = new BuildingHashBasedNumberedShardSpec(\n        3,\n        5,\n        12,\n        ImmutableList.of(\"dim\"),\n        mapper\n    );\n    final String json = mapper.writeValueAsString(original);\n    final BuildingHashBasedNumberedShardSpec fromJson = (BuildingHashBasedNumberedShardSpec) mapper.readValue(\n        json,\n        ShardSpec.class\n    );\n    Assert.assertEquals(original, fromJson);\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/partition/BuildingHashBasedNumberedShardSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"}],"commitId":"d644a27f1a545105a4b1a4110f3ed83d7c46a46f","commitMessage":"@@@Create packed core partitions for hash/range-partitioned segments in native batch ingestion (#10025)\n\n* Fill in the core partition set size properly for batch ingestion with\ndynamic partitioning\n\n* incomplete javadoc\n\n* Address comments\n\n* fix tests\n\n* fix json serde.  add tests\n\n* checkstyle\n\n* Set core partition set size for hash-partitioned segments properly in\nbatch ingestion\n\n* test for both parallel and single-threaded task\n\n* unused variables\n\n* fix test\n\n* unused imports\n\n* add hash/range buckets\n\n* some test adjustment and missing json serde\n\n* centralized partition id allocation in parallel and simple tasks\n\n* remove string partition chunk\n\n* revive string partition chunk\n\n* fill numCorePartitions for hadoop\n\n* clean up hash stuffs\n\n* resolved todos\n\n* javadocs\n\n* Fix tests\n\n* add more tests\n\n* doc\n\n* unused imports","date":"2020-06-19 09:40:43","modifiedFileCount":"78","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-09-25 07:32:56","codes":[{"authorDate":"2020-06-19 09:40:43","commitOrder":3,"curCode":"  public void testSerde() throws JsonProcessingException\n  {\n    final ObjectMapper mapper = ShardSpecTestUtils.initObjectMapper();\n    mapper.registerSubtypes(new NamedType(NumberedOverwriteShardSpec.class, NumberedOverwriteShardSpec.TYPE));\n    final NumberedOverwriteShardSpec original = new NumberedOverwriteShardSpec(\n        PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 2,\n        0,\n        10,\n        (short) 1,\n        (short) 3\n    );\n    final String json = mapper.writeValueAsString(original);\n    final NumberedOverwriteShardSpec fromJson = (NumberedOverwriteShardSpec) mapper.readValue(json, ShardSpec.class);\n    Assert.assertEquals(original, fromJson);\n  }\n","date":"2020-06-19 09:40:43","endLine":52,"groupId":"105198","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerde","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c6/d7935b56990ce024cb568b0b68bd7d85442547.src","preCode":"  public void testSerde() throws JsonProcessingException\n  {\n    final ObjectMapper mapper = ShardSpecTestUtils.initObjectMapper();\n    mapper.registerSubtypes(new NamedType(NumberedOverwriteShardSpec.class, NumberedOverwriteShardSpec.TYPE));\n    final NumberedOverwriteShardSpec original = new NumberedOverwriteShardSpec(\n        PartitionIds.NON_ROOT_GEN_START_PARTITION_ID + 2,\n        0,\n        10,\n        (short) 1,\n        (short) 3\n    );\n    final String json = mapper.writeValueAsString(original);\n    final NumberedOverwriteShardSpec fromJson = (NumberedOverwriteShardSpec) mapper.readValue(json, ShardSpec.class);\n    Assert.assertEquals(original, fromJson);\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/partition/NumberedOverwriteShardSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2020-09-25 07:32:56","commitOrder":3,"curCode":"  public void testSerde() throws JsonProcessingException\n  {\n    mapper.registerSubtypes(\n        new NamedType(BuildingHashBasedNumberedShardSpec.class, BuildingHashBasedNumberedShardSpec.TYPE)\n    );\n    mapper.setInjectableValues(new Std().addValue(ObjectMapper.class, mapper));\n    final BuildingHashBasedNumberedShardSpec original = new BuildingHashBasedNumberedShardSpec(\n        3,\n        5,\n        12,\n        ImmutableList.of(\"dim\"),\n        HashPartitionFunction.MURMUR3_32_ABS,\n        mapper\n    );\n    final String json = mapper.writeValueAsString(original);\n    final BuildingHashBasedNumberedShardSpec fromJson = (BuildingHashBasedNumberedShardSpec) mapper.readValue(\n        json,\n        ShardSpec.class\n    );\n    Assert.assertEquals(original, fromJson);\n  }\n","date":"2020-09-25 07:32:56","endLine":88,"groupId":"105198","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testSerde","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/62/62169fbca67bc30841eb55c3cff939c8d1b2f8.src","preCode":"  public void testSerde() throws JsonProcessingException\n  {\n    mapper.registerSubtypes(\n        new NamedType(BuildingHashBasedNumberedShardSpec.class, BuildingHashBasedNumberedShardSpec.TYPE)\n    );\n    mapper.setInjectableValues(new Std().addValue(ObjectMapper.class, mapper));\n    final BuildingHashBasedNumberedShardSpec original = new BuildingHashBasedNumberedShardSpec(\n        3,\n        5,\n        12,\n        ImmutableList.of(\"dim\"),\n        mapper\n    );\n    final String json = mapper.writeValueAsString(original);\n    final BuildingHashBasedNumberedShardSpec fromJson = (BuildingHashBasedNumberedShardSpec) mapper.readValue(\n        json,\n        ShardSpec.class\n    );\n    Assert.assertEquals(original, fromJson);\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/partition/BuildingHashBasedNumberedShardSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"0cc9eb4903e7bddb4c1484984bf87c8fab7648df","commitMessage":"@@@Store hash partition function in dataSegment and allow segment pruning only when hash partition function is provided (#10288)\n\n* Store hash partition function in dataSegment and allow segment pruning only when hash partition function is provided\n\n* query context\n\n* fix tests; add more test\n\n* javadoc\n\n* docs and more tests\n\n* remove default and hadoop tests\n\n* consistent name and fix javadoc\n\n* spelling and field name\n\n* default function for partitionsSpec\n\n* other comments\n\n* address comments\n\n* fix tests and spelling\n\n* test\n\n* doc","date":"2020-09-25 07:32:56","modifiedFileCount":"50","status":"M","submitter":"Jihoon Son"}]
