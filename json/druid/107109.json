[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testGetCacheKey()\n  {\n    DimFilter intervalFilter1 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n\n    DimFilter intervalFilter2 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1976-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n    Assert.assertNotEquals(intervalFilter1.getCacheKey(), intervalFilter2.getCacheKey());\n\n    RegexDimExtractionFn regexFn = new RegexDimExtractionFn(\".*\", false, null);\n    DimFilter intervalFilter3 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        regexFn\n    );\n    DimFilter intervalFilter4 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1976-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        regexFn\n    );\n    Assert.assertNotEquals(intervalFilter3.getCacheKey(), intervalFilter4.getCacheKey());\n  }\n","date":"2018-08-31 00:56:26","endLine":118,"groupId":"507","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetCacheKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8a/1903b05ee6aa78fcc0d1243393f3ef103b8c75.src","preCode":"  public void testGetCacheKey()\n  {\n    DimFilter intervalFilter1 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n\n    DimFilter intervalFilter2 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1976-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n    Assert.assertNotEquals(intervalFilter1.getCacheKey(), intervalFilter2.getCacheKey());\n\n    RegexDimExtractionFn regexFn = new RegexDimExtractionFn(\".*\", false, null);\n    DimFilter intervalFilter3 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        regexFn\n    );\n    DimFilter intervalFilter4 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1976-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        regexFn\n    );\n    Assert.assertNotEquals(intervalFilter3.getCacheKey(), intervalFilter4.getCacheKey());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/filter/IntervalDimFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testEquals()\n  {\n    RegexDimExtractionFn regexFn = new RegexDimExtractionFn(\".*\", false, null);\n\n    DimFilter intervalFilter1 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n\n    DimFilter intervalFilter2 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        regexFn\n    );\n\n    DimFilter intervalFilter3 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1977-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n\n    Assert.assertNotEquals(intervalFilter1, intervalFilter2);\n    Assert.assertNotEquals(intervalFilter1, intervalFilter3);\n\n    DimFilter intervalFilter4 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1977-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1976-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n    Assert.assertEquals(intervalFilter1, intervalFilter4);\n\n    DimFilter intervalFilter5 = new IntervalDimFilter(\n        \"__thyme\",\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n    Assert.assertNotEquals(intervalFilter1, intervalFilter5);\n  }\n","date":"2018-08-31 00:56:26","endLine":233,"groupId":"508","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8a/1903b05ee6aa78fcc0d1243393f3ef103b8c75.src","preCode":"  public void testEquals()\n  {\n    RegexDimExtractionFn regexFn = new RegexDimExtractionFn(\".*\", false, null);\n\n    DimFilter intervalFilter1 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n\n    DimFilter intervalFilter2 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        regexFn\n    );\n\n    DimFilter intervalFilter3 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1977-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n\n    Assert.assertNotEquals(intervalFilter1, intervalFilter2);\n    Assert.assertNotEquals(intervalFilter1, intervalFilter3);\n\n    DimFilter intervalFilter4 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1977-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1976-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n    Assert.assertEquals(intervalFilter1, intervalFilter4);\n\n    DimFilter intervalFilter5 = new IntervalDimFilter(\n        \"__thyme\",\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n    Assert.assertNotEquals(intervalFilter1, intervalFilter5);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/filter/IntervalDimFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-03 01:50:22","codes":[{"authorDate":"2018-10-03 01:50:22","commitOrder":2,"curCode":"  public void testGetCacheKey()\n  {\n    DimFilter intervalFilter1 = new IntervalDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n\n    DimFilter intervalFilter2 = new IntervalDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1976-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n    Assert.assertNotEquals(intervalFilter1.getCacheKey(), intervalFilter2.getCacheKey());\n\n    RegexDimExtractionFn regexFn = new RegexDimExtractionFn(\".*\", false, null);\n    DimFilter intervalFilter3 = new IntervalDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        regexFn\n    );\n    DimFilter intervalFilter4 = new IntervalDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1976-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        regexFn\n    );\n    Assert.assertNotEquals(intervalFilter3.getCacheKey(), intervalFilter4.getCacheKey());\n  }\n","date":"2018-10-03 01:50:22","endLine":118,"groupId":"107109","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetCacheKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/271449b716c678450c29f69ef56d686cd2fa0b.src","preCode":"  public void testGetCacheKey()\n  {\n    DimFilter intervalFilter1 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n\n    DimFilter intervalFilter2 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1976-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n    Assert.assertNotEquals(intervalFilter1.getCacheKey(), intervalFilter2.getCacheKey());\n\n    RegexDimExtractionFn regexFn = new RegexDimExtractionFn(\".*\", false, null);\n    DimFilter intervalFilter3 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        regexFn\n    );\n    DimFilter intervalFilter4 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1976-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        regexFn\n    );\n    Assert.assertNotEquals(intervalFilter3.getCacheKey(), intervalFilter4.getCacheKey());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/filter/IntervalDimFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2018-10-03 01:50:22","commitOrder":2,"curCode":"  public void testEquals()\n  {\n    RegexDimExtractionFn regexFn = new RegexDimExtractionFn(\".*\", false, null);\n\n    DimFilter intervalFilter1 = new IntervalDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n\n    DimFilter intervalFilter2 = new IntervalDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        regexFn\n    );\n\n    DimFilter intervalFilter3 = new IntervalDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1977-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n\n    Assert.assertNotEquals(intervalFilter1, intervalFilter2);\n    Assert.assertNotEquals(intervalFilter1, intervalFilter3);\n\n    DimFilter intervalFilter4 = new IntervalDimFilter(\n        ColumnHolder.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1977-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1976-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n    Assert.assertEquals(intervalFilter1, intervalFilter4);\n\n    DimFilter intervalFilter5 = new IntervalDimFilter(\n        \"__thyme\",\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n    Assert.assertNotEquals(intervalFilter1, intervalFilter5);\n  }\n","date":"2018-10-03 01:50:22","endLine":233,"groupId":"107109","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEquals","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/271449b716c678450c29f69ef56d686cd2fa0b.src","preCode":"  public void testEquals()\n  {\n    RegexDimExtractionFn regexFn = new RegexDimExtractionFn(\".*\", false, null);\n\n    DimFilter intervalFilter1 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n\n    DimFilter intervalFilter2 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        regexFn\n    );\n\n    DimFilter intervalFilter3 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1977-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n\n    Assert.assertNotEquals(intervalFilter1, intervalFilter2);\n    Assert.assertNotEquals(intervalFilter1, intervalFilter3);\n\n    DimFilter intervalFilter4 = new IntervalDimFilter(\n        Column.TIME_COLUMN_NAME,\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1977-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1976-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n    Assert.assertEquals(intervalFilter1, intervalFilter4);\n\n    DimFilter intervalFilter5 = new IntervalDimFilter(\n        \"__thyme\",\n        Arrays.asList(\n            Intervals.of(\"1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.004Z\"),\n            Intervals.of(\"1975-01-01T00:00:00.001Z/1980-01-01T00:00:00.004Z\")\n        ),\n        null\n    );\n    Assert.assertNotEquals(intervalFilter1, intervalFilter5);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/filter/IntervalDimFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"3ae563263a23000560749071d262727d47296856","commitMessage":"@@@Renamed 'Generic Column' -> 'Numeric Column'; Fixed a few resource leaks in processing; misc refinements (#5957)\n\nThis PR accumulates many refactorings and small improvements that I did while preparing the next change set of https://github.com/druid-io/druid/projects/2. I finally decided to make them a separate PR to minimize the volume of the main PR.\n\nSome of the changes:\n - Renamed confusing \"Generic Column\" term to \"Numeric Column\" (what it actually implies) in many class names.\n - Generified `ComplexMetricExtractor`","date":"2018-10-03 01:50:22","modifiedFileCount":"776","status":"M","submitter":"Roman Leventov"}]
