[{"authorTime":"2018-09-30 05:13:05","codes":[{"authorDate":"2018-09-30 05:13:05","commitOrder":1,"curCode":"  public void testWithMapColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.dataSource),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params\", \"params\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\"Map column doesn't support getRow()\");\n    runner.run(QueryPlus.wrap(query), new HashMap<>()).toList();\n  }\n","date":"2018-09-30 05:13:05","endLine":143,"groupId":"1990","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithMapColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/43/d6809aa2912325370baa55054852f0b19f230c.src","preCode":"  public void testWithMapColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.dataSource),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params\", \"params\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\"Map column doesn't support getRow()\");\n    runner.run(QueryPlus.wrap(query), new HashMap<>()).toList();\n  }\n","realPath":"extensions-contrib/virtual-columns/src/test/java/org/apache/druid/segment/MapVirtualColumnGroupByTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"},{"authorDate":"2018-09-30 05:13:05","commitOrder":1,"curCode":"  public void testWithSubColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.dataSource),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params.key3\", \"params.key3\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    final List<Row> result = runner.run(QueryPlus.wrap(query), new HashMap<>()).toList();\n    final List<Row> expected = ImmutableList.of(\n        new MapBasedRow(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            MapVirtualColumnTestBase.mapOf(\"count\", 1L, \"params.key3\", \"value3\")\n        ),\n        new MapBasedRow(DateTimes.of(\"2011-01-12T00:00:00.000Z\"), MapVirtualColumnTestBase.mapOf(\"count\", 2L))\n    );\n\n    Assert.assertEquals(expected, result);\n  }\n","date":"2018-09-30 05:13:05","endLine":173,"groupId":"8520","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithSubColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/43/d6809aa2912325370baa55054852f0b19f230c.src","preCode":"  public void testWithSubColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.dataSource),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params.key3\", \"params.key3\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    final List<Row> result = runner.run(QueryPlus.wrap(query), new HashMap<>()).toList();\n    final List<Row> expected = ImmutableList.of(\n        new MapBasedRow(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            MapVirtualColumnTestBase.mapOf(\"count\", 1L, \"params.key3\", \"value3\")\n        ),\n        new MapBasedRow(DateTimes.of(\"2011-01-12T00:00:00.000Z\"), MapVirtualColumnTestBase.mapOf(\"count\", 2L))\n    );\n\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"extensions-contrib/virtual-columns/src/test/java/org/apache/druid/segment/MapVirtualColumnGroupByTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"}],"commitId":"f09e718c6813c866591501236285166655c85bf8","commitMessage":"@@@Implement MapVirtualColumn.makeDimensionSelector properly (#6396)\n\n* Implement MapVirtualColumn.makeDimensionSelector properly\n\n* address comments\n","date":"2018-09-30 05:13:05","modifiedFileCount":"3","status":"B","submitter":"Jihoon Son"},{"authorTime":"2019-07-24 23:29:03","codes":[{"authorDate":"2019-07-24 23:29:03","commitOrder":2,"curCode":"  public void testWithMapColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.dataSource),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params\", \"params\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\"Map column doesn't support getRow()\");\n    runner.run(QueryPlus.wrap(query)).toList();\n  }\n","date":"2019-07-24 23:29:03","endLine":144,"groupId":"1990","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithMapColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/32/0f7d3a115ff07c54f744020e2843f0cdf8e05e.src","preCode":"  public void testWithMapColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.dataSource),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params\", \"params\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\"Map column doesn't support getRow()\");\n    runner.run(QueryPlus.wrap(query), new HashMap<>()).toList();\n  }\n","realPath":"extensions-contrib/virtual-columns/src/test/java/org/apache/druid/segment/MapVirtualColumnGroupByTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2019-07-24 23:29:03","commitOrder":2,"curCode":"  public void testWithSubColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.dataSource),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params.key3\", \"params.key3\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    final List<Row> result = runner.run(QueryPlus.wrap(query)).toList();\n    final List<Row> expected = ImmutableList.of(\n        new MapBasedRow(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            MapVirtualColumnTestBase.mapOf(\"count\", 1L, \"params.key3\", \"value3\")\n        ),\n        new MapBasedRow(DateTimes.of(\"2011-01-12T00:00:00.000Z\"), MapVirtualColumnTestBase.mapOf(\"count\", 2L))\n    );\n\n    Assert.assertEquals(expected, result);\n  }\n","date":"2019-07-24 23:29:03","endLine":174,"groupId":"1989","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithSubColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/32/0f7d3a115ff07c54f744020e2843f0cdf8e05e.src","preCode":"  public void testWithSubColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.dataSource),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params.key3\", \"params.key3\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    final List<Row> result = runner.run(QueryPlus.wrap(query), new HashMap<>()).toList();\n    final List<Row> expected = ImmutableList.of(\n        new MapBasedRow(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            MapVirtualColumnTestBase.mapOf(\"count\", 1L, \"params.key3\", \"value3\")\n        ),\n        new MapBasedRow(DateTimes.of(\"2011-01-12T00:00:00.000Z\"), MapVirtualColumnTestBase.mapOf(\"count\", 2L))\n    );\n\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"extensions-contrib/virtual-columns/src/test/java/org/apache/druid/segment/MapVirtualColumnGroupByTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"799d20249fe6333ea86b020f6d09c91fa4d3f998","commitMessage":"@@@Response context refactoring (#8110)\n\n* Response context refactoring\n\n* Serialization/Deserialization of ResponseContext\n\n* Added java doc comments\n\n* Renamed vars related to ResponseContext\n\n* Renamed empty() methods to createEmpty()\n\n* Fixed ResponseContext usage\n\n* Renamed multiple ResponseContext static fields\n\n* Added PublicApi annotations\n\n* Renamed QueryResponseContext class to ResourceIOReaderWriter\n\n* Moved the protected method below public static constants\n\n* Added createEmpty method to ResponseContext with DefaultResponseContext creation\n\n* Fixed inspection error\n\n* Added comments to the ResponseContext length limit and ResponseContext\nhttp header name\n\n* Added a comment of possible future refactoring\n\n* Removed .gitignore file of indexing-service\n\n* Removed a never-used method\n\n* VisibleForTesting method reducing boilerplate\n\nCo-Authored-By: Clint Wylie <cjwylie@gmail.com>\n\n* Reduced boilerplate\n\n* Renamed the method serialize to serializeWith\n\n* Removed unused import\n\n* Fixed incorrectly refactored test method\n\n* Added comments for ResponseContext keys\n\n* Fixed incorrectly refactored test method\n\n* Fixed IntervalChunkingQueryRunnerTest mocks\n","date":"2019-07-24 23:29:03","modifiedFileCount":"142","status":"M","submitter":"Eugene Sevastianov"},{"authorTime":"2019-08-01 07:15:12","codes":[{"authorDate":"2019-07-24 23:29:03","commitOrder":3,"curCode":"  public void testWithMapColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.dataSource),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params\", \"params\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\"Map column doesn't support getRow()\");\n    runner.run(QueryPlus.wrap(query)).toList();\n  }\n","date":"2019-07-24 23:29:03","endLine":144,"groupId":"1990","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithMapColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/32/0f7d3a115ff07c54f744020e2843f0cdf8e05e.src","preCode":"  public void testWithMapColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.dataSource),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params\", \"params\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\"Map column doesn't support getRow()\");\n    runner.run(QueryPlus.wrap(query)).toList();\n  }\n","realPath":"extensions-contrib/virtual-columns/src/test/java/org/apache/druid/segment/MapVirtualColumnGroupByTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"N"},{"authorDate":"2019-08-01 07:15:12","commitOrder":3,"curCode":"  public void testWithSubColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.dataSource),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params.key3\", \"params.key3\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    final List<ResultRow> result = runner.run(QueryPlus.wrap(query)).toList();\n    final List<ResultRow> expected = ImmutableList.of(\n        new MapBasedRow(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            MapVirtualColumnTestBase.mapOf(\"count\", 1L, \"params.key3\", \"value3\")\n        ),\n        new MapBasedRow(DateTimes.of(\"2011-01-12T00:00:00.000Z\"), MapVirtualColumnTestBase.mapOf(\"count\", 2L))\n    ).stream().map(row -> ResultRow.fromLegacyRow(row, query)).collect(Collectors.toList());\n\n    Assert.assertEquals(expected, result);\n  }\n","date":"2019-08-01 07:15:12","endLine":175,"groupId":"1989","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithSubColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/01/631e3639c14105d2f877ef81330ce1d19635b2.src","preCode":"  public void testWithSubColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.dataSource),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params.key3\", \"params.key3\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    final List<Row> result = runner.run(QueryPlus.wrap(query)).toList();\n    final List<Row> expected = ImmutableList.of(\n        new MapBasedRow(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            MapVirtualColumnTestBase.mapOf(\"count\", 1L, \"params.key3\", \"value3\")\n        ),\n        new MapBasedRow(DateTimes.of(\"2011-01-12T00:00:00.000Z\"), MapVirtualColumnTestBase.mapOf(\"count\", 2L))\n    );\n\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"extensions-contrib/virtual-columns/src/test/java/org/apache/druid/segment/MapVirtualColumnGroupByTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"77297f4e6f2e9d617c96cd46852bb5a772961e85","commitMessage":"@@@GroupBy array-based result rows. (#8196)\n\n* GroupBy array-based result rows.\n\nFixes #8118; see that proposal for details.\n\nOther than the GroupBy changes.  the main other \"interesting\" classes are:\n\n- ResultRow: The array-based result type.\n- BaseQuery: T is no longer required to be Comparable.\n- QueryToolChest: Adds \"decorateObjectMapper\" to enable query-aware serialization\n  and deserialization of result rows (necessary due to their positional nature).\n- QueryResource: Uses the new decoration functionality.\n- DirectDruidClient: Also uses the new decoration functionality.\n- QueryMaker (in Druid SQL): Modifications to read ResultRows.\n\nThese classes weren't changed.  but got some new javadocs:\n\n- BySegmentQueryRunner\n- FinalizeResultsQueryRunner\n- Query\n\n* Adjustments for TC stuff.\n","date":"2019-08-01 07:15:12","modifiedFileCount":"111","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testWithMapColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.DATA_SOURCE),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params\", \"params\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\"Map column doesn't support getRow()\");\n    runner.run(QueryPlus.wrap(query)).toList();\n  }\n","date":"2019-08-23 18:13:54","endLine":145,"groupId":"103939","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithMapColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5b/d21f6ed6a59215ba49f4bcbee54080b2bfb8f2.src","preCode":"  public void testWithMapColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.dataSource),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params\", \"params\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\"Map column doesn't support getRow()\");\n    runner.run(QueryPlus.wrap(query)).toList();\n  }\n","realPath":"extensions-contrib/virtual-columns/src/test/java/org/apache/druid/segment/MapVirtualColumnGroupByTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testWithSubColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.DATA_SOURCE),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params.key3\", \"params.key3\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    final List<ResultRow> result = runner.run(QueryPlus.wrap(query)).toList();\n    final List<ResultRow> expected = ImmutableList.of(\n        new MapBasedRow(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            MapVirtualColumnTestBase.mapOf(\"count\", 1L, \"params.key3\", \"value3\")\n        ),\n        new MapBasedRow(DateTimes.of(\"2011-01-12T00:00:00.000Z\"), MapVirtualColumnTestBase.mapOf(\"count\", 2L))\n    ).stream().map(row -> ResultRow.fromLegacyRow(row, query)).collect(Collectors.toList());\n\n    Assert.assertEquals(expected, result);\n  }\n","date":"2019-08-23 18:13:54","endLine":175,"groupId":"103939","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithSubColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5b/d21f6ed6a59215ba49f4bcbee54080b2bfb8f2.src","preCode":"  public void testWithSubColumn()\n  {\n    final GroupByQuery query = new GroupByQuery(\n        new TableDataSource(QueryRunnerTestHelper.dataSource),\n        new MultipleIntervalSegmentSpec(ImmutableList.of(Intervals.of(\"2011/2012\"))),\n        VirtualColumns.create(ImmutableList.of(new MapVirtualColumn(\"keys\", \"values\", \"params\"))),\n        null,\n        Granularities.ALL,\n        ImmutableList.of(new DefaultDimensionSpec(\"params.key3\", \"params.key3\")),\n        ImmutableList.of(new CountAggregatorFactory(\"count\")),\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n\n    final List<ResultRow> result = runner.run(QueryPlus.wrap(query)).toList();\n    final List<ResultRow> expected = ImmutableList.of(\n        new MapBasedRow(\n            DateTimes.of(\"2011-01-12T00:00:00.000Z\"),\n            MapVirtualColumnTestBase.mapOf(\"count\", 1L, \"params.key3\", \"value3\")\n        ),\n        new MapBasedRow(DateTimes.of(\"2011-01-12T00:00:00.000Z\"), MapVirtualColumnTestBase.mapOf(\"count\", 2L))\n    ).stream().map(row -> ResultRow.fromLegacyRow(row, query)).collect(Collectors.toList());\n\n    Assert.assertEquals(expected, result);\n  }\n","realPath":"extensions-contrib/virtual-columns/src/test/java/org/apache/druid/segment/MapVirtualColumnGroupByTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
