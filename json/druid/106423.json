[{"authorTime":"2020-01-20 09:14:23","codes":[{"authorDate":"2020-02-14 06:58:32","commitOrder":4,"curCode":"  private static GroupByQueryRunnerFactory makeGroupByQueryRunnerFactory(\n      final ObjectMapper mapper,\n      final GroupByQueryConfig config,\n      final DruidProcessingConfig processingConfig\n  )\n  {\n    final Supplier<GroupByQueryConfig> configSupplier = Suppliers.ofInstance(config);\n    final Supplier<ByteBuffer> bufferSupplier =\n        () -> ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n\n    final NonBlockingPool<ByteBuffer> bufferPool = new StupidPool<>(\n        \"GroupByQueryEngine-bufferPool\",\n        bufferSupplier\n    );\n    final BlockingPool<ByteBuffer> mergeBufferPool = new DefaultBlockingPool<>(\n        bufferSupplier,\n        processingConfig.getNumMergeBuffers()\n    );\n    final GroupByStrategySelector strategySelector = new GroupByStrategySelector(\n        configSupplier,\n        new GroupByStrategyV1(\n            configSupplier,\n            new GroupByQueryEngine(configSupplier, bufferPool),\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER,\n            bufferPool\n        ),\n        new GroupByStrategyV2(\n            processingConfig,\n            configSupplier,\n            QueryConfig::new,\n            bufferPool,\n            mergeBufferPool,\n            mapper,\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER\n        )\n    );\n    final GroupByQueryQueryToolChest toolChest = new GroupByQueryQueryToolChest(strategySelector);\n    return new GroupByQueryRunnerFactory(strategySelector, toolChest);\n  }\n","date":"2020-02-14 06:58:32","endLine":383,"groupId":"19839","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"makeGroupByQueryRunnerFactory","params":"(finalObjectMappermapper@finalGroupByQueryConfigconfig@finalDruidProcessingConfigprocessingConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b8/9ae495b7de8d437caac15e13960fdc735de459.src","preCode":"  private static GroupByQueryRunnerFactory makeGroupByQueryRunnerFactory(\n      final ObjectMapper mapper,\n      final GroupByQueryConfig config,\n      final DruidProcessingConfig processingConfig\n  )\n  {\n    final Supplier<GroupByQueryConfig> configSupplier = Suppliers.ofInstance(config);\n    final Supplier<ByteBuffer> bufferSupplier =\n        () -> ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n\n    final NonBlockingPool<ByteBuffer> bufferPool = new StupidPool<>(\n        \"GroupByQueryEngine-bufferPool\",\n        bufferSupplier\n    );\n    final BlockingPool<ByteBuffer> mergeBufferPool = new DefaultBlockingPool<>(\n        bufferSupplier,\n        processingConfig.getNumMergeBuffers()\n    );\n    final GroupByStrategySelector strategySelector = new GroupByStrategySelector(\n        configSupplier,\n        new GroupByStrategyV1(\n            configSupplier,\n            new GroupByQueryEngine(configSupplier, bufferPool),\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER,\n            bufferPool\n        ),\n        new GroupByStrategyV2(\n            processingConfig,\n            configSupplier,\n            QueryConfig::new,\n            bufferPool,\n            mergeBufferPool,\n            mapper,\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER\n        )\n    );\n    final GroupByQueryQueryToolChest toolChest = new GroupByQueryQueryToolChest(strategySelector);\n    return new GroupByQueryRunnerFactory(strategySelector, toolChest);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/CachingClusteredClientBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"B"},{"authorDate":"2020-01-20 09:14:23","commitOrder":4,"curCode":"  public static Pair<GroupByQueryRunnerFactory, Closer> makeQueryRunnerFactory(\n      final ObjectMapper mapper,\n      final GroupByQueryConfig config,\n      final DruidProcessingConfig processingConfig\n  )\n  {\n    final Supplier<GroupByQueryConfig> configSupplier = Suppliers.ofInstance(config);\n    final CloseableStupidPool<ByteBuffer> bufferPool = new CloseableStupidPool<>(\n        \"GroupByQueryEngine-bufferPool\",\n        new Supplier<ByteBuffer>()\n        {\n          @Override\n          public ByteBuffer get()\n          {\n            return ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n          }\n        }\n    );\n    final CloseableDefaultBlockingPool<ByteBuffer> mergeBufferPool = new CloseableDefaultBlockingPool<>(\n        new Supplier<ByteBuffer>()\n        {\n          @Override\n          public ByteBuffer get()\n          {\n            return ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n          }\n        },\n        processingConfig.getNumMergeBuffers()\n    );\n    final GroupByStrategySelector strategySelector = new GroupByStrategySelector(\n        configSupplier,\n        new GroupByStrategyV1(\n            configSupplier,\n            new GroupByQueryEngine(configSupplier, bufferPool),\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER,\n            bufferPool\n        ),\n        new GroupByStrategyV2(\n            processingConfig,\n            configSupplier,\n            Suppliers.ofInstance(new QueryConfig()),\n            bufferPool,\n            mergeBufferPool,\n            mapper,\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER\n        )\n    );\n    final GroupByQueryQueryToolChest toolChest = new GroupByQueryQueryToolChest(strategySelector);\n    final Closer closer = Closer.create();\n    closer.register(bufferPool);\n    closer.register(mergeBufferPool);\n    return Pair.of(new GroupByQueryRunnerFactory(strategySelector, toolChest), closer);\n  }\n","date":"2020-01-20 09:14:23","endLine":410,"groupId":"19839","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"makeQueryRunnerFactory","params":"(finalObjectMappermapper@finalGroupByQueryConfigconfig@finalDruidProcessingConfigprocessingConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b8/662e01f1df2e180ef9450666a29bcde60bf7bf.src","preCode":"  public static Pair<GroupByQueryRunnerFactory, Closer> makeQueryRunnerFactory(\n      final ObjectMapper mapper,\n      final GroupByQueryConfig config,\n      final DruidProcessingConfig processingConfig\n  )\n  {\n    final Supplier<GroupByQueryConfig> configSupplier = Suppliers.ofInstance(config);\n    final CloseableStupidPool<ByteBuffer> bufferPool = new CloseableStupidPool<>(\n        \"GroupByQueryEngine-bufferPool\",\n        new Supplier<ByteBuffer>()\n        {\n          @Override\n          public ByteBuffer get()\n          {\n            return ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n          }\n        }\n    );\n    final CloseableDefaultBlockingPool<ByteBuffer> mergeBufferPool = new CloseableDefaultBlockingPool<>(\n        new Supplier<ByteBuffer>()\n        {\n          @Override\n          public ByteBuffer get()\n          {\n            return ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n          }\n        },\n        processingConfig.getNumMergeBuffers()\n    );\n    final GroupByStrategySelector strategySelector = new GroupByStrategySelector(\n        configSupplier,\n        new GroupByStrategyV1(\n            configSupplier,\n            new GroupByQueryEngine(configSupplier, bufferPool),\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER,\n            bufferPool\n        ),\n        new GroupByStrategyV2(\n            processingConfig,\n            configSupplier,\n            Suppliers.ofInstance(new QueryConfig()),\n            bufferPool,\n            mergeBufferPool,\n            mapper,\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER\n        )\n    );\n    final GroupByQueryQueryToolChest toolChest = new GroupByQueryQueryToolChest(strategySelector);\n    final Closer closer = Closer.create();\n    closer.register(bufferPool);\n    closer.register(mergeBufferPool);\n    return Pair.of(new GroupByQueryRunnerFactory(strategySelector, toolChest), closer);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"NB"}],"commitId":"e9aebd994aa0e243446b4f76d819a503401104e3","commitMessage":"@@@Fix for building in Eclipse & VS Code. (#7481)\n\nFixes #6866\nReverse dependencies from /main/ to /test/\nAdd generated-test-sources to source path for Eclipse","date":"2020-02-14 06:58:32","modifiedFileCount":"1","status":"M","submitter":"Adam Peck"},{"authorTime":"2020-06-03 09:26:18","codes":[{"authorDate":"2020-02-14 06:58:32","commitOrder":5,"curCode":"  private static GroupByQueryRunnerFactory makeGroupByQueryRunnerFactory(\n      final ObjectMapper mapper,\n      final GroupByQueryConfig config,\n      final DruidProcessingConfig processingConfig\n  )\n  {\n    final Supplier<GroupByQueryConfig> configSupplier = Suppliers.ofInstance(config);\n    final Supplier<ByteBuffer> bufferSupplier =\n        () -> ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n\n    final NonBlockingPool<ByteBuffer> bufferPool = new StupidPool<>(\n        \"GroupByQueryEngine-bufferPool\",\n        bufferSupplier\n    );\n    final BlockingPool<ByteBuffer> mergeBufferPool = new DefaultBlockingPool<>(\n        bufferSupplier,\n        processingConfig.getNumMergeBuffers()\n    );\n    final GroupByStrategySelector strategySelector = new GroupByStrategySelector(\n        configSupplier,\n        new GroupByStrategyV1(\n            configSupplier,\n            new GroupByQueryEngine(configSupplier, bufferPool),\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER,\n            bufferPool\n        ),\n        new GroupByStrategyV2(\n            processingConfig,\n            configSupplier,\n            QueryConfig::new,\n            bufferPool,\n            mergeBufferPool,\n            mapper,\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER\n        )\n    );\n    final GroupByQueryQueryToolChest toolChest = new GroupByQueryQueryToolChest(strategySelector);\n    return new GroupByQueryRunnerFactory(strategySelector, toolChest);\n  }\n","date":"2020-02-14 06:58:32","endLine":383,"groupId":"19839","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"makeGroupByQueryRunnerFactory","params":"(finalObjectMappermapper@finalGroupByQueryConfigconfig@finalDruidProcessingConfigprocessingConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b8/9ae495b7de8d437caac15e13960fdc735de459.src","preCode":"  private static GroupByQueryRunnerFactory makeGroupByQueryRunnerFactory(\n      final ObjectMapper mapper,\n      final GroupByQueryConfig config,\n      final DruidProcessingConfig processingConfig\n  )\n  {\n    final Supplier<GroupByQueryConfig> configSupplier = Suppliers.ofInstance(config);\n    final Supplier<ByteBuffer> bufferSupplier =\n        () -> ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n\n    final NonBlockingPool<ByteBuffer> bufferPool = new StupidPool<>(\n        \"GroupByQueryEngine-bufferPool\",\n        bufferSupplier\n    );\n    final BlockingPool<ByteBuffer> mergeBufferPool = new DefaultBlockingPool<>(\n        bufferSupplier,\n        processingConfig.getNumMergeBuffers()\n    );\n    final GroupByStrategySelector strategySelector = new GroupByStrategySelector(\n        configSupplier,\n        new GroupByStrategyV1(\n            configSupplier,\n            new GroupByQueryEngine(configSupplier, bufferPool),\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER,\n            bufferPool\n        ),\n        new GroupByStrategyV2(\n            processingConfig,\n            configSupplier,\n            QueryConfig::new,\n            bufferPool,\n            mergeBufferPool,\n            mapper,\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER\n        )\n    );\n    final GroupByQueryQueryToolChest toolChest = new GroupByQueryQueryToolChest(strategySelector);\n    return new GroupByQueryRunnerFactory(strategySelector, toolChest);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/CachingClusteredClientBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"N"},{"authorDate":"2020-06-03 09:26:18","commitOrder":5,"curCode":"  public static Pair<GroupByQueryRunnerFactory, Closer> makeQueryRunnerFactory(\n      final ObjectMapper mapper,\n      final GroupByQueryConfig config,\n      final DruidProcessingConfig processingConfig\n  )\n  {\n    final Supplier<GroupByQueryConfig> configSupplier = Suppliers.ofInstance(config);\n    final CloseableStupidPool<ByteBuffer> bufferPool = new CloseableStupidPool<>(\n        \"GroupByQueryEngine-bufferPool\",\n        new Supplier<ByteBuffer>()\n        {\n          @Override\n          public ByteBuffer get()\n          {\n            return ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n          }\n        }\n    );\n    final CloseableDefaultBlockingPool<ByteBuffer> mergeBufferPool = new CloseableDefaultBlockingPool<>(\n        new Supplier<ByteBuffer>()\n        {\n          @Override\n          public ByteBuffer get()\n          {\n            return ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n          }\n        },\n        processingConfig.getNumMergeBuffers()\n    );\n    final GroupByStrategySelector strategySelector = new GroupByStrategySelector(\n        configSupplier,\n        new GroupByStrategyV1(\n            configSupplier,\n            new GroupByQueryEngine(configSupplier, bufferPool),\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER,\n            bufferPool\n        ),\n        new GroupByStrategyV2(\n            processingConfig,\n            configSupplier,\n            Suppliers.ofInstance(new QueryConfig()),\n            bufferPool,\n            mergeBufferPool,\n            mapper,\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER\n        )\n    );\n    final GroupByQueryQueryToolChest toolChest = new GroupByQueryQueryToolChest(strategySelector);\n    final Closer closer = Closer.create();\n    closer.register(() -> {\n      \r\n      Assert.assertEquals(bufferPool.poolSize(), bufferPool.objectsCreatedCount());\n      bufferPool.close();\n    });\n    closer.register(mergeBufferPool);\n    return Pair.of(new GroupByQueryRunnerFactory(strategySelector, toolChest), closer);\n  }\n","date":"2020-06-03 09:26:18","endLine":414,"groupId":"19839","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"makeQueryRunnerFactory","params":"(finalObjectMappermapper@finalGroupByQueryConfigconfig@finalDruidProcessingConfigprocessingConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/04/17d4a430ba8ee4870be805a1317ac22beda004.src","preCode":"  public static Pair<GroupByQueryRunnerFactory, Closer> makeQueryRunnerFactory(\n      final ObjectMapper mapper,\n      final GroupByQueryConfig config,\n      final DruidProcessingConfig processingConfig\n  )\n  {\n    final Supplier<GroupByQueryConfig> configSupplier = Suppliers.ofInstance(config);\n    final CloseableStupidPool<ByteBuffer> bufferPool = new CloseableStupidPool<>(\n        \"GroupByQueryEngine-bufferPool\",\n        new Supplier<ByteBuffer>()\n        {\n          @Override\n          public ByteBuffer get()\n          {\n            return ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n          }\n        }\n    );\n    final CloseableDefaultBlockingPool<ByteBuffer> mergeBufferPool = new CloseableDefaultBlockingPool<>(\n        new Supplier<ByteBuffer>()\n        {\n          @Override\n          public ByteBuffer get()\n          {\n            return ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n          }\n        },\n        processingConfig.getNumMergeBuffers()\n    );\n    final GroupByStrategySelector strategySelector = new GroupByStrategySelector(\n        configSupplier,\n        new GroupByStrategyV1(\n            configSupplier,\n            new GroupByQueryEngine(configSupplier, bufferPool),\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER,\n            bufferPool\n        ),\n        new GroupByStrategyV2(\n            processingConfig,\n            configSupplier,\n            Suppliers.ofInstance(new QueryConfig()),\n            bufferPool,\n            mergeBufferPool,\n            mapper,\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER\n        )\n    );\n    final GroupByQueryQueryToolChest toolChest = new GroupByQueryQueryToolChest(strategySelector);\n    final Closer closer = Closer.create();\n    closer.register(bufferPool);\n    closer.register(mergeBufferPool);\n    return Pair.of(new GroupByQueryRunnerFactory(strategySelector, toolChest), closer);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"M"}],"commitId":"3d81564a14253515f9dc849334fa7db073eb5f58","commitMessage":"@@@Fix various processing buffer leaks and simplify BlockingPool. (#9928)\n\n* - GroupByQueryEngineV2: Fix leak of intermediate processing buffer when\n  exceptions are thrown before result sequence is created.\n- PooledTopNAlgorithm: Fix leak of intermediate processing buffer when\n  exceptions are thrown before the PooledTopNParams object is created.\n- BlockingPool: Remove unused \"take\" methods.\n\n* Add tests to verify that buffers have been returned.","date":"2020-06-03 09:26:18","modifiedFileCount":"10","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-07-30 06:19:18","codes":[{"authorDate":"2020-07-30 06:19:18","commitOrder":6,"curCode":"  private static GroupByQueryRunnerFactory makeGroupByQueryRunnerFactory(\n      final ObjectMapper mapper,\n      final GroupByQueryConfig config,\n      final DruidProcessingConfig processingConfig\n  )\n  {\n    final Supplier<GroupByQueryConfig> configSupplier = Suppliers.ofInstance(config);\n    final Supplier<ByteBuffer> bufferSupplier =\n        () -> ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n\n    final NonBlockingPool<ByteBuffer> bufferPool = new StupidPool<>(\n        \"GroupByQueryEngine-bufferPool\",\n        bufferSupplier\n    );\n    final BlockingPool<ByteBuffer> mergeBufferPool = new DefaultBlockingPool<>(\n        bufferSupplier,\n        processingConfig.getNumMergeBuffers()\n    );\n    final GroupByStrategySelector strategySelector = new GroupByStrategySelector(\n        configSupplier,\n        new GroupByStrategyV1(\n            configSupplier,\n            new GroupByQueryEngine(configSupplier, bufferPool),\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER,\n            bufferPool\n        ),\n        new GroupByStrategyV2(\n            processingConfig,\n            configSupplier,\n            bufferPool,\n            mergeBufferPool,\n            mapper,\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER\n        )\n    );\n    final GroupByQueryQueryToolChest toolChest = new GroupByQueryQueryToolChest(strategySelector);\n    return new GroupByQueryRunnerFactory(strategySelector, toolChest);\n  }\n","date":"2020-07-30 06:19:18","endLine":383,"groupId":"106423","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"makeGroupByQueryRunnerFactory","params":"(finalObjectMappermapper@finalGroupByQueryConfigconfig@finalDruidProcessingConfigprocessingConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6c/53abd521dc066dd2c99e47cbd94b69833b5d93.src","preCode":"  private static GroupByQueryRunnerFactory makeGroupByQueryRunnerFactory(\n      final ObjectMapper mapper,\n      final GroupByQueryConfig config,\n      final DruidProcessingConfig processingConfig\n  )\n  {\n    final Supplier<GroupByQueryConfig> configSupplier = Suppliers.ofInstance(config);\n    final Supplier<ByteBuffer> bufferSupplier =\n        () -> ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n\n    final NonBlockingPool<ByteBuffer> bufferPool = new StupidPool<>(\n        \"GroupByQueryEngine-bufferPool\",\n        bufferSupplier\n    );\n    final BlockingPool<ByteBuffer> mergeBufferPool = new DefaultBlockingPool<>(\n        bufferSupplier,\n        processingConfig.getNumMergeBuffers()\n    );\n    final GroupByStrategySelector strategySelector = new GroupByStrategySelector(\n        configSupplier,\n        new GroupByStrategyV1(\n            configSupplier,\n            new GroupByQueryEngine(configSupplier, bufferPool),\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER,\n            bufferPool\n        ),\n        new GroupByStrategyV2(\n            processingConfig,\n            configSupplier,\n            QueryConfig::new,\n            bufferPool,\n            mergeBufferPool,\n            mapper,\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER\n        )\n    );\n    final GroupByQueryQueryToolChest toolChest = new GroupByQueryQueryToolChest(strategySelector);\n    return new GroupByQueryRunnerFactory(strategySelector, toolChest);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/CachingClusteredClientBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"M"},{"authorDate":"2020-07-30 06:19:18","commitOrder":6,"curCode":"  public static Pair<GroupByQueryRunnerFactory, Closer> makeQueryRunnerFactory(\n      final ObjectMapper mapper,\n      final GroupByQueryConfig config,\n      final DruidProcessingConfig processingConfig\n  )\n  {\n    final Supplier<GroupByQueryConfig> configSupplier = Suppliers.ofInstance(config);\n    final CloseableStupidPool<ByteBuffer> bufferPool = new CloseableStupidPool<>(\n        \"GroupByQueryEngine-bufferPool\",\n        new Supplier<ByteBuffer>()\n        {\n          @Override\n          public ByteBuffer get()\n          {\n            return ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n          }\n        }\n    );\n    final CloseableDefaultBlockingPool<ByteBuffer> mergeBufferPool = new CloseableDefaultBlockingPool<>(\n        new Supplier<ByteBuffer>()\n        {\n          @Override\n          public ByteBuffer get()\n          {\n            return ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n          }\n        },\n        processingConfig.getNumMergeBuffers()\n    );\n    final GroupByStrategySelector strategySelector = new GroupByStrategySelector(\n        configSupplier,\n        new GroupByStrategyV1(\n            configSupplier,\n            new GroupByQueryEngine(configSupplier, bufferPool),\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER,\n            bufferPool\n        ),\n        new GroupByStrategyV2(\n            processingConfig,\n            configSupplier,\n            bufferPool,\n            mergeBufferPool,\n            mapper,\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER\n        )\n    );\n    final GroupByQueryQueryToolChest toolChest = new GroupByQueryQueryToolChest(strategySelector);\n    final Closer closer = Closer.create();\n    closer.register(() -> {\n      \r\n      Assert.assertEquals(bufferPool.poolSize(), bufferPool.objectsCreatedCount());\n      bufferPool.close();\n    });\n    closer.register(mergeBufferPool);\n    return Pair.of(new GroupByQueryRunnerFactory(strategySelector, toolChest), closer);\n  }\n","date":"2020-07-30 06:19:18","endLine":413,"groupId":"106423","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"makeQueryRunnerFactory","params":"(finalObjectMappermapper@finalGroupByQueryConfigconfig@finalDruidProcessingConfigprocessingConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/ab616c0fad68a016579f2df9e8be147134bbd0.src","preCode":"  public static Pair<GroupByQueryRunnerFactory, Closer> makeQueryRunnerFactory(\n      final ObjectMapper mapper,\n      final GroupByQueryConfig config,\n      final DruidProcessingConfig processingConfig\n  )\n  {\n    final Supplier<GroupByQueryConfig> configSupplier = Suppliers.ofInstance(config);\n    final CloseableStupidPool<ByteBuffer> bufferPool = new CloseableStupidPool<>(\n        \"GroupByQueryEngine-bufferPool\",\n        new Supplier<ByteBuffer>()\n        {\n          @Override\n          public ByteBuffer get()\n          {\n            return ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n          }\n        }\n    );\n    final CloseableDefaultBlockingPool<ByteBuffer> mergeBufferPool = new CloseableDefaultBlockingPool<>(\n        new Supplier<ByteBuffer>()\n        {\n          @Override\n          public ByteBuffer get()\n          {\n            return ByteBuffer.allocateDirect(processingConfig.intermediateComputeSizeBytes());\n          }\n        },\n        processingConfig.getNumMergeBuffers()\n    );\n    final GroupByStrategySelector strategySelector = new GroupByStrategySelector(\n        configSupplier,\n        new GroupByStrategyV1(\n            configSupplier,\n            new GroupByQueryEngine(configSupplier, bufferPool),\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER,\n            bufferPool\n        ),\n        new GroupByStrategyV2(\n            processingConfig,\n            configSupplier,\n            Suppliers.ofInstance(new QueryConfig()),\n            bufferPool,\n            mergeBufferPool,\n            mapper,\n            QueryRunnerTestHelper.NOOP_QUERYWATCHER\n        )\n    );\n    final GroupByQueryQueryToolChest toolChest = new GroupByQueryQueryToolChest(strategySelector);\n    final Closer closer = Closer.create();\n    closer.register(() -> {\n      \r\n      Assert.assertEquals(bufferPool.poolSize(), bufferPool.objectsCreatedCount());\n      bufferPool.close();\n    });\n    closer.register(mergeBufferPool);\n    return Pair.of(new GroupByQueryRunnerFactory(strategySelector, toolChest), closer);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"M"}],"commitId":"574b062f1f6f1cf0637d99d4ea540a95971c7489","commitMessage":"@@@Cluster wide default query context setting (#10208)\n\n* Cluster wide default query context setting\n\n* Cluster wide default query context setting\n\n* Cluster wide default query context setting\n\n* add docs\n\n* fix docs\n\n* update props\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* update docs\n\n* address comments\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix NPE","date":"2020-07-30 06:19:18","modifiedFileCount":"21","status":"M","submitter":"Maytas Monsereenusorn"}]
