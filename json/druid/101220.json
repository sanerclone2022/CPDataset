[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2020-05-30 06:03:35","commitOrder":2,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    JoinFilterColumnCorrelationAnalysis that = (JoinFilterColumnCorrelationAnalysis) o;\n    return Objects.equals(joinColumn, that.joinColumn) &&\n           baseColumns.equals(that.baseColumns) &&\n           baseExpressions.equals(that.baseExpressions) &&\n           Objects.equals(correlatedValuesMap, that.correlatedValuesMap);\n  }\n","date":"2020-05-30 06:03:35","endLine":102,"groupId":"3804","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/60/71f404e499e51c52639f0162a4c60005c06327.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    JoinFilterColumnCorrelationAnalysis that = (JoinFilterColumnCorrelationAnalysis) o;\n    return Objects.equals(joinColumn, that.joinColumn) &&\n           baseColumns.equals(that.baseColumns) &&\n           baseExpressions.equals(that.baseExpressions) &&\n           Objects.equals(correlatedValuesMap, that.correlatedValuesMap);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterColumnCorrelationAnalysis.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ColumnAnalysis that = (ColumnAnalysis) o;\n    return hasMultipleValues == that.hasMultipleValues &&\n           size == that.size &&\n           Objects.equals(type, that.type) &&\n           Objects.equals(cardinality, that.cardinality) &&\n           Objects.equals(minValue, that.minValue) &&\n           Objects.equals(maxValue, that.maxValue) &&\n           Objects.equals(errorMessage, that.errorMessage);\n  }\n","date":"2018-08-31 00:56:26","endLine":193,"groupId":"15589","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/aa/9da8d40af4e6d11725e6c53d6991baf9c01d5f.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ColumnAnalysis that = (ColumnAnalysis) o;\n    return hasMultipleValues == that.hasMultipleValues &&\n           size == that.size &&\n           Objects.equals(type, that.type) &&\n           Objects.equals(cardinality, that.cardinality) &&\n           Objects.equals(minValue, that.minValue) &&\n           Objects.equals(maxValue, that.maxValue) &&\n           Objects.equals(errorMessage, that.errorMessage);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/metadata/metadata/ColumnAnalysis.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"NB"}],"commitId":"9c40bebc02dfd13e1bd58f2f45fd24424e4530a4","commitMessage":"@@@Refactor JoinFilterAnalyzer - part 2 (#9929)\n\n* Refactor JoinFilterAnalyzer\n\nThis patch attempts to make it easier to follow the join filter analysis code\nwith the hope of making it easier to add rewrite optimizations in the future.\n\nTo keep the patch small and easy to review.  this is the first of at least 2\npatches that are planned.\n\nThis patch adds a builder to the Pre-Analysis.  so that it is easier to\ninstantiate the preAnalysis. It also moves some of the filter normalization\ncode out to Fitlers with associated tests.\n\n* fix tests\n\n* Refactor JoinFilterAnalyzer - part 2\n\nThis change introduces the following components:\n * RhsRewriteCandidates - a wrapper for a list of candidates and associated\n     functions to operate on the set of candidates.\n * JoinableClauses - a wrapper for the list of JoinableClause that represent\n     a join condition and the associated functions to operate on the clauses.\n * Equiconditions - a wrapper representing the equiconditions that are used\n     in the join condition.\n\nAnd associated test changes.\n\nThis refactoring surfaced 2 bugs:\n - Missing equals and hashcode implementation for RhsRewriteCandidate.  thus\n   allowing potential duplicates in the rhs rewrite candidates\n - Missing Filter#supportsRequiredColumnRewrite check in\n   analyzeJoinFilterClause.  which could result in UnsupportedOperationException\n   being thrown by the filter\n\n* fix compile error\n\n* remove unused class","date":"2020-05-30 06:03:35","modifiedFileCount":"10","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2020-08-14 05:55:32","codes":[{"authorDate":"2020-05-30 06:03:35","commitOrder":3,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    JoinFilterColumnCorrelationAnalysis that = (JoinFilterColumnCorrelationAnalysis) o;\n    return Objects.equals(joinColumn, that.joinColumn) &&\n           baseColumns.equals(that.baseColumns) &&\n           baseExpressions.equals(that.baseExpressions) &&\n           Objects.equals(correlatedValuesMap, that.correlatedValuesMap);\n  }\n","date":"2020-05-30 06:03:35","endLine":102,"groupId":"101220","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/60/71f404e499e51c52639f0162a4c60005c06327.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    JoinFilterColumnCorrelationAnalysis that = (JoinFilterColumnCorrelationAnalysis) o;\n    return Objects.equals(joinColumn, that.joinColumn) &&\n           baseColumns.equals(that.baseColumns) &&\n           baseExpressions.equals(that.baseExpressions) &&\n           Objects.equals(correlatedValuesMap, that.correlatedValuesMap);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterColumnCorrelationAnalysis.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"N"},{"authorDate":"2020-08-14 05:55:32","commitOrder":3,"curCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ColumnAnalysis that = (ColumnAnalysis) o;\n    return hasMultipleValues == that.hasMultipleValues &&\n           hasNulls == that.hasNulls &&\n           size == that.size &&\n           Objects.equals(type, that.type) &&\n           Objects.equals(cardinality, that.cardinality) &&\n           Objects.equals(minValue, that.minValue) &&\n           Objects.equals(maxValue, that.maxValue) &&\n           Objects.equals(errorMessage, that.errorMessage);\n  }\n","date":"2020-08-14 05:55:32","endLine":212,"groupId":"101220","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"equals","params":"(Objecto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4e/db4b7517dc9aae7e75df71ef80e5bfd3991f88.src","preCode":"  public boolean equals(Object o)\n  {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ColumnAnalysis that = (ColumnAnalysis) o;\n    return hasMultipleValues == that.hasMultipleValues &&\n           size == that.size &&\n           Objects.equals(type, that.type) &&\n           Objects.equals(cardinality, that.cardinality) &&\n           Objects.equals(minValue, that.minValue) &&\n           Objects.equals(maxValue, that.maxValue) &&\n           Objects.equals(errorMessage, that.errorMessage);\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/metadata/metadata/ColumnAnalysis.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"e053348f747f6428e14362e4844e916f8790b726","commitMessage":"@@@add hasNulls to ColumnCapabilities.  ColumnAnalysis (#10219)\n\n* add isNullable to ColumnCapabilities.  ColumnAnalysis\n\n* better builder\n\n* fix segment metadata queries in integration tests\n\n* adjustments\n\n* cleanup\n\n* fix spotbugs\n\n* treat unknown as true in segmentmetadata\n\n* rename to hasNulls.  add docs\n\n* fixup\n\n* test the dim indexer selector isNull fix for numeric columns\n\n* fixes\n\n* oof","date":"2020-08-14 05:55:32","modifiedFileCount":"29","status":"M","submitter":"Clint Wylie"}]
