[{"authorTime":"2018-09-14 05:42:18","codes":[{"authorDate":"2018-09-14 05:42:18","commitOrder":1,"curCode":"  public void testSpecSuspend()\n  {\n\n    TestSupervisorSpec running = new TestSupervisorSpec(\"my-id\", null, null, false) {\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n    TestSupervisorSpec suspended = new TestSupervisorSpec(\"my-id\", null, null, true) {\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\"))\n            .andReturn(Optional.of(running)).times(1)\n            .andReturn(Optional.of(suspended)).times(1);\n    EasyMock.expect(supervisorManager.suspendOrResumeSupervisor(\"my-id\", true)).andReturn(true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specSuspend(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    TestSupervisorSpec responseSpec = (TestSupervisorSpec) response.getEntity();\n    Assert.assertEquals(suspended.id, responseSpec.id);\n    Assert.assertEquals(suspended.suspended, responseSpec.suspended);\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(suspended)).atLeastOnce();\n    replayAll();\n\n    response = supervisorResource.specSuspend(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"error\", \"[my-id] is already suspended\"), response.getEntity());\n  }\n","date":"2018-09-14 05:42:18","endLine":337,"groupId":"12876","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpecSuspend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9d/6eab33e1e75fa40a9f9d2844377ff8d31d0aae.src","preCode":"  public void testSpecSuspend()\n  {\n\n    TestSupervisorSpec running = new TestSupervisorSpec(\"my-id\", null, null, false) {\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n    TestSupervisorSpec suspended = new TestSupervisorSpec(\"my-id\", null, null, true) {\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\"))\n            .andReturn(Optional.of(running)).times(1)\n            .andReturn(Optional.of(suspended)).times(1);\n    EasyMock.expect(supervisorManager.suspendOrResumeSupervisor(\"my-id\", true)).andReturn(true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specSuspend(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    TestSupervisorSpec responseSpec = (TestSupervisorSpec) response.getEntity();\n    Assert.assertEquals(suspended.id, responseSpec.id);\n    Assert.assertEquals(suspended.suspended, responseSpec.suspended);\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(suspended)).atLeastOnce();\n    replayAll();\n\n    response = supervisorResource.specSuspend(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"error\", \"[my-id] is already suspended\"), response.getEntity());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"B"},{"authorDate":"2018-09-14 05:42:18","commitOrder":1,"curCode":"  public void testSpecResume()\n  {\n    TestSupervisorSpec suspended = new TestSupervisorSpec(\"my-id\", null, null, true) {\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n    TestSupervisorSpec running = new TestSupervisorSpec(\"my-id\", null, null, false) {\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\"))\n            .andReturn(Optional.of(suspended)).times(1)\n            .andReturn(Optional.of(running)).times(1);\n    EasyMock.expect(supervisorManager.suspendOrResumeSupervisor(\"my-id\", false)).andReturn(true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specResume(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    TestSupervisorSpec responseSpec = (TestSupervisorSpec) response.getEntity();\n    Assert.assertEquals(running.id, responseSpec.id);\n    Assert.assertEquals(running.suspended, responseSpec.suspended);\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(running)).atLeastOnce();\n    replayAll();\n\n    response = supervisorResource.specResume(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"error\", \"[my-id] is already running\"), response.getEntity());\n  }\n","date":"2018-09-14 05:42:18","endLine":385,"groupId":"12876","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpecResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9d/6eab33e1e75fa40a9f9d2844377ff8d31d0aae.src","preCode":"  public void testSpecResume()\n  {\n    TestSupervisorSpec suspended = new TestSupervisorSpec(\"my-id\", null, null, true) {\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n    TestSupervisorSpec running = new TestSupervisorSpec(\"my-id\", null, null, false) {\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\"))\n            .andReturn(Optional.of(suspended)).times(1)\n            .andReturn(Optional.of(running)).times(1);\n    EasyMock.expect(supervisorManager.suspendOrResumeSupervisor(\"my-id\", false)).andReturn(true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specResume(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    TestSupervisorSpec responseSpec = (TestSupervisorSpec) response.getEntity();\n    Assert.assertEquals(running.id, responseSpec.id);\n    Assert.assertEquals(running.suspended, responseSpec.suspended);\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(running)).atLeastOnce();\n    replayAll();\n\n    response = supervisorResource.specResume(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"error\", \"[my-id] is already running\"), response.getEntity());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"B"}],"commitId":"91a37c692dd8db34d6e4323cd61dba38a00145b1","commitMessage":"@@@'suspend' and 'resume' support for supervisors (kafka indexing service.  materialized views) (#6234)\n\n* 'suspend' and 'resume' support for kafka indexing service\nchanges:\n* introduces `SuspendableSupervisorSpec` interface to describe supervisors which support suspend/resume functionality controlled through the `SupervisorManager`.  which will gracefully shutdown the supervisor and it's tasks.  update it's `SupervisorSpec` with either a suspended or running state.  and update with the toggled spec. Spec updates are provided by `SuspendableSupervisorSpec.createSuspendedSpec` and `SuspendableSupervisorSpec.createRunningSpec` respectively.\n* `KafkaSupervisorSpec` extends `SuspendableSupervisorSpec` and now supports suspend/resume functionality. The difference in behavior between 'running' and 'suspended' state is whether the supervisor will attempt to ensure that indexing tasks are or are not running respectively. Behavior is identical otherwise.\n* `SupervisorResource` now provides `/druid/indexer/v1/supervisor/{id}/suspend` and `/druid/indexer/v1/supervisor/{id}/resume` which are used to suspend/resume suspendable supervisors\n* Deprecated `/druid/indexer/v1/supervisor/{id}/shutdown` and moved it's functionality to `/druid/indexer/v1/supervisor/{id}/terminate` since 'shutdown' is ambiguous verbage for something that effectively stops a supervisor forever\n* Added ability to get all supervisor specs from `/druid/indexer/v1/supervisor` by supplying the 'full' query parameter `/druid/indexer/v1/supervisor?full` which will return a list of json objects of the form `{\"id\":<id>.  \"spec\":<SupervisorSpec>}`\n* Updated overlord console ui to enable suspend/resume.  and changed 'shutdown' to 'terminate'\n\n* move overlord console status to own column in supervisor table so does not look like garbage\n\n* spacing\n\n* padding\n\n* other kind of spacing\n\n* fix rebase fail\n\n* fix more better\n\n* all supervisors now suspendable.  updated materialized view supervisor to support suspend.  more tests\n\n* fix log\n","date":"2018-09-14 05:42:18","modifiedFileCount":"16","status":"B","submitter":"Clint Wylie"},{"authorTime":"2018-10-11 12:41:59","codes":[{"authorDate":"2018-10-11 12:41:59","commitOrder":2,"curCode":"  public void testSpecSuspend()\n  {\n    TestSupervisorSpec suspended = new TestSupervisorSpec(\"my-id\", null, null, true) {\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.suspendOrResumeSupervisor(\"my-id\", true)).andReturn(true);\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(suspended));\n    replayAll();\n\n    Response response = supervisorResource.specSuspend(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    TestSupervisorSpec responseSpec = (TestSupervisorSpec) response.getEntity();\n    Assert.assertEquals(suspended.id, responseSpec.id);\n    Assert.assertEquals(suspended.suspended, responseSpec.suspended);\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.suspendOrResumeSupervisor(\"my-id\", true)).andReturn(false);\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(suspended));\n    replayAll();\n\n    response = supervisorResource.specSuspend(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"error\", \"[my-id] is already suspended\"), response.getEntity());\n  }\n","date":"2018-10-11 12:41:59","endLine":327,"groupId":"104181","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpecSuspend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d8/93898c5a1729872c095f6745cab0edf6a9fb05.src","preCode":"  public void testSpecSuspend()\n  {\n\n    TestSupervisorSpec running = new TestSupervisorSpec(\"my-id\", null, null, false) {\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n    TestSupervisorSpec suspended = new TestSupervisorSpec(\"my-id\", null, null, true) {\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\"))\n            .andReturn(Optional.of(running)).times(1)\n            .andReturn(Optional.of(suspended)).times(1);\n    EasyMock.expect(supervisorManager.suspendOrResumeSupervisor(\"my-id\", true)).andReturn(true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specSuspend(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    TestSupervisorSpec responseSpec = (TestSupervisorSpec) response.getEntity();\n    Assert.assertEquals(suspended.id, responseSpec.id);\n    Assert.assertEquals(suspended.suspended, responseSpec.suspended);\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(suspended)).atLeastOnce();\n    replayAll();\n\n    response = supervisorResource.specSuspend(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"error\", \"[my-id] is already suspended\"), response.getEntity());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"},{"authorDate":"2018-10-11 12:41:59","commitOrder":2,"curCode":"  public void testSpecResume()\n  {\n    TestSupervisorSpec running = new TestSupervisorSpec(\"my-id\", null, null, false) {\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.suspendOrResumeSupervisor(\"my-id\", false)).andReturn(true);\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(running));\n    replayAll();\n\n    Response response = supervisorResource.specResume(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    TestSupervisorSpec responseSpec = (TestSupervisorSpec) response.getEntity();\n    Assert.assertEquals(running.id, responseSpec.id);\n    Assert.assertEquals(running.suspended, responseSpec.suspended);\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.suspendOrResumeSupervisor(\"my-id\", false)).andReturn(false);\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(running));\n    replayAll();\n\n    response = supervisorResource.specResume(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"error\", \"[my-id] is already running\"), response.getEntity());\n  }\n","date":"2018-10-11 12:41:59","endLine":364,"groupId":"104181","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpecResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d8/93898c5a1729872c095f6745cab0edf6a9fb05.src","preCode":"  public void testSpecResume()\n  {\n    TestSupervisorSpec suspended = new TestSupervisorSpec(\"my-id\", null, null, true) {\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n    TestSupervisorSpec running = new TestSupervisorSpec(\"my-id\", null, null, false) {\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\"))\n            .andReturn(Optional.of(suspended)).times(1)\n            .andReturn(Optional.of(running)).times(1);\n    EasyMock.expect(supervisorManager.suspendOrResumeSupervisor(\"my-id\", false)).andReturn(true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specResume(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    TestSupervisorSpec responseSpec = (TestSupervisorSpec) response.getEntity();\n    Assert.assertEquals(running.id, responseSpec.id);\n    Assert.assertEquals(running.suspended, responseSpec.suspended);\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"my-id\")).andReturn(Optional.of(running)).atLeastOnce();\n    replayAll();\n\n    response = supervisorResource.specResume(\"my-id\");\n    verifyAll();\n\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"error\", \"[my-id] is already running\"), response.getEntity());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"M"}],"commitId":"f8f4526b168568b770b0fd309d3bc2c59dfe4e27","commitMessage":"@@@Add suspend|resume|terminate all supervisors endpoints. (#6272)\n\n* ability to showdown all supervisors\n\n* add doc\n\n* address comments\n\n* fix code style\n\n* address comments\n\n* change ternary assignment to if statement\n\n* better docs\n","date":"2018-10-11 12:41:59","modifiedFileCount":"3","status":"M","submitter":"QiuMM"}]
