[{"authorTime":"2018-12-22 03:49:24","codes":[{"authorDate":"2018-12-22 03:49:24","commitOrder":1,"curCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        1,\n        (long) 3,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.getBuildV9Directly());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","date":"2018-12-22 03:49:24","endLine":218,"groupId":"19056","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4e/967c414a9f0aa05afafbbdb4ff977a832add2a.src","preCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        1,\n        (long) 3,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.getBuildV9Directly());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"B"},{"authorDate":"2018-12-22 03:49:24","commitOrder":1,"curCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        1,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","date":"2018-12-22 03:49:24","endLine":146,"groupId":"19187","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ab/cf07f6c10b830a38b72fccd1ca81a8e50938df.src","preCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        1,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"}],"commitId":"7c7997e8a1183a7bffad731ca94e8b4c381e8665","commitMessage":"@@@Add Kinesis Indexing Service to core Druid (#6431)\n\n* created seekablestream classes\n\n* created seekablestreamsupervisor class\n\n* first attempt to integrate kafa indexing service to use SeekableStream\n\n* seekablestream bug fixes\n\n* kafkarecordsupplier\n\n* integrated kafka indexing service with seekablestream\n\n* implemented resume/suspend and refactored some package names\n\n* moved kinesis indexing service into core druid extensions\n\n* merged some changes from kafka supervisor race condition\n\n* integrated kinesis-indexing-service with seekablestream\n\n* unite tests for kinesis-indexing-service\n\n* various bug fixes for kinesis-indexing-service\n\n* refactored kinesisindexingtask\n\n* finished up more kinesis unit tests\n\n* more bug fixes for kinesis-indexing-service\n\n* finsihed refactoring kinesis unit tests\n\n* removed KinesisParititons and KafkaPartitions to use SeekableStreamPartitions\n\n* kinesis-indexing-service code cleanup and docs\n\n* merge #6291\n\nmerge #6337\n\nmerge #6383\n\n* added more docs and reordered methods\n\n* fixd kinesis tests after merging master and added docs in seekablestream\n\n* fix various things from pr comment\n\n* improve recordsupplier and add unit tests\n\n* migrated to aws-java-sdk-kinesis\n\n* merge changes from master\n\n* fix pom files and forbiddenapi checks\n\n* checkpoint JavaType bug fix\n\n* fix pom and stuff\n\n* disable checkpointing in kinesis\n\n* fix kinesis sequence number null in closed shard\n\n* merge changes from master\n\n* fixes for kinesis tasks\n\n* capitalized <partitionType.  sequenceType>\n\n* removed abstract class loggers\n\n* conform to guava api restrictions\n\n* add docker for travis other modules test\n\n* address comments\n\n* improve RecordSupplier to supply records in batch\n\n* fix strict compile issue\n\n* add test scope for localstack dependency\n\n* kinesis indexing task refactoring\n\n* comments\n\n* github comments\n\n* minor fix\n\n* removed unneeded readme\n\n* fix deserialization bug\n\n* fix various bugs\n\n* KinesisRecordSupplier unable to catch up to earliest position in stream bug fix\n\n* minor changes to kinesis\n\n* implement deaggregate for kinesis\n\n* Merge remote-tracking branch 'upstream/master' into seekablestream\n\n* fix kinesis offset discrepancy with kafka\n\n* kinesis record supplier disable getPosition\n\n* pr comments\n\n* mock for kinesis tests and remove docker dependency for unit tests\n\n* PR comments\n\n* avg lag in kafkasupervisor #6587\n\n* refacotred SequenceMetadata in taskRunners\n\n* small fix\n\n* more small fix\n\n* recordsupplier resource leak\n\n* revert .travis.yml formatting\n\n* fix style\n\n* kinesis docs\n\n* doc part2\n\n* more docs\n\n* comments\n\n* comments*2\n\n* revert string replace changes\n\n* comments\n\n* teamcity\n\n* comments part 1\n\n* comments part 2\n\n* comments part 3\n\n* merge #6754\n\n* fix injection binding\n\n* comments\n\n* KinesisRegion refactor\n\n* comments part idk lol\n\n* can't think of a commit msg anymore\n\n* remove possiblyResetDataSourceMetadata() for IncrementalPublishingTaskRunner\n\n* commmmmmmmmmments\n\n* extra error handling in KinesisRecordSupplier getRecords\n\n* comments\n\n* quickfix\n\n* typo\n\n* oof\n","date":"2018-12-22 03:49:24","modifiedFileCount":"22","status":"B","submitter":"Joshua Sun"},{"authorTime":"2019-01-11 01:50:14","codes":[{"authorDate":"2019-01-11 01:50:14","commitOrder":2,"curCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        1,\n        (long) 3,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.getBuildV9Directly());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","date":"2019-01-11 01:50:14","endLine":218,"groupId":"19056","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/29/83324b0ce4c150be9792a9075bec876084f719.src","preCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        1,\n        (long) 3,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.getBuildV9Directly());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2019-01-11 01:50:14","commitOrder":2,"curCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        1,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","date":"2019-01-11 01:50:14","endLine":146,"groupId":"17692","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/14/ecd4e90e82b80bc3454ac3f9862f278ee14053.src","preCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        1,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"c35a39d70bf705aa49c3a3c97bab87959bb80a4e","commitMessage":"@@@Add support maxRowsPerSegment for auto compaction (#6780)\n\n* Add support maxRowsPerSegment for auto compaction\n\n* fix build\n\n* fix build\n\n* fix teamcity\n\n* add test\n\n* fix test\n\n* address comment\n","date":"2019-01-11 01:50:14","modifiedFileCount":"33","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-07-11 03:22:24","codes":[{"authorDate":"2019-07-11 03:22:24","commitOrder":3,"curCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        1,\n        (long) 3,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.getBuildV9Directly());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","date":"2019-07-11 03:22:24","endLine":338,"groupId":"19056","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/91/8cc2dd3b157df651aad89e2788b05767f8fc3f.src","preCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        1,\n        (long) 3,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.getBuildV9Directly());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"},{"authorDate":"2019-07-11 03:22:24","commitOrder":3,"curCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        1,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","date":"2019-07-11 03:22:24","endLine":155,"groupId":"17692","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/b4f372cf83889f346db5c89acd81d2ecc33b68.src","preCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        1,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"14aec7fceca90dfaf9b2ce4dae68186d04ffcc47","commitMessage":"@@@add config to optionally disable all compression  in intermediate segment persists while ingestion (#7919)\n\n* disable all compression in intermediate segment persists while ingestion\n\n* more changes and build fix\n\n* by default retain existing indexingSpec for intermediate persisted segments\n\n* document indexSpecForIntermediatePersists index tuning config\n\n* fix build issues\n\n* update serde tests\n","date":"2019-07-11 03:22:24","modifiedFileCount":"56","status":"M","submitter":"Himanshu"},{"authorTime":"2019-07-11 03:22:24","codes":[{"authorDate":"2019-10-16 14:19:17","commitOrder":4,"curCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        1,\n        (long) 3,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.getBuildV9Directly());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","date":"2019-10-16 14:19:17","endLine":339,"groupId":"19056","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/13/cfd74c72270ef2cf7a613f2b35611ff58987ef.src","preCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        1,\n        (long) 3,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.getBuildV9Directly());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"},{"authorDate":"2019-07-11 03:22:24","commitOrder":4,"curCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        1,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","date":"2019-07-11 03:22:24","endLine":155,"groupId":"17692","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/b4f372cf83889f346db5c89acd81d2ecc33b68.src","preCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        1,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"N"}],"commitId":"89ce6384f57cb13c776cfcc9fc7b97126b834fac","commitMessage":"@@@More Kinesis resharding adjustments (#8671)\n\n* More Kinesis resharding adjustments\n\n* Fix TC inspection\n\n* Fix comment'\n\n* Adjust comment.  small refactor\n\n* Make repartition transition time configurable\n\n* Add spellcheck exclusion\n\n* Spelling fix\n","date":"2019-10-16 14:19:17","modifiedFileCount":"13","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2019-07-11 03:22:24","codes":[{"authorDate":"2020-03-17 12:39:53","commitOrder":5,"curCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        1,\n        (long) 3,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.getBuildV9Directly());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","date":"2020-03-17 12:39:53","endLine":340,"groupId":"19056","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/15/e56c032dff7b2a0334159b4ae0d3979e4a2676.src","preCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        1,\n        (long) 3,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.getBuildV9Directly());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"},{"authorDate":"2019-07-11 03:22:24","commitOrder":5,"curCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        1,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","date":"2019-07-11 03:22:24","endLine":155,"groupId":"17692","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/b4f372cf83889f346db5c89acd81d2ecc33b68.src","preCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        1,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"N"}],"commitId":"142742f291daaf1ac9afea319cacbbe2a3077952","commitMessage":"@@@add kinesis lag metric (#9509)\n\n* add kinesis lag metric\n\n* fixes\n\n* heh\n\n* do it right this time\n\n* more test\n\n* split out supervisor report lags into lagMillis.  remove latest offsets from kinesis supervisor report since always null.  review stuffs","date":"2020-03-17 12:39:53","modifiedFileCount":"17","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-10-24 09:34:26","codes":[{"authorDate":"2020-10-24 09:34:26","commitOrder":6,"curCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        null,\n        1,\n        (long) 3,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(original.getAppendableIndexSpec(), copy.getAppendableIndexSpec());\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.getBuildV9Directly());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","date":"2020-10-24 09:34:26","endLine":351,"groupId":"19056","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/69/a70a494f167e6c1079fb1dd2511e34f99f90c1.src","preCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        1,\n        (long) 3,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.getBuildV9Directly());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"},{"authorDate":"2020-10-24 09:34:26","commitOrder":6,"curCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        null,\n        1,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(original.getAppendableIndexSpec(), copy.getAppendableIndexSpec());\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","date":"2020-10-24 09:34:26","endLine":162,"groupId":"11513","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/88/88a69a0d89d8e4b1376377ac46320ea068c94f.src","preCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        1,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"f3a2903218573f5d336b082b1c9b8a60a19e8c54","commitMessage":"@@@Configurable Index Type (#10335)\n\n* Introduce a Configurable Index Type\n\n* Change to @UnstableApi\n\n* Add AppendableIndexSpecTest\n\n* Update doc\n\n* Add spelling exception\n\n* Add tests coverage\n\n* Revert some of the changes to reduce diff\n\n* Minor fixes\n\n* Update getMaxBytesInMemoryOrDefault() comment\n\n* Fix typo.  remove redundant interface\n\n* Remove off-heap spec (postponed to a later PR)\n\n* Add javadocs to AppendableIndexSpec\n\n* Describe testCreateTask()\n\n* Add tests for AppendableIndexSpec within TuningConfig\n\n* Modify hashCode() to conform with equals()\n\n* Add comment where building incremental-index\n\n* Add \"EqualsVerifier\" tests\n\n* Revert some of the API back to AppenderatorConfig\n\n* Don't use multi-line comments\n\n* Remove knob documentation (deferred)","date":"2020-10-24 09:34:26","modifiedFileCount":"72","status":"M","submitter":"Liran Funaro"},{"authorTime":"2021-01-27 16:34:56","codes":[{"authorDate":"2021-01-27 16:34:56","commitOrder":7,"curCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        null,\n        1,\n        (long) 3,\n        null,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(original.getAppendableIndexSpec(), copy.getAppendableIndexSpec());\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.getBuildV9Directly());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","date":"2021-01-27 16:34:56","endLine":354,"groupId":"19056","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/36/0067195de3da2cb63274a4768cc20ba1884da8.src","preCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        null,\n        1,\n        (long) 3,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(original.getAppendableIndexSpec(), copy.getAppendableIndexSpec());\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.getBuildV9Directly());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"},{"authorDate":"2021-01-27 16:34:56","commitOrder":7,"curCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        null,\n        1,\n        null,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(original.getAppendableIndexSpec(), copy.getAppendableIndexSpec());\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","date":"2021-01-27 16:34:56","endLine":163,"groupId":"11513","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e2/7d7d0c07d42baac585ca143d215e8a50c0ea57.src","preCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        null,\n        1,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(original.getAppendableIndexSpec(), copy.getAppendableIndexSpec());\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"a46d561bd7e2b045a08a2e475847d4a7505a1c93","commitMessage":"@@@Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead (#10740)\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* fix checkstyle\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* fix test\n\n* fix test\n\n* add log\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* address comments\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add config to skip overhead memory calculation\n\n* add test for the skipBytesInMemoryOverheadCheck config\n\n* add docs\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix spelling\n\n* address comments\n\n* fix travis\n\n* address comments","date":"2021-01-27 16:34:56","modifiedFileCount":"50","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-06-24 07:36:46","codes":[{"authorDate":"2021-06-24 07:36:46","commitOrder":8,"curCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        null,\n        1,\n        (long) 3,\n        null,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(original.getAppendableIndexSpec(), copy.getAppendableIndexSpec());\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","date":"2021-06-24 07:36:46","endLine":344,"groupId":"102327","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3b/ba03e9136c9894dc5a00993678b9ced2df0be9.src","preCode":"  public void testConvert()\n  {\n    KinesisSupervisorTuningConfig original = new KinesisSupervisorTuningConfig(\n        null,\n        1,\n        (long) 3,\n        null,\n        2,\n        100L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        true,\n        false,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        1000,\n        500,\n        500,\n        6000,\n        2,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KinesisIndexTaskTuningConfig copy = (KinesisIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(original.getAppendableIndexSpec(), copy.getAppendableIndexSpec());\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(3, copy.getMaxBytesInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertEquals(100L, (long) copy.getMaxTotalRows());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertTrue(copy.getBuildV9Directly());\n    Assert.assertTrue(copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n    Assert.assertEquals(1000, copy.getRecordBufferSize());\n    Assert.assertEquals(500, copy.getRecordBufferOfferTimeout());\n    Assert.assertEquals(500, copy.getRecordBufferFullWait());\n    Assert.assertEquals(6000, copy.getFetchSequenceNumberTimeout());\n    Assert.assertEquals(2, (int) copy.getFetchThreads());\n    Assert.assertFalse(copy.isSkipSequenceNumberAvailabilityCheck());\n    Assert.assertTrue(copy.isResetOffsetAutomatically());\n    Assert.assertEquals(100, copy.getMaxRecordsPerPoll());\n    Assert.assertEquals(new Period().withDays(Integer.MAX_VALUE), copy.getIntermediateHandoffPeriod());\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"},{"authorDate":"2021-06-24 07:36:46","commitOrder":8,"curCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        null,\n        1,\n        null,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(original.getAppendableIndexSpec(), copy.getAppendableIndexSpec());\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","date":"2021-06-24 07:36:46","endLine":162,"groupId":"102327","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"testConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/66/74c36f17ddd53112772e3364939218291725fb.src","preCode":"  public void testConvert()\n  {\n    KafkaSupervisorTuningConfig original = new KafkaSupervisorTuningConfig(\n        null,\n        1,\n        null,\n        null,\n        2,\n        10L,\n        new Period(\"PT3S\"),\n        new File(\"/tmp/xxx\"),\n        4,\n        new IndexSpec(),\n        new IndexSpec(),\n        true,\n        true,\n        5L,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null\n    );\n    KafkaIndexTaskTuningConfig copy = (KafkaIndexTaskTuningConfig) original.convertToTaskTuningConfig();\n\n    Assert.assertEquals(original.getAppendableIndexSpec(), copy.getAppendableIndexSpec());\n    Assert.assertEquals(1, copy.getMaxRowsInMemory());\n    Assert.assertEquals(2, copy.getMaxRowsPerSegment().intValue());\n    Assert.assertNotEquals(null, copy.getMaxTotalRows());\n    Assert.assertEquals(10L, copy.getMaxTotalRows().longValue());\n    Assert.assertEquals(new Period(\"PT3S\"), copy.getIntermediatePersistPeriod());\n    Assert.assertEquals(new File(\"/tmp/xxx\"), copy.getBasePersistDirectory());\n    Assert.assertEquals(4, copy.getMaxPendingPersists());\n    Assert.assertEquals(new IndexSpec(), copy.getIndexSpec());\n    Assert.assertEquals(true, copy.isReportParseExceptions());\n    Assert.assertEquals(5L, copy.getHandoffConditionTimeout());\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskTuningConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"de8daf8139dcb8a497f1191587dcd5e7ea992092","commitMessage":"@@@Delete buildV9Directly in Kafka and Kinesis Indexing Service (#11351)\n\n* delete_buildV9Directly_in_kafka_and_kinesis_indexing_service\n\n* delete\n\n* delete them from server\n\n* delete buildV9Directly from hadoop indexing\n\n* bug fixed\n\nCo-authored-by: yuanyi <yuanyi@freewheel.tv>","date":"2021-06-24 07:36:46","modifiedFileCount":"38","status":"M","submitter":"Yi Yuan"}]
