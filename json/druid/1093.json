[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testExplicitInclude()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    Assert.assertEquals(\n        ImmutableSet.of(\"dimC\", \"col1\", \"metric1\", \"metric2\"),\n        schema.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions()\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":131,"groupId":"15747","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExplicitInclude","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6c/5c5d490c2a06fe93b827173011642e6bf08778.src","preCode":"  public void testExplicitInclude()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    Assert.assertEquals(\n        ImmutableSet.of(\"dimC\", \"col1\", \"metric1\", \"metric2\"),\n        schema.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","date":"2018-08-31 00:56:26","endLine":222,"groupId":"5659","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlapMetricNameAndDim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6c/5c5d490c2a06fe93b827173011642e6bf08778.src","preCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-04-07 07:02:50","codes":[{"authorDate":"2020-04-07 07:02:50","commitOrder":2,"curCode":"  public void testExplicitInclude()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        VALID_DATASOURCE_CHARS_NAME,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    Assert.assertEquals(\n        ImmutableSet.of(\"dimC\", \"col1\", \"metric1\", \"metric2\"),\n        schema.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions()\n    );\n  }\n","date":"2020-04-07 07:02:50","endLine":141,"groupId":"5410","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExplicitInclude","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ff/081c598b70dbd94e2ef113d2ef95dd4de2fd15.src","preCode":"  public void testExplicitInclude()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    Assert.assertEquals(\n        ImmutableSet.of(\"dimC\", \"col1\", \"metric1\", \"metric2\"),\n        schema.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-04-07 07:02:50","commitOrder":2,"curCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        VALID_DATASOURCE_CHARS_NAME,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","date":"2020-04-07 07:02:50","endLine":232,"groupId":"5414","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlapMetricNameAndDim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ff/081c598b70dbd94e2ef113d2ef95dd4de2fd15.src","preCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"}],"commitId":"7bf1ebb0b86f3b5af224cc4ae56868a4d703a061","commitMessage":"@@@Add tests for valid and invalid datasource names (#9614)\n\n* Add tests for valid and invalid datasource names\n\n* code review\n\n* clean up dependencies","date":"2020-04-07 07:02:50","modifiedFileCount":"1","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2020-04-08 00:47:18","codes":[{"authorDate":"2020-04-08 00:47:18","commitOrder":3,"curCode":"  public void testExplicitInclude()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    Assert.assertEquals(\n        ImmutableSet.of(\"dimC\", \"col1\", \"metric1\", \"metric2\"),\n        schema.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions()\n    );\n  }\n","date":"2020-04-08 00:47:18","endLine":139,"groupId":"5410","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExplicitInclude","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8c/e50d3817b90d84d8cb2ce65890e7a31ea5ac7f.src","preCode":"  public void testExplicitInclude()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        VALID_DATASOURCE_CHARS_NAME,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    Assert.assertEquals(\n        ImmutableSet.of(\"dimC\", \"col1\", \"metric1\", \"metric2\"),\n        schema.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2020-04-08 00:47:18","commitOrder":3,"curCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","date":"2020-04-08 00:47:18","endLine":230,"groupId":"5414","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlapMetricNameAndDim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8c/e50d3817b90d84d8cb2ce65890e7a31ea5ac7f.src","preCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        VALID_DATASOURCE_CHARS_NAME,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"d267b1c414b9b55b129729692755273d2a35e304","commitMessage":"@@@check paths used for shuffle intermediary data manager get and delete (#9630)\n\n* check paths used for shuffle intermediary data manager get and delete\n\n* add test\n\n* newline\n\n* meh","date":"2020-04-08 00:47:18","modifiedFileCount":"10","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-05-09 12:53:39","codes":[{"authorDate":"2020-05-09 12:53:39","commitOrder":4,"curCode":"  public void testExplicitInclude()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    Assert.assertEquals(\n        ImmutableSet.of(\"dimC\", \"col1\", \"metric1\", \"metric2\"),\n        schema.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions()\n    );\n  }\n","date":"2020-05-09 12:53:39","endLine":141,"groupId":"17790","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testExplicitInclude","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/116b4fe7481bd79f3d8221e1e7627d99cfec3a.src","preCode":"  public void testExplicitInclude()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    Assert.assertEquals(\n        ImmutableSet.of(\"dimC\", \"col1\", \"metric1\", \"metric2\"),\n        schema.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2020-05-09 12:53:39","commitOrder":4,"curCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","date":"2020-05-09 12:53:39","endLine":234,"groupId":"17996","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlapMetricNameAndDim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/116b4fe7481bd79f3d8221e1e7627d99cfec3a.src","preCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"}],"commitId":"28be107a1c18ef1fd9fd268c8b04e232efb63695","commitMessage":"@@@add flag to flattenSpec to keep null columns (#9814)\n\n* add flag to flattenSpec to keep null columns\n\n* remove changes to inputFormat interface\n\n* add comment\n\n* change comment message\n\n* update web console e2e test\n\n* move keepNullColmns to JSONParseSpec\n\n* fix merge conflicts\n\n* fix tests\n\n* set keepNullColumns to false by default\n\n* fix lgtm\n\n* change Boolean to boolean.  add keepNullColumns to hash.  add tests for keepKeepNullColumns false + true with no nuulul columns\n\n* Add equals verifier tests","date":"2020-05-09 12:53:39","modifiedFileCount":"41","status":"M","submitter":"mcbrewster"},{"authorTime":"2020-07-14 12:15:54","codes":[{"authorDate":"2020-07-14 12:15:54","commitOrder":5,"curCode":"  public void testExplicitInclude()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        IdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    Assert.assertEquals(\n        ImmutableSet.of(\"dimC\", \"col1\", \"metric1\", \"metric2\"),\n        schema.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions()\n    );\n  }\n","date":"2020-07-14 12:15:54","endLine":141,"groupId":"17790","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testExplicitInclude","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/13/bf27d2c1781d3ed6db3e3d17d12c760ca63d78.src","preCode":"  public void testExplicitInclude()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    Assert.assertEquals(\n        ImmutableSet.of(\"dimC\", \"col1\", \"metric1\", \"metric2\"),\n        schema.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2020-07-14 12:15:54","commitOrder":5,"curCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        IdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","date":"2020-07-14 12:15:54","endLine":234,"groupId":"17996","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlapMetricNameAndDim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/13/bf27d2c1781d3ed6db3e3d17d12c760ca63d78.src","preCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"}],"commitId":"e6c9142129f1462feabefb4b13aa8a037fbe793f","commitMessage":"@@@Add validation for authenticator and authorizer name (#10106)\n\n* Add validation for authorizer name\n\n* fix deps\n\n* add javadocs\n\n* Do not use resource filters\n\n* Fix BasicAuthenticatorResource as well\n\n* Add integration tests\n\n* fix test\n\n* fix","date":"2020-07-14 12:15:54","modifiedFileCount":"16","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2020-07-14 12:15:54","codes":[{"authorDate":"2021-03-26 01:32:21","commitOrder":6,"curCode":"  public void testExplicitInclude()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        IdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    Assert.assertEquals(\n        ImmutableSet.of(\"__time\", \"dimC\", \"col1\", \"metric1\", \"metric2\"),\n        schema.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions()\n    );\n  }\n","date":"2021-03-26 01:32:21","endLine":145,"groupId":"17790","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testExplicitInclude","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0b/9eb398e2ad2f1e94ec74334135e5aef0d344cf.src","preCode":"  public void testExplicitInclude()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        IdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    Assert.assertEquals(\n        ImmutableSet.of(\"dimC\", \"col1\", \"metric1\", \"metric2\"),\n        schema.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2020-07-14 12:15:54","commitOrder":6,"curCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        IdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","date":"2020-07-14 12:15:54","endLine":234,"groupId":"17996","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverlapMetricNameAndDim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/13/bf27d2c1781d3ed6db3e3d17d12c760ca63d78.src","preCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        IdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"N"}],"commitId":"bf20f9e9798417c9293a195690b6adcb48f44d3f","commitMessage":"@@@DruidInputSource: Fix issues in column projection.  timestamp handling. (#10267)\n\n* DruidInputSource: Fix issues in column projection.  timestamp handling.\n\nDruidInputSource.  DruidSegmentReader changes:\n\n1) Remove \"dimensions\" and \"metrics\". They are not necessary.  because we\n   can compute which columns we need to read based on what is going to\n   be used by the timestamp.  transform.  dimensions.  and metrics.\n2) Start using ColumnsFilter (see below) to decide which columns we need\n   to read.\n3) Actually respect the \"timestampSpec\". Previously.  it was ignored.  and\n   the timestamp of the returned InputRows was set to the `__time` column\n   of the input datasource.\n\n(1) and (2) together fix a bug in which the DruidInputSource would not\nproperly read columns that are used as inputs to a transformSpec.\n\n(3) fixes a bug where the timestampSpec would be ignored if you attempted\nto set the column to something other than `__time`.\n\n(1) and (3) are breaking changes.\n\nWeb console changes:\n\n1) Remove \"Dimensions\" and \"Metrics\" from the Druid input source.\n2) Set timestampSpec to `{\"column\": \"__time\".  \"format\": \"millis\"}` for\n   compatibility with the new behavior.\n\nOther changes:\n\n1) Add ColumnsFilter.  a new class that allows input readers to determine\n   which columns they need to read. Currently.  it's only used by the\n   DruidInputSource.  but it could be used by other columnar input sources\n   in the future.\n2) Add a ColumnsFilter to InputRowSchema.\n3) Remove the metric names from InputRowSchema (they were unused).\n4) Add InputRowSchemas.fromDataSchema method that computes the proper\n   ColumnsFilter for given timestamp.  dimensions.  transform.  and metrics.\n5) Add \"getRequiredColumns\" method to TransformSpec to support the above.\n\n* Various fixups.\n\n* Uncomment incorrectly commented lines.\n\n* Move TransformSpecTest to the proper module.\n\n* Add druid.indexer.task.ignoreTimestampSpecForDruidInputSource setting.\n\n* Fix.\n\n* Fix build.\n\n* Checkstyle.\n\n* Misc fixes.\n\n* Fix test.\n\n* Move config.\n\n* Fix imports.\n\n* Fixup.\n\n* Fix ShuffleResourceTest.\n\n* Add import.\n\n* Smarter exclusions.\n\n* Fixes based on tests.\n\nAlso.  add TIME_COLUMN constant in the web console.\n\n* Adjustments for tests.\n\n* Reorder test data.\n\n* Update docs.\n\n* Update docs to say Druid 0.22.0 instead of 0.21.0.\n\n* Fix test.\n\n* Fix ITAutoCompactionTest.\n\n* Changes from review & from merging.","date":"2021-03-26 01:32:21","modifiedFileCount":"60","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-04-13 10:03:15","codes":[{"authorDate":"2021-03-26 01:32:21","commitOrder":7,"curCode":"  public void testExplicitInclude()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        IdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    Assert.assertEquals(\n        ImmutableSet.of(\"__time\", \"dimC\", \"col1\", \"metric1\", \"metric2\"),\n        schema.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions()\n    );\n  }\n","date":"2021-03-26 01:32:21","endLine":145,"groupId":"1093","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testExplicitInclude","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0b/9eb398e2ad2f1e94ec74334135e5aef0d344cf.src","preCode":"  public void testExplicitInclude()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(\n                    DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"time\", \"dimA\", \"dimB\", \"col2\")),\n                    ImmutableList.of(\"dimC\"),\n                    null\n                ),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        IdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    Assert.assertEquals(\n        ImmutableSet.of(\"__time\", \"dimC\", \"col1\", \"metric1\", \"metric2\"),\n        schema.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"},{"authorDate":"2021-04-13 10:03:15","commitOrder":7,"curCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        IdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\n        \"Cannot specify a column more than once: [metric1] seen in dimensions list, metricsSpec list\"\n    );\n\n    schema.getParser();\n  }\n","date":"2021-04-13 10:03:15","endLine":243,"groupId":"1093","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"testOverlapMetricNameAndDim","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/90b6796414794a9c2db506b613b93c0f95224f.src","preCode":"  public void testOverlapMetricNameAndDim()\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\n                    \"time\",\n                    \"dimA\",\n                    \"dimB\",\n                    \"metric1\"\n                )), ImmutableList.of(\"dimC\"), null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema schema = new DataSchema(\n        IdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n    schema.getParser();\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"}],"commitId":"c3faa24f269ad2e8fb7102255cb3738dd01e0536","commitMessage":"@@@DataSchema: Improve duplicate-column error message. (#11082)\n\n* DataSchema: Improve duplicate-column error message.\n\nNow.  when duplicate columns are specified.  the error message will include\ninformation about where those duplicate columns were seen. Also.  if there\nare multiple duplicate columns.  all will be listed in the error message\ninstead of just the first one encountered.\n\n* Fix style for checkstyle.\n\n* Further improve error message.","date":"2021-04-13 10:03:15","modifiedFileCount":"2","status":"M","submitter":"Gian Merlino"}]
