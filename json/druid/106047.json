[{"authorTime":"2020-05-07 07:10:41","codes":[{"authorDate":"2020-05-07 07:10:41","commitOrder":1,"curCode":"  public void test_filterPushDown_factToCountryRightWithFilterOnNullColumnsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.RIGHT));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(\n        joinableClauses,\n        originalFilter\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableList.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"countryNumber\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n  }\n","date":"2020-05-07 07:10:41","endLine":1310,"groupId":"9946","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"test_filterPushDown_factToCountryRightWithFilterOnNullColumnsUsingLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5c/8d9033ae76b5b349437bb270024cab3e6028ee.src","preCode":"  public void test_filterPushDown_factToCountryRightWithFilterOnNullColumnsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.RIGHT));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(\n        joinableClauses,\n        originalFilter\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableList.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"countryNumber\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1260,"status":"B"},{"authorDate":"2020-05-07 07:10:41","commitOrder":1,"curCode":"  public void test_filterPushDown_factToCountryInnerUsingCountryNumberFilterOnNullsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.INNER));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(\n        joinableClauses,\n        originalFilter\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableList.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n  }\n","date":"2020-05-07 07:10:41","endLine":1538,"groupId":"9946","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"test_filterPushDown_factToCountryInnerUsingCountryNumberFilterOnNullsUsingLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5c/8d9033ae76b5b349437bb270024cab3e6028ee.src","preCode":"  public void test_filterPushDown_factToCountryInnerUsingCountryNumberFilterOnNullsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.INNER));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(\n        joinableClauses,\n        originalFilter\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableList.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1489,"status":"B"}],"commitId":"accd710115efea87120d58f01b08342065d6ae5f","commitMessage":"@@@Add equivalent test coverage for all RHS join impls (#9831)\n\n* Add equivalent test coverage for all RHS join impls\n\n* address comments","date":"2020-05-07 07:10:41","modifiedFileCount":"2","status":"B","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-05-09 14:45:35","codes":[{"authorDate":"2020-05-09 14:45:35","commitOrder":2,"curCode":"  public void test_filterPushDown_factToCountryRightWithFilterOnNullColumnsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.RIGHT));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(\n        joinableClauses,\n        originalFilter\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableSet.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"countryNumber\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n  }\n","date":"2020-05-09 14:45:35","endLine":1315,"groupId":"9946","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"test_filterPushDown_factToCountryRightWithFilterOnNullColumnsUsingLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/3b35937891c8ecc8e93ccba7c7ac9803bcb8dd.src","preCode":"  public void test_filterPushDown_factToCountryRightWithFilterOnNullColumnsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.RIGHT));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(\n        joinableClauses,\n        originalFilter\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableList.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"countryNumber\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1265,"status":"M"},{"authorDate":"2020-05-09 14:45:35","commitOrder":2,"curCode":"  public void test_filterPushDown_factToCountryInnerUsingCountryNumberFilterOnNullsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.INNER));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(\n        joinableClauses,\n        originalFilter\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableSet.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n  }\n","date":"2020-05-09 14:45:35","endLine":1543,"groupId":"9946","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"test_filterPushDown_factToCountryInnerUsingCountryNumberFilterOnNullsUsingLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/3b35937891c8ecc8e93ccba7c7ac9803bcb8dd.src","preCode":"  public void test_filterPushDown_factToCountryInnerUsingCountryNumberFilterOnNullsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.INNER));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(\n        joinableClauses,\n        originalFilter\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableList.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1494,"status":"M"}],"commitId":"16d293d6e0d81963af3b3d468efd658317d91052","commitMessage":"@@@Directly rewrite filters on RHS join columns into LHS equivalents (#9818)\n\n* Directly rewrite filters on RHS join columns into LHS equivalents\n\n* PR comments\n\n* Fix inspection\n\n* Revert unnecessary ExprMacroTable change\n\n* Fix build after merge\n\n* Address PR comments","date":"2020-05-09 14:45:35","modifiedFileCount":"30","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2020-06-19 12:32:29","codes":[{"authorDate":"2020-06-19 12:32:29","commitOrder":3,"curCode":"  public void test_filterPushDown_factToCountryRightWithFilterOnNullColumnsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.RIGHT));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = makeDefaultConfigPreAnalysisGroup(\n        originalFilter,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysisGroup\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"countryNumber\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableSet.of()\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = joinFilterPreAnalysisGroup.getPreAnalysisForSingleLevelMode();\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","date":"2020-06-19 12:32:29","endLine":1416,"groupId":"22346","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"test_filterPushDown_factToCountryRightWithFilterOnNullColumnsUsingLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/89/3e0542b8ceeadecc91f82ca360b687e72b148e.src","preCode":"  public void test_filterPushDown_factToCountryRightWithFilterOnNullColumnsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.RIGHT));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(\n        joinableClauses,\n        originalFilter\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableSet.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"countryNumber\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1363,"status":"M"},{"authorDate":"2020-06-19 12:32:29","commitOrder":3,"curCode":"  public void test_filterPushDown_factToCountryInnerUsingCountryNumberFilterOnNullsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.INNER));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = makeDefaultConfigPreAnalysisGroup(\n        originalFilter,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysisGroup\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableSet.of()\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = joinFilterPreAnalysisGroup.getPreAnalysisForSingleLevelMode();\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","date":"2020-06-19 12:32:29","endLine":1656,"groupId":"22346","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"test_filterPushDown_factToCountryInnerUsingCountryNumberFilterOnNullsUsingLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/89/3e0542b8ceeadecc91f82ca360b687e72b148e.src","preCode":"  public void test_filterPushDown_factToCountryInnerUsingCountryNumberFilterOnNullsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.INNER));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = simplePreAnalysis(\n        joinableClauses,\n        originalFilter\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableSet.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1604,"status":"M"}],"commitId":"37e150c0755c0efba609601b1122cd6bc8a271fb","commitMessage":"@@@Fix join filter rewrites with nested queries (#10015)\n\n* Fix join filter rewrites with nested queries\n\n* Fix test.  inspection.  coverage\n\n* Remove clauses from group key\n\n* Fix import order\n\nCo-authored-by: Gian Merlino <gianmerlino@gmail.com>","date":"2020-06-19 12:32:29","modifiedFileCount":"20","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2020-07-01 10:14:22","codes":[{"authorDate":"2020-07-01 10:14:22","commitOrder":4,"curCode":"  public void test_filterPushDown_factToCountryRightWithFilterOnNullColumnsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.RIGHT));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        originalFilter,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"countryNumber\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableSet.of()\n    );\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","date":"2020-07-01 10:14:22","endLine":1399,"groupId":"106047","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"test_filterPushDown_factToCountryRightWithFilterOnNullColumnsUsingLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ed/7e7c7759887a1bbaadcc28b4d41944a1e6078b.src","preCode":"  public void test_filterPushDown_factToCountryRightWithFilterOnNullColumnsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.RIGHT));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = makeDefaultConfigPreAnalysisGroup(\n        originalFilter,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysisGroup\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            \"countryNumber\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableSet.of()\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = joinFilterPreAnalysisGroup.getPreAnalysisForSingleLevelMode();\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1347,"status":"M"},{"authorDate":"2020-07-01 10:14:22","commitOrder":4,"curCode":"  public void test_filterPushDown_factToCountryInnerUsingCountryNumberFilterOnNullsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.INNER));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        originalFilter,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableSet.of()\n    );\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","date":"2020-07-01 10:14:22","endLine":1635,"groupId":"106047","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"test_filterPushDown_factToCountryInnerUsingCountryNumberFilterOnNullsUsingLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ed/7e7c7759887a1bbaadcc28b4d41944a1e6078b.src","preCode":"  public void test_filterPushDown_factToCountryInnerUsingCountryNumberFilterOnNullsUsingLookup()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryNameUsingIsoCodeLookup(JoinType.INNER));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", null),\n            new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n        )\n    );\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = makeDefaultConfigPreAnalysisGroup(\n        originalFilter,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysisGroup\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"k\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\"\n        ),\n        ImmutableList.of()\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", null),\n                new SelectorFilter(FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"v\", null)\n            )\n        ),\n        ImmutableSet.of()\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = joinFilterPreAnalysisGroup.getPreAnalysisForSingleLevelMode();\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1584,"status":"M"}],"commitId":"5faa897a342096b2ac88587ad62e6e15022b01dd","commitMessage":"@@@Join filter pre-analysis simplifications and sanity checks. (#10104)\n\n* Join filter pre-analysis simplifications and sanity checks.\n\n- At pre-analysis time.  only compute pre-analysis for the innermost\n  root query.  since this is the one that will run on the join that involves\n  the base datasource. Previously.  pre-analyses were computed for multiple\n  levels of the query.  some of which were unnecessary.\n- Remove JoinFilterPreAnalysisGroup and join query level gathering code. \n  since they existed to support precomputation of multiple pre-analyses.\n- Embed JoinFilterPreAnalysisKey into JoinFilterPreAnalysis and use it to\n  sanity check?at processing time that the correct pre-analysis was done.\n\nTangentially related changes:\n\n- Remove prioritizeAndLaneQuery functionality from LocalQuerySegmentWalker.\n  The computed priority and lanes were not being used.\n- Add \"getBaseQuery\" method to DataSourceAnalysis to support identification\n  of the proper subquery for filter pre-analysis.\n\n* Fix compilation errors.\n\n* Adjust tests.","date":"2020-07-01 10:14:22","modifiedFileCount":"20","status":"M","submitter":"Gian Merlino"}]
