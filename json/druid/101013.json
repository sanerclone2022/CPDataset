[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"      public void nodesAdded(List<DiscoveryDruidNode> nodesDiscovered)\n      {\n        synchronized (lock) {\n          ImmutableList.Builder<DiscoveryDruidNode> builder = ImmutableList.builder();\n          for (DiscoveryDruidNode node : nodesDiscovered) {\n            if (node.getServices().containsKey(service)) {\n              DiscoveryDruidNode prev = nodes.putIfAbsent(node.getDruidNode().getHostAndPortToUse(), node);\n\n              if (prev == null) {\n                builder.add(node);\n              } else {\n                log.warn(\"Node[%s] discovered but already exists [%s].\", node, prev);\n              }\n            } else {\n              log.warn(\"Node[%s] discovered but doesn't have service[%s]. Ignored.\", node, service);\n            }\n          }\n\n          ImmutableList<DiscoveryDruidNode> newNodesAdded = null;\n          if (uninitializedNodeTypeListeners.isEmpty()) {\n            newNodesAdded = builder.build();\n          } else if (uninitializedNodeTypeListeners.remove(this) && uninitializedNodeTypeListeners.isEmpty()) {\n            newNodesAdded = ImmutableList.copyOf(nodes.values());\n          }\n\n          if (newNodesAdded != null) {\n            for (Listener listener : listeners) {\n              try {\n                listener.nodesAdded(newNodesAdded);\n              }\n              catch (Exception ex) {\n                log.error(ex, \"Listener[%s].nodesAdded(%s) threw exception. Ignored.\", listener, newNodesAdded);\n              }\n            }\n          }\n        }\n      }\n","date":"2018-08-31 00:56:26","endLine":183,"groupId":"8960","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"nodesAdded","params":"(List<DiscoveryDruidNode>nodesDiscovered)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/dc/d30ccb5e69ce65bdaffec3960c321124b23d2a.src","preCode":"      public void nodesAdded(List<DiscoveryDruidNode> nodesDiscovered)\n      {\n        synchronized (lock) {\n          ImmutableList.Builder<DiscoveryDruidNode> builder = ImmutableList.builder();\n          for (DiscoveryDruidNode node : nodesDiscovered) {\n            if (node.getServices().containsKey(service)) {\n              DiscoveryDruidNode prev = nodes.putIfAbsent(node.getDruidNode().getHostAndPortToUse(), node);\n\n              if (prev == null) {\n                builder.add(node);\n              } else {\n                log.warn(\"Node[%s] discovered but already exists [%s].\", node, prev);\n              }\n            } else {\n              log.warn(\"Node[%s] discovered but doesn't have service[%s]. Ignored.\", node, service);\n            }\n          }\n\n          ImmutableList<DiscoveryDruidNode> newNodesAdded = null;\n          if (uninitializedNodeTypeListeners.isEmpty()) {\n            newNodesAdded = builder.build();\n          } else if (uninitializedNodeTypeListeners.remove(this) && uninitializedNodeTypeListeners.isEmpty()) {\n            newNodesAdded = ImmutableList.copyOf(nodes.values());\n          }\n\n          if (newNodesAdded != null) {\n            for (Listener listener : listeners) {\n              try {\n                listener.nodesAdded(newNodesAdded);\n              }\n              catch (Exception ex) {\n                log.error(ex, \"Listener[%s].nodesAdded(%s) threw exception. Ignored.\", listener, newNodesAdded);\n              }\n            }\n          }\n        }\n      }\n","realPath":"server/src/main/java/org/apache/druid/discovery/DruidNodeDiscoveryProvider.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"      public void nodesRemoved(List<DiscoveryDruidNode> nodesDisappeared)\n      {\n        synchronized (lock) {\n          ImmutableList.Builder<DiscoveryDruidNode> builder = ImmutableList.builder();\n          for (DiscoveryDruidNode node : nodesDisappeared) {\n            DiscoveryDruidNode prev = nodes.remove(node.getDruidNode().getHostAndPortToUse());\n            if (prev != null) {\n              builder.add(node);\n            } else {\n              log.warn(\"Node[%s] disappeared but was unknown for service listener [%s].\", node, service);\n            }\n          }\n\n          if (uninitializedNodeTypeListeners.isEmpty()) {\n            ImmutableList<DiscoveryDruidNode> nodesRemoved = builder.build();\n            for (Listener listener : listeners) {\n              try {\n                listener.nodesRemoved(nodesRemoved);\n              }\n              catch (Exception ex) {\n                log.error(ex, \"Listener[%s].nodesRemoved(%s) threw exception. Ignored.\", listener, nodesRemoved);\n              }\n            }\n          }\n        }\n      }\n","date":"2018-08-31 00:56:26","endLine":211,"groupId":"15030","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"nodesRemoved","params":"(List<DiscoveryDruidNode>nodesDisappeared)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/dc/d30ccb5e69ce65bdaffec3960c321124b23d2a.src","preCode":"      public void nodesRemoved(List<DiscoveryDruidNode> nodesDisappeared)\n      {\n        synchronized (lock) {\n          ImmutableList.Builder<DiscoveryDruidNode> builder = ImmutableList.builder();\n          for (DiscoveryDruidNode node : nodesDisappeared) {\n            DiscoveryDruidNode prev = nodes.remove(node.getDruidNode().getHostAndPortToUse());\n            if (prev != null) {\n              builder.add(node);\n            } else {\n              log.warn(\"Node[%s] disappeared but was unknown for service listener [%s].\", node, service);\n            }\n          }\n\n          if (uninitializedNodeTypeListeners.isEmpty()) {\n            ImmutableList<DiscoveryDruidNode> nodesRemoved = builder.build();\n            for (Listener listener : listeners) {\n              try {\n                listener.nodesRemoved(nodesRemoved);\n              }\n              catch (Exception ex) {\n                log.error(ex, \"Listener[%s].nodesRemoved(%s) threw exception. Ignored.\", listener, nodesRemoved);\n              }\n            }\n          }\n        }\n      }\n","realPath":"server/src/main/java/org/apache/druid/discovery/DruidNodeDiscoveryProvider.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-12-01 08:12:56","codes":[{"authorDate":"2018-12-01 08:12:56","commitOrder":2,"curCode":"      public void nodesAdded(Collection<DiscoveryDruidNode> nodesDiscovered)\n      {\n        synchronized (lock) {\n          List<DiscoveryDruidNode> nodesAdded = new ArrayList<>();\n          for (DiscoveryDruidNode node : nodesDiscovered) {\n            if (node.getServices().containsKey(service)) {\n              DiscoveryDruidNode prev = nodes.putIfAbsent(node.getDruidNode().getHostAndPortToUse(), node);\n\n              if (prev == null) {\n                nodesAdded.add(node);\n              } else {\n                log.warn(\"Node[%s] discovered but already exists [%s].\", node, prev);\n              }\n            } else {\n              log.warn(\"Node[%s] discovered but doesn't have service[%s]. Ignored.\", node, service);\n            }\n          }\n\n          if (nodesAdded.isEmpty()) {\n            \r\n            return;\n          }\n\n          Collection<DiscoveryDruidNode> unmodifiableNodesAdded = Collections.unmodifiableCollection(nodesAdded);\n          for (Listener listener : listeners) {\n            try {\n              listener.nodesAdded(unmodifiableNodesAdded);\n            }\n            catch (Exception ex) {\n              log.error(ex, \"Listener[%s].nodesAdded(%s) threw exception. Ignored.\", listener, nodesAdded);\n            }\n          }\n        }\n      }\n","date":"2018-12-01 08:12:56","endLine":168,"groupId":"101013","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"nodesAdded","params":"(Collection<DiscoveryDruidNode>nodesDiscovered)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/79/e73c158fc943ee253c64b2c46e93b081b39834.src","preCode":"      public void nodesAdded(List<DiscoveryDruidNode> nodesDiscovered)\n      {\n        synchronized (lock) {\n          ImmutableList.Builder<DiscoveryDruidNode> builder = ImmutableList.builder();\n          for (DiscoveryDruidNode node : nodesDiscovered) {\n            if (node.getServices().containsKey(service)) {\n              DiscoveryDruidNode prev = nodes.putIfAbsent(node.getDruidNode().getHostAndPortToUse(), node);\n\n              if (prev == null) {\n                builder.add(node);\n              } else {\n                log.warn(\"Node[%s] discovered but already exists [%s].\", node, prev);\n              }\n            } else {\n              log.warn(\"Node[%s] discovered but doesn't have service[%s]. Ignored.\", node, service);\n            }\n          }\n\n          ImmutableList<DiscoveryDruidNode> newNodesAdded = null;\n          if (uninitializedNodeTypeListeners.isEmpty()) {\n            newNodesAdded = builder.build();\n          } else if (uninitializedNodeTypeListeners.remove(this) && uninitializedNodeTypeListeners.isEmpty()) {\n            newNodesAdded = ImmutableList.copyOf(nodes.values());\n          }\n\n          if (newNodesAdded != null) {\n            for (Listener listener : listeners) {\n              try {\n                listener.nodesAdded(newNodesAdded);\n              }\n              catch (Exception ex) {\n                log.error(ex, \"Listener[%s].nodesAdded(%s) threw exception. Ignored.\", listener, newNodesAdded);\n              }\n            }\n          }\n        }\n      }\n","realPath":"server/src/main/java/org/apache/druid/discovery/DruidNodeDiscoveryProvider.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2018-12-01 08:12:56","commitOrder":2,"curCode":"      public void nodesRemoved(Collection<DiscoveryDruidNode> nodesDisappeared)\n      {\n        synchronized (lock) {\n          List<DiscoveryDruidNode> nodesRemoved = new ArrayList<>();\n          for (DiscoveryDruidNode node : nodesDisappeared) {\n            DiscoveryDruidNode prev = nodes.remove(node.getDruidNode().getHostAndPortToUse());\n            if (prev != null) {\n              nodesRemoved.add(node);\n            } else {\n              log.warn(\"Node[%s] disappeared but was unknown for service listener [%s].\", node, service);\n            }\n          }\n\n          if (nodesRemoved.isEmpty()) {\n            \r\n            return;\n          }\n\n          Collection<DiscoveryDruidNode> unmodifiableNodesRemoved = Collections.unmodifiableCollection(nodesRemoved);\n          for (Listener listener : listeners) {\n            try {\n              listener.nodesRemoved(unmodifiableNodesRemoved);\n            }\n            catch (Exception ex) {\n              log.error(ex, \"Listener[%s].nodesRemoved(%s) threw exception. Ignored.\", listener, nodesRemoved);\n            }\n          }\n        }\n      }\n","date":"2018-12-01 08:12:56","endLine":199,"groupId":"101013","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"nodesRemoved","params":"(Collection<DiscoveryDruidNode>nodesDisappeared)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/79/e73c158fc943ee253c64b2c46e93b081b39834.src","preCode":"      public void nodesRemoved(List<DiscoveryDruidNode> nodesDisappeared)\n      {\n        synchronized (lock) {\n          ImmutableList.Builder<DiscoveryDruidNode> builder = ImmutableList.builder();\n          for (DiscoveryDruidNode node : nodesDisappeared) {\n            DiscoveryDruidNode prev = nodes.remove(node.getDruidNode().getHostAndPortToUse());\n            if (prev != null) {\n              builder.add(node);\n            } else {\n              log.warn(\"Node[%s] disappeared but was unknown for service listener [%s].\", node, service);\n            }\n          }\n\n          if (uninitializedNodeTypeListeners.isEmpty()) {\n            ImmutableList<DiscoveryDruidNode> nodesRemoved = builder.build();\n            for (Listener listener : listeners) {\n              try {\n                listener.nodesRemoved(nodesRemoved);\n              }\n              catch (Exception ex) {\n                log.error(ex, \"Listener[%s].nodesRemoved(%s) threw exception. Ignored.\", listener, nodesRemoved);\n              }\n            }\n          }\n        }\n      }\n","realPath":"server/src/main/java/org/apache/druid/discovery/DruidNodeDiscoveryProvider.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"}],"commitId":"ec38df75756b975461bf1234e26cd195c462107d","commitMessage":"@@@Simplify DruidNodeDiscoveryProvider; add DruidNodeDiscovery.Listener.nodeViewInitialized() (#6606)\n\n* Simplify DruidNodeDiscoveryProvider; add DruidNodeDiscovery.Listener.nodeViewInitialized() method; prohibit and eliminate some suboptimal Java 8 patterns\n\n* Fix style\n\n* Fix HttpEmitterTest.timeoutEmptyQueue()\n\n* Add DruidNodeDiscovery.Listener.nodeViewInitialized() calls in tests\n\n* Clarify code\n","date":"2018-12-01 08:12:56","modifiedFileCount":"25","status":"M","submitter":"Roman Leventov"}]
