[{"authorTime":"2020-01-17 05:14:20","codes":[{"authorDate":"2020-01-17 05:14:20","commitOrder":1,"curCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            ImmutableList.of(factToCountryOnNumber(JoinType.INNER))\n        ).makeCursors(\n            new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter(),\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L}\n        )\n    );\n  }\n","date":"2020-01-17 05:14:20","endLine":551,"groupId":"12483","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryInnerUsingCountryNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/27/de9aaa7caea0368014c0388bd07ec990203949.src","preCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            ImmutableList.of(factToCountryOnNumber(JoinType.INNER))\n        ).makeCursors(\n            new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter(),\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"B"},{"authorDate":"2020-01-17 05:14:20","commitOrder":1,"curCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT))\n        ).makeCursors(\n            new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter(),\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","date":"2020-01-17 05:14:20","endLine":631,"groupId":"22742","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryLeftWithFilterOnFacts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/27/de9aaa7caea0368014c0388bd07ec990203949.src","preCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT))\n        ).makeCursors(\n            new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter(),\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"B"}],"commitId":"a87db7f353cdee4dfa9b541063f59d67706d1b07","commitMessage":"@@@Add HashJoinSegment.  a virtual segment for joins. (#9111)\n\n* Add HashJoinSegment.  a virtual segment for joins.\n\nAn initial step towards #8728. This patch adds enough functionality to implement a joining\ncursor on top of a normal datasource. It does not include enough to actually do a query. For\nthat.  future patches will need to wire this low-level functionality into the query language.\n\n* Fixups.\n\n* Fix missing format argument.\n\n* Various tests and minor improvements.\n\n* Changes.\n\n* Remove or add tests for unused stuff.\n\n* Fix up package locations.\n","date":"2020-01-17 05:14:20","modifiedFileCount":"34","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-01-17 05:14:20","codes":[{"authorDate":"2020-02-08 08:23:37","commitOrder":2,"curCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            ImmutableList.of(factToCountryOnNumber(JoinType.INNER))\n        ).makeCursors(\n            new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter(),\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L}\n        )\n    );\n  }\n","date":"2020-02-08 08:23:37","endLine":500,"groupId":"12483","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryInnerUsingCountryNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/54/55fdd43eec8b040a77741564f2155dd00668f2.src","preCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            ImmutableList.of(factToCountryOnNumber(JoinType.INNER))\n        ).makeCursors(\n            new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter(),\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":447,"status":"M"},{"authorDate":"2020-01-17 05:14:20","commitOrder":2,"curCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT))\n        ).makeCursors(\n            new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter(),\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","date":"2020-01-17 05:14:20","endLine":631,"groupId":"22742","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryLeftWithFilterOnFacts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/27/de9aaa7caea0368014c0388bd07ec990203949.src","preCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT))\n        ).makeCursors(\n            new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter(),\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"N"}],"commitId":"ad8afc565c631c826bb1db0ebac611398a7ec9f3","commitMessage":"@@@Join filter pushdown initial implementation (#9301)\n\n* Join filter pushdown initial implementation\n\n* Fix test and spotbugs check\n\n* Address PR comments\n\n* More PR comments\n\n* Address some PR comments\n\n* Address more PR comments\n\n* Fix TC failures and address PR comments\n","date":"2020-02-08 08:23:37","modifiedFileCount":"18","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2020-01-17 05:14:20","codes":[{"authorDate":"2020-02-18 02:54:04","commitOrder":3,"curCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            ImmutableList.of(factToCountryOnNumber(JoinType.INNER))\n        ).makeCursors(\n            new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter(),\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[][]{new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}}\n        )\n    );\n  }\n","date":"2020-02-18 02:54:04","endLine":505,"groupId":"12483","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryInnerUsingCountryNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/87/6ec8ed2bd97da98348acde2c9b7f40e282b163.src","preCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            ImmutableList.of(factToCountryOnNumber(JoinType.INNER))\n        ).makeCursors(\n            new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter(),\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"M"},{"authorDate":"2020-01-17 05:14:20","commitOrder":3,"curCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT))\n        ).makeCursors(\n            new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter(),\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","date":"2020-01-17 05:14:20","endLine":631,"groupId":"22742","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryLeftWithFilterOnFacts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/27/de9aaa7caea0368014c0388bd07ec990203949.src","preCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT))\n        ).makeCursors(\n            new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter(),\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"N"}],"commitId":"73a0181e34f1e0816011b778bc1d3ecbe9d7ad97","commitMessage":"@@@Fix handling for columns that appear multiple times in join conditions (#9362)\n\n* Fix handling for columns that appear multiple times in join conditions\n\n* Remove unneeded comment\n\n* Fix test\n","date":"2020-02-18 02:54:04","modifiedFileCount":"7","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2020-03-17 13:16:14","codes":[{"authorDate":"2020-03-17 13:16:14","commitOrder":4,"curCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnNumber(JoinType.INNER));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        filter,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE_KEY\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[][]{new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}}\n        )\n    );\n  }\n","date":"2020-03-17 13:16:14","endLine":560,"groupId":"12483","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryInnerUsingCountryNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c8/460fe3410826f397aa73145776b09a776aed99.src","preCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            ImmutableList.of(factToCountryOnNumber(JoinType.INNER))\n        ).makeCursors(\n            new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter(),\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[][]{new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"M"},{"authorDate":"2020-03-17 13:16:14","commitOrder":4,"curCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        filter,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE_KEY\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","date":"2020-03-17 13:16:14","endLine":669,"groupId":"12483","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryLeftWithFilterOnFacts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c8/460fe3410826f397aa73145776b09a776aed99.src","preCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT))\n        ).makeCursors(\n            new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter(),\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":631,"status":"M"}],"commitId":"b1847364b0816cfc3c2ac376cd888033a06fb93f","commitMessage":"@@@More efficient join filter rewrites (#9516)\n\n* More efficient join filter rewrites\n\n* Rebase\n\n* Remove unused functions\n\n* PR comments.  fix compile\n\n* Adjust comment\n\n* Allow filter rewrite when join condition has LHS expression\n\n* Fix inspections\n\n* Fix tests","date":"2020-03-17 13:16:14","modifiedFileCount":"24","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2020-04-17 13:12:20","codes":[{"authorDate":"2020-04-17 13:12:20","commitOrder":5,"curCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnNumber(JoinType.INNER));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        filter,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[][]{new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}}\n        )\n    );\n  }\n","date":"2020-04-17 13:12:20","endLine":558,"groupId":"12483","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryInnerUsingCountryNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a9/b02e24a12dddadb864ef4c3e932243d10ce6f1.src","preCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnNumber(JoinType.INNER));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        filter,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE_KEY\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[][]{new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":491,"status":"M"},{"authorDate":"2020-04-17 13:12:20","commitOrder":5,"curCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        filter,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","date":"2020-04-17 13:12:20","endLine":667,"groupId":"12483","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryLeftWithFilterOnFacts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a9/b02e24a12dddadb864ef4c3e932243d10ce6f1.src","preCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        filter,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE_KEY\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"M"}],"commitId":"e677c62484bf02379ff8cb7855de1e3e43a4b4b1","commitMessage":"@@@document useFilterCNF query context parameter (#9647)\n\n* document useFilterCNF query context parameter\n\n* move context key to QueryContexts\n\n* Update .spelling","date":"2020-04-17 13:12:20","modifiedFileCount":"7","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-05-30 06:03:35","codes":[{"authorDate":"2020-05-30 06:03:35","commitOrder":6,"curCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnNumber(JoinType.INNER));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        JoinableClauses.fromList(joinableClauses),\n        VirtualColumns.EMPTY,\n        filter,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[][]{new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}}\n        )\n    );\n  }\n","date":"2020-05-30 06:03:35","endLine":628,"groupId":"12483","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryInnerUsingCountryNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2e/863b2487a2d635bd13d7c53183c95e11e33459.src","preCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnNumber(JoinType.INNER));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        filter,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[][]{new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":561,"status":"M"},{"authorDate":"2020-05-30 06:03:35","commitOrder":6,"curCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        JoinableClauses.fromList(joinableClauses),\n        VirtualColumns.EMPTY,\n        filter,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","date":"2020-05-30 06:03:35","endLine":737,"groupId":"12483","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryLeftWithFilterOnFacts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2e/863b2487a2d635bd13d7c53183c95e11e33459.src","preCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        filter,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":699,"status":"M"}],"commitId":"9c40bebc02dfd13e1bd58f2f45fd24424e4530a4","commitMessage":"@@@Refactor JoinFilterAnalyzer - part 2 (#9929)\n\n* Refactor JoinFilterAnalyzer\n\nThis patch attempts to make it easier to follow the join filter analysis code\nwith the hope of making it easier to add rewrite optimizations in the future.\n\nTo keep the patch small and easy to review.  this is the first of at least 2\npatches that are planned.\n\nThis patch adds a builder to the Pre-Analysis.  so that it is easier to\ninstantiate the preAnalysis. It also moves some of the filter normalization\ncode out to Fitlers with associated tests.\n\n* fix tests\n\n* Refactor JoinFilterAnalyzer - part 2\n\nThis change introduces the following components:\n * RhsRewriteCandidates - a wrapper for a list of candidates and associated\n     functions to operate on the set of candidates.\n * JoinableClauses - a wrapper for the list of JoinableClause that represent\n     a join condition and the associated functions to operate on the clauses.\n * Equiconditions - a wrapper representing the equiconditions that are used\n     in the join condition.\n\nAnd associated test changes.\n\nThis refactoring surfaced 2 bugs:\n - Missing equals and hashcode implementation for RhsRewriteCandidate.  thus\n   allowing potential duplicates in the rhs rewrite candidates\n - Missing Filter#supportsRequiredColumnRewrite check in\n   analyzeJoinFilterClause.  which could result in UnsupportedOperationException\n   being thrown by the filter\n\n* fix compile error\n\n* remove unused class","date":"2020-05-30 06:03:35","modifiedFileCount":"10","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2020-06-19 12:32:29","codes":[{"authorDate":"2020-06-19 12:32:29","commitOrder":7,"curCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnNumber(JoinType.INNER));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = makeDefaultConfigPreAnalysisGroup(\n        filter,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysisGroup\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[][]{new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}}\n        )\n    );\n  }\n","date":"2020-06-19 12:32:29","endLine":599,"groupId":"12483","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryInnerUsingCountryNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ed/6e1782f3a4acf3f698b6c9a7151c4541fea56a.src","preCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnNumber(JoinType.INNER));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        JoinableClauses.fromList(joinableClauses),\n        VirtualColumns.EMPTY,\n        filter,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[][]{new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":537,"status":"M"},{"authorDate":"2020-06-19 12:32:29","commitOrder":7,"curCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = makeDefaultConfigPreAnalysisGroup(\n        filter,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysisGroup\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","date":"2020-06-19 12:32:29","endLine":698,"groupId":"12483","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryLeftWithFilterOnFacts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ed/6e1782f3a4acf3f698b6c9a7151c4541fea56a.src","preCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysis preAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        JoinableClauses.fromList(joinableClauses),\n        VirtualColumns.EMPTY,\n        filter,\n        true,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            preAnalysis\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":665,"status":"M"}],"commitId":"37e150c0755c0efba609601b1122cd6bc8a271fb","commitMessage":"@@@Fix join filter rewrites with nested queries (#10015)\n\n* Fix join filter rewrites with nested queries\n\n* Fix test.  inspection.  coverage\n\n* Remove clauses from group key\n\n* Fix import order\n\nCo-authored-by: Gian Merlino <gianmerlino@gmail.com>","date":"2020-06-19 12:32:29","modifiedFileCount":"20","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2020-07-01 10:14:22","codes":[{"authorDate":"2020-07-01 10:14:22","commitOrder":8,"curCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnNumber(JoinType.INNER));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        filter,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[][]{new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}}\n        )\n    );\n  }\n","date":"2020-07-01 10:14:22","endLine":599,"groupId":"106096","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryInnerUsingCountryNumber","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/80bd2094c58c27ff04849566ae8a600563769f.src","preCode":"  public void test_makeCursors_factToCountryInnerUsingCountryNumber()\n  {\n    \r\n    \r\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnNumber(JoinType.INNER));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#en.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = makeDefaultConfigPreAnalysisGroup(\n        filter,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysisGroup\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_NUMBER_PREFIX + \"countryNumber\"\n        ),\n        NullHandling.sqlCompatible() ?\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"Talk:Oswald Tilghman\", null, \"AU\", \"Australia\", 0L},\n            new Object[]{\"Peremptory norm\", \"AU\", \"AU\", \"Australia\", 0L},\n            new Object[]{\"President of India\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Glasgow\", \"GB\", \"GB\", \"United Kingdom\", 6L},\n            new Object[]{\"Otjiwarongo Airport\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Sarah Michelle Gellar\", \"CA\", \"CA\", \"Canada\", 1L},\n            new Object[]{\"DirecTV\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Carlo Curti\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Giusy Ferreri discography\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Roma-Bangkok\", \"IT\", \"IT\", \"Italy\", 7L},\n            new Object[]{\"Old Anatolian Turkish\", \"US\", \"US\", \"United States\", 13L},\n            new Object[]{\"Cream Soda\", \"SU\", \"SU\", \"States United\", 15L},\n            new Object[][]{new Object[]{\"History of Fourems\", \"MMMM\", \"MMMM\", \"Fourems\", 205L}}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":537,"status":"M"},{"authorDate":"2020-07-01 10:14:22","commitOrder":8,"curCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysis joinFilterPreAnalysis = makeDefaultConfigPreAnalysis(\n        filter,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysis\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","date":"2020-07-01 10:14:22","endLine":698,"groupId":"106096","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"test_makeCursors_factToCountryLeftWithFilterOnFacts","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/80bd2094c58c27ff04849566ae8a600563769f.src","preCode":"  public void test_makeCursors_factToCountryLeftWithFilterOnFacts()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(factToCountryOnIsoCode(JoinType.LEFT));\n    Filter filter = new SelectorDimFilter(\"channel\", \"#de.wikipedia\", null).toFilter();\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = makeDefaultConfigPreAnalysisGroup(\n        filter,\n        joinableClauses,\n        VirtualColumns.EMPTY\n    );\n    JoinTestHelper.verifyCursors(\n        new HashJoinSegmentStorageAdapter(\n            factSegment.asStorageAdapter(),\n            joinableClauses,\n            joinFilterPreAnalysisGroup\n        ).makeCursors(\n            filter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryIsoCode\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryName\",\n            FACT_TO_COUNTRY_ON_ISO_CODE_PREFIX + \"countryNumber\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Diskussion:Sebastian Schulz\", \"DE\", \"DE\", \"Germany\", 3L}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":665,"status":"M"}],"commitId":"5faa897a342096b2ac88587ad62e6e15022b01dd","commitMessage":"@@@Join filter pre-analysis simplifications and sanity checks. (#10104)\n\n* Join filter pre-analysis simplifications and sanity checks.\n\n- At pre-analysis time.  only compute pre-analysis for the innermost\n  root query.  since this is the one that will run on the join that involves\n  the base datasource. Previously.  pre-analyses were computed for multiple\n  levels of the query.  some of which were unnecessary.\n- Remove JoinFilterPreAnalysisGroup and join query level gathering code. \n  since they existed to support precomputation of multiple pre-analyses.\n- Embed JoinFilterPreAnalysisKey into JoinFilterPreAnalysis and use it to\n  sanity check?at processing time that the correct pre-analysis was done.\n\nTangentially related changes:\n\n- Remove prioritizeAndLaneQuery functionality from LocalQuerySegmentWalker.\n  The computed priority and lanes were not being used.\n- Add \"getBaseQuery\" method to DataSourceAnalysis to support identification\n  of the proper subquery for filter pre-analysis.\n\n* Fix compilation errors.\n\n* Adjust tests.","date":"2020-07-01 10:14:22","modifiedFileCount":"20","status":"M","submitter":"Gian Merlino"}]
