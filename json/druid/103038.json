[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSetRolePermissions()\n  {\n    updater.createUser(AUTHORIZER_NAME, \"druid\");\n    updater.createRole(AUTHORIZER_NAME, \"druidRole\");\n    updater.assignRole(AUTHORIZER_NAME, \"druid\", \"druidRole\");\n\n    List<ResourceAction> permsToAdd = ImmutableList.of(\n        new ResourceAction(\n            new Resource(\"testResource\", ResourceType.DATASOURCE),\n            Action.WRITE\n        )\n    );\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", permsToAdd);\n\n    Map<String, BasicAuthorizerUser> expectedUserMap = Maps.newHashMap(BASE_USER_MAP);\n    expectedUserMap.put(\"druid\", new BasicAuthorizerUser(\"druid\", ImmutableSet.of(\"druidRole\")));\n\n    Map<String, BasicAuthorizerRole> expectedRoleMap = Maps.newHashMap(BASE_ROLE_MAP);\n    expectedRoleMap.put(\n        \"druidRole\",\n        new BasicAuthorizerRole(\"druidRole\", BasicAuthorizerPermission.makePermissionList(permsToAdd))\n    );\n\n    Map<String, BasicAuthorizerUser> actualUserMap = BasicAuthUtils.deserializeAuthorizerUserMap(\n        objectMapper,\n        updater.getCurrentUserMapBytes(AUTHORIZER_NAME)\n    );\n\n    Map<String, BasicAuthorizerRole> actualRoleMap = BasicAuthUtils.deserializeAuthorizerRoleMap(\n        objectMapper,\n        updater.getCurrentRoleMapBytes(AUTHORIZER_NAME)\n    );\n\n    Assert.assertEquals(expectedUserMap, actualUserMap);\n    Assert.assertEquals(expectedRoleMap, actualRoleMap);\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", null);\n    expectedRoleMap.put(\"druidRole\", new BasicAuthorizerRole(\"druidRole\", null));\n    actualRoleMap = BasicAuthUtils.deserializeAuthorizerRoleMap(\n        objectMapper,\n        updater.getCurrentRoleMapBytes(AUTHORIZER_NAME)\n    );\n\n    Assert.assertEquals(expectedUserMap, actualUserMap);\n    Assert.assertEquals(expectedRoleMap, actualRoleMap);\n  }\n","date":"2018-08-31 00:56:26","endLine":343,"groupId":"12816","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetRolePermissions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c2/fe5944a98a59d84a0fd8be5dbebc0f95e49a75.src","preCode":"  public void testSetRolePermissions()\n  {\n    updater.createUser(AUTHORIZER_NAME, \"druid\");\n    updater.createRole(AUTHORIZER_NAME, \"druidRole\");\n    updater.assignRole(AUTHORIZER_NAME, \"druid\", \"druidRole\");\n\n    List<ResourceAction> permsToAdd = ImmutableList.of(\n        new ResourceAction(\n            new Resource(\"testResource\", ResourceType.DATASOURCE),\n            Action.WRITE\n        )\n    );\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", permsToAdd);\n\n    Map<String, BasicAuthorizerUser> expectedUserMap = Maps.newHashMap(BASE_USER_MAP);\n    expectedUserMap.put(\"druid\", new BasicAuthorizerUser(\"druid\", ImmutableSet.of(\"druidRole\")));\n\n    Map<String, BasicAuthorizerRole> expectedRoleMap = Maps.newHashMap(BASE_ROLE_MAP);\n    expectedRoleMap.put(\n        \"druidRole\",\n        new BasicAuthorizerRole(\"druidRole\", BasicAuthorizerPermission.makePermissionList(permsToAdd))\n    );\n\n    Map<String, BasicAuthorizerUser> actualUserMap = BasicAuthUtils.deserializeAuthorizerUserMap(\n        objectMapper,\n        updater.getCurrentUserMapBytes(AUTHORIZER_NAME)\n    );\n\n    Map<String, BasicAuthorizerRole> actualRoleMap = BasicAuthUtils.deserializeAuthorizerRoleMap(\n        objectMapper,\n        updater.getCurrentRoleMapBytes(AUTHORIZER_NAME)\n    );\n\n    Assert.assertEquals(expectedUserMap, actualUserMap);\n    Assert.assertEquals(expectedRoleMap, actualRoleMap);\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", null);\n    expectedRoleMap.put(\"druidRole\", new BasicAuthorizerRole(\"druidRole\", null));\n    actualRoleMap = BasicAuthUtils.deserializeAuthorizerRoleMap(\n        objectMapper,\n        updater.getCurrentRoleMapBytes(AUTHORIZER_NAME)\n    );\n\n    Assert.assertEquals(expectedUserMap, actualUserMap);\n    Assert.assertEquals(expectedRoleMap, actualRoleMap);\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerMetadataStorageUpdaterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testAddBadPermission()\n  {\n    expectedException.expect(BasicSecurityDBResourceException.class);\n    expectedException.expectMessage(\"Invalid permission, resource name regex[??????????] does not compile.\");\n    updater.createRole(AUTHORIZER_NAME, \"druidRole\");\n\n    List<ResourceAction> permsToAdd = ImmutableList.of(\n        new ResourceAction(\n            new Resource(\"??????????\", ResourceType.DATASOURCE),\n            Action.WRITE\n        )\n    );\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", permsToAdd);\n  }\n","date":"2018-08-31 00:56:26","endLine":376,"groupId":"12817","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddBadPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c2/fe5944a98a59d84a0fd8be5dbebc0f95e49a75.src","preCode":"  public void testAddBadPermission()\n  {\n    expectedException.expect(BasicSecurityDBResourceException.class);\n    expectedException.expectMessage(\"Invalid permission, resource name regex[??????????] does not compile.\");\n    updater.createRole(AUTHORIZER_NAME, \"druidRole\");\n\n    List<ResourceAction> permsToAdd = ImmutableList.of(\n        new ResourceAction(\n            new Resource(\"??????????\", ResourceType.DATASOURCE),\n            Action.WRITE\n        )\n    );\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", permsToAdd);\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerMetadataStorageUpdaterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testSetRolePermissions()\n  {\n    updater.createUser(AUTHORIZER_NAME, \"druid\");\n    updater.createRole(AUTHORIZER_NAME, \"druidRole\");\n    updater.assignRole(AUTHORIZER_NAME, \"druid\", \"druidRole\");\n\n    List<ResourceAction> permsToAdd = ImmutableList.of(\n        new ResourceAction(\n            new Resource(\"testResource\", ResourceType.DATASOURCE),\n            Action.WRITE\n        )\n    );\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", permsToAdd);\n\n    Map<String, BasicAuthorizerUser> expectedUserMap = new HashMap<>(BASE_USER_MAP);\n    expectedUserMap.put(\"druid\", new BasicAuthorizerUser(\"druid\", ImmutableSet.of(\"druidRole\")));\n\n    Map<String, BasicAuthorizerRole> expectedRoleMap = new HashMap<>(BASE_ROLE_MAP);\n    expectedRoleMap.put(\n        \"druidRole\",\n        new BasicAuthorizerRole(\"druidRole\", BasicAuthorizerPermission.makePermissionList(permsToAdd))\n    );\n\n    Map<String, BasicAuthorizerUser> actualUserMap = BasicAuthUtils.deserializeAuthorizerUserMap(\n        objectMapper,\n        updater.getCurrentUserMapBytes(AUTHORIZER_NAME)\n    );\n\n    Map<String, BasicAuthorizerRole> actualRoleMap = BasicAuthUtils.deserializeAuthorizerRoleMap(\n        objectMapper,\n        updater.getCurrentRoleMapBytes(AUTHORIZER_NAME)\n    );\n\n    Assert.assertEquals(expectedUserMap, actualUserMap);\n    Assert.assertEquals(expectedRoleMap, actualRoleMap);\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", null);\n    expectedRoleMap.put(\"druidRole\", new BasicAuthorizerRole(\"druidRole\", null));\n    actualRoleMap = BasicAuthUtils.deserializeAuthorizerRoleMap(\n        objectMapper,\n        updater.getCurrentRoleMapBytes(AUTHORIZER_NAME)\n    );\n\n    Assert.assertEquals(expectedUserMap, actualUserMap);\n    Assert.assertEquals(expectedRoleMap, actualRoleMap);\n  }\n","date":"2018-10-29 20:02:43","endLine":343,"groupId":"21897","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetRolePermissions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5b/565e177a9b080d3dd532e0daa563ce7a31f630.src","preCode":"  public void testSetRolePermissions()\n  {\n    updater.createUser(AUTHORIZER_NAME, \"druid\");\n    updater.createRole(AUTHORIZER_NAME, \"druidRole\");\n    updater.assignRole(AUTHORIZER_NAME, \"druid\", \"druidRole\");\n\n    List<ResourceAction> permsToAdd = ImmutableList.of(\n        new ResourceAction(\n            new Resource(\"testResource\", ResourceType.DATASOURCE),\n            Action.WRITE\n        )\n    );\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", permsToAdd);\n\n    Map<String, BasicAuthorizerUser> expectedUserMap = Maps.newHashMap(BASE_USER_MAP);\n    expectedUserMap.put(\"druid\", new BasicAuthorizerUser(\"druid\", ImmutableSet.of(\"druidRole\")));\n\n    Map<String, BasicAuthorizerRole> expectedRoleMap = Maps.newHashMap(BASE_ROLE_MAP);\n    expectedRoleMap.put(\n        \"druidRole\",\n        new BasicAuthorizerRole(\"druidRole\", BasicAuthorizerPermission.makePermissionList(permsToAdd))\n    );\n\n    Map<String, BasicAuthorizerUser> actualUserMap = BasicAuthUtils.deserializeAuthorizerUserMap(\n        objectMapper,\n        updater.getCurrentUserMapBytes(AUTHORIZER_NAME)\n    );\n\n    Map<String, BasicAuthorizerRole> actualRoleMap = BasicAuthUtils.deserializeAuthorizerRoleMap(\n        objectMapper,\n        updater.getCurrentRoleMapBytes(AUTHORIZER_NAME)\n    );\n\n    Assert.assertEquals(expectedUserMap, actualUserMap);\n    Assert.assertEquals(expectedRoleMap, actualRoleMap);\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", null);\n    expectedRoleMap.put(\"druidRole\", new BasicAuthorizerRole(\"druidRole\", null));\n    actualRoleMap = BasicAuthUtils.deserializeAuthorizerRoleMap(\n        objectMapper,\n        updater.getCurrentRoleMapBytes(AUTHORIZER_NAME)\n    );\n\n    Assert.assertEquals(expectedUserMap, actualUserMap);\n    Assert.assertEquals(expectedRoleMap, actualRoleMap);\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerMetadataStorageUpdaterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testAddBadPermission()\n  {\n    expectedException.expect(BasicSecurityDBResourceException.class);\n    expectedException.expectMessage(\"Invalid permission, resource name regex[??????????] does not compile.\");\n    updater.createRole(AUTHORIZER_NAME, \"druidRole\");\n\n    List<ResourceAction> permsToAdd = ImmutableList.of(\n        new ResourceAction(\n            new Resource(\"??????????\", ResourceType.DATASOURCE),\n            Action.WRITE\n        )\n    );\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", permsToAdd);\n  }\n","date":"2018-08-31 00:56:26","endLine":376,"groupId":"12817","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddBadPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c2/fe5944a98a59d84a0fd8be5dbebc0f95e49a75.src","preCode":"  public void testAddBadPermission()\n  {\n    expectedException.expect(BasicSecurityDBResourceException.class);\n    expectedException.expectMessage(\"Invalid permission, resource name regex[??????????] does not compile.\");\n    updater.createRole(AUTHORIZER_NAME, \"druidRole\");\n\n    List<ResourceAction> permsToAdd = ImmutableList.of(\n        new ResourceAction(\n            new Resource(\"??????????\", ResourceType.DATASOURCE),\n            Action.WRITE\n        )\n    );\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", permsToAdd);\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerMetadataStorageUpdaterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"N"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2019-10-09 08:08:27","commitOrder":3,"curCode":"  public void testSetRolePermissions()\n  {\n    updater.createUser(AUTHORIZER_NAME, \"druid\");\n    updater.createRole(AUTHORIZER_NAME, \"druidRole\");\n    updater.assignUserRole(AUTHORIZER_NAME, \"druid\", \"druidRole\");\n\n    List<ResourceAction> permsToAdd = ImmutableList.of(\n        new ResourceAction(\n            new Resource(\"testResource\", ResourceType.DATASOURCE),\n            Action.WRITE\n        )\n    );\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", permsToAdd);\n\n    Map<String, BasicAuthorizerUser> expectedUserMap = new HashMap<>(BASE_USER_MAP);\n    expectedUserMap.put(\"druid\", new BasicAuthorizerUser(\"druid\", ImmutableSet.of(\"druidRole\")));\n\n    Map<String, BasicAuthorizerRole> expectedRoleMap = new HashMap<>(BASE_ROLE_MAP);\n    expectedRoleMap.put(\n        \"druidRole\",\n        new BasicAuthorizerRole(\"druidRole\", BasicAuthorizerPermission.makePermissionList(permsToAdd))\n    );\n\n    Map<String, BasicAuthorizerUser> actualUserMap = BasicAuthUtils.deserializeAuthorizerUserMap(\n        objectMapper,\n        updater.getCurrentUserMapBytes(AUTHORIZER_NAME)\n    );\n\n    Map<String, BasicAuthorizerRole> actualRoleMap = BasicAuthUtils.deserializeAuthorizerRoleMap(\n        objectMapper,\n        updater.getCurrentRoleMapBytes(AUTHORIZER_NAME)\n    );\n\n    Assert.assertEquals(expectedUserMap, actualUserMap);\n    Assert.assertEquals(expectedRoleMap, actualRoleMap);\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", null);\n    expectedRoleMap.put(\"druidRole\", new BasicAuthorizerRole(\"druidRole\", null));\n    actualRoleMap = BasicAuthUtils.deserializeAuthorizerRoleMap(\n        objectMapper,\n        updater.getCurrentRoleMapBytes(AUTHORIZER_NAME)\n    );\n\n    Assert.assertEquals(expectedUserMap, actualUserMap);\n    Assert.assertEquals(expectedRoleMap, actualRoleMap);\n  }\n","date":"2019-10-09 08:08:27","endLine":494,"groupId":"103038","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testSetRolePermissions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7a/322acce6e0aea9641a0b310c26f07e9d36a2c7.src","preCode":"  public void testSetRolePermissions()\n  {\n    updater.createUser(AUTHORIZER_NAME, \"druid\");\n    updater.createRole(AUTHORIZER_NAME, \"druidRole\");\n    updater.assignRole(AUTHORIZER_NAME, \"druid\", \"druidRole\");\n\n    List<ResourceAction> permsToAdd = ImmutableList.of(\n        new ResourceAction(\n            new Resource(\"testResource\", ResourceType.DATASOURCE),\n            Action.WRITE\n        )\n    );\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", permsToAdd);\n\n    Map<String, BasicAuthorizerUser> expectedUserMap = new HashMap<>(BASE_USER_MAP);\n    expectedUserMap.put(\"druid\", new BasicAuthorizerUser(\"druid\", ImmutableSet.of(\"druidRole\")));\n\n    Map<String, BasicAuthorizerRole> expectedRoleMap = new HashMap<>(BASE_ROLE_MAP);\n    expectedRoleMap.put(\n        \"druidRole\",\n        new BasicAuthorizerRole(\"druidRole\", BasicAuthorizerPermission.makePermissionList(permsToAdd))\n    );\n\n    Map<String, BasicAuthorizerUser> actualUserMap = BasicAuthUtils.deserializeAuthorizerUserMap(\n        objectMapper,\n        updater.getCurrentUserMapBytes(AUTHORIZER_NAME)\n    );\n\n    Map<String, BasicAuthorizerRole> actualRoleMap = BasicAuthUtils.deserializeAuthorizerRoleMap(\n        objectMapper,\n        updater.getCurrentRoleMapBytes(AUTHORIZER_NAME)\n    );\n\n    Assert.assertEquals(expectedUserMap, actualUserMap);\n    Assert.assertEquals(expectedRoleMap, actualRoleMap);\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", null);\n    expectedRoleMap.put(\"druidRole\", new BasicAuthorizerRole(\"druidRole\", null));\n    actualRoleMap = BasicAuthUtils.deserializeAuthorizerRoleMap(\n        objectMapper,\n        updater.getCurrentRoleMapBytes(AUTHORIZER_NAME)\n    );\n\n    Assert.assertEquals(expectedUserMap, actualUserMap);\n    Assert.assertEquals(expectedRoleMap, actualRoleMap);\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerMetadataStorageUpdaterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":448,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":3,"curCode":"  public void testAddBadPermission()\n  {\n    expectedException.expect(BasicSecurityDBResourceException.class);\n    expectedException.expectMessage(\"Invalid permission, resource name regex[??????????] does not compile.\");\n    updater.createRole(AUTHORIZER_NAME, \"druidRole\");\n\n    List<ResourceAction> permsToAdd = ImmutableList.of(\n        new ResourceAction(\n            new Resource(\"??????????\", ResourceType.DATASOURCE),\n            Action.WRITE\n        )\n    );\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", permsToAdd);\n  }\n","date":"2018-08-31 00:56:26","endLine":376,"groupId":"103038","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddBadPermission","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c2/fe5944a98a59d84a0fd8be5dbebc0f95e49a75.src","preCode":"  public void testAddBadPermission()\n  {\n    expectedException.expect(BasicSecurityDBResourceException.class);\n    expectedException.expectMessage(\"Invalid permission, resource name regex[??????????] does not compile.\");\n    updater.createRole(AUTHORIZER_NAME, \"druidRole\");\n\n    List<ResourceAction> permsToAdd = ImmutableList.of(\n        new ResourceAction(\n            new Resource(\"??????????\", ResourceType.DATASOURCE),\n            Action.WRITE\n        )\n    );\n\n    updater.setPermissions(AUTHORIZER_NAME, \"druidRole\", permsToAdd);\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerMetadataStorageUpdaterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"N"}],"commitId":"18758f52283696ba12ab0763260909b7ca734f1e","commitMessage":"@@@Support LDAP authentication/authorization (#6972)\n\n* Support LDAP authentication/authorization\n\n* fixed integration-tests\n\n* fixed Travis CI build errors related to druid-security module\n\n* fixed failing test\n\n* fixed failing test header\n\n* added comments.  force build\n\n* fixes for strict compilation spotbugs checks\n\n* removed authenticator rolling credential update feature\n\n* removed escalator rolling credential update feature\n\n* fixed teamcity inspection deprecated API usage error\n\n* fixed checkstyle execution error.  removed unused import\n\n* removed cached config as part of removing authenticator rolling credential update feature\n\n* removed config bundle entity as part of removing authenticator rolling credential update feature\n\n* refactored ldao configuration\n\n* added support for SSLContext configuration and TLSCertificateChecker\n\n* removed check to return authentication failure when user has no group assigned.  will be checked and handled by the authorizer\n\n* Separate out authorizer checks between metadata-backed store user and LDAP user/groups\n\n* refactored BasicSecuritySSLSocketFactory usage to fix strict compilation spotbugs checks\n\n* fixes build issue\n\n* final review comments updates\n\n* final review comments updates\n\n* fixed LGTM and spellcheck alerts\n\n* Fixed Avatica auth failure error message check\n\n* Updated metadata credentials validator exception message string.  replaced DB with metadata store\n","date":"2019-10-09 08:08:27","modifiedFileCount":"44","status":"M","submitter":"Mohammad J. Khan"}]
