[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public Aggregator factorize(ColumnSelectorFactory metricFactory)\n  {\n    ColumnValueSelector<?> selector = metricFactory.makeColumnValueSelector(fieldName);\n    if (selector instanceof NilColumnValueSelector) {\n      return NoopAggregator.instance();\n    }\n\n    if (\"float\".equalsIgnoreCase(inputType)) {\n      return new VarianceAggregator.FloatVarianceAggregator(selector);\n    } else if (\"long\".equalsIgnoreCase(inputType)) {\n      return new VarianceAggregator.LongVarianceAggregator(selector);\n    } else if (\"variance\".equalsIgnoreCase(inputType)) {\n      return new VarianceAggregator.ObjectVarianceAggregator(selector);\n    }\n    throw new IAE(\n        \"Incompatible type for metric[%s], expected a float, long or variance, got a %s\", fieldName, inputType\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":114,"groupId":"5607","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"factorize","params":"(ColumnSelectorFactorymetricFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/16/7b090d050c0d3b44d95d5b7f0eed3213f1efae.src","preCode":"  public Aggregator factorize(ColumnSelectorFactory metricFactory)\n  {\n    ColumnValueSelector<?> selector = metricFactory.makeColumnValueSelector(fieldName);\n    if (selector instanceof NilColumnValueSelector) {\n      return NoopAggregator.instance();\n    }\n\n    if (\"float\".equalsIgnoreCase(inputType)) {\n      return new VarianceAggregator.FloatVarianceAggregator(selector);\n    } else if (\"long\".equalsIgnoreCase(inputType)) {\n      return new VarianceAggregator.LongVarianceAggregator(selector);\n    } else if (\"variance\".equalsIgnoreCase(inputType)) {\n      return new VarianceAggregator.ObjectVarianceAggregator(selector);\n    }\n    throw new IAE(\n        \"Incompatible type for metric[%s], expected a float, long or variance, got a %s\", fieldName, inputType\n    );\n  }\n","realPath":"extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n  {\n    ColumnValueSelector<?> selector = metricFactory.makeColumnValueSelector(fieldName);\n    if (selector instanceof NilColumnValueSelector) {\n      return NoopBufferAggregator.instance();\n    }\n    if (\"float\".equalsIgnoreCase(inputType)) {\n      return new VarianceBufferAggregator.FloatVarianceAggregator(selector);\n    } else if (\"long\".equalsIgnoreCase(inputType)) {\n      return new VarianceBufferAggregator.LongVarianceAggregator(selector);\n    } else if (\"variance\".equalsIgnoreCase(inputType)) {\n      return new VarianceBufferAggregator.ObjectVarianceAggregator(selector);\n    }\n    throw new IAE(\n        \"Incompatible type for metric[%s], expected a float, long or variance, got a %s\", fieldName, inputType\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":133,"groupId":"5607","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"factorizeBuffered","params":"(ColumnSelectorFactorymetricFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/16/7b090d050c0d3b44d95d5b7f0eed3213f1efae.src","preCode":"  public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n  {\n    ColumnValueSelector<?> selector = metricFactory.makeColumnValueSelector(fieldName);\n    if (selector instanceof NilColumnValueSelector) {\n      return NoopBufferAggregator.instance();\n    }\n    if (\"float\".equalsIgnoreCase(inputType)) {\n      return new VarianceBufferAggregator.FloatVarianceAggregator(selector);\n    } else if (\"long\".equalsIgnoreCase(inputType)) {\n      return new VarianceBufferAggregator.LongVarianceAggregator(selector);\n    } else if (\"variance\".equalsIgnoreCase(inputType)) {\n      return new VarianceBufferAggregator.ObjectVarianceAggregator(selector);\n    }\n    throw new IAE(\n        \"Incompatible type for metric[%s], expected a float, long or variance, got a %s\", fieldName, inputType\n    );\n  }\n","realPath":"extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-02-13 01:32:42","codes":[{"authorDate":"2020-02-13 01:32:42","commitOrder":2,"curCode":"  public Aggregator factorize(ColumnSelectorFactory metricFactory)\n  {\n    ColumnValueSelector<?> selector = metricFactory.makeColumnValueSelector(fieldName);\n    if (selector instanceof NilColumnValueSelector) {\n      return NoopAggregator.instance();\n    }\n\n    final String type = getTypeString(metricFactory);\n\n    if (ValueType.FLOAT.name().equalsIgnoreCase(type)) {\n      return new VarianceAggregator.FloatVarianceAggregator(selector);\n    } else if (ValueType.DOUBLE.name().equalsIgnoreCase(type)) {\n      return new VarianceAggregator.DoubleVarianceAggregator(selector);\n    } else if (ValueType.LONG.name().equalsIgnoreCase(type)) {\n      return new VarianceAggregator.LongVarianceAggregator(selector);\n    } else if (VARIANCE_TYPE_NAME.equalsIgnoreCase(type)) {\n      return new VarianceAggregator.ObjectVarianceAggregator(selector);\n    }\n    throw new IAE(\n        \"Incompatible type for metric[%s], expected a float, double, long, or variance, but got a %s\",\n        fieldName,\n        inputType\n    );\n  }\n","date":"2020-02-13 01:32:42","endLine":125,"groupId":"12320","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"factorize","params":"(ColumnSelectorFactorymetricFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/10/a04efea6f3a3c6338e35858976f72e503c31fb.src","preCode":"  public Aggregator factorize(ColumnSelectorFactory metricFactory)\n  {\n    ColumnValueSelector<?> selector = metricFactory.makeColumnValueSelector(fieldName);\n    if (selector instanceof NilColumnValueSelector) {\n      return NoopAggregator.instance();\n    }\n\n    if (\"float\".equalsIgnoreCase(inputType)) {\n      return new VarianceAggregator.FloatVarianceAggregator(selector);\n    } else if (\"long\".equalsIgnoreCase(inputType)) {\n      return new VarianceAggregator.LongVarianceAggregator(selector);\n    } else if (\"variance\".equalsIgnoreCase(inputType)) {\n      return new VarianceAggregator.ObjectVarianceAggregator(selector);\n    }\n    throw new IAE(\n        \"Incompatible type for metric[%s], expected a float, long or variance, got a %s\", fieldName, inputType\n    );\n  }\n","realPath":"extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2020-02-13 01:32:42","commitOrder":2,"curCode":"  public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n  {\n    ColumnValueSelector<?> selector = metricFactory.makeColumnValueSelector(fieldName);\n    if (selector instanceof NilColumnValueSelector) {\n      return NoopBufferAggregator.instance();\n    }\n    final String type = getTypeString(metricFactory);\n\n    if (ValueType.FLOAT.name().equalsIgnoreCase(type)) {\n      return new VarianceBufferAggregator.FloatVarianceAggregator(selector);\n    } else if (ValueType.DOUBLE.name().equalsIgnoreCase(type)) {\n      return new VarianceBufferAggregator.DoubleVarianceAggregator(selector);\n    } else if (ValueType.LONG.name().equalsIgnoreCase(type)) {\n      return new VarianceBufferAggregator.LongVarianceAggregator(selector);\n    } else if (VARIANCE_TYPE_NAME.equalsIgnoreCase(type)) {\n      return new VarianceBufferAggregator.ObjectVarianceAggregator(selector);\n    }\n    throw new IAE(\n        \"Incompatible type for metric[%s], expected a float, double, long, or variance, but got a %s\",\n        fieldName,\n        inputType\n    );\n  }\n","date":"2020-02-13 01:32:42","endLine":150,"groupId":"12320","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"factorizeBuffered","params":"(ColumnSelectorFactorymetricFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/10/a04efea6f3a3c6338e35858976f72e503c31fb.src","preCode":"  public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n  {\n    ColumnValueSelector<?> selector = metricFactory.makeColumnValueSelector(fieldName);\n    if (selector instanceof NilColumnValueSelector) {\n      return NoopBufferAggregator.instance();\n    }\n    if (\"float\".equalsIgnoreCase(inputType)) {\n      return new VarianceBufferAggregator.FloatVarianceAggregator(selector);\n    } else if (\"long\".equalsIgnoreCase(inputType)) {\n      return new VarianceBufferAggregator.LongVarianceAggregator(selector);\n    } else if (\"variance\".equalsIgnoreCase(inputType)) {\n      return new VarianceBufferAggregator.ObjectVarianceAggregator(selector);\n    }\n    throw new IAE(\n        \"Incompatible type for metric[%s], expected a float, long or variance, got a %s\", fieldName, inputType\n    );\n  }\n","realPath":"extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"c3ebb5eb650d7d71fdf2a096b6678e485f6ca92a","commitMessage":"@@@variance aggregator support for double columns (#9076)\n\n* variance aggregator support for double column instead of casting to float\n\n* docs\n\n* everything in its right place\n\n* checkstyle\n\n* adjustments\n","date":"2020-02-13 01:32:42","modifiedFileCount":"7","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-09-18 06:05:40","codes":[{"authorDate":"2020-09-18 06:05:40","commitOrder":3,"curCode":"  public Aggregator factorize(ColumnSelectorFactory metricFactory)\n  {\n    ColumnValueSelector<?> selector = metricFactory.makeColumnValueSelector(fieldName);\n    if (selector instanceof NilColumnValueSelector) {\n      return NoopAggregator.instance();\n    }\n\n    final String type = getTypeString(metricFactory);\n\n    if (ValueType.FLOAT.name().equalsIgnoreCase(type)) {\n      return new VarianceAggregator.FloatVarianceAggregator(selector);\n    } else if (ValueType.DOUBLE.name().equalsIgnoreCase(type)) {\n      return new VarianceAggregator.DoubleVarianceAggregator(selector);\n    } else if (ValueType.LONG.name().equalsIgnoreCase(type)) {\n      return new VarianceAggregator.LongVarianceAggregator(selector);\n    } else if (VARIANCE_TYPE_NAME.equalsIgnoreCase(type) || ValueType.COMPLEX.name().equalsIgnoreCase(type)) {\n      return new VarianceAggregator.ObjectVarianceAggregator(selector);\n    }\n    throw new IAE(\n        \"Incompatible type for metric[%s], expected a float, double, long, or variance, but got a %s\",\n        fieldName,\n        inputType\n    );\n  }\n","date":"2020-09-18 06:05:40","endLine":147,"groupId":"102738","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"factorize","params":"(ColumnSelectorFactorymetricFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/28/94c0195884b2af460ed6a6797b55fd39e1b525.src","preCode":"  public Aggregator factorize(ColumnSelectorFactory metricFactory)\n  {\n    ColumnValueSelector<?> selector = metricFactory.makeColumnValueSelector(fieldName);\n    if (selector instanceof NilColumnValueSelector) {\n      return NoopAggregator.instance();\n    }\n\n    final String type = getTypeString(metricFactory);\n\n    if (ValueType.FLOAT.name().equalsIgnoreCase(type)) {\n      return new VarianceAggregator.FloatVarianceAggregator(selector);\n    } else if (ValueType.DOUBLE.name().equalsIgnoreCase(type)) {\n      return new VarianceAggregator.DoubleVarianceAggregator(selector);\n    } else if (ValueType.LONG.name().equalsIgnoreCase(type)) {\n      return new VarianceAggregator.LongVarianceAggregator(selector);\n    } else if (VARIANCE_TYPE_NAME.equalsIgnoreCase(type)) {\n      return new VarianceAggregator.ObjectVarianceAggregator(selector);\n    }\n    throw new IAE(\n        \"Incompatible type for metric[%s], expected a float, double, long, or variance, but got a %s\",\n        fieldName,\n        inputType\n    );\n  }\n","realPath":"extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2020-09-18 06:05:40","commitOrder":3,"curCode":"  public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n  {\n    ColumnValueSelector<?> selector = metricFactory.makeColumnValueSelector(fieldName);\n    if (selector instanceof NilColumnValueSelector) {\n      return NoopBufferAggregator.instance();\n    }\n    final String type = getTypeString(metricFactory);\n\n    if (ValueType.FLOAT.name().equalsIgnoreCase(type)) {\n      return new VarianceBufferAggregator.FloatVarianceAggregator(selector);\n    } else if (ValueType.DOUBLE.name().equalsIgnoreCase(type)) {\n      return new VarianceBufferAggregator.DoubleVarianceAggregator(selector);\n    } else if (ValueType.LONG.name().equalsIgnoreCase(type)) {\n      return new VarianceBufferAggregator.LongVarianceAggregator(selector);\n    } else if (VARIANCE_TYPE_NAME.equalsIgnoreCase(type) || ValueType.COMPLEX.name().equalsIgnoreCase(type)) {\n      return new VarianceBufferAggregator.ObjectVarianceAggregator(selector);\n    }\n    throw new IAE(\n        \"Incompatible type for metric[%s], expected a float, double, long, or variance, but got a %s\",\n        fieldName,\n        type\n    );\n  }\n","date":"2020-09-18 06:05:40","endLine":172,"groupId":"102738","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"factorizeBuffered","params":"(ColumnSelectorFactorymetricFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/28/94c0195884b2af460ed6a6797b55fd39e1b525.src","preCode":"  public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n  {\n    ColumnValueSelector<?> selector = metricFactory.makeColumnValueSelector(fieldName);\n    if (selector instanceof NilColumnValueSelector) {\n      return NoopBufferAggregator.instance();\n    }\n    final String type = getTypeString(metricFactory);\n\n    if (ValueType.FLOAT.name().equalsIgnoreCase(type)) {\n      return new VarianceBufferAggregator.FloatVarianceAggregator(selector);\n    } else if (ValueType.DOUBLE.name().equalsIgnoreCase(type)) {\n      return new VarianceBufferAggregator.DoubleVarianceAggregator(selector);\n    } else if (ValueType.LONG.name().equalsIgnoreCase(type)) {\n      return new VarianceBufferAggregator.LongVarianceAggregator(selector);\n    } else if (VARIANCE_TYPE_NAME.equalsIgnoreCase(type)) {\n      return new VarianceBufferAggregator.ObjectVarianceAggregator(selector);\n    }\n    throw new IAE(\n        \"Incompatible type for metric[%s], expected a float, double, long, or variance, but got a %s\",\n        fieldName,\n        inputType\n    );\n  }\n","realPath":"extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorFactory.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"0b4c897fbe046c109c8e63f51221b2955cd5fe39","commitMessage":"@@@Vectorized variance aggregators (#10390)\n\n* wip vectorize\n\n* close but not quite\n\n* faster\n\n* unit tests\n\n* fix complex types for variance","date":"2020-09-18 06:05:40","modifiedFileCount":"6","status":"M","submitter":"Suneet Saldanha"}]
