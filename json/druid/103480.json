[{"authorTime":"2019-08-06 03:01:42","codes":[{"authorDate":"2019-10-19 05:59:44","commitOrder":2,"curCode":"  public void testDoublesSketchPostAggsPostSort() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT DS_QUANTILES_SKETCH(m1) as y FROM druid.foo ORDER BY  DS_GET_QUANTILE(DS_QUANTILES_SKETCH(m1), 0.5) DESC LIMIT 10\";\n    final String sql2 = StringUtils.format(\"SELECT DS_GET_QUANTILE(y, 0.5), DS_GET_QUANTILE(y, 0.98) from (%s)\", sql);\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql2, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            4.0d,\n            6.0d\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actualQuery = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    Query expectedQuery =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(\n                  ImmutableList.of(\n                      new DoublesSketchAggregatorFactory(\"a0:agg\", \"m1\", 128)\n                  )\n              )\n              .postAggregators(\n                  ImmutableList.of(\n                      new FieldAccessPostAggregator(\"p0\", \"a0:agg\"),\n                      new DoublesSketchToQuantilePostAggregator(\"p2\", new FieldAccessPostAggregator(\"p1\", \"a0:agg\"), 0.5),\n                      new DoublesSketchToQuantilePostAggregator(\"s1\", new FieldAccessPostAggregator(\"s0\", \"p0\"), 0.5),\n                      new DoublesSketchToQuantilePostAggregator(\"s3\", new FieldAccessPostAggregator(\"s2\", \"p0\"), 0.9800000190734863)\n                  )\n              )\n              .context(ImmutableMap.of(\n                  \"skipEmptyBuckets\", true,\n                  PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"\n              ))\n              .build();\n\n    \r\n    Assert.assertEquals(expectedQuery, actualQuery);\n  }\n","date":"2019-10-19 05:59:44","endLine":642,"groupId":"7295","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoublesSketchPostAggsPostSort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7a/6f699e0a921c52746f912a16f0f3818e9a13a6.src","preCode":"  public void testDoublesSketchPostAggsPostSort() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT DS_QUANTILES_SKETCH(m1) as y FROM druid.foo ORDER BY  DS_GET_QUANTILE(DS_QUANTILES_SKETCH(m1), 0.5) DESC LIMIT 10\";\n    final String sql2 = StringUtils.format(\"SELECT DS_GET_QUANTILE(y, 0.5), DS_GET_QUANTILE(y, 0.98) from (%s)\", sql);\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql2, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            4.0d,\n            6.0d\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actualQuery = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    Query expectedQuery =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(\n                  ImmutableList.of(\n                      new DoublesSketchAggregatorFactory(\"a0:agg\", \"m1\", 128)\n                  )\n              )\n              .postAggregators(\n                  ImmutableList.of(\n                      new FieldAccessPostAggregator(\"p0\", \"a0:agg\"),\n                      new DoublesSketchToQuantilePostAggregator(\"p2\", new FieldAccessPostAggregator(\"p1\", \"a0:agg\"), 0.5),\n                      new DoublesSketchToQuantilePostAggregator(\"s1\", new FieldAccessPostAggregator(\"s0\", \"p0\"), 0.5),\n                      new DoublesSketchToQuantilePostAggregator(\"s3\", new FieldAccessPostAggregator(\"s2\", \"p0\"), 0.9800000190734863)\n                  )\n              )\n              .context(ImmutableMap.of(\n                  \"skipEmptyBuckets\", true,\n                  PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"\n              ))\n              .build();\n\n    \r\n    Assert.assertEquals(expectedQuery, actualQuery);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"B"},{"authorDate":"2019-08-06 03:01:42","commitOrder":2,"curCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[] {\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2019-08-06 03:01:42","endLine":211,"groupId":"1570","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testComputingSketchOnNumericValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ab/575c3b183eefd37924a7512157719d84418bbf.src","preCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[] {\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-contrib/tdigestsketch/src/test/java/org/apache/druid/query/aggregation/tdigestsketch/sql/TDigestSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"NB"}],"commitId":"d88075237af1aca8ed22316b41860d14e4f0b6e4","commitMessage":"@@@Add initial SQL support for non-expression sketch postaggs (#8487)\n\n* Add initial SQL support for non-expression sketch postaggs\n\n* Checkstyle.  spotbugs\n\n* checkstyle\n\n* imports\n\n* Update SQL docs\n\n* Checkstyle\n\n* Fix theta sketch operator docs\n\n* PR comments\n\n* Checkstyle fixes\n\n* Add missing entries for HLL sketch module\n\n* PR comments.  add round param to HLL estimate operator.  fix optional HLL param\n","date":"2019-10-19 05:59:44","modifiedFileCount":"16","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2020-02-20 05:09:20","codes":[{"authorDate":"2020-02-20 05:09:20","commitOrder":3,"curCode":"  public void testDoublesSketchPostAggsPostSort() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT DS_QUANTILES_SKETCH(m1) as y FROM druid.foo ORDER BY  DS_GET_QUANTILE(DS_QUANTILES_SKETCH(m1), 0.5) DESC LIMIT 10\";\n    final String sql2 = StringUtils.format(\"SELECT DS_GET_QUANTILE(y, 0.5), DS_GET_QUANTILE(y, 0.98) from (%s)\", sql);\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql2,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            4.0d,\n            6.0d\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actualQuery = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    Query expectedQuery =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(\n                  ImmutableList.of(\n                      new DoublesSketchAggregatorFactory(\"a0:agg\", \"m1\", 128)\n                  )\n              )\n              .postAggregators(\n                  ImmutableList.of(\n                      new FieldAccessPostAggregator(\"p0\", \"a0:agg\"),\n                      new DoublesSketchToQuantilePostAggregator(\n                          \"p2\",\n                          new FieldAccessPostAggregator(\"p1\", \"a0:agg\"),\n                          0.5\n                      ),\n                      new DoublesSketchToQuantilePostAggregator(\"s1\", new FieldAccessPostAggregator(\"s0\", \"p0\"), 0.5),\n                      new DoublesSketchToQuantilePostAggregator(\n                          \"s3\",\n                          new FieldAccessPostAggregator(\"s2\", \"p0\"),\n                          0.9800000190734863\n                      )\n                  )\n              )\n              .context(ImmutableMap.of(\n                  \"skipEmptyBuckets\", true,\n                  PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"\n              ))\n              .build();\n\n    \r\n    Assert.assertEquals(expectedQuery, actualQuery);\n  }\n","date":"2020-02-20 05:09:20","endLine":761,"groupId":"7295","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoublesSketchPostAggsPostSort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f5/0c87425a9d28bc73bde65c61f5cf8b78372c46.src","preCode":"  public void testDoublesSketchPostAggsPostSort() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT DS_QUANTILES_SKETCH(m1) as y FROM druid.foo ORDER BY  DS_GET_QUANTILE(DS_QUANTILES_SKETCH(m1), 0.5) DESC LIMIT 10\";\n    final String sql2 = StringUtils.format(\"SELECT DS_GET_QUANTILE(y, 0.5), DS_GET_QUANTILE(y, 0.98) from (%s)\", sql);\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql2, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            4.0d,\n            6.0d\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actualQuery = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    Query expectedQuery =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(\n                  ImmutableList.of(\n                      new DoublesSketchAggregatorFactory(\"a0:agg\", \"m1\", 128)\n                  )\n              )\n              .postAggregators(\n                  ImmutableList.of(\n                      new FieldAccessPostAggregator(\"p0\", \"a0:agg\"),\n                      new DoublesSketchToQuantilePostAggregator(\n                          \"p2\",\n                          new FieldAccessPostAggregator(\"p1\", \"a0:agg\"),\n                          0.5\n                      ),\n                      new DoublesSketchToQuantilePostAggregator(\"s1\", new FieldAccessPostAggregator(\"s0\", \"p0\"), 0.5),\n                      new DoublesSketchToQuantilePostAggregator(\n                          \"s3\",\n                          new FieldAccessPostAggregator(\"s2\", \"p0\"),\n                          0.9800000190734863\n                      )\n                  )\n              )\n              .context(ImmutableMap.of(\n                  \"skipEmptyBuckets\", true,\n                  PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"\n              ))\n              .build();\n\n    \r\n    Assert.assertEquals(expectedQuery, actualQuery);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":699,"status":"M"},{"authorDate":"2020-02-20 05:09:20","commitOrder":3,"curCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[] {\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2020-02-20 05:09:20","endLine":216,"groupId":"1570","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testComputingSketchOnNumericValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a7/4c3e7b275f17b5d76f043f0e80e8b1825eba3e.src","preCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[] {\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-contrib/tdigestsketch/src/test/java/org/apache/druid/query/aggregation/tdigestsketch/sql/TDigestSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"b408a6d774e43e574bf8092584fae76d582cfd8f","commitMessage":"@@@sql support for dynamic parameters (#6974)\n\n* sql support for dynamic parameters\n\n* fixup\n\n* javadocs\n\n* fixup from merge\n\n* formatting\n\n* fixes\n\n* fix it\n\n* doc fix\n\n* remove druid fallback self-join parameterized test\n\n* unused imports\n\n* ignore test for now\n\n* fix imports\n\n* fixup\n\n* fix merge\n\n* merge fixup\n\n* fix test that cannot vectorize\n\n* fixup and more better\n\n* dependency thingo\n\n* fix docs\n\n* tweaks\n\n* fix docs\n\n* spelling\n\n* unused imports after merge\n\n* review stuffs\n\n* add comment\n\n* add ignore text\n\n* review stuffs\n","date":"2020-02-20 05:09:20","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-04-13 13:21:24","codes":[{"authorDate":"2021-04-13 13:21:24","commitOrder":4,"curCode":"  public void testDoublesSketchPostAggsPostSort() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n\n    final String sql = \"SELECT DS_QUANTILES_SKETCH(m1) as y FROM druid.foo ORDER BY  DS_GET_QUANTILE(DS_QUANTILES_SKETCH(m1), 0.5) DESC LIMIT 10\";\n    final String sql2 = StringUtils.format(\"SELECT DS_GET_QUANTILE(y, 0.5), DS_GET_QUANTILE(y, 0.98) from (%s)\", sql);\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql2,\n        TIMESERIES_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            4.0d,\n            6.0d\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actualQuery = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    Query expectedQuery =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(\n                  ImmutableList.of(\n                      new DoublesSketchAggregatorFactory(\"a0:agg\", \"m1\", 128)\n                  )\n              )\n              .postAggregators(\n                  ImmutableList.of(\n                      new FieldAccessPostAggregator(\"p0\", \"a0:agg\"),\n                      new DoublesSketchToQuantilePostAggregator(\n                          \"p2\",\n                          new FieldAccessPostAggregator(\"p1\", \"a0:agg\"),\n                          0.5\n                      ),\n                      new DoublesSketchToQuantilePostAggregator(\"s1\", new FieldAccessPostAggregator(\"s0\", \"p0\"), 0.5),\n                      new DoublesSketchToQuantilePostAggregator(\n                          \"s3\",\n                          new FieldAccessPostAggregator(\"s2\", \"p0\"),\n                          0.9800000190734863\n                      )\n                  )\n              )\n              .context(TIMESERIES_CONTEXT_DEFAULT)\n              .build();\n\n    \r\n    Assert.assertEquals(expectedQuery, actualQuery);\n  }\n","date":"2021-04-13 13:21:24","endLine":812,"groupId":"7295","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoublesSketchPostAggsPostSort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c6/c8e1386380b9c552f90d4ab26acf941ec47999.src","preCode":"  public void testDoublesSketchPostAggsPostSort() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n\n    final String sql = \"SELECT DS_QUANTILES_SKETCH(m1) as y FROM druid.foo ORDER BY  DS_GET_QUANTILE(DS_QUANTILES_SKETCH(m1), 0.5) DESC LIMIT 10\";\n    final String sql2 = StringUtils.format(\"SELECT DS_GET_QUANTILE(y, 0.5), DS_GET_QUANTILE(y, 0.98) from (%s)\", sql);\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql2,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            4.0d,\n            6.0d\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actualQuery = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    Query expectedQuery =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(\n                  ImmutableList.of(\n                      new DoublesSketchAggregatorFactory(\"a0:agg\", \"m1\", 128)\n                  )\n              )\n              .postAggregators(\n                  ImmutableList.of(\n                      new FieldAccessPostAggregator(\"p0\", \"a0:agg\"),\n                      new DoublesSketchToQuantilePostAggregator(\n                          \"p2\",\n                          new FieldAccessPostAggregator(\"p1\", \"a0:agg\"),\n                          0.5\n                      ),\n                      new DoublesSketchToQuantilePostAggregator(\"s1\", new FieldAccessPostAggregator(\"s0\", \"p0\"), 0.5),\n                      new DoublesSketchToQuantilePostAggregator(\n                          \"s3\",\n                          new FieldAccessPostAggregator(\"s2\", \"p0\"),\n                          0.9800000190734863\n                      )\n                  )\n              )\n              .context(ImmutableMap.of(\n                  \"skipEmptyBuckets\", true,\n                  PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"\n              ))\n              .build();\n\n    \r\n    Assert.assertEquals(expectedQuery, actualQuery);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":753,"status":"M"},{"authorDate":"2021-04-13 13:21:24","commitOrder":4,"curCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        TIMESERIES_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[]{\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(TIMESERIES_CONTEXT_DEFAULT)\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2021-04-13 13:21:24","endLine":186,"groupId":"1570","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testComputingSketchOnNumericValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ec/17e7ecbed42ba44d33c2a8ec14369d92ca1e6e.src","preCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[]{\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-contrib/tdigestsketch/src/test/java/org/apache/druid/query/aggregation/tdigestsketch/sql/TDigestSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"25db8787b3d7eac87aa3be8e32d48d0e823298af","commitMessage":"@@@Fix CAST being ignored when aggregating on strings after cast (#11083)\n\n* Fix CAST being ignored when aggregating on strings after cast\n\n* fix checkstyle and dependency\n\n* unused import","date":"2021-04-13 13:21:24","modifiedFileCount":"21","status":"M","submitter":"Jihoon Son"},{"authorTime":"2021-04-13 13:21:24","codes":[{"authorDate":"2021-05-03 07:14:21","commitOrder":5,"curCode":"  public void testDoublesSketchPostAggsPostSort() throws Exception\n  {\n    testQuery(\n        \"SELECT DS_GET_QUANTILE(y, 0.5), DS_GET_QUANTILE(y, 0.98) from (\"\n        + \"SELECT DS_QUANTILES_SKETCH(m1) as y FROM druid.foo ORDER BY  DS_GET_QUANTILE(DS_QUANTILES_SKETCH(m1), 0.5) DESC LIMIT 10\"\n        + \")\",\n        Collections.singletonList(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      ImmutableList.of(\n                          new DoublesSketchAggregatorFactory(\"a0:agg\", \"m1\", 128)\n                      )\n                  )\n                  .postAggregators(\n                      ImmutableList.of(\n                          new FieldAccessPostAggregator(\"p0\", \"a0:agg\"),\n                          new DoublesSketchToQuantilePostAggregator(\n                              \"p2\",\n                              new FieldAccessPostAggregator(\"p1\", \"a0:agg\"),\n                              0.5\n                          ),\n                          new DoublesSketchToQuantilePostAggregator(\n                              \"s1\",\n                              new FieldAccessPostAggregator(\"s0\", \"p0\"),\n                              0.5\n                          ),\n                          new DoublesSketchToQuantilePostAggregator(\n                              \"s3\",\n                              new FieldAccessPostAggregator(\"s2\", \"p0\"),\n                              0.9800000190734863\n                          )\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\n                4.0d,\n                6.0d\n            }\n        )\n    );\n  }\n","date":"2021-05-03 07:14:21","endLine":755,"groupId":"7295","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoublesSketchPostAggsPostSort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/64/7f300aaa8445a8f803700928cd37d1be87052e.src","preCode":"  public void testDoublesSketchPostAggsPostSort() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n\n    final String sql = \"SELECT DS_QUANTILES_SKETCH(m1) as y FROM druid.foo ORDER BY  DS_GET_QUANTILE(DS_QUANTILES_SKETCH(m1), 0.5) DESC LIMIT 10\";\n    final String sql2 = StringUtils.format(\"SELECT DS_GET_QUANTILE(y, 0.5), DS_GET_QUANTILE(y, 0.98) from (%s)\", sql);\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql2,\n        TIMESERIES_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n    final List<Object[]> expectedResults = ImmutableList.of(\n        new Object[]{\n            4.0d,\n            6.0d\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actualQuery = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n\n    Query expectedQuery =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(\n                  ImmutableList.of(\n                      new DoublesSketchAggregatorFactory(\"a0:agg\", \"m1\", 128)\n                  )\n              )\n              .postAggregators(\n                  ImmutableList.of(\n                      new FieldAccessPostAggregator(\"p0\", \"a0:agg\"),\n                      new DoublesSketchToQuantilePostAggregator(\n                          \"p2\",\n                          new FieldAccessPostAggregator(\"p1\", \"a0:agg\"),\n                          0.5\n                      ),\n                      new DoublesSketchToQuantilePostAggregator(\"s1\", new FieldAccessPostAggregator(\"s0\", \"p0\"), 0.5),\n                      new DoublesSketchToQuantilePostAggregator(\n                          \"s3\",\n                          new FieldAccessPostAggregator(\"s2\", \"p0\"),\n                          0.9800000190734863\n                      )\n                  )\n              )\n              .context(TIMESERIES_CONTEXT_DEFAULT)\n              .build();\n\n    \r\n    Assert.assertEquals(expectedQuery, actualQuery);\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":709,"status":"M"},{"authorDate":"2021-04-13 13:21:24","commitOrder":5,"curCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        TIMESERIES_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[]{\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(TIMESERIES_CONTEXT_DEFAULT)\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2021-04-13 13:21:24","endLine":186,"groupId":"1570","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testComputingSketchOnNumericValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ec/17e7ecbed42ba44d33c2a8ec14369d92ca1e6e.src","preCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        TIMESERIES_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[]{\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(TIMESERIES_CONTEXT_DEFAULT)\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-contrib/tdigestsketch/src/test/java/org/apache/druid/query/aggregation/tdigestsketch/sql/TDigestSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"N"}],"commitId":"809e001939be9196a4c3c620037606ab6e5af3b8","commitMessage":"@@@Vectorize the DataSketches quantiles aggregator. (#11183)\n\n* Vectorize the DataSketches quantiles aggregator.\n\nAlso removes synchronization for the BufferAggregator and VectorAggregator\nimplementations.  since it is not necessary (similar to #11115).\n\nExtends DoublesSketchAggregatorTest and DoublesSketchSqlAggregatorTest\nto run all test cases in vectorized mode.\n\n* Style fix.","date":"2021-05-03 07:14:21","modifiedFileCount":"8","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-05-11 01:13:37","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":6,"curCode":"  public void testDoublesSketchPostAggsPostSort() throws Exception\n  {\n    testQuery(\n        \"SELECT DS_GET_QUANTILE(y, 0.5), DS_GET_QUANTILE(y, 0.98) from (\"\n        + \"SELECT DS_QUANTILES_SKETCH(m1) as y FROM druid.foo ORDER BY  DS_GET_QUANTILE(DS_QUANTILES_SKETCH(m1), 0.5) DESC LIMIT 10\"\n        + \")\",\n        Collections.singletonList(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      ImmutableList.of(\n                          new DoublesSketchAggregatorFactory(\"a0:agg\", \"m1\", 128)\n                      )\n                  )\n                  .postAggregators(\n                      ImmutableList.of(\n                          new FieldAccessPostAggregator(\"p0\", \"a0:agg\"),\n                          new DoublesSketchToQuantilePostAggregator(\n                              \"p2\",\n                              new FieldAccessPostAggregator(\"p1\", \"a0:agg\"),\n                              0.5\n                          ),\n                          new DoublesSketchToQuantilePostAggregator(\n                              \"s1\",\n                              new FieldAccessPostAggregator(\"s0\", \"p0\"),\n                              0.5\n                          ),\n                          new DoublesSketchToQuantilePostAggregator(\n                              \"s3\",\n                              new FieldAccessPostAggregator(\"s2\", \"p0\"),\n                              0.9800000190734863\n                          )\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\n                4.0d,\n                6.0d\n            }\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":722,"groupId":"103480","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDoublesSketchPostAggsPostSort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4e/bd7c9c8ffcf8cdce88a097b2ef9496b7f0ed8e.src","preCode":"  public void testDoublesSketchPostAggsPostSort() throws Exception\n  {\n    testQuery(\n        \"SELECT DS_GET_QUANTILE(y, 0.5), DS_GET_QUANTILE(y, 0.98) from (\"\n        + \"SELECT DS_QUANTILES_SKETCH(m1) as y FROM druid.foo ORDER BY  DS_GET_QUANTILE(DS_QUANTILES_SKETCH(m1), 0.5) DESC LIMIT 10\"\n        + \")\",\n        Collections.singletonList(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      ImmutableList.of(\n                          new DoublesSketchAggregatorFactory(\"a0:agg\", \"m1\", 128)\n                      )\n                  )\n                  .postAggregators(\n                      ImmutableList.of(\n                          new FieldAccessPostAggregator(\"p0\", \"a0:agg\"),\n                          new DoublesSketchToQuantilePostAggregator(\n                              \"p2\",\n                              new FieldAccessPostAggregator(\"p1\", \"a0:agg\"),\n                              0.5\n                          ),\n                          new DoublesSketchToQuantilePostAggregator(\n                              \"s1\",\n                              new FieldAccessPostAggregator(\"s0\", \"p0\"),\n                              0.5\n                          ),\n                          new DoublesSketchToQuantilePostAggregator(\n                              \"s3\",\n                              new FieldAccessPostAggregator(\"s2\", \"p0\"),\n                              0.9800000190734863\n                          )\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\n                4.0d,\n                6.0d\n            }\n        )\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":676,"status":"M"},{"authorDate":"2021-05-11 01:13:37","commitOrder":6,"curCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT\\n\"\n        + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n        + \"FROM foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                  .granularity(Granularities.ALL)\n                  .aggregators(ImmutableList.of(\n                      new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n                  ))\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new String[]{\n                \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n            }\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":141,"groupId":"103480","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testComputingSketchOnNumericValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c1/737f90327487aa5d2949ab2294563a6773ba14.src","preCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        TIMESERIES_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[]{\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(TIMESERIES_CONTEXT_DEFAULT)\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-contrib/tdigestsketch/src/test/java/org/apache/druid/query/aggregation/tdigestsketch/sql/TDigestSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
