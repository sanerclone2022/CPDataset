[{"authorTime":"2019-10-09 08:08:27","codes":[{"authorDate":"2019-10-09 08:08:27","commitOrder":1,"curCode":"  private UserAndRoleMap tryFetchUserMapsFromCoordinator(\n      String prefix\n  ) throws Exception\n  {\n    Request req = druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        StringUtils.format(\"/druid-ext/basic-security/authorization/db/%s/cachedSerializedUserMap\", prefix)\n    );\n    BytesFullResponseHolder responseHolder = druidLeaderClient.go(\n        req,\n        new BytesFullResponseHandler()\n    );\n    byte[] userRoleMapBytes = responseHolder.getContent();\n\n    UserAndRoleMap userAndRoleMap = objectMapper.readValue(\n        userRoleMapBytes,\n        BasicAuthUtils.AUTHORIZER_USER_AND_ROLE_MAP_TYPE_REFERENCE\n    );\n    if (userAndRoleMap != null && commonCacheConfig.getCacheDirectory() != null) {\n      writeUserMapToDisk(prefix, userRoleMapBytes);\n    }\n    return userAndRoleMap;\n  }\n","date":"2019-10-09 08:08:27","endLine":407,"groupId":"6406","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"tryFetchUserMapsFromCoordinator","params":"(Stringprefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d4/58d977a490bf94aeb8c63bd63770efbec4c111.src","preCode":"  private UserAndRoleMap tryFetchUserMapsFromCoordinator(\n      String prefix\n  ) throws Exception\n  {\n    Request req = druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        StringUtils.format(\"/druid-ext/basic-security/authorization/db/%s/cachedSerializedUserMap\", prefix)\n    );\n    BytesFullResponseHolder responseHolder = druidLeaderClient.go(\n        req,\n        new BytesFullResponseHandler()\n    );\n    byte[] userRoleMapBytes = responseHolder.getContent();\n\n    UserAndRoleMap userAndRoleMap = objectMapper.readValue(\n        userRoleMapBytes,\n        BasicAuthUtils.AUTHORIZER_USER_AND_ROLE_MAP_TYPE_REFERENCE\n    );\n    if (userAndRoleMap != null && commonCacheConfig.getCacheDirectory() != null) {\n      writeUserMapToDisk(prefix, userRoleMapBytes);\n    }\n    return userAndRoleMap;\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/authorization/db/cache/CoordinatorPollingBasicAuthorizerCacheManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":385,"status":"B"},{"authorDate":"2019-10-09 08:08:27","commitOrder":1,"curCode":"  private GroupMappingAndRoleMap tryFetchGroupMappingMapsFromCoordinator(\n      String prefix\n  ) throws Exception\n  {\n    Request req = druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        StringUtils.format(\"/druid-ext/basic-security/authorization/db/%s/cachedSerializedGroupMappingMap\", prefix)\n    );\n    BytesFullResponseHolder responseHolder = druidLeaderClient.go(\n        req,\n        new BytesFullResponseHandler()\n    );\n    byte[] groupRoleMapBytes = responseHolder.getContent();\n\n    GroupMappingAndRoleMap groupMappingAndRoleMap = objectMapper.readValue(\n        groupRoleMapBytes,\n        BasicAuthUtils.AUTHORIZER_GROUP_MAPPING_AND_ROLE_MAP_TYPE_REFERENCE\n    );\n    if (groupMappingAndRoleMap != null && commonCacheConfig.getCacheDirectory() != null) {\n      writeGroupMappingMapToDisk(prefix, groupRoleMapBytes);\n    }\n    return groupMappingAndRoleMap;\n  }\n","date":"2019-10-09 08:08:27","endLine":431,"groupId":"6406","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"tryFetchGroupMappingMapsFromCoordinator","params":"(Stringprefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d4/58d977a490bf94aeb8c63bd63770efbec4c111.src","preCode":"  private GroupMappingAndRoleMap tryFetchGroupMappingMapsFromCoordinator(\n      String prefix\n  ) throws Exception\n  {\n    Request req = druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        StringUtils.format(\"/druid-ext/basic-security/authorization/db/%s/cachedSerializedGroupMappingMap\", prefix)\n    );\n    BytesFullResponseHolder responseHolder = druidLeaderClient.go(\n        req,\n        new BytesFullResponseHandler()\n    );\n    byte[] groupRoleMapBytes = responseHolder.getContent();\n\n    GroupMappingAndRoleMap groupMappingAndRoleMap = objectMapper.readValue(\n        groupRoleMapBytes,\n        BasicAuthUtils.AUTHORIZER_GROUP_MAPPING_AND_ROLE_MAP_TYPE_REFERENCE\n    );\n    if (groupMappingAndRoleMap != null && commonCacheConfig.getCacheDirectory() != null) {\n      writeGroupMappingMapToDisk(prefix, groupRoleMapBytes);\n    }\n    return groupMappingAndRoleMap;\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/authorization/db/cache/CoordinatorPollingBasicAuthorizerCacheManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"B"}],"commitId":"18758f52283696ba12ab0763260909b7ca734f1e","commitMessage":"@@@Support LDAP authentication/authorization (#6972)\n\n* Support LDAP authentication/authorization\n\n* fixed integration-tests\n\n* fixed Travis CI build errors related to druid-security module\n\n* fixed failing test\n\n* fixed failing test header\n\n* added comments.  force build\n\n* fixes for strict compilation spotbugs checks\n\n* removed authenticator rolling credential update feature\n\n* removed escalator rolling credential update feature\n\n* fixed teamcity inspection deprecated API usage error\n\n* fixed checkstyle execution error.  removed unused import\n\n* removed cached config as part of removing authenticator rolling credential update feature\n\n* removed config bundle entity as part of removing authenticator rolling credential update feature\n\n* refactored ldao configuration\n\n* added support for SSLContext configuration and TLSCertificateChecker\n\n* removed check to return authentication failure when user has no group assigned.  will be checked and handled by the authorizer\n\n* Separate out authorizer checks between metadata-backed store user and LDAP user/groups\n\n* refactored BasicSecuritySSLSocketFactory usage to fix strict compilation spotbugs checks\n\n* fixes build issue\n\n* final review comments updates\n\n* final review comments updates\n\n* fixed LGTM and spellcheck alerts\n\n* Fixed Avatica auth failure error message check\n\n* Updated metadata credentials validator exception message string.  replaced DB with metadata store\n","date":"2019-10-09 08:08:27","modifiedFileCount":"44","status":"B","submitter":"Mohammad J. Khan"},{"authorTime":"2020-02-13 08:52:03","codes":[{"authorDate":"2019-10-09 08:08:27","commitOrder":2,"curCode":"  private UserAndRoleMap tryFetchUserMapsFromCoordinator(\n      String prefix\n  ) throws Exception\n  {\n    Request req = druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        StringUtils.format(\"/druid-ext/basic-security/authorization/db/%s/cachedSerializedUserMap\", prefix)\n    );\n    BytesFullResponseHolder responseHolder = druidLeaderClient.go(\n        req,\n        new BytesFullResponseHandler()\n    );\n    byte[] userRoleMapBytes = responseHolder.getContent();\n\n    UserAndRoleMap userAndRoleMap = objectMapper.readValue(\n        userRoleMapBytes,\n        BasicAuthUtils.AUTHORIZER_USER_AND_ROLE_MAP_TYPE_REFERENCE\n    );\n    if (userAndRoleMap != null && commonCacheConfig.getCacheDirectory() != null) {\n      writeUserMapToDisk(prefix, userRoleMapBytes);\n    }\n    return userAndRoleMap;\n  }\n","date":"2019-10-09 08:08:27","endLine":407,"groupId":"103131","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"tryFetchUserMapsFromCoordinator","params":"(Stringprefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d4/58d977a490bf94aeb8c63bd63770efbec4c111.src","preCode":"  private UserAndRoleMap tryFetchUserMapsFromCoordinator(\n      String prefix\n  ) throws Exception\n  {\n    Request req = druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        StringUtils.format(\"/druid-ext/basic-security/authorization/db/%s/cachedSerializedUserMap\", prefix)\n    );\n    BytesFullResponseHolder responseHolder = druidLeaderClient.go(\n        req,\n        new BytesFullResponseHandler()\n    );\n    byte[] userRoleMapBytes = responseHolder.getContent();\n\n    UserAndRoleMap userAndRoleMap = objectMapper.readValue(\n        userRoleMapBytes,\n        BasicAuthUtils.AUTHORIZER_USER_AND_ROLE_MAP_TYPE_REFERENCE\n    );\n    if (userAndRoleMap != null && commonCacheConfig.getCacheDirectory() != null) {\n      writeUserMapToDisk(prefix, userRoleMapBytes);\n    }\n    return userAndRoleMap;\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/authorization/db/cache/CoordinatorPollingBasicAuthorizerCacheManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":385,"status":"N"},{"authorDate":"2020-02-13 08:52:03","commitOrder":2,"curCode":"  private GroupMappingAndRoleMap tryFetchGroupMappingMapsFromCoordinator(\n      String prefix\n  ) throws Exception\n  {\n    Request req = druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        StringUtils.format(\"/druid-ext/basic-security/authorization/db/%s/cachedSerializedGroupMappingMap\", prefix)\n    );\n    BytesFullResponseHolder responseHolder = druidLeaderClient.go(\n        req,\n        new BytesFullResponseHandler()\n    );\n\n    \r\n    \r\n    \r\n    if (responseHolder.getStatus().equals(HttpResponseStatus.NOT_FOUND)) {\n      LOG.warn(\"cachedSerializedGroupMappingMap is not available from the coordinator, skipping fetch of group mappings for now.\");\n      return null;\n    }\n\n    byte[] groupRoleMapBytes = responseHolder.getContent();\n\n    GroupMappingAndRoleMap groupMappingAndRoleMap = objectMapper.readValue(\n        groupRoleMapBytes,\n        BasicAuthUtils.AUTHORIZER_GROUP_MAPPING_AND_ROLE_MAP_TYPE_REFERENCE\n    );\n    if (groupMappingAndRoleMap != null && commonCacheConfig.getCacheDirectory() != null) {\n      writeGroupMappingMapToDisk(prefix, groupRoleMapBytes);\n    }\n    return groupMappingAndRoleMap;\n  }\n","date":"2020-02-13 08:52:03","endLine":441,"groupId":"103131","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"tryFetchGroupMappingMapsFromCoordinator","params":"(Stringprefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/58/f4984df57ce55b81bea2f8b969f2e229067c98.src","preCode":"  private GroupMappingAndRoleMap tryFetchGroupMappingMapsFromCoordinator(\n      String prefix\n  ) throws Exception\n  {\n    Request req = druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        StringUtils.format(\"/druid-ext/basic-security/authorization/db/%s/cachedSerializedGroupMappingMap\", prefix)\n    );\n    BytesFullResponseHolder responseHolder = druidLeaderClient.go(\n        req,\n        new BytesFullResponseHandler()\n    );\n    byte[] groupRoleMapBytes = responseHolder.getContent();\n\n    GroupMappingAndRoleMap groupMappingAndRoleMap = objectMapper.readValue(\n        groupRoleMapBytes,\n        BasicAuthUtils.AUTHORIZER_GROUP_MAPPING_AND_ROLE_MAP_TYPE_REFERENCE\n    );\n    if (groupMappingAndRoleMap != null && commonCacheConfig.getCacheDirectory() != null) {\n      writeGroupMappingMapToDisk(prefix, groupRoleMapBytes);\n    }\n    return groupMappingAndRoleMap;\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/authorization/db/cache/CoordinatorPollingBasicAuthorizerCacheManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":410,"status":"M"}],"commitId":"48a0681f7eddcc32cbc57a8882b85a191d2336aa","commitMessage":"@@@Fix basic auth polling to skip retries when cachedSerializedGroupMappingMap returns 404 (#9354)\n\n","date":"2020-02-13 08:52:03","modifiedFileCount":"1","status":"M","submitter":"Jonathan Wei"}]
