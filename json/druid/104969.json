[{"authorTime":"2018-10-15 11:37:37","codes":[{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testWithSkipHeaderRows()\n  {\n    final int skipHeaderRows = 2;\n    final Parser<String, Object> parser = parserFactory.get(format, false, skipHeaderRows);\n    parser.startFileFromBeginning();\n    final String[] body = new String[]{\n        concat(format, \"header\", \"line\", \"1\"),\n        concat(format, \"header\", \"line\", \"2\"),\n        concat(format, \"hello\", \"world\", \"foo\")\n    };\n    int index;\n    for (index = 0; index < skipHeaderRows; index++) {\n      Assert.assertNull(parser.parseToMap(body[index]));\n    }\n    final Map<String, Object> jsonMap = parser.parseToMap(body[index]);\n    Assert.assertEquals(\n        \"jsonMap\",\n        ImmutableMap.of(\"column_1\", \"hello\", \"column_2\", \"world\", \"column_3\", \"foo\"),\n        jsonMap\n    );\n  }\n","date":"2018-10-15 11:37:37","endLine":131,"groupId":"13583","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithSkipHeaderRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/50/3bac79cdf58a50358a7574653158348142905a.src","preCode":"  public void testWithSkipHeaderRows()\n  {\n    final int skipHeaderRows = 2;\n    final Parser<String, Object> parser = parserFactory.get(format, false, skipHeaderRows);\n    parser.startFileFromBeginning();\n    final String[] body = new String[]{\n        concat(format, \"header\", \"line\", \"1\"),\n        concat(format, \"header\", \"line\", \"2\"),\n        concat(format, \"hello\", \"world\", \"foo\")\n    };\n    int index;\n    for (index = 0; index < skipHeaderRows; index++) {\n      Assert.assertNull(parser.parseToMap(body[index]));\n    }\n    final Map<String, Object> jsonMap = parser.parseToMap(body[index]);\n    Assert.assertEquals(\n        \"jsonMap\",\n        ImmutableMap.of(\"column_1\", \"hello\", \"column_2\", \"world\", \"column_3\", \"foo\"),\n        jsonMap\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/parsers/FlatTextFormatParserTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"},{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testWithoutStartFileFromBeginning()\n  {\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\n        \"hasHeaderRow or maxSkipHeaderRows is not supported. Please check the indexTask supports these options.\"\n    );\n\n    final int skipHeaderRows = 2;\n    final Parser<String, Object> parser = parserFactory.get(format, false, skipHeaderRows);\n    final String[] body = new String[]{\n        concat(format, \"header\", \"line\", \"1\"),\n        concat(format, \"header\", \"line\", \"2\"),\n        concat(format, \"hello\", \"world\", \"foo\")\n    };\n    parser.parseToMap(body[0]);\n  }\n","date":"2018-10-15 11:37:37","endLine":216,"groupId":"13584","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithoutStartFileFromBeginning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/50/3bac79cdf58a50358a7574653158348142905a.src","preCode":"  public void testWithoutStartFileFromBeginning()\n  {\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\n        \"hasHeaderRow or maxSkipHeaderRows is not supported. Please check the indexTask supports these options.\"\n    );\n\n    final int skipHeaderRows = 2;\n    final Parser<String, Object> parser = parserFactory.get(format, false, skipHeaderRows);\n    final String[] body = new String[]{\n        concat(format, \"header\", \"line\", \"1\"),\n        concat(format, \"header\", \"line\", \"2\"),\n        concat(format, \"hello\", \"world\", \"foo\")\n    };\n    parser.parseToMap(body[0]);\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/parsers/FlatTextFormatParserTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"B"}],"commitId":"84598fba3b283cbfd6a5addd2602c7b12ba8c00c","commitMessage":"@@@combine druid-api.  druid-common.  java-util into druid-core (#6443)\n\n* combine druid-api.  druid-common.  java-util\n\n* spacing\n","date":"2018-10-15 11:37:37","modifiedFileCount":"0","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":2,"curCode":"  public void testWithSkipHeaderRows()\n  {\n    final int skipHeaderRows = 2;\n    final Parser<String, Object> parser = PARSER_FACTORY.get(format, false, skipHeaderRows);\n    parser.startFileFromBeginning();\n    final String[] body = new String[]{\n        concat(format, \"header\", \"line\", \"1\"),\n        concat(format, \"header\", \"line\", \"2\"),\n        concat(format, \"hello\", \"world\", \"foo\")\n    };\n    int index;\n    for (index = 0; index < skipHeaderRows; index++) {\n      Assert.assertNull(parser.parseToMap(body[index]));\n    }\n    final Map<String, Object> jsonMap = parser.parseToMap(body[index]);\n    Assert.assertEquals(\n        \"jsonMap\",\n        ImmutableMap.of(\"column_1\", \"hello\", \"column_2\", \"world\", \"column_3\", \"foo\"),\n        jsonMap\n    );\n  }\n","date":"2019-08-23 18:13:54","endLine":131,"groupId":"104969","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithSkipHeaderRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/1a0d359b8b8f3fe86a854b6461cac3f791221c.src","preCode":"  public void testWithSkipHeaderRows()\n  {\n    final int skipHeaderRows = 2;\n    final Parser<String, Object> parser = parserFactory.get(format, false, skipHeaderRows);\n    parser.startFileFromBeginning();\n    final String[] body = new String[]{\n        concat(format, \"header\", \"line\", \"1\"),\n        concat(format, \"header\", \"line\", \"2\"),\n        concat(format, \"hello\", \"world\", \"foo\")\n    };\n    int index;\n    for (index = 0; index < skipHeaderRows; index++) {\n      Assert.assertNull(parser.parseToMap(body[index]));\n    }\n    final Map<String, Object> jsonMap = parser.parseToMap(body[index]);\n    Assert.assertEquals(\n        \"jsonMap\",\n        ImmutableMap.of(\"column_1\", \"hello\", \"column_2\", \"world\", \"column_3\", \"foo\"),\n        jsonMap\n    );\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/parsers/FlatTextFormatParserTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":2,"curCode":"  public void testWithoutStartFileFromBeginning()\n  {\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\n        \"hasHeaderRow or maxSkipHeaderRows is not supported. Please check the indexTask supports these options.\"\n    );\n\n    final int skipHeaderRows = 2;\n    final Parser<String, Object> parser = PARSER_FACTORY.get(format, false, skipHeaderRows);\n    final String[] body = new String[]{\n        concat(format, \"header\", \"line\", \"1\"),\n        concat(format, \"header\", \"line\", \"2\"),\n        concat(format, \"hello\", \"world\", \"foo\")\n    };\n    parser.parseToMap(body[0]);\n  }\n","date":"2019-08-23 18:13:54","endLine":216,"groupId":"104969","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithoutStartFileFromBeginning","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/1a0d359b8b8f3fe86a854b6461cac3f791221c.src","preCode":"  public void testWithoutStartFileFromBeginning()\n  {\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\n        \"hasHeaderRow or maxSkipHeaderRows is not supported. Please check the indexTask supports these options.\"\n    );\n\n    final int skipHeaderRows = 2;\n    final Parser<String, Object> parser = parserFactory.get(format, false, skipHeaderRows);\n    final String[] body = new String[]{\n        concat(format, \"header\", \"line\", \"1\"),\n        concat(format, \"header\", \"line\", \"2\"),\n        concat(format, \"hello\", \"world\", \"foo\")\n    };\n    parser.parseToMap(body[0]);\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/common/parsers/FlatTextFormatParserTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
