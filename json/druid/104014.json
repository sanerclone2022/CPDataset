[{"authorTime":"2019-07-07 00:33:12","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void testAveraging()\n  {\n\n    Map<String, Object> event1 = new HashMap<>();\n    Map<String, Object> event2 = new HashMap<>();\n    Map<String, Object> event3 = new HashMap<>();\n    Map<String, Object> event4 = new HashMap<>();\n\n    List<DimensionSpec> ds = new ArrayList<>();\n    ds.add(new DefaultDimensionSpec(\"gender\", \"gender\"));\n\n    event1.put(\"gender\", \"m\");\n    event1.put(\"pageViews\", 10L);\n    Row row1 = new MapBasedRow(JAN_1, event1);\n\n    event2.put(\"gender\", \"m\");\n    event2.put(\"pageViews\", 20L);\n    Row row2 = new MapBasedRow(JAN_2, event2);\n\n    event3.put(\"gender\", \"m\");\n    event3.put(\"pageViews\", 30L);\n    Row row3 = new MapBasedRow(JAN_3, event3);\n\n    event4.put(\"gender\", \"f\");\n    event4.put(\"pageViews\", 40L);\n    Row row4 = new MapBasedRow(JAN_3, event4);\n\n    float retval = 14.5f;\n\n    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(\n        new RowBucket(JAN_1, Collections.singletonList(row1)),\n        new RowBucket(JAN_2, Collections.singletonList(row2)),\n        new RowBucket(JAN_3, Arrays.asList(row3, row4))\n    ));\n\n    Iterator<Row> iter = new MovingAverageIterable(\n        seq,\n        ds,\n        Arrays.asList(\n            new ConstantAveragerFactory(\"costPageViews\", 7, retval),\n            new LongMeanAveragerFactory(\"movingAvgPageViews\", 7, 1, \"pageViews\")\n        ),\n        Collections.emptyList(),\n        Collections.singletonList(new LongSumAggregatorFactory(\"pageViews\", \"pageViews\"))\n    ).iterator();\n\n    Assert.assertTrue(iter.hasNext());\n    Row caResult = iter.next();\n\n    Assert.assertEquals(JAN_1, caResult.getTimestamp());\n    Assert.assertEquals(\"m\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(retval, caResult.getMetric(\"costPageViews\").floatValue(), 0.0f);\n    Assert.assertEquals(1.4285715f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    caResult = iter.next();\n    Assert.assertEquals(\"m\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(4.285714f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    caResult = iter.next();\n    Assert.assertEquals(\"m\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(8.571428f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    caResult = iter.next();\n    Assert.assertEquals(\"f\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(5.714285850f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertFalse(iter.hasNext());\n\n  }\n","date":"2019-07-07 00:33:12","endLine":238,"groupId":"1959","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAveraging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e6/de033e671bc1a635aa7981711626f835af581b.src","preCode":"  public void testAveraging()\n  {\n\n    Map<String, Object> event1 = new HashMap<>();\n    Map<String, Object> event2 = new HashMap<>();\n    Map<String, Object> event3 = new HashMap<>();\n    Map<String, Object> event4 = new HashMap<>();\n\n    List<DimensionSpec> ds = new ArrayList<>();\n    ds.add(new DefaultDimensionSpec(\"gender\", \"gender\"));\n\n    event1.put(\"gender\", \"m\");\n    event1.put(\"pageViews\", 10L);\n    Row row1 = new MapBasedRow(JAN_1, event1);\n\n    event2.put(\"gender\", \"m\");\n    event2.put(\"pageViews\", 20L);\n    Row row2 = new MapBasedRow(JAN_2, event2);\n\n    event3.put(\"gender\", \"m\");\n    event3.put(\"pageViews\", 30L);\n    Row row3 = new MapBasedRow(JAN_3, event3);\n\n    event4.put(\"gender\", \"f\");\n    event4.put(\"pageViews\", 40L);\n    Row row4 = new MapBasedRow(JAN_3, event4);\n\n    float retval = 14.5f;\n\n    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(\n        new RowBucket(JAN_1, Collections.singletonList(row1)),\n        new RowBucket(JAN_2, Collections.singletonList(row2)),\n        new RowBucket(JAN_3, Arrays.asList(row3, row4))\n    ));\n\n    Iterator<Row> iter = new MovingAverageIterable(\n        seq,\n        ds,\n        Arrays.asList(\n            new ConstantAveragerFactory(\"costPageViews\", 7, retval),\n            new LongMeanAveragerFactory(\"movingAvgPageViews\", 7, 1, \"pageViews\")\n        ),\n        Collections.emptyList(),\n        Collections.singletonList(new LongSumAggregatorFactory(\"pageViews\", \"pageViews\"))\n    ).iterator();\n\n    Assert.assertTrue(iter.hasNext());\n    Row caResult = iter.next();\n\n    Assert.assertEquals(JAN_1, caResult.getTimestamp());\n    Assert.assertEquals(\"m\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(retval, caResult.getMetric(\"costPageViews\").floatValue(), 0.0f);\n    Assert.assertEquals(1.4285715f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    caResult = iter.next();\n    Assert.assertEquals(\"m\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(4.285714f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    caResult = iter.next();\n    Assert.assertEquals(\"m\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(8.571428f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    caResult = iter.next();\n    Assert.assertEquals(\"f\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(5.714285850f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertFalse(iter.hasNext());\n\n  }\n","realPath":"extensions-contrib/moving-average-query/src/test/java/org/apache/druid/query/movingaverage/MovingAverageIterableTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"MB"},{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void testMissingDaysInMiddle()\n  {\n    System.setProperty(\"druid.generic.useDefaultValueForNull\", \"true\");\n\n    Map<String, Object> event1 = new HashMap<>();\n    Map<String, Object> event2 = new HashMap<>();\n\n    List<DimensionSpec> ds = new ArrayList<>();\n    ds.add(new DefaultDimensionSpec(\"gender\", \"gender\"));\n\n    event1.put(\"gender\", \"m\");\n    event1.put(\"pageViews\", 10L);\n    Row row1 = new MapBasedRow(JAN_1, event1);\n\n    event2.put(\"gender\", \"m\");\n    event2.put(\"pageViews\", 20L);\n    Row row2 = new MapBasedRow(JAN_4, event2);\n\n    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(\n        new RowBucket(JAN_1, Collections.singletonList(row1)),\n        new RowBucket(JAN_2, Collections.emptyList()),\n        new RowBucket(JAN_3, Collections.emptyList()),\n        new RowBucket(JAN_4, Collections.singletonList(row2))\n    ));\n\n    Iterator<Row> iter = new MovingAverageIterable(\n        seq,\n        ds,\n        Collections.singletonList(\n            new LongMeanAveragerFactory(\"movingAvgPageViews\", 4, 1, \"pageViews\")\n        ),\n        Collections.emptyList(),\n        Collections.singletonList(new LongSumAggregatorFactory(\"pageViews\", \"pageViews\"))\n    ).iterator();\n\n    Assert.assertTrue(iter.hasNext());\n    Row result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(2.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(2.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(2.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(7.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertFalse(iter.hasNext());\n  }\n","date":"2019-07-07 00:33:12","endLine":668,"groupId":"1969","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMissingDaysInMiddle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e6/de033e671bc1a635aa7981711626f835af581b.src","preCode":"  public void testMissingDaysInMiddle()\n  {\n    System.setProperty(\"druid.generic.useDefaultValueForNull\", \"true\");\n\n    Map<String, Object> event1 = new HashMap<>();\n    Map<String, Object> event2 = new HashMap<>();\n\n    List<DimensionSpec> ds = new ArrayList<>();\n    ds.add(new DefaultDimensionSpec(\"gender\", \"gender\"));\n\n    event1.put(\"gender\", \"m\");\n    event1.put(\"pageViews\", 10L);\n    Row row1 = new MapBasedRow(JAN_1, event1);\n\n    event2.put(\"gender\", \"m\");\n    event2.put(\"pageViews\", 20L);\n    Row row2 = new MapBasedRow(JAN_4, event2);\n\n    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(\n        new RowBucket(JAN_1, Collections.singletonList(row1)),\n        new RowBucket(JAN_2, Collections.emptyList()),\n        new RowBucket(JAN_3, Collections.emptyList()),\n        new RowBucket(JAN_4, Collections.singletonList(row2))\n    ));\n\n    Iterator<Row> iter = new MovingAverageIterable(\n        seq,\n        ds,\n        Collections.singletonList(\n            new LongMeanAveragerFactory(\"movingAvgPageViews\", 4, 1, \"pageViews\")\n        ),\n        Collections.emptyList(),\n        Collections.singletonList(new LongSumAggregatorFactory(\"pageViews\", \"pageViews\"))\n    ).iterator();\n\n    Assert.assertTrue(iter.hasNext());\n    Row result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(2.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(2.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(2.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(7.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertFalse(iter.hasNext());\n  }\n","realPath":"extensions-contrib/moving-average-query/src/test/java/org/apache/druid/query/movingaverage/MovingAverageIterableTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":612,"status":"MB"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2019-11-20 19:55:29","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":3,"curCode":"  public void testAveraging()\n  {\n\n    Map<String, Object> event1 = new HashMap<>();\n    Map<String, Object> event2 = new HashMap<>();\n    Map<String, Object> event3 = new HashMap<>();\n    Map<String, Object> event4 = new HashMap<>();\n\n    List<DimensionSpec> ds = new ArrayList<>();\n    ds.add(new DefaultDimensionSpec(\"gender\", \"gender\"));\n\n    event1.put(\"gender\", \"m\");\n    event1.put(\"pageViews\", 10L);\n    Row row1 = new MapBasedRow(JAN_1, event1);\n\n    event2.put(\"gender\", \"m\");\n    event2.put(\"pageViews\", 20L);\n    Row row2 = new MapBasedRow(JAN_2, event2);\n\n    event3.put(\"gender\", \"m\");\n    event3.put(\"pageViews\", 30L);\n    Row row3 = new MapBasedRow(JAN_3, event3);\n\n    event4.put(\"gender\", \"f\");\n    event4.put(\"pageViews\", 40L);\n    Row row4 = new MapBasedRow(JAN_3, event4);\n\n    float retval = 14.5f;\n\n    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(\n        new RowBucket(JAN_1, Collections.singletonList(row1)),\n        new RowBucket(JAN_2, Collections.singletonList(row2)),\n        new RowBucket(JAN_3, Arrays.asList(row3, row4))\n    ));\n\n    Iterator<Row> iter = new MovingAverageIterable(\n        seq,\n        ds,\n        Arrays.asList(\n            new ConstantAveragerFactory(\"costPageViews\", 7, retval),\n            new LongMeanAveragerFactory(\"movingAvgPageViews\", 7, 1, \"pageViews\")\n        ),\n        Collections.emptyList(),\n        Collections.singletonList(new LongSumAggregatorFactory(\"pageViews\", \"pageViews\"))\n    ).iterator();\n\n    Assert.assertTrue(iter.hasNext());\n    Row caResult = iter.next();\n\n    Assert.assertEquals(JAN_1, caResult.getTimestamp());\n    Assert.assertEquals(\"m\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(retval, caResult.getMetric(\"costPageViews\").floatValue(), 0.0f);\n    Assert.assertEquals(1.4285715f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    caResult = iter.next();\n    Assert.assertEquals(\"m\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(4.285714f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    caResult = iter.next();\n    Assert.assertEquals(\"m\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(8.571428f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    caResult = iter.next();\n    Assert.assertEquals(\"f\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(5.714285850f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertFalse(iter.hasNext());\n\n  }\n","date":"2019-07-07 00:33:12","endLine":238,"groupId":"104014","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAveraging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e6/de033e671bc1a635aa7981711626f835af581b.src","preCode":"  public void testAveraging()\n  {\n\n    Map<String, Object> event1 = new HashMap<>();\n    Map<String, Object> event2 = new HashMap<>();\n    Map<String, Object> event3 = new HashMap<>();\n    Map<String, Object> event4 = new HashMap<>();\n\n    List<DimensionSpec> ds = new ArrayList<>();\n    ds.add(new DefaultDimensionSpec(\"gender\", \"gender\"));\n\n    event1.put(\"gender\", \"m\");\n    event1.put(\"pageViews\", 10L);\n    Row row1 = new MapBasedRow(JAN_1, event1);\n\n    event2.put(\"gender\", \"m\");\n    event2.put(\"pageViews\", 20L);\n    Row row2 = new MapBasedRow(JAN_2, event2);\n\n    event3.put(\"gender\", \"m\");\n    event3.put(\"pageViews\", 30L);\n    Row row3 = new MapBasedRow(JAN_3, event3);\n\n    event4.put(\"gender\", \"f\");\n    event4.put(\"pageViews\", 40L);\n    Row row4 = new MapBasedRow(JAN_3, event4);\n\n    float retval = 14.5f;\n\n    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(\n        new RowBucket(JAN_1, Collections.singletonList(row1)),\n        new RowBucket(JAN_2, Collections.singletonList(row2)),\n        new RowBucket(JAN_3, Arrays.asList(row3, row4))\n    ));\n\n    Iterator<Row> iter = new MovingAverageIterable(\n        seq,\n        ds,\n        Arrays.asList(\n            new ConstantAveragerFactory(\"costPageViews\", 7, retval),\n            new LongMeanAveragerFactory(\"movingAvgPageViews\", 7, 1, \"pageViews\")\n        ),\n        Collections.emptyList(),\n        Collections.singletonList(new LongSumAggregatorFactory(\"pageViews\", \"pageViews\"))\n    ).iterator();\n\n    Assert.assertTrue(iter.hasNext());\n    Row caResult = iter.next();\n\n    Assert.assertEquals(JAN_1, caResult.getTimestamp());\n    Assert.assertEquals(\"m\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(retval, caResult.getMetric(\"costPageViews\").floatValue(), 0.0f);\n    Assert.assertEquals(1.4285715f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    caResult = iter.next();\n    Assert.assertEquals(\"m\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(4.285714f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    caResult = iter.next();\n    Assert.assertEquals(\"m\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(8.571428f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    caResult = iter.next();\n    Assert.assertEquals(\"f\", (caResult.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(5.714285850f, caResult.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertFalse(iter.hasNext());\n\n  }\n","realPath":"extensions-contrib/moving-average-query/src/test/java/org/apache/druid/query/movingaverage/MovingAverageIterableTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"N"},{"authorDate":"2019-11-20 19:55:29","commitOrder":3,"curCode":"  public void testMissingDaysInMiddle()\n  {\n    System.setProperty(\"druid.generic.useDefaultValueForNull\", \"true\");\n    NullHandling.initializeForTests();\n    Map<String, Object> event1 = new HashMap<>();\n    Map<String, Object> event2 = new HashMap<>();\n\n    List<DimensionSpec> ds = new ArrayList<>();\n    ds.add(new DefaultDimensionSpec(\"gender\", \"gender\"));\n\n    event1.put(\"gender\", \"m\");\n    event1.put(\"pageViews\", 10L);\n    Row row1 = new MapBasedRow(JAN_1, event1);\n\n    event2.put(\"gender\", \"m\");\n    event2.put(\"pageViews\", 20L);\n    Row row2 = new MapBasedRow(JAN_4, event2);\n\n    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(\n        new RowBucket(JAN_1, Collections.singletonList(row1)),\n        new RowBucket(JAN_2, Collections.emptyList()),\n        new RowBucket(JAN_3, Collections.emptyList()),\n        new RowBucket(JAN_4, Collections.singletonList(row2))\n    ));\n\n    Iterator<Row> iter = new MovingAverageIterable(\n        seq,\n        ds,\n        Collections.singletonList(\n            new LongMeanAveragerFactory(\"movingAvgPageViews\", 4, 1, \"pageViews\")\n        ),\n        Collections.emptyList(),\n        Collections.singletonList(new LongSumAggregatorFactory(\"pageViews\", \"pageViews\"))\n    ).iterator();\n\n    Assert.assertTrue(iter.hasNext());\n    Row result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(2.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(2.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(2.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(7.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertFalse(iter.hasNext());\n  }\n","date":"2019-11-20 19:55:29","endLine":670,"groupId":"104014","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testMissingDaysInMiddle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/58/9b03d6d20e3264f6ed0c144ad953cb5e477682.src","preCode":"  public void testMissingDaysInMiddle()\n  {\n    System.setProperty(\"druid.generic.useDefaultValueForNull\", \"true\");\n\n    Map<String, Object> event1 = new HashMap<>();\n    Map<String, Object> event2 = new HashMap<>();\n\n    List<DimensionSpec> ds = new ArrayList<>();\n    ds.add(new DefaultDimensionSpec(\"gender\", \"gender\"));\n\n    event1.put(\"gender\", \"m\");\n    event1.put(\"pageViews\", 10L);\n    Row row1 = new MapBasedRow(JAN_1, event1);\n\n    event2.put(\"gender\", \"m\");\n    event2.put(\"pageViews\", 20L);\n    Row row2 = new MapBasedRow(JAN_4, event2);\n\n    Sequence<RowBucket> seq = Sequences.simple(Arrays.asList(\n        new RowBucket(JAN_1, Collections.singletonList(row1)),\n        new RowBucket(JAN_2, Collections.emptyList()),\n        new RowBucket(JAN_3, Collections.emptyList()),\n        new RowBucket(JAN_4, Collections.singletonList(row2))\n    ));\n\n    Iterator<Row> iter = new MovingAverageIterable(\n        seq,\n        ds,\n        Collections.singletonList(\n            new LongMeanAveragerFactory(\"movingAvgPageViews\", 4, 1, \"pageViews\")\n        ),\n        Collections.emptyList(),\n        Collections.singletonList(new LongSumAggregatorFactory(\"pageViews\", \"pageViews\"))\n    ).iterator();\n\n    Assert.assertTrue(iter.hasNext());\n    Row result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(2.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(2.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(2.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertTrue(iter.hasNext());\n    result = iter.next();\n    Assert.assertEquals(\"m\", (result.getDimension(\"gender\")).get(0));\n    Assert.assertEquals(7.5f, result.getMetric(\"movingAvgPageViews\").floatValue(), 0.0f);\n\n    Assert.assertFalse(iter.hasNext());\n  }\n","realPath":"extensions-contrib/moving-average-query/src/test/java/org/apache/druid/query/movingaverage/MovingAverageIterableTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":614,"status":"M"}],"commitId":"3fcaa1a61b9b8b72bbff385a8c7b61cd97840345","commitMessage":"@@@fix sql compatible null handling config work with runtime.properties (#8876)\n\n* fix sql compatible null handling config work with runtime.properties\n\n* fix npe\n\n* fix tests\n\n* add friendly error\n\n* comment.  and friendlier still\n\n* fix compile\n\n* fix from merges\n","date":"2019-11-20 19:55:29","modifiedFileCount":"108","status":"M","submitter":"Clint Wylie"}]
