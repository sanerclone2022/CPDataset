[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testBasic() throws InterruptedException, ExecutionException, TimeoutException\n  {\n    final List<ListenableFuture<SubTaskCompleteEvent<TestTask>>> futures = IntStream\n        .range(0, 10)\n        .mapToObj(i -> monitor.submit(\n            new TestTaskSpec(\"specId\" + i, \"groupId\", \"supervisorId\", null, new IntegerInputSplit(i), 100L, 0)\n        ))\n        .collect(Collectors.toList());\n    for (int i = 0; i < futures.size(); i++) {\n      \r\n      \r\n      final SubTaskCompleteEvent<TestTask> result = futures.get(i).get(1, TimeUnit.SECONDS);\n      Assert.assertEquals(\"supervisorId\", result.getSpec().getSupervisorTaskId());\n      Assert.assertEquals(\"specId\" + i, result.getSpec().getId());\n      Assert.assertNotNull(result.getLastStatus());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastStatus().getState());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastState());\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":93,"groupId":"22130","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/cbe816a63999819a18e5974ffa381a92111862.src","preCode":"  public void testBasic() throws InterruptedException, ExecutionException, TimeoutException\n  {\n    final List<ListenableFuture<SubTaskCompleteEvent<TestTask>>> futures = IntStream\n        .range(0, 10)\n        .mapToObj(i -> monitor.submit(\n            new TestTaskSpec(\"specId\" + i, \"groupId\", \"supervisorId\", null, new IntegerInputSplit(i), 100L, 0)\n        ))\n        .collect(Collectors.toList());\n    for (int i = 0; i < futures.size(); i++) {\n      \r\n      \r\n      final SubTaskCompleteEvent<TestTask> result = futures.get(i).get(1, TimeUnit.SECONDS);\n      Assert.assertEquals(\"supervisorId\", result.getSpec().getSupervisorTaskId());\n      Assert.assertEquals(\"specId\" + i, result.getSpec().getId());\n      Assert.assertNotNull(result.getLastStatus());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastStatus().getState());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastState());\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/TaskMonitorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testRetry() throws InterruptedException, ExecutionException, TimeoutException\n  {\n    final List<TestTaskSpec> specs = IntStream\n        .range(0, 10)\n        .mapToObj(\n            i -> new TestTaskSpec(\"specId\" + i, \"groupId\", \"supervisorId\", null, new IntegerInputSplit(i), 100L, 2)\n        )\n        .collect(Collectors.toList());\n    final List<ListenableFuture<SubTaskCompleteEvent<TestTask>>> futures = specs\n        .stream()\n        .map(monitor::submit)\n        .collect(Collectors.toList());\n    for (int i = 0; i < futures.size(); i++) {\n      \r\n      \r\n      final SubTaskCompleteEvent<TestTask> result = futures.get(i).get(2, TimeUnit.SECONDS);\n      Assert.assertEquals(\"supervisorId\", result.getSpec().getSupervisorTaskId());\n      Assert.assertEquals(\"specId\" + i, result.getSpec().getId());\n\n      Assert.assertNotNull(result.getLastStatus());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastStatus().getState());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastState());\n\n      final TaskHistory<TestTask> taskHistory = monitor.getCompleteSubTaskSpecHistory(specs.get(i).getId());\n      Assert.assertNotNull(taskHistory);\n\n      final List<TaskStatusPlus> attemptHistory = taskHistory.getAttemptHistory();\n      Assert.assertNotNull(attemptHistory);\n      Assert.assertEquals(3, attemptHistory.size());\n      Assert.assertEquals(TaskState.FAILED, attemptHistory.get(0).getState());\n      Assert.assertEquals(TaskState.FAILED, attemptHistory.get(1).getState());\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":128,"groupId":"22130","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/cbe816a63999819a18e5974ffa381a92111862.src","preCode":"  public void testRetry() throws InterruptedException, ExecutionException, TimeoutException\n  {\n    final List<TestTaskSpec> specs = IntStream\n        .range(0, 10)\n        .mapToObj(\n            i -> new TestTaskSpec(\"specId\" + i, \"groupId\", \"supervisorId\", null, new IntegerInputSplit(i), 100L, 2)\n        )\n        .collect(Collectors.toList());\n    final List<ListenableFuture<SubTaskCompleteEvent<TestTask>>> futures = specs\n        .stream()\n        .map(monitor::submit)\n        .collect(Collectors.toList());\n    for (int i = 0; i < futures.size(); i++) {\n      \r\n      \r\n      final SubTaskCompleteEvent<TestTask> result = futures.get(i).get(2, TimeUnit.SECONDS);\n      Assert.assertEquals(\"supervisorId\", result.getSpec().getSupervisorTaskId());\n      Assert.assertEquals(\"specId\" + i, result.getSpec().getId());\n\n      Assert.assertNotNull(result.getLastStatus());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastStatus().getState());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastState());\n\n      final TaskHistory<TestTask> taskHistory = monitor.getCompleteSubTaskSpecHistory(specs.get(i).getId());\n      Assert.assertNotNull(taskHistory);\n\n      final List<TaskStatusPlus> attemptHistory = taskHistory.getAttemptHistory();\n      Assert.assertNotNull(attemptHistory);\n      Assert.assertEquals(3, attemptHistory.size());\n      Assert.assertEquals(TaskState.FAILED, attemptHistory.get(0).getState());\n      Assert.assertEquals(TaskState.FAILED, attemptHistory.get(1).getState());\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/TaskMonitorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-02 06:33:24","codes":[{"authorDate":"2018-10-02 06:33:24","commitOrder":2,"curCode":"  public void testBasic() throws InterruptedException, ExecutionException, TimeoutException\n  {\n    final List<ListenableFuture<SubTaskCompleteEvent<TestTask>>> futures = IntStream\n        .range(0, 10)\n        .mapToObj(i -> monitor.submit(\n            new TestTaskSpec(\"specId\" + i, \"groupId\", \"supervisorId\", null, new IntegerInputSplit(i), 100L, 0)\n        ))\n        .collect(Collectors.toList());\n    for (int i = 0; i < futures.size(); i++) {\n      \r\n      \r\n      final SubTaskCompleteEvent<TestTask> result = futures.get(i).get(1, TimeUnit.SECONDS);\n      Assert.assertEquals(\"supervisorId\", result.getSpec().getSupervisorTaskId());\n      Assert.assertEquals(\"specId\" + i, result.getSpec().getId());\n      Assert.assertNotNull(result.getLastStatus());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastStatus().getStatusCode());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastState());\n    }\n  }\n","date":"2018-10-02 06:33:24","endLine":93,"groupId":"22130","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7e/86e4072fc963d8a57af5dfd353d0bae6f21a26.src","preCode":"  public void testBasic() throws InterruptedException, ExecutionException, TimeoutException\n  {\n    final List<ListenableFuture<SubTaskCompleteEvent<TestTask>>> futures = IntStream\n        .range(0, 10)\n        .mapToObj(i -> monitor.submit(\n            new TestTaskSpec(\"specId\" + i, \"groupId\", \"supervisorId\", null, new IntegerInputSplit(i), 100L, 0)\n        ))\n        .collect(Collectors.toList());\n    for (int i = 0; i < futures.size(); i++) {\n      \r\n      \r\n      final SubTaskCompleteEvent<TestTask> result = futures.get(i).get(1, TimeUnit.SECONDS);\n      Assert.assertEquals(\"supervisorId\", result.getSpec().getSupervisorTaskId());\n      Assert.assertEquals(\"specId\" + i, result.getSpec().getId());\n      Assert.assertNotNull(result.getLastStatus());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastStatus().getState());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastState());\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/TaskMonitorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2018-10-02 06:33:24","commitOrder":2,"curCode":"  public void testRetry() throws InterruptedException, ExecutionException, TimeoutException\n  {\n    final List<TestTaskSpec> specs = IntStream\n        .range(0, 10)\n        .mapToObj(\n            i -> new TestTaskSpec(\"specId\" + i, \"groupId\", \"supervisorId\", null, new IntegerInputSplit(i), 100L, 2)\n        )\n        .collect(Collectors.toList());\n    final List<ListenableFuture<SubTaskCompleteEvent<TestTask>>> futures = specs\n        .stream()\n        .map(monitor::submit)\n        .collect(Collectors.toList());\n    for (int i = 0; i < futures.size(); i++) {\n      \r\n      \r\n      final SubTaskCompleteEvent<TestTask> result = futures.get(i).get(2, TimeUnit.SECONDS);\n      Assert.assertEquals(\"supervisorId\", result.getSpec().getSupervisorTaskId());\n      Assert.assertEquals(\"specId\" + i, result.getSpec().getId());\n\n      Assert.assertNotNull(result.getLastStatus());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastStatus().getStatusCode());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastState());\n\n      final TaskHistory<TestTask> taskHistory = monitor.getCompleteSubTaskSpecHistory(specs.get(i).getId());\n      Assert.assertNotNull(taskHistory);\n\n      final List<TaskStatusPlus> attemptHistory = taskHistory.getAttemptHistory();\n      Assert.assertNotNull(attemptHistory);\n      Assert.assertEquals(3, attemptHistory.size());\n      Assert.assertEquals(TaskState.FAILED, attemptHistory.get(0).getStatusCode());\n      Assert.assertEquals(TaskState.FAILED, attemptHistory.get(1).getStatusCode());\n    }\n  }\n","date":"2018-10-02 06:33:24","endLine":128,"groupId":"22130","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7e/86e4072fc963d8a57af5dfd353d0bae6f21a26.src","preCode":"  public void testRetry() throws InterruptedException, ExecutionException, TimeoutException\n  {\n    final List<TestTaskSpec> specs = IntStream\n        .range(0, 10)\n        .mapToObj(\n            i -> new TestTaskSpec(\"specId\" + i, \"groupId\", \"supervisorId\", null, new IntegerInputSplit(i), 100L, 2)\n        )\n        .collect(Collectors.toList());\n    final List<ListenableFuture<SubTaskCompleteEvent<TestTask>>> futures = specs\n        .stream()\n        .map(monitor::submit)\n        .collect(Collectors.toList());\n    for (int i = 0; i < futures.size(); i++) {\n      \r\n      \r\n      final SubTaskCompleteEvent<TestTask> result = futures.get(i).get(2, TimeUnit.SECONDS);\n      Assert.assertEquals(\"supervisorId\", result.getSpec().getSupervisorTaskId());\n      Assert.assertEquals(\"specId\" + i, result.getSpec().getId());\n\n      Assert.assertNotNull(result.getLastStatus());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastStatus().getState());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastState());\n\n      final TaskHistory<TestTask> taskHistory = monitor.getCompleteSubTaskSpecHistory(specs.get(i).getId());\n      Assert.assertNotNull(taskHistory);\n\n      final List<TaskStatusPlus> attemptHistory = taskHistory.getAttemptHistory();\n      Assert.assertNotNull(attemptHistory);\n      Assert.assertEquals(3, attemptHistory.size());\n      Assert.assertEquals(TaskState.FAILED, attemptHistory.get(0).getState());\n      Assert.assertEquals(TaskState.FAILED, attemptHistory.get(1).getState());\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/TaskMonitorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"42e5385e566a7bfb6e00c835b77eb7020d19d8ce","commitMessage":"@@@make 0.13 tasks API backwards compatible with 0.12  (#6333) (#6334)\n\n* Replace statusCode with status (#6333)\n\nAlso changed runnerStatusCode to runnerStatus to keep things consistent\n\n* Add unit test\n\n* Add status param to TaskStatusPlus\n\nRevert to statusCode and runnerStatusCode\n\n* Add additional status member to TaskStatusPlus\n\n* Change TaskResponseObject to match overlord's response object\n\n* Address PR comments\n\n* address comments\n\n* Add runtime exception after logging error\n\n* Remove (deprecated)status member variable from TaskStatusPlus\n\n* Minor change\n","date":"2018-10-02 06:33:24","modifiedFileCount":"11","status":"M","submitter":"Surekha"},{"authorTime":"2019-11-20 11:29:25","codes":[{"authorDate":"2019-11-20 11:29:25","commitOrder":3,"curCode":"  public void testBasic() throws InterruptedException, ExecutionException, TimeoutException\n  {\n    final List<ListenableFuture<SubTaskCompleteEvent<TestTask>>> futures = IntStream\n        .range(0, 10)\n        .mapToObj(i -> monitor.submit(\n            new TestTaskSpec(\"specId\" + i, \"groupId\", \"supervisorId\", null, new IntegerInputSplit(i), 100L, 0, false)\n        ))\n        .collect(Collectors.toList());\n    for (int i = 0; i < futures.size(); i++) {\n      \r\n      \r\n      final SubTaskCompleteEvent<TestTask> result = futures.get(i).get(1, TimeUnit.SECONDS);\n      Assert.assertEquals(\"supervisorId\", result.getSpec().getSupervisorTaskId());\n      Assert.assertEquals(\"specId\" + i, result.getSpec().getId());\n      Assert.assertNotNull(result.getLastStatus());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastStatus().getStatusCode());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastState());\n    }\n  }\n","date":"2019-11-20 11:29:25","endLine":94,"groupId":"104486","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/07/a231e31a15e71e921c4d712f7553275cc06a11.src","preCode":"  public void testBasic() throws InterruptedException, ExecutionException, TimeoutException\n  {\n    final List<ListenableFuture<SubTaskCompleteEvent<TestTask>>> futures = IntStream\n        .range(0, 10)\n        .mapToObj(i -> monitor.submit(\n            new TestTaskSpec(\"specId\" + i, \"groupId\", \"supervisorId\", null, new IntegerInputSplit(i), 100L, 0)\n        ))\n        .collect(Collectors.toList());\n    for (int i = 0; i < futures.size(); i++) {\n      \r\n      \r\n      final SubTaskCompleteEvent<TestTask> result = futures.get(i).get(1, TimeUnit.SECONDS);\n      Assert.assertEquals(\"supervisorId\", result.getSpec().getSupervisorTaskId());\n      Assert.assertEquals(\"specId\" + i, result.getSpec().getId());\n      Assert.assertNotNull(result.getLastStatus());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastStatus().getStatusCode());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastState());\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/TaskMonitorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2019-11-20 11:29:25","commitOrder":3,"curCode":"  public void testRetry() throws InterruptedException, ExecutionException, TimeoutException\n  {\n    final List<TestTaskSpec> specs = IntStream\n        .range(0, 10)\n        .mapToObj(\n            i -> new TestTaskSpec(\n                \"specId\" + i,\n                \"groupId\",\n                \"supervisorId\",\n                null,\n                new IntegerInputSplit(i),\n                100L,\n                2,\n                false\n            )\n        )\n        .collect(Collectors.toList());\n    final List<ListenableFuture<SubTaskCompleteEvent<TestTask>>> futures = specs\n        .stream()\n        .map(monitor::submit)\n        .collect(Collectors.toList());\n    for (int i = 0; i < futures.size(); i++) {\n      \r\n      \r\n      final SubTaskCompleteEvent<TestTask> result = futures.get(i).get(2, TimeUnit.SECONDS);\n      Assert.assertEquals(\"supervisorId\", result.getSpec().getSupervisorTaskId());\n      Assert.assertEquals(\"specId\" + i, result.getSpec().getId());\n\n      Assert.assertNotNull(result.getLastStatus());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastStatus().getStatusCode());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastState());\n\n      final TaskHistory<TestTask> taskHistory = monitor.getCompleteSubTaskSpecHistory(specs.get(i).getId());\n      Assert.assertNotNull(taskHistory);\n\n      final List<TaskStatusPlus> attemptHistory = taskHistory.getAttemptHistory();\n      Assert.assertNotNull(attemptHistory);\n      Assert.assertEquals(3, attemptHistory.size());\n      Assert.assertEquals(TaskState.FAILED, attemptHistory.get(0).getStatusCode());\n      Assert.assertEquals(TaskState.FAILED, attemptHistory.get(1).getStatusCode());\n    }\n  }\n","date":"2019-11-20 11:29:25","endLine":138,"groupId":"104486","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/07/a231e31a15e71e921c4d712f7553275cc06a11.src","preCode":"  public void testRetry() throws InterruptedException, ExecutionException, TimeoutException\n  {\n    final List<TestTaskSpec> specs = IntStream\n        .range(0, 10)\n        .mapToObj(\n            i -> new TestTaskSpec(\"specId\" + i, \"groupId\", \"supervisorId\", null, new IntegerInputSplit(i), 100L, 2)\n        )\n        .collect(Collectors.toList());\n    final List<ListenableFuture<SubTaskCompleteEvent<TestTask>>> futures = specs\n        .stream()\n        .map(monitor::submit)\n        .collect(Collectors.toList());\n    for (int i = 0; i < futures.size(); i++) {\n      \r\n      \r\n      final SubTaskCompleteEvent<TestTask> result = futures.get(i).get(2, TimeUnit.SECONDS);\n      Assert.assertEquals(\"supervisorId\", result.getSpec().getSupervisorTaskId());\n      Assert.assertEquals(\"specId\" + i, result.getSpec().getId());\n\n      Assert.assertNotNull(result.getLastStatus());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastStatus().getStatusCode());\n      Assert.assertEquals(TaskState.SUCCESS, result.getLastState());\n\n      final TaskHistory<TestTask> taskHistory = monitor.getCompleteSubTaskSpecHistory(specs.get(i).getId());\n      Assert.assertNotNull(taskHistory);\n\n      final List<TaskStatusPlus> attemptHistory = taskHistory.getAttemptHistory();\n      Assert.assertNotNull(attemptHistory);\n      Assert.assertEquals(3, attemptHistory.size());\n      Assert.assertEquals(TaskState.FAILED, attemptHistory.get(0).getStatusCode());\n      Assert.assertEquals(TaskState.FAILED, attemptHistory.get(1).getStatusCode());\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/TaskMonitorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"baefc65f8053aff32f94fe15d24bdea239626e27","commitMessage":"@@@Retrying with a backward compatible task type on unknown task type error in parallel indexing (#8905)\n\n* Retrying with a backward compatible task type on unknown task type error in parallel indexing\n\n* Register legacy class; add a serde test\n","date":"2019-11-20 11:29:25","modifiedFileCount":"8","status":"M","submitter":"Jihoon Son"}]
