[{"authorTime":"2018-10-15 11:37:37","codes":[{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testTakeMoreThanAllowed() throws Exception\n  {\n    primePool();\n    EasyMock.expect(resourceFactory.isGood(\"billy1\")).andReturn(true).times(1);\n    EasyMock.expect(resourceFactory.isGood(\"billy0\")).andReturn(true).times(1);\n    EasyMock.replay(resourceFactory);\n\n    CountDownLatch latch1 = new CountDownLatch(1);\n    CountDownLatch latch2 = new CountDownLatch(1);\n    CountDownLatch latch3 = new CountDownLatch(1);\n\n    MyThread billy1Thread = new MyThread(latch1, \"billy\");\n    billy1Thread.start();\n    billy1Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n    MyThread billy0Thread = new MyThread(latch2, \"billy\");\n    billy0Thread.start();\n    billy0Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n\n    MyThread blockedThread = new MyThread(latch3, \"billy\");\n    blockedThread.start();\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n    EasyMock.expect(resourceFactory.isGood(\"billy0\")).andReturn(true).times(1);\n    EasyMock.replay(resourceFactory);\n\n    latch2.countDown();\n    blockedThread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n\n    latch1.countDown();\n    latch3.countDown();\n\n    Assert.assertEquals(\"billy1\", billy1Thread.getValue());\n    Assert.assertEquals(\"billy0\", billy0Thread.getValue());\n    Assert.assertEquals(\"billy0\", blockedThread.getValue());\n  }\n","date":"2018-10-15 11:37:37","endLine":183,"groupId":"4851","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTakeMoreThanAllowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2a/0b4a595da12ea707da588035ad30f1fa155a3a.src","preCode":"  public void testTakeMoreThanAllowed() throws Exception\n  {\n    primePool();\n    EasyMock.expect(resourceFactory.isGood(\"billy1\")).andReturn(true).times(1);\n    EasyMock.expect(resourceFactory.isGood(\"billy0\")).andReturn(true).times(1);\n    EasyMock.replay(resourceFactory);\n\n    CountDownLatch latch1 = new CountDownLatch(1);\n    CountDownLatch latch2 = new CountDownLatch(1);\n    CountDownLatch latch3 = new CountDownLatch(1);\n\n    MyThread billy1Thread = new MyThread(latch1, \"billy\");\n    billy1Thread.start();\n    billy1Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n    MyThread billy0Thread = new MyThread(latch2, \"billy\");\n    billy0Thread.start();\n    billy0Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n\n    MyThread blockedThread = new MyThread(latch3, \"billy\");\n    blockedThread.start();\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n    EasyMock.expect(resourceFactory.isGood(\"billy0\")).andReturn(true).times(1);\n    EasyMock.replay(resourceFactory);\n\n    latch2.countDown();\n    blockedThread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n\n    latch1.countDown();\n    latch3.countDown();\n\n    Assert.assertEquals(\"billy1\", billy1Thread.getValue());\n    Assert.assertEquals(\"billy0\", billy0Thread.getValue());\n    Assert.assertEquals(\"billy0\", blockedThread.getValue());\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/http/client/pool/ResourcePoolTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"B"},{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testCloseUnblocks() throws InterruptedException\n  {\n    primePool();\n    EasyMock.expect(resourceFactory.isGood(\"billy1\")).andReturn(true).times(1);\n    EasyMock.expect(resourceFactory.isGood(\"billy0\")).andReturn(true).times(1);\n    resourceFactory.close(\"sally1\");\n    EasyMock.expectLastCall().times(1);\n    resourceFactory.close(\"sally0\");\n    EasyMock.expectLastCall().times(1);\n    EasyMock.replay(resourceFactory);\n    CountDownLatch latch1 = new CountDownLatch(1);\n    CountDownLatch latch2 = new CountDownLatch(1);\n    CountDownLatch latch3 = new CountDownLatch(1);\n\n    MyThread billy1Thread = new MyThread(latch1, \"billy\");\n    billy1Thread.start();\n    billy1Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n    MyThread billy0Thread = new MyThread(latch2, \"billy\");\n    billy0Thread.start();\n    billy0Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n\n    MyThread blockedThread = new MyThread(latch3, \"billy\");\n    blockedThread.start();\n    blockedThread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n    pool.close();\n\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n    EasyMock.replay(resourceFactory);\n\n    latch2.countDown();\n    blockedThread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n\n    latch1.countDown();\n    latch3.countDown();\n\n    Assert.assertEquals(\"billy1\", billy1Thread.getValue());\n    Assert.assertEquals(\"billy0\", billy0Thread.getValue());\n    blockedThread.join();\n    \r\n    Assert.assertEquals(null, blockedThread.getValue());\n  }\n","date":"2018-10-15 11:37:37","endLine":231,"groupId":"4850","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloseUnblocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2a/0b4a595da12ea707da588035ad30f1fa155a3a.src","preCode":"  public void testCloseUnblocks() throws InterruptedException\n  {\n    primePool();\n    EasyMock.expect(resourceFactory.isGood(\"billy1\")).andReturn(true).times(1);\n    EasyMock.expect(resourceFactory.isGood(\"billy0\")).andReturn(true).times(1);\n    resourceFactory.close(\"sally1\");\n    EasyMock.expectLastCall().times(1);\n    resourceFactory.close(\"sally0\");\n    EasyMock.expectLastCall().times(1);\n    EasyMock.replay(resourceFactory);\n    CountDownLatch latch1 = new CountDownLatch(1);\n    CountDownLatch latch2 = new CountDownLatch(1);\n    CountDownLatch latch3 = new CountDownLatch(1);\n\n    MyThread billy1Thread = new MyThread(latch1, \"billy\");\n    billy1Thread.start();\n    billy1Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n    MyThread billy0Thread = new MyThread(latch2, \"billy\");\n    billy0Thread.start();\n    billy0Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n\n    MyThread blockedThread = new MyThread(latch3, \"billy\");\n    blockedThread.start();\n    blockedThread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n    pool.close();\n\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n    EasyMock.replay(resourceFactory);\n\n    latch2.countDown();\n    blockedThread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n\n    latch1.countDown();\n    latch3.countDown();\n\n    Assert.assertEquals(\"billy1\", billy1Thread.getValue());\n    Assert.assertEquals(\"billy0\", billy0Thread.getValue());\n    blockedThread.join();\n    \r\n    Assert.assertEquals(null, blockedThread.getValue());\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/http/client/pool/ResourcePoolTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"B"}],"commitId":"84598fba3b283cbfd6a5addd2602c7b12ba8c00c","commitMessage":"@@@combine druid-api.  druid-common.  java-util into druid-core (#6443)\n\n* combine druid-api.  druid-common.  java-util\n\n* spacing\n","date":"2018-10-15 11:37:37","modifiedFileCount":"0","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-05-07 03:28:56","codes":[{"authorDate":"2018-10-15 11:37:37","commitOrder":2,"curCode":"  public void testTakeMoreThanAllowed() throws Exception\n  {\n    primePool();\n    EasyMock.expect(resourceFactory.isGood(\"billy1\")).andReturn(true).times(1);\n    EasyMock.expect(resourceFactory.isGood(\"billy0\")).andReturn(true).times(1);\n    EasyMock.replay(resourceFactory);\n\n    CountDownLatch latch1 = new CountDownLatch(1);\n    CountDownLatch latch2 = new CountDownLatch(1);\n    CountDownLatch latch3 = new CountDownLatch(1);\n\n    MyThread billy1Thread = new MyThread(latch1, \"billy\");\n    billy1Thread.start();\n    billy1Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n    MyThread billy0Thread = new MyThread(latch2, \"billy\");\n    billy0Thread.start();\n    billy0Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n\n    MyThread blockedThread = new MyThread(latch3, \"billy\");\n    blockedThread.start();\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n    EasyMock.expect(resourceFactory.isGood(\"billy0\")).andReturn(true).times(1);\n    EasyMock.replay(resourceFactory);\n\n    latch2.countDown();\n    blockedThread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n\n    latch1.countDown();\n    latch3.countDown();\n\n    Assert.assertEquals(\"billy1\", billy1Thread.getValue());\n    Assert.assertEquals(\"billy0\", billy0Thread.getValue());\n    Assert.assertEquals(\"billy0\", blockedThread.getValue());\n  }\n","date":"2018-10-15 11:37:37","endLine":183,"groupId":"105080","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTakeMoreThanAllowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2a/0b4a595da12ea707da588035ad30f1fa155a3a.src","preCode":"  public void testTakeMoreThanAllowed() throws Exception\n  {\n    primePool();\n    EasyMock.expect(resourceFactory.isGood(\"billy1\")).andReturn(true).times(1);\n    EasyMock.expect(resourceFactory.isGood(\"billy0\")).andReturn(true).times(1);\n    EasyMock.replay(resourceFactory);\n\n    CountDownLatch latch1 = new CountDownLatch(1);\n    CountDownLatch latch2 = new CountDownLatch(1);\n    CountDownLatch latch3 = new CountDownLatch(1);\n\n    MyThread billy1Thread = new MyThread(latch1, \"billy\");\n    billy1Thread.start();\n    billy1Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n    MyThread billy0Thread = new MyThread(latch2, \"billy\");\n    billy0Thread.start();\n    billy0Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n\n    MyThread blockedThread = new MyThread(latch3, \"billy\");\n    blockedThread.start();\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n    EasyMock.expect(resourceFactory.isGood(\"billy0\")).andReturn(true).times(1);\n    EasyMock.replay(resourceFactory);\n\n    latch2.countDown();\n    blockedThread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n\n    latch1.countDown();\n    latch3.countDown();\n\n    Assert.assertEquals(\"billy1\", billy1Thread.getValue());\n    Assert.assertEquals(\"billy0\", billy0Thread.getValue());\n    Assert.assertEquals(\"billy0\", blockedThread.getValue());\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/http/client/pool/ResourcePoolTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"N"},{"authorDate":"2019-05-07 03:28:56","commitOrder":2,"curCode":"  public void testCloseUnblocks() throws InterruptedException\n  {\n    primePool();\n    EasyMock.expect(resourceFactory.isGood(\"billy1\")).andReturn(true).times(1);\n    EasyMock.expect(resourceFactory.isGood(\"billy0\")).andReturn(true).times(1);\n    resourceFactory.close(\"sally1\");\n    EasyMock.expectLastCall().times(1);\n    resourceFactory.close(\"sally0\");\n    EasyMock.expectLastCall().times(1);\n    EasyMock.replay(resourceFactory);\n    CountDownLatch latch1 = new CountDownLatch(1);\n    CountDownLatch latch2 = new CountDownLatch(1);\n    CountDownLatch latch3 = new CountDownLatch(1);\n\n    MyThread billy1Thread = new MyThread(latch1, \"billy\");\n    billy1Thread.start();\n    billy1Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n    MyThread billy0Thread = new MyThread(latch2, \"billy\");\n    billy0Thread.start();\n    billy0Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n\n    MyThread blockedThread = new MyThread(latch3, \"billy\");\n    blockedThread.start();\n    blockedThread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n    pool.close();\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n    \r\n    \r\n    resourceFactory.close(\"billy0\");\n    EasyMock.expectLastCall().once();\n    EasyMock.replay(resourceFactory);\n\n    latch2.countDown();\n    blockedThread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n    \r\n    \r\n    billy0Thread.join();\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n\n    latch1.countDown();\n    latch3.countDown();\n\n    Assert.assertEquals(\"billy1\", billy1Thread.getValue());\n    Assert.assertEquals(\"billy0\", billy0Thread.getValue());\n    blockedThread.join();\n    \r\n    Assert.assertEquals(null, blockedThread.getValue());\n  }\n","date":"2019-05-07 03:28:56","endLine":237,"groupId":"105080","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testCloseUnblocks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b7/e074c868d5c5d2d914b68c876abd3ff0174772.src","preCode":"  public void testCloseUnblocks() throws InterruptedException\n  {\n    primePool();\n    EasyMock.expect(resourceFactory.isGood(\"billy1\")).andReturn(true).times(1);\n    EasyMock.expect(resourceFactory.isGood(\"billy0\")).andReturn(true).times(1);\n    resourceFactory.close(\"sally1\");\n    EasyMock.expectLastCall().times(1);\n    resourceFactory.close(\"sally0\");\n    EasyMock.expectLastCall().times(1);\n    EasyMock.replay(resourceFactory);\n    CountDownLatch latch1 = new CountDownLatch(1);\n    CountDownLatch latch2 = new CountDownLatch(1);\n    CountDownLatch latch3 = new CountDownLatch(1);\n\n    MyThread billy1Thread = new MyThread(latch1, \"billy\");\n    billy1Thread.start();\n    billy1Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n    MyThread billy0Thread = new MyThread(latch2, \"billy\");\n    billy0Thread.start();\n    billy0Thread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n\n    MyThread blockedThread = new MyThread(latch3, \"billy\");\n    blockedThread.start();\n    blockedThread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n    pool.close();\n\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n    EasyMock.replay(resourceFactory);\n\n    latch2.countDown();\n    blockedThread.waitForValueToBeGotten(1, TimeUnit.SECONDS);\n\n    EasyMock.verify(resourceFactory);\n    EasyMock.reset(resourceFactory);\n\n    latch1.countDown();\n    latch3.countDown();\n\n    Assert.assertEquals(\"billy1\", billy1Thread.getValue());\n    Assert.assertEquals(\"billy0\", billy0Thread.getValue());\n    blockedThread.join();\n    \r\n    Assert.assertEquals(null, blockedThread.getValue());\n  }\n","realPath":"core/src/test/java/org/apache/druid/java/util/http/client/pool/ResourcePoolTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"f7bfe8f2697277f4216d90607d01bfd26e813ab3","commitMessage":"@@@Update mocking libraries for Java 11 support (#7596)\n\n* update easymock / powermock for to 4.0.2 / 2.0.2 for JDK11 support\n* update tests to use new easymock interfaces\n* fix tests failing due to easymock fixes\n* remove dependency on jmockit\n* fix race condition in ResourcePoolTest","date":"2019-05-07 03:28:56","modifiedFileCount":"7","status":"M","submitter":"Xavier L?aut?"}]
