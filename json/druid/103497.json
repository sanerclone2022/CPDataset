[{"authorTime":"2019-08-23 15:22:40","codes":[{"authorDate":"2019-08-01 07:15:12","commitOrder":3,"curCode":"  public void testSketchDataIngestAndGpByQuery() throws Exception\n  {\n    final String groupByQueryString = readFileFromClasspathAsString(\"sketch_test_data_group_by_query.json\");\n    final GroupByQuery groupByQuery = (GroupByQuery) helper.getObjectMapper()\n                                                           .readValue(groupByQueryString, Query.class);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"sketch_test_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"sketch_test_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        1000,\n        groupByQueryString\n    );\n\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2014-10-19T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"sids_sketch_count\", 50.0)\n                    .put(\n                        \"sids_sketch_count_with_err\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchEstimatePostAgg\", 50.0)\n                    .put(\n                        \"sketchEstimatePostAggWithErrorBounds\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchUnionPostAggEstimate\", 50.0)\n                    .put(\"sketchIntersectionPostAggEstimate\", 50.0)\n                    .put(\"sketchAnotBPostAggEstimate\", 0.0)\n                    .put(\"non_existing_col_validation\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","date":"2019-08-01 07:15:12","endLine":147,"groupId":"10750","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSketchDataIngestAndGpByQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/98/0a0932edcccb28bbf8966b9d2dbce3b5e3a374.src","preCode":"  public void testSketchDataIngestAndGpByQuery() throws Exception\n  {\n    final String groupByQueryString = readFileFromClasspathAsString(\"sketch_test_data_group_by_query.json\");\n    final GroupByQuery groupByQuery = (GroupByQuery) helper.getObjectMapper()\n                                                           .readValue(groupByQueryString, Query.class);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"sketch_test_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"sketch_test_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        1000,\n        groupByQueryString\n    );\n\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2014-10-19T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"sids_sketch_count\", 50.0)\n                    .put(\n                        \"sids_sketch_count_with_err\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchEstimatePostAgg\", 50.0)\n                    .put(\n                        \"sketchEstimatePostAggWithErrorBounds\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchUnionPostAggEstimate\", 50.0)\n                    .put(\"sketchIntersectionPostAggEstimate\", 50.0)\n                    .put(\"sketchAnotBPostAggEstimate\", 0.0)\n                    .put(\"non_existing_col_validation\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/SketchAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"NB"},{"authorDate":"2019-08-23 15:22:40","commitOrder":3,"curCode":"  public void testEmptySketchAggregateCombine() throws Exception\n  {\n    final String groupByQueryString = readFileFromClasspathAsString(\"empty_sketch_group_by_query.json\");\n    final GroupByQuery groupByQuery = (GroupByQuery) helper.getObjectMapper()\n                                                           .readValue(groupByQueryString, Query.class);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"empty_sketch_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"empty_sketch_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"empty_sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        5,\n        groupByQueryString\n    );\n\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2019-07-14T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"product\", \"product_b\")\n                    .put(\"sketch_count\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","date":"2019-08-23 15:22:40","endLine":182,"groupId":"10750","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptySketchAggregateCombine","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e2/dd685f04d63d06cd252b03a95bc56ad6953ed7.src","preCode":"  public void testEmptySketchAggregateCombine() throws Exception\n  {\n    final String groupByQueryString = readFileFromClasspathAsString(\"empty_sketch_group_by_query.json\");\n    final GroupByQuery groupByQuery = (GroupByQuery) helper.getObjectMapper()\n                                                           .readValue(groupByQueryString, Query.class);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"empty_sketch_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"empty_sketch_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"empty_sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        5,\n        groupByQueryString\n    );\n\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2019-07-14T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"product\", \"product_b\")\n                    .put(\"sketch_count\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/SketchAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"}],"commitId":"661976f2665eaad40600632a043f296085554041","commitMessage":"@@@Reset sketch combiner in AggregatorCombiner (#8368)\n\n* Reset union in AggregateCombiner\n\n* Use newer sketch objects for test\n\n* Add empty sketch objects\n","date":"2019-08-23 15:22:40","modifiedFileCount":"2","status":"M","submitter":"Atul Mohan"},{"authorTime":"2019-08-23 15:22:40","codes":[{"authorDate":"2020-08-01 01:08:07","commitOrder":4,"curCode":"  public void testSketchDataIngestAndGpByQuery() throws Exception\n  {\n    final String groupByQueryString = readFileFromClasspathAsString(\"sketch_test_data_group_by_query.json\");\n    final GroupByQuery groupByQuery = (GroupByQuery) helper.getObjectMapper()\n                                                           .readValue(groupByQueryString, Query.class);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"sketch_test_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"sketch_test_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        1000,\n        groupByQueryString\n    );\n\n    final String expectedSummary = \"\\n### HeapCompactOrderedSketch SUMMARY: \\n\"\n                                   + \"   Estimate                : 50.0\\n\"\n                                   + \"   Upper Bound, 95% conf   : 50.0\\n\"\n                                   + \"   Lower Bound, 95% conf   : 50.0\\n\"\n                                   + \"   Theta (double)          : 1.0\\n\"\n                                   + \"   Theta (long)            : 9223372036854775807\\n\"\n                                   + \"   Theta (long) hex        : 7fffffffffffffff\\n\"\n                                   + \"   EstMode?                : false\\n\"\n                                   + \"   Empty?                  : false\\n\"\n                                   + \"   Retained Entries        : 50\\n\"\n                                   + \"   Seed Hash               : 93cc | 37836\\n\"\n                                   + \"### END SKETCH SUMMARY\\n\";\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2014-10-19T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"sids_sketch_count\", 50.0)\n                    .put(\n                        \"sids_sketch_count_with_err\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchEstimatePostAgg\", 50.0)\n                    .put(\n                        \"sketchEstimatePostAggWithErrorBounds\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchUnionPostAggEstimate\", 50.0)\n                    .put(\"sketchSummary\", expectedSummary)\n                    .put(\"sketchIntersectionPostAggEstimate\", 50.0)\n                    .put(\"sketchAnotBPostAggEstimate\", 0.0)\n                    .put(\"non_existing_col_validation\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","date":"2020-08-01 01:08:07","endLine":162,"groupId":"10292","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSketchDataIngestAndGpByQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6a/1ae81374706710aead0b6e598f1e25a0381249.src","preCode":"  public void testSketchDataIngestAndGpByQuery() throws Exception\n  {\n    final String groupByQueryString = readFileFromClasspathAsString(\"sketch_test_data_group_by_query.json\");\n    final GroupByQuery groupByQuery = (GroupByQuery) helper.getObjectMapper()\n                                                           .readValue(groupByQueryString, Query.class);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"sketch_test_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"sketch_test_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        1000,\n        groupByQueryString\n    );\n\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2014-10-19T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"sids_sketch_count\", 50.0)\n                    .put(\n                        \"sids_sketch_count_with_err\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchEstimatePostAgg\", 50.0)\n                    .put(\n                        \"sketchEstimatePostAggWithErrorBounds\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchUnionPostAggEstimate\", 50.0)\n                    .put(\"sketchIntersectionPostAggEstimate\", 50.0)\n                    .put(\"sketchAnotBPostAggEstimate\", 0.0)\n                    .put(\"non_existing_col_validation\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/SketchAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2019-08-23 15:22:40","commitOrder":4,"curCode":"  public void testEmptySketchAggregateCombine() throws Exception\n  {\n    final String groupByQueryString = readFileFromClasspathAsString(\"empty_sketch_group_by_query.json\");\n    final GroupByQuery groupByQuery = (GroupByQuery) helper.getObjectMapper()\n                                                           .readValue(groupByQueryString, Query.class);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"empty_sketch_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"empty_sketch_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"empty_sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        5,\n        groupByQueryString\n    );\n\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2019-07-14T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"product\", \"product_b\")\n                    .put(\"sketch_count\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","date":"2019-08-23 15:22:40","endLine":182,"groupId":"10750","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptySketchAggregateCombine","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e2/dd685f04d63d06cd252b03a95bc56ad6953ed7.src","preCode":"  public void testEmptySketchAggregateCombine() throws Exception\n  {\n    final String groupByQueryString = readFileFromClasspathAsString(\"empty_sketch_group_by_query.json\");\n    final GroupByQuery groupByQuery = (GroupByQuery) helper.getObjectMapper()\n                                                           .readValue(groupByQueryString, Query.class);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"empty_sketch_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"empty_sketch_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"empty_sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        5,\n        groupByQueryString\n    );\n\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2019-07-14T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"product\", \"product_b\")\n                    .put(\"sketch_count\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/SketchAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"N"}],"commitId":"cfb7a893e7892bfefb6b22fba4d575f0aaa012e6","commitMessage":"@@@fill out missing test coverage for druid-datasketches postaggs (#9730)\n\n* fill out missing test coverage for druid-datasketches postaggs\n\n* fixup\n\n* fixup merge\n\n* oops\n\n* oops again","date":"2020-08-01 01:08:07","modifiedFileCount":"34","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-01-30 01:30:09","codes":[{"authorDate":"2021-01-30 01:30:09","commitOrder":5,"curCode":"  public void testSketchDataIngestAndGpByQuery() throws Exception\n  {\n    final GroupByQuery groupByQuery =\n        readQueryFromClasspath(\"sketch_test_data_group_by_query.json\", helper.getObjectMapper(), vectorize);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"sketch_test_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"sketch_test_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        1000,\n        groupByQuery\n    );\n\n    final String expectedSummary = \"\\n### HeapCompactOrderedSketch SUMMARY: \\n\"\n                                   + \"   Estimate                : 50.0\\n\"\n                                   + \"   Upper Bound, 95% conf   : 50.0\\n\"\n                                   + \"   Lower Bound, 95% conf   : 50.0\\n\"\n                                   + \"   Theta (double)          : 1.0\\n\"\n                                   + \"   Theta (long)            : 9223372036854775807\\n\"\n                                   + \"   Theta (long) hex        : 7fffffffffffffff\\n\"\n                                   + \"   EstMode?                : false\\n\"\n                                   + \"   Empty?                  : false\\n\"\n                                   + \"   Retained Entries        : 50\\n\"\n                                   + \"   Seed Hash               : 93cc | 37836\\n\"\n                                   + \"### END SKETCH SUMMARY\\n\";\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2014-10-19T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"sids_sketch_count\", 50.0)\n                    .put(\n                        \"sids_sketch_count_with_err\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchEstimatePostAgg\", 50.0)\n                    .put(\n                        \"sketchEstimatePostAggWithErrorBounds\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchUnionPostAggEstimate\", 50.0)\n                    .put(\"sketchSummary\", expectedSummary)\n                    .put(\"sketchIntersectionPostAggEstimate\", 50.0)\n                    .put(\"sketchAnotBPostAggEstimate\", 0.0)\n                    .put(\"non_existing_col_validation\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","date":"2021-01-30 01:30:09","endLine":167,"groupId":"10292","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSketchDataIngestAndGpByQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b3/48a67d0e53f83dc3a6fc927fa3ccf32145b136.src","preCode":"  public void testSketchDataIngestAndGpByQuery() throws Exception\n  {\n    final String groupByQueryString = readFileFromClasspathAsString(\"sketch_test_data_group_by_query.json\");\n    final GroupByQuery groupByQuery = (GroupByQuery) helper.getObjectMapper()\n                                                           .readValue(groupByQueryString, Query.class);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"sketch_test_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"sketch_test_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        1000,\n        groupByQueryString\n    );\n\n    final String expectedSummary = \"\\n### HeapCompactOrderedSketch SUMMARY: \\n\"\n                                   + \"   Estimate                : 50.0\\n\"\n                                   + \"   Upper Bound, 95% conf   : 50.0\\n\"\n                                   + \"   Lower Bound, 95% conf   : 50.0\\n\"\n                                   + \"   Theta (double)          : 1.0\\n\"\n                                   + \"   Theta (long)            : 9223372036854775807\\n\"\n                                   + \"   Theta (long) hex        : 7fffffffffffffff\\n\"\n                                   + \"   EstMode?                : false\\n\"\n                                   + \"   Empty?                  : false\\n\"\n                                   + \"   Retained Entries        : 50\\n\"\n                                   + \"   Seed Hash               : 93cc | 37836\\n\"\n                                   + \"### END SKETCH SUMMARY\\n\";\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2014-10-19T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"sids_sketch_count\", 50.0)\n                    .put(\n                        \"sids_sketch_count_with_err\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchEstimatePostAgg\", 50.0)\n                    .put(\n                        \"sketchEstimatePostAggWithErrorBounds\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchUnionPostAggEstimate\", 50.0)\n                    .put(\"sketchSummary\", expectedSummary)\n                    .put(\"sketchIntersectionPostAggEstimate\", 50.0)\n                    .put(\"sketchAnotBPostAggEstimate\", 0.0)\n                    .put(\"non_existing_col_validation\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/SketchAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2021-01-30 01:30:09","commitOrder":5,"curCode":"  public void testEmptySketchAggregateCombine() throws Exception\n  {\n    final GroupByQuery groupByQuery =\n        readQueryFromClasspath(\"empty_sketch_group_by_query.json\", helper.getObjectMapper(), vectorize);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"empty_sketch_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"empty_sketch_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"empty_sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        5,\n        groupByQuery\n    );\n\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2019-07-14T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"product\", \"product_b\")\n                    .put(\"sketch_count\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","date":"2021-01-30 01:30:09","endLine":201,"groupId":"10291","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptySketchAggregateCombine","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b3/48a67d0e53f83dc3a6fc927fa3ccf32145b136.src","preCode":"  public void testEmptySketchAggregateCombine() throws Exception\n  {\n    final String groupByQueryString = readFileFromClasspathAsString(\"empty_sketch_group_by_query.json\");\n    final GroupByQuery groupByQuery = (GroupByQuery) helper.getObjectMapper()\n                                                           .readValue(groupByQueryString, Query.class);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"empty_sketch_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"empty_sketch_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"empty_sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        5,\n        groupByQueryString\n    );\n\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2019-07-14T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"product\", \"product_b\")\n                    .put(\"sketch_count\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/SketchAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"6c0c6e60b3604515571db062915767e9550b52cf","commitMessage":"@@@Vectorized theta sketch aggregator + rework of VectorColumnProcessorFactory. (#10767)\n\n* Vectorized theta sketch aggregator.\n\nAlso a refactoring of BufferAggregator and VectorAggregator such that\nthey share a common interface.  BaseBufferAggregator. This allows\nimplementing both in the same file with an abstract + dual subclass\nstructure.\n\n* Rework implementation to use composition instead of inheritance.\n\n* Rework things to enable working properly for both complex types and\nregular types.\n\nInvolved finally moving makeVectorProcessor from DimensionHandlerUtils\ninto ColumnProcessors and harmonizing the two things.\n\n* Add missing method.\n\n* Style and name changes.\n\n* Fix issues from inspections.\n\n* Fix style issue.","date":"2021-01-30 01:30:09","modifiedFileCount":"21","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-01-30 01:30:09","codes":[{"authorDate":"2021-02-26 21:52:00","commitOrder":6,"curCode":"  public void testSketchDataIngestAndGpByQuery() throws Exception\n  {\n    final GroupByQuery groupByQuery =\n        readQueryFromClasspath(\"sketch_test_data_group_by_query.json\", helper.getObjectMapper(), vectorize);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"sketch_test_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"sketch_test_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        1000,\n        groupByQuery\n    );\n\n    final String expectedSummary = \"\\n### HeapCompactSketch SUMMARY: \\n\"\n                                   + \"   Estimate                : 50.0\\n\"\n                                   + \"   Upper Bound, 95% conf   : 50.0\\n\"\n                                   + \"   Lower Bound, 95% conf   : 50.0\\n\"\n                                   + \"   Theta (double)          : 1.0\\n\"\n                                   + \"   Theta (long)            : 9223372036854775807\\n\"\n                                   + \"   Theta (long) hex        : 7fffffffffffffff\\n\"\n                                   + \"   EstMode?                : false\\n\"\n                                   + \"   Empty?                  : false\\n\"\n                                   + \"   Retained Entries        : 50\\n\"\n                                   + \"   Seed Hash               : 93cc | 37836\\n\"\n                                   + \"### END SKETCH SUMMARY\\n\";\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2014-10-19T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"sids_sketch_count\", 50.0)\n                    .put(\n                        \"sids_sketch_count_with_err\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchEstimatePostAgg\", 50.0)\n                    .put(\n                        \"sketchEstimatePostAggWithErrorBounds\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchUnionPostAggEstimate\", 50.0)\n                    .put(\"sketchSummary\", expectedSummary)\n                    .put(\"sketchIntersectionPostAggEstimate\", 50.0)\n                    .put(\"sketchAnotBPostAggEstimate\", 0.0)\n                    .put(\"non_existing_col_validation\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","date":"2021-02-26 21:52:00","endLine":167,"groupId":"103497","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSketchDataIngestAndGpByQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fe/3077b38f489450f8bfb32c429f804dab4daa5b.src","preCode":"  public void testSketchDataIngestAndGpByQuery() throws Exception\n  {\n    final GroupByQuery groupByQuery =\n        readQueryFromClasspath(\"sketch_test_data_group_by_query.json\", helper.getObjectMapper(), vectorize);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"sketch_test_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"sketch_test_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        1000,\n        groupByQuery\n    );\n\n    final String expectedSummary = \"\\n### HeapCompactOrderedSketch SUMMARY: \\n\"\n                                   + \"   Estimate                : 50.0\\n\"\n                                   + \"   Upper Bound, 95% conf   : 50.0\\n\"\n                                   + \"   Lower Bound, 95% conf   : 50.0\\n\"\n                                   + \"   Theta (double)          : 1.0\\n\"\n                                   + \"   Theta (long)            : 9223372036854775807\\n\"\n                                   + \"   Theta (long) hex        : 7fffffffffffffff\\n\"\n                                   + \"   EstMode?                : false\\n\"\n                                   + \"   Empty?                  : false\\n\"\n                                   + \"   Retained Entries        : 50\\n\"\n                                   + \"   Seed Hash               : 93cc | 37836\\n\"\n                                   + \"### END SKETCH SUMMARY\\n\";\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2014-10-19T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"sids_sketch_count\", 50.0)\n                    .put(\n                        \"sids_sketch_count_with_err\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchEstimatePostAgg\", 50.0)\n                    .put(\n                        \"sketchEstimatePostAggWithErrorBounds\",\n                        new SketchEstimateWithErrorBounds(50.0, 50.0, 50.0, 2)\n                    )\n                    .put(\"sketchUnionPostAggEstimate\", 50.0)\n                    .put(\"sketchSummary\", expectedSummary)\n                    .put(\"sketchIntersectionPostAggEstimate\", 50.0)\n                    .put(\"sketchAnotBPostAggEstimate\", 0.0)\n                    .put(\"non_existing_col_validation\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/SketchAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2021-01-30 01:30:09","commitOrder":6,"curCode":"  public void testEmptySketchAggregateCombine() throws Exception\n  {\n    final GroupByQuery groupByQuery =\n        readQueryFromClasspath(\"empty_sketch_group_by_query.json\", helper.getObjectMapper(), vectorize);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"empty_sketch_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"empty_sketch_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"empty_sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        5,\n        groupByQuery\n    );\n\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2019-07-14T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"product\", \"product_b\")\n                    .put(\"sketch_count\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","date":"2021-01-30 01:30:09","endLine":201,"groupId":"103497","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testEmptySketchAggregateCombine","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b3/48a67d0e53f83dc3a6fc927fa3ccf32145b136.src","preCode":"  public void testEmptySketchAggregateCombine() throws Exception\n  {\n    final GroupByQuery groupByQuery =\n        readQueryFromClasspath(\"empty_sketch_group_by_query.json\", helper.getObjectMapper(), vectorize);\n\n    final Sequence<ResultRow> seq = helper.createIndexAndRunQueryOnSegment(\n        new File(SketchAggregationTest.class.getClassLoader().getResource(\"empty_sketch_data.tsv\").getFile()),\n        readFileFromClasspathAsString(\"empty_sketch_data_record_parser.json\"),\n        readFileFromClasspathAsString(\"empty_sketch_test_data_aggregators.json\"),\n        0,\n        Granularities.NONE,\n        5,\n        groupByQuery\n    );\n\n    List<ResultRow> results = seq.toList();\n    Assert.assertEquals(1, results.size());\n    Assert.assertEquals(\n        ResultRow.fromLegacyRow(\n            new MapBasedRow(\n                DateTimes.of(\"2019-07-14T00:00:00.000Z\"),\n                ImmutableMap\n                    .<String, Object>builder()\n                    .put(\"product\", \"product_b\")\n                    .put(\"sketch_count\", 0.0)\n                    .build()\n            ),\n            groupByQuery\n        ),\n        results.get(0)\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/SketchAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"N"}],"commitId":"f930cf14d68a9b30e4a146877b3d3b8c2ac14f54","commitMessage":"@@@Use the latest Apache DataSketches release 2.0.0 (#10917)\n\n* use the latest Apache DataSketches release 2.0.0\n\n* updated datasketches version\n\nCo-authored-by: AlexanderSaydakov <AlexanderSaydakov@users.noreply.github.com>","date":"2021-02-26 21:52:00","modifiedFileCount":"29","status":"M","submitter":"Alexander Saydakov"}]
