[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testNullGetTheDataSource()\n  {\n    EasyMock.expect(server.getDataSource(\"none\")).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(\n        ImmutableList.of(server)\n    ).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DatasourcesResource datasourcesResource = new DatasourcesResource(inventoryView, null, null, new AuthConfig(), null);\n    Assert.assertEquals(204, datasourcesResource.getTheDataSource(\"none\", null).getStatus());\n    EasyMock.verify(inventoryView, server);\n  }\n","date":"2018-08-31 00:56:26","endLine":346,"groupId":"23374","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullGetTheDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/da/95b0baa58c65e55834e9ea011a350624e10f60.src","preCode":"  public void testNullGetTheDataSource()\n  {\n    EasyMock.expect(server.getDataSource(\"none\")).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(\n        ImmutableList.of(server)\n    ).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DatasourcesResource datasourcesResource = new DatasourcesResource(inventoryView, null, null, new AuthConfig(), null);\n    Assert.assertEquals(204, datasourcesResource.getTheDataSource(\"none\", null).getStatus());\n    EasyMock.verify(inventoryView, server);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DatasourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSimpleGetTheDataSource()\n  {\n    DruidDataSource dataSource1 = new DruidDataSource(\"datasource1\", new HashMap<>());\n    dataSource1.addSegment(\n        new DataSegment(\"datasegment1\", Intervals.of(\"2010-01-01/P1D\"), null, null, null, null, null, 0x9, 10)\n    );\n    EasyMock.expect(server.getDataSource(\"datasource1\")).andReturn(\n        dataSource1\n    ).atLeastOnce();\n    EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(\n        ImmutableList.of(server)\n    ).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DatasourcesResource datasourcesResource = new DatasourcesResource(inventoryView, null, null, new AuthConfig(), null);\n    Response response = datasourcesResource.getTheDataSource(\"datasource1\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Map<String, Map<String, Object>> result = (Map<String, Map<String, Object>>) response.getEntity();\n    Assert.assertEquals(1, ((Map) (result.get(\"tiers\").get(null))).get(\"segmentCount\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"size\"));\n    Assert.assertNotNull(result.get(\"segments\"));\n    Assert.assertEquals(\"2010-01-01T00:00:00.000Z\", result.get(\"segments\").get(\"minTime\").toString());\n    Assert.assertEquals(\"2010-01-02T00:00:00.000Z\", result.get(\"segments\").get(\"maxTime\").toString());\n    Assert.assertEquals(1, result.get(\"segments\").get(\"count\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"size\"));\n    EasyMock.verify(inventoryView, server);\n  }\n","date":"2018-08-31 00:56:26","endLine":376,"groupId":"17446","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleGetTheDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/da/95b0baa58c65e55834e9ea011a350624e10f60.src","preCode":"  public void testSimpleGetTheDataSource()\n  {\n    DruidDataSource dataSource1 = new DruidDataSource(\"datasource1\", new HashMap<>());\n    dataSource1.addSegment(\n        new DataSegment(\"datasegment1\", Intervals.of(\"2010-01-01/P1D\"), null, null, null, null, null, 0x9, 10)\n    );\n    EasyMock.expect(server.getDataSource(\"datasource1\")).andReturn(\n        dataSource1\n    ).atLeastOnce();\n    EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(\n        ImmutableList.of(server)\n    ).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DatasourcesResource datasourcesResource = new DatasourcesResource(inventoryView, null, null, new AuthConfig(), null);\n    Response response = datasourcesResource.getTheDataSource(\"datasource1\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Map<String, Map<String, Object>> result = (Map<String, Map<String, Object>>) response.getEntity();\n    Assert.assertEquals(1, ((Map) (result.get(\"tiers\").get(null))).get(\"segmentCount\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"size\"));\n    Assert.assertNotNull(result.get(\"segments\"));\n    Assert.assertEquals(\"2010-01-01T00:00:00.000Z\", result.get(\"segments\").get(\"minTime\").toString());\n    Assert.assertEquals(\"2010-01-02T00:00:00.000Z\", result.get(\"segments\").get(\"maxTime\").toString());\n    Assert.assertEquals(1, result.get(\"segments\").get(\"count\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"size\"));\n    EasyMock.verify(inventoryView, server);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DatasourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-01-08 06:43:11","codes":[{"authorDate":"2019-01-08 06:43:11","commitOrder":2,"curCode":"  public void testNullGetTheDataSource()\n  {\n    EasyMock.expect(server.getDataSource(\"none\")).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(\n        ImmutableList.of(server)\n    ).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DatasourcesResource datasourcesResource = new DatasourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Assert.assertEquals(204, datasourcesResource.getTheDataSource(\"none\", null).getStatus());\n    EasyMock.verify(inventoryView, server);\n  }\n","date":"2019-01-08 06:43:11","endLine":365,"groupId":"1818","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullGetTheDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3d/2c78654bdd729ee6769f2b179e6d30a6879178.src","preCode":"  public void testNullGetTheDataSource()\n  {\n    EasyMock.expect(server.getDataSource(\"none\")).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(\n        ImmutableList.of(server)\n    ).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DatasourcesResource datasourcesResource = new DatasourcesResource(inventoryView, null, null, new AuthConfig(), null);\n    Assert.assertEquals(204, datasourcesResource.getTheDataSource(\"none\", null).getStatus());\n    EasyMock.verify(inventoryView, server);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DatasourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"},{"authorDate":"2019-01-08 06:43:11","commitOrder":2,"curCode":"  public void testSimpleGetTheDataSource()\n  {\n    DruidDataSource dataSource1 = new DruidDataSource(\"datasource1\", new HashMap<>());\n    dataSource1.addSegment(\n        new DataSegment(\"datasegment1\", Intervals.of(\"2010-01-01/P1D\"), null, null, null, null, null, 0x9, 10)\n    );\n    EasyMock.expect(server.getDataSource(\"datasource1\")).andReturn(\n        dataSource1\n    ).atLeastOnce();\n    EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(\n        ImmutableList.of(server)\n    ).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DatasourcesResource datasourcesResource = new DatasourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Response response = datasourcesResource.getTheDataSource(\"datasource1\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Map<String, Map<String, Object>> result = (Map<String, Map<String, Object>>) response.getEntity();\n    Assert.assertEquals(1, ((Map) (result.get(\"tiers\").get(null))).get(\"segmentCount\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"size\"));\n    Assert.assertNotNull(result.get(\"segments\"));\n    Assert.assertEquals(\"2010-01-01T00:00:00.000Z\", result.get(\"segments\").get(\"minTime\").toString());\n    Assert.assertEquals(\"2010-01-02T00:00:00.000Z\", result.get(\"segments\").get(\"maxTime\").toString());\n    Assert.assertEquals(1, result.get(\"segments\").get(\"count\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"size\"));\n    EasyMock.verify(inventoryView, server);\n  }\n","date":"2019-01-08 06:43:11","endLine":395,"groupId":"17446","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleGetTheDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3d/2c78654bdd729ee6769f2b179e6d30a6879178.src","preCode":"  public void testSimpleGetTheDataSource()\n  {\n    DruidDataSource dataSource1 = new DruidDataSource(\"datasource1\", new HashMap<>());\n    dataSource1.addSegment(\n        new DataSegment(\"datasegment1\", Intervals.of(\"2010-01-01/P1D\"), null, null, null, null, null, 0x9, 10)\n    );\n    EasyMock.expect(server.getDataSource(\"datasource1\")).andReturn(\n        dataSource1\n    ).atLeastOnce();\n    EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(\n        ImmutableList.of(server)\n    ).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DatasourcesResource datasourcesResource = new DatasourcesResource(inventoryView, null, null, new AuthConfig(), null);\n    Response response = datasourcesResource.getTheDataSource(\"datasource1\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Map<String, Map<String, Object>> result = (Map<String, Map<String, Object>>) response.getEntity();\n    Assert.assertEquals(1, ((Map) (result.get(\"tiers\").get(null))).get(\"segmentCount\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"size\"));\n    Assert.assertNotNull(result.get(\"segments\"));\n    Assert.assertEquals(\"2010-01-01T00:00:00.000Z\", result.get(\"segments\").get(\"minTime\").toString());\n    Assert.assertEquals(\"2010-01-02T00:00:00.000Z\", result.get(\"segments\").get(\"maxTime\").toString());\n    Assert.assertEquals(1, result.get(\"segments\").get(\"count\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"size\"));\n    EasyMock.verify(inventoryView, server);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DatasourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"M"}],"commitId":"8ebb7b558b617d8807e6bdc204cabbda9a4ac346","commitMessage":"@@@Handoff should ignore segments that are dropped by drop rules (#6676)\n\n* Handoff should ignore segments that are dropped by drop rules\n\n* fix travis-ci\n\n* fix tests\n\n* address comments\n\n* remove line added by accident\n\n* address comments\n\n* add javadoc and logging the full stack trace of exception\n\n* add error message\n","date":"2019-01-08 06:43:11","modifiedFileCount":"5","status":"M","submitter":"Mingming Qiu"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":3,"curCode":"  public void testNullGetTheDataSource()\n  {\n    EasyMock.expect(server.getDataSource(\"none\")).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource DataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Assert.assertEquals(204, DataSourcesResource.getTheDataSource(\"none\", null).getStatus());\n    EasyMock.verify(inventoryView, server);\n  }\n","date":"2019-01-22 03:11:10","endLine":354,"groupId":"1818","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullGetTheDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/11/6c20bb86e0cc9f4a9760089ab7b792270f364c.src","preCode":"  public void testNullGetTheDataSource()\n  {\n    EasyMock.expect(server.getDataSource(\"none\")).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(\n        ImmutableList.of(server)\n    ).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DatasourcesResource datasourcesResource = new DatasourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Assert.assertEquals(204, datasourcesResource.getTheDataSource(\"none\", null).getStatus());\n    EasyMock.verify(inventoryView, server);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":3,"curCode":"  public void testSimpleGetTheDataSource()\n  {\n    DruidDataSource dataSource1 = new DruidDataSource(\"datasource1\", new HashMap<>());\n    dataSource1.addSegment(\n        new DataSegment(\"datasegment1\", Intervals.of(\"2010-01-01/P1D\"), \"\", null, null, null, null, 0x9, 10)\n    );\n    EasyMock.expect(server.getDataSource(\"datasource1\")).andReturn(dataSource1).atLeastOnce();\n    EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource DataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Response response = DataSourcesResource.getTheDataSource(\"datasource1\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Map<String, Map<String, Object>> result = (Map<String, Map<String, Object>>) response.getEntity();\n    Assert.assertEquals(1, ((Map) (result.get(\"tiers\").get(null))).get(\"segmentCount\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"size\"));\n    Assert.assertNotNull(result.get(\"segments\"));\n    Assert.assertEquals(\"2010-01-01T00:00:00.000Z\", result.get(\"segments\").get(\"minTime\").toString());\n    Assert.assertEquals(\"2010-01-02T00:00:00.000Z\", result.get(\"segments\").get(\"maxTime\").toString());\n    Assert.assertEquals(1, result.get(\"segments\").get(\"count\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"size\"));\n    EasyMock.verify(inventoryView, server);\n  }\n","date":"2019-01-22 03:11:10","endLine":381,"groupId":"17446","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleGetTheDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/11/6c20bb86e0cc9f4a9760089ab7b792270f364c.src","preCode":"  public void testSimpleGetTheDataSource()\n  {\n    DruidDataSource dataSource1 = new DruidDataSource(\"datasource1\", new HashMap<>());\n    dataSource1.addSegment(\n        new DataSegment(\"datasegment1\", Intervals.of(\"2010-01-01/P1D\"), null, null, null, null, null, 0x9, 10)\n    );\n    EasyMock.expect(server.getDataSource(\"datasource1\")).andReturn(\n        dataSource1\n    ).atLeastOnce();\n    EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(\n        ImmutableList.of(server)\n    ).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DatasourcesResource datasourcesResource = new DatasourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Response response = datasourcesResource.getTheDataSource(\"datasource1\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Map<String, Map<String, Object>> result = (Map<String, Map<String, Object>>) response.getEntity();\n    Assert.assertEquals(1, ((Map) (result.get(\"tiers\").get(null))).get(\"segmentCount\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"size\"));\n    Assert.assertNotNull(result.get(\"segments\"));\n    Assert.assertEquals(\"2010-01-01T00:00:00.000Z\", result.get(\"segments\").get(\"minTime\").toString());\n    Assert.assertEquals(\"2010-01-02T00:00:00.000Z\", result.get(\"segments\").get(\"maxTime\").toString());\n    Assert.assertEquals(1, result.get(\"segments\").get(\"count\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"size\"));\n    EasyMock.verify(inventoryView, server);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-05-24 00:40:28","codes":[{"authorDate":"2019-05-24 00:40:28","commitOrder":4,"curCode":"  public void testNullGetTheDataSource()\n  {\n    EasyMock.expect(server.getDataSource(\"none\")).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource dataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Assert.assertEquals(204, dataSourcesResource.getTheDataSource(\"none\", null).getStatus());\n    EasyMock.verify(inventoryView, server);\n  }\n","date":"2019-05-24 00:40:28","endLine":355,"groupId":"1818","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullGetTheDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/885ff2e031828fb7d30c985206474d3238d5c3.src","preCode":"  public void testNullGetTheDataSource()\n  {\n    EasyMock.expect(server.getDataSource(\"none\")).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource DataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Assert.assertEquals(204, DataSourcesResource.getTheDataSource(\"none\", null).getStatus());\n    EasyMock.verify(inventoryView, server);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"M"},{"authorDate":"2019-05-24 00:40:28","commitOrder":4,"curCode":"  public void testSimpleGetTheDataSource()\n  {\n    DruidDataSource dataSource1 = new DruidDataSource(\"datasource1\", new HashMap<>());\n    dataSource1.addSegment(\n        new DataSegment(\"datasegment1\", Intervals.of(\"2010-01-01/P1D\"), \"\", null, null, null, null, 0x9, 10)\n    );\n    EasyMock.expect(server.getDataSource(\"datasource1\")).andReturn(dataSource1).atLeastOnce();\n    EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource dataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Response response = dataSourcesResource.getTheDataSource(\"datasource1\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Map<String, Map<String, Object>> result = (Map<String, Map<String, Object>>) response.getEntity();\n    Assert.assertEquals(1, ((Map) (result.get(\"tiers\").get(null))).get(\"segmentCount\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"size\"));\n    Assert.assertNotNull(result.get(\"segments\"));\n    Assert.assertEquals(\"2010-01-01T00:00:00.000Z\", result.get(\"segments\").get(\"minTime\").toString());\n    Assert.assertEquals(\"2010-01-02T00:00:00.000Z\", result.get(\"segments\").get(\"maxTime\").toString());\n    Assert.assertEquals(1, result.get(\"segments\").get(\"count\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"size\"));\n    EasyMock.verify(inventoryView, server);\n  }\n","date":"2019-05-24 00:40:28","endLine":382,"groupId":"17446","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleGetTheDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/885ff2e031828fb7d30c985206474d3238d5c3.src","preCode":"  public void testSimpleGetTheDataSource()\n  {\n    DruidDataSource dataSource1 = new DruidDataSource(\"datasource1\", new HashMap<>());\n    dataSource1.addSegment(\n        new DataSegment(\"datasegment1\", Intervals.of(\"2010-01-01/P1D\"), \"\", null, null, null, null, 0x9, 10)\n    );\n    EasyMock.expect(server.getDataSource(\"datasource1\")).andReturn(dataSource1).atLeastOnce();\n    EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource DataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Response response = DataSourcesResource.getTheDataSource(\"datasource1\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Map<String, Map<String, Object>> result = (Map<String, Map<String, Object>>) response.getEntity();\n    Assert.assertEquals(1, ((Map) (result.get(\"tiers\").get(null))).get(\"segmentCount\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"size\"));\n    Assert.assertNotNull(result.get(\"segments\"));\n    Assert.assertEquals(\"2010-01-01T00:00:00.000Z\", result.get(\"segments\").get(\"minTime\").toString());\n    Assert.assertEquals(\"2010-01-02T00:00:00.000Z\", result.get(\"segments\").get(\"maxTime\").toString());\n    Assert.assertEquals(1, result.get(\"segments\").get(\"count\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"size\"));\n    EasyMock.verify(inventoryView, server);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"M"}],"commitId":"26fad7e06a61ae76a670a0ced0690767ed76c6c7","commitMessage":"@@@Add checkstyle for \"Local variable names shouldn't start with capital\" (#7681)\n\n* Add checkstyle for \"Local variable names shouldn't start with capital\"\n\n* Adjust some local variables to constants\n\n* Replace StringUtils.LINE_SEPARATOR with System.lineSeparator()\n","date":"2019-05-24 00:40:28","modifiedFileCount":"13","status":"M","submitter":"Merlin Lee"},{"authorTime":"2019-07-11 16:10:38","codes":[{"authorDate":"2019-05-24 00:40:28","commitOrder":5,"curCode":"  public void testNullGetTheDataSource()\n  {\n    EasyMock.expect(server.getDataSource(\"none\")).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource dataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Assert.assertEquals(204, dataSourcesResource.getTheDataSource(\"none\", null).getStatus());\n    EasyMock.verify(inventoryView, server);\n  }\n","date":"2019-05-24 00:40:28","endLine":355,"groupId":"1818","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullGetTheDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/885ff2e031828fb7d30c985206474d3238d5c3.src","preCode":"  public void testNullGetTheDataSource()\n  {\n    EasyMock.expect(server.getDataSource(\"none\")).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource dataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Assert.assertEquals(204, dataSourcesResource.getTheDataSource(\"none\", null).getStatus());\n    EasyMock.verify(inventoryView, server);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"N"},{"authorDate":"2019-07-11 16:10:38","commitOrder":5,"curCode":"  public void testSimpleGetTheDataSource()\n  {\n    DruidDataSource dataSource1 = new DruidDataSource(\"datasource1\", new HashMap<>());\n    dataSource1.addSegment(\n        new DataSegment(\"datasegment1\", Intervals.of(\"2010-01-01/P1D\"), \"\", null, null, null, null, 0x9, 10)\n    );\n    EasyMock.expect(server.getDataSource(\"datasource1\")).andReturn(dataSource1).atLeastOnce();\n    EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource dataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Response response = dataSourcesResource.getTheDataSource(\"datasource1\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Map<String, Map<String, Object>> result = (Map<String, Map<String, Object>>) response.getEntity();\n    Assert.assertEquals(1, ((Map) (result.get(\"tiers\").get(null))).get(\"segmentCount\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"size\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"replicatedSize\"));\n    Assert.assertNotNull(result.get(\"segments\"));\n    Assert.assertEquals(\"2010-01-01T00:00:00.000Z\", result.get(\"segments\").get(\"minTime\").toString());\n    Assert.assertEquals(\"2010-01-02T00:00:00.000Z\", result.get(\"segments\").get(\"maxTime\").toString());\n    Assert.assertEquals(1, result.get(\"segments\").get(\"count\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"size\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"replicatedSize\"));\n    EasyMock.verify(inventoryView, server);\n  }\n","date":"2019-07-11 16:10:38","endLine":384,"groupId":"17446","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleGetTheDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1a/e294bd195745f9c8cb43e8f573f31aac19605d.src","preCode":"  public void testSimpleGetTheDataSource()\n  {\n    DruidDataSource dataSource1 = new DruidDataSource(\"datasource1\", new HashMap<>());\n    dataSource1.addSegment(\n        new DataSegment(\"datasegment1\", Intervals.of(\"2010-01-01/P1D\"), \"\", null, null, null, null, 0x9, 10)\n    );\n    EasyMock.expect(server.getDataSource(\"datasource1\")).andReturn(dataSource1).atLeastOnce();\n    EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource dataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Response response = dataSourcesResource.getTheDataSource(\"datasource1\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Map<String, Map<String, Object>> result = (Map<String, Map<String, Object>>) response.getEntity();\n    Assert.assertEquals(1, ((Map) (result.get(\"tiers\").get(null))).get(\"segmentCount\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"size\"));\n    Assert.assertNotNull(result.get(\"segments\"));\n    Assert.assertEquals(\"2010-01-01T00:00:00.000Z\", result.get(\"segments\").get(\"minTime\").toString());\n    Assert.assertEquals(\"2010-01-02T00:00:00.000Z\", result.get(\"segments\").get(\"maxTime\").toString());\n    Assert.assertEquals(1, result.get(\"segments\").get(\"count\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"size\"));\n    EasyMock.verify(inventoryView, server);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"M"}],"commitId":"631cda649b388324c6e4d383e56cae2786144c27","commitMessage":"@@@Include replicated segment size property for datasources endpoint (#8039)\n\n* Add replication size\n\n* Summon comma\n","date":"2019-07-11 16:10:38","modifiedFileCount":"2","status":"M","submitter":"Atul Mohan"},{"authorTime":"2019-07-17 22:18:48","codes":[{"authorDate":"2019-07-17 22:18:48","commitOrder":6,"curCode":"  public void testNullGetTheDataSource()\n  {\n    EasyMock.expect(server.getDataSource(\"none\")).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource dataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, null);\n    Assert.assertEquals(204, dataSourcesResource.getDataSource(\"none\", null).getStatus());\n    EasyMock.verify(inventoryView, server);\n  }\n","date":"2019-07-17 22:18:48","endLine":330,"groupId":"11319","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullGetTheDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cb/463fd517592499ab297c3746d0493dad781109.src","preCode":"  public void testNullGetTheDataSource()\n  {\n    EasyMock.expect(server.getDataSource(\"none\")).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource dataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Assert.assertEquals(204, dataSourcesResource.getTheDataSource(\"none\", null).getStatus());\n    EasyMock.verify(inventoryView, server);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"},{"authorDate":"2019-07-17 22:18:48","commitOrder":6,"curCode":"  public void testSimpleGetTheDataSource()\n  {\n    DruidDataSource dataSource1 = new DruidDataSource(\"datasource1\", new HashMap<>());\n    dataSource1.addSegment(\n        new DataSegment(\"datasegment1\", Intervals.of(\"2010-01-01/P1D\"), \"\", null, null, null, null, 0x9, 10)\n    );\n    EasyMock.expect(server.getDataSource(\"datasource1\")).andReturn(dataSource1).atLeastOnce();\n    EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource dataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, null);\n    Response response = dataSourcesResource.getDataSource(\"datasource1\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Map<String, Map<String, Object>> result = (Map<String, Map<String, Object>>) response.getEntity();\n    Assert.assertEquals(1, ((Map) (result.get(\"tiers\").get(null))).get(\"segmentCount\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"size\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"replicatedSize\"));\n    Assert.assertNotNull(result.get(\"segments\"));\n    Assert.assertEquals(\"2010-01-01T00:00:00.000Z\", result.get(\"segments\").get(\"minTime\").toString());\n    Assert.assertEquals(\"2010-01-02T00:00:00.000Z\", result.get(\"segments\").get(\"maxTime\").toString());\n    Assert.assertEquals(1, result.get(\"segments\").get(\"count\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"size\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"replicatedSize\"));\n    EasyMock.verify(inventoryView, server);\n  }\n","date":"2019-07-17 22:18:48","endLine":359,"groupId":"17446","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleGetTheDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cb/463fd517592499ab297c3746d0493dad781109.src","preCode":"  public void testSimpleGetTheDataSource()\n  {\n    DruidDataSource dataSource1 = new DruidDataSource(\"datasource1\", new HashMap<>());\n    dataSource1.addSegment(\n        new DataSegment(\"datasegment1\", Intervals.of(\"2010-01-01/P1D\"), \"\", null, null, null, null, 0x9, 10)\n    );\n    EasyMock.expect(server.getDataSource(\"datasource1\")).andReturn(dataSource1).atLeastOnce();\n    EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource dataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, new AuthConfig(), null);\n    Response response = dataSourcesResource.getTheDataSource(\"datasource1\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Map<String, Map<String, Object>> result = (Map<String, Map<String, Object>>) response.getEntity();\n    Assert.assertEquals(1, ((Map) (result.get(\"tiers\").get(null))).get(\"segmentCount\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"size\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"replicatedSize\"));\n    Assert.assertNotNull(result.get(\"segments\"));\n    Assert.assertEquals(\"2010-01-01T00:00:00.000Z\", result.get(\"segments\").get(\"minTime\").toString());\n    Assert.assertEquals(\"2010-01-02T00:00:00.000Z\", result.get(\"segments\").get(\"maxTime\").toString());\n    Assert.assertEquals(1, result.get(\"segments\").get(\"count\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"size\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"replicatedSize\"));\n    EasyMock.verify(inventoryView, server);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"}],"commitId":"ceb969903f06a72d669bb55ab83223bddb5355ee","commitMessage":"@@@Refactor SQLMetadataSegmentManager; Change contract of REST met? (#7653)\n\n* Refactor SQLMetadataSegmentManager; Change contract of REST methods in DataSourcesResource\n\n* Style fixes\n\n* Unused imports\n\n* Fix tests\n\n* Fix style\n\n* Comments\n\n* Comment fix\n\n* Remove unresolvable Javadoc references; address comments\n\n* Add comments to ImmutableDruidDataSource\n\n* Merge with master\n\n* Fix bad web-console merge\n\n* Fixes in api-reference.md\n\n* Rename in DruidCoordinatorRuntimeParams\n\n* Fix compilation\n\n* Residual changes\n","date":"2019-07-17 22:18:48","modifiedFileCount":"77","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-06-17 14:48:30","codes":[{"authorDate":"2020-06-17 14:48:30","commitOrder":7,"curCode":"  public void testNullGetTheDataSource()\n  {\n    EasyMock.expect(server.getDataSource(\"none\")).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource dataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, null, null);\n    Assert.assertEquals(204, dataSourcesResource.getDataSource(\"none\", null).getStatus());\n    EasyMock.verify(inventoryView, server);\n  }\n","date":"2020-06-17 14:48:30","endLine":339,"groupId":"10575","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullGetTheDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/e02ae86def99bf67659243d8f5ac660473b7a5.src","preCode":"  public void testNullGetTheDataSource()\n  {\n    EasyMock.expect(server.getDataSource(\"none\")).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource dataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, null);\n    Assert.assertEquals(204, dataSourcesResource.getDataSource(\"none\", null).getStatus());\n    EasyMock.verify(inventoryView, server);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"},{"authorDate":"2020-06-17 14:48:30","commitOrder":7,"curCode":"  public void testSimpleGetTheDataSource()\n  {\n    DruidDataSource dataSource1 = new DruidDataSource(\"datasource1\", new HashMap<>());\n    dataSource1.addSegment(\n        new DataSegment(\"datasegment1\", Intervals.of(\"2010-01-01/P1D\"), \"\", null, null, null, null, 0x9, 10)\n    );\n    EasyMock.expect(server.getDataSource(\"datasource1\")).andReturn(dataSource1).atLeastOnce();\n    EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource dataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, null, null);\n    Response response = dataSourcesResource.getDataSource(\"datasource1\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Map<String, Map<String, Object>> result = (Map<String, Map<String, Object>>) response.getEntity();\n    Assert.assertEquals(1, ((Map) (result.get(\"tiers\").get(null))).get(\"segmentCount\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"size\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"replicatedSize\"));\n    Assert.assertNotNull(result.get(\"segments\"));\n    Assert.assertEquals(\"2010-01-01T00:00:00.000Z\", result.get(\"segments\").get(\"minTime\").toString());\n    Assert.assertEquals(\"2010-01-02T00:00:00.000Z\", result.get(\"segments\").get(\"maxTime\").toString());\n    Assert.assertEquals(1, result.get(\"segments\").get(\"count\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"size\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"replicatedSize\"));\n    EasyMock.verify(inventoryView, server);\n  }\n","date":"2020-06-17 14:48:30","endLine":368,"groupId":"10575","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleGetTheDataSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/e02ae86def99bf67659243d8f5ac660473b7a5.src","preCode":"  public void testSimpleGetTheDataSource()\n  {\n    DruidDataSource dataSource1 = new DruidDataSource(\"datasource1\", new HashMap<>());\n    dataSource1.addSegment(\n        new DataSegment(\"datasegment1\", Intervals.of(\"2010-01-01/P1D\"), \"\", null, null, null, null, 0x9, 10)\n    );\n    EasyMock.expect(server.getDataSource(\"datasource1\")).andReturn(dataSource1).atLeastOnce();\n    EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();\n    EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();\n\n    EasyMock.replay(inventoryView, server);\n    DataSourcesResource dataSourcesResource =\n        new DataSourcesResource(inventoryView, null, null, null, null);\n    Response response = dataSourcesResource.getDataSource(\"datasource1\", null);\n    Assert.assertEquals(200, response.getStatus());\n    Map<String, Map<String, Object>> result = (Map<String, Map<String, Object>>) response.getEntity();\n    Assert.assertEquals(1, ((Map) (result.get(\"tiers\").get(null))).get(\"segmentCount\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"size\"));\n    Assert.assertEquals(10L, ((Map) (result.get(\"tiers\").get(null))).get(\"replicatedSize\"));\n    Assert.assertNotNull(result.get(\"segments\"));\n    Assert.assertEquals(\"2010-01-01T00:00:00.000Z\", result.get(\"segments\").get(\"minTime\").toString());\n    Assert.assertEquals(\"2010-01-02T00:00:00.000Z\", result.get(\"segments\").get(\"maxTime\").toString());\n    Assert.assertEquals(1, result.get(\"segments\").get(\"count\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"size\"));\n    Assert.assertEquals(10L, result.get(\"segments\").get(\"replicatedSize\"));\n    EasyMock.verify(inventoryView, server);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/DataSourcesResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"}],"commitId":"1a2620606d8187da7725088e9c52ce41b8a692b0","commitMessage":"@@@API to verify a datasource has the latest ingested data (#9965)\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* fix checksyle\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* API to verify a datasource has the latest ingested data\n\n* fix spelling\n\n* address comments\n\n* fix checkstyle\n\n* update docs\n\n* fix tests\n\n* fix doc\n\n* address comments\n\n* fix typo\n\n* fix spelling\n\n* address comments\n\n* address comments\n\n* fix typo in docs","date":"2020-06-17 14:48:30","modifiedFileCount":"7","status":"M","submitter":"Maytas Monsereenusorn"}]
