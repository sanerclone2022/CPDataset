[{"authorTime":"2019-07-30 08:06:33","codes":[{"authorDate":"2019-07-30 08:06:33","commitOrder":1,"curCode":"  public static void bindChatHandler(Binder binder)\n  {\n    PolyBind.createChoice(\n        binder,\n        \"druid.indexer.task.chathandler.type\",\n        Key.get(ChatHandlerProvider.class),\n        Key.get(ServiceAnnouncingChatHandlerProvider.class)\n    );\n    final MapBinder<String, ChatHandlerProvider> handlerProviderBinder =\n        PolyBind.optionBinder(binder, Key.get(ChatHandlerProvider.class));\n    handlerProviderBinder\n        .addBinding(\"announce\")\n        .to(ServiceAnnouncingChatHandlerProvider.class)\n        .in(LazySingleton.class);\n    handlerProviderBinder\n        .addBinding(\"noop\")\n        .to(NoopChatHandlerProvider.class)\n        .in(LazySingleton.class);\n    binder.bind(ServiceAnnouncingChatHandlerProvider.class).in(LazySingleton.class);\n    binder.bind(NoopChatHandlerProvider.class).in(LazySingleton.class);\n  }\n","date":"2019-07-30 08:06:33","endLine":345,"groupId":"13764","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"bindChatHandler","params":"(Binderbinder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4a/6c2d8ace771e49d2b06fd4d3927f33fd08ba22.src","preCode":"  public static void bindChatHandler(Binder binder)\n  {\n    PolyBind.createChoice(\n        binder,\n        \"druid.indexer.task.chathandler.type\",\n        Key.get(ChatHandlerProvider.class),\n        Key.get(ServiceAnnouncingChatHandlerProvider.class)\n    );\n    final MapBinder<String, ChatHandlerProvider> handlerProviderBinder =\n        PolyBind.optionBinder(binder, Key.get(ChatHandlerProvider.class));\n    handlerProviderBinder\n        .addBinding(\"announce\")\n        .to(ServiceAnnouncingChatHandlerProvider.class)\n        .in(LazySingleton.class);\n    handlerProviderBinder\n        .addBinding(\"noop\")\n        .to(NoopChatHandlerProvider.class)\n        .in(LazySingleton.class);\n    binder.bind(ServiceAnnouncingChatHandlerProvider.class).in(LazySingleton.class);\n    binder.bind(NoopChatHandlerProvider.class).in(LazySingleton.class);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/CliPeon.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"B"},{"authorDate":"2019-07-30 08:06:33","commitOrder":1,"curCode":"  public static void configureTaskActionClient(Binder binder)\n  {\n    PolyBind.createChoice(\n        binder,\n        \"druid.peon.mode\",\n        Key.get(TaskActionClientFactory.class),\n        Key.get(RemoteTaskActionClientFactory.class)\n    );\n    final MapBinder<String, TaskActionClientFactory> taskActionBinder =\n        PolyBind.optionBinder(binder, Key.get(TaskActionClientFactory.class));\n    taskActionBinder\n        .addBinding(\"local\")\n        .to(LocalTaskActionClientFactory.class)\n        .in(LazySingleton.class);\n    \r\n    JsonConfigProvider.bind(binder, \"druid.indexer.storage\", TaskStorageConfig.class);\n    binder.bind(TaskStorage.class).to(HeapMemoryTaskStorage.class).in(LazySingleton.class);\n    binder.bind(TaskActionToolbox.class).in(LazySingleton.class);\n    binder.bind(IndexerMetadataStorageCoordinator.class)\n          .to(IndexerSQLMetadataStorageCoordinator.class)\n          .in(LazySingleton.class);\n    taskActionBinder\n        .addBinding(\"remote\")\n        .to(RemoteTaskActionClientFactory.class)\n        .in(LazySingleton.class);\n  }\n","date":"2019-07-30 08:06:33","endLine":383,"groupId":"13764","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"configureTaskActionClient","params":"(Binderbinder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4a/6c2d8ace771e49d2b06fd4d3927f33fd08ba22.src","preCode":"  public static void configureTaskActionClient(Binder binder)\n  {\n    PolyBind.createChoice(\n        binder,\n        \"druid.peon.mode\",\n        Key.get(TaskActionClientFactory.class),\n        Key.get(RemoteTaskActionClientFactory.class)\n    );\n    final MapBinder<String, TaskActionClientFactory> taskActionBinder =\n        PolyBind.optionBinder(binder, Key.get(TaskActionClientFactory.class));\n    taskActionBinder\n        .addBinding(\"local\")\n        .to(LocalTaskActionClientFactory.class)\n        .in(LazySingleton.class);\n    \r\n    JsonConfigProvider.bind(binder, \"druid.indexer.storage\", TaskStorageConfig.class);\n    binder.bind(TaskStorage.class).to(HeapMemoryTaskStorage.class).in(LazySingleton.class);\n    binder.bind(TaskActionToolbox.class).in(LazySingleton.class);\n    binder.bind(IndexerMetadataStorageCoordinator.class)\n          .to(IndexerSQLMetadataStorageCoordinator.class)\n          .in(LazySingleton.class);\n    taskActionBinder\n        .addBinding(\"remote\")\n        .to(RemoteTaskActionClientFactory.class)\n        .in(LazySingleton.class);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/CliPeon.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":358,"status":"B"}],"commitId":"640b7afc1cee911a27de7bf938dda24a85ba1510","commitMessage":"@@@Add CliIndexer process type and initial task runner implementation (#8107)\n\n* Add CliIndexer process type and initial task runner implementation\n\n* Fix HttpRemoteTaskRunnerTest\n\n* Remove batch sanity check on PeonAppenderatorsManager\n\n* Fix paralle index tests\n\n* PR comments\n\n* Adjust Jersey resource logging\n\n* Additional cleanup\n\n* Fix SystemSchemaTest\n\n* Add comment to LocalDataSegmentPusherTest absolute path test\n\n* More PR comments\n\n* Use Server annotated with RemoteChatHandler\n\n* More PR comments\n\n* Checkstyle\n\n* PR comments\n\n* Add task shutdown to stopGracefully\n\n* Small cleanup\n\n* Compile fix\n\n* Address PR comments\n\n* Adjust TaskReportFileWriter and fix nits\n\n* Remove unnecessary closer\n\n* More PR comments\n\n* Minor adjustments\n\n* PR comments\n\n* ThreadingTaskRunner: cancel  task run future not shutdownFuture and remove thread from workitem\n","date":"2019-07-30 08:06:33","modifiedFileCount":"64","status":"B","submitter":"Jonathan Wei"},{"authorTime":"2019-12-08 23:47:58","codes":[{"authorDate":"2019-12-08 23:47:58","commitOrder":2,"curCode":"  static void bindChatHandler(Binder binder)\n  {\n    PolyBind.createChoice(\n        binder,\n        \"druid.indexer.task.chathandler.type\",\n        Key.get(ChatHandlerProvider.class),\n        Key.get(ServiceAnnouncingChatHandlerProvider.class)\n    );\n    final MapBinder<String, ChatHandlerProvider> handlerProviderBinder =\n        PolyBind.optionBinder(binder, Key.get(ChatHandlerProvider.class));\n    handlerProviderBinder\n        .addBinding(\"announce\")\n        .to(ServiceAnnouncingChatHandlerProvider.class)\n        .in(LazySingleton.class);\n    handlerProviderBinder\n        .addBinding(\"noop\")\n        .to(NoopChatHandlerProvider.class)\n        .in(LazySingleton.class);\n    binder.bind(ServiceAnnouncingChatHandlerProvider.class).in(LazySingleton.class);\n    binder.bind(NoopChatHandlerProvider.class).in(LazySingleton.class);\n  }\n","date":"2019-12-08 23:47:58","endLine":354,"groupId":"13764","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"bindChatHandler","params":"(Binderbinder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/82c6ded5ee8eed6bc2b593c26600d985d757a0.src","preCode":"  public static void bindChatHandler(Binder binder)\n  {\n    PolyBind.createChoice(\n        binder,\n        \"druid.indexer.task.chathandler.type\",\n        Key.get(ChatHandlerProvider.class),\n        Key.get(ServiceAnnouncingChatHandlerProvider.class)\n    );\n    final MapBinder<String, ChatHandlerProvider> handlerProviderBinder =\n        PolyBind.optionBinder(binder, Key.get(ChatHandlerProvider.class));\n    handlerProviderBinder\n        .addBinding(\"announce\")\n        .to(ServiceAnnouncingChatHandlerProvider.class)\n        .in(LazySingleton.class);\n    handlerProviderBinder\n        .addBinding(\"noop\")\n        .to(NoopChatHandlerProvider.class)\n        .in(LazySingleton.class);\n    binder.bind(ServiceAnnouncingChatHandlerProvider.class).in(LazySingleton.class);\n    binder.bind(NoopChatHandlerProvider.class).in(LazySingleton.class);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/CliPeon.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"M"},{"authorDate":"2019-12-08 23:47:58","commitOrder":2,"curCode":"  private static void configureTaskActionClient(Binder binder)\n  {\n    PolyBind.createChoice(\n        binder,\n        \"druid.peon.mode\",\n        Key.get(TaskActionClientFactory.class),\n        Key.get(RemoteTaskActionClientFactory.class)\n    );\n    final MapBinder<String, TaskActionClientFactory> taskActionBinder =\n        PolyBind.optionBinder(binder, Key.get(TaskActionClientFactory.class));\n    taskActionBinder\n        .addBinding(\"local\")\n        .to(LocalTaskActionClientFactory.class)\n        .in(LazySingleton.class);\n    \r\n    JsonConfigProvider.bind(binder, \"druid.indexer.storage\", TaskStorageConfig.class);\n    binder.bind(TaskStorage.class).to(HeapMemoryTaskStorage.class).in(LazySingleton.class);\n    binder.bind(TaskActionToolbox.class).in(LazySingleton.class);\n    binder.bind(IndexerMetadataStorageCoordinator.class)\n          .to(IndexerSQLMetadataStorageCoordinator.class)\n          .in(LazySingleton.class);\n    taskActionBinder\n        .addBinding(\"remote\")\n        .to(RemoteTaskActionClientFactory.class)\n        .in(LazySingleton.class);\n\n    binder.bind(NodeRole.class).annotatedWith(Self.class).toInstance(NodeRole.PEON);\n  }\n","date":"2019-12-08 23:47:58","endLine":394,"groupId":"13764","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"configureTaskActionClient","params":"(Binderbinder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/82c6ded5ee8eed6bc2b593c26600d985d757a0.src","preCode":"  public static void configureTaskActionClient(Binder binder)\n  {\n    PolyBind.createChoice(\n        binder,\n        \"druid.peon.mode\",\n        Key.get(TaskActionClientFactory.class),\n        Key.get(RemoteTaskActionClientFactory.class)\n    );\n    final MapBinder<String, TaskActionClientFactory> taskActionBinder =\n        PolyBind.optionBinder(binder, Key.get(TaskActionClientFactory.class));\n    taskActionBinder\n        .addBinding(\"local\")\n        .to(LocalTaskActionClientFactory.class)\n        .in(LazySingleton.class);\n    \r\n    JsonConfigProvider.bind(binder, \"druid.indexer.storage\", TaskStorageConfig.class);\n    binder.bind(TaskStorage.class).to(HeapMemoryTaskStorage.class).in(LazySingleton.class);\n    binder.bind(TaskActionToolbox.class).in(LazySingleton.class);\n    binder.bind(IndexerMetadataStorageCoordinator.class)\n          .to(IndexerSQLMetadataStorageCoordinator.class)\n          .in(LazySingleton.class);\n    taskActionBinder\n        .addBinding(\"remote\")\n        .to(RemoteTaskActionClientFactory.class)\n        .in(LazySingleton.class);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/CliPeon.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":367,"status":"M"}],"commitId":"1c62987783e85867856f567b04aad807a26bb2e3","commitMessage":"@@@Add SelfDiscoveryResource; rename org.apache.druid.discovery.No? (#6702)\n\n* Add SelfDiscoveryResource\n\n* Rename org.apache.druid.discovery.NodeType to NodeRole. Refactor CuratorDruidNodeDiscoveryProvider. Make SelfDiscoveryResource to listen to updates only about a single node (itself).\n\n* Extended docs\n\n* Fix brace\n\n* Remove redundant throws in Lifecycle.Handler.stop()\n\n* Import order\n\n* Remove unresolvable link\n\n* Address comments\n\n* tmp\n\n* tmp\n\n* Rollback docker changes\n\n* Remove extra .sh files\n\n* Move filter\n\n* Fix SecurityResourceFilterTest\n","date":"2019-12-08 23:47:58","modifiedFileCount":"54","status":"M","submitter":"Roman Leventov"},{"authorTime":"2021-09-09 13:09:22","codes":[{"authorDate":"2019-12-08 23:47:58","commitOrder":3,"curCode":"  static void bindChatHandler(Binder binder)\n  {\n    PolyBind.createChoice(\n        binder,\n        \"druid.indexer.task.chathandler.type\",\n        Key.get(ChatHandlerProvider.class),\n        Key.get(ServiceAnnouncingChatHandlerProvider.class)\n    );\n    final MapBinder<String, ChatHandlerProvider> handlerProviderBinder =\n        PolyBind.optionBinder(binder, Key.get(ChatHandlerProvider.class));\n    handlerProviderBinder\n        .addBinding(\"announce\")\n        .to(ServiceAnnouncingChatHandlerProvider.class)\n        .in(LazySingleton.class);\n    handlerProviderBinder\n        .addBinding(\"noop\")\n        .to(NoopChatHandlerProvider.class)\n        .in(LazySingleton.class);\n    binder.bind(ServiceAnnouncingChatHandlerProvider.class).in(LazySingleton.class);\n    binder.bind(NoopChatHandlerProvider.class).in(LazySingleton.class);\n  }\n","date":"2019-12-08 23:47:58","endLine":354,"groupId":"102387","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"bindChatHandler","params":"(Binderbinder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/82c6ded5ee8eed6bc2b593c26600d985d757a0.src","preCode":"  static void bindChatHandler(Binder binder)\n  {\n    PolyBind.createChoice(\n        binder,\n        \"druid.indexer.task.chathandler.type\",\n        Key.get(ChatHandlerProvider.class),\n        Key.get(ServiceAnnouncingChatHandlerProvider.class)\n    );\n    final MapBinder<String, ChatHandlerProvider> handlerProviderBinder =\n        PolyBind.optionBinder(binder, Key.get(ChatHandlerProvider.class));\n    handlerProviderBinder\n        .addBinding(\"announce\")\n        .to(ServiceAnnouncingChatHandlerProvider.class)\n        .in(LazySingleton.class);\n    handlerProviderBinder\n        .addBinding(\"noop\")\n        .to(NoopChatHandlerProvider.class)\n        .in(LazySingleton.class);\n    binder.bind(ServiceAnnouncingChatHandlerProvider.class).in(LazySingleton.class);\n    binder.bind(NoopChatHandlerProvider.class).in(LazySingleton.class);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/CliPeon.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"N"},{"authorDate":"2021-09-09 13:09:22","commitOrder":3,"curCode":"  private static void configureTaskActionClient(Binder binder)\n  {\n    PolyBind.createChoice(\n        binder,\n        \"druid.peon.mode\",\n        Key.get(TaskActionClientFactory.class),\n        Key.get(RemoteTaskActionClientFactory.class)\n    );\n    final MapBinder<String, TaskActionClientFactory> taskActionBinder =\n        PolyBind.optionBinder(binder, Key.get(TaskActionClientFactory.class));\n    taskActionBinder\n        .addBinding(\"local\")\n        .to(LocalTaskActionClientFactory.class)\n        .in(LazySingleton.class);\n    \r\n    JsonConfigProvider.bind(binder, \"druid.indexer.storage\", TaskStorageConfig.class);\n    binder.bind(TaskStorage.class).to(HeapMemoryTaskStorage.class).in(LazySingleton.class);\n    binder.bind(TaskActionToolbox.class).in(LazySingleton.class);\n    binder.bind(IndexerMetadataStorageCoordinator.class)\n          .to(IndexerSQLMetadataStorageCoordinator.class)\n          .in(LazySingleton.class);\n    taskActionBinder\n        .addBinding(\"remote\")\n        .to(RemoteTaskActionClientFactory.class)\n        .in(LazySingleton.class);\n\n    binder.bind(NodeRole.class).annotatedWith(Self.class).toInstance(NodeRole.PEON);\n    Multibinder.newSetBinder(binder, NodeRole.class, Self.class).addBinding().toInstance(NodeRole.PEON);\n  }\n","date":"2021-09-09 13:09:22","endLine":421,"groupId":"102387","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"configureTaskActionClient","params":"(Binderbinder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5b/45315237eb94974ec86a2b60f3f27e35ae3447.src","preCode":"  private static void configureTaskActionClient(Binder binder)\n  {\n    PolyBind.createChoice(\n        binder,\n        \"druid.peon.mode\",\n        Key.get(TaskActionClientFactory.class),\n        Key.get(RemoteTaskActionClientFactory.class)\n    );\n    final MapBinder<String, TaskActionClientFactory> taskActionBinder =\n        PolyBind.optionBinder(binder, Key.get(TaskActionClientFactory.class));\n    taskActionBinder\n        .addBinding(\"local\")\n        .to(LocalTaskActionClientFactory.class)\n        .in(LazySingleton.class);\n    \r\n    JsonConfigProvider.bind(binder, \"druid.indexer.storage\", TaskStorageConfig.class);\n    binder.bind(TaskStorage.class).to(HeapMemoryTaskStorage.class).in(LazySingleton.class);\n    binder.bind(TaskActionToolbox.class).in(LazySingleton.class);\n    binder.bind(IndexerMetadataStorageCoordinator.class)\n          .to(IndexerSQLMetadataStorageCoordinator.class)\n          .in(LazySingleton.class);\n    taskActionBinder\n        .addBinding(\"remote\")\n        .to(RemoteTaskActionClientFactory.class)\n        .in(LazySingleton.class);\n\n    binder.bind(NodeRole.class).annotatedWith(Self.class).toInstance(NodeRole.PEON);\n  }\n","realPath":"services/src/main/java/org/apache/druid/cli/CliPeon.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"M"}],"commitId":"3c46577eecf08526fe1612f384f3674afc909185","commitMessage":"@@@Fix moving average extension loading in middle manager and overlord (#11662)\n\n","date":"2021-09-09 13:09:22","modifiedFileCount":"4","status":"M","submitter":"Rohan Garg"}]
