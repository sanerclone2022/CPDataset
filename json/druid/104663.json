[{"authorTime":"2019-09-24 12:08:36","codes":[{"authorDate":"2019-09-24 12:08:36","commitOrder":1,"curCode":"  public Map<String, Object> doGetRowStats()\n  {\n    Map<String, Object> returnMap = new HashMap<>();\n    Map<String, Object> totalsMap = new HashMap<>();\n    Map<String, Object> averagesMap = new HashMap<>();\n\n    totalsMap.put(\n        RowIngestionMeters.BUILD_SEGMENTS,\n        rowIngestionMeters.getTotals()\n    );\n    averagesMap.put(\n        RowIngestionMeters.BUILD_SEGMENTS,\n        rowIngestionMeters.getMovingAverages()\n    );\n\n    returnMap.put(\"movingAverages\", averagesMap);\n    returnMap.put(\"totals\", totalsMap);\n    return returnMap;\n  }\n","date":"2019-09-24 12:08:36","endLine":1509,"groupId":"8735","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doGetRowStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3d/256ffba41848c8fc31328cb9f130580e00ced0.src","preCode":"  public Map<String, Object> doGetRowStats()\n  {\n    Map<String, Object> returnMap = new HashMap<>();\n    Map<String, Object> totalsMap = new HashMap<>();\n    Map<String, Object> averagesMap = new HashMap<>();\n\n    totalsMap.put(\n        RowIngestionMeters.BUILD_SEGMENTS,\n        rowIngestionMeters.getTotals()\n    );\n    averagesMap.put(\n        RowIngestionMeters.BUILD_SEGMENTS,\n        rowIngestionMeters.getMovingAverages()\n    );\n\n    returnMap.put(\"movingAverages\", averagesMap);\n    returnMap.put(\"totals\", totalsMap);\n    return returnMap;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/SeekableStreamIndexTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1491,"status":"B"},{"authorDate":"2019-09-24 12:08:36","commitOrder":1,"curCode":"  private Map<String, Object> doGetRowStats(String full)\n  {\n    Map<String, Object> returnMap = new HashMap<>();\n    Map<String, Object> totalsMap = new HashMap<>();\n    Map<String, Object> averagesMap = new HashMap<>();\n\n    boolean needsDeterminePartitions = false;\n    boolean needsBuildSegments = false;\n\n    if (full != null) {\n      needsDeterminePartitions = true;\n      needsBuildSegments = true;\n    } else {\n      switch (ingestionState) {\n        case DETERMINE_PARTITIONS:\n          needsDeterminePartitions = true;\n          break;\n        case BUILD_SEGMENTS:\n        case COMPLETED:\n          needsBuildSegments = true;\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (needsDeterminePartitions) {\n      totalsMap.put(\n          RowIngestionMeters.DETERMINE_PARTITIONS,\n          determinePartitionsMeters.getTotals()\n      );\n      averagesMap.put(\n          RowIngestionMeters.DETERMINE_PARTITIONS,\n          determinePartitionsMeters.getMovingAverages()\n      );\n    }\n\n    if (needsBuildSegments) {\n      totalsMap.put(\n          RowIngestionMeters.BUILD_SEGMENTS,\n          buildSegmentsMeters.getTotals()\n      );\n      averagesMap.put(\n          RowIngestionMeters.BUILD_SEGMENTS,\n          buildSegmentsMeters.getMovingAverages()\n      );\n    }\n\n    returnMap.put(\"totals\", totalsMap);\n    returnMap.put(\"movingAverages\", averagesMap);\n    return returnMap;\n  }\n","date":"2019-09-24 12:08:36","endLine":393,"groupId":"8735","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doGetRowStats","params":"(Stringfull)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ae/9593ee779958824559230bc5289606b4597853.src","preCode":"  private Map<String, Object> doGetRowStats(String full)\n  {\n    Map<String, Object> returnMap = new HashMap<>();\n    Map<String, Object> totalsMap = new HashMap<>();\n    Map<String, Object> averagesMap = new HashMap<>();\n\n    boolean needsDeterminePartitions = false;\n    boolean needsBuildSegments = false;\n\n    if (full != null) {\n      needsDeterminePartitions = true;\n      needsBuildSegments = true;\n    } else {\n      switch (ingestionState) {\n        case DETERMINE_PARTITIONS:\n          needsDeterminePartitions = true;\n          break;\n        case BUILD_SEGMENTS:\n        case COMPLETED:\n          needsBuildSegments = true;\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (needsDeterminePartitions) {\n      totalsMap.put(\n          RowIngestionMeters.DETERMINE_PARTITIONS,\n          determinePartitionsMeters.getTotals()\n      );\n      averagesMap.put(\n          RowIngestionMeters.DETERMINE_PARTITIONS,\n          determinePartitionsMeters.getMovingAverages()\n      );\n    }\n\n    if (needsBuildSegments) {\n      totalsMap.put(\n          RowIngestionMeters.BUILD_SEGMENTS,\n          buildSegmentsMeters.getTotals()\n      );\n      averagesMap.put(\n          RowIngestionMeters.BUILD_SEGMENTS,\n          buildSegmentsMeters.getMovingAverages()\n      );\n    }\n\n    returnMap.put(\"totals\", totalsMap);\n    returnMap.put(\"movingAverages\", averagesMap);\n    return returnMap;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"B"}],"commitId":"f2a444321b6d356eaaff7954bc63988f885d0fc3","commitMessage":"@@@Added live reports for Kafka and Native batch task (#8557)\n\n* Added live reports for Kafka and Native batch task\n\n* Removed unused local variables\n\n* Added the missing unit test\n\n* Refine unit test logic.  add implementation for HttpRemoteTaskRunner\n\n* checksytle fixes\n\n* Update doc descriptions for updated API\n\n* remove unnecessary files\n\n* Fix spellcheck complaints\n\n* More details for api descriptions\n","date":"2019-09-24 12:08:36","modifiedFileCount":"7","status":"B","submitter":"Rye"},{"authorTime":"2021-09-17 02:58:11","codes":[{"authorDate":"2019-09-24 12:08:36","commitOrder":2,"curCode":"  public Map<String, Object> doGetRowStats()\n  {\n    Map<String, Object> returnMap = new HashMap<>();\n    Map<String, Object> totalsMap = new HashMap<>();\n    Map<String, Object> averagesMap = new HashMap<>();\n\n    totalsMap.put(\n        RowIngestionMeters.BUILD_SEGMENTS,\n        rowIngestionMeters.getTotals()\n    );\n    averagesMap.put(\n        RowIngestionMeters.BUILD_SEGMENTS,\n        rowIngestionMeters.getMovingAverages()\n    );\n\n    returnMap.put(\"movingAverages\", averagesMap);\n    returnMap.put(\"totals\", totalsMap);\n    return returnMap;\n  }\n","date":"2019-09-24 12:08:36","endLine":1509,"groupId":"104663","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doGetRowStats","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3d/256ffba41848c8fc31328cb9f130580e00ced0.src","preCode":"  public Map<String, Object> doGetRowStats()\n  {\n    Map<String, Object> returnMap = new HashMap<>();\n    Map<String, Object> totalsMap = new HashMap<>();\n    Map<String, Object> averagesMap = new HashMap<>();\n\n    totalsMap.put(\n        RowIngestionMeters.BUILD_SEGMENTS,\n        rowIngestionMeters.getTotals()\n    );\n    averagesMap.put(\n        RowIngestionMeters.BUILD_SEGMENTS,\n        rowIngestionMeters.getMovingAverages()\n    );\n\n    returnMap.put(\"movingAverages\", averagesMap);\n    returnMap.put(\"totals\", totalsMap);\n    return returnMap;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/SeekableStreamIndexTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1491,"status":"N"},{"authorDate":"2021-09-17 02:58:11","commitOrder":2,"curCode":"  public Map<String, Object> doGetRowStats(String full)\n  {\n    Map<String, Object> returnMap = new HashMap<>();\n    Map<String, Object> totalsMap = new HashMap<>();\n    Map<String, Object> averagesMap = new HashMap<>();\n\n    boolean needsDeterminePartitions = false;\n    boolean needsBuildSegments = false;\n\n    if (full != null) {\n      needsDeterminePartitions = true;\n      needsBuildSegments = true;\n    } else {\n      switch (ingestionState) {\n        case DETERMINE_PARTITIONS:\n          needsDeterminePartitions = true;\n          break;\n        case BUILD_SEGMENTS:\n        case COMPLETED:\n          needsBuildSegments = true;\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (needsDeterminePartitions) {\n      totalsMap.put(\n          RowIngestionMeters.DETERMINE_PARTITIONS,\n          determinePartitionsMeters.getTotals()\n      );\n      averagesMap.put(\n          RowIngestionMeters.DETERMINE_PARTITIONS,\n          determinePartitionsMeters.getMovingAverages()\n      );\n    }\n\n    if (needsBuildSegments) {\n      totalsMap.put(\n          RowIngestionMeters.BUILD_SEGMENTS,\n          buildSegmentsMeters.getTotals()\n      );\n      averagesMap.put(\n          RowIngestionMeters.BUILD_SEGMENTS,\n          buildSegmentsMeters.getMovingAverages()\n      );\n    }\n\n    returnMap.put(\"totals\", totalsMap);\n    returnMap.put(\"movingAverages\", averagesMap);\n    return returnMap;\n  }\n","date":"2021-09-17 02:58:11","endLine":387,"groupId":"104663","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doGetRowStats","params":"(Stringfull)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f2/2c2a0f06827705022bd8ede7b11bea1bb86937.src","preCode":"  private Map<String, Object> doGetRowStats(String full)\n  {\n    Map<String, Object> returnMap = new HashMap<>();\n    Map<String, Object> totalsMap = new HashMap<>();\n    Map<String, Object> averagesMap = new HashMap<>();\n\n    boolean needsDeterminePartitions = false;\n    boolean needsBuildSegments = false;\n\n    if (full != null) {\n      needsDeterminePartitions = true;\n      needsBuildSegments = true;\n    } else {\n      switch (ingestionState) {\n        case DETERMINE_PARTITIONS:\n          needsDeterminePartitions = true;\n          break;\n        case BUILD_SEGMENTS:\n        case COMPLETED:\n          needsBuildSegments = true;\n          break;\n        default:\n          break;\n      }\n    }\n\n    if (needsDeterminePartitions) {\n      totalsMap.put(\n          RowIngestionMeters.DETERMINE_PARTITIONS,\n          determinePartitionsMeters.getTotals()\n      );\n      averagesMap.put(\n          RowIngestionMeters.DETERMINE_PARTITIONS,\n          determinePartitionsMeters.getMovingAverages()\n      );\n    }\n\n    if (needsBuildSegments) {\n      totalsMap.put(\n          RowIngestionMeters.BUILD_SEGMENTS,\n          buildSegmentsMeters.getTotals()\n      );\n      averagesMap.put(\n          RowIngestionMeters.BUILD_SEGMENTS,\n          buildSegmentsMeters.getMovingAverages()\n      );\n    }\n\n    returnMap.put(\"totals\", totalsMap);\n    returnMap.put(\"movingAverages\", averagesMap);\n    return returnMap;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"}],"commitId":"22b41ddbbfe2b07b085e295ba171bcdc07e04900","commitMessage":"@@@Task reports for parallel task: single phase and sequential mode (#11688)\n\n* Task reports for parallel task: single phase and sequential mode\n\n* Address comments\n\n* Add null check for currentSubTaskHolder","date":"2021-09-17 02:58:11","modifiedFileCount":"13","status":"M","submitter":"Jonathan Wei"}]
