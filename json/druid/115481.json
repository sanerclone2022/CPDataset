[{"authorTime":"2019-06-20 04:57:37","codes":[{"authorDate":"2019-06-20 04:57:37","commitOrder":1,"curCode":"    ExprEval doApply(ExprEval arrayExpr, ExprEval scalarExpr)\n    {\n      final Object[] array = arrayExpr.asArray();\n\n      switch (scalarExpr.type()) {\n        case STRING:\n        case LONG:\n        case DOUBLE:\n          int index = -1;\n          for (int i = 0; i < array.length; i++) {\n            if (Objects.equals(array[i], scalarExpr.value())) {\n              index = i;\n              break;\n            }\n          }\n          return index < 0 ? ExprEval.of(null) : ExprEval.ofLong(index);\n        default:\n          throw new IAE(\"Function[%s] 2nd argument must be a a scalar type\", name());\n      }\n    }\n","date":"2019-06-20 04:57:37","endLine":1896,"groupId":"18371","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doApply","params":"(ExprEvalarrayExpr@ExprEvalscalarExpr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/65/643e226d77166dc243436ca671c0ed82b04958.src","preCode":"    ExprEval doApply(ExprEval arrayExpr, ExprEval scalarExpr)\n    {\n      final Object[] array = arrayExpr.asArray();\n\n      switch (scalarExpr.type()) {\n        case STRING:\n        case LONG:\n        case DOUBLE:\n          int index = -1;\n          for (int i = 0; i < array.length; i++) {\n            if (Objects.equals(array[i], scalarExpr.value())) {\n              index = i;\n              break;\n            }\n          }\n          return index < 0 ? ExprEval.of(null) : ExprEval.ofLong(index);\n        default:\n          throw new IAE(\"Function[%s] 2nd argument must be a a scalar type\", name());\n      }\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Function.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1877,"status":"B"},{"authorDate":"2019-06-20 04:57:37","commitOrder":1,"curCode":"    ExprEval doApply(ExprEval arrayExpr, ExprEval scalarExpr)\n    {\n      final Object[] array = arrayExpr.asArray();\n      switch (scalarExpr.type()) {\n        case STRING:\n        case LONG:\n        case DOUBLE:\n          int index = -1;\n          for (int i = 0; i < array.length; i++) {\n            if (Objects.equals(array[i], scalarExpr.value())) {\n              index = i;\n              break;\n            }\n          }\n          return index < 0 ? ExprEval.of(null) : ExprEval.ofLong(index + 1);\n        default:\n          throw new IAE(\"Function[%s] 2nd argument must be a a scalar type\", name());\n      }\n    }\n","date":"2019-06-20 04:57:37","endLine":1926,"groupId":"18371","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doApply","params":"(ExprEvalarrayExpr@ExprEvalscalarExpr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/65/643e226d77166dc243436ca671c0ed82b04958.src","preCode":"    ExprEval doApply(ExprEval arrayExpr, ExprEval scalarExpr)\n    {\n      final Object[] array = arrayExpr.asArray();\n      switch (scalarExpr.type()) {\n        case STRING:\n        case LONG:\n        case DOUBLE:\n          int index = -1;\n          for (int i = 0; i < array.length; i++) {\n            if (Objects.equals(array[i], scalarExpr.value())) {\n              index = i;\n              break;\n            }\n          }\n          return index < 0 ? ExprEval.of(null) : ExprEval.ofLong(index + 1);\n        default:\n          throw new IAE(\"Function[%s] 2nd argument must be a a scalar type\", name());\n      }\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Function.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1908,"status":"B"}],"commitId":"494b8ebe56308fe69c2a758f80f1ae56bf17d54d","commitMessage":"@@@multi-value string column support for expressions (#7588)\n\n* array support for expression language for multi-value string columns\n\n* fix tests?\n\n* fixes\n\n* more tests\n\n* fixes\n\n* cleanup\n\n* more better.  more test\n\n* ignore inspection\n\n* license\n\n* license fix\n\n* inspection\n\n* remove dumb import\n\n* more better\n\n* some comments\n\n* add expr rewrite for arrayfn args for more magic.  tests\n\n* test stuff\n\n* more tests\n\n* fix test\n\n* fix test\n\n* castfunc can deal with arrays\n\n* needs more empty array\n\n* more tests.  make cast to long array more forgiving\n\n* refactor\n\n* simplify ExprMacro Expr implementations with base classes in core\n\n* oops\n\n* more test\n\n* use Shuttle for Parser.flatten.  javadoc.  cleanup\n\n* fixes and more tests\n\n* unused import\n\n* fixes\n\n* javadocs.  cleanup.  refactors\n\n* fix imports\n\n* more javadoc\n\n* more javadoc\n\n* more\n\n* more javadocs.  nonnullbydefault.  minor refactor\n\n* markdown fix\n\n* adjustments\n\n* more doc\n\n* move initial filter out\n\n* docs\n\n* map empty arg lambda.  apply function argument validation\n\n* check function args at parse time instead of eval time\n\n* more immutable\n\n* more more immutable\n\n* clarify grammar\n\n* fix docs\n\n* empty array is string test.  we need a way to make arrays better maybe in the future.  or define empty arrays as other types..\n","date":"2019-06-20 04:57:37","modifiedFileCount":"43","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-07-03 12:39:26","codes":[{"authorDate":"2019-07-03 12:39:26","commitOrder":2,"curCode":"    ExprEval doApply(ExprEval arrayExpr, ExprEval scalarExpr)\n    {\n      final Object[] array = arrayExpr.asArray();\n\n      switch (scalarExpr.type()) {\n        case STRING:\n        case LONG:\n        case DOUBLE:\n          int index = -1;\n          for (int i = 0; i < array.length; i++) {\n            if (Objects.equals(array[i], scalarExpr.value())) {\n              index = i;\n              break;\n            }\n          }\n          return index < 0 ? ExprEval.ofLong(NullHandling.replaceWithDefault() ? -1 : null) : ExprEval.ofLong(index);\n        default:\n          throw new IAE(\"Function[%s] 2nd argument must be a a scalar type\", name());\n      }\n    }\n","date":"2019-07-03 12:39:26","endLine":1998,"groupId":"115481","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doApply","params":"(ExprEvalarrayExpr@ExprEvalscalarExpr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/84/c73e7ea1b65a1bf75c295e8a60764f3cfcd1af.src","preCode":"    ExprEval doApply(ExprEval arrayExpr, ExprEval scalarExpr)\n    {\n      final Object[] array = arrayExpr.asArray();\n\n      switch (scalarExpr.type()) {\n        case STRING:\n        case LONG:\n        case DOUBLE:\n          int index = -1;\n          for (int i = 0; i < array.length; i++) {\n            if (Objects.equals(array[i], scalarExpr.value())) {\n              index = i;\n              break;\n            }\n          }\n          return index < 0 ? ExprEval.of(null) : ExprEval.ofLong(index);\n        default:\n          throw new IAE(\"Function[%s] 2nd argument must be a a scalar type\", name());\n      }\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Function.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1979,"status":"M"},{"authorDate":"2019-07-03 12:39:26","commitOrder":2,"curCode":"    ExprEval doApply(ExprEval arrayExpr, ExprEval scalarExpr)\n    {\n      final Object[] array = arrayExpr.asArray();\n      switch (scalarExpr.type()) {\n        case STRING:\n        case LONG:\n        case DOUBLE:\n          int index = -1;\n          for (int i = 0; i < array.length; i++) {\n            if (Objects.equals(array[i], scalarExpr.value())) {\n              index = i;\n              break;\n            }\n          }\n          return index < 0 ? ExprEval.ofLong(NullHandling.replaceWithDefault() ? -1 : null) : ExprEval.ofLong(index + 1);\n        default:\n          throw new IAE(\"Function[%s] 2nd argument must be a a scalar type\", name());\n      }\n    }\n","date":"2019-07-03 12:39:26","endLine":2028,"groupId":"115481","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doApply","params":"(ExprEvalarrayExpr@ExprEvalscalarExpr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/84/c73e7ea1b65a1bf75c295e8a60764f3cfcd1af.src","preCode":"    ExprEval doApply(ExprEval arrayExpr, ExprEval scalarExpr)\n    {\n      final Object[] array = arrayExpr.asArray();\n      switch (scalarExpr.type()) {\n        case STRING:\n        case LONG:\n        case DOUBLE:\n          int index = -1;\n          for (int i = 0; i < array.length; i++) {\n            if (Objects.equals(array[i], scalarExpr.value())) {\n              index = i;\n              break;\n            }\n          }\n          return index < 0 ? ExprEval.of(null) : ExprEval.ofLong(index + 1);\n        default:\n          throw new IAE(\"Function[%s] 2nd argument must be a a scalar type\", name());\n      }\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Function.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2010,"status":"M"}],"commitId":"c556d44a19b6daac1bb9070ed7fe9325fd595545","commitMessage":"@@@more sql support for expression array functions (#7974)\n\n* more sql support for expression array functions\n\n* prepend/slice\n\n* doc fixes\n\n* fix imports\n\n* fix tests\n\n* add null numeric expr for proper conversions between ExprEval and Expr and back to ExprEval\n\n* re-arrange\n\n* imports :(\n\n* add append/prepend test\n","date":"2019-07-03 12:39:26","modifiedFileCount":"7","status":"M","submitter":"Clint Wylie"}]
