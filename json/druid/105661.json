[{"authorTime":"2020-09-15 10:29:35","codes":[{"authorDate":"2020-09-15 10:29:35","commitOrder":1,"curCode":"  public SingleValueDimensionVectorSelector makeSingleValueVectorDimensionSelector(\n      DimensionSpec dimensionSpec,\n      VectorColumnSelectorFactory factory\n  )\n  {\n    Assert.assertEquals(outputName, dimensionSpec.getOutputName());\n    return new SingleValueDimensionVectorSelector()\n    {\n      private final VectorSizeInspector inspector = factory.getVectorSizeInspector();\n      private final int[] rowVector = new int[inspector.getMaxVectorSize()];\n\n      @Override\n      public int[] getRowVector()\n      {\n\n        return rowVector;\n      }\n\n      @Override\n      public int getValueCardinality()\n      {\n        return dictionaryEncoded ? 1 : CARDINALITY_UNKNOWN;\n      }\n\n      @Nullable\n      @Override\n      public String lookupName(int id)\n      {\n        return \"2\";\n      }\n\n      @Override\n      public boolean nameLookupPossibleInAdvance()\n      {\n        return dictionaryEncoded;\n      }\n\n      @Nullable\n      @Override\n      public IdLookup idLookup()\n      {\n        return null;\n      }\n\n      @Override\n      public int getMaxVectorSize()\n      {\n        return inspector.getMaxVectorSize();\n      }\n\n      @Override\n      public int getCurrentVectorSize()\n      {\n        return inspector.getCurrentVectorSize();\n      }\n    };\n  }\n","date":"2020-09-15 10:29:35","endLine":148,"groupId":"297","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"makeSingleValueVectorDimensionSelector","params":"(DimensionSpecdimensionSpec@VectorColumnSelectorFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/78/d031bb520011f17bf5958cf22e2ffbf80c5d0b.src","preCode":"  public SingleValueDimensionVectorSelector makeSingleValueVectorDimensionSelector(\n      DimensionSpec dimensionSpec,\n      VectorColumnSelectorFactory factory\n  )\n  {\n    Assert.assertEquals(outputName, dimensionSpec.getOutputName());\n    return new SingleValueDimensionVectorSelector()\n    {\n      private final VectorSizeInspector inspector = factory.getVectorSizeInspector();\n      private final int[] rowVector = new int[inspector.getMaxVectorSize()];\n\n      @Override\n      public int[] getRowVector()\n      {\n\n        return rowVector;\n      }\n\n      @Override\n      public int getValueCardinality()\n      {\n        return dictionaryEncoded ? 1 : CARDINALITY_UNKNOWN;\n      }\n\n      @Nullable\n      @Override\n      public String lookupName(int id)\n      {\n        return \"2\";\n      }\n\n      @Override\n      public boolean nameLookupPossibleInAdvance()\n      {\n        return dictionaryEncoded;\n      }\n\n      @Nullable\n      @Override\n      public IdLookup idLookup()\n      {\n        return null;\n      }\n\n      @Override\n      public int getMaxVectorSize()\n      {\n        return inspector.getMaxVectorSize();\n      }\n\n      @Override\n      public int getCurrentVectorSize()\n      {\n        return inspector.getCurrentVectorSize();\n      }\n    };\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/AlwaysTwoVectorizedVirtualColumn.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"},{"authorDate":"2020-09-15 10:29:35","commitOrder":1,"curCode":"  public MultiValueDimensionVectorSelector makeMultiValueVectorDimensionSelector(\n      DimensionSpec dimensionSpec,\n      VectorColumnSelectorFactory factory\n  )\n  {\n    Assert.assertEquals(outputName, dimensionSpec.getOutputName());\n    final IndexedInts[] rowVector = new IndexedInts[factory.getVectorSizeInspector().getMaxVectorSize()];\n    Arrays.fill(rowVector, new ArrayBasedIndexedInts(new int[]{0, 0}));\n    return new MultiValueDimensionVectorSelector()\n    {\n      private final VectorSizeInspector inspector = factory.getVectorSizeInspector();\n\n      @Override\n      public IndexedInts[] getRowVector()\n      {\n        return rowVector;\n      }\n\n      @Override\n      public int getValueCardinality()\n      {\n        return dictionaryEncoded ? 1 : CARDINALITY_UNKNOWN;\n      }\n\n      @Nullable\n      @Override\n      public String lookupName(int id)\n      {\n        return \"2\";\n      }\n\n      @Override\n      public boolean nameLookupPossibleInAdvance()\n      {\n        return dictionaryEncoded;\n      }\n\n      @Nullable\n      @Override\n      public IdLookup idLookup()\n      {\n        return null;\n      }\n\n      @Override\n      public int getMaxVectorSize()\n      {\n        return inspector.getMaxVectorSize();\n      }\n\n      @Override\n      public int getCurrentVectorSize()\n      {\n        return inspector.getCurrentVectorSize();\n      }\n    };\n  }\n","date":"2020-09-15 10:29:35","endLine":207,"groupId":"297","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"makeMultiValueVectorDimensionSelector","params":"(DimensionSpecdimensionSpec@VectorColumnSelectorFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/78/d031bb520011f17bf5958cf22e2ffbf80c5d0b.src","preCode":"  public MultiValueDimensionVectorSelector makeMultiValueVectorDimensionSelector(\n      DimensionSpec dimensionSpec,\n      VectorColumnSelectorFactory factory\n  )\n  {\n    Assert.assertEquals(outputName, dimensionSpec.getOutputName());\n    final IndexedInts[] rowVector = new IndexedInts[factory.getVectorSizeInspector().getMaxVectorSize()];\n    Arrays.fill(rowVector, new ArrayBasedIndexedInts(new int[]{0, 0}));\n    return new MultiValueDimensionVectorSelector()\n    {\n      private final VectorSizeInspector inspector = factory.getVectorSizeInspector();\n\n      @Override\n      public IndexedInts[] getRowVector()\n      {\n        return rowVector;\n      }\n\n      @Override\n      public int getValueCardinality()\n      {\n        return dictionaryEncoded ? 1 : CARDINALITY_UNKNOWN;\n      }\n\n      @Nullable\n      @Override\n      public String lookupName(int id)\n      {\n        return \"2\";\n      }\n\n      @Override\n      public boolean nameLookupPossibleInAdvance()\n      {\n        return dictionaryEncoded;\n      }\n\n      @Nullable\n      @Override\n      public IdLookup idLookup()\n      {\n        return null;\n      }\n\n      @Override\n      public int getMaxVectorSize()\n      {\n        return inspector.getMaxVectorSize();\n      }\n\n      @Override\n      public int getCurrentVectorSize()\n      {\n        return inspector.getCurrentVectorSize();\n      }\n    };\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/AlwaysTwoVectorizedVirtualColumn.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"B"}],"commitId":"e012d5c41bbc5a056e3c99bf6073ac19ba523c7d","commitMessage":"@@@allow vectorized query engines to utilize vectorized virtual columns (#10388)\n\n* allow vectorized query engines to utilize vectorized virtual column implementations\n\n* javadoc.  refactor.  checkstyle\n\n* intellij inspection and more javadoc\n\n* better\n\n* review stuffs\n\n* fix incorrect refactor.  thanks tests\n\n* minor adjustments","date":"2020-09-15 10:29:35","modifiedFileCount":"7","status":"B","submitter":"Clint Wylie"},{"authorTime":"2021-01-14 04:44:56","codes":[{"authorDate":"2021-01-14 04:44:56","commitOrder":2,"curCode":"  public SingleValueDimensionVectorSelector makeSingleValueVectorDimensionSelector(\n      DimensionSpec dimensionSpec,\n      VectorColumnSelectorFactory factory\n  )\n  {\n    Assert.assertEquals(outputName, dimensionSpec.getOutputName());\n    return new SingleValueDimensionVectorSelector()\n    {\n      private final VectorSizeInspector inspector = factory.getReadableVectorInspector();\n      private final int[] rowVector = new int[inspector.getMaxVectorSize()];\n\n      @Override\n      public int[] getRowVector()\n      {\n\n        return rowVector;\n      }\n\n      @Override\n      public int getValueCardinality()\n      {\n        return dictionaryEncoded ? 1 : CARDINALITY_UNKNOWN;\n      }\n\n      @Nullable\n      @Override\n      public String lookupName(int id)\n      {\n        return \"2\";\n      }\n\n      @Override\n      public boolean nameLookupPossibleInAdvance()\n      {\n        return dictionaryEncoded;\n      }\n\n      @Nullable\n      @Override\n      public IdLookup idLookup()\n      {\n        return null;\n      }\n\n      @Override\n      public int getMaxVectorSize()\n      {\n        return inspector.getMaxVectorSize();\n      }\n\n      @Override\n      public int getCurrentVectorSize()\n      {\n        return inspector.getCurrentVectorSize();\n      }\n    };\n  }\n","date":"2021-01-14 04:44:56","endLine":160,"groupId":"105661","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"makeSingleValueVectorDimensionSelector","params":"(DimensionSpecdimensionSpec@VectorColumnSelectorFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/45/0b2b601f5f48a51596d5f699d0f56e62736d33.src","preCode":"  public SingleValueDimensionVectorSelector makeSingleValueVectorDimensionSelector(\n      DimensionSpec dimensionSpec,\n      VectorColumnSelectorFactory factory\n  )\n  {\n    Assert.assertEquals(outputName, dimensionSpec.getOutputName());\n    return new SingleValueDimensionVectorSelector()\n    {\n      private final VectorSizeInspector inspector = factory.getVectorSizeInspector();\n      private final int[] rowVector = new int[inspector.getMaxVectorSize()];\n\n      @Override\n      public int[] getRowVector()\n      {\n\n        return rowVector;\n      }\n\n      @Override\n      public int getValueCardinality()\n      {\n        return dictionaryEncoded ? 1 : CARDINALITY_UNKNOWN;\n      }\n\n      @Nullable\n      @Override\n      public String lookupName(int id)\n      {\n        return \"2\";\n      }\n\n      @Override\n      public boolean nameLookupPossibleInAdvance()\n      {\n        return dictionaryEncoded;\n      }\n\n      @Nullable\n      @Override\n      public IdLookup idLookup()\n      {\n        return null;\n      }\n\n      @Override\n      public int getMaxVectorSize()\n      {\n        return inspector.getMaxVectorSize();\n      }\n\n      @Override\n      public int getCurrentVectorSize()\n      {\n        return inspector.getCurrentVectorSize();\n      }\n    };\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/AlwaysTwoVectorizedVirtualColumn.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2021-01-14 04:44:56","commitOrder":2,"curCode":"  public MultiValueDimensionVectorSelector makeMultiValueVectorDimensionSelector(\n      DimensionSpec dimensionSpec,\n      VectorColumnSelectorFactory factory\n  )\n  {\n    Assert.assertEquals(outputName, dimensionSpec.getOutputName());\n    final IndexedInts[] rowVector = new IndexedInts[factory.getReadableVectorInspector().getMaxVectorSize()];\n    Arrays.fill(rowVector, new ArrayBasedIndexedInts(new int[]{0, 0}));\n    return new MultiValueDimensionVectorSelector()\n    {\n      private final VectorSizeInspector inspector = factory.getReadableVectorInspector();\n\n      @Override\n      public IndexedInts[] getRowVector()\n      {\n        return rowVector;\n      }\n\n      @Override\n      public int getValueCardinality()\n      {\n        return dictionaryEncoded ? 1 : CARDINALITY_UNKNOWN;\n      }\n\n      @Nullable\n      @Override\n      public String lookupName(int id)\n      {\n        return \"2\";\n      }\n\n      @Override\n      public boolean nameLookupPossibleInAdvance()\n      {\n        return dictionaryEncoded;\n      }\n\n      @Nullable\n      @Override\n      public IdLookup idLookup()\n      {\n        return null;\n      }\n\n      @Override\n      public int getMaxVectorSize()\n      {\n        return inspector.getMaxVectorSize();\n      }\n\n      @Override\n      public int getCurrentVectorSize()\n      {\n        return inspector.getCurrentVectorSize();\n      }\n    };\n  }\n","date":"2021-01-14 04:44:56","endLine":219,"groupId":"105661","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"makeMultiValueVectorDimensionSelector","params":"(DimensionSpecdimensionSpec@VectorColumnSelectorFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/45/0b2b601f5f48a51596d5f699d0f56e62736d33.src","preCode":"  public MultiValueDimensionVectorSelector makeMultiValueVectorDimensionSelector(\n      DimensionSpec dimensionSpec,\n      VectorColumnSelectorFactory factory\n  )\n  {\n    Assert.assertEquals(outputName, dimensionSpec.getOutputName());\n    final IndexedInts[] rowVector = new IndexedInts[factory.getVectorSizeInspector().getMaxVectorSize()];\n    Arrays.fill(rowVector, new ArrayBasedIndexedInts(new int[]{0, 0}));\n    return new MultiValueDimensionVectorSelector()\n    {\n      private final VectorSizeInspector inspector = factory.getVectorSizeInspector();\n\n      @Override\n      public IndexedInts[] getRowVector()\n      {\n        return rowVector;\n      }\n\n      @Override\n      public int getValueCardinality()\n      {\n        return dictionaryEncoded ? 1 : CARDINALITY_UNKNOWN;\n      }\n\n      @Nullable\n      @Override\n      public String lookupName(int id)\n      {\n        return \"2\";\n      }\n\n      @Override\n      public boolean nameLookupPossibleInAdvance()\n      {\n        return dictionaryEncoded;\n      }\n\n      @Nullable\n      @Override\n      public IdLookup idLookup()\n      {\n        return null;\n      }\n\n      @Override\n      public int getMaxVectorSize()\n      {\n        return inspector.getMaxVectorSize();\n      }\n\n      @Override\n      public int getCurrentVectorSize()\n      {\n        return inspector.getCurrentVectorSize();\n      }\n    };\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/AlwaysTwoVectorizedVirtualColumn.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"9362dc7968f02f4fad6b1821c529a8ee18bed8de","commitMessage":"@@@re-use expression vector evaluation results for the same offset in expression vector selectors (#10614)\n\n* cache expression selector results by associating vector expression bindings to underlying vector offset\n\n* better coverage.  fix floats\n\n* style\n\n* stupid bot\n\n* stupid me\n\n* more test\n\n* intellij threw me under the bus when it generated those junit methods\n\n* narrow interface instead of passing around offset","date":"2021-01-14 04:44:56","modifiedFileCount":"21","status":"M","submitter":"Clint Wylie"}]
