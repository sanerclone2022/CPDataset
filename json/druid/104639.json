[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testRunTask() throws Exception\n  {\n    Assert.assertTrue(\n        TestUtils.conditionValid(\n            new IndexingServiceCondition()\n            {\n              @Override\n              public boolean isValid()\n              {\n                try {\n                  return cf.checkExists().forPath(joiner.join(tasksPath, task.getId())) == null;\n                }\n                catch (Exception e) {\n                  return false;\n                }\n              }\n            }\n        )\n    );\n\n    cf.create()\n      .creatingParentsIfNeeded()\n      .forPath(joiner.join(tasksPath, task.getId()), jsonMapper.writeValueAsBytes(task));\n\n    Assert.assertTrue(\n        TestUtils.conditionValid(\n            new IndexingServiceCondition()\n            {\n              @Override\n              public boolean isValid()\n              {\n                try {\n                  final byte[] bytes = cf.getData().forPath(joiner.join(statusPath, task.getId()));\n                  final TaskAnnouncement announcement = jsonMapper.readValue(\n                      bytes,\n                      TaskAnnouncement.class\n                  );\n                  return announcement.getTaskStatus().isComplete();\n                }\n                catch (Exception e) {\n                  return false;\n                }\n              }\n            }\n        )\n    );\n\n    TaskAnnouncement taskAnnouncement = jsonMapper.readValue(\n        cf.getData().forPath(joiner.join(statusPath, task.getId())), TaskAnnouncement.class\n    );\n\n    Assert.assertEquals(task.getId(), taskAnnouncement.getTaskStatus().getId());\n    Assert.assertEquals(TaskState.SUCCESS, taskAnnouncement.getTaskStatus().getStatusCode());\n  }\n","date":"2018-08-31 00:56:26","endLine":273,"groupId":"14203","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ea/c46c5729206d26c70edcc1870244366f8b656e.src","preCode":"  public void testRunTask() throws Exception\n  {\n    Assert.assertTrue(\n        TestUtils.conditionValid(\n            new IndexingServiceCondition()\n            {\n              @Override\n              public boolean isValid()\n              {\n                try {\n                  return cf.checkExists().forPath(joiner.join(tasksPath, task.getId())) == null;\n                }\n                catch (Exception e) {\n                  return false;\n                }\n              }\n            }\n        )\n    );\n\n    cf.create()\n      .creatingParentsIfNeeded()\n      .forPath(joiner.join(tasksPath, task.getId()), jsonMapper.writeValueAsBytes(task));\n\n    Assert.assertTrue(\n        TestUtils.conditionValid(\n            new IndexingServiceCondition()\n            {\n              @Override\n              public boolean isValid()\n              {\n                try {\n                  final byte[] bytes = cf.getData().forPath(joiner.join(statusPath, task.getId()));\n                  final TaskAnnouncement announcement = jsonMapper.readValue(\n                      bytes,\n                      TaskAnnouncement.class\n                  );\n                  return announcement.getTaskStatus().isComplete();\n                }\n                catch (Exception e) {\n                  return false;\n                }\n              }\n            }\n        )\n    );\n\n    TaskAnnouncement taskAnnouncement = jsonMapper.readValue(\n        cf.getData().forPath(joiner.join(statusPath, task.getId())), TaskAnnouncement.class\n    );\n\n    Assert.assertEquals(task.getId(), taskAnnouncement.getTaskStatus().getId());\n    Assert.assertEquals(TaskState.SUCCESS, taskAnnouncement.getTaskStatus().getStatusCode());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/worker/WorkerTaskMonitorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testStatusAnnouncementsArePersistent() throws Exception\n  {\n    cf.create()\n      .creatingParentsIfNeeded()\n      .forPath(joiner.join(tasksPath, task.getId()), jsonMapper.writeValueAsBytes(task));\n\n    Assert.assertTrue(\n        TestUtils.conditionValid(\n            new IndexingServiceCondition()\n            {\n              @Override\n              public boolean isValid()\n              {\n                try {\n                  return cf.checkExists().forPath(joiner.join(statusPath, task.getId())) != null;\n                }\n                catch (Exception e) {\n                  return false;\n                }\n              }\n            }\n        )\n    );\n    \r\n    Assert.assertEquals(0, cf.checkExists().forPath(joiner.join(statusPath, task.getId())).getEphemeralOwner());\n\n  }\n","date":"2018-08-31 00:56:26","endLine":376,"groupId":"2151","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatusAnnouncementsArePersistent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ea/c46c5729206d26c70edcc1870244366f8b656e.src","preCode":"  public void testStatusAnnouncementsArePersistent() throws Exception\n  {\n    cf.create()\n      .creatingParentsIfNeeded()\n      .forPath(joiner.join(tasksPath, task.getId()), jsonMapper.writeValueAsBytes(task));\n\n    Assert.assertTrue(\n        TestUtils.conditionValid(\n            new IndexingServiceCondition()\n            {\n              @Override\n              public boolean isValid()\n              {\n                try {\n                  return cf.checkExists().forPath(joiner.join(statusPath, task.getId())) != null;\n                }\n                catch (Exception e) {\n                  return false;\n                }\n              }\n            }\n        )\n    );\n    \r\n    Assert.assertEquals(0, cf.checkExists().forPath(joiner.join(statusPath, task.getId())).getEphemeralOwner());\n\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/worker/WorkerTaskMonitorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":350,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":2,"curCode":"  public void testRunTask() throws Exception\n  {\n    Assert.assertTrue(\n        TestUtils.conditionValid(\n            new IndexingServiceCondition()\n            {\n              @Override\n              public boolean isValid()\n              {\n                try {\n                  return cf.checkExists().forPath(JOINER.join(TASKS_PATH, task.getId())) == null;\n                }\n                catch (Exception e) {\n                  return false;\n                }\n              }\n            }\n        )\n    );\n\n    cf.create()\n      .creatingParentsIfNeeded()\n      .forPath(JOINER.join(TASKS_PATH, task.getId()), jsonMapper.writeValueAsBytes(task));\n\n    Assert.assertTrue(\n        TestUtils.conditionValid(\n            new IndexingServiceCondition()\n            {\n              @Override\n              public boolean isValid()\n              {\n                try {\n                  final byte[] bytes = cf.getData().forPath(JOINER.join(STATUS_PATH, task.getId()));\n                  final TaskAnnouncement announcement = jsonMapper.readValue(\n                      bytes,\n                      TaskAnnouncement.class\n                  );\n                  return announcement.getTaskStatus().isComplete();\n                }\n                catch (Exception e) {\n                  return false;\n                }\n              }\n            }\n        )\n    );\n\n    TaskAnnouncement taskAnnouncement = jsonMapper.readValue(\n        cf.getData().forPath(JOINER.join(STATUS_PATH, task.getId())), TaskAnnouncement.class\n    );\n\n    Assert.assertEquals(task.getId(), taskAnnouncement.getTaskStatus().getId());\n    Assert.assertEquals(TaskState.SUCCESS, taskAnnouncement.getTaskStatus().getStatusCode());\n  }\n","date":"2019-08-23 18:13:54","endLine":261,"groupId":"104639","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRunTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a5/bddbea4a459ea68aa26bd421eb1756a40ffed1.src","preCode":"  public void testRunTask() throws Exception\n  {\n    Assert.assertTrue(\n        TestUtils.conditionValid(\n            new IndexingServiceCondition()\n            {\n              @Override\n              public boolean isValid()\n              {\n                try {\n                  return cf.checkExists().forPath(joiner.join(tasksPath, task.getId())) == null;\n                }\n                catch (Exception e) {\n                  return false;\n                }\n              }\n            }\n        )\n    );\n\n    cf.create()\n      .creatingParentsIfNeeded()\n      .forPath(joiner.join(tasksPath, task.getId()), jsonMapper.writeValueAsBytes(task));\n\n    Assert.assertTrue(\n        TestUtils.conditionValid(\n            new IndexingServiceCondition()\n            {\n              @Override\n              public boolean isValid()\n              {\n                try {\n                  final byte[] bytes = cf.getData().forPath(joiner.join(statusPath, task.getId()));\n                  final TaskAnnouncement announcement = jsonMapper.readValue(\n                      bytes,\n                      TaskAnnouncement.class\n                  );\n                  return announcement.getTaskStatus().isComplete();\n                }\n                catch (Exception e) {\n                  return false;\n                }\n              }\n            }\n        )\n    );\n\n    TaskAnnouncement taskAnnouncement = jsonMapper.readValue(\n        cf.getData().forPath(joiner.join(statusPath, task.getId())), TaskAnnouncement.class\n    );\n\n    Assert.assertEquals(task.getId(), taskAnnouncement.getTaskStatus().getId());\n    Assert.assertEquals(TaskState.SUCCESS, taskAnnouncement.getTaskStatus().getStatusCode());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/worker/WorkerTaskMonitorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":2,"curCode":"  public void testStatusAnnouncementsArePersistent() throws Exception\n  {\n    cf.create()\n      .creatingParentsIfNeeded()\n      .forPath(JOINER.join(TASKS_PATH, task.getId()), jsonMapper.writeValueAsBytes(task));\n\n    Assert.assertTrue(\n        TestUtils.conditionValid(\n            new IndexingServiceCondition()\n            {\n              @Override\n              public boolean isValid()\n              {\n                try {\n                  return cf.checkExists().forPath(JOINER.join(STATUS_PATH, task.getId())) != null;\n                }\n                catch (Exception e) {\n                  return false;\n                }\n              }\n            }\n        )\n    );\n    \r\n    Assert.assertEquals(0, cf.checkExists().forPath(JOINER.join(STATUS_PATH, task.getId())).getEphemeralOwner());\n\n  }\n","date":"2019-08-23 18:13:54","endLine":364,"groupId":"104639","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStatusAnnouncementsArePersistent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a5/bddbea4a459ea68aa26bd421eb1756a40ffed1.src","preCode":"  public void testStatusAnnouncementsArePersistent() throws Exception\n  {\n    cf.create()\n      .creatingParentsIfNeeded()\n      .forPath(joiner.join(tasksPath, task.getId()), jsonMapper.writeValueAsBytes(task));\n\n    Assert.assertTrue(\n        TestUtils.conditionValid(\n            new IndexingServiceCondition()\n            {\n              @Override\n              public boolean isValid()\n              {\n                try {\n                  return cf.checkExists().forPath(joiner.join(statusPath, task.getId())) != null;\n                }\n                catch (Exception e) {\n                  return false;\n                }\n              }\n            }\n        )\n    );\n    \r\n    Assert.assertEquals(0, cf.checkExists().forPath(joiner.join(statusPath, task.getId())).getEphemeralOwner());\n\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/worker/WorkerTaskMonitorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
