[{"authorTime":"2020-07-21 04:43:13","codes":[{"authorDate":"2020-09-16 07:25:35","commitOrder":3,"curCode":"  public void testIndexData() throws Exception\n  {\n    Map inputFormatMap = new ImmutableMap.Builder<String, Object>().put(\"type\", \"json\")\n                                                                   .build();\n    try (\n        final Closeable ignored1 = unloader(INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix());\n        final Closeable ignored2 = unloader(COMBINING_INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix());\n    ) {\n      final Function<String, String> combiningInputSourceSpecTransform = spec -> {\n        try {\n          spec = StringUtils.replace(\n              spec,\n              \"%%PARTITIONS_SPEC%%\",\n              jsonMapper.writeValueAsString(new DynamicPartitionsSpec(null, null))\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_FILTER%%\",\n              \"wikipedia_index_data*\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_BASE_DIR%%\",\n              \"/resources/data/batch_index/json\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_FORMAT%%\",\n              jsonMapper.writeValueAsString(inputFormatMap)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%APPEND_TO_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%FORCE_GUARANTEED_ROLLUP%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%COMBINING_DATASOURCE%%\",\n              INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix()\n          );\n          return spec;\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      doIndexTest(\n          INDEX_DATASOURCE,\n          INDEX_TASK,\n          combiningInputSourceSpecTransform,\n          INDEX_QUERIES_RESOURCE,\n          false,\n          true,\n          true\n      );\n      doIndexTest(\n          COMBINING_INDEX_DATASOURCE,\n          COMBINING_INDEX_TASK,\n          combiningInputSourceSpecTransform,\n          COMBINING_QUERIES_RESOURCE,\n          false,\n          true,\n          true\n      );\n    }\n  }\n","date":"2020-09-16 07:25:35","endLine":118,"groupId":"18863","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/dd/46d9b127bd2dfd44132f6f72d2b7bc293ca889.src","preCode":"  public void testIndexData() throws Exception\n  {\n    Map inputFormatMap = new ImmutableMap.Builder<String, Object>().put(\"type\", \"json\")\n                                                                   .build();\n    try (\n        final Closeable ignored1 = unloader(INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix());\n        final Closeable ignored2 = unloader(COMBINING_INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix());\n    ) {\n      final Function<String, String> combiningInputSourceSpecTransform = spec -> {\n        try {\n          spec = StringUtils.replace(\n              spec,\n              \"%%PARTITIONS_SPEC%%\",\n              jsonMapper.writeValueAsString(new DynamicPartitionsSpec(null, null))\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_FILTER%%\",\n              \"wikipedia_index_data*\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_BASE_DIR%%\",\n              \"/resources/data/batch_index/json\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_FORMAT%%\",\n              jsonMapper.writeValueAsString(inputFormatMap)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%APPEND_TO_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%FORCE_GUARANTEED_ROLLUP%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%COMBINING_DATASOURCE%%\",\n              INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix()\n          );\n          return spec;\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      doIndexTest(\n          INDEX_DATASOURCE,\n          INDEX_TASK,\n          combiningInputSourceSpecTransform,\n          INDEX_QUERIES_RESOURCE,\n          false,\n          true,\n          true\n      );\n      doIndexTest(\n          COMBINING_INDEX_DATASOURCE,\n          COMBINING_INDEX_TASK,\n          combiningInputSourceSpecTransform,\n          COMBINING_QUERIES_RESOURCE,\n          false,\n          true,\n          true\n      );\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITCombiningInputSourceParallelIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2020-07-21 04:43:13","commitOrder":3,"curCode":"  public void doIndexTest(InputFormatDetails inputFormatDetails, @Nonnull Map<String, Object> extraInputFormatMap) throws Exception\n  {\n    final String indexDatasource = \"wikipedia_index_test_\" + UUID.randomUUID();\n    Map inputFormatMap = new ImmutableMap.Builder<String, Object>().putAll(extraInputFormatMap)\n                                                                 .put(\"type\", inputFormatDetails.getInputFormatType())\n                                                                 .build();\n    try (\n        final Closeable ignored1 = unloader(indexDatasource + config.getExtraDatasourceNameSuffix());\n    ) {\n      final Function<String, String> sqlInputSourcePropsTransform = spec -> {\n        try {\n          spec = StringUtils.replace(\n              spec,\n              \"%%PARTITIONS_SPEC%%\",\n              jsonMapper.writeValueAsString(new DynamicPartitionsSpec(null, null))\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_FILTER%%\",\n              \"*\" + inputFormatDetails.getFileExtension()\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_BASE_DIR%%\",\n              \"/resources/data/batch_index\" + inputFormatDetails.getFolderSuffix()\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_FORMAT%%\",\n              jsonMapper.writeValueAsString(inputFormatMap)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%APPEND_TO_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%FORCE_GUARANTEED_ROLLUP%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          return spec;\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      doIndexTest(\n          indexDatasource,\n          INDEX_TASK,\n          sqlInputSourcePropsTransform,\n          INDEX_QUERIES_RESOURCE,\n          false,\n          true,\n          true\n      );\n    }\n  }\n","date":"2020-07-21 04:43:13","endLine":100,"groupId":"7059","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doIndexTest","params":"(InputFormatDetailsinputFormatDetails@@NonnullMap<String@Object>extraInputFormatMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/82/578d1e3625734acb90794124782c897f62f67b.src","preCode":"  public void doIndexTest(InputFormatDetails inputFormatDetails, @Nonnull Map<String, Object> extraInputFormatMap) throws Exception\n  {\n    final String indexDatasource = \"wikipedia_index_test_\" + UUID.randomUUID();\n    Map inputFormatMap = new ImmutableMap.Builder<String, Object>().putAll(extraInputFormatMap)\n                                                                 .put(\"type\", inputFormatDetails.getInputFormatType())\n                                                                 .build();\n    try (\n        final Closeable ignored1 = unloader(indexDatasource + config.getExtraDatasourceNameSuffix());\n    ) {\n      final Function<String, String> sqlInputSourcePropsTransform = spec -> {\n        try {\n          spec = StringUtils.replace(\n              spec,\n              \"%%PARTITIONS_SPEC%%\",\n              jsonMapper.writeValueAsString(new DynamicPartitionsSpec(null, null))\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_FILTER%%\",\n              \"*\" + inputFormatDetails.getFileExtension()\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_BASE_DIR%%\",\n              \"/resources/data/batch_index\" + inputFormatDetails.getFolderSuffix()\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_FORMAT%%\",\n              jsonMapper.writeValueAsString(inputFormatMap)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%APPEND_TO_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%FORCE_GUARANTEED_ROLLUP%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          return spec;\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      doIndexTest(\n          indexDatasource,\n          INDEX_TASK,\n          sqlInputSourcePropsTransform,\n          INDEX_QUERIES_RESOURCE,\n          false,\n          true,\n          true\n      );\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractLocalInputSourceParallelIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"NB"}],"commitId":"b6ad790dc7f49762ef0531219838dc0ce2e4a183","commitMessage":"@@@Support combining inputsource for parallel ingestion (#10387)\n\n* Add combining inputsource\n\n* Fix documentation\n\nCo-authored-by: Atul Mohan <atulmohan@yahoo-inc.com>","date":"2020-09-16 07:25:35","modifiedFileCount":"1","status":"M","submitter":"Atul Mohan"},{"authorTime":"2021-04-02 03:29:36","codes":[{"authorDate":"2021-04-02 03:29:36","commitOrder":4,"curCode":"  public void testIndexData() throws Exception\n  {\n    Map inputFormatMap = new ImmutableMap.Builder<String, Object>().put(\"type\", \"json\")\n                                                                   .build();\n    try (\n        final Closeable ignored1 = unloader(INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix());\n        final Closeable ignored2 = unloader(COMBINING_INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix());\n    ) {\n      final Function<String, String> combiningInputSourceSpecTransform = spec -> {\n        try {\n          spec = StringUtils.replace(\n              spec,\n              \"%%PARTITIONS_SPEC%%\",\n              jsonMapper.writeValueAsString(new DynamicPartitionsSpec(null, null))\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_FILTER%%\",\n              \"wikipedia_index_data*\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_BASE_DIR%%\",\n              \"/resources/data/batch_index/json\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_FORMAT%%\",\n              jsonMapper.writeValueAsString(inputFormatMap)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%APPEND_TO_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%DROP_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%FORCE_GUARANTEED_ROLLUP%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%COMBINING_DATASOURCE%%\",\n              INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix()\n          );\n          return spec;\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      doIndexTest(\n          INDEX_DATASOURCE,\n          INDEX_TASK,\n          combiningInputSourceSpecTransform,\n          INDEX_QUERIES_RESOURCE,\n          false,\n          true,\n          true\n      );\n      doIndexTest(\n          COMBINING_INDEX_DATASOURCE,\n          COMBINING_INDEX_TASK,\n          combiningInputSourceSpecTransform,\n          COMBINING_QUERIES_RESOURCE,\n          false,\n          true,\n          true\n      );\n    }\n  }\n","date":"2021-04-02 03:29:36","endLine":123,"groupId":"18863","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/da/cd9851230f97eeaf7cc033eb53302c38d57181.src","preCode":"  public void testIndexData() throws Exception\n  {\n    Map inputFormatMap = new ImmutableMap.Builder<String, Object>().put(\"type\", \"json\")\n                                                                   .build();\n    try (\n        final Closeable ignored1 = unloader(INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix());\n        final Closeable ignored2 = unloader(COMBINING_INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix());\n    ) {\n      final Function<String, String> combiningInputSourceSpecTransform = spec -> {\n        try {\n          spec = StringUtils.replace(\n              spec,\n              \"%%PARTITIONS_SPEC%%\",\n              jsonMapper.writeValueAsString(new DynamicPartitionsSpec(null, null))\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_FILTER%%\",\n              \"wikipedia_index_data*\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_BASE_DIR%%\",\n              \"/resources/data/batch_index/json\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_FORMAT%%\",\n              jsonMapper.writeValueAsString(inputFormatMap)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%APPEND_TO_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%FORCE_GUARANTEED_ROLLUP%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%COMBINING_DATASOURCE%%\",\n              INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix()\n          );\n          return spec;\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      doIndexTest(\n          INDEX_DATASOURCE,\n          INDEX_TASK,\n          combiningInputSourceSpecTransform,\n          INDEX_QUERIES_RESOURCE,\n          false,\n          true,\n          true\n      );\n      doIndexTest(\n          COMBINING_INDEX_DATASOURCE,\n          COMBINING_INDEX_TASK,\n          combiningInputSourceSpecTransform,\n          COMBINING_QUERIES_RESOURCE,\n          false,\n          true,\n          true\n      );\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITCombiningInputSourceParallelIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2021-04-02 03:29:36","commitOrder":4,"curCode":"  public void doIndexTest(InputFormatDetails inputFormatDetails, @Nonnull Map<String, Object> extraInputFormatMap) throws Exception\n  {\n    final String indexDatasource = \"wikipedia_index_test_\" + UUID.randomUUID();\n    Map inputFormatMap = new ImmutableMap.Builder<String, Object>().putAll(extraInputFormatMap)\n                                                                 .put(\"type\", inputFormatDetails.getInputFormatType())\n                                                                 .build();\n    try (\n        final Closeable ignored1 = unloader(indexDatasource + config.getExtraDatasourceNameSuffix());\n    ) {\n      final Function<String, String> sqlInputSourcePropsTransform = spec -> {\n        try {\n          spec = StringUtils.replace(\n              spec,\n              \"%%PARTITIONS_SPEC%%\",\n              jsonMapper.writeValueAsString(new DynamicPartitionsSpec(null, null))\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_FILTER%%\",\n              \"*\" + inputFormatDetails.getFileExtension()\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_BASE_DIR%%\",\n              \"/resources/data/batch_index\" + inputFormatDetails.getFolderSuffix()\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_FORMAT%%\",\n              jsonMapper.writeValueAsString(inputFormatMap)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%APPEND_TO_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%DROP_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%FORCE_GUARANTEED_ROLLUP%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          return spec;\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      doIndexTest(\n          indexDatasource,\n          INDEX_TASK,\n          sqlInputSourcePropsTransform,\n          INDEX_QUERIES_RESOURCE,\n          false,\n          true,\n          true\n      );\n    }\n  }\n","date":"2021-04-02 03:29:36","endLine":105,"groupId":"7059","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doIndexTest","params":"(InputFormatDetailsinputFormatDetails@@NonnullMap<String@Object>extraInputFormatMap)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/82/03d03e68c9c890db145d73500b92a1181bc0f3.src","preCode":"  public void doIndexTest(InputFormatDetails inputFormatDetails, @Nonnull Map<String, Object> extraInputFormatMap) throws Exception\n  {\n    final String indexDatasource = \"wikipedia_index_test_\" + UUID.randomUUID();\n    Map inputFormatMap = new ImmutableMap.Builder<String, Object>().putAll(extraInputFormatMap)\n                                                                 .put(\"type\", inputFormatDetails.getInputFormatType())\n                                                                 .build();\n    try (\n        final Closeable ignored1 = unloader(indexDatasource + config.getExtraDatasourceNameSuffix());\n    ) {\n      final Function<String, String> sqlInputSourcePropsTransform = spec -> {\n        try {\n          spec = StringUtils.replace(\n              spec,\n              \"%%PARTITIONS_SPEC%%\",\n              jsonMapper.writeValueAsString(new DynamicPartitionsSpec(null, null))\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_FILTER%%\",\n              \"*\" + inputFormatDetails.getFileExtension()\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_BASE_DIR%%\",\n              \"/resources/data/batch_index\" + inputFormatDetails.getFolderSuffix()\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_FORMAT%%\",\n              jsonMapper.writeValueAsString(inputFormatMap)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%APPEND_TO_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%FORCE_GUARANTEED_ROLLUP%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          return spec;\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      doIndexTest(\n          indexDatasource,\n          INDEX_TASK,\n          sqlInputSourcePropsTransform,\n          INDEX_QUERIES_RESOURCE,\n          false,\n          true,\n          true\n      );\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractLocalInputSourceParallelIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"d7f529336463dad273a742808b49d524bdc4ae11","commitMessage":"@@@Add an option for ingestion task to drop (mark unused) all existing segments that are contained by interval in the ingestionSpec (#11025)\n\n* Auto-Compaction can run indefinitely when segmentGranularity is changed from coarser to finer.\n\n* Add option to drop segments after ingestion\n\n* fix checkstyle\n\n* add tests\n\n* add tests\n\n* add tests\n\n* fix test\n\n* add tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add docs\n\n* fix docs\n\n* address comments\n\n* address comments\n\n* fix spelling","date":"2021-04-02 03:29:36","modifiedFileCount":"44","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-04-09 12:03:00","codes":[{"authorDate":"2021-04-09 12:03:00","commitOrder":5,"curCode":"  public void testIndexData() throws Exception\n  {\n    Map inputFormatMap = new ImmutableMap.Builder<String, Object>().put(\"type\", \"json\")\n                                                                   .build();\n    try (\n        final Closeable ignored1 = unloader(INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix());\n        final Closeable ignored2 = unloader(COMBINING_INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix());\n    ) {\n      final Function<String, String> combiningInputSourceSpecTransform = spec -> {\n        try {\n          spec = StringUtils.replace(\n              spec,\n              \"%%PARTITIONS_SPEC%%\",\n              jsonMapper.writeValueAsString(new DynamicPartitionsSpec(null, null))\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_FILTER%%\",\n              \"wikipedia_index_data*\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_BASE_DIR%%\",\n              \"/resources/data/batch_index/json\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_FORMAT%%\",\n              jsonMapper.writeValueAsString(inputFormatMap)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%APPEND_TO_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%DROP_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%FORCE_GUARANTEED_ROLLUP%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%COMBINING_DATASOURCE%%\",\n              INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix()\n          );\n          return spec;\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      doIndexTest(\n          INDEX_DATASOURCE,\n          INDEX_TASK,\n          combiningInputSourceSpecTransform,\n          INDEX_QUERIES_RESOURCE,\n          false,\n          true,\n          true,\n          new Pair<>(false, false)\n      );\n      doIndexTest(\n          COMBINING_INDEX_DATASOURCE,\n          COMBINING_INDEX_TASK,\n          combiningInputSourceSpecTransform,\n          COMBINING_QUERIES_RESOURCE,\n          false,\n          true,\n          true,\n          new Pair<>(false, false)\n      );\n    }\n  }\n","date":"2021-04-09 12:03:00","endLine":126,"groupId":"103668","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testIndexData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ce/49b457b0aae4523816655df629dc86a2853084.src","preCode":"  public void testIndexData() throws Exception\n  {\n    Map inputFormatMap = new ImmutableMap.Builder<String, Object>().put(\"type\", \"json\")\n                                                                   .build();\n    try (\n        final Closeable ignored1 = unloader(INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix());\n        final Closeable ignored2 = unloader(COMBINING_INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix());\n    ) {\n      final Function<String, String> combiningInputSourceSpecTransform = spec -> {\n        try {\n          spec = StringUtils.replace(\n              spec,\n              \"%%PARTITIONS_SPEC%%\",\n              jsonMapper.writeValueAsString(new DynamicPartitionsSpec(null, null))\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_FILTER%%\",\n              \"wikipedia_index_data*\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_BASE_DIR%%\",\n              \"/resources/data/batch_index/json\"\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_FORMAT%%\",\n              jsonMapper.writeValueAsString(inputFormatMap)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%APPEND_TO_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%DROP_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%FORCE_GUARANTEED_ROLLUP%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%COMBINING_DATASOURCE%%\",\n              INDEX_DATASOURCE + config.getExtraDatasourceNameSuffix()\n          );\n          return spec;\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      doIndexTest(\n          INDEX_DATASOURCE,\n          INDEX_TASK,\n          combiningInputSourceSpecTransform,\n          INDEX_QUERIES_RESOURCE,\n          false,\n          true,\n          true\n      );\n      doIndexTest(\n          COMBINING_INDEX_DATASOURCE,\n          COMBINING_INDEX_TASK,\n          combiningInputSourceSpecTransform,\n          COMBINING_QUERIES_RESOURCE,\n          false,\n          true,\n          true\n      );\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITCombiningInputSourceParallelIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2021-04-09 12:03:00","commitOrder":5,"curCode":"  public void doIndexTest(\n      InputFormatDetails inputFormatDetails,\n      @Nonnull Map<String, Object> extraInputFormatMap,\n      Pair<Boolean, Boolean> segmentAvailabilityConfirmationPair\n  ) throws Exception\n  {\n    final String indexDatasource = \"wikipedia_index_test_\" + UUID.randomUUID();\n    Map inputFormatMap = new ImmutableMap.Builder<String, Object>().putAll(extraInputFormatMap)\n                                                                 .put(\"type\", inputFormatDetails.getInputFormatType())\n                                                                 .build();\n    try (\n        final Closeable ignored1 = unloader(indexDatasource + config.getExtraDatasourceNameSuffix());\n    ) {\n      final Function<String, String> sqlInputSourcePropsTransform = spec -> {\n        try {\n          spec = StringUtils.replace(\n              spec,\n              \"%%PARTITIONS_SPEC%%\",\n              jsonMapper.writeValueAsString(new DynamicPartitionsSpec(null, null))\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_FILTER%%\",\n              \"*\" + inputFormatDetails.getFileExtension()\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_BASE_DIR%%\",\n              \"/resources/data/batch_index\" + inputFormatDetails.getFolderSuffix()\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_FORMAT%%\",\n              jsonMapper.writeValueAsString(inputFormatMap)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%APPEND_TO_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%DROP_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%FORCE_GUARANTEED_ROLLUP%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          return spec;\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      doIndexTest(\n          indexDatasource,\n          INDEX_TASK,\n          sqlInputSourcePropsTransform,\n          INDEX_QUERIES_RESOURCE,\n          false,\n          true,\n          true,\n          segmentAvailabilityConfirmationPair\n      );\n    }\n  }\n","date":"2021-04-09 12:03:00","endLine":114,"groupId":"103668","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"doIndexTest","params":"(InputFormatDetailsinputFormatDetails@@NonnullMap<String@Object>extraInputFormatMap@Pair<Boolean@Boolean>segmentAvailabilityConfirmationPair)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/79/dc7ab495345fbf26f6577829370886b19a7f53.src","preCode":"  public void doIndexTest(InputFormatDetails inputFormatDetails, @Nonnull Map<String, Object> extraInputFormatMap) throws Exception\n  {\n    final String indexDatasource = \"wikipedia_index_test_\" + UUID.randomUUID();\n    Map inputFormatMap = new ImmutableMap.Builder<String, Object>().putAll(extraInputFormatMap)\n                                                                 .put(\"type\", inputFormatDetails.getInputFormatType())\n                                                                 .build();\n    try (\n        final Closeable ignored1 = unloader(indexDatasource + config.getExtraDatasourceNameSuffix());\n    ) {\n      final Function<String, String> sqlInputSourcePropsTransform = spec -> {\n        try {\n          spec = StringUtils.replace(\n              spec,\n              \"%%PARTITIONS_SPEC%%\",\n              jsonMapper.writeValueAsString(new DynamicPartitionsSpec(null, null))\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_FILTER%%\",\n              \"*\" + inputFormatDetails.getFileExtension()\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_SOURCE_BASE_DIR%%\",\n              \"/resources/data/batch_index\" + inputFormatDetails.getFolderSuffix()\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%INPUT_FORMAT%%\",\n              jsonMapper.writeValueAsString(inputFormatMap)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%APPEND_TO_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%DROP_EXISTING%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          spec = StringUtils.replace(\n              spec,\n              \"%%FORCE_GUARANTEED_ROLLUP%%\",\n              jsonMapper.writeValueAsString(false)\n          );\n          return spec;\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      doIndexTest(\n          indexDatasource,\n          INDEX_TASK,\n          sqlInputSourcePropsTransform,\n          INDEX_QUERIES_RESOURCE,\n          false,\n          true,\n          true\n      );\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractLocalInputSourceParallelIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"8264203cee688607091232897749e959e7706010","commitMessage":"@@@Allow client to configure batch ingestion task to wait to complete until segments are confirmed to be available by other (#10676)\n\n* Add ability to wait for segment availability for batch jobs\n\n* IT updates\n\n* fix queries in legacy hadoop IT\n\n* Fix broken indexing integration tests\n\n* address an lgtm flag\n\n* spell checker still flagging for hadoop doc. adding under that file header too\n\n* fix compaction IT\n\n* Updates to wait for availability method\n\n* improve unit testing for patch\n\n* fix bad indentation\n\n* refactor waitForSegmentAvailability\n\n* Fixes based off of review comments\n\n* cleanup to get compile after merging with master\n\n* fix failing test after previous logic update\n\n* add back code that must have gotten deleted during conflict resolution\n\n* update some logging code\n\n* fixes to get compilation working after merge with master\n\n* reset interrupt flag in catch block after code review pointed it out\n\n* small changes following self-review\n\n* fixup some issues brought on by merge with master\n\n* small changes after review\n\n* cleanup a little bit after merge with master\n\n* Fix potential resource leak in AbstractBatchIndexTask\n\n* syntax fix\n\n* Add a Compcation TuningConfig type\n\n* add docs stipulating the lack of support by Compaction tasks for the new config\n\n* Fixup compilation errors after merge with master\n\n* Remove erreneous newline","date":"2021-04-09 12:03:00","modifiedFileCount":"106","status":"M","submitter":"Lucas Capistrant"}]
