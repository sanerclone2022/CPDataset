[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTimeseriesWithLimitNoTopN() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_NO_TOPN,\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"ORDER BY gran\\n\"\n        + \"LIMIT 1\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(AGGS(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":6606,"groupId":"7417","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeseriesWithLimitNoTopN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testTimeseriesWithLimitNoTopN() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_NO_TOPN,\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"ORDER BY gran\\n\"\n        + \"LIMIT 1\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(AGGS(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6579,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTimeseriesWithLimit() throws Exception\n  {\n    testQuery(\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(AGGS(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":6633,"groupId":"7417","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeseriesWithLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testTimeseriesWithLimit() throws Exception\n  {\n    testQuery(\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(AGGS(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6609,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testTimeseriesWithLimitNoTopN() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_NO_TOPN,\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"ORDER BY gran\\n\"\n        + \"LIMIT 1\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{t(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":6466,"groupId":"10742","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeseriesWithLimitNoTopN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testTimeseriesWithLimitNoTopN() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_NO_TOPN,\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"ORDER BY gran\\n\"\n        + \"LIMIT 1\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(AGGS(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6439,"status":"M"},{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testTimeseriesWithLimit() throws Exception\n  {\n    testQuery(\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{t(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":6493,"groupId":"10742","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeseriesWithLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testTimeseriesWithLimit() throws Exception\n  {\n    testQuery(\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(AGGS(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6469,"status":"M"}],"commitId":"8b803cbc22b15799fd0526de8d6d0eea155ad733","commitMessage":"@@@Added checkstyle for \"Methods starting with Capital Letters\"  (#7118)\n\n* Added checkstyle for \"Methods starting with Capital Letters\" and changed the method names violating this.\n\n* Un-abbreviate the method names in the calcite tests\n\n* Fixed checkstyle errors\n\n* Changed asserts position in the code\n","date":"2019-02-24 12:10:31","modifiedFileCount":"24","status":"M","submitter":"Himanshu Pandey"},{"authorTime":"2019-03-12 02:37:58","codes":[{"authorDate":"2019-03-12 02:37:58","commitOrder":3,"curCode":"  public void testTimeseriesWithLimitNoTopN() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_NO_TOPN,\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"ORDER BY gran\\n\"\n        + \"LIMIT 1\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":6490,"groupId":"10742","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeseriesWithLimitNoTopN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testTimeseriesWithLimitNoTopN() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_NO_TOPN,\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"ORDER BY gran\\n\"\n        + \"LIMIT 1\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{t(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6463,"status":"M"},{"authorDate":"2019-03-12 02:37:58","commitOrder":3,"curCode":"  public void testTimeseriesWithLimit() throws Exception\n  {\n    testQuery(\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":6517,"groupId":"10742","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeseriesWithLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testTimeseriesWithLimit() throws Exception\n  {\n    testQuery(\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{t(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6493,"status":"M"}],"commitId":"d7ba19d477732578fc310831ed28365b36332752","commitMessage":"@@@sql.  filters.  and virtual columns  (#6902)\n\n* refactor sql planning to re-use expression virtual columns when possible when constructing a DruidQuery.  allowing virtual columns to be defined in filter expressions.  and making resulting native druid queries more concise. also minor refactor of built-in sql aggregators to maximize code re-use\n\n* fix it\n\n* fix it in the right place\n\n* fixup for base64 stuff\n\n* fixup tests\n\n* fix merge conflict on import order\n\n* fixup\n\n* fix imports\n\n* fix tests\n\n* review comments\n\n* refactor\n\n* re-arrange\n\n* better javadoc\n\n* fixup merge\n\n* fixup tests\n\n* fix accidental changes\n","date":"2019-03-12 02:37:58","modifiedFileCount":"33","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-06-04 07:46:28","codes":[{"authorDate":"2020-06-04 07:46:28","commitOrder":4,"curCode":"  public void testTimeseriesWithLimitNoTopN() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_NO_TOPN,\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"ORDER BY gran\\n\"\n        + \"LIMIT 1\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(getTimeseriesContextWithFloorTime(TIMESERIES_CONTEXT_DEFAULT, \"d0\"))\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","date":"2020-06-04 07:46:28","endLine":11009,"groupId":"10742","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeseriesWithLimitNoTopN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/68a0d9e38b7f8629d5cf759c2492a4d2cb8fd4.src","preCode":"  public void testTimeseriesWithLimitNoTopN() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_NO_TOPN,\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"ORDER BY gran\\n\"\n        + \"LIMIT 1\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":10982,"status":"M"},{"authorDate":"2020-06-04 07:46:28","commitOrder":4,"curCode":"  public void testTimeseriesWithLimit() throws Exception\n  {\n    testQuery(\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(getTimeseriesContextWithFloorTime(TIMESERIES_CONTEXT_DEFAULT, \"d0\"))\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","date":"2020-06-04 07:46:28","endLine":11036,"groupId":"10742","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeseriesWithLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/68a0d9e38b7f8629d5cf759c2492a4d2cb8fd4.src","preCode":"  public void testTimeseriesWithLimit() throws Exception\n  {\n    testQuery(\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":11012,"status":"M"}],"commitId":"790e9482ea18d87d59eeeeab4ceec14e4b1e192d","commitMessage":"@@@Fix Subquery could not be converted to groupBy query (#9959)\n\n* Fix join\n\n* Fix Subquery could not be converted to groupBy query\n\n* Fix Subquery could not be converted to groupBy query\n\n* Fix Subquery could not be converted to groupBy query\n\n* Fix Subquery could not be converted to groupBy query\n\n* Fix Subquery could not be converted to groupBy query\n\n* Fix Subquery could not be converted to groupBy query\n\n* Fix Subquery could not be converted to groupBy query\n\n* Fix Subquery could not be converted to groupBy query\n\n* add tests\n\n* address comments\n\n* fix failing tests","date":"2020-06-04 07:46:28","modifiedFileCount":"12","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-05-11 01:13:37","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":5,"curCode":"  public void testTimeseriesWithLimitNoTopN() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_NO_TOPN,\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"ORDER BY gran\\n\"\n        + \"LIMIT 1\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(getTimeseriesContextWithFloorTime(TIMESERIES_CONTEXT_BY_GRAN, \"d0\"))\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":13062,"groupId":"101782","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeseriesWithLimitNoTopN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testTimeseriesWithLimitNoTopN() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_NO_TOPN,\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"ORDER BY gran\\n\"\n        + \"LIMIT 1\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(getTimeseriesContextWithFloorTime(TIMESERIES_CONTEXT_DEFAULT, \"d0\"))\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":13035,"status":"M"},{"authorDate":"2021-05-11 01:13:37","commitOrder":5,"curCode":"  public void testTimeseriesWithLimit() throws Exception\n  {\n    testQuery(\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(getTimeseriesContextWithFloorTime(TIMESERIES_CONTEXT_BY_GRAN, \"d0\"))\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":13089,"groupId":"101782","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeseriesWithLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testTimeseriesWithLimit() throws Exception\n  {\n    testQuery(\n        \"SELECT gran, SUM(cnt)\\n\"\n        + \"FROM (\\n\"\n        + \"  SELECT floor(__time TO month) AS gran, cnt\\n\"\n        + \"  FROM druid.foo\\n\"\n        + \") AS x\\n\"\n        + \"GROUP BY gran\\n\"\n        + \"LIMIT 1\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.MONTH)\n                  .aggregators(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                  .limit(1)\n                  .context(getTimeseriesContextWithFloorTime(TIMESERIES_CONTEXT_DEFAULT, \"d0\"))\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 3L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":13065,"status":"M"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
