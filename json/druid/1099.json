[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSimple()\n  {\n    final GranularitySpec spec = new UniformGranularitySpec(\n        Granularities.DAY,\n        null,\n        Lists.newArrayList(\n            Intervals.of(\"2012-01-08T00Z/2012-01-11T00Z\"),\n            Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\"),\n            Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\"),\n            Intervals.of(\"2012-01-01T00Z/2012-01-03T00Z\")\n        )\n    );\n\n    Assert.assertTrue(spec.isRollup());\n\n    Assert.assertEquals(\n        Lists.newArrayList(\n            Intervals.of(\"2012-01-01T00Z/P1D\"),\n            Intervals.of(\"2012-01-02T00Z/P1D\"),\n            Intervals.of(\"2012-01-03T00Z/P1D\"),\n            Intervals.of(\"2012-01-07T00Z/P1D\"),\n            Intervals.of(\"2012-01-08T00Z/P1D\"),\n            Intervals.of(\"2012-01-09T00Z/P1D\"),\n            Intervals.of(\"2012-01-10T00Z/P1D\")\n        ),\n        Lists.newArrayList(spec.bucketIntervals().get())\n    );\n\n    Assert.assertEquals(\n        \"2012-01-03T00Z\",\n        Optional.of(Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-03T00Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-03T01Z\",\n        Optional.of(Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-03T01Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-04T01Z\",\n        Optional.<Interval>absent(),\n        spec.bucketInterval(DateTimes.of(\"2012-01-04T01Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-07T23:59:59.999Z\",\n        Optional.of(Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-07T23:59:59.999Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-08T01Z\",\n        Optional.of(Intervals.of(\"2012-01-08T00Z/2012-01-09T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-08T01Z\"))\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":103,"groupId":"12099","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ee/5f43cf979942a0063bb70d610495bb40461ca3.src","preCode":"  public void testSimple()\n  {\n    final GranularitySpec spec = new UniformGranularitySpec(\n        Granularities.DAY,\n        null,\n        Lists.newArrayList(\n            Intervals.of(\"2012-01-08T00Z/2012-01-11T00Z\"),\n            Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\"),\n            Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\"),\n            Intervals.of(\"2012-01-01T00Z/2012-01-03T00Z\")\n        )\n    );\n\n    Assert.assertTrue(spec.isRollup());\n\n    Assert.assertEquals(\n        Lists.newArrayList(\n            Intervals.of(\"2012-01-01T00Z/P1D\"),\n            Intervals.of(\"2012-01-02T00Z/P1D\"),\n            Intervals.of(\"2012-01-03T00Z/P1D\"),\n            Intervals.of(\"2012-01-07T00Z/P1D\"),\n            Intervals.of(\"2012-01-08T00Z/P1D\"),\n            Intervals.of(\"2012-01-09T00Z/P1D\"),\n            Intervals.of(\"2012-01-10T00Z/P1D\")\n        ),\n        Lists.newArrayList(spec.bucketIntervals().get())\n    );\n\n    Assert.assertEquals(\n        \"2012-01-03T00Z\",\n        Optional.of(Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-03T00Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-03T01Z\",\n        Optional.of(Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-03T01Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-04T01Z\",\n        Optional.<Interval>absent(),\n        spec.bucketInterval(DateTimes.of(\"2012-01-04T01Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-07T23:59:59.999Z\",\n        Optional.of(Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-07T23:59:59.999Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-08T01Z\",\n        Optional.of(Intervals.of(\"2012-01-08T00Z/2012-01-09T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-08T01Z\"))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/granularity/UniformGranularityTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testRollupSetting()\n  {\n    List<Interval> intervals = Lists.newArrayList(\n        Intervals.of(\"2012-01-08T00Z/2012-01-11T00Z\"),\n        Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\"),\n        Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\"),\n        Intervals.of(\"2012-01-01T00Z/2012-01-03T00Z\")\n    );\n    final GranularitySpec spec = new UniformGranularitySpec(Granularities.DAY, Granularities.NONE, false, intervals);\n\n    Assert.assertFalse(spec.isRollup());\n  }\n","date":"2018-08-31 00:56:26","endLine":117,"groupId":"12099","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRollupSetting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ee/5f43cf979942a0063bb70d610495bb40461ca3.src","preCode":"  public void testRollupSetting()\n  {\n    List<Interval> intervals = Lists.newArrayList(\n        Intervals.of(\"2012-01-08T00Z/2012-01-11T00Z\"),\n        Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\"),\n        Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\"),\n        Intervals.of(\"2012-01-01T00Z/2012-01-03T00Z\")\n    );\n    final GranularitySpec spec = new UniformGranularitySpec(Granularities.DAY, Granularities.NONE, false, intervals);\n\n    Assert.assertFalse(spec.isRollup());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/granularity/UniformGranularityTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2021-01-29 22:02:10","commitOrder":2,"curCode":"  public void testSimple()\n  {\n\n    final List<Interval> inputIntervals = Lists.newArrayList(\n        Intervals.of(\"2012-01-08T00Z/2012-01-11T00Z\"),\n        Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\"),\n        Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\"),\n        Intervals.of(\"2012-01-01T00Z/2012-01-03T00Z\")\n    );\n    final GranularitySpec spec = new UniformGranularitySpec(\n        Granularities.DAY,\n        null,\n        inputIntervals\n    );\n\n    Assert.assertTrue(spec.isRollup());\n\n    Assert.assertEquals(\n        inputIntervals,\n        Lists.newArrayList(spec.inputIntervals())\n    );\n\n    Assert.assertEquals(\n        Lists.newArrayList(\n            Intervals.of(\"2012-01-01T00Z/P1D\"),\n            Intervals.of(\"2012-01-02T00Z/P1D\"),\n            Intervals.of(\"2012-01-03T00Z/P1D\"),\n            Intervals.of(\"2012-01-07T00Z/P1D\"),\n            Intervals.of(\"2012-01-08T00Z/P1D\"),\n            Intervals.of(\"2012-01-09T00Z/P1D\"),\n            Intervals.of(\"2012-01-10T00Z/P1D\")\n        ),\n        Lists.newArrayList(spec.sortedBucketIntervals())\n    );\n\n\n    Assert.assertEquals(\n        Optional.<Interval>absent(),\n        spec.bucketInterval(DateTimes.of(\"2011-01-12T00Z\"))\n    );\n\n    Assert.assertEquals(\n        Optional.of(Intervals.of(\"2012-01-01T00Z/2012-01-02T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-01T00Z\"))\n    );\n\n    Assert.assertEquals(\n        Optional.of(Intervals.of(\"2012-01-10T00Z/2012-01-11T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-10T00Z\"))\n    );\n\n    Assert.assertEquals(\n        Optional.<Interval>absent(),\n        spec.bucketInterval(DateTimes.of(\"2012-01-12T00Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-03T00Z\",\n        Optional.of(Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-03T00Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-03T01Z\",\n        Optional.of(Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-03T01Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-04T01Z\",\n        Optional.<Interval>absent(),\n        spec.bucketInterval(DateTimes.of(\"2012-01-04T01Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-07T23:59:59.999Z\",\n        Optional.of(Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-07T23:59:59.999Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-08T01Z\",\n        Optional.of(Intervals.of(\"2012-01-08T00Z/2012-01-09T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-08T01Z\"))\n    );\n\n  }\n","date":"2021-01-29 22:02:10","endLine":133,"groupId":"1099","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/27/760f63c1873376bdc45c79328c19063655f62f.src","preCode":"  public void testSimple()\n  {\n    final GranularitySpec spec = new UniformGranularitySpec(\n        Granularities.DAY,\n        null,\n        Lists.newArrayList(\n            Intervals.of(\"2012-01-08T00Z/2012-01-11T00Z\"),\n            Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\"),\n            Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\"),\n            Intervals.of(\"2012-01-01T00Z/2012-01-03T00Z\")\n        )\n    );\n\n    Assert.assertTrue(spec.isRollup());\n\n    Assert.assertEquals(\n        Lists.newArrayList(\n            Intervals.of(\"2012-01-01T00Z/P1D\"),\n            Intervals.of(\"2012-01-02T00Z/P1D\"),\n            Intervals.of(\"2012-01-03T00Z/P1D\"),\n            Intervals.of(\"2012-01-07T00Z/P1D\"),\n            Intervals.of(\"2012-01-08T00Z/P1D\"),\n            Intervals.of(\"2012-01-09T00Z/P1D\"),\n            Intervals.of(\"2012-01-10T00Z/P1D\")\n        ),\n        Lists.newArrayList(spec.bucketIntervals().get())\n    );\n\n    Assert.assertEquals(\n        \"2012-01-03T00Z\",\n        Optional.of(Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-03T00Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-03T01Z\",\n        Optional.of(Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-03T01Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-04T01Z\",\n        Optional.<Interval>absent(),\n        spec.bucketInterval(DateTimes.of(\"2012-01-04T01Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-07T23:59:59.999Z\",\n        Optional.of(Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-07T23:59:59.999Z\"))\n    );\n\n    Assert.assertEquals(\n        \"2012-01-08T01Z\",\n        Optional.of(Intervals.of(\"2012-01-08T00Z/2012-01-09T00Z\")),\n        spec.bucketInterval(DateTimes.of(\"2012-01-08T01Z\"))\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/granularity/UniformGranularityTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testRollupSetting()\n  {\n    List<Interval> intervals = Lists.newArrayList(\n        Intervals.of(\"2012-01-08T00Z/2012-01-11T00Z\"),\n        Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\"),\n        Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\"),\n        Intervals.of(\"2012-01-01T00Z/2012-01-03T00Z\")\n    );\n    final GranularitySpec spec = new UniformGranularitySpec(Granularities.DAY, Granularities.NONE, false, intervals);\n\n    Assert.assertFalse(spec.isRollup());\n  }\n","date":"2018-08-31 00:56:26","endLine":117,"groupId":"1099","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRollupSetting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ee/5f43cf979942a0063bb70d610495bb40461ca3.src","preCode":"  public void testRollupSetting()\n  {\n    List<Interval> intervals = Lists.newArrayList(\n        Intervals.of(\"2012-01-08T00Z/2012-01-11T00Z\"),\n        Intervals.of(\"2012-01-07T00Z/2012-01-08T00Z\"),\n        Intervals.of(\"2012-01-03T00Z/2012-01-04T00Z\"),\n        Intervals.of(\"2012-01-01T00Z/2012-01-03T00Z\")\n    );\n    final GranularitySpec spec = new UniformGranularitySpec(Granularities.DAY, Granularities.NONE, false, intervals);\n\n    Assert.assertFalse(spec.isRollup());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/granularity/UniformGranularityTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"}],"commitId":"0e4750bac208d99f4a07545cc2f401f9bcdc1381","commitMessage":"@@@Granularity interval materialization (#10742)\n\n* Prevent interval materialization for UniformGranularitySpec inside the overlord\n\n* Change API of bucketIntervals in GranularitySpec to return an Iterable<Interval>\n\n* Javadoc update.  respect inputIntervals contract\n\n* Eliminate dependency on wrappedspec (i.e. ArbitraryGranularity) in UniformGranularitySpec\n\n* Added one boundary condition test to UniformGranularityTest and fixed Travis forbidden method errors in IntervalsByGranularity\n\n* Fix Travis style & other checks\n\n* Refactor TreeSet to facilitate re-use in UniformGranularitySpec\n\n* Make sure intervals are unique when there is no segment granularity\n\n* Style/bugspot fixes...\n\n* More travis checks\n\n* Add condensedIntervals method to GranularitySpec and pass it as needed to the lock method\n\n* Style & PR feedback\n\n* Fixed failing test\n\n* Fixed bug in IntervalsByGranularity iterator that it would return repeated elements (see added unit tests that were broken before this change)\n\n* Refactor so that we can get the condensed buckets without materializing the intervals\n\n* Get rid of GranularitySpec::condensedInputIntervals ... not needed\n\n* Travis failures fixes\n\n* Travis checkstyle fix\n\n* Edited/added javadoc comments and a method name (code review feedback)\n\n* Fixed jacoco coverage by moving class and adding more coverage\n\n* Avoid materializing the condensed intervals when locking\n\n* Deal with overlapping intervals\n\n* Remove code and use library code instead\n\n* Refactor intervals by granularity using the FluentIterable.  add sanity checks\n\n* Change !hasNext() to inputIntervals().isEmpty()\n\n* Remove redundant lambda\n\n* Use materialized intervals here since this is outside the overlord (for performance)\n\n* Name refactor to reflect the fact that bucket intervals are sorted.\n\n* Style fixes\n\n* Removed redundant method and have condensedIntervalIterator throw IAE when element is null for consistency with other methods in this class (as well that null interval when condensing does not make sense)\n\n* Remove forbidden api\n\n* Move helper class inside common base class to reduce public space pollution","date":"2021-01-29 22:02:10","modifiedFileCount":"22","status":"M","submitter":"Agustin Gonzalez"}]
