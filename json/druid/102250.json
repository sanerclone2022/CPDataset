[{"authorTime":"2018-12-22 03:49:24","codes":[{"authorDate":"2018-12-22 03:49:24","commitOrder":3,"curCode":"  public void testSetEndOffsetsAsync() throws Exception\n  {\n    Map<String, String> endOffsets = ImmutableMap.of(\"0\", \"15L\", \"1\", \"120L\");\n    final int numRequests = TEST_IDS.size();\n    Capture<Request> captured = Capture.newInstance(CaptureType.ALL);\n    expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK).anyTimes();\n    expect(httpClient.go(\n        EasyMock.capture(captured),\n        EasyMock.anyObject(FullResponseHandler.class),\n        EasyMock.eq(TEST_HTTP_TIMEOUT)\n    )).andReturn(\n        Futures.immediateFuture(responseHolder)\n    ).times(numRequests);\n    replayAll();\n\n    List<URL> expectedUrls = new ArrayList<>();\n    List<ListenableFuture<Boolean>> futures = new ArrayList<>();\n    for (String testId : TEST_IDS) {\n      expectedUrls.add(new URL(StringUtils.format(\n          URL_FORMATTER,\n          TEST_HOST,\n          TEST_PORT,\n          testId,\n          StringUtils.format(\"offsets/end?finish=%s\", true)\n      )));\n      futures.add(client.setEndOffsetsAsync(testId, endOffsets, true));\n    }\n\n    List<Boolean> responses = Futures.allAsList(futures).get();\n\n    verifyAll();\n    List<Request> requests = captured.getValues();\n\n    Assert.assertEquals(numRequests, requests.size());\n    Assert.assertEquals(numRequests, responses.size());\n    for (int i = 0; i < numRequests; i++) {\n      Assert.assertEquals(HttpMethod.POST, requests.get(i).getMethod());\n      Assert.assertTrue(\"unexpectedURL\", expectedUrls.contains(requests.get(i).getUrl()));\n      Assert.assertTrue(responses.get(i));\n    }\n  }\n","date":"2018-12-22 03:49:24","endLine":984,"groupId":"10484","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetEndOffsetsAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9d/7fafbb4c73dd1626301cbd666cb70679fea604.src","preCode":"  public void testSetEndOffsetsAsync() throws Exception\n  {\n    Map<String, String> endOffsets = ImmutableMap.of(\"0\", \"15L\", \"1\", \"120L\");\n    final int numRequests = TEST_IDS.size();\n    Capture<Request> captured = Capture.newInstance(CaptureType.ALL);\n    expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK).anyTimes();\n    expect(httpClient.go(\n        EasyMock.capture(captured),\n        EasyMock.anyObject(FullResponseHandler.class),\n        EasyMock.eq(TEST_HTTP_TIMEOUT)\n    )).andReturn(\n        Futures.immediateFuture(responseHolder)\n    ).times(numRequests);\n    replayAll();\n\n    List<URL> expectedUrls = new ArrayList<>();\n    List<ListenableFuture<Boolean>> futures = new ArrayList<>();\n    for (String testId : TEST_IDS) {\n      expectedUrls.add(new URL(StringUtils.format(\n          URL_FORMATTER,\n          TEST_HOST,\n          TEST_PORT,\n          testId,\n          StringUtils.format(\"offsets/end?finish=%s\", true)\n      )));\n      futures.add(client.setEndOffsetsAsync(testId, endOffsets, true));\n    }\n\n    List<Boolean> responses = Futures.allAsList(futures).get();\n\n    verifyAll();\n    List<Request> requests = captured.getValues();\n\n    Assert.assertEquals(numRequests, requests.size());\n    Assert.assertEquals(numRequests, responses.size());\n    for (int i = 0; i < numRequests; i++) {\n      Assert.assertEquals(HttpMethod.POST, requests.get(i).getMethod());\n      Assert.assertTrue(\"unexpectedURL\", expectedUrls.contains(requests.get(i).getUrl()));\n      Assert.assertTrue(responses.get(i));\n    }\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":944,"status":"B"},{"authorDate":"2018-12-22 03:49:24","commitOrder":3,"curCode":"  public void testSetEndOffsetsAsync() throws Exception\n  {\n    final Map<Integer, Long> endOffsets = ImmutableMap.of(0, 15L, 1, 120L);\n    final int numRequests = TEST_IDS.size();\n    Capture<Request> captured = Capture.newInstance(CaptureType.ALL);\n    expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK).anyTimes();\n    expect(httpClient.go(\n        EasyMock.capture(captured),\n        EasyMock.anyObject(FullResponseHandler.class),\n        EasyMock.eq(TEST_HTTP_TIMEOUT)\n    )).andReturn(\n        Futures.immediateFuture(responseHolder)\n    ).times(numRequests);\n    replayAll();\n\n    List<URL> expectedUrls = new ArrayList<>();\n    List<ListenableFuture<Boolean>> futures = new ArrayList<>();\n    for (String testId : TEST_IDS) {\n      expectedUrls.add(new URL(StringUtils.format(\n          URL_FORMATTER,\n          TEST_HOST,\n          TEST_PORT,\n          testId,\n          StringUtils.format(\"offsets/end?finish=%s\", true)\n      )));\n      futures.add(client.setEndOffsetsAsync(testId, endOffsets, true));\n    }\n\n    List<Boolean> responses = Futures.allAsList(futures).get();\n\n    verifyAll();\n    List<Request> requests = captured.getValues();\n\n    Assert.assertEquals(numRequests, requests.size());\n    Assert.assertEquals(numRequests, responses.size());\n    for (int i = 0; i < numRequests; i++) {\n      Assert.assertEquals(HttpMethod.POST, requests.get(i).getMethod());\n      Assert.assertTrue(\"unexpectedURL\", expectedUrls.contains(requests.get(i).getUrl()));\n      Assert.assertTrue(responses.get(i));\n    }\n  }\n","date":"2018-12-22 03:49:24","endLine":984,"groupId":"10484","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSetEndOffsetsAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/28/cc0bbe9d1574acac69d4d0142ec4dbf79871d9.src","preCode":"  public void testSetEndOffsetsAsync() throws Exception\n  {\n    final Map<Integer, Long> endOffsets = ImmutableMap.of(0, 15L, 1, 120L);\n    final int numRequests = TEST_IDS.size();\n    Capture<Request> captured = Capture.newInstance(CaptureType.ALL);\n    expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK).anyTimes();\n    expect(httpClient.go(\n        EasyMock.capture(captured),\n        EasyMock.anyObject(FullResponseHandler.class),\n        EasyMock.eq(TEST_HTTP_TIMEOUT)\n    )).andReturn(\n        Futures.immediateFuture(responseHolder)\n    ).times(numRequests);\n    replayAll();\n\n    List<URL> expectedUrls = new ArrayList<>();\n    List<ListenableFuture<Boolean>> futures = new ArrayList<>();\n    for (String testId : TEST_IDS) {\n      expectedUrls.add(new URL(StringUtils.format(\n          URL_FORMATTER,\n          TEST_HOST,\n          TEST_PORT,\n          testId,\n          StringUtils.format(\"offsets/end?finish=%s\", true)\n      )));\n      futures.add(client.setEndOffsetsAsync(testId, endOffsets, true));\n    }\n\n    List<Boolean> responses = Futures.allAsList(futures).get();\n\n    verifyAll();\n    List<Request> requests = captured.getValues();\n\n    Assert.assertEquals(numRequests, requests.size());\n    Assert.assertEquals(numRequests, responses.size());\n    for (int i = 0; i < numRequests; i++) {\n      Assert.assertEquals(HttpMethod.POST, requests.get(i).getMethod());\n      Assert.assertTrue(\"unexpectedURL\", expectedUrls.contains(requests.get(i).getUrl()));\n      Assert.assertTrue(responses.get(i));\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":944,"status":"MB"}],"commitId":"7c7997e8a1183a7bffad731ca94e8b4c381e8665","commitMessage":"@@@Add Kinesis Indexing Service to core Druid (#6431)\n\n* created seekablestream classes\n\n* created seekablestreamsupervisor class\n\n* first attempt to integrate kafa indexing service to use SeekableStream\n\n* seekablestream bug fixes\n\n* kafkarecordsupplier\n\n* integrated kafka indexing service with seekablestream\n\n* implemented resume/suspend and refactored some package names\n\n* moved kinesis indexing service into core druid extensions\n\n* merged some changes from kafka supervisor race condition\n\n* integrated kinesis-indexing-service with seekablestream\n\n* unite tests for kinesis-indexing-service\n\n* various bug fixes for kinesis-indexing-service\n\n* refactored kinesisindexingtask\n\n* finished up more kinesis unit tests\n\n* more bug fixes for kinesis-indexing-service\n\n* finsihed refactoring kinesis unit tests\n\n* removed KinesisParititons and KafkaPartitions to use SeekableStreamPartitions\n\n* kinesis-indexing-service code cleanup and docs\n\n* merge #6291\n\nmerge #6337\n\nmerge #6383\n\n* added more docs and reordered methods\n\n* fixd kinesis tests after merging master and added docs in seekablestream\n\n* fix various things from pr comment\n\n* improve recordsupplier and add unit tests\n\n* migrated to aws-java-sdk-kinesis\n\n* merge changes from master\n\n* fix pom files and forbiddenapi checks\n\n* checkpoint JavaType bug fix\n\n* fix pom and stuff\n\n* disable checkpointing in kinesis\n\n* fix kinesis sequence number null in closed shard\n\n* merge changes from master\n\n* fixes for kinesis tasks\n\n* capitalized <partitionType.  sequenceType>\n\n* removed abstract class loggers\n\n* conform to guava api restrictions\n\n* add docker for travis other modules test\n\n* address comments\n\n* improve RecordSupplier to supply records in batch\n\n* fix strict compile issue\n\n* add test scope for localstack dependency\n\n* kinesis indexing task refactoring\n\n* comments\n\n* github comments\n\n* minor fix\n\n* removed unneeded readme\n\n* fix deserialization bug\n\n* fix various bugs\n\n* KinesisRecordSupplier unable to catch up to earliest position in stream bug fix\n\n* minor changes to kinesis\n\n* implement deaggregate for kinesis\n\n* Merge remote-tracking branch 'upstream/master' into seekablestream\n\n* fix kinesis offset discrepancy with kafka\n\n* kinesis record supplier disable getPosition\n\n* pr comments\n\n* mock for kinesis tests and remove docker dependency for unit tests\n\n* PR comments\n\n* avg lag in kafkasupervisor #6587\n\n* refacotred SequenceMetadata in taskRunners\n\n* small fix\n\n* more small fix\n\n* recordsupplier resource leak\n\n* revert .travis.yml formatting\n\n* fix style\n\n* kinesis docs\n\n* doc part2\n\n* more docs\n\n* comments\n\n* comments*2\n\n* revert string replace changes\n\n* comments\n\n* teamcity\n\n* comments part 1\n\n* comments part 2\n\n* comments part 3\n\n* merge #6754\n\n* fix injection binding\n\n* comments\n\n* KinesisRegion refactor\n\n* comments part idk lol\n\n* can't think of a commit msg anymore\n\n* remove possiblyResetDataSourceMetadata() for IncrementalPublishingTaskRunner\n\n* commmmmmmmmmments\n\n* extra error handling in KinesisRecordSupplier getRecords\n\n* comments\n\n* quickfix\n\n* typo\n\n* oof\n","date":"2018-12-22 03:49:24","modifiedFileCount":"22","status":"M","submitter":"Joshua Sun"},{"authorTime":"2019-07-07 00:33:12","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":4,"curCode":"  public void testSetEndOffsetsAsync() throws Exception\n  {\n    Map<String, String> endOffsets = ImmutableMap.of(\"0\", \"15L\", \"1\", \"120L\");\n    final int numRequests = TEST_IDS.size();\n    Capture<Request> captured = Capture.newInstance(CaptureType.ALL);\n    EasyMock.expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK).anyTimes();\n    EasyMock.expect(httpClient.go(\n        EasyMock.capture(captured),\n        EasyMock.anyObject(FullResponseHandler.class),\n        EasyMock.eq(TEST_HTTP_TIMEOUT)\n    )).andReturn(\n        Futures.immediateFuture(responseHolder)\n    ).times(numRequests);\n    replayAll();\n\n    List<URL> expectedUrls = new ArrayList<>();\n    List<ListenableFuture<Boolean>> futures = new ArrayList<>();\n    for (String testId : TEST_IDS) {\n      expectedUrls.add(new URL(StringUtils.format(\n          URL_FORMATTER,\n          TEST_HOST,\n          TEST_PORT,\n          testId,\n          StringUtils.format(\"offsets/end?finish=%s\", true)\n      )));\n      futures.add(client.setEndOffsetsAsync(testId, endOffsets, true));\n    }\n\n    List<Boolean> responses = Futures.allAsList(futures).get();\n\n    verifyAll();\n    List<Request> requests = captured.getValues();\n\n    Assert.assertEquals(numRequests, requests.size());\n    Assert.assertEquals(numRequests, responses.size());\n    for (int i = 0; i < numRequests; i++) {\n      Assert.assertEquals(HttpMethod.POST, requests.get(i).getMethod());\n      Assert.assertTrue(\"unexpectedURL\", expectedUrls.contains(requests.get(i).getUrl()));\n      Assert.assertTrue(responses.get(i));\n    }\n  }\n","date":"2019-07-07 00:33:12","endLine":983,"groupId":"10484","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetEndOffsetsAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cc/488f40104bc5f33785b298b260c621b26a9e66.src","preCode":"  public void testSetEndOffsetsAsync() throws Exception\n  {\n    Map<String, String> endOffsets = ImmutableMap.of(\"0\", \"15L\", \"1\", \"120L\");\n    final int numRequests = TEST_IDS.size();\n    Capture<Request> captured = Capture.newInstance(CaptureType.ALL);\n    expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK).anyTimes();\n    expect(httpClient.go(\n        EasyMock.capture(captured),\n        EasyMock.anyObject(FullResponseHandler.class),\n        EasyMock.eq(TEST_HTTP_TIMEOUT)\n    )).andReturn(\n        Futures.immediateFuture(responseHolder)\n    ).times(numRequests);\n    replayAll();\n\n    List<URL> expectedUrls = new ArrayList<>();\n    List<ListenableFuture<Boolean>> futures = new ArrayList<>();\n    for (String testId : TEST_IDS) {\n      expectedUrls.add(new URL(StringUtils.format(\n          URL_FORMATTER,\n          TEST_HOST,\n          TEST_PORT,\n          testId,\n          StringUtils.format(\"offsets/end?finish=%s\", true)\n      )));\n      futures.add(client.setEndOffsetsAsync(testId, endOffsets, true));\n    }\n\n    List<Boolean> responses = Futures.allAsList(futures).get();\n\n    verifyAll();\n    List<Request> requests = captured.getValues();\n\n    Assert.assertEquals(numRequests, requests.size());\n    Assert.assertEquals(numRequests, responses.size());\n    for (int i = 0; i < numRequests; i++) {\n      Assert.assertEquals(HttpMethod.POST, requests.get(i).getMethod());\n      Assert.assertTrue(\"unexpectedURL\", expectedUrls.contains(requests.get(i).getUrl()));\n      Assert.assertTrue(responses.get(i));\n    }\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":943,"status":"M"},{"authorDate":"2019-07-07 00:33:12","commitOrder":4,"curCode":"  public void testSetEndOffsetsAsync() throws Exception\n  {\n    final Map<Integer, Long> endOffsets = ImmutableMap.of(0, 15L, 1, 120L);\n    final int numRequests = TEST_IDS.size();\n    Capture<Request> captured = Capture.newInstance(CaptureType.ALL);\n    EasyMock.expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK).anyTimes();\n    EasyMock.expect(httpClient.go(\n        EasyMock.capture(captured),\n        EasyMock.anyObject(FullResponseHandler.class),\n        EasyMock.eq(TEST_HTTP_TIMEOUT)\n    )).andReturn(\n        Futures.immediateFuture(responseHolder)\n    ).times(numRequests);\n    replayAll();\n\n    List<URL> expectedUrls = new ArrayList<>();\n    List<ListenableFuture<Boolean>> futures = new ArrayList<>();\n    for (String testId : TEST_IDS) {\n      expectedUrls.add(new URL(StringUtils.format(\n          URL_FORMATTER,\n          TEST_HOST,\n          TEST_PORT,\n          testId,\n          StringUtils.format(\"offsets/end?finish=%s\", true)\n      )));\n      futures.add(client.setEndOffsetsAsync(testId, endOffsets, true));\n    }\n\n    List<Boolean> responses = Futures.allAsList(futures).get();\n\n    verifyAll();\n    List<Request> requests = captured.getValues();\n\n    Assert.assertEquals(numRequests, requests.size());\n    Assert.assertEquals(numRequests, responses.size());\n    for (int i = 0; i < numRequests; i++) {\n      Assert.assertEquals(HttpMethod.POST, requests.get(i).getMethod());\n      Assert.assertTrue(\"unexpectedURL\", expectedUrls.contains(requests.get(i).getUrl()));\n      Assert.assertTrue(responses.get(i));\n    }\n  }\n","date":"2019-07-07 00:33:12","endLine":983,"groupId":"10484","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSetEndOffsetsAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9a/835f51c29aa21d982e304ef432c4312f1b954e.src","preCode":"  public void testSetEndOffsetsAsync() throws Exception\n  {\n    final Map<Integer, Long> endOffsets = ImmutableMap.of(0, 15L, 1, 120L);\n    final int numRequests = TEST_IDS.size();\n    Capture<Request> captured = Capture.newInstance(CaptureType.ALL);\n    expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK).anyTimes();\n    expect(httpClient.go(\n        EasyMock.capture(captured),\n        EasyMock.anyObject(FullResponseHandler.class),\n        EasyMock.eq(TEST_HTTP_TIMEOUT)\n    )).andReturn(\n        Futures.immediateFuture(responseHolder)\n    ).times(numRequests);\n    replayAll();\n\n    List<URL> expectedUrls = new ArrayList<>();\n    List<ListenableFuture<Boolean>> futures = new ArrayList<>();\n    for (String testId : TEST_IDS) {\n      expectedUrls.add(new URL(StringUtils.format(\n          URL_FORMATTER,\n          TEST_HOST,\n          TEST_PORT,\n          testId,\n          StringUtils.format(\"offsets/end?finish=%s\", true)\n      )));\n      futures.add(client.setEndOffsetsAsync(testId, endOffsets, true));\n    }\n\n    List<Boolean> responses = Futures.allAsList(futures).get();\n\n    verifyAll();\n    List<Request> requests = captured.getValues();\n\n    Assert.assertEquals(numRequests, requests.size());\n    Assert.assertEquals(numRequests, responses.size());\n    for (int i = 0; i < numRequests; i++) {\n      Assert.assertEquals(HttpMethod.POST, requests.get(i).getMethod());\n      Assert.assertTrue(\"unexpectedURL\", expectedUrls.contains(requests.get(i).getUrl()));\n      Assert.assertTrue(responses.get(i));\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":943,"status":"M"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2019-08-27 10:27:41","codes":[{"authorDate":"2019-08-27 10:27:41","commitOrder":5,"curCode":"  public void testSetEndOffsetsAsync() throws Exception\n  {\n    Map<String, String> endOffsets = ImmutableMap.of(\"0\", \"15L\", \"1\", \"120L\");\n    final int numRequests = TEST_IDS.size();\n    Capture<Request> captured = Capture.newInstance(CaptureType.ALL);\n    EasyMock.expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK).anyTimes();\n    EasyMock.expect(httpClient.go(\n        EasyMock.capture(captured),\n        EasyMock.anyObject(StringFullResponseHandler.class),\n        EasyMock.eq(TEST_HTTP_TIMEOUT)\n    )).andReturn(\n        Futures.immediateFuture(responseHolder)\n    ).times(numRequests);\n    replayAll();\n\n    List<URL> expectedUrls = new ArrayList<>();\n    List<ListenableFuture<Boolean>> futures = new ArrayList<>();\n    for (String testId : TEST_IDS) {\n      expectedUrls.add(new URL(StringUtils.format(\n          URL_FORMATTER,\n          TEST_HOST,\n          TEST_PORT,\n          testId,\n          StringUtils.format(\"offsets/end?finish=%s\", true)\n      )));\n      futures.add(client.setEndOffsetsAsync(testId, endOffsets, true));\n    }\n\n    List<Boolean> responses = Futures.allAsList(futures).get();\n\n    verifyAll();\n    List<Request> requests = captured.getValues();\n\n    Assert.assertEquals(numRequests, requests.size());\n    Assert.assertEquals(numRequests, responses.size());\n    for (int i = 0; i < numRequests; i++) {\n      Assert.assertEquals(HttpMethod.POST, requests.get(i).getMethod());\n      Assert.assertTrue(\"unexpectedURL\", expectedUrls.contains(requests.get(i).getUrl()));\n      Assert.assertTrue(responses.get(i));\n    }\n  }\n","date":"2019-08-27 10:27:41","endLine":983,"groupId":"102250","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetEndOffsetsAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f8/8dcc722ddcb88a1f35404722bac088cbeb927d.src","preCode":"  public void testSetEndOffsetsAsync() throws Exception\n  {\n    Map<String, String> endOffsets = ImmutableMap.of(\"0\", \"15L\", \"1\", \"120L\");\n    final int numRequests = TEST_IDS.size();\n    Capture<Request> captured = Capture.newInstance(CaptureType.ALL);\n    EasyMock.expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK).anyTimes();\n    EasyMock.expect(httpClient.go(\n        EasyMock.capture(captured),\n        EasyMock.anyObject(FullResponseHandler.class),\n        EasyMock.eq(TEST_HTTP_TIMEOUT)\n    )).andReturn(\n        Futures.immediateFuture(responseHolder)\n    ).times(numRequests);\n    replayAll();\n\n    List<URL> expectedUrls = new ArrayList<>();\n    List<ListenableFuture<Boolean>> futures = new ArrayList<>();\n    for (String testId : TEST_IDS) {\n      expectedUrls.add(new URL(StringUtils.format(\n          URL_FORMATTER,\n          TEST_HOST,\n          TEST_PORT,\n          testId,\n          StringUtils.format(\"offsets/end?finish=%s\", true)\n      )));\n      futures.add(client.setEndOffsetsAsync(testId, endOffsets, true));\n    }\n\n    List<Boolean> responses = Futures.allAsList(futures).get();\n\n    verifyAll();\n    List<Request> requests = captured.getValues();\n\n    Assert.assertEquals(numRequests, requests.size());\n    Assert.assertEquals(numRequests, responses.size());\n    for (int i = 0; i < numRequests; i++) {\n      Assert.assertEquals(HttpMethod.POST, requests.get(i).getMethod());\n      Assert.assertTrue(\"unexpectedURL\", expectedUrls.contains(requests.get(i).getUrl()));\n      Assert.assertTrue(responses.get(i));\n    }\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/KinesisIndexTaskClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":943,"status":"M"},{"authorDate":"2019-08-27 10:27:41","commitOrder":5,"curCode":"  public void testSetEndOffsetsAsync() throws Exception\n  {\n    final Map<Integer, Long> endOffsets = ImmutableMap.of(0, 15L, 1, 120L);\n    final int numRequests = TEST_IDS.size();\n    Capture<Request> captured = Capture.newInstance(CaptureType.ALL);\n    EasyMock.expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK).anyTimes();\n    EasyMock.expect(httpClient.go(\n        EasyMock.capture(captured),\n        EasyMock.anyObject(StringFullResponseHandler.class),\n        EasyMock.eq(TEST_HTTP_TIMEOUT)\n    )).andReturn(\n        Futures.immediateFuture(responseHolder)\n    ).times(numRequests);\n    replayAll();\n\n    List<URL> expectedUrls = new ArrayList<>();\n    List<ListenableFuture<Boolean>> futures = new ArrayList<>();\n    for (String testId : TEST_IDS) {\n      expectedUrls.add(new URL(StringUtils.format(\n          URL_FORMATTER,\n          TEST_HOST,\n          TEST_PORT,\n          testId,\n          StringUtils.format(\"offsets/end?finish=%s\", true)\n      )));\n      futures.add(client.setEndOffsetsAsync(testId, endOffsets, true));\n    }\n\n    List<Boolean> responses = Futures.allAsList(futures).get();\n\n    verifyAll();\n    List<Request> requests = captured.getValues();\n\n    Assert.assertEquals(numRequests, requests.size());\n    Assert.assertEquals(numRequests, responses.size());\n    for (int i = 0; i < numRequests; i++) {\n      Assert.assertEquals(HttpMethod.POST, requests.get(i).getMethod());\n      Assert.assertTrue(\"unexpectedURL\", expectedUrls.contains(requests.get(i).getUrl()));\n      Assert.assertTrue(responses.get(i));\n    }\n  }\n","date":"2019-08-27 10:27:41","endLine":983,"groupId":"102250","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSetEndOffsetsAsync","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ca/e9b4302f76d22b89bab0c59d117fb1784a26c2.src","preCode":"  public void testSetEndOffsetsAsync() throws Exception\n  {\n    final Map<Integer, Long> endOffsets = ImmutableMap.of(0, 15L, 1, 120L);\n    final int numRequests = TEST_IDS.size();\n    Capture<Request> captured = Capture.newInstance(CaptureType.ALL);\n    EasyMock.expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.OK).anyTimes();\n    EasyMock.expect(httpClient.go(\n        EasyMock.capture(captured),\n        EasyMock.anyObject(FullResponseHandler.class),\n        EasyMock.eq(TEST_HTTP_TIMEOUT)\n    )).andReturn(\n        Futures.immediateFuture(responseHolder)\n    ).times(numRequests);\n    replayAll();\n\n    List<URL> expectedUrls = new ArrayList<>();\n    List<ListenableFuture<Boolean>> futures = new ArrayList<>();\n    for (String testId : TEST_IDS) {\n      expectedUrls.add(new URL(StringUtils.format(\n          URL_FORMATTER,\n          TEST_HOST,\n          TEST_PORT,\n          testId,\n          StringUtils.format(\"offsets/end?finish=%s\", true)\n      )));\n      futures.add(client.setEndOffsetsAsync(testId, endOffsets, true));\n    }\n\n    List<Boolean> responses = Futures.allAsList(futures).get();\n\n    verifyAll();\n    List<Request> requests = captured.getValues();\n\n    Assert.assertEquals(numRequests, requests.size());\n    Assert.assertEquals(numRequests, responses.size());\n    for (int i = 0; i < numRequests; i++) {\n      Assert.assertEquals(HttpMethod.POST, requests.get(i).getMethod());\n      Assert.assertTrue(\"unexpectedURL\", expectedUrls.contains(requests.get(i).getUrl()));\n      Assert.assertTrue(responses.get(i));\n    }\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/KafkaIndexTaskClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":943,"status":"M"}],"commitId":"e5ef5ddafa632256fe8a387a117557c415bee7df","commitMessage":"@@@Fix the shuffle with TLS enabled for parallel indexing; add an integration test; improve unit tests (#8350)\n\n* Fix shuffle with tls enabled; add an integration test; improve unit tests\n\n* remove debug log\n\n* fix tests\n\n* unused import\n\n* add javadoc\n\n* rename to getContent\n","date":"2019-08-27 10:27:41","modifiedFileCount":"37","status":"M","submitter":"Jihoon Son"}]
