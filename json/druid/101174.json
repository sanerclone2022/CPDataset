[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public Response getIntervals(@Context final HttpServletRequest req)\n  {\n    final Comparator<Interval> comparator = Comparators.inverse(Comparators.intervalsByStartThenEnd());\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Map<Interval, Map<String, Map<String, Object>>> retVal = Maps.newTreeMap(comparator);\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        Map<String, Map<String, Object>> interval = retVal.get(dataSegment.getInterval());\n        if (interval == null) {\n          Map<String, Map<String, Object>> tmp = Maps.newHashMap();\n          retVal.put(dataSegment.getInterval(), tmp);\n        }\n        setProperties(retVal, dataSource, dataSegment);\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","date":"2018-08-31 00:56:26","endLine":92,"groupId":"4033","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getIntervals","params":"(@ContextfinalHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a3/c3c5275b2f31f45609cae2587e345fbd4939aa.src","preCode":"  public Response getIntervals(@Context final HttpServletRequest req)\n  {\n    final Comparator<Interval> comparator = Comparators.inverse(Comparators.intervalsByStartThenEnd());\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Map<Interval, Map<String, Map<String, Object>>> retVal = Maps.newTreeMap(comparator);\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        Map<String, Map<String, Object>> interval = retVal.get(dataSegment.getInterval());\n        if (interval == null) {\n          Map<String, Map<String, Object>> tmp = Maps.newHashMap();\n          retVal.put(dataSegment.getInterval(), tmp);\n        }\n        setProperties(retVal, dataSource, dataSegment);\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/IntervalsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public Response getSpecificIntervals(\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full,\n      @Context final HttpServletRequest req\n  )\n  {\n    final Interval theInterval = Intervals.of(interval.replace(\"_\", \"/\"));\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Comparator<Interval> comparator = Comparators.inverse(Comparators.intervalsByStartThenEnd());\n\n    if (full != null) {\n      final Map<Interval, Map<String, Map<String, Object>>> retVal = Maps.newTreeMap(comparator);\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            Map<String, Map<String, Object>> dataSourceInterval = retVal.get(dataSegment.getInterval());\n            if (dataSourceInterval == null) {\n              Map<String, Map<String, Object>> tmp = Maps.newHashMap();\n              retVal.put(dataSegment.getInterval(), tmp);\n            }\n            setProperties(retVal, dataSource, dataSegment);\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    if (simple != null) {\n      final Map<Interval, Map<String, Object>> retVal = Maps.newHashMap();\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            Map<String, Object> properties = retVal.get(dataSegment.getInterval());\n            if (properties == null) {\n              properties = Maps.newHashMap();\n              properties.put(\"size\", dataSegment.getSize());\n              properties.put(\"count\", 1);\n\n              retVal.put(dataSegment.getInterval(), properties);\n            } else {\n              properties.put(\"size\", MapUtils.getLong(properties, \"size\", 0L) + dataSegment.getSize());\n              properties.put(\"count\", MapUtils.getInt(properties, \"count\", 0) + 1);\n            }\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    final Map<String, Object> retVal = Maps.newHashMap();\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        if (theInterval.contains(dataSegment.getInterval())) {\n          retVal.put(\"size\", MapUtils.getLong(retVal, \"size\", 0L) + dataSegment.getSize());\n          retVal.put(\"count\", MapUtils.getInt(retVal, \"count\", 0) + 1);\n        }\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","date":"2018-08-31 00:56:26","endLine":165,"groupId":"4033","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSpecificIntervals","params":"(@PathParam(\"interval\")Stringinterval@@QueryParam(\"simple\")Stringsimple@@QueryParam(\"full\")Stringfull@@ContextfinalHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a3/c3c5275b2f31f45609cae2587e345fbd4939aa.src","preCode":"  public Response getSpecificIntervals(\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full,\n      @Context final HttpServletRequest req\n  )\n  {\n    final Interval theInterval = Intervals.of(interval.replace(\"_\", \"/\"));\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Comparator<Interval> comparator = Comparators.inverse(Comparators.intervalsByStartThenEnd());\n\n    if (full != null) {\n      final Map<Interval, Map<String, Map<String, Object>>> retVal = Maps.newTreeMap(comparator);\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            Map<String, Map<String, Object>> dataSourceInterval = retVal.get(dataSegment.getInterval());\n            if (dataSourceInterval == null) {\n              Map<String, Map<String, Object>> tmp = Maps.newHashMap();\n              retVal.put(dataSegment.getInterval(), tmp);\n            }\n            setProperties(retVal, dataSource, dataSegment);\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    if (simple != null) {\n      final Map<Interval, Map<String, Object>> retVal = Maps.newHashMap();\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            Map<String, Object> properties = retVal.get(dataSegment.getInterval());\n            if (properties == null) {\n              properties = Maps.newHashMap();\n              properties.put(\"size\", dataSegment.getSize());\n              properties.put(\"count\", 1);\n\n              retVal.put(dataSegment.getInterval(), properties);\n            } else {\n              properties.put(\"size\", MapUtils.getLong(properties, \"size\", 0L) + dataSegment.getSize());\n              properties.put(\"count\", MapUtils.getInt(properties, \"count\", 0) + 1);\n            }\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    final Map<String, Object> retVal = Maps.newHashMap();\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        if (theInterval.contains(dataSegment.getInterval())) {\n          retVal.put(\"size\", MapUtils.getLong(retVal, \"size\", 0L) + dataSegment.getSize());\n          retVal.put(\"count\", MapUtils.getInt(retVal, \"count\", 0) + 1);\n        }\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/IntervalsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public Response getIntervals(@Context final HttpServletRequest req)\n  {\n    final Comparator<Interval> comparator = Comparators.inverse(Comparators.intervalsByStartThenEnd());\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Map<Interval, Map<String, Map<String, Object>>> retVal = new TreeMap<>(comparator);\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        Map<String, Map<String, Object>> interval = retVal.get(dataSegment.getInterval());\n        if (interval == null) {\n          Map<String, Map<String, Object>> tmp = new HashMap<>();\n          retVal.put(dataSegment.getInterval(), tmp);\n        }\n        setProperties(retVal, dataSource, dataSegment);\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","date":"2018-10-29 20:02:43","endLine":93,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getIntervals","params":"(@ContextfinalHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/29/d92f0982642a7f4da8c2094ea21520b8ce6697.src","preCode":"  public Response getIntervals(@Context final HttpServletRequest req)\n  {\n    final Comparator<Interval> comparator = Comparators.inverse(Comparators.intervalsByStartThenEnd());\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Map<Interval, Map<String, Map<String, Object>>> retVal = Maps.newTreeMap(comparator);\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        Map<String, Map<String, Object>> interval = retVal.get(dataSegment.getInterval());\n        if (interval == null) {\n          Map<String, Map<String, Object>> tmp = Maps.newHashMap();\n          retVal.put(dataSegment.getInterval(), tmp);\n        }\n        setProperties(retVal, dataSource, dataSegment);\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/IntervalsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public Response getSpecificIntervals(\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full,\n      @Context final HttpServletRequest req\n  )\n  {\n    final Interval theInterval = Intervals.of(interval.replace(\"_\", \"/\"));\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Comparator<Interval> comparator = Comparators.inverse(Comparators.intervalsByStartThenEnd());\n\n    if (full != null) {\n      final Map<Interval, Map<String, Map<String, Object>>> retVal = new TreeMap<>(comparator);\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            Map<String, Map<String, Object>> dataSourceInterval = retVal.get(dataSegment.getInterval());\n            if (dataSourceInterval == null) {\n              Map<String, Map<String, Object>> tmp = new HashMap<>();\n              retVal.put(dataSegment.getInterval(), tmp);\n            }\n            setProperties(retVal, dataSource, dataSegment);\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    if (simple != null) {\n      final Map<Interval, Map<String, Object>> retVal = new HashMap<>();\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            Map<String, Object> properties = retVal.get(dataSegment.getInterval());\n            if (properties == null) {\n              properties = new HashMap<>();\n              properties.put(\"size\", dataSegment.getSize());\n              properties.put(\"count\", 1);\n\n              retVal.put(dataSegment.getInterval(), properties);\n            } else {\n              properties.put(\"size\", MapUtils.getLong(properties, \"size\", 0L) + dataSegment.getSize());\n              properties.put(\"count\", MapUtils.getInt(properties, \"count\", 0) + 1);\n            }\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    final Map<String, Object> retVal = new HashMap<>();\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        if (theInterval.contains(dataSegment.getInterval())) {\n          retVal.put(\"size\", MapUtils.getLong(retVal, \"size\", 0L) + dataSegment.getSize());\n          retVal.put(\"count\", MapUtils.getInt(retVal, \"count\", 0) + 1);\n        }\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","date":"2018-10-29 20:02:43","endLine":166,"groupId":"4033","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getSpecificIntervals","params":"(@PathParam(\"interval\")Stringinterval@@QueryParam(\"simple\")Stringsimple@@QueryParam(\"full\")Stringfull@@ContextfinalHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/29/d92f0982642a7f4da8c2094ea21520b8ce6697.src","preCode":"  public Response getSpecificIntervals(\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full,\n      @Context final HttpServletRequest req\n  )\n  {\n    final Interval theInterval = Intervals.of(interval.replace(\"_\", \"/\"));\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Comparator<Interval> comparator = Comparators.inverse(Comparators.intervalsByStartThenEnd());\n\n    if (full != null) {\n      final Map<Interval, Map<String, Map<String, Object>>> retVal = Maps.newTreeMap(comparator);\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            Map<String, Map<String, Object>> dataSourceInterval = retVal.get(dataSegment.getInterval());\n            if (dataSourceInterval == null) {\n              Map<String, Map<String, Object>> tmp = Maps.newHashMap();\n              retVal.put(dataSegment.getInterval(), tmp);\n            }\n            setProperties(retVal, dataSource, dataSegment);\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    if (simple != null) {\n      final Map<Interval, Map<String, Object>> retVal = Maps.newHashMap();\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            Map<String, Object> properties = retVal.get(dataSegment.getInterval());\n            if (properties == null) {\n              properties = Maps.newHashMap();\n              properties.put(\"size\", dataSegment.getSize());\n              properties.put(\"count\", 1);\n\n              retVal.put(dataSegment.getInterval(), properties);\n            } else {\n              properties.put(\"size\", MapUtils.getLong(properties, \"size\", 0L) + dataSegment.getSize());\n              properties.put(\"count\", MapUtils.getInt(properties, \"count\", 0) + 1);\n            }\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    final Map<String, Object> retVal = Maps.newHashMap();\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        if (theInterval.contains(dataSegment.getInterval())) {\n          retVal.put(\"size\", MapUtils.getLong(retVal, \"size\", 0L) + dataSegment.getSize());\n          retVal.put(\"count\", MapUtils.getInt(retVal, \"count\", 0) + 1);\n        }\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/IntervalsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2018-11-07 06:38:08","codes":[{"authorDate":"2018-11-07 06:38:08","commitOrder":3,"curCode":"  public Response getIntervals(@Context final HttpServletRequest req)\n  {\n    final Comparator<Interval> comparator = Comparators.intervalsByStartThenEnd().reversed();\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Map<Interval, Map<String, Map<String, Object>>> retVal = new TreeMap<>(comparator);\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        retVal.computeIfAbsent(dataSegment.getInterval(), i -> new HashMap<>());\n        setProperties(retVal, dataSource, dataSegment);\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","date":"2018-11-07 06:38:08","endLine":89,"groupId":"4723","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getIntervals","params":"(@ContextfinalHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/56/357944c5fd897d7247722c5e8b5f511f7ee38d.src","preCode":"  public Response getIntervals(@Context final HttpServletRequest req)\n  {\n    final Comparator<Interval> comparator = Comparators.inverse(Comparators.intervalsByStartThenEnd());\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Map<Interval, Map<String, Map<String, Object>>> retVal = new TreeMap<>(comparator);\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        Map<String, Map<String, Object>> interval = retVal.get(dataSegment.getInterval());\n        if (interval == null) {\n          Map<String, Map<String, Object>> tmp = new HashMap<>();\n          retVal.put(dataSegment.getInterval(), tmp);\n        }\n        setProperties(retVal, dataSource, dataSegment);\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/IntervalsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2018-11-07 06:38:08","commitOrder":3,"curCode":"  public Response getSpecificIntervals(\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full,\n      @Context final HttpServletRequest req\n  )\n  {\n    final Interval theInterval = Intervals.of(interval.replace(\"_\", \"/\"));\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Comparator<Interval> comparator = Comparators.intervalsByStartThenEnd().reversed();\n\n    if (full != null) {\n      final Map<Interval, Map<String, Map<String, Object>>> retVal = new TreeMap<>(comparator);\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            retVal.computeIfAbsent(dataSegment.getInterval(), k -> new HashMap<>());\n            setProperties(retVal, dataSource, dataSegment);\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    if (simple != null) {\n      final Map<Interval, Map<String, Object>> retVal = new HashMap<>();\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            Map<String, Object> properties = retVal.get(dataSegment.getInterval());\n            if (properties == null) {\n              properties = new HashMap<>();\n              properties.put(\"size\", dataSegment.getSize());\n              properties.put(\"count\", 1);\n\n              retVal.put(dataSegment.getInterval(), properties);\n            } else {\n              properties.put(\"size\", MapUtils.getLong(properties, \"size\", 0L) + dataSegment.getSize());\n              properties.put(\"count\", MapUtils.getInt(properties, \"count\", 0) + 1);\n            }\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    final Map<String, Object> retVal = new HashMap<>();\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        if (theInterval.contains(dataSegment.getInterval())) {\n          retVal.put(\"size\", MapUtils.getLong(retVal, \"size\", 0L) + dataSegment.getSize());\n          retVal.put(\"count\", MapUtils.getInt(retVal, \"count\", 0) + 1);\n        }\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","date":"2018-11-07 06:38:08","endLine":158,"groupId":"4033","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getSpecificIntervals","params":"(@PathParam(\"interval\")Stringinterval@@QueryParam(\"simple\")Stringsimple@@QueryParam(\"full\")Stringfull@@ContextfinalHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/56/357944c5fd897d7247722c5e8b5f511f7ee38d.src","preCode":"  public Response getSpecificIntervals(\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full,\n      @Context final HttpServletRequest req\n  )\n  {\n    final Interval theInterval = Intervals.of(interval.replace(\"_\", \"/\"));\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Comparator<Interval> comparator = Comparators.inverse(Comparators.intervalsByStartThenEnd());\n\n    if (full != null) {\n      final Map<Interval, Map<String, Map<String, Object>>> retVal = new TreeMap<>(comparator);\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            Map<String, Map<String, Object>> dataSourceInterval = retVal.get(dataSegment.getInterval());\n            if (dataSourceInterval == null) {\n              Map<String, Map<String, Object>> tmp = new HashMap<>();\n              retVal.put(dataSegment.getInterval(), tmp);\n            }\n            setProperties(retVal, dataSource, dataSegment);\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    if (simple != null) {\n      final Map<Interval, Map<String, Object>> retVal = new HashMap<>();\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            Map<String, Object> properties = retVal.get(dataSegment.getInterval());\n            if (properties == null) {\n              properties = new HashMap<>();\n              properties.put(\"size\", dataSegment.getSize());\n              properties.put(\"count\", 1);\n\n              retVal.put(dataSegment.getInterval(), properties);\n            } else {\n              properties.put(\"size\", MapUtils.getLong(properties, \"size\", 0L) + dataSegment.getSize());\n              properties.put(\"count\", MapUtils.getInt(properties, \"count\", 0) + 1);\n            }\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    final Map<String, Object> retVal = new HashMap<>();\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        if (theInterval.contains(dataSegment.getInterval())) {\n          retVal.put(\"size\", MapUtils.getLong(retVal, \"size\", 0L) + dataSegment.getSize());\n          retVal.put(\"count\", MapUtils.getInt(retVal, \"count\", 0) + 1);\n        }\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/IntervalsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"54351a5c75d8902d1d4c2eb2f6590bcf126348d4","commitMessage":"@@@Fix various bugs; Enable more IntelliJ inspections and update error-prone (#6490)\n\n* Fix various bugs; Enable more IntelliJ inspections and update error-prone\n\n* Fix NPE\n\n* Fix inspections\n\n* Remove unused imports\n","date":"2018-11-07 06:38:08","modifiedFileCount":"93","status":"M","submitter":"Roman Leventov"},{"authorTime":"2018-11-16 05:21:34","codes":[{"authorDate":"2018-11-07 06:38:08","commitOrder":4,"curCode":"  public Response getIntervals(@Context final HttpServletRequest req)\n  {\n    final Comparator<Interval> comparator = Comparators.intervalsByStartThenEnd().reversed();\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Map<Interval, Map<String, Map<String, Object>>> retVal = new TreeMap<>(comparator);\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        retVal.computeIfAbsent(dataSegment.getInterval(), i -> new HashMap<>());\n        setProperties(retVal, dataSource, dataSegment);\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","date":"2018-11-07 06:38:08","endLine":89,"groupId":"101174","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getIntervals","params":"(@ContextfinalHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/56/357944c5fd897d7247722c5e8b5f511f7ee38d.src","preCode":"  public Response getIntervals(@Context final HttpServletRequest req)\n  {\n    final Comparator<Interval> comparator = Comparators.intervalsByStartThenEnd().reversed();\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Map<Interval, Map<String, Map<String, Object>>> retVal = new TreeMap<>(comparator);\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        retVal.computeIfAbsent(dataSegment.getInterval(), i -> new HashMap<>());\n        setProperties(retVal, dataSource, dataSegment);\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/IntervalsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2018-11-16 05:21:34","commitOrder":4,"curCode":"  public Response getSpecificIntervals(\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full,\n      @Context final HttpServletRequest req\n  )\n  {\n    final Interval theInterval = Intervals.of(interval.replace('_', '/'));\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Comparator<Interval> comparator = Comparators.intervalsByStartThenEnd().reversed();\n\n    if (full != null) {\n      final Map<Interval, Map<String, Map<String, Object>>> retVal = new TreeMap<>(comparator);\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            retVal.computeIfAbsent(dataSegment.getInterval(), k -> new HashMap<>());\n            setProperties(retVal, dataSource, dataSegment);\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    if (simple != null) {\n      final Map<Interval, Map<String, Object>> retVal = new HashMap<>();\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            Map<String, Object> properties = retVal.get(dataSegment.getInterval());\n            if (properties == null) {\n              properties = new HashMap<>();\n              properties.put(\"size\", dataSegment.getSize());\n              properties.put(\"count\", 1);\n\n              retVal.put(dataSegment.getInterval(), properties);\n            } else {\n              properties.put(\"size\", MapUtils.getLong(properties, \"size\", 0L) + dataSegment.getSize());\n              properties.put(\"count\", MapUtils.getInt(properties, \"count\", 0) + 1);\n            }\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    final Map<String, Object> retVal = new HashMap<>();\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        if (theInterval.contains(dataSegment.getInterval())) {\n          retVal.put(\"size\", MapUtils.getLong(retVal, \"size\", 0L) + dataSegment.getSize());\n          retVal.put(\"count\", MapUtils.getInt(retVal, \"count\", 0) + 1);\n        }\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","date":"2018-11-16 05:21:34","endLine":158,"groupId":"101174","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"getSpecificIntervals","params":"(@PathParam(\"interval\")Stringinterval@@QueryParam(\"simple\")Stringsimple@@QueryParam(\"full\")Stringfull@@ContextfinalHttpServletRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/95/7075ae6e90d9542009165a4b5572c2b76f00b2.src","preCode":"  public Response getSpecificIntervals(\n      @PathParam(\"interval\") String interval,\n      @QueryParam(\"simple\") String simple,\n      @QueryParam(\"full\") String full,\n      @Context final HttpServletRequest req\n  )\n  {\n    final Interval theInterval = Intervals.of(interval.replace(\"_\", \"/\"));\n    final Set<ImmutableDruidDataSource> datasources = InventoryViewUtils.getSecuredDataSources(\n        req,\n        serverInventoryView,\n        authorizerMapper\n    );\n\n    final Comparator<Interval> comparator = Comparators.intervalsByStartThenEnd().reversed();\n\n    if (full != null) {\n      final Map<Interval, Map<String, Map<String, Object>>> retVal = new TreeMap<>(comparator);\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            retVal.computeIfAbsent(dataSegment.getInterval(), k -> new HashMap<>());\n            setProperties(retVal, dataSource, dataSegment);\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    if (simple != null) {\n      final Map<Interval, Map<String, Object>> retVal = new HashMap<>();\n      for (ImmutableDruidDataSource dataSource : datasources) {\n        for (DataSegment dataSegment : dataSource.getSegments()) {\n          if (theInterval.contains(dataSegment.getInterval())) {\n            Map<String, Object> properties = retVal.get(dataSegment.getInterval());\n            if (properties == null) {\n              properties = new HashMap<>();\n              properties.put(\"size\", dataSegment.getSize());\n              properties.put(\"count\", 1);\n\n              retVal.put(dataSegment.getInterval(), properties);\n            } else {\n              properties.put(\"size\", MapUtils.getLong(properties, \"size\", 0L) + dataSegment.getSize());\n              properties.put(\"count\", MapUtils.getInt(properties, \"count\", 0) + 1);\n            }\n          }\n        }\n      }\n\n      return Response.ok(retVal).build();\n    }\n\n    final Map<String, Object> retVal = new HashMap<>();\n    for (ImmutableDruidDataSource dataSource : datasources) {\n      for (DataSegment dataSegment : dataSource.getSegments()) {\n        if (theInterval.contains(dataSegment.getInterval())) {\n          retVal.put(\"size\", MapUtils.getLong(retVal, \"size\", 0L) + dataSegment.getSize());\n          retVal.put(\"count\", MapUtils.getInt(retVal, \"count\", 0) + 1);\n        }\n      }\n    }\n\n    return Response.ok(retVal).build();\n  }\n","realPath":"server/src/main/java/org/apache/druid/server/http/IntervalsResource.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"8f3fe9cd028592b4b1449c2a5e6dba482bed0549","commitMessage":"@@@Prohibit String.replace() and String.replaceAll().  fix and prohibit some toString()-related redundancies (#6607)\n\n* Prohibit String.replace() and String.replaceAll().  fix and prohibit some toString()-related redundancies\n\n* Fix bug\n\n* Replace checkstyle regexp with IntelliJ inspection\n","date":"2018-11-16 05:21:34","modifiedFileCount":"97","status":"M","submitter":"Roman Leventov"}]
