[{"authorTime":"2019-07-05 06:40:03","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testDateTrunc()\n  {\n    testExpression(\n        rexBuilder.makeCall(\n            new DateTruncOperatorConversion().calciteOperator(),\n            rexBuilder.makeLiteral(\"hour\"),\n            timestampLiteral(DateTimes.of(\"2000-02-03T04:05:06Z\"))\n        ),\n        DruidExpression.fromExpression(\"timestamp_floor(949550706000,'PT1H',null,'UTC')\"),\n        DateTimes.of(\"2000-02-03T04:00:00\").getMillis()\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new DateTruncOperatorConversion().calciteOperator(),\n            rexBuilder.makeLiteral(\"DAY\"),\n            timestampLiteral(DateTimes.of(\"2000-02-03T04:05:06Z\"))\n        ),\n        DruidExpression.fromExpression(\"timestamp_floor(949550706000,'P1D',null,'UTC')\"),\n        DateTimes.of(\"2000-02-03T00:00:00\").getMillis()\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":343,"groupId":"1485","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDateTrunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f7/db35d3fe5cac9e5fc661f7e79b60caa6d0bc16.src","preCode":"  public void testDateTrunc()\n  {\n    testExpression(\n        rexBuilder.makeCall(\n            new DateTruncOperatorConversion().calciteOperator(),\n            rexBuilder.makeLiteral(\"hour\"),\n            timestampLiteral(DateTimes.of(\"2000-02-03T04:05:06Z\"))\n        ),\n        DruidExpression.fromExpression(\"timestamp_floor(949550706000,'PT1H',null,'UTC')\"),\n        DateTimes.of(\"2000-02-03T04:00:00\").getMillis()\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new DateTruncOperatorConversion().calciteOperator(),\n            rexBuilder.makeLiteral(\"DAY\"),\n            timestampLiteral(DateTimes.of(\"2000-02-03T04:05:06Z\"))\n        ),\n        DruidExpression.fromExpression(\"timestamp_floor(949550706000,'P1D',null,'UTC')\"),\n        DateTimes.of(\"2000-02-03T00:00:00\").getMillis()\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"NB"},{"authorDate":"2019-07-05 06:40:03","commitOrder":2,"curCode":"  public void testTimeCeil()\n  {\n    testExpression(\n        rexBuilder.makeCall(\n            new TimeCeilOperatorConversion().calciteOperator(),\n            timestampLiteral(DateTimes.of(\"2000-02-03T04:05:06Z\")),\n            rexBuilder.makeLiteral(\"PT1H\")\n        ),\n        DruidExpression.fromExpression(\"timestamp_ceil(949550706000,'PT1H',null,'UTC')\"),\n        DateTimes.of(\"2000-02-03T05:00:00\").getMillis()\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new TimeCeilOperatorConversion().calciteOperator(),\n            inputRef(\"t\"),\n            rexBuilder.makeLiteral(\"P1D\"),\n            rexBuilder.makeNullLiteral(typeFactory.createSqlType(SqlTypeName.TIMESTAMP)),\n            rexBuilder.makeLiteral(\"America/Los_Angeles\")\n        ),\n        DruidExpression.fromExpression(\"timestamp_ceil(\\\"t\\\",'P1D',null,'America/Los_Angeles')\"),\n        DateTimes.of(\"2000-02-03T08:00:00\").getMillis()\n    );\n  }\n","date":"2019-07-05 06:40:03","endLine":702,"groupId":"18093","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeCeil","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3a/5ba951e3f9991d7db2f1401e7ec8f2ab33b911.src","preCode":"  public void testTimeCeil()\n  {\n    testExpression(\n        rexBuilder.makeCall(\n            new TimeCeilOperatorConversion().calciteOperator(),\n            timestampLiteral(DateTimes.of(\"2000-02-03T04:05:06Z\")),\n            rexBuilder.makeLiteral(\"PT1H\")\n        ),\n        DruidExpression.fromExpression(\"timestamp_ceil(949550706000,'PT1H',null,'UTC')\"),\n        DateTimes.of(\"2000-02-03T05:00:00\").getMillis()\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new TimeCeilOperatorConversion().calciteOperator(),\n            inputRef(\"t\"),\n            rexBuilder.makeLiteral(\"P1D\"),\n            rexBuilder.makeNullLiteral(typeFactory.createSqlType(SqlTypeName.TIMESTAMP)),\n            rexBuilder.makeLiteral(\"America/Los_Angeles\")\n        ),\n        DruidExpression.fromExpression(\"timestamp_ceil(\\\"t\\\",'P1D',null,'America/Los_Angeles')\"),\n        DateTimes.of(\"2000-02-03T08:00:00\").getMillis()\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":679,"status":"B"}],"commitId":"613f09b45a287c169f288aa3f53eb13d21e79249","commitMessage":"@@@SQL: Add TIME_CEIL function. (#8027)\n\nAlso simplify conversions for CEIL.  FLOOR.  and TIME_FLOOR by allowing them to\nshare more code.","date":"2019-07-05 06:40:03","modifiedFileCount":"6","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-08-02 12:29:58","codes":[{"authorDate":"2019-08-02 12:29:58","commitOrder":3,"curCode":"  public void testDateTrunc()\n  {\n    testHelper.testExpression(\n        new DateTruncOperatorConversion().calciteOperator(),\n        ImmutableList.of(\n            testHelper.makeLiteral(\"hour\"),\n            testHelper.makeLiteral(DateTimes.of(\"2000-02-03T04:05:06Z\"))\n        ),\n        DruidExpression.fromExpression(\"timestamp_floor(949550706000,'PT1H',null,'UTC')\"),\n        DateTimes.of(\"2000-02-03T04:00:00\").getMillis()\n    );\n\n    testHelper.testExpression(\n        new DateTruncOperatorConversion().calciteOperator(),\n        ImmutableList.of(\n            testHelper.makeLiteral(\"DAY\"),\n            testHelper.makeLiteral(DateTimes.of(\"2000-02-03T04:05:06Z\"))\n        ),\n        DruidExpression.fromExpression(\"timestamp_floor(949550706000,'P1D',null,'UTC')\"),\n        DateTimes.of(\"2000-02-03T00:00:00\").getMillis()\n    );\n  }\n","date":"2019-08-02 12:29:58","endLine":593,"groupId":"101849","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDateTrunc","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/35/267c843f709aa8a7c3387e0c290037c57428de.src","preCode":"  public void testDateTrunc()\n  {\n    testExpression(\n        rexBuilder.makeCall(\n            new DateTruncOperatorConversion().calciteOperator(),\n            rexBuilder.makeLiteral(\"hour\"),\n            timestampLiteral(DateTimes.of(\"2000-02-03T04:05:06Z\"))\n        ),\n        DruidExpression.fromExpression(\"timestamp_floor(949550706000,'PT1H',null,'UTC')\"),\n        DateTimes.of(\"2000-02-03T04:00:00\").getMillis()\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new DateTruncOperatorConversion().calciteOperator(),\n            rexBuilder.makeLiteral(\"DAY\"),\n            timestampLiteral(DateTimes.of(\"2000-02-03T04:05:06Z\"))\n        ),\n        DruidExpression.fromExpression(\"timestamp_floor(949550706000,'P1D',null,'UTC')\"),\n        DateTimes.of(\"2000-02-03T00:00:00\").getMillis()\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":572,"status":"M"},{"authorDate":"2019-08-02 12:29:58","commitOrder":3,"curCode":"  public void testTimeCeil()\n  {\n    testHelper.testExpression(\n        new TimeCeilOperatorConversion().calciteOperator(),\n        ImmutableList.of(\n            testHelper.makeLiteral(DateTimes.of(\"2000-02-03T04:05:06Z\")),\n            testHelper.makeLiteral(\"PT1H\")\n        ),\n        DruidExpression.fromExpression(\"timestamp_ceil(949550706000,'PT1H',null,'UTC')\"),\n        DateTimes.of(\"2000-02-03T05:00:00\").getMillis()\n    );\n\n    testHelper.testExpression(\n        new TimeCeilOperatorConversion().calciteOperator(),\n        ImmutableList.of(\n            testHelper.makeInputRef(\"t\"),\n            testHelper.makeLiteral(\"P1D\"),\n            testHelper.makeNullLiteral(SqlTypeName.TIMESTAMP),\n            testHelper.makeLiteral(\"America/Los_Angeles\")\n        ),\n        DruidExpression.fromExpression(\"timestamp_ceil(\\\"t\\\",'P1D',null,'America/Los_Angeles')\"),\n        DateTimes.of(\"2000-02-03T08:00:00\").getMillis()\n    );\n  }\n","date":"2019-08-02 12:29:58","endLine":725,"groupId":"101849","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeCeil","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/35/267c843f709aa8a7c3387e0c290037c57428de.src","preCode":"  public void testTimeCeil()\n  {\n    testExpression(\n        rexBuilder.makeCall(\n            new TimeCeilOperatorConversion().calciteOperator(),\n            timestampLiteral(DateTimes.of(\"2000-02-03T04:05:06Z\")),\n            rexBuilder.makeLiteral(\"PT1H\")\n        ),\n        DruidExpression.fromExpression(\"timestamp_ceil(949550706000,'PT1H',null,'UTC')\"),\n        DateTimes.of(\"2000-02-03T05:00:00\").getMillis()\n    );\n\n    testExpression(\n        rexBuilder.makeCall(\n            new TimeCeilOperatorConversion().calciteOperator(),\n            inputRef(\"t\"),\n            rexBuilder.makeLiteral(\"P1D\"),\n            rexBuilder.makeNullLiteral(typeFactory.createSqlType(SqlTypeName.TIMESTAMP)),\n            rexBuilder.makeLiteral(\"America/Los_Angeles\")\n        ),\n        DruidExpression.fromExpression(\"timestamp_ceil(\\\"t\\\",'P1D',null,'America/Los_Angeles')\"),\n        DateTimes.of(\"2000-02-03T08:00:00\").getMillis()\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":702,"status":"M"}],"commitId":"4bd3bad8ba960c9dd4166336eebe019a39d00562","commitMessage":"@@@Add IPv4 SQL functions (#8223)\n\n* Add IPv4 SQL functions\n\nNew SQL functions for filtering IPv4 addresses:\n- IPV4_MATCH: Check if IP address belongs to a subnet\n- IPV4_PARSE: Convert string IP address to integer\n- IPV4_STRINGIFY: Convert integer IP address to string\n\nThese are the SQL analogs of the druid expressions with the same name.\nFiltering is more efficient when operating on IP addresses as integers\ninstead of strings.\n\n* Refactor operator conversions into named constants\n","date":"2019-08-02 12:29:58","modifiedFileCount":"2","status":"M","submitter":"Chi Cao Minh"}]
