[{"authorTime":"2020-04-26 04:47:07","codes":[{"authorDate":"2020-04-26 04:47:07","commitOrder":1,"curCode":"  public void testMultivalDim_mergeAcrossSegments_rollupWorks() throws Exception\n  {\n    List<String> dims = Arrays.asList(\n        \"dimA\",\n        \"dimMultiVal\"\n    );\n\n    IncrementalIndexSchema indexSchema = new IncrementalIndexSchema.Builder()\n        .withDimensionsSpec(\n            new DimensionsSpec(\n                ImmutableList.of(\n                    new StringDimensionSchema(\"dimA\", MultiValueHandling.SORTED_ARRAY, true),\n                    new StringDimensionSchema(\"dimMultiVal\", MultiValueHandling.SORTED_ARRAY, true)\n                )\n            )\n        )\n        .withMetrics(\n            new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n        )\n        .withRollup(true)\n        .build();\n\n    IncrementalIndex toPersistA = new IncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    Map<String, Object> event1 = new HashMap<>();\n    event1.put(\"dimA\", \"leek\");\n    event1.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"4\"));\n    event1.put(\"sumCount\", 1L);\n\n    Map<String, Object> event2 = new HashMap<>();\n    event2.put(\"dimA\", \"leek\");\n    event2.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\", \"5\"));\n    event2.put(\"sumCount\", 1L);\n\n    toPersistA.add(new MapBasedInputRow(1, dims, event1));\n    toPersistA.add(new MapBasedInputRow(1, dims, event2));\n\n    IncrementalIndex toPersistB = new IncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    Map<String, Object> event3 = new HashMap<>();\n    event3.put(\"dimA\", \"leek\");\n    event3.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"4\"));\n    event3.put(\"sumCount\", 1L);\n\n    Map<String, Object> event4 = new HashMap<>();\n    event4.put(\"dimA\", \"potato\");\n    event4.put(\"dimMultiVal\", ImmutableList.of(\"0\", \"1\", \"4\"));\n    event4.put(\"sumCount\", 1L);\n\n    toPersistB.add(new MapBasedInputRow(1, dims, event3));\n    toPersistB.add(new MapBasedInputRow(1, dims, event4));\n\n    final File tmpDirA = temporaryFolder.newFolder();\n    final File tmpDirB = temporaryFolder.newFolder();\n    final File tmpDirMerged = temporaryFolder.newFolder();\n\n    QueryableIndex indexA = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistA, tmpDirA, indexSpec, null))\n    );\n\n    QueryableIndex indexB = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistB, tmpDirB, indexSpec, null))\n    );\n\n    final QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                Arrays.asList(indexA, indexB),\n                true,\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n                },\n                tmpDirMerged,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    final QueryableIndexIndexableAdapter adapter = new QueryableIndexIndexableAdapter(merged);\n    final List<DebugRow> rowList = RowIteratorHelper.toList(adapter.getRows());\n\n    Assert.assertEquals(\n        ImmutableList.of(\"dimA\", \"dimMultiVal\"),\n        ImmutableList.copyOf(adapter.getDimensionNames())\n    );\n\n    Assert.assertEquals(3, rowList.size());\n    Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\", \"5\")), rowList.get(0).dimensionValues());\n    Assert.assertEquals(1L, rowList.get(0).metricValues().get(0));\n    Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"4\")), rowList.get(1).dimensionValues());\n    Assert.assertEquals(2L, rowList.get(1).metricValues().get(0));\n    Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"0\", \"1\", \"4\")), rowList.get(2).dimensionValues());\n    Assert.assertEquals(1L, rowList.get(2).metricValues().get(0));\n\n    checkBitmapIndex(Arrays.asList(0, 1), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n    checkBitmapIndex(Collections.singletonList(2), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n    checkBitmapIndex(Collections.singletonList(2), adapter.getBitmapIndex(\"dimMultiVal\", \"0\"));\n    checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n    checkBitmapIndex(Arrays.asList(0, 1), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n    checkBitmapIndex(Collections.singletonList(0), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n    checkBitmapIndex(Arrays.asList(1, 2), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n    checkBitmapIndex(Collections.singletonList(0), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n  }\n","date":"2020-04-26 04:47:07","endLine":2325,"groupId":"13765","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultivalDim_mergeAcrossSegments_rollupWorks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b2/53614cc3d70f73d7100570293a8a77a8fc7b7c.src","preCode":"  public void testMultivalDim_mergeAcrossSegments_rollupWorks() throws Exception\n  {\n    List<String> dims = Arrays.asList(\n        \"dimA\",\n        \"dimMultiVal\"\n    );\n\n    IncrementalIndexSchema indexSchema = new IncrementalIndexSchema.Builder()\n        .withDimensionsSpec(\n            new DimensionsSpec(\n                ImmutableList.of(\n                    new StringDimensionSchema(\"dimA\", MultiValueHandling.SORTED_ARRAY, true),\n                    new StringDimensionSchema(\"dimMultiVal\", MultiValueHandling.SORTED_ARRAY, true)\n                )\n            )\n        )\n        .withMetrics(\n            new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n        )\n        .withRollup(true)\n        .build();\n\n    IncrementalIndex toPersistA = new IncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    Map<String, Object> event1 = new HashMap<>();\n    event1.put(\"dimA\", \"leek\");\n    event1.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"4\"));\n    event1.put(\"sumCount\", 1L);\n\n    Map<String, Object> event2 = new HashMap<>();\n    event2.put(\"dimA\", \"leek\");\n    event2.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\", \"5\"));\n    event2.put(\"sumCount\", 1L);\n\n    toPersistA.add(new MapBasedInputRow(1, dims, event1));\n    toPersistA.add(new MapBasedInputRow(1, dims, event2));\n\n    IncrementalIndex toPersistB = new IncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    Map<String, Object> event3 = new HashMap<>();\n    event3.put(\"dimA\", \"leek\");\n    event3.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"4\"));\n    event3.put(\"sumCount\", 1L);\n\n    Map<String, Object> event4 = new HashMap<>();\n    event4.put(\"dimA\", \"potato\");\n    event4.put(\"dimMultiVal\", ImmutableList.of(\"0\", \"1\", \"4\"));\n    event4.put(\"sumCount\", 1L);\n\n    toPersistB.add(new MapBasedInputRow(1, dims, event3));\n    toPersistB.add(new MapBasedInputRow(1, dims, event4));\n\n    final File tmpDirA = temporaryFolder.newFolder();\n    final File tmpDirB = temporaryFolder.newFolder();\n    final File tmpDirMerged = temporaryFolder.newFolder();\n\n    QueryableIndex indexA = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistA, tmpDirA, indexSpec, null))\n    );\n\n    QueryableIndex indexB = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistB, tmpDirB, indexSpec, null))\n    );\n\n    final QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                Arrays.asList(indexA, indexB),\n                true,\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n                },\n                tmpDirMerged,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    final QueryableIndexIndexableAdapter adapter = new QueryableIndexIndexableAdapter(merged);\n    final List<DebugRow> rowList = RowIteratorHelper.toList(adapter.getRows());\n\n    Assert.assertEquals(\n        ImmutableList.of(\"dimA\", \"dimMultiVal\"),\n        ImmutableList.copyOf(adapter.getDimensionNames())\n    );\n\n    Assert.assertEquals(3, rowList.size());\n    Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\", \"5\")), rowList.get(0).dimensionValues());\n    Assert.assertEquals(1L, rowList.get(0).metricValues().get(0));\n    Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"4\")), rowList.get(1).dimensionValues());\n    Assert.assertEquals(2L, rowList.get(1).metricValues().get(0));\n    Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"0\", \"1\", \"4\")), rowList.get(2).dimensionValues());\n    Assert.assertEquals(1L, rowList.get(2).metricValues().get(0));\n\n    checkBitmapIndex(Arrays.asList(0, 1), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n    checkBitmapIndex(Collections.singletonList(2), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n    checkBitmapIndex(Collections.singletonList(2), adapter.getBitmapIndex(\"dimMultiVal\", \"0\"));\n    checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n    checkBitmapIndex(Arrays.asList(0, 1), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n    checkBitmapIndex(Collections.singletonList(0), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n    checkBitmapIndex(Arrays.asList(1, 2), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n    checkBitmapIndex(Collections.singletonList(0), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2215,"status":"B"},{"authorDate":"2020-04-26 04:47:07","commitOrder":1,"curCode":"  public void testMultivalDim_persistAndMerge_dimensionValueOrderingRules() throws Exception\n  {\n    List<String> dims = Arrays.asList(\n        \"dimA\",\n        \"dimMultiVal\"\n    );\n\n    IncrementalIndexSchema indexSchema = new IncrementalIndexSchema.Builder()\n        .withDimensionsSpec(\n            new DimensionsSpec(\n                ImmutableList.of(\n                    new StringDimensionSchema(\"dimA\", MultiValueHandling.SORTED_ARRAY, true),\n                    new StringDimensionSchema(\"dimMultiVal\", MultiValueHandling.SORTED_ARRAY, true)\n                )\n            )\n        )\n        .withMetrics(\n            new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n        )\n        .withRollup(true)\n        .build();\n\n    Map<String, Object> nullEvent = new HashMap<>();\n    nullEvent.put(\"dimA\", \"leek\");\n    nullEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> nullEvent2 = new HashMap<>();\n    nullEvent2.put(\"dimA\", \"leek\");\n    nullEvent2.put(\"dimMultiVal\", null);\n    nullEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> emptyListEvent = new HashMap<>();\n    emptyListEvent.put(\"dimA\", \"leek\");\n    emptyListEvent.put(\"dimMultiVal\", ImmutableList.of());\n    emptyListEvent.put(\"sumCount\", 1L);\n\n    List<String> listWithNull = new ArrayList<>();\n    listWithNull.add(null);\n    Map<String, Object> listWithNullEvent = new HashMap<>();\n    listWithNullEvent.put(\"dimA\", \"leek\");\n    listWithNullEvent.put(\"dimMultiVal\", listWithNull);\n    listWithNullEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> emptyStringEvent = new HashMap<>();\n    emptyStringEvent.put(\"dimA\", \"leek\");\n    emptyStringEvent.put(\"dimMultiVal\", \"\");\n    emptyStringEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithEmptyStringEvent = new HashMap<>();\n    listWithEmptyStringEvent.put(\"dimA\", \"leek\");\n    listWithEmptyStringEvent.put(\"dimMultiVal\", ImmutableList.of(\"\"));\n    listWithEmptyStringEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent = new HashMap<>();\n    singleValEvent.put(\"dimA\", \"leek\");\n    singleValEvent.put(\"dimMultiVal\", \"1\");\n    singleValEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent2 = new HashMap<>();\n    singleValEvent2.put(\"dimA\", \"leek\");\n    singleValEvent2.put(\"dimMultiVal\", \"2\");\n    singleValEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent3 = new HashMap<>();\n    singleValEvent3.put(\"dimA\", \"potato\");\n    singleValEvent3.put(\"dimMultiVal\", \"2\");\n    singleValEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent = new HashMap<>();\n    listWithSingleValEvent.put(\"dimA\", \"leek\");\n    listWithSingleValEvent.put(\"dimMultiVal\", ImmutableList.of(\"1\"));\n    listWithSingleValEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent2 = new HashMap<>();\n    listWithSingleValEvent2.put(\"dimA\", \"leek\");\n    listWithSingleValEvent2.put(\"dimMultiVal\", ImmutableList.of(\"2\"));\n    listWithSingleValEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent3 = new HashMap<>();\n    listWithSingleValEvent3.put(\"dimA\", \"potato\");\n    listWithSingleValEvent3.put(\"dimMultiVal\", ImmutableList.of(\"2\"));\n    listWithSingleValEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent = new HashMap<>();\n    multivalEvent.put(\"dimA\", \"leek\");\n    multivalEvent.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\"));\n    multivalEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent2 = new HashMap<>();\n    multivalEvent2.put(\"dimA\", \"leek\");\n    multivalEvent2.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"4\"));\n    multivalEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent3 = new HashMap<>();\n    multivalEvent3.put(\"dimA\", \"leek\");\n    multivalEvent3.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\", \"5\"));\n    multivalEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent4 = new HashMap<>();\n    multivalEvent4.put(\"dimA\", \"leek\");\n    multivalEvent4.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\"));\n    multivalEvent4.put(\"sumCount\", 1L);\n\n    List<String> multivalEvent5List = Arrays.asList(\"1\", \"2\", \"3\", null);\n    Map<String, Object> multivalEvent5 = new HashMap<>();\n    multivalEvent5.put(\"dimA\", \"leek\");\n    multivalEvent5.put(\"dimMultiVal\", multivalEvent5List);\n    multivalEvent5.put(\"sumCount\", 1L);\n\n    List<String> multivalEvent6List = Arrays.asList(null, \"3\");\n    Map<String, Object> multivalEvent6 = new HashMap<>();\n    multivalEvent6.put(\"dimA\", \"leek\");\n    multivalEvent6.put(\"dimMultiVal\", multivalEvent6List);\n    multivalEvent6.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent7 = new HashMap<>();\n    multivalEvent7.put(\"dimA\", \"leek\");\n    multivalEvent7.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\", \"\"));\n    multivalEvent7.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent8 = new HashMap<>();\n    multivalEvent8.put(\"dimA\", \"leek\");\n    multivalEvent8.put(\"dimMultiVal\", ImmutableList.of(\"\", \"3\"));\n    multivalEvent8.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent9 = new HashMap<>();\n    multivalEvent9.put(\"dimA\", \"potato\");\n    multivalEvent9.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\"));\n    multivalEvent9.put(\"sumCount\", 1L);\n\n    List<Map<String, Object>> events = ImmutableList.of(\n        nullEvent,\n        nullEvent2,\n        emptyListEvent,\n        listWithNullEvent,\n        emptyStringEvent,\n        listWithEmptyStringEvent,\n        singleValEvent,\n        singleValEvent2,\n        singleValEvent3,\n        listWithSingleValEvent,\n        listWithSingleValEvent2,\n        listWithSingleValEvent3,\n        multivalEvent,\n        multivalEvent2,\n        multivalEvent3,\n        multivalEvent4,\n        multivalEvent5,\n        multivalEvent6,\n        multivalEvent7,\n        multivalEvent8,\n        multivalEvent9\n    );\n\n    IncrementalIndex toPersistA = new IncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    for (Map<String, Object> event : events) {\n      toPersistA.add(new MapBasedInputRow(1, dims, event));\n    }\n\n    final File tmpDirA = temporaryFolder.newFolder();\n    QueryableIndex indexA = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistA, tmpDirA, indexSpec, null))\n    );\n\n    List<QueryableIndex> singleEventIndexes = new ArrayList<>();\n    for (Map<String, Object> event : events) {\n      IncrementalIndex toPersist = new IncrementalIndex.Builder()\n          .setIndexSchema(indexSchema)\n          .setMaxRowCount(1000)\n          .buildOnheap();\n\n      toPersist.add(new MapBasedInputRow(1, dims, event));\n      final File tmpDir = temporaryFolder.newFolder();\n      QueryableIndex queryableIndex = closer.closeLater(\n          indexIO.loadIndex(indexMerger.persist(toPersist, tmpDir, indexSpec, null))\n      );\n      singleEventIndexes.add(queryableIndex);\n    }\n    singleEventIndexes.add(indexA);\n\n    final File tmpDirMerged = temporaryFolder.newFolder();\n    final QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                singleEventIndexes,\n                true,\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n                },\n                tmpDirMerged,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    final QueryableIndexIndexableAdapter adapter = new QueryableIndexIndexableAdapter(merged);\n    final List<DebugRow> rowList = RowIteratorHelper.toList(adapter.getRows());\n\n    Assert.assertEquals(\n        ImmutableList.of(\"dimA\", \"dimMultiVal\"),\n        ImmutableList.copyOf(adapter.getDimensionNames())\n    );\n\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(11, rowList.size());\n\n      Assert.assertEquals(Arrays.asList(\"leek\", null), rowList.get(0).dimensionValues());\n      Assert.assertEquals(12L, rowList.get(0).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"1\", \"2\", \"3\")), rowList.get(1).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(1).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"3\")), rowList.get(2).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(2).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"1\"), rowList.get(3).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(3).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\")), rowList.get(4).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(4).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\")), rowList.get(5).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(5).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\", \"5\")), rowList.get(6).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(6).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"4\")), rowList.get(7).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(7).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"2\"), rowList.get(8).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(8).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"1\", \"3\")), rowList.get(9).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(9).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", \"2\"), rowList.get(10).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(10).metricValues().get(0));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n      checkBitmapIndex(Arrays.asList(9, 10), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", null));\n      checkBitmapIndex(ImmutableList.of(), adapter.getBitmapIndex(\"dimMultiVal\", \"\"));\n      checkBitmapIndex(Arrays.asList(1, 3, 4, 5, 6, 7, 9), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 8, 10), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n      checkBitmapIndex(Arrays.asList(1, 2, 4, 5, 6, 9), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n      checkBitmapIndex(Collections.singletonList(7), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n      checkBitmapIndex(Collections.singletonList(6), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n    } else {\n      Assert.assertEquals(14, rowList.size());\n\n      Assert.assertEquals(Arrays.asList(\"leek\", null), rowList.get(0).dimensionValues());\n      Assert.assertEquals(8L, rowList.get(0).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"1\", \"2\", \"3\")), rowList.get(1).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(1).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"3\")), rowList.get(2).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(2).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"\"), rowList.get(3).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(3).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"\", \"1\", \"2\", \"3\")), rowList.get(4).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(4).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"\", \"3\")), rowList.get(5).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(5).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"1\"), rowList.get(6).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(6).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\")), rowList.get(7).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(7).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\")), rowList.get(8).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(8).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\", \"5\")), rowList.get(9).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(9).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"4\")), rowList.get(10).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(10).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"2\"), rowList.get(11).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(11).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"1\", \"3\")), rowList.get(12).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(12).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", \"2\"), rowList.get(13).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(13).metricValues().get(0));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n      checkBitmapIndex(Arrays.asList(12, 13), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", null));\n      checkBitmapIndex(ImmutableList.of(3, 4, 5), adapter.getBitmapIndex(\"dimMultiVal\", \"\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 6, 7, 8, 9, 10, 12), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 7, 11, 13), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n      checkBitmapIndex(Arrays.asList(1, 2, 4, 5, 7, 8, 9, 12), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n      checkBitmapIndex(Collections.singletonList(10), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n      checkBitmapIndex(Collections.singletonList(9), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n    }\n  }\n","date":"2020-04-26 04:47:07","endLine":2639,"groupId":"6924","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultivalDim_persistAndMerge_dimensionValueOrderingRules","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b2/53614cc3d70f73d7100570293a8a77a8fc7b7c.src","preCode":"  public void testMultivalDim_persistAndMerge_dimensionValueOrderingRules() throws Exception\n  {\n    List<String> dims = Arrays.asList(\n        \"dimA\",\n        \"dimMultiVal\"\n    );\n\n    IncrementalIndexSchema indexSchema = new IncrementalIndexSchema.Builder()\n        .withDimensionsSpec(\n            new DimensionsSpec(\n                ImmutableList.of(\n                    new StringDimensionSchema(\"dimA\", MultiValueHandling.SORTED_ARRAY, true),\n                    new StringDimensionSchema(\"dimMultiVal\", MultiValueHandling.SORTED_ARRAY, true)\n                )\n            )\n        )\n        .withMetrics(\n            new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n        )\n        .withRollup(true)\n        .build();\n\n    Map<String, Object> nullEvent = new HashMap<>();\n    nullEvent.put(\"dimA\", \"leek\");\n    nullEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> nullEvent2 = new HashMap<>();\n    nullEvent2.put(\"dimA\", \"leek\");\n    nullEvent2.put(\"dimMultiVal\", null);\n    nullEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> emptyListEvent = new HashMap<>();\n    emptyListEvent.put(\"dimA\", \"leek\");\n    emptyListEvent.put(\"dimMultiVal\", ImmutableList.of());\n    emptyListEvent.put(\"sumCount\", 1L);\n\n    List<String> listWithNull = new ArrayList<>();\n    listWithNull.add(null);\n    Map<String, Object> listWithNullEvent = new HashMap<>();\n    listWithNullEvent.put(\"dimA\", \"leek\");\n    listWithNullEvent.put(\"dimMultiVal\", listWithNull);\n    listWithNullEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> emptyStringEvent = new HashMap<>();\n    emptyStringEvent.put(\"dimA\", \"leek\");\n    emptyStringEvent.put(\"dimMultiVal\", \"\");\n    emptyStringEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithEmptyStringEvent = new HashMap<>();\n    listWithEmptyStringEvent.put(\"dimA\", \"leek\");\n    listWithEmptyStringEvent.put(\"dimMultiVal\", ImmutableList.of(\"\"));\n    listWithEmptyStringEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent = new HashMap<>();\n    singleValEvent.put(\"dimA\", \"leek\");\n    singleValEvent.put(\"dimMultiVal\", \"1\");\n    singleValEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent2 = new HashMap<>();\n    singleValEvent2.put(\"dimA\", \"leek\");\n    singleValEvent2.put(\"dimMultiVal\", \"2\");\n    singleValEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent3 = new HashMap<>();\n    singleValEvent3.put(\"dimA\", \"potato\");\n    singleValEvent3.put(\"dimMultiVal\", \"2\");\n    singleValEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent = new HashMap<>();\n    listWithSingleValEvent.put(\"dimA\", \"leek\");\n    listWithSingleValEvent.put(\"dimMultiVal\", ImmutableList.of(\"1\"));\n    listWithSingleValEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent2 = new HashMap<>();\n    listWithSingleValEvent2.put(\"dimA\", \"leek\");\n    listWithSingleValEvent2.put(\"dimMultiVal\", ImmutableList.of(\"2\"));\n    listWithSingleValEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent3 = new HashMap<>();\n    listWithSingleValEvent3.put(\"dimA\", \"potato\");\n    listWithSingleValEvent3.put(\"dimMultiVal\", ImmutableList.of(\"2\"));\n    listWithSingleValEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent = new HashMap<>();\n    multivalEvent.put(\"dimA\", \"leek\");\n    multivalEvent.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\"));\n    multivalEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent2 = new HashMap<>();\n    multivalEvent2.put(\"dimA\", \"leek\");\n    multivalEvent2.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"4\"));\n    multivalEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent3 = new HashMap<>();\n    multivalEvent3.put(\"dimA\", \"leek\");\n    multivalEvent3.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\", \"5\"));\n    multivalEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent4 = new HashMap<>();\n    multivalEvent4.put(\"dimA\", \"leek\");\n    multivalEvent4.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\"));\n    multivalEvent4.put(\"sumCount\", 1L);\n\n    List<String> multivalEvent5List = Arrays.asList(\"1\", \"2\", \"3\", null);\n    Map<String, Object> multivalEvent5 = new HashMap<>();\n    multivalEvent5.put(\"dimA\", \"leek\");\n    multivalEvent5.put(\"dimMultiVal\", multivalEvent5List);\n    multivalEvent5.put(\"sumCount\", 1L);\n\n    List<String> multivalEvent6List = Arrays.asList(null, \"3\");\n    Map<String, Object> multivalEvent6 = new HashMap<>();\n    multivalEvent6.put(\"dimA\", \"leek\");\n    multivalEvent6.put(\"dimMultiVal\", multivalEvent6List);\n    multivalEvent6.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent7 = new HashMap<>();\n    multivalEvent7.put(\"dimA\", \"leek\");\n    multivalEvent7.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\", \"\"));\n    multivalEvent7.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent8 = new HashMap<>();\n    multivalEvent8.put(\"dimA\", \"leek\");\n    multivalEvent8.put(\"dimMultiVal\", ImmutableList.of(\"\", \"3\"));\n    multivalEvent8.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent9 = new HashMap<>();\n    multivalEvent9.put(\"dimA\", \"potato\");\n    multivalEvent9.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\"));\n    multivalEvent9.put(\"sumCount\", 1L);\n\n    List<Map<String, Object>> events = ImmutableList.of(\n        nullEvent,\n        nullEvent2,\n        emptyListEvent,\n        listWithNullEvent,\n        emptyStringEvent,\n        listWithEmptyStringEvent,\n        singleValEvent,\n        singleValEvent2,\n        singleValEvent3,\n        listWithSingleValEvent,\n        listWithSingleValEvent2,\n        listWithSingleValEvent3,\n        multivalEvent,\n        multivalEvent2,\n        multivalEvent3,\n        multivalEvent4,\n        multivalEvent5,\n        multivalEvent6,\n        multivalEvent7,\n        multivalEvent8,\n        multivalEvent9\n    );\n\n    IncrementalIndex toPersistA = new IncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    for (Map<String, Object> event : events) {\n      toPersistA.add(new MapBasedInputRow(1, dims, event));\n    }\n\n    final File tmpDirA = temporaryFolder.newFolder();\n    QueryableIndex indexA = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistA, tmpDirA, indexSpec, null))\n    );\n\n    List<QueryableIndex> singleEventIndexes = new ArrayList<>();\n    for (Map<String, Object> event : events) {\n      IncrementalIndex toPersist = new IncrementalIndex.Builder()\n          .setIndexSchema(indexSchema)\n          .setMaxRowCount(1000)\n          .buildOnheap();\n\n      toPersist.add(new MapBasedInputRow(1, dims, event));\n      final File tmpDir = temporaryFolder.newFolder();\n      QueryableIndex queryableIndex = closer.closeLater(\n          indexIO.loadIndex(indexMerger.persist(toPersist, tmpDir, indexSpec, null))\n      );\n      singleEventIndexes.add(queryableIndex);\n    }\n    singleEventIndexes.add(indexA);\n\n    final File tmpDirMerged = temporaryFolder.newFolder();\n    final QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                singleEventIndexes,\n                true,\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n                },\n                tmpDirMerged,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    final QueryableIndexIndexableAdapter adapter = new QueryableIndexIndexableAdapter(merged);\n    final List<DebugRow> rowList = RowIteratorHelper.toList(adapter.getRows());\n\n    Assert.assertEquals(\n        ImmutableList.of(\"dimA\", \"dimMultiVal\"),\n        ImmutableList.copyOf(adapter.getDimensionNames())\n    );\n\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(11, rowList.size());\n\n      Assert.assertEquals(Arrays.asList(\"leek\", null), rowList.get(0).dimensionValues());\n      Assert.assertEquals(12L, rowList.get(0).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"1\", \"2\", \"3\")), rowList.get(1).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(1).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"3\")), rowList.get(2).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(2).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"1\"), rowList.get(3).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(3).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\")), rowList.get(4).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(4).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\")), rowList.get(5).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(5).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\", \"5\")), rowList.get(6).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(6).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"4\")), rowList.get(7).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(7).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"2\"), rowList.get(8).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(8).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"1\", \"3\")), rowList.get(9).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(9).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", \"2\"), rowList.get(10).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(10).metricValues().get(0));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n      checkBitmapIndex(Arrays.asList(9, 10), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", null));\n      checkBitmapIndex(ImmutableList.of(), adapter.getBitmapIndex(\"dimMultiVal\", \"\"));\n      checkBitmapIndex(Arrays.asList(1, 3, 4, 5, 6, 7, 9), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 8, 10), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n      checkBitmapIndex(Arrays.asList(1, 2, 4, 5, 6, 9), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n      checkBitmapIndex(Collections.singletonList(7), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n      checkBitmapIndex(Collections.singletonList(6), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n    } else {\n      Assert.assertEquals(14, rowList.size());\n\n      Assert.assertEquals(Arrays.asList(\"leek\", null), rowList.get(0).dimensionValues());\n      Assert.assertEquals(8L, rowList.get(0).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"1\", \"2\", \"3\")), rowList.get(1).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(1).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"3\")), rowList.get(2).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(2).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"\"), rowList.get(3).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(3).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"\", \"1\", \"2\", \"3\")), rowList.get(4).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(4).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"\", \"3\")), rowList.get(5).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(5).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"1\"), rowList.get(6).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(6).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\")), rowList.get(7).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(7).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\")), rowList.get(8).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(8).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\", \"5\")), rowList.get(9).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(9).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"4\")), rowList.get(10).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(10).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"2\"), rowList.get(11).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(11).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"1\", \"3\")), rowList.get(12).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(12).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", \"2\"), rowList.get(13).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(13).metricValues().get(0));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n      checkBitmapIndex(Arrays.asList(12, 13), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", null));\n      checkBitmapIndex(ImmutableList.of(3, 4, 5), adapter.getBitmapIndex(\"dimMultiVal\", \"\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 6, 7, 8, 9, 10, 12), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 7, 11, 13), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n      checkBitmapIndex(Arrays.asList(1, 2, 4, 5, 7, 8, 9, 12), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n      checkBitmapIndex(Collections.singletonList(10), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n      checkBitmapIndex(Collections.singletonList(9), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2329,"status":"B"}],"commitId":"fe000a9e4bf1d2681760f72e9c593bd2aa5a1416","commitMessage":"@@@Adjust string comparators used for ingestion (#9742)\n\n* Adjust string comparators used for ingestion\n\n* Small tweak\n\n* Fix inspection.  more javadocs\n\n* Address PR comment\n\n* Add rollup comment\n\n* Add ordering test\n\n* Fix IncrementaIndexRowCompTest","date":"2020-04-26 04:47:07","modifiedFileCount":"7","status":"B","submitter":"Jonathan Wei"},{"authorTime":"2021-01-06 14:19:09","codes":[{"authorDate":"2021-01-06 14:19:09","commitOrder":2,"curCode":"  public void testMultivalDim_mergeAcrossSegments_rollupWorks() throws Exception\n  {\n    List<String> dims = Arrays.asList(\n        \"dimA\",\n        \"dimMultiVal\"\n    );\n\n    IncrementalIndexSchema indexSchema = new IncrementalIndexSchema.Builder()\n        .withDimensionsSpec(\n            new DimensionsSpec(\n                ImmutableList.of(\n                    new StringDimensionSchema(\"dimA\", MultiValueHandling.SORTED_ARRAY, true),\n                    new StringDimensionSchema(\"dimMultiVal\", MultiValueHandling.SORTED_ARRAY, true)\n                )\n            )\n        )\n        .withMetrics(\n            new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n        )\n        .withRollup(true)\n        .build();\n\n    IncrementalIndex toPersistA = new IncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    Map<String, Object> event1 = new HashMap<>();\n    event1.put(\"dimA\", \"leek\");\n    event1.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"4\"));\n    event1.put(\"sumCount\", 1L);\n\n    Map<String, Object> event2 = new HashMap<>();\n    event2.put(\"dimA\", \"leek\");\n    event2.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\", \"5\"));\n    event2.put(\"sumCount\", 1L);\n\n    toPersistA.add(new MapBasedInputRow(1, dims, event1));\n    toPersistA.add(new MapBasedInputRow(1, dims, event2));\n\n    IncrementalIndex toPersistB = new IncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    Map<String, Object> event3 = new HashMap<>();\n    event3.put(\"dimA\", \"leek\");\n    event3.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"4\"));\n    event3.put(\"sumCount\", 1L);\n\n    Map<String, Object> event4 = new HashMap<>();\n    event4.put(\"dimA\", \"potato\");\n    event4.put(\"dimMultiVal\", ImmutableList.of(\"0\", \"1\", \"4\"));\n    event4.put(\"sumCount\", 1L);\n\n    toPersistB.add(new MapBasedInputRow(1, dims, event3));\n    toPersistB.add(new MapBasedInputRow(1, dims, event4));\n\n    final File tmpDirA = temporaryFolder.newFolder();\n    final File tmpDirB = temporaryFolder.newFolder();\n    final File tmpDirMerged = temporaryFolder.newFolder();\n\n    QueryableIndex indexA = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistA, tmpDirA, indexSpec, null))\n    );\n\n    QueryableIndex indexB = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistB, tmpDirB, indexSpec, null))\n    );\n\n    final QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                Arrays.asList(indexA, indexB),\n                true,\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n                },\n                tmpDirMerged,\n                indexSpec,\n                null,\n                -1\n            )\n        )\n    );\n\n    final QueryableIndexIndexableAdapter adapter = new QueryableIndexIndexableAdapter(merged);\n    final List<DebugRow> rowList = RowIteratorHelper.toList(adapter.getRows());\n\n    Assert.assertEquals(\n        ImmutableList.of(\"dimA\", \"dimMultiVal\"),\n        ImmutableList.copyOf(adapter.getDimensionNames())\n    );\n\n    Assert.assertEquals(3, rowList.size());\n    Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\", \"5\")), rowList.get(0).dimensionValues());\n    Assert.assertEquals(1L, rowList.get(0).metricValues().get(0));\n    Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"4\")), rowList.get(1).dimensionValues());\n    Assert.assertEquals(2L, rowList.get(1).metricValues().get(0));\n    Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"0\", \"1\", \"4\")), rowList.get(2).dimensionValues());\n    Assert.assertEquals(1L, rowList.get(2).metricValues().get(0));\n\n    checkBitmapIndex(Arrays.asList(0, 1), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n    checkBitmapIndex(Collections.singletonList(2), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n    checkBitmapIndex(Collections.singletonList(2), adapter.getBitmapIndex(\"dimMultiVal\", \"0\"));\n    checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n    checkBitmapIndex(Arrays.asList(0, 1), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n    checkBitmapIndex(Collections.singletonList(0), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n    checkBitmapIndex(Arrays.asList(1, 2), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n    checkBitmapIndex(Collections.singletonList(0), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n  }\n","date":"2021-01-06 14:19:09","endLine":2317,"groupId":"13765","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultivalDim_mergeAcrossSegments_rollupWorks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/6429f20ca529bbd9164de23ddb2068e18235fb.src","preCode":"  public void testMultivalDim_mergeAcrossSegments_rollupWorks() throws Exception\n  {\n    List<String> dims = Arrays.asList(\n        \"dimA\",\n        \"dimMultiVal\"\n    );\n\n    IncrementalIndexSchema indexSchema = new IncrementalIndexSchema.Builder()\n        .withDimensionsSpec(\n            new DimensionsSpec(\n                ImmutableList.of(\n                    new StringDimensionSchema(\"dimA\", MultiValueHandling.SORTED_ARRAY, true),\n                    new StringDimensionSchema(\"dimMultiVal\", MultiValueHandling.SORTED_ARRAY, true)\n                )\n            )\n        )\n        .withMetrics(\n            new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n        )\n        .withRollup(true)\n        .build();\n\n    IncrementalIndex toPersistA = new IncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    Map<String, Object> event1 = new HashMap<>();\n    event1.put(\"dimA\", \"leek\");\n    event1.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"4\"));\n    event1.put(\"sumCount\", 1L);\n\n    Map<String, Object> event2 = new HashMap<>();\n    event2.put(\"dimA\", \"leek\");\n    event2.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\", \"5\"));\n    event2.put(\"sumCount\", 1L);\n\n    toPersistA.add(new MapBasedInputRow(1, dims, event1));\n    toPersistA.add(new MapBasedInputRow(1, dims, event2));\n\n    IncrementalIndex toPersistB = new IncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    Map<String, Object> event3 = new HashMap<>();\n    event3.put(\"dimA\", \"leek\");\n    event3.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"4\"));\n    event3.put(\"sumCount\", 1L);\n\n    Map<String, Object> event4 = new HashMap<>();\n    event4.put(\"dimA\", \"potato\");\n    event4.put(\"dimMultiVal\", ImmutableList.of(\"0\", \"1\", \"4\"));\n    event4.put(\"sumCount\", 1L);\n\n    toPersistB.add(new MapBasedInputRow(1, dims, event3));\n    toPersistB.add(new MapBasedInputRow(1, dims, event4));\n\n    final File tmpDirA = temporaryFolder.newFolder();\n    final File tmpDirB = temporaryFolder.newFolder();\n    final File tmpDirMerged = temporaryFolder.newFolder();\n\n    QueryableIndex indexA = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistA, tmpDirA, indexSpec, null))\n    );\n\n    QueryableIndex indexB = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistB, tmpDirB, indexSpec, null))\n    );\n\n    final QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                Arrays.asList(indexA, indexB),\n                true,\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n                },\n                tmpDirMerged,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    final QueryableIndexIndexableAdapter adapter = new QueryableIndexIndexableAdapter(merged);\n    final List<DebugRow> rowList = RowIteratorHelper.toList(adapter.getRows());\n\n    Assert.assertEquals(\n        ImmutableList.of(\"dimA\", \"dimMultiVal\"),\n        ImmutableList.copyOf(adapter.getDimensionNames())\n    );\n\n    Assert.assertEquals(3, rowList.size());\n    Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\", \"5\")), rowList.get(0).dimensionValues());\n    Assert.assertEquals(1L, rowList.get(0).metricValues().get(0));\n    Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"4\")), rowList.get(1).dimensionValues());\n    Assert.assertEquals(2L, rowList.get(1).metricValues().get(0));\n    Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"0\", \"1\", \"4\")), rowList.get(2).dimensionValues());\n    Assert.assertEquals(1L, rowList.get(2).metricValues().get(0));\n\n    checkBitmapIndex(Arrays.asList(0, 1), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n    checkBitmapIndex(Collections.singletonList(2), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n    checkBitmapIndex(Collections.singletonList(2), adapter.getBitmapIndex(\"dimMultiVal\", \"0\"));\n    checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n    checkBitmapIndex(Arrays.asList(0, 1), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n    checkBitmapIndex(Collections.singletonList(0), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n    checkBitmapIndex(Arrays.asList(1, 2), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n    checkBitmapIndex(Collections.singletonList(0), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2206,"status":"M"},{"authorDate":"2021-01-06 14:19:09","commitOrder":2,"curCode":"  public void testMultivalDim_persistAndMerge_dimensionValueOrderingRules() throws Exception\n  {\n    List<String> dims = Arrays.asList(\n        \"dimA\",\n        \"dimMultiVal\"\n    );\n\n    IncrementalIndexSchema indexSchema = new IncrementalIndexSchema.Builder()\n        .withDimensionsSpec(\n            new DimensionsSpec(\n                ImmutableList.of(\n                    new StringDimensionSchema(\"dimA\", MultiValueHandling.SORTED_ARRAY, true),\n                    new StringDimensionSchema(\"dimMultiVal\", MultiValueHandling.SORTED_ARRAY, true)\n                )\n            )\n        )\n        .withMetrics(\n            new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n        )\n        .withRollup(true)\n        .build();\n\n    Map<String, Object> nullEvent = new HashMap<>();\n    nullEvent.put(\"dimA\", \"leek\");\n    nullEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> nullEvent2 = new HashMap<>();\n    nullEvent2.put(\"dimA\", \"leek\");\n    nullEvent2.put(\"dimMultiVal\", null);\n    nullEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> emptyListEvent = new HashMap<>();\n    emptyListEvent.put(\"dimA\", \"leek\");\n    emptyListEvent.put(\"dimMultiVal\", ImmutableList.of());\n    emptyListEvent.put(\"sumCount\", 1L);\n\n    List<String> listWithNull = new ArrayList<>();\n    listWithNull.add(null);\n    Map<String, Object> listWithNullEvent = new HashMap<>();\n    listWithNullEvent.put(\"dimA\", \"leek\");\n    listWithNullEvent.put(\"dimMultiVal\", listWithNull);\n    listWithNullEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> emptyStringEvent = new HashMap<>();\n    emptyStringEvent.put(\"dimA\", \"leek\");\n    emptyStringEvent.put(\"dimMultiVal\", \"\");\n    emptyStringEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithEmptyStringEvent = new HashMap<>();\n    listWithEmptyStringEvent.put(\"dimA\", \"leek\");\n    listWithEmptyStringEvent.put(\"dimMultiVal\", ImmutableList.of(\"\"));\n    listWithEmptyStringEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent = new HashMap<>();\n    singleValEvent.put(\"dimA\", \"leek\");\n    singleValEvent.put(\"dimMultiVal\", \"1\");\n    singleValEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent2 = new HashMap<>();\n    singleValEvent2.put(\"dimA\", \"leek\");\n    singleValEvent2.put(\"dimMultiVal\", \"2\");\n    singleValEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent3 = new HashMap<>();\n    singleValEvent3.put(\"dimA\", \"potato\");\n    singleValEvent3.put(\"dimMultiVal\", \"2\");\n    singleValEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent = new HashMap<>();\n    listWithSingleValEvent.put(\"dimA\", \"leek\");\n    listWithSingleValEvent.put(\"dimMultiVal\", ImmutableList.of(\"1\"));\n    listWithSingleValEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent2 = new HashMap<>();\n    listWithSingleValEvent2.put(\"dimA\", \"leek\");\n    listWithSingleValEvent2.put(\"dimMultiVal\", ImmutableList.of(\"2\"));\n    listWithSingleValEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent3 = new HashMap<>();\n    listWithSingleValEvent3.put(\"dimA\", \"potato\");\n    listWithSingleValEvent3.put(\"dimMultiVal\", ImmutableList.of(\"2\"));\n    listWithSingleValEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent = new HashMap<>();\n    multivalEvent.put(\"dimA\", \"leek\");\n    multivalEvent.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\"));\n    multivalEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent2 = new HashMap<>();\n    multivalEvent2.put(\"dimA\", \"leek\");\n    multivalEvent2.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"4\"));\n    multivalEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent3 = new HashMap<>();\n    multivalEvent3.put(\"dimA\", \"leek\");\n    multivalEvent3.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\", \"5\"));\n    multivalEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent4 = new HashMap<>();\n    multivalEvent4.put(\"dimA\", \"leek\");\n    multivalEvent4.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\"));\n    multivalEvent4.put(\"sumCount\", 1L);\n\n    List<String> multivalEvent5List = Arrays.asList(\"1\", \"2\", \"3\", null);\n    Map<String, Object> multivalEvent5 = new HashMap<>();\n    multivalEvent5.put(\"dimA\", \"leek\");\n    multivalEvent5.put(\"dimMultiVal\", multivalEvent5List);\n    multivalEvent5.put(\"sumCount\", 1L);\n\n    List<String> multivalEvent6List = Arrays.asList(null, \"3\");\n    Map<String, Object> multivalEvent6 = new HashMap<>();\n    multivalEvent6.put(\"dimA\", \"leek\");\n    multivalEvent6.put(\"dimMultiVal\", multivalEvent6List);\n    multivalEvent6.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent7 = new HashMap<>();\n    multivalEvent7.put(\"dimA\", \"leek\");\n    multivalEvent7.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\", \"\"));\n    multivalEvent7.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent8 = new HashMap<>();\n    multivalEvent8.put(\"dimA\", \"leek\");\n    multivalEvent8.put(\"dimMultiVal\", ImmutableList.of(\"\", \"3\"));\n    multivalEvent8.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent9 = new HashMap<>();\n    multivalEvent9.put(\"dimA\", \"potato\");\n    multivalEvent9.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\"));\n    multivalEvent9.put(\"sumCount\", 1L);\n\n    List<Map<String, Object>> events = ImmutableList.of(\n        nullEvent,\n        nullEvent2,\n        emptyListEvent,\n        listWithNullEvent,\n        emptyStringEvent,\n        listWithEmptyStringEvent,\n        singleValEvent,\n        singleValEvent2,\n        singleValEvent3,\n        listWithSingleValEvent,\n        listWithSingleValEvent2,\n        listWithSingleValEvent3,\n        multivalEvent,\n        multivalEvent2,\n        multivalEvent3,\n        multivalEvent4,\n        multivalEvent5,\n        multivalEvent6,\n        multivalEvent7,\n        multivalEvent8,\n        multivalEvent9\n    );\n\n    IncrementalIndex toPersistA = new IncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    for (Map<String, Object> event : events) {\n      toPersistA.add(new MapBasedInputRow(1, dims, event));\n    }\n\n    final File tmpDirA = temporaryFolder.newFolder();\n    QueryableIndex indexA = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistA, tmpDirA, indexSpec, null))\n    );\n\n    List<QueryableIndex> singleEventIndexes = new ArrayList<>();\n    for (Map<String, Object> event : events) {\n      IncrementalIndex toPersist = new IncrementalIndex.Builder()\n          .setIndexSchema(indexSchema)\n          .setMaxRowCount(1000)\n          .buildOnheap();\n\n      toPersist.add(new MapBasedInputRow(1, dims, event));\n      final File tmpDir = temporaryFolder.newFolder();\n      QueryableIndex queryableIndex = closer.closeLater(\n          indexIO.loadIndex(indexMerger.persist(toPersist, tmpDir, indexSpec, null))\n      );\n      singleEventIndexes.add(queryableIndex);\n    }\n    singleEventIndexes.add(indexA);\n\n    final File tmpDirMerged = temporaryFolder.newFolder();\n    final QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                singleEventIndexes,\n                true,\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n                },\n                tmpDirMerged,\n                indexSpec,\n                null,\n                -1\n            )\n        )\n    );\n\n    final QueryableIndexIndexableAdapter adapter = new QueryableIndexIndexableAdapter(merged);\n    final List<DebugRow> rowList = RowIteratorHelper.toList(adapter.getRows());\n\n    Assert.assertEquals(\n        ImmutableList.of(\"dimA\", \"dimMultiVal\"),\n        ImmutableList.copyOf(adapter.getDimensionNames())\n    );\n\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(11, rowList.size());\n\n      Assert.assertEquals(Arrays.asList(\"leek\", null), rowList.get(0).dimensionValues());\n      Assert.assertEquals(12L, rowList.get(0).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"1\", \"2\", \"3\")), rowList.get(1).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(1).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"3\")), rowList.get(2).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(2).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"1\"), rowList.get(3).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(3).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\")), rowList.get(4).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(4).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\")), rowList.get(5).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(5).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\", \"5\")), rowList.get(6).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(6).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"4\")), rowList.get(7).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(7).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"2\"), rowList.get(8).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(8).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"1\", \"3\")), rowList.get(9).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(9).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", \"2\"), rowList.get(10).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(10).metricValues().get(0));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n      checkBitmapIndex(Arrays.asList(9, 10), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", null));\n      checkBitmapIndex(ImmutableList.of(), adapter.getBitmapIndex(\"dimMultiVal\", \"\"));\n      checkBitmapIndex(Arrays.asList(1, 3, 4, 5, 6, 7, 9), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 8, 10), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n      checkBitmapIndex(Arrays.asList(1, 2, 4, 5, 6, 9), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n      checkBitmapIndex(Collections.singletonList(7), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n      checkBitmapIndex(Collections.singletonList(6), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n    } else {\n      Assert.assertEquals(14, rowList.size());\n\n      Assert.assertEquals(Arrays.asList(\"leek\", null), rowList.get(0).dimensionValues());\n      Assert.assertEquals(8L, rowList.get(0).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"1\", \"2\", \"3\")), rowList.get(1).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(1).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"3\")), rowList.get(2).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(2).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"\"), rowList.get(3).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(3).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"\", \"1\", \"2\", \"3\")), rowList.get(4).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(4).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"\", \"3\")), rowList.get(5).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(5).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"1\"), rowList.get(6).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(6).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\")), rowList.get(7).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(7).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\")), rowList.get(8).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(8).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\", \"5\")), rowList.get(9).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(9).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"4\")), rowList.get(10).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(10).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"2\"), rowList.get(11).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(11).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"1\", \"3\")), rowList.get(12).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(12).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", \"2\"), rowList.get(13).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(13).metricValues().get(0));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n      checkBitmapIndex(Arrays.asList(12, 13), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", null));\n      checkBitmapIndex(ImmutableList.of(3, 4, 5), adapter.getBitmapIndex(\"dimMultiVal\", \"\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 6, 7, 8, 9, 10, 12), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 7, 11, 13), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n      checkBitmapIndex(Arrays.asList(1, 2, 4, 5, 7, 8, 9, 12), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n      checkBitmapIndex(Collections.singletonList(10), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n      checkBitmapIndex(Collections.singletonList(9), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n    }\n  }\n","date":"2021-01-06 14:19:09","endLine":2632,"groupId":"6924","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultivalDim_persistAndMerge_dimensionValueOrderingRules","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/6429f20ca529bbd9164de23ddb2068e18235fb.src","preCode":"  public void testMultivalDim_persistAndMerge_dimensionValueOrderingRules() throws Exception\n  {\n    List<String> dims = Arrays.asList(\n        \"dimA\",\n        \"dimMultiVal\"\n    );\n\n    IncrementalIndexSchema indexSchema = new IncrementalIndexSchema.Builder()\n        .withDimensionsSpec(\n            new DimensionsSpec(\n                ImmutableList.of(\n                    new StringDimensionSchema(\"dimA\", MultiValueHandling.SORTED_ARRAY, true),\n                    new StringDimensionSchema(\"dimMultiVal\", MultiValueHandling.SORTED_ARRAY, true)\n                )\n            )\n        )\n        .withMetrics(\n            new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n        )\n        .withRollup(true)\n        .build();\n\n    Map<String, Object> nullEvent = new HashMap<>();\n    nullEvent.put(\"dimA\", \"leek\");\n    nullEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> nullEvent2 = new HashMap<>();\n    nullEvent2.put(\"dimA\", \"leek\");\n    nullEvent2.put(\"dimMultiVal\", null);\n    nullEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> emptyListEvent = new HashMap<>();\n    emptyListEvent.put(\"dimA\", \"leek\");\n    emptyListEvent.put(\"dimMultiVal\", ImmutableList.of());\n    emptyListEvent.put(\"sumCount\", 1L);\n\n    List<String> listWithNull = new ArrayList<>();\n    listWithNull.add(null);\n    Map<String, Object> listWithNullEvent = new HashMap<>();\n    listWithNullEvent.put(\"dimA\", \"leek\");\n    listWithNullEvent.put(\"dimMultiVal\", listWithNull);\n    listWithNullEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> emptyStringEvent = new HashMap<>();\n    emptyStringEvent.put(\"dimA\", \"leek\");\n    emptyStringEvent.put(\"dimMultiVal\", \"\");\n    emptyStringEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithEmptyStringEvent = new HashMap<>();\n    listWithEmptyStringEvent.put(\"dimA\", \"leek\");\n    listWithEmptyStringEvent.put(\"dimMultiVal\", ImmutableList.of(\"\"));\n    listWithEmptyStringEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent = new HashMap<>();\n    singleValEvent.put(\"dimA\", \"leek\");\n    singleValEvent.put(\"dimMultiVal\", \"1\");\n    singleValEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent2 = new HashMap<>();\n    singleValEvent2.put(\"dimA\", \"leek\");\n    singleValEvent2.put(\"dimMultiVal\", \"2\");\n    singleValEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent3 = new HashMap<>();\n    singleValEvent3.put(\"dimA\", \"potato\");\n    singleValEvent3.put(\"dimMultiVal\", \"2\");\n    singleValEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent = new HashMap<>();\n    listWithSingleValEvent.put(\"dimA\", \"leek\");\n    listWithSingleValEvent.put(\"dimMultiVal\", ImmutableList.of(\"1\"));\n    listWithSingleValEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent2 = new HashMap<>();\n    listWithSingleValEvent2.put(\"dimA\", \"leek\");\n    listWithSingleValEvent2.put(\"dimMultiVal\", ImmutableList.of(\"2\"));\n    listWithSingleValEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent3 = new HashMap<>();\n    listWithSingleValEvent3.put(\"dimA\", \"potato\");\n    listWithSingleValEvent3.put(\"dimMultiVal\", ImmutableList.of(\"2\"));\n    listWithSingleValEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent = new HashMap<>();\n    multivalEvent.put(\"dimA\", \"leek\");\n    multivalEvent.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\"));\n    multivalEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent2 = new HashMap<>();\n    multivalEvent2.put(\"dimA\", \"leek\");\n    multivalEvent2.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"4\"));\n    multivalEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent3 = new HashMap<>();\n    multivalEvent3.put(\"dimA\", \"leek\");\n    multivalEvent3.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\", \"5\"));\n    multivalEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent4 = new HashMap<>();\n    multivalEvent4.put(\"dimA\", \"leek\");\n    multivalEvent4.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\"));\n    multivalEvent4.put(\"sumCount\", 1L);\n\n    List<String> multivalEvent5List = Arrays.asList(\"1\", \"2\", \"3\", null);\n    Map<String, Object> multivalEvent5 = new HashMap<>();\n    multivalEvent5.put(\"dimA\", \"leek\");\n    multivalEvent5.put(\"dimMultiVal\", multivalEvent5List);\n    multivalEvent5.put(\"sumCount\", 1L);\n\n    List<String> multivalEvent6List = Arrays.asList(null, \"3\");\n    Map<String, Object> multivalEvent6 = new HashMap<>();\n    multivalEvent6.put(\"dimA\", \"leek\");\n    multivalEvent6.put(\"dimMultiVal\", multivalEvent6List);\n    multivalEvent6.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent7 = new HashMap<>();\n    multivalEvent7.put(\"dimA\", \"leek\");\n    multivalEvent7.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\", \"\"));\n    multivalEvent7.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent8 = new HashMap<>();\n    multivalEvent8.put(\"dimA\", \"leek\");\n    multivalEvent8.put(\"dimMultiVal\", ImmutableList.of(\"\", \"3\"));\n    multivalEvent8.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent9 = new HashMap<>();\n    multivalEvent9.put(\"dimA\", \"potato\");\n    multivalEvent9.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\"));\n    multivalEvent9.put(\"sumCount\", 1L);\n\n    List<Map<String, Object>> events = ImmutableList.of(\n        nullEvent,\n        nullEvent2,\n        emptyListEvent,\n        listWithNullEvent,\n        emptyStringEvent,\n        listWithEmptyStringEvent,\n        singleValEvent,\n        singleValEvent2,\n        singleValEvent3,\n        listWithSingleValEvent,\n        listWithSingleValEvent2,\n        listWithSingleValEvent3,\n        multivalEvent,\n        multivalEvent2,\n        multivalEvent3,\n        multivalEvent4,\n        multivalEvent5,\n        multivalEvent6,\n        multivalEvent7,\n        multivalEvent8,\n        multivalEvent9\n    );\n\n    IncrementalIndex toPersistA = new IncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    for (Map<String, Object> event : events) {\n      toPersistA.add(new MapBasedInputRow(1, dims, event));\n    }\n\n    final File tmpDirA = temporaryFolder.newFolder();\n    QueryableIndex indexA = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistA, tmpDirA, indexSpec, null))\n    );\n\n    List<QueryableIndex> singleEventIndexes = new ArrayList<>();\n    for (Map<String, Object> event : events) {\n      IncrementalIndex toPersist = new IncrementalIndex.Builder()\n          .setIndexSchema(indexSchema)\n          .setMaxRowCount(1000)\n          .buildOnheap();\n\n      toPersist.add(new MapBasedInputRow(1, dims, event));\n      final File tmpDir = temporaryFolder.newFolder();\n      QueryableIndex queryableIndex = closer.closeLater(\n          indexIO.loadIndex(indexMerger.persist(toPersist, tmpDir, indexSpec, null))\n      );\n      singleEventIndexes.add(queryableIndex);\n    }\n    singleEventIndexes.add(indexA);\n\n    final File tmpDirMerged = temporaryFolder.newFolder();\n    final QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                singleEventIndexes,\n                true,\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n                },\n                tmpDirMerged,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    final QueryableIndexIndexableAdapter adapter = new QueryableIndexIndexableAdapter(merged);\n    final List<DebugRow> rowList = RowIteratorHelper.toList(adapter.getRows());\n\n    Assert.assertEquals(\n        ImmutableList.of(\"dimA\", \"dimMultiVal\"),\n        ImmutableList.copyOf(adapter.getDimensionNames())\n    );\n\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(11, rowList.size());\n\n      Assert.assertEquals(Arrays.asList(\"leek\", null), rowList.get(0).dimensionValues());\n      Assert.assertEquals(12L, rowList.get(0).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"1\", \"2\", \"3\")), rowList.get(1).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(1).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"3\")), rowList.get(2).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(2).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"1\"), rowList.get(3).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(3).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\")), rowList.get(4).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(4).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\")), rowList.get(5).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(5).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\", \"5\")), rowList.get(6).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(6).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"4\")), rowList.get(7).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(7).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"2\"), rowList.get(8).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(8).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"1\", \"3\")), rowList.get(9).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(9).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", \"2\"), rowList.get(10).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(10).metricValues().get(0));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n      checkBitmapIndex(Arrays.asList(9, 10), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", null));\n      checkBitmapIndex(ImmutableList.of(), adapter.getBitmapIndex(\"dimMultiVal\", \"\"));\n      checkBitmapIndex(Arrays.asList(1, 3, 4, 5, 6, 7, 9), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 8, 10), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n      checkBitmapIndex(Arrays.asList(1, 2, 4, 5, 6, 9), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n      checkBitmapIndex(Collections.singletonList(7), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n      checkBitmapIndex(Collections.singletonList(6), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n    } else {\n      Assert.assertEquals(14, rowList.size());\n\n      Assert.assertEquals(Arrays.asList(\"leek\", null), rowList.get(0).dimensionValues());\n      Assert.assertEquals(8L, rowList.get(0).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"1\", \"2\", \"3\")), rowList.get(1).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(1).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"3\")), rowList.get(2).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(2).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"\"), rowList.get(3).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(3).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"\", \"1\", \"2\", \"3\")), rowList.get(4).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(4).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"\", \"3\")), rowList.get(5).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(5).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"1\"), rowList.get(6).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(6).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\")), rowList.get(7).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(7).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\")), rowList.get(8).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(8).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\", \"5\")), rowList.get(9).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(9).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"4\")), rowList.get(10).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(10).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"2\"), rowList.get(11).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(11).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"1\", \"3\")), rowList.get(12).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(12).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", \"2\"), rowList.get(13).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(13).metricValues().get(0));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n      checkBitmapIndex(Arrays.asList(12, 13), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", null));\n      checkBitmapIndex(ImmutableList.of(3, 4, 5), adapter.getBitmapIndex(\"dimMultiVal\", \"\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 6, 7, 8, 9, 10, 12), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 7, 11, 13), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n      checkBitmapIndex(Arrays.asList(1, 2, 4, 5, 7, 8, 9, 12), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n      checkBitmapIndex(Collections.singletonList(10), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n      checkBitmapIndex(Collections.singletonList(9), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2321,"status":"M"}],"commitId":"68bb038b314c26bcc57aa96e1078c22d2f24fd35","commitMessage":"@@@Multiphase segment merge for IndexMergerV9 (#10689)\n\n* Multiphase merge for IndexMergerV9\n\n* JSON fix\n\n* Cleanup temp files\n\n* Docs\n\n* Address logging and add IT\n\n* Fix spelling and test unloader datasource name","date":"2021-01-06 14:19:09","modifiedFileCount":"40","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2021-01-08 14:18:47","codes":[{"authorDate":"2021-01-08 14:18:47","commitOrder":3,"curCode":"  public void testMultivalDim_mergeAcrossSegments_rollupWorks() throws Exception\n  {\n    List<String> dims = Arrays.asList(\n        \"dimA\",\n        \"dimMultiVal\"\n    );\n\n    IncrementalIndexSchema indexSchema = new IncrementalIndexSchema.Builder()\n        .withDimensionsSpec(\n            new DimensionsSpec(\n                ImmutableList.of(\n                    new StringDimensionSchema(\"dimA\", MultiValueHandling.SORTED_ARRAY, true),\n                    new StringDimensionSchema(\"dimMultiVal\", MultiValueHandling.SORTED_ARRAY, true)\n                )\n            )\n        )\n        .withMetrics(\n            new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n        )\n        .withRollup(true)\n        .build();\n\n    IncrementalIndex toPersistA = new OnheapIncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .build();\n\n    Map<String, Object> event1 = new HashMap<>();\n    event1.put(\"dimA\", \"leek\");\n    event1.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"4\"));\n    event1.put(\"sumCount\", 1L);\n\n    Map<String, Object> event2 = new HashMap<>();\n    event2.put(\"dimA\", \"leek\");\n    event2.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\", \"5\"));\n    event2.put(\"sumCount\", 1L);\n\n    toPersistA.add(new MapBasedInputRow(1, dims, event1));\n    toPersistA.add(new MapBasedInputRow(1, dims, event2));\n\n    IncrementalIndex toPersistB = new OnheapIncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .build();\n\n    Map<String, Object> event3 = new HashMap<>();\n    event3.put(\"dimA\", \"leek\");\n    event3.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"4\"));\n    event3.put(\"sumCount\", 1L);\n\n    Map<String, Object> event4 = new HashMap<>();\n    event4.put(\"dimA\", \"potato\");\n    event4.put(\"dimMultiVal\", ImmutableList.of(\"0\", \"1\", \"4\"));\n    event4.put(\"sumCount\", 1L);\n\n    toPersistB.add(new MapBasedInputRow(1, dims, event3));\n    toPersistB.add(new MapBasedInputRow(1, dims, event4));\n\n    final File tmpDirA = temporaryFolder.newFolder();\n    final File tmpDirB = temporaryFolder.newFolder();\n    final File tmpDirMerged = temporaryFolder.newFolder();\n\n    QueryableIndex indexA = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistA, tmpDirA, indexSpec, null))\n    );\n\n    QueryableIndex indexB = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistB, tmpDirB, indexSpec, null))\n    );\n\n    final QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                Arrays.asList(indexA, indexB),\n                true,\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n                },\n                tmpDirMerged,\n                indexSpec,\n                null,\n                -1\n            )\n        )\n    );\n\n    final QueryableIndexIndexableAdapter adapter = new QueryableIndexIndexableAdapter(merged);\n    final List<DebugRow> rowList = RowIteratorHelper.toList(adapter.getRows());\n\n    Assert.assertEquals(\n        ImmutableList.of(\"dimA\", \"dimMultiVal\"),\n        ImmutableList.copyOf(adapter.getDimensionNames())\n    );\n\n    Assert.assertEquals(3, rowList.size());\n    Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\", \"5\")), rowList.get(0).dimensionValues());\n    Assert.assertEquals(1L, rowList.get(0).metricValues().get(0));\n    Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"4\")), rowList.get(1).dimensionValues());\n    Assert.assertEquals(2L, rowList.get(1).metricValues().get(0));\n    Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"0\", \"1\", \"4\")), rowList.get(2).dimensionValues());\n    Assert.assertEquals(1L, rowList.get(2).metricValues().get(0));\n\n    checkBitmapIndex(Arrays.asList(0, 1), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n    checkBitmapIndex(Collections.singletonList(2), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n    checkBitmapIndex(Collections.singletonList(2), adapter.getBitmapIndex(\"dimMultiVal\", \"0\"));\n    checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n    checkBitmapIndex(Arrays.asList(0, 1), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n    checkBitmapIndex(Collections.singletonList(0), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n    checkBitmapIndex(Arrays.asList(1, 2), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n    checkBitmapIndex(Collections.singletonList(0), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n  }\n","date":"2021-01-08 14:18:47","endLine":2318,"groupId":"105798","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultivalDim_mergeAcrossSegments_rollupWorks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/12/4554ee52ec63d24cddcee360b357f8548903c5.src","preCode":"  public void testMultivalDim_mergeAcrossSegments_rollupWorks() throws Exception\n  {\n    List<String> dims = Arrays.asList(\n        \"dimA\",\n        \"dimMultiVal\"\n    );\n\n    IncrementalIndexSchema indexSchema = new IncrementalIndexSchema.Builder()\n        .withDimensionsSpec(\n            new DimensionsSpec(\n                ImmutableList.of(\n                    new StringDimensionSchema(\"dimA\", MultiValueHandling.SORTED_ARRAY, true),\n                    new StringDimensionSchema(\"dimMultiVal\", MultiValueHandling.SORTED_ARRAY, true)\n                )\n            )\n        )\n        .withMetrics(\n            new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n        )\n        .withRollup(true)\n        .build();\n\n    IncrementalIndex toPersistA = new IncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    Map<String, Object> event1 = new HashMap<>();\n    event1.put(\"dimA\", \"leek\");\n    event1.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"4\"));\n    event1.put(\"sumCount\", 1L);\n\n    Map<String, Object> event2 = new HashMap<>();\n    event2.put(\"dimA\", \"leek\");\n    event2.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\", \"5\"));\n    event2.put(\"sumCount\", 1L);\n\n    toPersistA.add(new MapBasedInputRow(1, dims, event1));\n    toPersistA.add(new MapBasedInputRow(1, dims, event2));\n\n    IncrementalIndex toPersistB = new IncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    Map<String, Object> event3 = new HashMap<>();\n    event3.put(\"dimA\", \"leek\");\n    event3.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"4\"));\n    event3.put(\"sumCount\", 1L);\n\n    Map<String, Object> event4 = new HashMap<>();\n    event4.put(\"dimA\", \"potato\");\n    event4.put(\"dimMultiVal\", ImmutableList.of(\"0\", \"1\", \"4\"));\n    event4.put(\"sumCount\", 1L);\n\n    toPersistB.add(new MapBasedInputRow(1, dims, event3));\n    toPersistB.add(new MapBasedInputRow(1, dims, event4));\n\n    final File tmpDirA = temporaryFolder.newFolder();\n    final File tmpDirB = temporaryFolder.newFolder();\n    final File tmpDirMerged = temporaryFolder.newFolder();\n\n    QueryableIndex indexA = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistA, tmpDirA, indexSpec, null))\n    );\n\n    QueryableIndex indexB = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistB, tmpDirB, indexSpec, null))\n    );\n\n    final QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                Arrays.asList(indexA, indexB),\n                true,\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n                },\n                tmpDirMerged,\n                indexSpec,\n                null,\n                -1\n            )\n        )\n    );\n\n    final QueryableIndexIndexableAdapter adapter = new QueryableIndexIndexableAdapter(merged);\n    final List<DebugRow> rowList = RowIteratorHelper.toList(adapter.getRows());\n\n    Assert.assertEquals(\n        ImmutableList.of(\"dimA\", \"dimMultiVal\"),\n        ImmutableList.copyOf(adapter.getDimensionNames())\n    );\n\n    Assert.assertEquals(3, rowList.size());\n    Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\", \"5\")), rowList.get(0).dimensionValues());\n    Assert.assertEquals(1L, rowList.get(0).metricValues().get(0));\n    Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"4\")), rowList.get(1).dimensionValues());\n    Assert.assertEquals(2L, rowList.get(1).metricValues().get(0));\n    Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"0\", \"1\", \"4\")), rowList.get(2).dimensionValues());\n    Assert.assertEquals(1L, rowList.get(2).metricValues().get(0));\n\n    checkBitmapIndex(Arrays.asList(0, 1), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n    checkBitmapIndex(Collections.singletonList(2), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n    checkBitmapIndex(Collections.singletonList(2), adapter.getBitmapIndex(\"dimMultiVal\", \"0\"));\n    checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n    checkBitmapIndex(Arrays.asList(0, 1), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n    checkBitmapIndex(Collections.singletonList(0), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n    checkBitmapIndex(Arrays.asList(1, 2), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n    checkBitmapIndex(Collections.singletonList(0), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2207,"status":"M"},{"authorDate":"2021-01-08 14:18:47","commitOrder":3,"curCode":"  public void testMultivalDim_persistAndMerge_dimensionValueOrderingRules() throws Exception\n  {\n    List<String> dims = Arrays.asList(\n        \"dimA\",\n        \"dimMultiVal\"\n    );\n\n    IncrementalIndexSchema indexSchema = new IncrementalIndexSchema.Builder()\n        .withDimensionsSpec(\n            new DimensionsSpec(\n                ImmutableList.of(\n                    new StringDimensionSchema(\"dimA\", MultiValueHandling.SORTED_ARRAY, true),\n                    new StringDimensionSchema(\"dimMultiVal\", MultiValueHandling.SORTED_ARRAY, true)\n                )\n            )\n        )\n        .withMetrics(\n            new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n        )\n        .withRollup(true)\n        .build();\n\n    Map<String, Object> nullEvent = new HashMap<>();\n    nullEvent.put(\"dimA\", \"leek\");\n    nullEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> nullEvent2 = new HashMap<>();\n    nullEvent2.put(\"dimA\", \"leek\");\n    nullEvent2.put(\"dimMultiVal\", null);\n    nullEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> emptyListEvent = new HashMap<>();\n    emptyListEvent.put(\"dimA\", \"leek\");\n    emptyListEvent.put(\"dimMultiVal\", ImmutableList.of());\n    emptyListEvent.put(\"sumCount\", 1L);\n\n    List<String> listWithNull = new ArrayList<>();\n    listWithNull.add(null);\n    Map<String, Object> listWithNullEvent = new HashMap<>();\n    listWithNullEvent.put(\"dimA\", \"leek\");\n    listWithNullEvent.put(\"dimMultiVal\", listWithNull);\n    listWithNullEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> emptyStringEvent = new HashMap<>();\n    emptyStringEvent.put(\"dimA\", \"leek\");\n    emptyStringEvent.put(\"dimMultiVal\", \"\");\n    emptyStringEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithEmptyStringEvent = new HashMap<>();\n    listWithEmptyStringEvent.put(\"dimA\", \"leek\");\n    listWithEmptyStringEvent.put(\"dimMultiVal\", ImmutableList.of(\"\"));\n    listWithEmptyStringEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent = new HashMap<>();\n    singleValEvent.put(\"dimA\", \"leek\");\n    singleValEvent.put(\"dimMultiVal\", \"1\");\n    singleValEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent2 = new HashMap<>();\n    singleValEvent2.put(\"dimA\", \"leek\");\n    singleValEvent2.put(\"dimMultiVal\", \"2\");\n    singleValEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent3 = new HashMap<>();\n    singleValEvent3.put(\"dimA\", \"potato\");\n    singleValEvent3.put(\"dimMultiVal\", \"2\");\n    singleValEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent = new HashMap<>();\n    listWithSingleValEvent.put(\"dimA\", \"leek\");\n    listWithSingleValEvent.put(\"dimMultiVal\", ImmutableList.of(\"1\"));\n    listWithSingleValEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent2 = new HashMap<>();\n    listWithSingleValEvent2.put(\"dimA\", \"leek\");\n    listWithSingleValEvent2.put(\"dimMultiVal\", ImmutableList.of(\"2\"));\n    listWithSingleValEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent3 = new HashMap<>();\n    listWithSingleValEvent3.put(\"dimA\", \"potato\");\n    listWithSingleValEvent3.put(\"dimMultiVal\", ImmutableList.of(\"2\"));\n    listWithSingleValEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent = new HashMap<>();\n    multivalEvent.put(\"dimA\", \"leek\");\n    multivalEvent.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\"));\n    multivalEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent2 = new HashMap<>();\n    multivalEvent2.put(\"dimA\", \"leek\");\n    multivalEvent2.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"4\"));\n    multivalEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent3 = new HashMap<>();\n    multivalEvent3.put(\"dimA\", \"leek\");\n    multivalEvent3.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\", \"5\"));\n    multivalEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent4 = new HashMap<>();\n    multivalEvent4.put(\"dimA\", \"leek\");\n    multivalEvent4.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\"));\n    multivalEvent4.put(\"sumCount\", 1L);\n\n    List<String> multivalEvent5List = Arrays.asList(\"1\", \"2\", \"3\", null);\n    Map<String, Object> multivalEvent5 = new HashMap<>();\n    multivalEvent5.put(\"dimA\", \"leek\");\n    multivalEvent5.put(\"dimMultiVal\", multivalEvent5List);\n    multivalEvent5.put(\"sumCount\", 1L);\n\n    List<String> multivalEvent6List = Arrays.asList(null, \"3\");\n    Map<String, Object> multivalEvent6 = new HashMap<>();\n    multivalEvent6.put(\"dimA\", \"leek\");\n    multivalEvent6.put(\"dimMultiVal\", multivalEvent6List);\n    multivalEvent6.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent7 = new HashMap<>();\n    multivalEvent7.put(\"dimA\", \"leek\");\n    multivalEvent7.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\", \"\"));\n    multivalEvent7.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent8 = new HashMap<>();\n    multivalEvent8.put(\"dimA\", \"leek\");\n    multivalEvent8.put(\"dimMultiVal\", ImmutableList.of(\"\", \"3\"));\n    multivalEvent8.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent9 = new HashMap<>();\n    multivalEvent9.put(\"dimA\", \"potato\");\n    multivalEvent9.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\"));\n    multivalEvent9.put(\"sumCount\", 1L);\n\n    List<Map<String, Object>> events = ImmutableList.of(\n        nullEvent,\n        nullEvent2,\n        emptyListEvent,\n        listWithNullEvent,\n        emptyStringEvent,\n        listWithEmptyStringEvent,\n        singleValEvent,\n        singleValEvent2,\n        singleValEvent3,\n        listWithSingleValEvent,\n        listWithSingleValEvent2,\n        listWithSingleValEvent3,\n        multivalEvent,\n        multivalEvent2,\n        multivalEvent3,\n        multivalEvent4,\n        multivalEvent5,\n        multivalEvent6,\n        multivalEvent7,\n        multivalEvent8,\n        multivalEvent9\n    );\n\n    IncrementalIndex toPersistA = new OnheapIncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .build();\n\n    for (Map<String, Object> event : events) {\n      toPersistA.add(new MapBasedInputRow(1, dims, event));\n    }\n\n    final File tmpDirA = temporaryFolder.newFolder();\n    QueryableIndex indexA = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistA, tmpDirA, indexSpec, null))\n    );\n\n    List<QueryableIndex> singleEventIndexes = new ArrayList<>();\n    for (Map<String, Object> event : events) {\n      IncrementalIndex toPersist = new OnheapIncrementalIndex.Builder()\n          .setIndexSchema(indexSchema)\n          .setMaxRowCount(1000)\n          .build();\n\n      toPersist.add(new MapBasedInputRow(1, dims, event));\n      final File tmpDir = temporaryFolder.newFolder();\n      QueryableIndex queryableIndex = closer.closeLater(\n          indexIO.loadIndex(indexMerger.persist(toPersist, tmpDir, indexSpec, null))\n      );\n      singleEventIndexes.add(queryableIndex);\n    }\n    singleEventIndexes.add(indexA);\n\n    final File tmpDirMerged = temporaryFolder.newFolder();\n    final QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                singleEventIndexes,\n                true,\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n                },\n                tmpDirMerged,\n                indexSpec,\n                null,\n                -1\n            )\n        )\n    );\n\n    final QueryableIndexIndexableAdapter adapter = new QueryableIndexIndexableAdapter(merged);\n    final List<DebugRow> rowList = RowIteratorHelper.toList(adapter.getRows());\n\n    Assert.assertEquals(\n        ImmutableList.of(\"dimA\", \"dimMultiVal\"),\n        ImmutableList.copyOf(adapter.getDimensionNames())\n    );\n\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(11, rowList.size());\n\n      Assert.assertEquals(Arrays.asList(\"leek\", null), rowList.get(0).dimensionValues());\n      Assert.assertEquals(12L, rowList.get(0).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"1\", \"2\", \"3\")), rowList.get(1).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(1).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"3\")), rowList.get(2).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(2).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"1\"), rowList.get(3).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(3).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\")), rowList.get(4).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(4).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\")), rowList.get(5).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(5).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\", \"5\")), rowList.get(6).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(6).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"4\")), rowList.get(7).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(7).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"2\"), rowList.get(8).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(8).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"1\", \"3\")), rowList.get(9).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(9).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", \"2\"), rowList.get(10).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(10).metricValues().get(0));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n      checkBitmapIndex(Arrays.asList(9, 10), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", null));\n      checkBitmapIndex(ImmutableList.of(), adapter.getBitmapIndex(\"dimMultiVal\", \"\"));\n      checkBitmapIndex(Arrays.asList(1, 3, 4, 5, 6, 7, 9), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 8, 10), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n      checkBitmapIndex(Arrays.asList(1, 2, 4, 5, 6, 9), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n      checkBitmapIndex(Collections.singletonList(7), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n      checkBitmapIndex(Collections.singletonList(6), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n    } else {\n      Assert.assertEquals(14, rowList.size());\n\n      Assert.assertEquals(Arrays.asList(\"leek\", null), rowList.get(0).dimensionValues());\n      Assert.assertEquals(8L, rowList.get(0).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"1\", \"2\", \"3\")), rowList.get(1).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(1).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"3\")), rowList.get(2).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(2).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"\"), rowList.get(3).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(3).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"\", \"1\", \"2\", \"3\")), rowList.get(4).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(4).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"\", \"3\")), rowList.get(5).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(5).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"1\"), rowList.get(6).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(6).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\")), rowList.get(7).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(7).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\")), rowList.get(8).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(8).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\", \"5\")), rowList.get(9).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(9).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"4\")), rowList.get(10).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(10).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"2\"), rowList.get(11).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(11).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"1\", \"3\")), rowList.get(12).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(12).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", \"2\"), rowList.get(13).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(13).metricValues().get(0));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n      checkBitmapIndex(Arrays.asList(12, 13), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", null));\n      checkBitmapIndex(ImmutableList.of(3, 4, 5), adapter.getBitmapIndex(\"dimMultiVal\", \"\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 6, 7, 8, 9, 10, 12), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 7, 11, 13), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n      checkBitmapIndex(Arrays.asList(1, 2, 4, 5, 7, 8, 9, 12), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n      checkBitmapIndex(Collections.singletonList(10), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n      checkBitmapIndex(Collections.singletonList(9), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n    }\n  }\n","date":"2021-01-08 14:18:47","endLine":2633,"groupId":"105798","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultivalDim_persistAndMerge_dimensionValueOrderingRules","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/12/4554ee52ec63d24cddcee360b357f8548903c5.src","preCode":"  public void testMultivalDim_persistAndMerge_dimensionValueOrderingRules() throws Exception\n  {\n    List<String> dims = Arrays.asList(\n        \"dimA\",\n        \"dimMultiVal\"\n    );\n\n    IncrementalIndexSchema indexSchema = new IncrementalIndexSchema.Builder()\n        .withDimensionsSpec(\n            new DimensionsSpec(\n                ImmutableList.of(\n                    new StringDimensionSchema(\"dimA\", MultiValueHandling.SORTED_ARRAY, true),\n                    new StringDimensionSchema(\"dimMultiVal\", MultiValueHandling.SORTED_ARRAY, true)\n                )\n            )\n        )\n        .withMetrics(\n            new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n        )\n        .withRollup(true)\n        .build();\n\n    Map<String, Object> nullEvent = new HashMap<>();\n    nullEvent.put(\"dimA\", \"leek\");\n    nullEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> nullEvent2 = new HashMap<>();\n    nullEvent2.put(\"dimA\", \"leek\");\n    nullEvent2.put(\"dimMultiVal\", null);\n    nullEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> emptyListEvent = new HashMap<>();\n    emptyListEvent.put(\"dimA\", \"leek\");\n    emptyListEvent.put(\"dimMultiVal\", ImmutableList.of());\n    emptyListEvent.put(\"sumCount\", 1L);\n\n    List<String> listWithNull = new ArrayList<>();\n    listWithNull.add(null);\n    Map<String, Object> listWithNullEvent = new HashMap<>();\n    listWithNullEvent.put(\"dimA\", \"leek\");\n    listWithNullEvent.put(\"dimMultiVal\", listWithNull);\n    listWithNullEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> emptyStringEvent = new HashMap<>();\n    emptyStringEvent.put(\"dimA\", \"leek\");\n    emptyStringEvent.put(\"dimMultiVal\", \"\");\n    emptyStringEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithEmptyStringEvent = new HashMap<>();\n    listWithEmptyStringEvent.put(\"dimA\", \"leek\");\n    listWithEmptyStringEvent.put(\"dimMultiVal\", ImmutableList.of(\"\"));\n    listWithEmptyStringEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent = new HashMap<>();\n    singleValEvent.put(\"dimA\", \"leek\");\n    singleValEvent.put(\"dimMultiVal\", \"1\");\n    singleValEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent2 = new HashMap<>();\n    singleValEvent2.put(\"dimA\", \"leek\");\n    singleValEvent2.put(\"dimMultiVal\", \"2\");\n    singleValEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> singleValEvent3 = new HashMap<>();\n    singleValEvent3.put(\"dimA\", \"potato\");\n    singleValEvent3.put(\"dimMultiVal\", \"2\");\n    singleValEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent = new HashMap<>();\n    listWithSingleValEvent.put(\"dimA\", \"leek\");\n    listWithSingleValEvent.put(\"dimMultiVal\", ImmutableList.of(\"1\"));\n    listWithSingleValEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent2 = new HashMap<>();\n    listWithSingleValEvent2.put(\"dimA\", \"leek\");\n    listWithSingleValEvent2.put(\"dimMultiVal\", ImmutableList.of(\"2\"));\n    listWithSingleValEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> listWithSingleValEvent3 = new HashMap<>();\n    listWithSingleValEvent3.put(\"dimA\", \"potato\");\n    listWithSingleValEvent3.put(\"dimMultiVal\", ImmutableList.of(\"2\"));\n    listWithSingleValEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent = new HashMap<>();\n    multivalEvent.put(\"dimA\", \"leek\");\n    multivalEvent.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\"));\n    multivalEvent.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent2 = new HashMap<>();\n    multivalEvent2.put(\"dimA\", \"leek\");\n    multivalEvent2.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"4\"));\n    multivalEvent2.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent3 = new HashMap<>();\n    multivalEvent3.put(\"dimA\", \"leek\");\n    multivalEvent3.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\", \"5\"));\n    multivalEvent3.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent4 = new HashMap<>();\n    multivalEvent4.put(\"dimA\", \"leek\");\n    multivalEvent4.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\"));\n    multivalEvent4.put(\"sumCount\", 1L);\n\n    List<String> multivalEvent5List = Arrays.asList(\"1\", \"2\", \"3\", null);\n    Map<String, Object> multivalEvent5 = new HashMap<>();\n    multivalEvent5.put(\"dimA\", \"leek\");\n    multivalEvent5.put(\"dimMultiVal\", multivalEvent5List);\n    multivalEvent5.put(\"sumCount\", 1L);\n\n    List<String> multivalEvent6List = Arrays.asList(null, \"3\");\n    Map<String, Object> multivalEvent6 = new HashMap<>();\n    multivalEvent6.put(\"dimA\", \"leek\");\n    multivalEvent6.put(\"dimMultiVal\", multivalEvent6List);\n    multivalEvent6.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent7 = new HashMap<>();\n    multivalEvent7.put(\"dimA\", \"leek\");\n    multivalEvent7.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"2\", \"3\", \"\"));\n    multivalEvent7.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent8 = new HashMap<>();\n    multivalEvent8.put(\"dimA\", \"leek\");\n    multivalEvent8.put(\"dimMultiVal\", ImmutableList.of(\"\", \"3\"));\n    multivalEvent8.put(\"sumCount\", 1L);\n\n    Map<String, Object> multivalEvent9 = new HashMap<>();\n    multivalEvent9.put(\"dimA\", \"potato\");\n    multivalEvent9.put(\"dimMultiVal\", ImmutableList.of(\"1\", \"3\"));\n    multivalEvent9.put(\"sumCount\", 1L);\n\n    List<Map<String, Object>> events = ImmutableList.of(\n        nullEvent,\n        nullEvent2,\n        emptyListEvent,\n        listWithNullEvent,\n        emptyStringEvent,\n        listWithEmptyStringEvent,\n        singleValEvent,\n        singleValEvent2,\n        singleValEvent3,\n        listWithSingleValEvent,\n        listWithSingleValEvent2,\n        listWithSingleValEvent3,\n        multivalEvent,\n        multivalEvent2,\n        multivalEvent3,\n        multivalEvent4,\n        multivalEvent5,\n        multivalEvent6,\n        multivalEvent7,\n        multivalEvent8,\n        multivalEvent9\n    );\n\n    IncrementalIndex toPersistA = new IncrementalIndex.Builder()\n        .setIndexSchema(indexSchema)\n        .setMaxRowCount(1000)\n        .buildOnheap();\n\n    for (Map<String, Object> event : events) {\n      toPersistA.add(new MapBasedInputRow(1, dims, event));\n    }\n\n    final File tmpDirA = temporaryFolder.newFolder();\n    QueryableIndex indexA = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersistA, tmpDirA, indexSpec, null))\n    );\n\n    List<QueryableIndex> singleEventIndexes = new ArrayList<>();\n    for (Map<String, Object> event : events) {\n      IncrementalIndex toPersist = new IncrementalIndex.Builder()\n          .setIndexSchema(indexSchema)\n          .setMaxRowCount(1000)\n          .buildOnheap();\n\n      toPersist.add(new MapBasedInputRow(1, dims, event));\n      final File tmpDir = temporaryFolder.newFolder();\n      QueryableIndex queryableIndex = closer.closeLater(\n          indexIO.loadIndex(indexMerger.persist(toPersist, tmpDir, indexSpec, null))\n      );\n      singleEventIndexes.add(queryableIndex);\n    }\n    singleEventIndexes.add(indexA);\n\n    final File tmpDirMerged = temporaryFolder.newFolder();\n    final QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                singleEventIndexes,\n                true,\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"sumCount\", \"sumCount\")\n                },\n                tmpDirMerged,\n                indexSpec,\n                null,\n                -1\n            )\n        )\n    );\n\n    final QueryableIndexIndexableAdapter adapter = new QueryableIndexIndexableAdapter(merged);\n    final List<DebugRow> rowList = RowIteratorHelper.toList(adapter.getRows());\n\n    Assert.assertEquals(\n        ImmutableList.of(\"dimA\", \"dimMultiVal\"),\n        ImmutableList.copyOf(adapter.getDimensionNames())\n    );\n\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(11, rowList.size());\n\n      Assert.assertEquals(Arrays.asList(\"leek\", null), rowList.get(0).dimensionValues());\n      Assert.assertEquals(12L, rowList.get(0).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"1\", \"2\", \"3\")), rowList.get(1).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(1).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"3\")), rowList.get(2).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(2).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"1\"), rowList.get(3).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(3).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\")), rowList.get(4).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(4).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\")), rowList.get(5).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(5).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\", \"5\")), rowList.get(6).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(6).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"4\")), rowList.get(7).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(7).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"2\"), rowList.get(8).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(8).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"1\", \"3\")), rowList.get(9).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(9).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", \"2\"), rowList.get(10).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(10).metricValues().get(0));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n      checkBitmapIndex(Arrays.asList(9, 10), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", null));\n      checkBitmapIndex(ImmutableList.of(), adapter.getBitmapIndex(\"dimMultiVal\", \"\"));\n      checkBitmapIndex(Arrays.asList(1, 3, 4, 5, 6, 7, 9), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 8, 10), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n      checkBitmapIndex(Arrays.asList(1, 2, 4, 5, 6, 9), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n      checkBitmapIndex(Collections.singletonList(7), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n      checkBitmapIndex(Collections.singletonList(6), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n    } else {\n      Assert.assertEquals(14, rowList.size());\n\n      Assert.assertEquals(Arrays.asList(\"leek\", null), rowList.get(0).dimensionValues());\n      Assert.assertEquals(8L, rowList.get(0).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"1\", \"2\", \"3\")), rowList.get(1).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(1).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(null, \"3\")), rowList.get(2).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(2).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"\"), rowList.get(3).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(3).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"\", \"1\", \"2\", \"3\")), rowList.get(4).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(4).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"\", \"3\")), rowList.get(5).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(5).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"1\"), rowList.get(6).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(6).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"2\", \"3\")), rowList.get(7).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(7).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\")), rowList.get(8).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(8).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"3\", \"5\")), rowList.get(9).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(9).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", Arrays.asList(\"1\", \"4\")), rowList.get(10).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(10).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"leek\", \"2\"), rowList.get(11).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(11).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", Arrays.asList(\"1\", \"3\")), rowList.get(12).dimensionValues());\n      Assert.assertEquals(2L, rowList.get(12).metricValues().get(0));\n\n      Assert.assertEquals(Arrays.asList(\"potato\", \"2\"), rowList.get(13).dimensionValues());\n      Assert.assertEquals(4L, rowList.get(13).metricValues().get(0));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), adapter.getBitmapIndex(\"dimA\", \"leek\"));\n      checkBitmapIndex(Arrays.asList(12, 13), adapter.getBitmapIndex(\"dimA\", \"potato\"));\n\n      checkBitmapIndex(Arrays.asList(0, 1, 2), adapter.getBitmapIndex(\"dimMultiVal\", null));\n      checkBitmapIndex(ImmutableList.of(3, 4, 5), adapter.getBitmapIndex(\"dimMultiVal\", \"\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 6, 7, 8, 9, 10, 12), adapter.getBitmapIndex(\"dimMultiVal\", \"1\"));\n      checkBitmapIndex(Arrays.asList(1, 4, 7, 11, 13), adapter.getBitmapIndex(\"dimMultiVal\", \"2\"));\n      checkBitmapIndex(Arrays.asList(1, 2, 4, 5, 7, 8, 9, 12), adapter.getBitmapIndex(\"dimMultiVal\", \"3\"));\n      checkBitmapIndex(Collections.singletonList(10), adapter.getBitmapIndex(\"dimMultiVal\", \"4\"));\n      checkBitmapIndex(Collections.singletonList(9), adapter.getBitmapIndex(\"dimMultiVal\", \"5\"));\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2322,"status":"M"}],"commitId":"08ab82f55ca856d60dfe1088c1c0393428b0bb6d","commitMessage":"@@@IncrementalIndex Tests and Benchmarks Parametrization (#10593)\n\n* Remove redundant IncrementalIndex.Builder\n\n* Parametrize incremental index tests and benchmarks\n\n- Reveal and fix a bug in OffheapIncrementalIndex\n\n* Fix forbiddenapis error: Forbidden method invocation: java.lang.String#format(java.lang.String. java.lang.Object[]) [Uses default locale]\n\n* Fix Intellij errors: declared exception is never thrown\n\n* Add documentation and validate before closing objects on tearDown.\n\n* Add documentation to OffheapIncrementalIndexTestSpec\n\n* Doc corrections and minor changes.\n\n* Add logging for generated rows.\n\n* Refactor new tests/benchmarks.\n\n* Improve IncrementalIndexCreator documentation\n\n* Add required tests for DataGenerator\n\n* Revert \"rollupOpportunity\" to be a string","date":"2021-01-08 14:18:47","modifiedFileCount":"62","status":"M","submitter":"Liran Funaro"}]
