[{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2020-08-06 06:39:58","commitOrder":5,"curCode":"  public void testGroupByLimitPushDownWithOffset()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(QueryRunnerTestHelper.ALL_GRAN).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.MARKET_DIMENSION,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\n                    \"marketalias\",\n                    OrderByColumnSpec.Direction.DESCENDING\n                )),\n                1,\n                2\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT)\n        .overrideContext(ImmutableMap.of(GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN, true))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\",\n            \"total_market\",\n            \"rows\",\n            186L\n        ),\n        makeRow(\n            query,\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\",\n            \"spot\",\n            \"rows\",\n            837L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"order-limit\");\n  }\n","date":"2020-08-06 06:39:58","endLine":9947,"groupId":"14658","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByLimitPushDownWithOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/3c558d87951cea5b49e52a9d66a40358506720.src","preCode":"  public void testGroupByLimitPushDownWithOffset()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(QueryRunnerTestHelper.ALL_GRAN).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.MARKET_DIMENSION,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\n                    \"marketalias\",\n                    OrderByColumnSpec.Direction.DESCENDING\n                )),\n                1,\n                2\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT)\n        .overrideContext(ImmutableMap.of(GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN, true))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\",\n            \"total_market\",\n            \"rows\",\n            186L\n        ),\n        makeRow(\n            query,\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\",\n            \"spot\",\n            \"rows\",\n            837L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"order-limit\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":9901,"status":"B"},{"authorDate":"2019-08-23 18:13:54","commitOrder":5,"curCode":"  public void testGroupByLimitPushDownPostAggNotSupported()\n  {\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\"Limit push down when sorting by a post aggregator is not supported.\");\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(QueryRunnerTestHelper.ALL_GRAN).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.MARKET_DIMENSION,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\n                    \"constant\",\n                    OrderByColumnSpec.Direction.DESCENDING\n                )),\n                2\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(new ConstantPostAggregator(\"constant\", 1))\n        )\n        .overrideContext(\n            ImmutableMap.of(\n                GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN,\n                true\n            )\n        )\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n  }\n","date":"2019-08-23 18:13:54","endLine":10267,"groupId":"20595","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByLimitPushDownPostAggNotSupported","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/62/70f6bf822e9df520831f224e31e00bb9d44650.src","preCode":"  public void testGroupByLimitPushDownPostAggNotSupported()\n  {\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\"Limit push down when sorting by a post aggregator is not supported.\");\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(QueryRunnerTestHelper.ALL_GRAN).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.MARKET_DIMENSION,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\n                    \"constant\",\n                    OrderByColumnSpec.Direction.DESCENDING\n                )),\n                2\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(new ConstantPostAggregator(\"constant\", 1))\n        )\n        .overrideContext(\n            ImmutableMap.of(\n                GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN,\n                true\n            )\n        )\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":10234,"status":"NB"}],"commitId":"b6aaf59e8cdc4b2965ec9f54d8b824a51baaa594","commitMessage":"@@@Add \"offset\" parameter to GroupBy query. (#10235)\n\n* Add \"offset\" parameter to GroupBy query.\n\nIt works by doing the query as normal and then throwing away the first\n\"offset\" number of rows on the broker.\n\n* Stabilize GroupBy sorts.\n\n* Fix inspections.\n\n* Fix suppression.\n\n* Fixups.\n\n* Move TopNSequence to druid-core.\n\n* Addl comments.\n\n* NumberedElement equals verification.\n\n* Changes from review.","date":"2020-08-06 06:39:58","modifiedFileCount":"12","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-08-14 04:30:41","codes":[{"authorDate":"2020-08-06 06:39:58","commitOrder":6,"curCode":"  public void testGroupByLimitPushDownWithOffset()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(QueryRunnerTestHelper.ALL_GRAN).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.MARKET_DIMENSION,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\n                    \"marketalias\",\n                    OrderByColumnSpec.Direction.DESCENDING\n                )),\n                1,\n                2\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT)\n        .overrideContext(ImmutableMap.of(GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN, true))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\",\n            \"total_market\",\n            \"rows\",\n            186L\n        ),\n        makeRow(\n            query,\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\",\n            \"spot\",\n            \"rows\",\n            837L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"order-limit\");\n  }\n","date":"2020-08-06 06:39:58","endLine":9947,"groupId":"106519","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByLimitPushDownWithOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/3c558d87951cea5b49e52a9d66a40358506720.src","preCode":"  public void testGroupByLimitPushDownWithOffset()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(QueryRunnerTestHelper.ALL_GRAN).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.MARKET_DIMENSION,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\n                    \"marketalias\",\n                    OrderByColumnSpec.Direction.DESCENDING\n                )),\n                1,\n                2\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT)\n        .overrideContext(ImmutableMap.of(GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN, true))\n        .build();\n\n    List<ResultRow> expectedResults = Arrays.asList(\n        makeRow(\n            query,\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\",\n            \"total_market\",\n            \"rows\",\n            186L\n        ),\n        makeRow(\n            query,\n            \"1970-01-01T00:00:00.000Z\",\n            \"marketalias\",\n            \"spot\",\n            \"rows\",\n            837L\n        )\n    );\n\n    Iterable<ResultRow> results = GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n    TestHelper.assertExpectedObjects(expectedResults, results, \"order-limit\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":9901,"status":"N"},{"authorDate":"2020-08-14 04:30:41","commitOrder":6,"curCode":"  public void testGroupByLimitPushDownPostAggNotSupported()\n  {\n    if (!config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V2)) {\n      return;\n    }\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\"Limit push down when sorting by a post aggregator is not supported.\");\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(QueryRunnerTestHelper.ALL_GRAN).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.MARKET_DIMENSION,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\n                    \"constant\",\n                    OrderByColumnSpec.Direction.DESCENDING\n                )),\n                2\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(new ConstantPostAggregator(\"constant\", 1))\n        )\n        .overrideContext(\n            ImmutableMap.of(\n                GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN,\n                true\n            )\n        )\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n  }\n","date":"2020-08-14 04:30:41","endLine":10454,"groupId":"106519","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByLimitPushDownPostAggNotSupported","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c8/9e35b44139bffcb8d9671438a366458a904589.src","preCode":"  public void testGroupByLimitPushDownPostAggNotSupported()\n  {\n    expectedException.expect(UnsupportedOperationException.class);\n    expectedException.expectMessage(\"Limit push down when sorting by a post aggregator is not supported.\");\n\n    GroupByQuery query = makeQueryBuilder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(QueryRunnerTestHelper.ALL_GRAN).setDimensions(new DefaultDimensionSpec(\n            QueryRunnerTestHelper.MARKET_DIMENSION,\n            \"marketalias\"\n        ))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setLimitSpec(\n            new DefaultLimitSpec(\n                Collections.singletonList(new OrderByColumnSpec(\n                    \"constant\",\n                    OrderByColumnSpec.Direction.DESCENDING\n                )),\n                2\n            )\n        ).setAggregatorSpecs(QueryRunnerTestHelper.ROWS_COUNT)\n        .setPostAggregatorSpecs(\n            Collections.singletonList(new ConstantPostAggregator(\"constant\", 1))\n        )\n        .overrideContext(\n            ImmutableMap.of(\n                GroupByQueryConfig.CTX_KEY_FORCE_LIMIT_PUSH_DOWN,\n                true\n            )\n        )\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":10418,"status":"M"}],"commitId":"a61263b4a97ef456e383dddb8a270082e122f4db","commitMessage":"@@@Allow forceLimitPushDown in SQL (#10253)\n\n* Allow forceLimitPushDown in SQL\n\n* fix test\n\n* fix test\n\n* review comments\n\n* fix test","date":"2020-08-14 04:30:41","modifiedFileCount":"4","status":"M","submitter":"Jihoon Son"}]
