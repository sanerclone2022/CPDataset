[{"authorTime":"2020-02-01 15:51:16","codes":[{"authorDate":"2020-02-01 15:51:16","commitOrder":1,"curCode":"  public void testSelectOnLookupUsingLeftJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, lookyloo.*\\n\"\n        + \"FROM foo LEFT JOIN lookup.lookyloo ON foo.dim1 = lookyloo.k\\n\"\n        + \"WHERE lookyloo.v <> 'xxx' OR lookyloo.v IS NULL\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                        JoinType.LEFT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .filters(or(not(selector(\"j0.v\", \"xxx\", null)), selector(\"j0.v\", null, null)))\n                .columns(\"dim1\", \"j0.k\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", NULL_STRING, NULL_STRING},\n            new Object[]{\"10.1\", NULL_STRING, NULL_STRING},\n            new Object[]{\"2\", NULL_STRING, NULL_STRING},\n            new Object[]{\"1\", NULL_STRING, NULL_STRING},\n            new Object[]{\"def\", NULL_STRING, NULL_STRING},\n            new Object[]{\"abc\", \"abc\", \"xabc\"}\n        )\n    );\n  }\n","date":"2020-02-01 15:51:16","endLine":7937,"groupId":"3683","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectOnLookupUsingLeftJoinOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/33/01b87f076650932db93ab0d17d4c328cc75ab1.src","preCode":"  public void testSelectOnLookupUsingLeftJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, lookyloo.*\\n\"\n        + \"FROM foo LEFT JOIN lookup.lookyloo ON foo.dim1 = lookyloo.k\\n\"\n        + \"WHERE lookyloo.v <> 'xxx' OR lookyloo.v IS NULL\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                        JoinType.LEFT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .filters(or(not(selector(\"j0.v\", \"xxx\", null)), selector(\"j0.v\", null, null)))\n                .columns(\"dim1\", \"j0.k\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", NULL_STRING, NULL_STRING},\n            new Object[]{\"10.1\", NULL_STRING, NULL_STRING},\n            new Object[]{\"2\", NULL_STRING, NULL_STRING},\n            new Object[]{\"1\", NULL_STRING, NULL_STRING},\n            new Object[]{\"def\", NULL_STRING, NULL_STRING},\n            new Object[]{\"abc\", \"abc\", \"xabc\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7905,"status":"B"},{"authorDate":"2020-02-01 15:51:16","commitOrder":1,"curCode":"  public void testSelectOnLookupUsingRightJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, lookyloo.*\\n\"\n        + \"FROM foo RIGHT JOIN lookup.lookyloo ON foo.dim1 = lookyloo.k\\n\"\n        + \"WHERE lookyloo.v <> 'xxx' OR lookyloo.v IS NULL\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                        JoinType.RIGHT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .filters(or(not(selector(\"j0.v\", \"xxx\", null)), selector(\"j0.v\", null, null)))\n                .columns(\"dim1\", \"j0.k\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", \"abc\", \"xabc\"},\n            new Object[]{NULL_STRING, \"a\", \"xa\"},\n            new Object[]{NULL_STRING, \"nosuchkey\", \"mysteryvalue\"}\n        )\n    );\n  }\n","date":"2020-02-01 15:51:16","endLine":7969,"groupId":"3683","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectOnLookupUsingRightJoinOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/33/01b87f076650932db93ab0d17d4c328cc75ab1.src","preCode":"  public void testSelectOnLookupUsingRightJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, lookyloo.*\\n\"\n        + \"FROM foo RIGHT JOIN lookup.lookyloo ON foo.dim1 = lookyloo.k\\n\"\n        + \"WHERE lookyloo.v <> 'xxx' OR lookyloo.v IS NULL\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                        JoinType.RIGHT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .filters(or(not(selector(\"j0.v\", \"xxx\", null)), selector(\"j0.v\", null, null)))\n                .columns(\"dim1\", \"j0.k\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", \"abc\", \"xabc\"},\n            new Object[]{NULL_STRING, \"a\", \"xa\"},\n            new Object[]{NULL_STRING, \"nosuchkey\", \"mysteryvalue\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7940,"status":"B"}],"commitId":"b411443d228c14de746311e09db28b437c2746a5","commitMessage":"@@@SQL join support for lookups. (#9294)\n\n* SQL join support for lookups.\n\n1) Add LookupSchema to SQL.  so lookups show up in the catalog.\n2) Add join-related rels and rules to SQL.  allowing joins to be planned into\n   native Druid queries.\n\n* Add two missing LookupSchema calls in tests.\n\n* Fix tests.\n\n* Fix typo.\n","date":"2020-02-01 15:51:16","modifiedFileCount":"30","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-03-23 07:43:55","codes":[{"authorDate":"2020-02-01 15:51:16","commitOrder":2,"curCode":"  public void testSelectOnLookupUsingLeftJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, lookyloo.*\\n\"\n        + \"FROM foo LEFT JOIN lookup.lookyloo ON foo.dim1 = lookyloo.k\\n\"\n        + \"WHERE lookyloo.v <> 'xxx' OR lookyloo.v IS NULL\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                        JoinType.LEFT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .filters(or(not(selector(\"j0.v\", \"xxx\", null)), selector(\"j0.v\", null, null)))\n                .columns(\"dim1\", \"j0.k\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", NULL_STRING, NULL_STRING},\n            new Object[]{\"10.1\", NULL_STRING, NULL_STRING},\n            new Object[]{\"2\", NULL_STRING, NULL_STRING},\n            new Object[]{\"1\", NULL_STRING, NULL_STRING},\n            new Object[]{\"def\", NULL_STRING, NULL_STRING},\n            new Object[]{\"abc\", \"abc\", \"xabc\"}\n        )\n    );\n  }\n","date":"2020-02-01 15:51:16","endLine":7937,"groupId":"3683","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectOnLookupUsingLeftJoinOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/33/01b87f076650932db93ab0d17d4c328cc75ab1.src","preCode":"  public void testSelectOnLookupUsingLeftJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, lookyloo.*\\n\"\n        + \"FROM foo LEFT JOIN lookup.lookyloo ON foo.dim1 = lookyloo.k\\n\"\n        + \"WHERE lookyloo.v <> 'xxx' OR lookyloo.v IS NULL\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                        JoinType.LEFT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .filters(or(not(selector(\"j0.v\", \"xxx\", null)), selector(\"j0.v\", null, null)))\n                .columns(\"dim1\", \"j0.k\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", NULL_STRING, NULL_STRING},\n            new Object[]{\"10.1\", NULL_STRING, NULL_STRING},\n            new Object[]{\"2\", NULL_STRING, NULL_STRING},\n            new Object[]{\"1\", NULL_STRING, NULL_STRING},\n            new Object[]{\"def\", NULL_STRING, NULL_STRING},\n            new Object[]{\"abc\", \"abc\", \"xabc\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7905,"status":"N"},{"authorDate":"2020-03-23 07:43:55","commitOrder":2,"curCode":"  public void testSelectOnLookupUsingRightJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, lookyloo.*\\n\"\n        + \"FROM foo RIGHT JOIN lookup.lookyloo ON foo.dim1 = lookyloo.k\\n\"\n        + \"WHERE lookyloo.v <> 'xxx' OR lookyloo.v IS NULL\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                        JoinType.RIGHT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .filters(or(not(selector(\"j0.v\", \"xxx\", null)), selector(\"j0.v\", null, null)))\n                .columns(\"dim1\", \"j0.k\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", \"abc\", \"xabc\"},\n            new Object[]{NULL_STRING, \"a\", \"xa\"},\n            new Object[]{NULL_STRING, \"nosuchkey\", \"mysteryvalue\"},\n            new Object[]{NULL_STRING, \"6\", \"x6\"}\n        )\n    );\n  }\n","date":"2020-03-23 07:43:55","endLine":8729,"groupId":"3683","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectOnLookupUsingRightJoinOperator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bf/4aae4768404224949ecf6cb280109ad12228a1.src","preCode":"  public void testSelectOnLookupUsingRightJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, lookyloo.*\\n\"\n        + \"FROM foo RIGHT JOIN lookup.lookyloo ON foo.dim1 = lookyloo.k\\n\"\n        + \"WHERE lookyloo.v <> 'xxx' OR lookyloo.v IS NULL\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                        JoinType.RIGHT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .filters(or(not(selector(\"j0.v\", \"xxx\", null)), selector(\"j0.v\", null, null)))\n                .columns(\"dim1\", \"j0.k\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", \"abc\", \"xabc\"},\n            new Object[]{NULL_STRING, \"a\", \"xa\"},\n            new Object[]{NULL_STRING, \"nosuchkey\", \"mysteryvalue\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":8699,"status":"M"}],"commitId":"54c9325256c33622bc8d198dc0252a157f68f196","commitMessage":"@@@SQL support for joins on subqueries. (#9545)\n\n* SQL support for joins on subqueries.\n\nChanges to SQL module:\n\n- DruidJoinRule: Allow joins on subqueries (left/right are no longer\n  required to be scans or mappings).\n- DruidJoinRel: Add cost estimation code for joins on subqueries.\n- DruidSemiJoinRule.  DruidSemiJoinRel: Removed.  since DruidJoinRule can\n  handle this case now.\n- DruidRel: Remove Nullable annotation from toDruidQuery.  because\n  it is no longer needed (it was used by DruidSemiJoinRel).\n- Update Rules constants to reflect new rules available in our current\n  version of Calcite. Some of these are useful for optimizing joins on\n  subqueries.\n- Rework cost estimation to be in terms of cost per row.  and place all\n  relevant constants in CostEstimates.\n\nOther changes:\n\n- RowBasedColumnSelectorFactory: Don't set hasMultipleValues. The lack\n  of isComplete is enough to let callers know that columns might have\n  multiple values.  and explicitly setting it to true causes\n  ExpressionSelectors to think it definitely has multiple values.  and\n  treat the inputs as arrays. This behavior interfered with some of the\n  new tests that involved queries on lookups.\n- QueryContexts: Add maxSubqueryRows parameter.  and use it in druid-sql\n  tests.\n\n* Fixes for tests.\n\n* Adjustments.","date":"2020-03-23 07:43:55","modifiedFileCount":"24","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-05-29 10:10:26","codes":[{"authorDate":"2020-05-29 10:10:26","commitOrder":3,"curCode":"  public void testSelectOnLookupUsingLeftJoinOperator(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, lookyloo.*\\n\"\n        + \"FROM foo LEFT JOIN lookup.lookyloo ON foo.dim1 = lookyloo.k\\n\"\n        + \"WHERE lookyloo.v <> 'xxx' OR lookyloo.v IS NULL\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                        JoinType.LEFT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .filters(or(not(selector(\"j0.v\", \"xxx\", null)), selector(\"j0.v\", null, null)))\n                .columns(\"dim1\", \"j0.k\", \"j0.v\")\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", NULL_STRING, NULL_STRING},\n            new Object[]{\"10.1\", NULL_STRING, NULL_STRING},\n            new Object[]{\"2\", NULL_STRING, NULL_STRING},\n            new Object[]{\"1\", NULL_STRING, NULL_STRING},\n            new Object[]{\"def\", NULL_STRING, NULL_STRING},\n            new Object[]{\"abc\", \"abc\", \"xabc\"}\n        )\n    );\n  }\n","date":"2020-05-29 10:10:26","endLine":9635,"groupId":"101762","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectOnLookupUsingLeftJoinOperator","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/330453aa846b49e23c181b6395fcd75bea46f5.src","preCode":"  public void testSelectOnLookupUsingLeftJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, lookyloo.*\\n\"\n        + \"FROM foo LEFT JOIN lookup.lookyloo ON foo.dim1 = lookyloo.k\\n\"\n        + \"WHERE lookyloo.v <> 'xxx' OR lookyloo.v IS NULL\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                        JoinType.LEFT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .filters(or(not(selector(\"j0.v\", \"xxx\", null)), selector(\"j0.v\", null, null)))\n                .columns(\"dim1\", \"j0.k\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", NULL_STRING, NULL_STRING},\n            new Object[]{\"10.1\", NULL_STRING, NULL_STRING},\n            new Object[]{\"2\", NULL_STRING, NULL_STRING},\n            new Object[]{\"1\", NULL_STRING, NULL_STRING},\n            new Object[]{\"def\", NULL_STRING, NULL_STRING},\n            new Object[]{\"abc\", \"abc\", \"xabc\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":9602,"status":"M"},{"authorDate":"2020-05-29 10:10:26","commitOrder":3,"curCode":"  public void testSelectOnLookupUsingRightJoinOperator(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, lookyloo.*\\n\"\n        + \"FROM foo RIGHT JOIN lookup.lookyloo ON foo.dim1 = lookyloo.k\\n\"\n        + \"WHERE lookyloo.v <> 'xxx' OR lookyloo.v IS NULL\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                        JoinType.RIGHT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .filters(or(not(selector(\"j0.v\", \"xxx\", null)), selector(\"j0.v\", null, null)))\n                .columns(\"dim1\", \"j0.k\", \"j0.v\")\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", \"abc\", \"xabc\"},\n            new Object[]{NULL_STRING, \"a\", \"xa\"},\n            new Object[]{NULL_STRING, \"nosuchkey\", \"mysteryvalue\"},\n            new Object[]{NULL_STRING, \"6\", \"x6\"}\n        )\n    );\n  }\n","date":"2020-05-29 10:10:26","endLine":9670,"groupId":"101762","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectOnLookupUsingRightJoinOperator","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/330453aa846b49e23c181b6395fcd75bea46f5.src","preCode":"  public void testSelectOnLookupUsingRightJoinOperator() throws Exception\n  {\n    testQuery(\n        \"SELECT dim1, lookyloo.*\\n\"\n        + \"FROM foo RIGHT JOIN lookup.lookyloo ON foo.dim1 = lookyloo.k\\n\"\n        + \"WHERE lookyloo.v <> 'xxx' OR lookyloo.v IS NULL\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new LookupDataSource(\"lookyloo\"),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.k\")),\n                        JoinType.RIGHT\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .filters(or(not(selector(\"j0.v\", \"xxx\", null)), selector(\"j0.v\", null, null)))\n                .columns(\"dim1\", \"j0.k\", \"j0.v\")\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"abc\", \"abc\", \"xabc\"},\n            new Object[]{NULL_STRING, \"a\", \"xa\"},\n            new Object[]{NULL_STRING, \"nosuchkey\", \"mysteryvalue\"},\n            new Object[]{NULL_STRING, \"6\", \"x6\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":9639,"status":"M"}],"commitId":"cbd587dbd64ea7e5b1a316d19752786f01e50dec","commitMessage":"@@@Add parameterized Calcite tests for join queries (#9923)\n\n* Add parameterized Calcite tests for join queries\n\n* new tests\n\n* review comments","date":"2020-05-29 10:10:26","modifiedFileCount":"2","status":"M","submitter":"Suneet Saldanha"}]
