[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDestroyIsCalledAfterRemove() throws Exception\n  {\n    LookupExtractorFactory lookupExtractorFactory = EasyMock.createStrictMock(LookupExtractorFactory.class);\n    EasyMock.expect(lookupExtractorFactory.start()).andReturn(true).once();\n    EasyMock.expect(lookupExtractorFactory.destroy()).andReturn(true).once();\n    EasyMock.replay(lookupExtractorFactory);\n\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForDestroyIsCalledAfterRemove\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    replay(config);\n    expect(druidLeaderClient.makeRequest(HttpMethod.GET, \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"))\n        .andReturn(request);\n    FullResponseHolder responseHolder = new FullResponseHolder(\n        HttpResponseStatus.OK,\n        EasyMock.createNiceMock(HttpResponse.class),\n        new StringBuilder().append(strResult)\n    );\n    expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    lookupReferencesManager.add(\"testMock\", new LookupExtractorFactoryContainer(\"0\", lookupExtractorFactory));\n    lookupReferencesManager.handlePendingNotices();\n\n    lookupReferencesManager.remove(\"testMock\");\n    lookupReferencesManager.handlePendingNotices();\n\n    EasyMock.verify(lookupExtractorFactory);\n  }\n","date":"2018-08-31 00:56:26","endLine":254,"groupId":"1017","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDestroyIsCalledAfterRemove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/d35171f651084a86af92f8134540f12f5e0946.src","preCode":"  public void testDestroyIsCalledAfterRemove() throws Exception\n  {\n    LookupExtractorFactory lookupExtractorFactory = EasyMock.createStrictMock(LookupExtractorFactory.class);\n    EasyMock.expect(lookupExtractorFactory.start()).andReturn(true).once();\n    EasyMock.expect(lookupExtractorFactory.destroy()).andReturn(true).once();\n    EasyMock.replay(lookupExtractorFactory);\n\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForDestroyIsCalledAfterRemove\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    replay(config);\n    expect(druidLeaderClient.makeRequest(HttpMethod.GET, \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"))\n        .andReturn(request);\n    FullResponseHolder responseHolder = new FullResponseHolder(\n        HttpResponseStatus.OK,\n        EasyMock.createNiceMock(HttpResponse.class),\n        new StringBuilder().append(strResult)\n    );\n    expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    lookupReferencesManager.add(\"testMock\", new LookupExtractorFactoryContainer(\"0\", lookupExtractorFactory));\n    lookupReferencesManager.handlePendingNotices();\n\n    lookupReferencesManager.remove(\"testMock\");\n    lookupReferencesManager.handlePendingNotices();\n\n    EasyMock.verify(lookupExtractorFactory);\n  }\n","realPath":"server/src/test/java/org/apache/druid/query/lookup/LookupReferencesManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testGetNotThere() throws Exception\n  {\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForGetNotThere\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    replay(config);\n    expect(druidLeaderClient.makeRequest(HttpMethod.GET, \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"))\n        .andReturn(request);\n    FullResponseHolder responseHolder = new FullResponseHolder(\n        HttpResponseStatus.OK,\n        EasyMock.createNiceMock(HttpResponse.class),\n        new StringBuilder().append(strResult)\n    );\n    expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    Assert.assertNull(lookupReferencesManager.get(\"notThere\"));\n  }\n","date":"2018-08-31 00:56:26","endLine":276,"groupId":"1017","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetNotThere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/d35171f651084a86af92f8134540f12f5e0946.src","preCode":"  public void testGetNotThere() throws Exception\n  {\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForGetNotThere\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    replay(config);\n    expect(druidLeaderClient.makeRequest(HttpMethod.GET, \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"))\n        .andReturn(request);\n    FullResponseHolder responseHolder = new FullResponseHolder(\n        HttpResponseStatus.OK,\n        EasyMock.createNiceMock(HttpResponse.class),\n        new StringBuilder().append(strResult)\n    );\n    expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    Assert.assertNull(lookupReferencesManager.get(\"notThere\"));\n  }\n","realPath":"server/src/test/java/org/apache/druid/query/lookup/LookupReferencesManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-07-07 00:33:12","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void testDestroyIsCalledAfterRemove() throws Exception\n  {\n    LookupExtractorFactory lookupExtractorFactory = EasyMock.createStrictMock(LookupExtractorFactory.class);\n    EasyMock.expect(lookupExtractorFactory.start()).andReturn(true).once();\n    EasyMock.expect(lookupExtractorFactory.destroy()).andReturn(true).once();\n    EasyMock.replay(lookupExtractorFactory);\n\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForDestroyIsCalledAfterRemove\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    EasyMock.expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    EasyMock.replay(config);\n    EasyMock.expect(druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"\n    ))\n            .andReturn(request);\n    FullResponseHolder responseHolder = new FullResponseHolder(\n        HttpResponseStatus.OK,\n        EasyMock.createNiceMock(HttpResponse.class),\n        new StringBuilder().append(strResult)\n    );\n    EasyMock.expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    EasyMock.replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    lookupReferencesManager.add(\"testMock\", new LookupExtractorFactoryContainer(\"0\", lookupExtractorFactory));\n    lookupReferencesManager.handlePendingNotices();\n\n    lookupReferencesManager.remove(\"testMock\");\n    lookupReferencesManager.handlePendingNotices();\n\n    EasyMock.verify(lookupExtractorFactory);\n  }\n","date":"2019-07-07 00:33:12","endLine":258,"groupId":"10173","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDestroyIsCalledAfterRemove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fb/cc7d98acbcc8856c22efc360dbddc8e267c2ed.src","preCode":"  public void testDestroyIsCalledAfterRemove() throws Exception\n  {\n    LookupExtractorFactory lookupExtractorFactory = EasyMock.createStrictMock(LookupExtractorFactory.class);\n    EasyMock.expect(lookupExtractorFactory.start()).andReturn(true).once();\n    EasyMock.expect(lookupExtractorFactory.destroy()).andReturn(true).once();\n    EasyMock.replay(lookupExtractorFactory);\n\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForDestroyIsCalledAfterRemove\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    replay(config);\n    expect(druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"\n    ))\n        .andReturn(request);\n    FullResponseHolder responseHolder = new FullResponseHolder(\n        HttpResponseStatus.OK,\n        EasyMock.createNiceMock(HttpResponse.class),\n        new StringBuilder().append(strResult)\n    );\n    expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    lookupReferencesManager.add(\"testMock\", new LookupExtractorFactoryContainer(\"0\", lookupExtractorFactory));\n    lookupReferencesManager.handlePendingNotices();\n\n    lookupReferencesManager.remove(\"testMock\");\n    lookupReferencesManager.handlePendingNotices();\n\n    EasyMock.verify(lookupExtractorFactory);\n  }\n","realPath":"server/src/test/java/org/apache/druid/query/lookup/LookupReferencesManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"},{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void testGetNotThere() throws Exception\n  {\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForGetNotThere\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    EasyMock.expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    EasyMock.replay(config);\n    EasyMock.expect(druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"\n    ))\n            .andReturn(request);\n    FullResponseHolder responseHolder = new FullResponseHolder(\n        HttpResponseStatus.OK,\n        EasyMock.createNiceMock(HttpResponse.class),\n        new StringBuilder().append(strResult)\n    );\n    EasyMock.expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    EasyMock.replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    Assert.assertNull(lookupReferencesManager.get(\"notThere\"));\n  }\n","date":"2019-07-07 00:33:12","endLine":283,"groupId":"10173","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetNotThere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fb/cc7d98acbcc8856c22efc360dbddc8e267c2ed.src","preCode":"  public void testGetNotThere() throws Exception\n  {\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForGetNotThere\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    replay(config);\n    expect(druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"\n    ))\n        .andReturn(request);\n    FullResponseHolder responseHolder = new FullResponseHolder(\n        HttpResponseStatus.OK,\n        EasyMock.createNiceMock(HttpResponse.class),\n        new StringBuilder().append(strResult)\n    );\n    expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    Assert.assertNull(lookupReferencesManager.get(\"notThere\"));\n  }\n","realPath":"server/src/test/java/org/apache/druid/query/lookup/LookupReferencesManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2019-08-27 10:27:41","codes":[{"authorDate":"2019-08-27 10:27:41","commitOrder":3,"curCode":"  public void testDestroyIsCalledAfterRemove() throws Exception\n  {\n    LookupExtractorFactory lookupExtractorFactory = EasyMock.createStrictMock(LookupExtractorFactory.class);\n    EasyMock.expect(lookupExtractorFactory.start()).andReturn(true).once();\n    EasyMock.expect(lookupExtractorFactory.destroy()).andReturn(true).once();\n    EasyMock.replay(lookupExtractorFactory);\n\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForDestroyIsCalledAfterRemove\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    EasyMock.expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    EasyMock.replay(config);\n    EasyMock.expect(druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"\n    ))\n            .andReturn(request);\n    StringFullResponseHolder responseHolder = new StringFullResponseHolder(\n        HttpResponseStatus.OK,\n        newEmptyResponse(),\n        StandardCharsets.UTF_8\n    ).addChunk(strResult);\n    EasyMock.expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    EasyMock.replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    lookupReferencesManager.add(\"testMock\", new LookupExtractorFactoryContainer(\"0\", lookupExtractorFactory));\n    lookupReferencesManager.handlePendingNotices();\n\n    lookupReferencesManager.remove(\"testMock\");\n    lookupReferencesManager.handlePendingNotices();\n\n    EasyMock.verify(lookupExtractorFactory);\n  }\n","date":"2019-08-27 10:27:41","endLine":268,"groupId":"10173","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDestroyIsCalledAfterRemove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/301055874b0300751ebc1d742951e0cba17716.src","preCode":"  public void testDestroyIsCalledAfterRemove() throws Exception\n  {\n    LookupExtractorFactory lookupExtractorFactory = EasyMock.createStrictMock(LookupExtractorFactory.class);\n    EasyMock.expect(lookupExtractorFactory.start()).andReturn(true).once();\n    EasyMock.expect(lookupExtractorFactory.destroy()).andReturn(true).once();\n    EasyMock.replay(lookupExtractorFactory);\n\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForDestroyIsCalledAfterRemove\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    EasyMock.expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    EasyMock.replay(config);\n    EasyMock.expect(druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"\n    ))\n            .andReturn(request);\n    FullResponseHolder responseHolder = new FullResponseHolder(\n        HttpResponseStatus.OK,\n        EasyMock.createNiceMock(HttpResponse.class),\n        new StringBuilder().append(strResult)\n    );\n    EasyMock.expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    EasyMock.replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    lookupReferencesManager.add(\"testMock\", new LookupExtractorFactoryContainer(\"0\", lookupExtractorFactory));\n    lookupReferencesManager.handlePendingNotices();\n\n    lookupReferencesManager.remove(\"testMock\");\n    lookupReferencesManager.handlePendingNotices();\n\n    EasyMock.verify(lookupExtractorFactory);\n  }\n","realPath":"server/src/test/java/org/apache/druid/query/lookup/LookupReferencesManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"},{"authorDate":"2019-08-27 10:27:41","commitOrder":3,"curCode":"  public void testGetNotThere() throws Exception\n  {\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForGetNotThere\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    EasyMock.expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    EasyMock.replay(config);\n    EasyMock.expect(druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"\n    ))\n            .andReturn(request);\n    StringFullResponseHolder responseHolder = new StringFullResponseHolder(\n        HttpResponseStatus.OK,\n        newEmptyResponse(),\n        StandardCharsets.UTF_8\n    ).addChunk(strResult);\n    EasyMock.expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    EasyMock.replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    Assert.assertNull(lookupReferencesManager.get(\"notThere\"));\n  }\n","date":"2019-08-27 10:27:41","endLine":293,"groupId":"10173","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetNotThere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/301055874b0300751ebc1d742951e0cba17716.src","preCode":"  public void testGetNotThere() throws Exception\n  {\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForGetNotThere\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    EasyMock.expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    EasyMock.replay(config);\n    EasyMock.expect(druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"\n    ))\n            .andReturn(request);\n    FullResponseHolder responseHolder = new FullResponseHolder(\n        HttpResponseStatus.OK,\n        EasyMock.createNiceMock(HttpResponse.class),\n        new StringBuilder().append(strResult)\n    );\n    EasyMock.expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    EasyMock.replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    Assert.assertNull(lookupReferencesManager.get(\"notThere\"));\n  }\n","realPath":"server/src/test/java/org/apache/druid/query/lookup/LookupReferencesManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"}],"commitId":"e5ef5ddafa632256fe8a387a117557c415bee7df","commitMessage":"@@@Fix the shuffle with TLS enabled for parallel indexing; add an integration test; improve unit tests (#8350)\n\n* Fix shuffle with tls enabled; add an integration test; improve unit tests\n\n* remove debug log\n\n* fix tests\n\n* unused import\n\n* add javadoc\n\n* rename to getContent\n","date":"2019-08-27 10:27:41","modifiedFileCount":"37","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-01-31 06:46:21","codes":[{"authorDate":"2019-08-27 10:27:41","commitOrder":4,"curCode":"  public void testDestroyIsCalledAfterRemove() throws Exception\n  {\n    LookupExtractorFactory lookupExtractorFactory = EasyMock.createStrictMock(LookupExtractorFactory.class);\n    EasyMock.expect(lookupExtractorFactory.start()).andReturn(true).once();\n    EasyMock.expect(lookupExtractorFactory.destroy()).andReturn(true).once();\n    EasyMock.replay(lookupExtractorFactory);\n\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForDestroyIsCalledAfterRemove\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    EasyMock.expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    EasyMock.replay(config);\n    EasyMock.expect(druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"\n    ))\n            .andReturn(request);\n    StringFullResponseHolder responseHolder = new StringFullResponseHolder(\n        HttpResponseStatus.OK,\n        newEmptyResponse(),\n        StandardCharsets.UTF_8\n    ).addChunk(strResult);\n    EasyMock.expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    EasyMock.replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    lookupReferencesManager.add(\"testMock\", new LookupExtractorFactoryContainer(\"0\", lookupExtractorFactory));\n    lookupReferencesManager.handlePendingNotices();\n\n    lookupReferencesManager.remove(\"testMock\");\n    lookupReferencesManager.handlePendingNotices();\n\n    EasyMock.verify(lookupExtractorFactory);\n  }\n","date":"2019-08-27 10:27:41","endLine":268,"groupId":"10990","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDestroyIsCalledAfterRemove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/301055874b0300751ebc1d742951e0cba17716.src","preCode":"  public void testDestroyIsCalledAfterRemove() throws Exception\n  {\n    LookupExtractorFactory lookupExtractorFactory = EasyMock.createStrictMock(LookupExtractorFactory.class);\n    EasyMock.expect(lookupExtractorFactory.start()).andReturn(true).once();\n    EasyMock.expect(lookupExtractorFactory.destroy()).andReturn(true).once();\n    EasyMock.replay(lookupExtractorFactory);\n\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForDestroyIsCalledAfterRemove\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    EasyMock.expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    EasyMock.replay(config);\n    EasyMock.expect(druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"\n    ))\n            .andReturn(request);\n    StringFullResponseHolder responseHolder = new StringFullResponseHolder(\n        HttpResponseStatus.OK,\n        newEmptyResponse(),\n        StandardCharsets.UTF_8\n    ).addChunk(strResult);\n    EasyMock.expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    EasyMock.replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    lookupReferencesManager.add(\"testMock\", new LookupExtractorFactoryContainer(\"0\", lookupExtractorFactory));\n    lookupReferencesManager.handlePendingNotices();\n\n    lookupReferencesManager.remove(\"testMock\");\n    lookupReferencesManager.handlePendingNotices();\n\n    EasyMock.verify(lookupExtractorFactory);\n  }\n","realPath":"server/src/test/java/org/apache/druid/query/lookup/LookupReferencesManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"},{"authorDate":"2020-01-31 06:46:21","commitOrder":4,"curCode":"  public void testGetNotThere() throws Exception\n  {\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForGetNotThere\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    EasyMock.expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    EasyMock.replay(config);\n    EasyMock.expect(druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"\n    ))\n            .andReturn(request);\n    StringFullResponseHolder responseHolder = new StringFullResponseHolder(\n        HttpResponseStatus.OK,\n        newEmptyResponse(),\n        StandardCharsets.UTF_8\n    ).addChunk(strResult);\n    EasyMock.expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    EasyMock.replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    Assert.assertEquals(Optional.empty(), lookupReferencesManager.get(\"notThere\"));\n  }\n","date":"2020-01-31 06:46:21","endLine":295,"groupId":"10990","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testGetNotThere","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3b/953da096d86077a270d9b7bbf1daaa8832138e.src","preCode":"  public void testGetNotThere() throws Exception\n  {\n    Map<String, Object> lookupMap = new HashMap<>();\n    lookupMap.put(\"testMockForGetNotThere\", container);\n    String strResult = mapper.writeValueAsString(lookupMap);\n    Request request = new Request(HttpMethod.GET, new URL(\"http://localhost:1234/xx\"));\n    EasyMock.expect(config.getLookupTier()).andReturn(LOOKUP_TIER).anyTimes();\n    EasyMock.replay(config);\n    EasyMock.expect(druidLeaderClient.makeRequest(\n        HttpMethod.GET,\n        \"/druid/coordinator/v1/lookups/config/lookupTier?detailed=true\"\n    ))\n            .andReturn(request);\n    StringFullResponseHolder responseHolder = new StringFullResponseHolder(\n        HttpResponseStatus.OK,\n        newEmptyResponse(),\n        StandardCharsets.UTF_8\n    ).addChunk(strResult);\n    EasyMock.expect(druidLeaderClient.go(request)).andReturn(responseHolder);\n    EasyMock.replay(druidLeaderClient);\n    lookupReferencesManager.start();\n    Assert.assertNull(lookupReferencesManager.get(\"notThere\"));\n  }\n","realPath":"server/src/test/java/org/apache/druid/query/lookup/LookupReferencesManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"}],"commitId":"204ba9966f94d3e99be980ec9b2817eda0931ee2","commitMessage":"@@@Add LookupJoinableFactory. (#9281)\n\n* Add LookupJoinableFactory.\n\nEnables joins where the right-hand side is a lookup. Includes an\nintegration test.\n\nAlso.  includes changes to LookupExtractorFactoryContainerProvider:\n\n1) Add \"getAllLookupNames\".  which will be needed to eventually connect\n   lookups to Druid's SQL catalog.\n2) Convert \"get\" from nullable to Optional return.\n3) Swap out most usages of LookupReferencesManager in favor of the\n   simpler LookupExtractorFactoryContainerProvider interface.\n\n* Fixes for tests.\n\n* Fix another test.\n\n* Java 11 message fix.\n\n* Fixups.\n\n* Fixup benchmark class.\n","date":"2020-01-31 06:46:21","modifiedFileCount":"20","status":"M","submitter":"Gian Merlino"}]
