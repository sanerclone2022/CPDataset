[{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        savedParseExceptions);\n    if (buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n    return unparseableEventsMap;\n  }\n","date":"2018-10-29 20:02:43","endLine":543,"groupId":"1493","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getTaskCompletionUnparseableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1d/cf92b4b85259d48a09a734d294ae15f3a77175.src","preCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        savedParseExceptions);\n    if (buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n    return unparseableEventsMap;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/AppenderatorDriverRealtimeIndexTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":534,"status":"B"},{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> determinePartitionsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        determinePartitionsSavedParseExceptions);\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        buildSegmentsSavedParseExceptions);\n\n    if (determinePartitionsParseExceptionMessages != null || buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.DETERMINE_PARTITIONS, determinePartitionsParseExceptionMessages);\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n\n    return unparseableEventsMap;\n  }\n","date":"2018-10-29 20:02:43","endLine":541,"groupId":"1493","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getTaskCompletionUnparseableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c1/e1397d1b01a47fad6bcef0d5a02a8a6adfa7ae.src","preCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> determinePartitionsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        determinePartitionsSavedParseExceptions);\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        buildSegmentsSavedParseExceptions);\n\n    if (determinePartitionsParseExceptionMessages != null || buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.DETERMINE_PARTITIONS, determinePartitionsParseExceptionMessages);\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n\n    return unparseableEventsMap;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":527,"status":"MB"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2020-09-12 07:31:10","codes":[{"authorDate":"2020-09-12 07:31:10","commitOrder":3,"curCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        parseExceptionHandler.getSavedParseExceptions()\n    );\n    if (buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n    return unparseableEventsMap;\n  }\n","date":"2020-09-12 07:31:10","endLine":603,"groupId":"104659","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getTaskCompletionUnparseableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/06/4d2caa33502379bc0ed6a593728d18244b2dad.src","preCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        savedParseExceptions);\n    if (buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n    return unparseableEventsMap;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/AppenderatorDriverRealtimeIndexTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"},{"authorDate":"2020-09-12 07:31:10","commitOrder":3,"curCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> determinePartitionsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        determinePartitionsParseExceptionHandler.getSavedParseExceptions()\n    );\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        buildSegmentsParseExceptionHandler.getSavedParseExceptions()\n    );\n\n    if (determinePartitionsParseExceptionMessages != null || buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.DETERMINE_PARTITIONS, determinePartitionsParseExceptionMessages);\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n\n    return unparseableEventsMap;\n  }\n","date":"2020-09-12 07:31:10","endLine":545,"groupId":"104659","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getTaskCompletionUnparseableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5e/93675372fdabd14158dcce4dc4994149408487.src","preCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> determinePartitionsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        determinePartitionsSavedParseExceptions);\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        buildSegmentsSavedParseExceptions);\n\n    if (determinePartitionsParseExceptionMessages != null || buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.DETERMINE_PARTITIONS, determinePartitionsParseExceptionMessages);\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n\n    return unparseableEventsMap;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/IndexTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":529,"status":"M"}],"commitId":"8f14ac814e1fdf11878a5ba9bdba58fb745b4c8f","commitMessage":"@@@More structured way to handle parse exceptions (#10336)\n\n* More structured way to handle parse exceptions\n\n* checkstyle; add more tests\n\n* forbidden api; test\n\n* address comment; new test\n\n* address review comments\n\n* javadoc for parseException; remove redundant parseException in streaming ingestion\n\n* fix tests\n\n* unnecessary catch\n\n* unused imports\n\n* appenderator test\n\n* unused import","date":"2020-09-12 07:31:10","modifiedFileCount":"116","status":"M","submitter":"Jihoon Son"}]
