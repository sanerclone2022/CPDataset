[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTimePlusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testExpression(\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.DATETIME_PLUS,\n            inputRef(\"t\"),\n            rexBuilder.makeIntervalLiteral(\n                new BigDecimal(13), \r\n                new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",concat('P', 13, 'M'),1)\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").plus(period).getMillis()\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":522,"groupId":"20162","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimePlusYearMonthInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f7/db35d3fe5cac9e5fc661f7e79b60caa6d0bc16.src","preCode":"  public void testTimePlusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testExpression(\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.DATETIME_PLUS,\n            inputRef(\"t\"),\n            rexBuilder.makeIntervalLiteral(\n                new BigDecimal(13), \r\n                new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",concat('P', 13, 'M'),1)\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").plus(period).getMillis()\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":503,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTimeMinusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testExpression(\n        rexBuilder.makeCall(\n            typeFactory.createSqlType(SqlTypeName.TIMESTAMP),\n            SqlStdOperatorTable.MINUS_DATE,\n            ImmutableList.of(\n                inputRef(\"t\"),\n                rexBuilder.makeIntervalLiteral(\n                    new BigDecimal(13), \r\n                    new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n                )\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",concat('P', 13, 'M'),-1)\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").minus(period).getMillis()\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":572,"groupId":"21657","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeMinusYearMonthInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f7/db35d3fe5cac9e5fc661f7e79b60caa6d0bc16.src","preCode":"  public void testTimeMinusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testExpression(\n        rexBuilder.makeCall(\n            typeFactory.createSqlType(SqlTypeName.TIMESTAMP),\n            SqlStdOperatorTable.MINUS_DATE,\n            ImmutableList.of(\n                inputRef(\"t\"),\n                rexBuilder.makeIntervalLiteral(\n                    new BigDecimal(13), \r\n                    new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n                )\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",concat('P', 13, 'M'),-1)\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").minus(period).getMillis()\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":550,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-05-22 02:40:44","codes":[{"authorDate":"2019-05-22 02:40:44","commitOrder":2,"curCode":"  public void testTimePlusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testExpression(\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.DATETIME_PLUS,\n            inputRef(\"t\"),\n            rexBuilder.makeIntervalLiteral(\n                new BigDecimal(13), \r\n                new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",concat('P', 13, 'M'),1,'UTC')\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").plus(period).getMillis()\n    );\n  }\n","date":"2019-05-22 02:40:44","endLine":785,"groupId":"20162","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimePlusYearMonthInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fc/46a0a0c1f4f30f493105675141b4fe9eed0a20.src","preCode":"  public void testTimePlusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testExpression(\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.DATETIME_PLUS,\n            inputRef(\"t\"),\n            rexBuilder.makeIntervalLiteral(\n                new BigDecimal(13), \r\n                new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",concat('P', 13, 'M'),1)\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").plus(period).getMillis()\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":766,"status":"M"},{"authorDate":"2019-05-22 02:40:44","commitOrder":2,"curCode":"  public void testTimeMinusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testExpression(\n        rexBuilder.makeCall(\n            typeFactory.createSqlType(SqlTypeName.TIMESTAMP),\n            SqlStdOperatorTable.MINUS_DATE,\n            ImmutableList.of(\n                inputRef(\"t\"),\n                rexBuilder.makeIntervalLiteral(\n                    new BigDecimal(13), \r\n                    new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n                )\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",concat('P', 13, 'M'),-1,'UTC')\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").minus(period).getMillis()\n    );\n  }\n","date":"2019-05-22 02:40:44","endLine":835,"groupId":"21657","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeMinusYearMonthInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fc/46a0a0c1f4f30f493105675141b4fe9eed0a20.src","preCode":"  public void testTimeMinusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testExpression(\n        rexBuilder.makeCall(\n            typeFactory.createSqlType(SqlTypeName.TIMESTAMP),\n            SqlStdOperatorTable.MINUS_DATE,\n            ImmutableList.of(\n                inputRef(\"t\"),\n                rexBuilder.makeIntervalLiteral(\n                    new BigDecimal(13), \r\n                    new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n                )\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",concat('P', 13, 'M'),-1)\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").minus(period).getMillis()\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":813,"status":"M"}],"commitId":"43c54385f6f7705507570c50e048b08cf5902b10","commitMessage":"@@@SQL: Respect default timezone for TIME_PARSE and TIME_SHIFT. (#7704)\n\n* SQL: Respect default timezone for TIME_PARSE and TIME_SHIFT.\n\nThey were inadvertently using UTC rather than the default timezone.\nAlso.  harmonize how time functions handle their parameters.\n\n* Fix tests\n\n* Add another TIME_SHIFT test.\n","date":"2019-05-22 02:40:44","modifiedFileCount":"9","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-08-02 12:29:58","codes":[{"authorDate":"2019-08-02 12:29:58","commitOrder":3,"curCode":"  public void testTimePlusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testHelper.testExpression(\n        SqlStdOperatorTable.DATETIME_PLUS,\n        ImmutableList.of(\n            testHelper.makeInputRef(\"t\"),\n            testHelper.makeLiteral(\n                new BigDecimal(13), \r\n                new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",concat('P', 13, 'M'),1,'UTC')\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").plus(period).getMillis()\n    );\n  }\n","date":"2019-08-02 12:29:58","endLine":837,"groupId":"20162","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimePlusYearMonthInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/35/267c843f709aa8a7c3387e0c290037c57428de.src","preCode":"  public void testTimePlusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testExpression(\n        rexBuilder.makeCall(\n            SqlStdOperatorTable.DATETIME_PLUS,\n            inputRef(\"t\"),\n            rexBuilder.makeIntervalLiteral(\n                new BigDecimal(13), \r\n                new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",concat('P', 13, 'M'),1,'UTC')\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").plus(period).getMillis()\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":818,"status":"M"},{"authorDate":"2019-08-02 12:29:58","commitOrder":3,"curCode":"  public void testTimeMinusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testHelper.testExpression(\n        SqlTypeName.TIMESTAMP,\n        SqlStdOperatorTable.MINUS_DATE,\n        ImmutableList.of(\n            testHelper.makeInputRef(\"t\"),\n            testHelper.makeLiteral(\n                new BigDecimal(13), \r\n                new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",concat('P', 13, 'M'),-1,'UTC')\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").minus(period).getMillis()\n    );\n  }\n","date":"2019-08-02 12:29:58","endLine":883,"groupId":"20162","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeMinusYearMonthInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/35/267c843f709aa8a7c3387e0c290037c57428de.src","preCode":"  public void testTimeMinusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testExpression(\n        rexBuilder.makeCall(\n            typeFactory.createSqlType(SqlTypeName.TIMESTAMP),\n            SqlStdOperatorTable.MINUS_DATE,\n            ImmutableList.of(\n                inputRef(\"t\"),\n                rexBuilder.makeIntervalLiteral(\n                    new BigDecimal(13), \r\n                    new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n                )\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",concat('P', 13, 'M'),-1,'UTC')\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").minus(period).getMillis()\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":863,"status":"M"}],"commitId":"4bd3bad8ba960c9dd4166336eebe019a39d00562","commitMessage":"@@@Add IPv4 SQL functions (#8223)\n\n* Add IPv4 SQL functions\n\nNew SQL functions for filtering IPv4 addresses:\n- IPV4_MATCH: Check if IP address belongs to a subnet\n- IPV4_PARSE: Convert string IP address to integer\n- IPV4_STRINGIFY: Convert integer IP address to string\n\nThese are the SQL analogs of the druid expressions with the same name.\nFiltering is more efficient when operating on IP addresses as integers\ninstead of strings.\n\n* Refactor operator conversions into named constants\n","date":"2019-08-02 12:29:58","modifiedFileCount":"2","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2020-11-19 10:26:53","codes":[{"authorDate":"2020-11-19 10:26:53","commitOrder":4,"curCode":"  public void testTimePlusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testHelper.testExpression(\n        SqlStdOperatorTable.DATETIME_PLUS,\n        ImmutableList.of(\n            testHelper.makeInputRef(\"t\"),\n            testHelper.makeLiteral(\n                new BigDecimal(13), \r\n                new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",'P13M',1,'UTC')\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").plus(period).getMillis()\n    );\n  }\n","date":"2020-11-19 10:26:53","endLine":1482,"groupId":"101856","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimePlusYearMonthInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/49/ed15994f6a16ac6f157aa4ac22a34c1683ae72.src","preCode":"  public void testTimePlusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testHelper.testExpression(\n        SqlStdOperatorTable.DATETIME_PLUS,\n        ImmutableList.of(\n            testHelper.makeInputRef(\"t\"),\n            testHelper.makeLiteral(\n                new BigDecimal(13), \r\n                new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",concat('P', 13, 'M'),1,'UTC')\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").plus(period).getMillis()\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1463,"status":"M"},{"authorDate":"2020-11-19 10:26:53","commitOrder":4,"curCode":"  public void testTimeMinusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testHelper.testExpression(\n        SqlTypeName.TIMESTAMP,\n        SqlStdOperatorTable.MINUS_DATE,\n        ImmutableList.of(\n            testHelper.makeInputRef(\"t\"),\n            testHelper.makeLiteral(\n                new BigDecimal(13), \r\n                new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",'P13M',-1,'UTC')\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").minus(period).getMillis()\n    );\n  }\n","date":"2020-11-19 10:26:53","endLine":1528,"groupId":"101856","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeMinusYearMonthInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/49/ed15994f6a16ac6f157aa4ac22a34c1683ae72.src","preCode":"  public void testTimeMinusYearMonthInterval()\n  {\n    final Period period = new Period(\"P1Y1M\");\n\n    testHelper.testExpression(\n        SqlTypeName.TIMESTAMP,\n        SqlStdOperatorTable.MINUS_DATE,\n        ImmutableList.of(\n            testHelper.makeInputRef(\"t\"),\n            testHelper.makeLiteral(\n                new BigDecimal(13), \r\n                new SqlIntervalQualifier(TimeUnit.YEAR, TimeUnit.MONTH, SqlParserPos.ZERO)\n            )\n        ),\n        DruidExpression.of(\n            null,\n            \"timestamp_shift(\\\"t\\\",concat('P', 13, 'M'),-1,'UTC')\"\n        ),\n        DateTimes.of(\"2000-02-03T04:05:06\").minus(period).getMillis()\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/expression/ExpressionsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1508,"status":"M"}],"commitId":"d7d2c804ad10853cb9241766ae0602fb84e146ff","commitMessage":"@@@Add zero period support to TIMESTAMPADD (#10550)\n\n* Allow zero period for TIMESTAMPADD\n\n* update test cases\n\n* add empty zone test case\n\n* add unit test cases for TimestampShiftMacro","date":"2020-11-19 10:26:53","modifiedFileCount":"5","status":"M","submitter":"frank chen"}]
