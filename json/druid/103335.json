[{"authorTime":"2019-02-03 14:34:53","codes":[{"authorDate":"2019-02-03 14:34:53","commitOrder":1,"curCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_FIXED_BUCKETS(x, 0.98, 100, 0.0, 100.0)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.940000534057617});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.920000076293945});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                                     .setAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                                         )\n                                                     )\n                                                     .setContext(ImmutableMap.of(\n                                                         PlannerContext.CTX_SQL_QUERY_ID,\n                                                         \"dummy\"\n                                                     ))\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\"),\n                                     new FixedBucketsHistogramAggregatorFactory(\n                                         \"_a1:agg\",\n                                         \"a0\",\n                                         100,\n                                         0,\n                                         100.0d,\n                                         FixedBucketsHistogram.OutlierHandlingMode.IGNORE\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         ),\n                                         new QuantilePostAggregator(\"_a1\", \"_a1:agg\", 0.98f)\n                                     )\n                                 )\n                                 .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                                 .build();\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2019-02-03 14:34:53","endLine":451,"groupId":"3442","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuantileOnInnerQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4b/a94fe76d06705da8aa26c321dcae5ffec30f1e.src","preCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_FIXED_BUCKETS(x, 0.98, 100, 0.0, 100.0)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.940000534057617});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.920000076293945});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                                     .setAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                                         )\n                                                     )\n                                                     .setContext(ImmutableMap.of(\n                                                         PlannerContext.CTX_SQL_QUERY_ID,\n                                                         \"dummy\"\n                                                     ))\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\"),\n                                     new FixedBucketsHistogramAggregatorFactory(\n                                         \"_a1:agg\",\n                                         \"a0\",\n                                         100,\n                                         0,\n                                         100.0d,\n                                         FixedBucketsHistogram.OutlierHandlingMode.IGNORE\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         ),\n                                         new QuantilePostAggregator(\"_a1\", \"_a1:agg\", 0.98f)\n                                     )\n                                 )\n                                 .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                                 .build();\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/sql/FixedBucketsHistogramQuantileSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"B"},{"authorDate":"2019-02-03 14:34:53","commitOrder":1,"curCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_DS(x, 0.98)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.0});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.0});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        GroupByQuery.builder()\n                    .setDataSource(\n                        new QueryDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                        .setAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                            )\n                                        )\n                                        .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                                        .build()\n                        )\n                    )\n                    .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                    .setGranularity(Granularities.ALL)\n                    .setAggregatorSpecs(\n                        new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                        new CountAggregatorFactory(\"_a0:count\"),\n                        new DoublesSketchAggregatorFactory(\n                            \"_a1:agg\",\n                            \"a0\",\n                            null\n                        )\n                    )\n                    .setPostAggregatorSpecs(\n                        ImmutableList.of(\n                            new ArithmeticPostAggregator(\n                                \"_a0\",\n                                \"quotient\",\n                                ImmutableList.of(\n                                    new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                    new FieldAccessPostAggregator(null, \"_a0:count\")\n                                )\n                            ),\n                            new DoublesSketchToQuantilePostAggregator(\"_a1\", makeFieldAccessPostAgg(\"_a1:agg\"), 0.98f)\n                        )\n                    )\n                    .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                    .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2019-02-03 14:34:53","endLine":402,"groupId":"19214","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testQuantileOnInnerQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ff/bcc22757caa9171dfa4d619e85644f58d08325.src","preCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_DS(x, 0.98)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.0});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.0});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        GroupByQuery.builder()\n                    .setDataSource(\n                        new QueryDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                        .setAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                            )\n                                        )\n                                        .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                                        .build()\n                        )\n                    )\n                    .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                    .setGranularity(Granularities.ALL)\n                    .setAggregatorSpecs(\n                        new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                        new CountAggregatorFactory(\"_a0:count\"),\n                        new DoublesSketchAggregatorFactory(\n                            \"_a1:agg\",\n                            \"a0\",\n                            null\n                        )\n                    )\n                    .setPostAggregatorSpecs(\n                        ImmutableList.of(\n                            new ArithmeticPostAggregator(\n                                \"_a0\",\n                                \"quotient\",\n                                ImmutableList.of(\n                                    new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                    new FieldAccessPostAggregator(null, \"_a0:count\")\n                                )\n                            ),\n                            new DoublesSketchToQuantilePostAggregator(\"_a1\", makeFieldAccessPostAgg(\"_a1:agg\"), 0.98f)\n                        )\n                    )\n                    .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                    .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"B"}],"commitId":"953b96d0a436b2bd979c2aa6eecc3f636387633c","commitMessage":"@@@Add more sketch aggregator support in Druid SQL (#6951)\n\n* Add more sketch aggregator support in Druid SQL\n\n* Add docs\n\n* Tweak module serde register\n\n* Fix tests\n\n* Checkstyle\n\n* Test fix\n\n* PR comment\n\n* PR comment\n\n* PR comments\n","date":"2019-02-03 14:34:53","modifiedFileCount":"16","status":"B","submitter":"Jonathan Wei"},{"authorTime":"2019-02-03 14:34:53","codes":[{"authorDate":"2019-06-22 09:00:19","commitOrder":2,"curCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_FIXED_BUCKETS(x, 0.98, 100, 0.0, 100.0)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.940000534057617});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.920000076293945});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                                     .setAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                                         )\n                                                     )\n                                                     .setContext(ImmutableMap.of(\n                                                         PlannerContext.CTX_SQL_QUERY_ID,\n                                                         \"dummy\"\n                                                     ))\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\"),\n                                     new FixedBucketsHistogramAggregatorFactory(\n                                         \"_a1:agg\",\n                                         \"a0\",\n                                         100,\n                                         0,\n                                         100.0d,\n                                         FixedBucketsHistogram.OutlierHandlingMode.IGNORE,\n                                         false\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         ),\n                                         new QuantilePostAggregator(\"_a1\", \"_a1:agg\", 0.98f)\n                                     )\n                                 )\n                                 .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                                 .build();\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2019-06-22 09:00:19","endLine":487,"groupId":"3442","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuantileOnInnerQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/86/e87bf0d475cdd6786a6f9ab7a7f169d883700d.src","preCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_FIXED_BUCKETS(x, 0.98, 100, 0.0, 100.0)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.940000534057617});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.920000076293945});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                                     .setAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                                         )\n                                                     )\n                                                     .setContext(ImmutableMap.of(\n                                                         PlannerContext.CTX_SQL_QUERY_ID,\n                                                         \"dummy\"\n                                                     ))\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\"),\n                                     new FixedBucketsHistogramAggregatorFactory(\n                                         \"_a1:agg\",\n                                         \"a0\",\n                                         100,\n                                         0,\n                                         100.0d,\n                                         FixedBucketsHistogram.OutlierHandlingMode.IGNORE\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         ),\n                                         new QuantilePostAggregator(\"_a1\", \"_a1:agg\", 0.98f)\n                                     )\n                                 )\n                                 .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                                 .build();\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/sql/FixedBucketsHistogramQuantileSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":413,"status":"M"},{"authorDate":"2019-02-03 14:34:53","commitOrder":2,"curCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_DS(x, 0.98)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.0});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.0});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        GroupByQuery.builder()\n                    .setDataSource(\n                        new QueryDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                        .setAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                            )\n                                        )\n                                        .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                                        .build()\n                        )\n                    )\n                    .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                    .setGranularity(Granularities.ALL)\n                    .setAggregatorSpecs(\n                        new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                        new CountAggregatorFactory(\"_a0:count\"),\n                        new DoublesSketchAggregatorFactory(\n                            \"_a1:agg\",\n                            \"a0\",\n                            null\n                        )\n                    )\n                    .setPostAggregatorSpecs(\n                        ImmutableList.of(\n                            new ArithmeticPostAggregator(\n                                \"_a0\",\n                                \"quotient\",\n                                ImmutableList.of(\n                                    new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                    new FieldAccessPostAggregator(null, \"_a0:count\")\n                                )\n                            ),\n                            new DoublesSketchToQuantilePostAggregator(\"_a1\", makeFieldAccessPostAgg(\"_a1:agg\"), 0.98f)\n                        )\n                    )\n                    .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                    .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2019-02-03 14:34:53","endLine":402,"groupId":"19214","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testQuantileOnInnerQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ff/bcc22757caa9171dfa4d619e85644f58d08325.src","preCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_DS(x, 0.98)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.0});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.0});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        GroupByQuery.builder()\n                    .setDataSource(\n                        new QueryDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                        .setAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                            )\n                                        )\n                                        .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                                        .build()\n                        )\n                    )\n                    .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                    .setGranularity(Granularities.ALL)\n                    .setAggregatorSpecs(\n                        new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                        new CountAggregatorFactory(\"_a0:count\"),\n                        new DoublesSketchAggregatorFactory(\n                            \"_a1:agg\",\n                            \"a0\",\n                            null\n                        )\n                    )\n                    .setPostAggregatorSpecs(\n                        ImmutableList.of(\n                            new ArithmeticPostAggregator(\n                                \"_a0\",\n                                \"quotient\",\n                                ImmutableList.of(\n                                    new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                    new FieldAccessPostAggregator(null, \"_a0:count\")\n                                )\n                            ),\n                            new DoublesSketchToQuantilePostAggregator(\"_a1\", makeFieldAccessPostAgg(\"_a1:agg\"), 0.98f)\n                        )\n                    )\n                    .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                    .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"N"}],"commitId":"35601bb7a024213a4c8016b0d865984f84257cf4","commitMessage":"@@@Add finalizeAsBase64Binary option to FixedBucketsHistogramAggregatorFactory (#7784)\n\n* Add finalizeAsBase64Binary option to FixedBucketsHistogramAggregatorFactory\n\n* Add finalizeAsBase64Binary option to ApproximateHistogramFactory\n\n* Update approx histogram doc\n","date":"2019-06-22 09:00:19","modifiedFileCount":"13","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2020-02-20 05:09:20","codes":[{"authorDate":"2020-02-20 05:09:20","commitOrder":3,"curCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_FIXED_BUCKETS(x, 0.98, 100, 0.0, 100.0)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.940000534057617});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.920000076293945});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                                     .setAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                                         )\n                                                     )\n                                                     .setContext(ImmutableMap.of(\n                                                         PlannerContext.CTX_SQL_QUERY_ID,\n                                                         \"dummy\"\n                                                     ))\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\"),\n                                     new FixedBucketsHistogramAggregatorFactory(\n                                         \"_a1:agg\",\n                                         \"a0\",\n                                         100,\n                                         0,\n                                         100.0d,\n                                         FixedBucketsHistogram.OutlierHandlingMode.IGNORE,\n                                         false\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         ),\n                                         new QuantilePostAggregator(\"_a1\", \"_a1:agg\", 0.98f)\n                                     )\n                                 )\n                                 .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                                 .build();\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2020-02-20 05:09:20","endLine":502,"groupId":"3442","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuantileOnInnerQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/24/651405bcbda12a3890a0f38009f835c7013c09.src","preCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_FIXED_BUCKETS(x, 0.98, 100, 0.0, 100.0)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.940000534057617});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.920000076293945});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                                     .setAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                                         )\n                                                     )\n                                                     .setContext(ImmutableMap.of(\n                                                         PlannerContext.CTX_SQL_QUERY_ID,\n                                                         \"dummy\"\n                                                     ))\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\"),\n                                     new FixedBucketsHistogramAggregatorFactory(\n                                         \"_a1:agg\",\n                                         \"a0\",\n                                         100,\n                                         0,\n                                         100.0d,\n                                         FixedBucketsHistogram.OutlierHandlingMode.IGNORE,\n                                         false\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         ),\n                                         new QuantilePostAggregator(\"_a1\", \"_a1:agg\", 0.98f)\n                                     )\n                                 )\n                                 .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                                 .build();\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/sql/FixedBucketsHistogramQuantileSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"M"},{"authorDate":"2020-02-20 05:09:20","commitOrder":3,"curCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_DS(x, 0.98)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.0});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.0});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        GroupByQuery.builder()\n                    .setDataSource(\n                        new QueryDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                        .setAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                            )\n                                        )\n                                        .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                                        .build()\n                        )\n                    )\n                    .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                    .setGranularity(Granularities.ALL)\n                    .setAggregatorSpecs(\n                        new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                        new CountAggregatorFactory(\"_a0:count\"),\n                        new DoublesSketchAggregatorFactory(\n                            \"_a1:agg\",\n                            \"a0\",\n                            null\n                        )\n                    )\n                    .setPostAggregatorSpecs(\n                        ImmutableList.of(\n                            new ArithmeticPostAggregator(\n                                \"_a0\",\n                                \"quotient\",\n                                ImmutableList.of(\n                                    new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                    new FieldAccessPostAggregator(null, \"_a0:count\")\n                                )\n                            ),\n                            new DoublesSketchToQuantilePostAggregator(\"_a1\", makeFieldAccessPostAgg(\"_a1:agg\"), 0.98f)\n                        )\n                    )\n                    .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                    .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2020-02-20 05:09:20","endLine":439,"groupId":"19214","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testQuantileOnInnerQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f5/0c87425a9d28bc73bde65c61f5cf8b78372c46.src","preCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_DS(x, 0.98)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.0});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.0});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        GroupByQuery.builder()\n                    .setDataSource(\n                        new QueryDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                        .setAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                            )\n                                        )\n                                        .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                                        .build()\n                        )\n                    )\n                    .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                    .setGranularity(Granularities.ALL)\n                    .setAggregatorSpecs(\n                        new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                        new CountAggregatorFactory(\"_a0:count\"),\n                        new DoublesSketchAggregatorFactory(\n                            \"_a1:agg\",\n                            \"a0\",\n                            null\n                        )\n                    )\n                    .setPostAggregatorSpecs(\n                        ImmutableList.of(\n                            new ArithmeticPostAggregator(\n                                \"_a0\",\n                                \"quotient\",\n                                ImmutableList.of(\n                                    new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                    new FieldAccessPostAggregator(null, \"_a0:count\")\n                                )\n                            ),\n                            new DoublesSketchToQuantilePostAggregator(\"_a1\", makeFieldAccessPostAgg(\"_a1:agg\"), 0.98f)\n                        )\n                    )\n                    .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                    .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"M"}],"commitId":"b408a6d774e43e574bf8092584fae76d582cfd8f","commitMessage":"@@@sql support for dynamic parameters (#6974)\n\n* sql support for dynamic parameters\n\n* fixup\n\n* javadocs\n\n* fixup from merge\n\n* formatting\n\n* fixes\n\n* fix it\n\n* doc fix\n\n* remove druid fallback self-join parameterized test\n\n* unused imports\n\n* ignore test for now\n\n* fix imports\n\n* fixup\n\n* fix merge\n\n* merge fixup\n\n* fix test that cannot vectorize\n\n* fixup and more better\n\n* dependency thingo\n\n* fix docs\n\n* tweaks\n\n* fix docs\n\n* spelling\n\n* unused imports after merge\n\n* review stuffs\n\n* add comment\n\n* add ignore text\n\n* review stuffs\n","date":"2020-02-20 05:09:20","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-04-13 13:21:24","codes":[{"authorDate":"2021-04-13 13:21:24","commitOrder":4,"curCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_FIXED_BUCKETS(x, 0.98, 100, 0.0, 100.0)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.940000534057617});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.920000076293945});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                                     .setAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\"),\n                                     new FixedBucketsHistogramAggregatorFactory(\n                                         \"_a1:agg\",\n                                         \"a0\",\n                                         100,\n                                         0,\n                                         100.0d,\n                                         FixedBucketsHistogram.OutlierHandlingMode.IGNORE,\n                                         false\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         ),\n                                         new QuantilePostAggregator(\"_a1\", \"_a1:agg\", 0.98f)\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2021-04-13 13:21:24","endLine":585,"groupId":"3442","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuantileOnInnerQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/dd/41d753716eda1a21621aae0a007aef86a28b76.src","preCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_FIXED_BUCKETS(x, 0.98, 100, 0.0, 100.0)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.940000534057617});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.920000076293945});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                                     .setAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                                         )\n                                                     )\n                                                     .setContext(ImmutableMap.of(\n                                                         PlannerContext.CTX_SQL_QUERY_ID,\n                                                         \"dummy\"\n                                                     ))\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\"),\n                                     new FixedBucketsHistogramAggregatorFactory(\n                                         \"_a1:agg\",\n                                         \"a0\",\n                                         100,\n                                         0,\n                                         100.0d,\n                                         FixedBucketsHistogram.OutlierHandlingMode.IGNORE,\n                                         false\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         ),\n                                         new QuantilePostAggregator(\"_a1\", \"_a1:agg\", 0.98f)\n                                     )\n                                 )\n                                 .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                                 .build();\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/sql/FixedBucketsHistogramQuantileSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":509,"status":"M"},{"authorDate":"2021-04-13 13:21:24","commitOrder":4,"curCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_DS(x, 0.98)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.0});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.0});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        GroupByQuery.builder()\n                    .setDataSource(\n                        new QueryDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                        .setAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                    )\n                    .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                    .setGranularity(Granularities.ALL)\n                    .setAggregatorSpecs(\n                        new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                        new CountAggregatorFactory(\"_a0:count\"),\n                        new DoublesSketchAggregatorFactory(\n                            \"_a1:agg\",\n                            \"a0\",\n                            null\n                        )\n                    )\n                    .setPostAggregatorSpecs(\n                        ImmutableList.of(\n                            new ArithmeticPostAggregator(\n                                \"_a0\",\n                                \"quotient\",\n                                ImmutableList.of(\n                                    new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                    new FieldAccessPostAggregator(null, \"_a0:count\")\n                                )\n                            ),\n                            new DoublesSketchToQuantilePostAggregator(\"_a1\", makeFieldAccessPostAgg(\"_a1:agg\"), 0.98f)\n                        )\n                    )\n                    .setContext(QUERY_CONTEXT_DEFAULT)\n                    .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2021-04-13 13:21:24","endLine":497,"groupId":"3442","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testQuantileOnInnerQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c6/c8e1386380b9c552f90d4ab26acf941ec47999.src","preCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_DS(x, 0.98)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.0});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.0});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        GroupByQuery.builder()\n                    .setDataSource(\n                        new QueryDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                        .setAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                            )\n                                        )\n                                        .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                                        .build()\n                        )\n                    )\n                    .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                    .setGranularity(Granularities.ALL)\n                    .setAggregatorSpecs(\n                        new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                        new CountAggregatorFactory(\"_a0:count\"),\n                        new DoublesSketchAggregatorFactory(\n                            \"_a1:agg\",\n                            \"a0\",\n                            null\n                        )\n                    )\n                    .setPostAggregatorSpecs(\n                        ImmutableList.of(\n                            new ArithmeticPostAggregator(\n                                \"_a0\",\n                                \"quotient\",\n                                ImmutableList.of(\n                                    new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                    new FieldAccessPostAggregator(null, \"_a0:count\")\n                                )\n                            ),\n                            new DoublesSketchToQuantilePostAggregator(\"_a1\", makeFieldAccessPostAgg(\"_a1:agg\"), 0.98f)\n                        )\n                    )\n                    .setContext(ImmutableMap.of(PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n                    .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"}],"commitId":"25db8787b3d7eac87aa3be8e32d48d0e823298af","commitMessage":"@@@Fix CAST being ignored when aggregating on strings after cast (#11083)\n\n* Fix CAST being ignored when aggregating on strings after cast\n\n* fix checkstyle and dependency\n\n* unused import","date":"2021-04-13 13:21:24","modifiedFileCount":"21","status":"M","submitter":"Jihoon Son"},{"authorTime":"2021-05-03 07:14:21","codes":[{"authorDate":"2021-04-13 13:21:24","commitOrder":5,"curCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_FIXED_BUCKETS(x, 0.98, 100, 0.0, 100.0)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.940000534057617});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.920000076293945});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                                     .setAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\"),\n                                     new FixedBucketsHistogramAggregatorFactory(\n                                         \"_a1:agg\",\n                                         \"a0\",\n                                         100,\n                                         0,\n                                         100.0d,\n                                         FixedBucketsHistogram.OutlierHandlingMode.IGNORE,\n                                         false\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         ),\n                                         new QuantilePostAggregator(\"_a1\", \"_a1:agg\", 0.98f)\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","date":"2021-04-13 13:21:24","endLine":585,"groupId":"3442","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuantileOnInnerQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/dd/41d753716eda1a21621aae0a007aef86a28b76.src","preCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_FIXED_BUCKETS(x, 0.98, 100, 0.0, 100.0)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.940000534057617});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.920000076293945});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                                     .setAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\"),\n                                     new FixedBucketsHistogramAggregatorFactory(\n                                         \"_a1:agg\",\n                                         \"a0\",\n                                         100,\n                                         0,\n                                         100.0d,\n                                         FixedBucketsHistogram.OutlierHandlingMode.IGNORE,\n                                         false\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         ),\n                                         new QuantilePostAggregator(\"_a1\", \"_a1:agg\", 0.98f)\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/sql/FixedBucketsHistogramQuantileSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":509,"status":"N"},{"authorDate":"2021-05-03 07:14:21","commitOrder":5,"curCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.0});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.0});\n    }\n\n    testQuery(\n        \"SELECT AVG(x), APPROX_QUANTILE_DS(x, 0.98)\\n\"\n        + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\",\n        Collections.singletonList(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            new QueryDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(CalciteTests.DATASOURCE1)\n                                            .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                            .setAggregatorSpecs(\n                                                ImmutableList.of(\n                                                    new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                                )\n                                            )\n                                            .setContext(QUERY_CONTEXT_DEFAULT)\n                                            .build()\n                            )\n                        )\n                        .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(\n                            new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                            new CountAggregatorFactory(\"_a0:count\"),\n                            new DoublesSketchAggregatorFactory(\n                                \"_a1:agg\",\n                                \"a0\",\n                                null\n                            )\n                        )\n                        .setPostAggregatorSpecs(\n                            ImmutableList.of(\n                                new ArithmeticPostAggregator(\n                                    \"_a0\",\n                                    \"quotient\",\n                                    ImmutableList.of(\n                                        new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                        new FieldAccessPostAggregator(null, \"_a0:count\")\n                                    )\n                                ),\n                                new DoublesSketchToQuantilePostAggregator(\n                                    \"_a1\",\n                                    makeFieldAccessPostAgg(\"_a1:agg\"),\n                                    0.98f\n                                )\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        expectedResults\n    );\n  }\n","date":"2021-05-03 07:14:21","endLine":456,"groupId":"3442","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testQuantileOnInnerQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/64/7f300aaa8445a8f803700928cd37d1be87052e.src","preCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_DS(x, 0.98)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.0});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.0});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    \r\n    Assert.assertEquals(\n        GroupByQuery.builder()\n                    .setDataSource(\n                        new QueryDataSource(\n                            GroupByQuery.builder()\n                                        .setDataSource(CalciteTests.DATASOURCE1)\n                                        .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                        .setGranularity(Granularities.ALL)\n                                        .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                        .setAggregatorSpecs(\n                                            ImmutableList.of(\n                                                new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                            )\n                                        )\n                                        .setContext(QUERY_CONTEXT_DEFAULT)\n                                        .build()\n                        )\n                    )\n                    .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                    .setGranularity(Granularities.ALL)\n                    .setAggregatorSpecs(\n                        new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                        new CountAggregatorFactory(\"_a0:count\"),\n                        new DoublesSketchAggregatorFactory(\n                            \"_a1:agg\",\n                            \"a0\",\n                            null\n                        )\n                    )\n                    .setPostAggregatorSpecs(\n                        ImmutableList.of(\n                            new ArithmeticPostAggregator(\n                                \"_a0\",\n                                \"quotient\",\n                                ImmutableList.of(\n                                    new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                    new FieldAccessPostAggregator(null, \"_a0:count\")\n                                )\n                            ),\n                            new DoublesSketchToQuantilePostAggregator(\"_a1\", makeFieldAccessPostAgg(\"_a1:agg\"), 0.98f)\n                        )\n                    )\n                    .setContext(QUERY_CONTEXT_DEFAULT)\n                    .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"M"}],"commitId":"809e001939be9196a4c3c620037606ab6e5af3b8","commitMessage":"@@@Vectorize the DataSketches quantiles aggregator. (#11183)\n\n* Vectorize the DataSketches quantiles aggregator.\n\nAlso removes synchronization for the BufferAggregator and VectorAggregator\nimplementations.  since it is not necessary (similar to #11115).\n\nExtends DoublesSketchAggregatorTest and DoublesSketchSqlAggregatorTest\nto run all test cases in vectorized mode.\n\n* Style fix.","date":"2021-05-03 07:14:21","modifiedFileCount":"8","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-05-03 07:14:21","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":6,"curCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.940000534057617});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.920000076293945});\n    }\n\n    testQuery(\n        \"SELECT AVG(x), APPROX_QUANTILE_FIXED_BUCKETS(x, 0.98, 100, 0.0, 100.0)\\n\"\n        + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            new QueryDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(CalciteTests.DATASOURCE1)\n                                            .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                Filtration.eternity())))\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                            .setAggregatorSpecs(\n                                                ImmutableList.of(\n                                                    new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                                )\n                                            )\n                                            .setContext(QUERY_CONTEXT_DEFAULT)\n                                            .build()\n                            )\n                        )\n                        .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(\n                            new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                            new CountAggregatorFactory(\"_a0:count\"),\n                            new FixedBucketsHistogramAggregatorFactory(\n                                \"_a1:agg\",\n                                \"a0\",\n                                100,\n                                0,\n                                100.0d,\n                                FixedBucketsHistogram.OutlierHandlingMode.IGNORE,\n                                false\n                            )\n                        )\n                        .setPostAggregatorSpecs(\n                            ImmutableList.of(\n                                new ArithmeticPostAggregator(\n                                    \"_a0\",\n                                    \"quotient\",\n                                    ImmutableList.of(\n                                        new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                        new FieldAccessPostAggregator(null, \"_a0:count\")\n                                    )\n                                ),\n                                new QuantilePostAggregator(\"_a1\", \"_a1:agg\", 0.98f)\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        expectedResults\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":513,"groupId":"103335","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testQuantileOnInnerQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/94/8d63dfe0705a706f533451aec1e7fa00ee53e6.src","preCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n    final String sql = \"SELECT AVG(x), APPROX_QUANTILE_FIXED_BUCKETS(x, 0.98, 100, 0.0, 100.0)\\n\"\n                       + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.940000534057617});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.920000076293945});\n    }\n    Assert.assertEquals(expectedResults.size(), results.size());\n    for (int i = 0; i < expectedResults.size(); i++) {\n      Assert.assertArrayEquals(expectedResults.get(i), results.get(i));\n    }\n\n    Query actual = Iterables.getOnlyElement(queryLogHook.getRecordedQueries());\n    Query expected = GroupByQuery.builder()\n                                 .setDataSource(\n                                     new QueryDataSource(\n                                         GroupByQuery.builder()\n                                                     .setDataSource(CalciteTests.DATASOURCE1)\n                                                     .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(\n                                                         Filtration.eternity())))\n                                                     .setGranularity(Granularities.ALL)\n                                                     .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                                     .setAggregatorSpecs(\n                                                         ImmutableList.of(\n                                                             new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                                         )\n                                                     )\n                                                     .setContext(QUERY_CONTEXT_DEFAULT)\n                                                     .build()\n                                     )\n                                 )\n                                 .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                 .setGranularity(Granularities.ALL)\n                                 .setAggregatorSpecs(\n                                     new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                                     new CountAggregatorFactory(\"_a0:count\"),\n                                     new FixedBucketsHistogramAggregatorFactory(\n                                         \"_a1:agg\",\n                                         \"a0\",\n                                         100,\n                                         0,\n                                         100.0d,\n                                         FixedBucketsHistogram.OutlierHandlingMode.IGNORE,\n                                         false\n                                     )\n                                 )\n                                 .setPostAggregatorSpecs(\n                                     ImmutableList.of(\n                                         new ArithmeticPostAggregator(\n                                             \"_a0\",\n                                             \"quotient\",\n                                             ImmutableList.of(\n                                                 new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                                 new FieldAccessPostAggregator(null, \"_a0:count\")\n                                             )\n                                         ),\n                                         new QuantilePostAggregator(\"_a1\", \"_a1:agg\", 0.98f)\n                                     )\n                                 )\n                                 .setContext(QUERY_CONTEXT_DEFAULT)\n                                 .build();\n\n    \r\n    Assert.assertEquals(expected, actual);\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/sql/FixedBucketsHistogramQuantileSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":449,"status":"M"},{"authorDate":"2021-05-03 07:14:21","commitOrder":6,"curCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.0});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.0});\n    }\n\n    testQuery(\n        \"SELECT AVG(x), APPROX_QUANTILE_DS(x, 0.98)\\n\"\n        + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\",\n        Collections.singletonList(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            new QueryDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(CalciteTests.DATASOURCE1)\n                                            .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                            .setAggregatorSpecs(\n                                                ImmutableList.of(\n                                                    new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                                )\n                                            )\n                                            .setContext(QUERY_CONTEXT_DEFAULT)\n                                            .build()\n                            )\n                        )\n                        .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(\n                            new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                            new CountAggregatorFactory(\"_a0:count\"),\n                            new DoublesSketchAggregatorFactory(\n                                \"_a1:agg\",\n                                \"a0\",\n                                null\n                            )\n                        )\n                        .setPostAggregatorSpecs(\n                            ImmutableList.of(\n                                new ArithmeticPostAggregator(\n                                    \"_a0\",\n                                    \"quotient\",\n                                    ImmutableList.of(\n                                        new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                        new FieldAccessPostAggregator(null, \"_a0:count\")\n                                    )\n                                ),\n                                new DoublesSketchToQuantilePostAggregator(\n                                    \"_a1\",\n                                    makeFieldAccessPostAgg(\"_a1:agg\"),\n                                    0.98f\n                                )\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        expectedResults\n    );\n  }\n","date":"2021-05-03 07:14:21","endLine":456,"groupId":"103335","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testQuantileOnInnerQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/64/7f300aaa8445a8f803700928cd37d1be87052e.src","preCode":"  public void testQuantileOnInnerQuery() throws Exception\n  {\n    final List<Object[]> expectedResults;\n    if (NullHandling.replaceWithDefault()) {\n      expectedResults = ImmutableList.of(new Object[]{7.0, 11.0});\n    } else {\n      expectedResults = ImmutableList.of(new Object[]{5.25, 8.0});\n    }\n\n    testQuery(\n        \"SELECT AVG(x), APPROX_QUANTILE_DS(x, 0.98)\\n\"\n        + \"FROM (SELECT dim2, SUM(m1) AS x FROM foo GROUP BY dim2)\",\n        Collections.singletonList(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            new QueryDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(CalciteTests.DATASOURCE1)\n                                            .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(new DefaultDimensionSpec(\"dim2\", \"d0\"))\n                                            .setAggregatorSpecs(\n                                                ImmutableList.of(\n                                                    new DoubleSumAggregatorFactory(\"a0\", \"m1\")\n                                                )\n                                            )\n                                            .setContext(QUERY_CONTEXT_DEFAULT)\n                                            .build()\n                            )\n                        )\n                        .setInterval(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                        .setGranularity(Granularities.ALL)\n                        .setAggregatorSpecs(\n                            new DoubleSumAggregatorFactory(\"_a0:sum\", \"a0\"),\n                            new CountAggregatorFactory(\"_a0:count\"),\n                            new DoublesSketchAggregatorFactory(\n                                \"_a1:agg\",\n                                \"a0\",\n                                null\n                            )\n                        )\n                        .setPostAggregatorSpecs(\n                            ImmutableList.of(\n                                new ArithmeticPostAggregator(\n                                    \"_a0\",\n                                    \"quotient\",\n                                    ImmutableList.of(\n                                        new FieldAccessPostAggregator(null, \"_a0:sum\"),\n                                        new FieldAccessPostAggregator(null, \"_a0:count\")\n                                    )\n                                ),\n                                new DoublesSketchToQuantilePostAggregator(\n                                    \"_a1\",\n                                    makeFieldAccessPostAgg(\"_a1:agg\"),\n                                    0.98f\n                                )\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        expectedResults\n    );\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/quantiles/sql/DoublesSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"N"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
