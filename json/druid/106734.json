[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testExtraction()\n  {\n    SearchQuerySpec spec = new FragmentSearchQuerySpec(\n        Arrays.asList(\"tO\", \"yO\")\n    );\n    ExtractionFn extractionFn = new SearchQuerySpecDimExtractionFn(spec);\n    List<String> expected = ImmutableList.of(\"Kyoto\", \"Tokyo\", \"Toyokawa\", \"Yorktown\");\n    List<String> extracted = Lists.newArrayList();\n\n    for (String str : testStrings) {\n      String res = extractionFn.apply(str);\n      if (res != null) {\n        extracted.add(res);\n      }\n    }\n\n    Assert.assertEquals(expected, extracted);\n  }\n","date":"2018-08-31 00:56:26","endLine":67,"groupId":"4842","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/74/c2787a15a65c4011c8ae1548710998e2de7e2e.src","preCode":"  public void testExtraction()\n  {\n    SearchQuerySpec spec = new FragmentSearchQuerySpec(\n        Arrays.asList(\"tO\", \"yO\")\n    );\n    ExtractionFn extractionFn = new SearchQuerySpecDimExtractionFn(spec);\n    List<String> expected = ImmutableList.of(\"Kyoto\", \"Tokyo\", \"Toyokawa\", \"Yorktown\");\n    List<String> extracted = Lists.newArrayList();\n\n    for (String str : testStrings) {\n      String res = extractionFn.apply(str);\n      if (res != null) {\n        extracted.add(res);\n      }\n    }\n\n    Assert.assertEquals(expected, extracted);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/SearchQuerySpecDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testCaseSensitiveExtraction()\n  {\n    SearchQuerySpec spec = new FragmentSearchQuerySpec(\n        Arrays.asList(\"to\", \"yo\"),\n        true\n    );\n    ExtractionFn extractionFn = new SearchQuerySpecDimExtractionFn(spec);\n    List<String> expected = ImmutableList.of(\"Kyoto\");\n    List<String> extracted = Lists.newArrayList();\n\n    for (String str : testStrings) {\n      String res = extractionFn.apply(str);\n      if (res != null) {\n        extracted.add(res);\n      }\n    }\n\n    Assert.assertEquals(expected, extracted);\n  }\n","date":"2018-08-31 00:56:26","endLine":88,"groupId":"11112","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCaseSensitiveExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/74/c2787a15a65c4011c8ae1548710998e2de7e2e.src","preCode":"  public void testCaseSensitiveExtraction()\n  {\n    SearchQuerySpec spec = new FragmentSearchQuerySpec(\n        Arrays.asList(\"to\", \"yo\"),\n        true\n    );\n    ExtractionFn extractionFn = new SearchQuerySpecDimExtractionFn(spec);\n    List<String> expected = ImmutableList.of(\"Kyoto\");\n    List<String> extracted = Lists.newArrayList();\n\n    for (String str : testStrings) {\n      String res = extractionFn.apply(str);\n      if (res != null) {\n        extracted.add(res);\n      }\n    }\n\n    Assert.assertEquals(expected, extracted);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/SearchQuerySpecDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testExtraction()\n  {\n    SearchQuerySpec spec = new FragmentSearchQuerySpec(\n        Arrays.asList(\"tO\", \"yO\")\n    );\n    ExtractionFn extractionFn = new SearchQuerySpecDimExtractionFn(spec);\n    List<String> expected = ImmutableList.of(\"Kyoto\", \"Tokyo\", \"Toyokawa\", \"Yorktown\");\n    List<String> extracted = new ArrayList<>();\n\n    for (String str : testStrings) {\n      String res = extractionFn.apply(str);\n      if (res != null) {\n        extracted.add(res);\n      }\n    }\n\n    Assert.assertEquals(expected, extracted);\n  }\n","date":"2018-10-29 20:02:43","endLine":67,"groupId":"4842","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/047bc52459e5d9a2067146172dbb10f97f1db3.src","preCode":"  public void testExtraction()\n  {\n    SearchQuerySpec spec = new FragmentSearchQuerySpec(\n        Arrays.asList(\"tO\", \"yO\")\n    );\n    ExtractionFn extractionFn = new SearchQuerySpecDimExtractionFn(spec);\n    List<String> expected = ImmutableList.of(\"Kyoto\", \"Tokyo\", \"Toyokawa\", \"Yorktown\");\n    List<String> extracted = Lists.newArrayList();\n\n    for (String str : testStrings) {\n      String res = extractionFn.apply(str);\n      if (res != null) {\n        extracted.add(res);\n      }\n    }\n\n    Assert.assertEquals(expected, extracted);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/SearchQuerySpecDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testCaseSensitiveExtraction()\n  {\n    SearchQuerySpec spec = new FragmentSearchQuerySpec(\n        Arrays.asList(\"to\", \"yo\"),\n        true\n    );\n    ExtractionFn extractionFn = new SearchQuerySpecDimExtractionFn(spec);\n    List<String> expected = ImmutableList.of(\"Kyoto\");\n    List<String> extracted = new ArrayList<>();\n\n    for (String str : testStrings) {\n      String res = extractionFn.apply(str);\n      if (res != null) {\n        extracted.add(res);\n      }\n    }\n\n    Assert.assertEquals(expected, extracted);\n  }\n","date":"2018-10-29 20:02:43","endLine":88,"groupId":"11112","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCaseSensitiveExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/047bc52459e5d9a2067146172dbb10f97f1db3.src","preCode":"  public void testCaseSensitiveExtraction()\n  {\n    SearchQuerySpec spec = new FragmentSearchQuerySpec(\n        Arrays.asList(\"to\", \"yo\"),\n        true\n    );\n    ExtractionFn extractionFn = new SearchQuerySpecDimExtractionFn(spec);\n    List<String> expected = ImmutableList.of(\"Kyoto\");\n    List<String> extracted = Lists.newArrayList();\n\n    for (String str : testStrings) {\n      String res = extractionFn.apply(str);\n      if (res != null) {\n        extracted.add(res);\n      }\n    }\n\n    Assert.assertEquals(expected, extracted);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/SearchQuerySpecDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testExtraction()\n  {\n    SearchQuerySpec spec = new FragmentSearchQuerySpec(\n        Arrays.asList(\"tO\", \"yO\")\n    );\n    ExtractionFn extractionFn = new SearchQuerySpecDimExtractionFn(spec);\n    List<String> expected = ImmutableList.of(\"Kyoto\", \"Tokyo\", \"Toyokawa\", \"Yorktown\");\n    List<String> extracted = new ArrayList<>();\n\n    for (String str : TEST_STRINGS) {\n      String res = extractionFn.apply(str);\n      if (res != null) {\n        extracted.add(res);\n      }\n    }\n\n    Assert.assertEquals(expected, extracted);\n  }\n","date":"2019-08-23 18:13:54","endLine":67,"groupId":"106734","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5a/d437b4112842a7ffd6ecb1642627163a10e782.src","preCode":"  public void testExtraction()\n  {\n    SearchQuerySpec spec = new FragmentSearchQuerySpec(\n        Arrays.asList(\"tO\", \"yO\")\n    );\n    ExtractionFn extractionFn = new SearchQuerySpecDimExtractionFn(spec);\n    List<String> expected = ImmutableList.of(\"Kyoto\", \"Tokyo\", \"Toyokawa\", \"Yorktown\");\n    List<String> extracted = new ArrayList<>();\n\n    for (String str : testStrings) {\n      String res = extractionFn.apply(str);\n      if (res != null) {\n        extracted.add(res);\n      }\n    }\n\n    Assert.assertEquals(expected, extracted);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/SearchQuerySpecDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testCaseSensitiveExtraction()\n  {\n    SearchQuerySpec spec = new FragmentSearchQuerySpec(\n        Arrays.asList(\"to\", \"yo\"),\n        true\n    );\n    ExtractionFn extractionFn = new SearchQuerySpecDimExtractionFn(spec);\n    List<String> expected = ImmutableList.of(\"Kyoto\");\n    List<String> extracted = new ArrayList<>();\n\n    for (String str : TEST_STRINGS) {\n      String res = extractionFn.apply(str);\n      if (res != null) {\n        extracted.add(res);\n      }\n    }\n\n    Assert.assertEquals(expected, extracted);\n  }\n","date":"2019-08-23 18:13:54","endLine":88,"groupId":"106734","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testCaseSensitiveExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5a/d437b4112842a7ffd6ecb1642627163a10e782.src","preCode":"  public void testCaseSensitiveExtraction()\n  {\n    SearchQuerySpec spec = new FragmentSearchQuerySpec(\n        Arrays.asList(\"to\", \"yo\"),\n        true\n    );\n    ExtractionFn extractionFn = new SearchQuerySpecDimExtractionFn(spec);\n    List<String> expected = ImmutableList.of(\"Kyoto\");\n    List<String> extracted = new ArrayList<>();\n\n    for (String str : testStrings) {\n      String res = extractionFn.apply(str);\n      if (res != null) {\n        extracted.add(res);\n      }\n    }\n\n    Assert.assertEquals(expected, extracted);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/SearchQuerySpecDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
