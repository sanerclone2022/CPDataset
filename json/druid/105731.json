[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public ObjectStrategy getObjectStrategy()\n  {\n    return new ObjectStrategy<VarianceAggregatorCollector>()\n    {\n      @Override\n      public Class<? extends VarianceAggregatorCollector> getClazz()\n      {\n        return VarianceAggregatorCollector.class;\n      }\n\n      @Override\n      public VarianceAggregatorCollector fromByteBuffer(ByteBuffer buffer, int numBytes)\n      {\n        buffer.limit(buffer.position() + numBytes);\n        return VarianceAggregatorCollector.from(buffer);\n      }\n\n      @Override\n      public byte[] toBytes(VarianceAggregatorCollector collector)\n      {\n        return collector == null ? new byte[]{} : collector.toByteArray();\n      }\n\n      @Override\n      public int compare(VarianceAggregatorCollector o1, VarianceAggregatorCollector o2)\n      {\n        return comparator.compare(o1, o2);\n      }\n    };\n  }\n","date":"2018-08-31 00:56:26","endLine":122,"groupId":"20618","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getObjectStrategy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b2/4fe5a5773ecd70085753ede363f4accbc1ce17.src","preCode":"  public ObjectStrategy getObjectStrategy()\n  {\n    return new ObjectStrategy<VarianceAggregatorCollector>()\n    {\n      @Override\n      public Class<? extends VarianceAggregatorCollector> getClazz()\n      {\n        return VarianceAggregatorCollector.class;\n      }\n\n      @Override\n      public VarianceAggregatorCollector fromByteBuffer(ByteBuffer buffer, int numBytes)\n      {\n        buffer.limit(buffer.position() + numBytes);\n        return VarianceAggregatorCollector.from(buffer);\n      }\n\n      @Override\n      public byte[] toBytes(VarianceAggregatorCollector collector)\n      {\n        return collector == null ? new byte[]{} : collector.toByteArray();\n      }\n\n      @Override\n      public int compare(VarianceAggregatorCollector o1, VarianceAggregatorCollector o2)\n      {\n        return comparator.compare(o1, o2);\n      }\n    };\n  }\n","realPath":"extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceSerde.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public ObjectStrategy getObjectStrategy()\n  {\n    return new ObjectStrategy<HyperLogLogCollector>()\n    {\n      @Override\n      public Class<? extends HyperLogLogCollector> getClazz()\n      {\n        return HyperLogLogCollector.class;\n      }\n\n      @Override\n      public HyperLogLogCollector fromByteBuffer(ByteBuffer buffer, int numBytes)\n      {\n        \r\n        \r\n        final ByteBuffer readOnlyBuffer = buffer.asReadOnlyBuffer();\n        readOnlyBuffer.limit(readOnlyBuffer.position() + numBytes);\n        return HyperLogLogCollector.makeCollector(readOnlyBuffer);\n      }\n\n      @Override\n      public byte[] toBytes(HyperLogLogCollector collector)\n      {\n        if (collector == null) {\n          return new byte[]{};\n        }\n        ByteBuffer val = collector.toByteBuffer();\n        byte[] retVal = new byte[val.remaining()];\n        val.asReadOnlyBuffer().get(retVal);\n        return retVal;\n      }\n\n      @Override\n      public int compare(HyperLogLogCollector o1, HyperLogLogCollector o2)\n      {\n        return comparator.compare(o1, o2);\n      }\n    };\n  }\n","date":"2018-08-31 00:56:26","endLine":148,"groupId":"13049","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getObjectStrategy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a8/5a8e1fc6095a8ddc3f0a2115433030f4cbf284.src","preCode":"  public ObjectStrategy getObjectStrategy()\n  {\n    return new ObjectStrategy<HyperLogLogCollector>()\n    {\n      @Override\n      public Class<? extends HyperLogLogCollector> getClazz()\n      {\n        return HyperLogLogCollector.class;\n      }\n\n      @Override\n      public HyperLogLogCollector fromByteBuffer(ByteBuffer buffer, int numBytes)\n      {\n        \r\n        \r\n        final ByteBuffer readOnlyBuffer = buffer.asReadOnlyBuffer();\n        readOnlyBuffer.limit(readOnlyBuffer.position() + numBytes);\n        return HyperLogLogCollector.makeCollector(readOnlyBuffer);\n      }\n\n      @Override\n      public byte[] toBytes(HyperLogLogCollector collector)\n      {\n        if (collector == null) {\n          return new byte[]{};\n        }\n        ByteBuffer val = collector.toByteBuffer();\n        byte[] retVal = new byte[val.remaining()];\n        val.asReadOnlyBuffer().get(retVal);\n        return retVal;\n      }\n\n      @Override\n      public int compare(HyperLogLogCollector o1, HyperLogLogCollector o2)\n      {\n        return comparator.compare(o1, o2);\n      }\n    };\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/aggregation/hyperloglog/HyperUniquesSerde.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-03 01:50:22","codes":[{"authorDate":"2018-10-03 01:50:22","commitOrder":2,"curCode":"  public ObjectStrategy getObjectStrategy()\n  {\n    return new ObjectStrategy<VarianceAggregatorCollector>()\n    {\n      @Override\n      public Class<VarianceAggregatorCollector> getClazz()\n      {\n        return VarianceAggregatorCollector.class;\n      }\n\n      @Override\n      public VarianceAggregatorCollector fromByteBuffer(ByteBuffer buffer, int numBytes)\n      {\n        buffer.limit(buffer.position() + numBytes);\n        return VarianceAggregatorCollector.from(buffer);\n      }\n\n      @Override\n      public byte[] toBytes(VarianceAggregatorCollector collector)\n      {\n        return collector == null ? new byte[]{} : collector.toByteArray();\n      }\n\n      @Override\n      public int compare(VarianceAggregatorCollector o1, VarianceAggregatorCollector o2)\n      {\n        return comparator.compare(o1, o2);\n      }\n    };\n  }\n","date":"2018-10-03 01:50:22","endLine":120,"groupId":"20618","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getObjectStrategy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d1/4670cc0e4d36a6f997b7d3de11f26a07664870.src","preCode":"  public ObjectStrategy getObjectStrategy()\n  {\n    return new ObjectStrategy<VarianceAggregatorCollector>()\n    {\n      @Override\n      public Class<? extends VarianceAggregatorCollector> getClazz()\n      {\n        return VarianceAggregatorCollector.class;\n      }\n\n      @Override\n      public VarianceAggregatorCollector fromByteBuffer(ByteBuffer buffer, int numBytes)\n      {\n        buffer.limit(buffer.position() + numBytes);\n        return VarianceAggregatorCollector.from(buffer);\n      }\n\n      @Override\n      public byte[] toBytes(VarianceAggregatorCollector collector)\n      {\n        return collector == null ? new byte[]{} : collector.toByteArray();\n      }\n\n      @Override\n      public int compare(VarianceAggregatorCollector o1, VarianceAggregatorCollector o2)\n      {\n        return comparator.compare(o1, o2);\n      }\n    };\n  }\n","realPath":"extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceSerde.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2018-10-03 01:50:22","commitOrder":2,"curCode":"  public ObjectStrategy getObjectStrategy()\n  {\n    return new ObjectStrategy<HyperLogLogCollector>()\n    {\n      @Override\n      public Class<HyperLogLogCollector> getClazz()\n      {\n        return HyperLogLogCollector.class;\n      }\n\n      @Override\n      public HyperLogLogCollector fromByteBuffer(ByteBuffer buffer, int numBytes)\n      {\n        \r\n        \r\n        final ByteBuffer readOnlyBuffer = buffer.asReadOnlyBuffer();\n        readOnlyBuffer.limit(readOnlyBuffer.position() + numBytes);\n        return HyperLogLogCollector.makeCollector(readOnlyBuffer);\n      }\n\n      @Override\n      public byte[] toBytes(HyperLogLogCollector collector)\n      {\n        if (collector == null) {\n          return new byte[]{};\n        }\n        ByteBuffer val = collector.toByteBuffer();\n        byte[] retVal = new byte[val.remaining()];\n        val.asReadOnlyBuffer().get(retVal);\n        return retVal;\n      }\n\n      @Override\n      public int compare(HyperLogLogCollector o1, HyperLogLogCollector o2)\n      {\n        return comparator.compare(o1, o2);\n      }\n    };\n  }\n","date":"2018-10-03 01:50:22","endLine":140,"groupId":"13049","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getObjectStrategy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/56/979500c41e00c1fe6a2ec4498f3897c0e2aa94.src","preCode":"  public ObjectStrategy getObjectStrategy()\n  {\n    return new ObjectStrategy<HyperLogLogCollector>()\n    {\n      @Override\n      public Class<? extends HyperLogLogCollector> getClazz()\n      {\n        return HyperLogLogCollector.class;\n      }\n\n      @Override\n      public HyperLogLogCollector fromByteBuffer(ByteBuffer buffer, int numBytes)\n      {\n        \r\n        \r\n        final ByteBuffer readOnlyBuffer = buffer.asReadOnlyBuffer();\n        readOnlyBuffer.limit(readOnlyBuffer.position() + numBytes);\n        return HyperLogLogCollector.makeCollector(readOnlyBuffer);\n      }\n\n      @Override\n      public byte[] toBytes(HyperLogLogCollector collector)\n      {\n        if (collector == null) {\n          return new byte[]{};\n        }\n        ByteBuffer val = collector.toByteBuffer();\n        byte[] retVal = new byte[val.remaining()];\n        val.asReadOnlyBuffer().get(retVal);\n        return retVal;\n      }\n\n      @Override\n      public int compare(HyperLogLogCollector o1, HyperLogLogCollector o2)\n      {\n        return comparator.compare(o1, o2);\n      }\n    };\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/aggregation/hyperloglog/HyperUniquesSerde.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"3ae563263a23000560749071d262727d47296856","commitMessage":"@@@Renamed 'Generic Column' -> 'Numeric Column'; Fixed a few resource leaks in processing; misc refinements (#5957)\n\nThis PR accumulates many refactorings and small improvements that I did while preparing the next change set of https://github.com/druid-io/druid/projects/2. I finally decided to make them a separate PR to minimize the volume of the main PR.\n\nSome of the changes:\n - Renamed confusing \"Generic Column\" term to \"Numeric Column\" (what it actually implies) in many class names.\n - Generified `ComplexMetricExtractor`","date":"2018-10-03 01:50:22","modifiedFileCount":"776","status":"M","submitter":"Roman Leventov"},{"authorTime":"2018-10-03 01:50:22","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public ObjectStrategy getObjectStrategy()\n  {\n    return new ObjectStrategy<VarianceAggregatorCollector>()\n    {\n      @Override\n      public Class<VarianceAggregatorCollector> getClazz()\n      {\n        return VarianceAggregatorCollector.class;\n      }\n\n      @Override\n      public VarianceAggregatorCollector fromByteBuffer(ByteBuffer buffer, int numBytes)\n      {\n        buffer.limit(buffer.position() + numBytes);\n        return VarianceAggregatorCollector.from(buffer);\n      }\n\n      @Override\n      public byte[] toBytes(VarianceAggregatorCollector collector)\n      {\n        return collector == null ? new byte[]{} : collector.toByteArray();\n      }\n\n      @Override\n      public int compare(VarianceAggregatorCollector o1, VarianceAggregatorCollector o2)\n      {\n        return COMPARATOR.compare(o1, o2);\n      }\n    };\n  }\n","date":"2019-08-23 18:13:54","endLine":120,"groupId":"105731","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"getObjectStrategy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/25/6e83ae051d96e3e23c89df45fc607374ba2d3c.src","preCode":"  public ObjectStrategy getObjectStrategy()\n  {\n    return new ObjectStrategy<VarianceAggregatorCollector>()\n    {\n      @Override\n      public Class<VarianceAggregatorCollector> getClazz()\n      {\n        return VarianceAggregatorCollector.class;\n      }\n\n      @Override\n      public VarianceAggregatorCollector fromByteBuffer(ByteBuffer buffer, int numBytes)\n      {\n        buffer.limit(buffer.position() + numBytes);\n        return VarianceAggregatorCollector.from(buffer);\n      }\n\n      @Override\n      public byte[] toBytes(VarianceAggregatorCollector collector)\n      {\n        return collector == null ? new byte[]{} : collector.toByteArray();\n      }\n\n      @Override\n      public int compare(VarianceAggregatorCollector o1, VarianceAggregatorCollector o2)\n      {\n        return comparator.compare(o1, o2);\n      }\n    };\n  }\n","realPath":"extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceSerde.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2018-10-03 01:50:22","commitOrder":3,"curCode":"  public ObjectStrategy getObjectStrategy()\n  {\n    return new ObjectStrategy<HyperLogLogCollector>()\n    {\n      @Override\n      public Class<HyperLogLogCollector> getClazz()\n      {\n        return HyperLogLogCollector.class;\n      }\n\n      @Override\n      public HyperLogLogCollector fromByteBuffer(ByteBuffer buffer, int numBytes)\n      {\n        \r\n        \r\n        final ByteBuffer readOnlyBuffer = buffer.asReadOnlyBuffer();\n        readOnlyBuffer.limit(readOnlyBuffer.position() + numBytes);\n        return HyperLogLogCollector.makeCollector(readOnlyBuffer);\n      }\n\n      @Override\n      public byte[] toBytes(HyperLogLogCollector collector)\n      {\n        if (collector == null) {\n          return new byte[]{};\n        }\n        ByteBuffer val = collector.toByteBuffer();\n        byte[] retVal = new byte[val.remaining()];\n        val.asReadOnlyBuffer().get(retVal);\n        return retVal;\n      }\n\n      @Override\n      public int compare(HyperLogLogCollector o1, HyperLogLogCollector o2)\n      {\n        return comparator.compare(o1, o2);\n      }\n    };\n  }\n","date":"2018-10-03 01:50:22","endLine":140,"groupId":"105731","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getObjectStrategy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/56/979500c41e00c1fe6a2ec4498f3897c0e2aa94.src","preCode":"  public ObjectStrategy getObjectStrategy()\n  {\n    return new ObjectStrategy<HyperLogLogCollector>()\n    {\n      @Override\n      public Class<HyperLogLogCollector> getClazz()\n      {\n        return HyperLogLogCollector.class;\n      }\n\n      @Override\n      public HyperLogLogCollector fromByteBuffer(ByteBuffer buffer, int numBytes)\n      {\n        \r\n        \r\n        final ByteBuffer readOnlyBuffer = buffer.asReadOnlyBuffer();\n        readOnlyBuffer.limit(readOnlyBuffer.position() + numBytes);\n        return HyperLogLogCollector.makeCollector(readOnlyBuffer);\n      }\n\n      @Override\n      public byte[] toBytes(HyperLogLogCollector collector)\n      {\n        if (collector == null) {\n          return new byte[]{};\n        }\n        ByteBuffer val = collector.toByteBuffer();\n        byte[] retVal = new byte[val.remaining()];\n        val.asReadOnlyBuffer().get(retVal);\n        return retVal;\n      }\n\n      @Override\n      public int compare(HyperLogLogCollector o1, HyperLogLogCollector o2)\n      {\n        return comparator.compare(o1, o2);\n      }\n    };\n  }\n","realPath":"processing/src/main/java/org/apache/druid/query/aggregation/hyperloglog/HyperUniquesSerde.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"N"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
