[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSimpleDataIngestAndTopNQuery() throws Exception\n  {\n    AggregationTestHelper topNQueryAggregationTestHelper = AggregationTestHelper.createTopNQueryAggregationTestHelper(\n        sm.getJacksonModules(),\n        tempFolder\n    );\n\n    Sequence seq = topNQueryAggregationTestHelper.runQueryOnSegments(\n        ImmutableList.of(s1, s2),\n        readFileFromClasspathAsString(\"topn_query.json\")\n    );\n\n    Result<TopNResultValue> result = (Result<TopNResultValue>) Iterables.getOnlyElement(seq.toList());\n\n    Assert.assertEquals(DateTimes.of(\"2014-10-20T00:00:00.000Z\"), result.getTimestamp());\n\n    DimensionAndMetricValueExtractor value = Iterables.getOnlyElement(result.getValue().getValue());\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(0.0, value.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(0.0, value.getDoubleMetric(\"non_existing_col_validation\"), 0.01);\n    Assert.assertEquals(\"product_3\", value.getDimensionValue(\"product\"));\n  }\n","date":"2018-08-31 00:56:26","endLine":262,"groupId":"7252","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleDataIngestAndTopNQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ab/357a5f4a0f4f08d6349ec2b6f13b45da93f6b5.src","preCode":"  public void testSimpleDataIngestAndTopNQuery() throws Exception\n  {\n    AggregationTestHelper topNQueryAggregationTestHelper = AggregationTestHelper.createTopNQueryAggregationTestHelper(\n        sm.getJacksonModules(),\n        tempFolder\n    );\n\n    Sequence seq = topNQueryAggregationTestHelper.runQueryOnSegments(\n        ImmutableList.of(s1, s2),\n        readFileFromClasspathAsString(\"topn_query.json\")\n    );\n\n    Result<TopNResultValue> result = (Result<TopNResultValue>) Iterables.getOnlyElement(seq.toList());\n\n    Assert.assertEquals(DateTimes.of(\"2014-10-20T00:00:00.000Z\"), result.getTimestamp());\n\n    DimensionAndMetricValueExtractor value = Iterables.getOnlyElement(result.getValue().getValue());\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(0.0, value.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(0.0, value.getDoubleMetric(\"non_existing_col_validation\"), 0.01);\n    Assert.assertEquals(\"product_3\", value.getDimensionValue(\"product\"));\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/SketchAggregationWithSimpleDataTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTopNQueryWithSketchConstant() throws Exception\n  {\n    AggregationTestHelper topNQueryAggregationTestHelper = AggregationTestHelper.createTopNQueryAggregationTestHelper(\n        sm.getJacksonModules(),\n        tempFolder\n    );\n\n    Sequence seq = topNQueryAggregationTestHelper.runQueryOnSegments(\n        ImmutableList.of(s1, s2),\n        readFileFromClasspathAsString(\"topn_query_sketch_const.json\")\n    );\n    \n    Result<TopNResultValue> result = (Result<TopNResultValue>) Iterables.getOnlyElement(seq.toList());\n    \n    Assert.assertEquals(DateTimes.of(\"2014-10-20T00:00:00.000Z\"), result.getTimestamp());\n\n    DimensionAndMetricValueExtractor value1 = Iterables.get(result.getValue().getValue(), 0);\n    Assert.assertEquals(38.0, value1.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(38.0, value1.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(2.0, value1.getDoubleMetric(\"sketchEstimatePostAggForSketchConstant\"), 0.01);\n    Assert.assertEquals(39.0, value1.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(1.0, value1.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(37.0, value1.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(\"product_3\", value1.getDimensionValue(\"product\"));\n    \n    DimensionAndMetricValueExtractor value2 = Iterables.get(result.getValue().getValue(), 1);\n    Assert.assertEquals(42.0, value2.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(42.0, value2.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(2.0, value2.getDoubleMetric(\"sketchEstimatePostAggForSketchConstant\"), 0.01);\n    Assert.assertEquals(42.0, value2.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(2.0, value2.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(40.0, value2.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(\"product_1\", value2.getDimensionValue(\"product\"));\n    \n    DimensionAndMetricValueExtractor value3 = Iterables.get(result.getValue().getValue(), 2);\n    Assert.assertEquals(42.0, value3.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(42.0, value3.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(2.0, value3.getDoubleMetric(\"sketchEstimatePostAggForSketchConstant\"), 0.01);\n    Assert.assertEquals(42.0, value3.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(2.0, value3.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(40.0, value3.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(\"product_2\", value3.getDimensionValue(\"product\"));\n  }\n","date":"2018-08-31 00:56:26","endLine":328,"groupId":"3447","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopNQueryWithSketchConstant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ab/357a5f4a0f4f08d6349ec2b6f13b45da93f6b5.src","preCode":"  public void testTopNQueryWithSketchConstant() throws Exception\n  {\n    AggregationTestHelper topNQueryAggregationTestHelper = AggregationTestHelper.createTopNQueryAggregationTestHelper(\n        sm.getJacksonModules(),\n        tempFolder\n    );\n\n    Sequence seq = topNQueryAggregationTestHelper.runQueryOnSegments(\n        ImmutableList.of(s1, s2),\n        readFileFromClasspathAsString(\"topn_query_sketch_const.json\")\n    );\n    \n    Result<TopNResultValue> result = (Result<TopNResultValue>) Iterables.getOnlyElement(seq.toList());\n    \n    Assert.assertEquals(DateTimes.of(\"2014-10-20T00:00:00.000Z\"), result.getTimestamp());\n\n    DimensionAndMetricValueExtractor value1 = Iterables.get(result.getValue().getValue(), 0);\n    Assert.assertEquals(38.0, value1.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(38.0, value1.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(2.0, value1.getDoubleMetric(\"sketchEstimatePostAggForSketchConstant\"), 0.01);\n    Assert.assertEquals(39.0, value1.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(1.0, value1.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(37.0, value1.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(\"product_3\", value1.getDimensionValue(\"product\"));\n    \n    DimensionAndMetricValueExtractor value2 = Iterables.get(result.getValue().getValue(), 1);\n    Assert.assertEquals(42.0, value2.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(42.0, value2.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(2.0, value2.getDoubleMetric(\"sketchEstimatePostAggForSketchConstant\"), 0.01);\n    Assert.assertEquals(42.0, value2.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(2.0, value2.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(40.0, value2.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(\"product_1\", value2.getDimensionValue(\"product\"));\n    \n    DimensionAndMetricValueExtractor value3 = Iterables.get(result.getValue().getValue(), 2);\n    Assert.assertEquals(42.0, value3.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(42.0, value3.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(2.0, value3.getDoubleMetric(\"sketchEstimatePostAggForSketchConstant\"), 0.01);\n    Assert.assertEquals(42.0, value3.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(2.0, value3.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(40.0, value3.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(\"product_2\", value3.getDimensionValue(\"product\"));\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/SketchAggregationWithSimpleDataTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2021-01-30 01:30:09","codes":[{"authorDate":"2021-01-30 01:30:09","commitOrder":2,"curCode":"  public void testSimpleDataIngestAndTopNQuery() throws Exception\n  {\n    AggregationTestHelper topNQueryAggregationTestHelper = AggregationTestHelper.createTopNQueryAggregationTestHelper(\n        sm.getJacksonModules(),\n        tempFolder\n    );\n\n    Sequence seq = topNQueryAggregationTestHelper.runQueryOnSegments(\n        ImmutableList.of(s1, s2),\n        (Query) SketchAggregationTest.readQueryFromClasspath(\n            \"topn_query.json\",\n            topNQueryAggregationTestHelper.getObjectMapper(),\n            vectorize\n        )\n    );\n\n    Result<TopNResultValue> result = (Result<TopNResultValue>) Iterables.getOnlyElement(seq.toList());\n\n    Assert.assertEquals(DateTimes.of(\"2014-10-20T00:00:00.000Z\"), result.getTimestamp());\n\n    DimensionAndMetricValueExtractor value = Iterables.getOnlyElement(result.getValue().getValue());\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(0.0, value.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(0.0, value.getDoubleMetric(\"non_existing_col_validation\"), 0.01);\n    Assert.assertEquals(\"product_3\", value.getDimensionValue(\"product\"));\n  }\n","date":"2021-01-30 01:30:09","endLine":283,"groupId":"103496","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testSimpleDataIngestAndTopNQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ff/d166b867fe5020d09935d764cd1a7d9be5306f.src","preCode":"  public void testSimpleDataIngestAndTopNQuery() throws Exception\n  {\n    AggregationTestHelper topNQueryAggregationTestHelper = AggregationTestHelper.createTopNQueryAggregationTestHelper(\n        sm.getJacksonModules(),\n        tempFolder\n    );\n\n    Sequence seq = topNQueryAggregationTestHelper.runQueryOnSegments(\n        ImmutableList.of(s1, s2),\n        readFileFromClasspathAsString(\"topn_query.json\")\n    );\n\n    Result<TopNResultValue> result = (Result<TopNResultValue>) Iterables.getOnlyElement(seq.toList());\n\n    Assert.assertEquals(DateTimes.of(\"2014-10-20T00:00:00.000Z\"), result.getTimestamp());\n\n    DimensionAndMetricValueExtractor value = Iterables.getOnlyElement(result.getValue().getValue());\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(38.0, value.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(0.0, value.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(0.0, value.getDoubleMetric(\"non_existing_col_validation\"), 0.01);\n    Assert.assertEquals(\"product_3\", value.getDimensionValue(\"product\"));\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/SketchAggregationWithSimpleDataTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"},{"authorDate":"2021-01-30 01:30:09","commitOrder":2,"curCode":"  public void testTopNQueryWithSketchConstant() throws Exception\n  {\n    AggregationTestHelper topNQueryAggregationTestHelper = AggregationTestHelper.createTopNQueryAggregationTestHelper(\n        sm.getJacksonModules(),\n        tempFolder\n    );\n\n    Sequence seq = topNQueryAggregationTestHelper.runQueryOnSegments(\n        ImmutableList.of(s1, s2),\n        (Query) SketchAggregationTest.readQueryFromClasspath(\n            \"topn_query_sketch_const.json\",\n            topNQueryAggregationTestHelper.getObjectMapper(),\n            vectorize\n        )\n    );\n\n    Result<TopNResultValue> result = (Result<TopNResultValue>) Iterables.getOnlyElement(seq.toList());\n\n    Assert.assertEquals(DateTimes.of(\"2014-10-20T00:00:00.000Z\"), result.getTimestamp());\n\n    DimensionAndMetricValueExtractor value1 = Iterables.get(result.getValue().getValue(), 0);\n    Assert.assertEquals(38.0, value1.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(38.0, value1.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(2.0, value1.getDoubleMetric(\"sketchEstimatePostAggForSketchConstant\"), 0.01);\n    Assert.assertEquals(39.0, value1.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(1.0, value1.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(37.0, value1.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(\"product_3\", value1.getDimensionValue(\"product\"));\n\n    DimensionAndMetricValueExtractor value2 = Iterables.get(result.getValue().getValue(), 1);\n    Assert.assertEquals(42.0, value2.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(42.0, value2.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(2.0, value2.getDoubleMetric(\"sketchEstimatePostAggForSketchConstant\"), 0.01);\n    Assert.assertEquals(42.0, value2.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(2.0, value2.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(40.0, value2.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(\"product_1\", value2.getDimensionValue(\"product\"));\n\n    DimensionAndMetricValueExtractor value3 = Iterables.get(result.getValue().getValue(), 2);\n    Assert.assertEquals(42.0, value3.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(42.0, value3.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(2.0, value3.getDoubleMetric(\"sketchEstimatePostAggForSketchConstant\"), 0.01);\n    Assert.assertEquals(42.0, value3.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(2.0, value3.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(40.0, value3.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(\"product_2\", value3.getDimensionValue(\"product\"));\n  }\n","date":"2021-01-30 01:30:09","endLine":332,"groupId":"103496","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testTopNQueryWithSketchConstant","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ff/d166b867fe5020d09935d764cd1a7d9be5306f.src","preCode":"  public void testTopNQueryWithSketchConstant() throws Exception\n  {\n    AggregationTestHelper topNQueryAggregationTestHelper = AggregationTestHelper.createTopNQueryAggregationTestHelper(\n        sm.getJacksonModules(),\n        tempFolder\n    );\n\n    Sequence seq = topNQueryAggregationTestHelper.runQueryOnSegments(\n        ImmutableList.of(s1, s2),\n        readFileFromClasspathAsString(\"topn_query_sketch_const.json\")\n    );\n\n    Result<TopNResultValue> result = (Result<TopNResultValue>) Iterables.getOnlyElement(seq.toList());\n\n    Assert.assertEquals(DateTimes.of(\"2014-10-20T00:00:00.000Z\"), result.getTimestamp());\n\n    DimensionAndMetricValueExtractor value1 = Iterables.get(result.getValue().getValue(), 0);\n    Assert.assertEquals(38.0, value1.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(38.0, value1.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(2.0, value1.getDoubleMetric(\"sketchEstimatePostAggForSketchConstant\"), 0.01);\n    Assert.assertEquals(39.0, value1.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(1.0, value1.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(37.0, value1.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(\"product_3\", value1.getDimensionValue(\"product\"));\n\n    DimensionAndMetricValueExtractor value2 = Iterables.get(result.getValue().getValue(), 1);\n    Assert.assertEquals(42.0, value2.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(42.0, value2.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(2.0, value2.getDoubleMetric(\"sketchEstimatePostAggForSketchConstant\"), 0.01);\n    Assert.assertEquals(42.0, value2.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(2.0, value2.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(40.0, value2.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(\"product_1\", value2.getDimensionValue(\"product\"));\n\n    DimensionAndMetricValueExtractor value3 = Iterables.get(result.getValue().getValue(), 2);\n    Assert.assertEquals(42.0, value3.getDoubleMetric(\"sketch_count\"), 0.01);\n    Assert.assertEquals(42.0, value3.getDoubleMetric(\"sketchEstimatePostAgg\"), 0.01);\n    Assert.assertEquals(2.0, value3.getDoubleMetric(\"sketchEstimatePostAggForSketchConstant\"), 0.01);\n    Assert.assertEquals(42.0, value3.getDoubleMetric(\"sketchUnionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(2.0, value3.getDoubleMetric(\"sketchIntersectionPostAggEstimate\"), 0.01);\n    Assert.assertEquals(40.0, value3.getDoubleMetric(\"sketchAnotBPostAggEstimate\"), 0.01);\n    Assert.assertEquals(\"product_2\", value3.getDimensionValue(\"product\"));\n  }\n","realPath":"extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/theta/SketchAggregationWithSimpleDataTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"}],"commitId":"6c0c6e60b3604515571db062915767e9550b52cf","commitMessage":"@@@Vectorized theta sketch aggregator + rework of VectorColumnProcessorFactory. (#10767)\n\n* Vectorized theta sketch aggregator.\n\nAlso a refactoring of BufferAggregator and VectorAggregator such that\nthey share a common interface.  BaseBufferAggregator. This allows\nimplementing both in the same file with an abstract + dual subclass\nstructure.\n\n* Rework implementation to use composition instead of inheritance.\n\n* Rework things to enable working properly for both complex types and\nregular types.\n\nInvolved finally moving makeVectorProcessor from DimensionHandlerUtils\ninto ColumnProcessors and harmonizing the two things.\n\n* Add missing method.\n\n* Style and name changes.\n\n* Fix issues from inspections.\n\n* Fix style issue.","date":"2021-01-30 01:30:09","modifiedFileCount":"21","status":"M","submitter":"Gian Merlino"}]
