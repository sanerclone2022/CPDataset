[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  protected void setUp()\n  {\n    Map<String, String> script = scriptDoubleSum;\n\n    jsAggregator = new JavaScriptAggregator(\n        Collections.singletonList(selector),\n        JavaScriptAggregatorFactory.compileScript(\n            script.get(\"fnAggregate\"),\n            script.get(\"fnReset\"),\n            script.get(\"fnCombine\")\n        )\n    );\n\n    doubleAgg = new DoubleSumAggregator(selector);\n  }\n","date":"2018-08-31 00:56:26","endLine":68,"groupId":"6925","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/03/3778bbd34687cd0a3dafb305d5452acd8a5231.src","preCode":"  protected void setUp()\n  {\n    Map<String, String> script = scriptDoubleSum;\n\n    jsAggregator = new JavaScriptAggregator(\n        Collections.singletonList(selector),\n        JavaScriptAggregatorFactory.compileScript(\n            script.get(\"fnAggregate\"),\n            script.get(\"fnReset\"),\n            script.get(\"fnCombine\")\n        )\n    );\n\n    doubleAgg = new DoubleSumAggregator(selector);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/JavaScriptAggregatorBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public static void main(String... args)\n  {\n    final JavaScriptAggregatorBenchmark.LoopingDoubleColumnSelector selector = new JavaScriptAggregatorBenchmark.LoopingDoubleColumnSelector(\n        new double[]{42.12d, 9d});\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    Map<String, String> script = scriptDoubleSum;\n    JavaScriptAggregator aggRhino = new JavaScriptAggregator(\n        Collections.singletonList(selector),\n        JavaScriptAggregatorFactory.compileScript(\n            script.get(\"fnAggregate\"),\n            script.get(\"fnReset\"),\n            script.get(\"fnCombine\")\n        )\n    );\n\n    DoubleSumAggregator doubleAgg = new DoubleSumAggregator(selector);\n\n    \r\n    int i = 0;\n    long t = 0;\n    while (i < 10000) {\n      aggregate(selector, aggRhino);\n      ++i;\n    }\n    i = 0;\n    while (i < 10000) {\n      aggregate(selector, doubleAgg);\n      ++i;\n    }\n\n    t = System.currentTimeMillis();\n    i = 0;\n    while (i < 500000000) {\n      aggregate(selector, aggRhino);\n      ++i;\n    }\n    long t1 = System.currentTimeMillis() - t;\n    System.out.println(StringUtils.format(\"JavaScript aggregator == %,f: %d ms\", aggRhino.getFloat(), t1));\n\n    t = System.currentTimeMillis();\n    i = 0;\n    while (i < 500000000) {\n      aggregate(selector, doubleAgg);\n      ++i;\n    }\n    long t2 = System.currentTimeMillis() - t;\n    System.out.println(StringUtils.format(\"DoubleSum  aggregator == %,f: %d ms\", doubleAgg.getFloat(), t2));\n\n    System.out.println(StringUtils.format(\"JavaScript is %2.1fx slower\", (double) t1 / t2));\n  }\n","date":"2018-08-31 00:56:26","endLine":355,"groupId":"20230","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String...args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0e/276f772c0c0f1c6dc99c9e9b8a351fc73c3147.src","preCode":"  public static void main(String... args)\n  {\n    final JavaScriptAggregatorBenchmark.LoopingDoubleColumnSelector selector = new JavaScriptAggregatorBenchmark.LoopingDoubleColumnSelector(\n        new double[]{42.12d, 9d});\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    Map<String, String> script = scriptDoubleSum;\n    JavaScriptAggregator aggRhino = new JavaScriptAggregator(\n        Collections.singletonList(selector),\n        JavaScriptAggregatorFactory.compileScript(\n            script.get(\"fnAggregate\"),\n            script.get(\"fnReset\"),\n            script.get(\"fnCombine\")\n        )\n    );\n\n    DoubleSumAggregator doubleAgg = new DoubleSumAggregator(selector);\n\n    \r\n    int i = 0;\n    long t = 0;\n    while (i < 10000) {\n      aggregate(selector, aggRhino);\n      ++i;\n    }\n    i = 0;\n    while (i < 10000) {\n      aggregate(selector, doubleAgg);\n      ++i;\n    }\n\n    t = System.currentTimeMillis();\n    i = 0;\n    while (i < 500000000) {\n      aggregate(selector, aggRhino);\n      ++i;\n    }\n    long t1 = System.currentTimeMillis() - t;\n    System.out.println(StringUtils.format(\"JavaScript aggregator == %,f: %d ms\", aggRhino.getFloat(), t1));\n\n    t = System.currentTimeMillis();\n    i = 0;\n    while (i < 500000000) {\n      aggregate(selector, doubleAgg);\n      ++i;\n    }\n    long t2 = System.currentTimeMillis() - t;\n    System.out.println(StringUtils.format(\"DoubleSum  aggregator == %,f: %d ms\", doubleAgg.getFloat(), t2));\n\n    System.out.println(StringUtils.format(\"JavaScript is %2.1fx slower\", (double) t1 / t2));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/JavaScriptAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-11-07 06:38:08","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  protected void setUp()\n  {\n    Map<String, String> script = scriptDoubleSum;\n\n    jsAggregator = new JavaScriptAggregator(\n        Collections.singletonList(selector),\n        JavaScriptAggregatorFactory.compileScript(\n            script.get(\"fnAggregate\"),\n            script.get(\"fnReset\"),\n            script.get(\"fnCombine\")\n        )\n    );\n\n    doubleAgg = new DoubleSumAggregator(selector);\n  }\n","date":"2018-08-31 00:56:26","endLine":68,"groupId":"6925","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/03/3778bbd34687cd0a3dafb305d5452acd8a5231.src","preCode":"  protected void setUp()\n  {\n    Map<String, String> script = scriptDoubleSum;\n\n    jsAggregator = new JavaScriptAggregator(\n        Collections.singletonList(selector),\n        JavaScriptAggregatorFactory.compileScript(\n            script.get(\"fnAggregate\"),\n            script.get(\"fnReset\"),\n            script.get(\"fnCombine\")\n        )\n    );\n\n    doubleAgg = new DoubleSumAggregator(selector);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/JavaScriptAggregatorBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"},{"authorDate":"2018-11-07 06:38:08","commitOrder":2,"curCode":"  public static void main(String... args)\n  {\n    final JavaScriptAggregatorBenchmark.LoopingDoubleColumnSelector selector = new JavaScriptAggregatorBenchmark.LoopingDoubleColumnSelector(\n        new double[]{42.12d, 9d});\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    Map<String, String> script = scriptDoubleSum;\n    JavaScriptAggregator aggRhino = new JavaScriptAggregator(\n        Collections.singletonList(selector),\n        JavaScriptAggregatorFactory.compileScript(\n            script.get(\"fnAggregate\"),\n            script.get(\"fnReset\"),\n            script.get(\"fnCombine\")\n        )\n    );\n\n    DoubleSumAggregator doubleAgg = new DoubleSumAggregator(selector);\n\n    \r\n    int i = 0;\n    long t;\n    while (i < 10000) {\n      aggregate(selector, aggRhino);\n      ++i;\n    }\n    i = 0;\n    while (i < 10000) {\n      aggregate(selector, doubleAgg);\n      ++i;\n    }\n\n    t = System.currentTimeMillis();\n    i = 0;\n    while (i < 500000000) {\n      aggregate(selector, aggRhino);\n      ++i;\n    }\n    long t1 = System.currentTimeMillis() - t;\n    System.out.println(StringUtils.format(\"JavaScript aggregator == %,f: %d ms\", aggRhino.getFloat(), t1));\n\n    t = System.currentTimeMillis();\n    i = 0;\n    while (i < 500000000) {\n      aggregate(selector, doubleAgg);\n      ++i;\n    }\n    long t2 = System.currentTimeMillis() - t;\n    System.out.println(StringUtils.format(\"DoubleSum  aggregator == %,f: %d ms\", doubleAgg.getFloat(), t2));\n\n    System.out.println(StringUtils.format(\"JavaScript is %2.1fx slower\", (double) t1 / t2));\n  }\n","date":"2018-11-07 06:38:08","endLine":355,"groupId":"21879","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String...args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/7001b0ed33e0deb3695f4e0ad895ce50a23d53.src","preCode":"  public static void main(String... args)\n  {\n    final JavaScriptAggregatorBenchmark.LoopingDoubleColumnSelector selector = new JavaScriptAggregatorBenchmark.LoopingDoubleColumnSelector(\n        new double[]{42.12d, 9d});\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    Map<String, String> script = scriptDoubleSum;\n    JavaScriptAggregator aggRhino = new JavaScriptAggregator(\n        Collections.singletonList(selector),\n        JavaScriptAggregatorFactory.compileScript(\n            script.get(\"fnAggregate\"),\n            script.get(\"fnReset\"),\n            script.get(\"fnCombine\")\n        )\n    );\n\n    DoubleSumAggregator doubleAgg = new DoubleSumAggregator(selector);\n\n    \r\n    int i = 0;\n    long t = 0;\n    while (i < 10000) {\n      aggregate(selector, aggRhino);\n      ++i;\n    }\n    i = 0;\n    while (i < 10000) {\n      aggregate(selector, doubleAgg);\n      ++i;\n    }\n\n    t = System.currentTimeMillis();\n    i = 0;\n    while (i < 500000000) {\n      aggregate(selector, aggRhino);\n      ++i;\n    }\n    long t1 = System.currentTimeMillis() - t;\n    System.out.println(StringUtils.format(\"JavaScript aggregator == %,f: %d ms\", aggRhino.getFloat(), t1));\n\n    t = System.currentTimeMillis();\n    i = 0;\n    while (i < 500000000) {\n      aggregate(selector, doubleAgg);\n      ++i;\n    }\n    long t2 = System.currentTimeMillis() - t;\n    System.out.println(StringUtils.format(\"DoubleSum  aggregator == %,f: %d ms\", doubleAgg.getFloat(), t2));\n\n    System.out.println(StringUtils.format(\"JavaScript is %2.1fx slower\", (double) t1 / t2));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/JavaScriptAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"54351a5c75d8902d1d4c2eb2f6590bcf126348d4","commitMessage":"@@@Fix various bugs; Enable more IntelliJ inspections and update error-prone (#6490)\n\n* Fix various bugs; Enable more IntelliJ inspections and update error-prone\n\n* Fix NPE\n\n* Fix inspections\n\n* Remove unused imports\n","date":"2018-11-07 06:38:08","modifiedFileCount":"93","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  protected void setUp()\n  {\n    Map<String, String> script = SCRIPT_DOUBLE_SUM;\n\n    jsAggregator = new JavaScriptAggregator(\n        Collections.singletonList(selector),\n        JavaScriptAggregatorFactory.compileScript(\n            script.get(\"fnAggregate\"),\n            script.get(\"fnReset\"),\n            script.get(\"fnCombine\")\n        )\n    );\n\n    doubleAgg = new DoubleSumAggregator(selector);\n  }\n","date":"2019-08-23 18:13:54","endLine":68,"groupId":"106946","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7d/84d95e7bc1b5229fb964294a34599c25f6cca8.src","preCode":"  protected void setUp()\n  {\n    Map<String, String> script = scriptDoubleSum;\n\n    jsAggregator = new JavaScriptAggregator(\n        Collections.singletonList(selector),\n        JavaScriptAggregatorFactory.compileScript(\n            script.get(\"fnAggregate\"),\n            script.get(\"fnReset\"),\n            script.get(\"fnCombine\")\n        )\n    );\n\n    doubleAgg = new DoubleSumAggregator(selector);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/JavaScriptAggregatorBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public static void main(String... args)\n  {\n    final JavaScriptAggregatorBenchmark.LoopingDoubleColumnSelector selector = new JavaScriptAggregatorBenchmark.LoopingDoubleColumnSelector(\n        new double[]{42.12d, 9d});\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    Map<String, String> script = SCRIPT_DOUBLE_SUM;\n    JavaScriptAggregator aggRhino = new JavaScriptAggregator(\n        Collections.singletonList(selector),\n        JavaScriptAggregatorFactory.compileScript(\n            script.get(\"fnAggregate\"),\n            script.get(\"fnReset\"),\n            script.get(\"fnCombine\")\n        )\n    );\n\n    DoubleSumAggregator doubleAgg = new DoubleSumAggregator(selector);\n\n    \r\n    int i = 0;\n    long t;\n    while (i < 10000) {\n      aggregate(selector, aggRhino);\n      ++i;\n    }\n    i = 0;\n    while (i < 10000) {\n      aggregate(selector, doubleAgg);\n      ++i;\n    }\n\n    t = System.currentTimeMillis();\n    i = 0;\n    while (i < 500000000) {\n      aggregate(selector, aggRhino);\n      ++i;\n    }\n    long t1 = System.currentTimeMillis() - t;\n    System.out.println(StringUtils.format(\"JavaScript aggregator == %,f: %d ms\", aggRhino.getFloat(), t1));\n\n    t = System.currentTimeMillis();\n    i = 0;\n    while (i < 500000000) {\n      aggregate(selector, doubleAgg);\n      ++i;\n    }\n    long t2 = System.currentTimeMillis() - t;\n    System.out.println(StringUtils.format(\"DoubleSum  aggregator == %,f: %d ms\", doubleAgg.getFloat(), t2));\n\n    System.out.println(StringUtils.format(\"JavaScript is %2.1fx slower\", (double) t1 / t2));\n  }\n","date":"2019-08-23 18:13:54","endLine":355,"groupId":"106946","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"main","params":"(String...args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/8e64dcf21c2667d5c016abd952a66c3d935312.src","preCode":"  public static void main(String... args)\n  {\n    final JavaScriptAggregatorBenchmark.LoopingDoubleColumnSelector selector = new JavaScriptAggregatorBenchmark.LoopingDoubleColumnSelector(\n        new double[]{42.12d, 9d});\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    Map<String, String> script = scriptDoubleSum;\n    JavaScriptAggregator aggRhino = new JavaScriptAggregator(\n        Collections.singletonList(selector),\n        JavaScriptAggregatorFactory.compileScript(\n            script.get(\"fnAggregate\"),\n            script.get(\"fnReset\"),\n            script.get(\"fnCombine\")\n        )\n    );\n\n    DoubleSumAggregator doubleAgg = new DoubleSumAggregator(selector);\n\n    \r\n    int i = 0;\n    long t;\n    while (i < 10000) {\n      aggregate(selector, aggRhino);\n      ++i;\n    }\n    i = 0;\n    while (i < 10000) {\n      aggregate(selector, doubleAgg);\n      ++i;\n    }\n\n    t = System.currentTimeMillis();\n    i = 0;\n    while (i < 500000000) {\n      aggregate(selector, aggRhino);\n      ++i;\n    }\n    long t1 = System.currentTimeMillis() - t;\n    System.out.println(StringUtils.format(\"JavaScript aggregator == %,f: %d ms\", aggRhino.getFloat(), t1));\n\n    t = System.currentTimeMillis();\n    i = 0;\n    while (i < 500000000) {\n      aggregate(selector, doubleAgg);\n      ++i;\n    }\n    long t2 = System.currentTimeMillis() - t;\n    System.out.println(StringUtils.format(\"DoubleSum  aggregator == %,f: %d ms\", doubleAgg.getFloat(), t2));\n\n    System.out.println(StringUtils.format(\"JavaScript is %2.1fx slower\", (double) t1 / t2));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/JavaScriptAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
