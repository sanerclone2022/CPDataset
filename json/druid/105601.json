[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testCaseSensitivity() throws Exception\n  {\n    long timestamp = System.currentTimeMillis();\n    IncrementalIndex index = closerRule.closeLater(indexCreator.createIndex(defaultAggregatorFactories));\n\n    populateIndex(timestamp, index);\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), index.getDimensionNames());\n    Assert.assertEquals(2, index.size());\n\n    final Iterator<Row> rows = index.iterator();\n    Row row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"1\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"2\"), row.getDimension(\"dim2\"));\n\n    row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"3\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"4\"), row.getDimension(\"dim2\"));\n  }\n","date":"2018-08-31 00:56:26","endLine":286,"groupId":"19546","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCaseSensitivity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0a/affb972e2e714979d5b86cbf8870a134c30f74.src","preCode":"  public void testCaseSensitivity() throws Exception\n  {\n    long timestamp = System.currentTimeMillis();\n    IncrementalIndex index = closerRule.closeLater(indexCreator.createIndex(defaultAggregatorFactories));\n\n    populateIndex(timestamp, index);\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), index.getDimensionNames());\n    Assert.assertEquals(2, index.size());\n\n    final Iterator<Row> rows = index.iterator();\n    Row row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"1\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"2\"), row.getDimension(\"dim2\"));\n\n    row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"3\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"4\"), row.getDimension(\"dim2\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/IncrementalIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testFilteredAggregators() throws Exception\n  {\n    long timestamp = System.currentTimeMillis();\n    IncrementalIndex index = closerRule.closeLater(\n        indexCreator.createIndex(new AggregatorFactory[]{\n            new CountAggregatorFactory(\"count\"),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_selector_filtered\"),\n                new SelectorDimFilter(\"dim2\", \"2\", null)\n            ),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_bound_filtered\"),\n                new BoundDimFilter(\"dim2\", \"2\", \"3\", false, true, null, null, StringComparators.NUMERIC)\n            ),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_multivaldim_filtered\"),\n                new SelectorDimFilter(\"dim3\", \"b\", null)\n            ),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_numeric_filtered\"),\n                new SelectorDimFilter(\"met1\", \"11\", null)\n            )\n        })\n    );\n\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Arrays.asList(\"dim1\", \"dim2\", \"dim3\"),\n            ImmutableMap.of(\"dim1\", \"1\", \"dim2\", \"2\", \"dim3\", Lists.newArrayList(\"b\", \"a\"), \"met1\", 10)\n        )\n    );\n\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Arrays.asList(\"dim1\", \"dim2\", \"dim3\"),\n            ImmutableMap.of(\"dim1\", \"3\", \"dim2\", \"4\", \"dim3\", Lists.newArrayList(\"c\", \"d\"), \"met1\", 11)\n        )\n    );\n\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\", \"dim3\"), index.getDimensionNames());\n    Assert.assertEquals(\n        Arrays.asList(\n            \"count\",\n            \"count_selector_filtered\",\n            \"count_bound_filtered\",\n            \"count_multivaldim_filtered\",\n            \"count_numeric_filtered\"\n        ),\n        index.getMetricNames()\n    );\n    Assert.assertEquals(2, index.size());\n\n    final Iterator<Row> rows = index.iterator();\n    Row row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"1\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"2\"), row.getDimension(\"dim2\"));\n    Assert.assertEquals(Arrays.asList(\"a\", \"b\"), row.getDimension(\"dim3\"));\n    Assert.assertEquals(1L, row.getMetric(\"count\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_selector_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_bound_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_multivaldim_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_numeric_filtered\"));\n\n    row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"3\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"4\"), row.getDimension(\"dim2\"));\n    Assert.assertEquals(Arrays.asList(\"c\", \"d\"), row.getDimension(\"dim3\"));\n    Assert.assertEquals(1L, row.getMetric(\"count\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_selector_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_bound_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_multivaldim_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_numeric_filtered\"));\n  }\n","date":"2018-08-31 00:56:26","endLine":365,"groupId":"22021","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilteredAggregators","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0a/affb972e2e714979d5b86cbf8870a134c30f74.src","preCode":"  public void testFilteredAggregators() throws Exception\n  {\n    long timestamp = System.currentTimeMillis();\n    IncrementalIndex index = closerRule.closeLater(\n        indexCreator.createIndex(new AggregatorFactory[]{\n            new CountAggregatorFactory(\"count\"),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_selector_filtered\"),\n                new SelectorDimFilter(\"dim2\", \"2\", null)\n            ),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_bound_filtered\"),\n                new BoundDimFilter(\"dim2\", \"2\", \"3\", false, true, null, null, StringComparators.NUMERIC)\n            ),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_multivaldim_filtered\"),\n                new SelectorDimFilter(\"dim3\", \"b\", null)\n            ),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_numeric_filtered\"),\n                new SelectorDimFilter(\"met1\", \"11\", null)\n            )\n        })\n    );\n\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Arrays.asList(\"dim1\", \"dim2\", \"dim3\"),\n            ImmutableMap.of(\"dim1\", \"1\", \"dim2\", \"2\", \"dim3\", Lists.newArrayList(\"b\", \"a\"), \"met1\", 10)\n        )\n    );\n\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Arrays.asList(\"dim1\", \"dim2\", \"dim3\"),\n            ImmutableMap.of(\"dim1\", \"3\", \"dim2\", \"4\", \"dim3\", Lists.newArrayList(\"c\", \"d\"), \"met1\", 11)\n        )\n    );\n\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\", \"dim3\"), index.getDimensionNames());\n    Assert.assertEquals(\n        Arrays.asList(\n            \"count\",\n            \"count_selector_filtered\",\n            \"count_bound_filtered\",\n            \"count_multivaldim_filtered\",\n            \"count_numeric_filtered\"\n        ),\n        index.getMetricNames()\n    );\n    Assert.assertEquals(2, index.size());\n\n    final Iterator<Row> rows = index.iterator();\n    Row row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"1\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"2\"), row.getDimension(\"dim2\"));\n    Assert.assertEquals(Arrays.asList(\"a\", \"b\"), row.getDimension(\"dim3\"));\n    Assert.assertEquals(1L, row.getMetric(\"count\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_selector_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_bound_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_multivaldim_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_numeric_filtered\"));\n\n    row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"3\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"4\"), row.getDimension(\"dim2\"));\n    Assert.assertEquals(Arrays.asList(\"c\", \"d\"), row.getDimension(\"dim3\"));\n    Assert.assertEquals(1L, row.getMetric(\"count\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_selector_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_bound_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_multivaldim_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_numeric_filtered\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/IncrementalIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":2,"curCode":"  public void testCaseSensitivity() throws Exception\n  {\n    long timestamp = System.currentTimeMillis();\n    IncrementalIndex index = closerRule.closeLater(indexCreator.createIndex(DEFAULT_AGGREGATOR_FACTORIES));\n\n    populateIndex(timestamp, index);\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), index.getDimensionNames());\n    Assert.assertEquals(2, index.size());\n\n    final Iterator<Row> rows = index.iterator();\n    Row row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"1\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"2\"), row.getDimension(\"dim2\"));\n\n    row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"3\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"4\"), row.getDimension(\"dim2\"));\n  }\n","date":"2019-08-23 18:13:54","endLine":283,"groupId":"19546","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCaseSensitivity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b2/54811094b0f25886a0bbcbc9a540713c437194.src","preCode":"  public void testCaseSensitivity() throws Exception\n  {\n    long timestamp = System.currentTimeMillis();\n    IncrementalIndex index = closerRule.closeLater(indexCreator.createIndex(defaultAggregatorFactories));\n\n    populateIndex(timestamp, index);\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), index.getDimensionNames());\n    Assert.assertEquals(2, index.size());\n\n    final Iterator<Row> rows = index.iterator();\n    Row row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"1\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"2\"), row.getDimension(\"dim2\"));\n\n    row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"3\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"4\"), row.getDimension(\"dim2\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/IncrementalIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testFilteredAggregators() throws Exception\n  {\n    long timestamp = System.currentTimeMillis();\n    IncrementalIndex index = closerRule.closeLater(\n        indexCreator.createIndex(new AggregatorFactory[]{\n            new CountAggregatorFactory(\"count\"),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_selector_filtered\"),\n                new SelectorDimFilter(\"dim2\", \"2\", null)\n            ),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_bound_filtered\"),\n                new BoundDimFilter(\"dim2\", \"2\", \"3\", false, true, null, null, StringComparators.NUMERIC)\n            ),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_multivaldim_filtered\"),\n                new SelectorDimFilter(\"dim3\", \"b\", null)\n            ),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_numeric_filtered\"),\n                new SelectorDimFilter(\"met1\", \"11\", null)\n            )\n        })\n    );\n\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Arrays.asList(\"dim1\", \"dim2\", \"dim3\"),\n            ImmutableMap.of(\"dim1\", \"1\", \"dim2\", \"2\", \"dim3\", Lists.newArrayList(\"b\", \"a\"), \"met1\", 10)\n        )\n    );\n\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Arrays.asList(\"dim1\", \"dim2\", \"dim3\"),\n            ImmutableMap.of(\"dim1\", \"3\", \"dim2\", \"4\", \"dim3\", Lists.newArrayList(\"c\", \"d\"), \"met1\", 11)\n        )\n    );\n\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\", \"dim3\"), index.getDimensionNames());\n    Assert.assertEquals(\n        Arrays.asList(\n            \"count\",\n            \"count_selector_filtered\",\n            \"count_bound_filtered\",\n            \"count_multivaldim_filtered\",\n            \"count_numeric_filtered\"\n        ),\n        index.getMetricNames()\n    );\n    Assert.assertEquals(2, index.size());\n\n    final Iterator<Row> rows = index.iterator();\n    Row row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"1\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"2\"), row.getDimension(\"dim2\"));\n    Assert.assertEquals(Arrays.asList(\"a\", \"b\"), row.getDimension(\"dim3\"));\n    Assert.assertEquals(1L, row.getMetric(\"count\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_selector_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_bound_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_multivaldim_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_numeric_filtered\"));\n\n    row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"3\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"4\"), row.getDimension(\"dim2\"));\n    Assert.assertEquals(Arrays.asList(\"c\", \"d\"), row.getDimension(\"dim3\"));\n    Assert.assertEquals(1L, row.getMetric(\"count\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_selector_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_bound_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_multivaldim_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_numeric_filtered\"));\n  }\n","date":"2018-08-31 00:56:26","endLine":365,"groupId":"22021","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilteredAggregators","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0a/affb972e2e714979d5b86cbf8870a134c30f74.src","preCode":"  public void testFilteredAggregators() throws Exception\n  {\n    long timestamp = System.currentTimeMillis();\n    IncrementalIndex index = closerRule.closeLater(\n        indexCreator.createIndex(new AggregatorFactory[]{\n            new CountAggregatorFactory(\"count\"),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_selector_filtered\"),\n                new SelectorDimFilter(\"dim2\", \"2\", null)\n            ),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_bound_filtered\"),\n                new BoundDimFilter(\"dim2\", \"2\", \"3\", false, true, null, null, StringComparators.NUMERIC)\n            ),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_multivaldim_filtered\"),\n                new SelectorDimFilter(\"dim3\", \"b\", null)\n            ),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_numeric_filtered\"),\n                new SelectorDimFilter(\"met1\", \"11\", null)\n            )\n        })\n    );\n\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Arrays.asList(\"dim1\", \"dim2\", \"dim3\"),\n            ImmutableMap.of(\"dim1\", \"1\", \"dim2\", \"2\", \"dim3\", Lists.newArrayList(\"b\", \"a\"), \"met1\", 10)\n        )\n    );\n\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Arrays.asList(\"dim1\", \"dim2\", \"dim3\"),\n            ImmutableMap.of(\"dim1\", \"3\", \"dim2\", \"4\", \"dim3\", Lists.newArrayList(\"c\", \"d\"), \"met1\", 11)\n        )\n    );\n\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\", \"dim3\"), index.getDimensionNames());\n    Assert.assertEquals(\n        Arrays.asList(\n            \"count\",\n            \"count_selector_filtered\",\n            \"count_bound_filtered\",\n            \"count_multivaldim_filtered\",\n            \"count_numeric_filtered\"\n        ),\n        index.getMetricNames()\n    );\n    Assert.assertEquals(2, index.size());\n\n    final Iterator<Row> rows = index.iterator();\n    Row row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"1\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"2\"), row.getDimension(\"dim2\"));\n    Assert.assertEquals(Arrays.asList(\"a\", \"b\"), row.getDimension(\"dim3\"));\n    Assert.assertEquals(1L, row.getMetric(\"count\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_selector_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_bound_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_multivaldim_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_numeric_filtered\"));\n\n    row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"3\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"4\"), row.getDimension(\"dim2\"));\n    Assert.assertEquals(Arrays.asList(\"c\", \"d\"), row.getDimension(\"dim3\"));\n    Assert.assertEquals(1L, row.getMetric(\"count\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_selector_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_bound_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_multivaldim_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_numeric_filtered\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/IncrementalIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"N"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"},{"authorTime":"2021-01-08 14:18:47","codes":[{"authorDate":"2021-01-08 14:18:47","commitOrder":3,"curCode":"  public void testCaseSensitivity() throws Exception\n  {\n    long timestamp = System.currentTimeMillis();\n    IncrementalIndex<?> index = indexCreator.createIndex((Object) DEFAULT_AGGREGATOR_FACTORIES);\n\n    populateIndex(timestamp, index);\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), index.getDimensionNames());\n    Assert.assertEquals(2, index.size());\n\n    final Iterator<Row> rows = index.iterator();\n    Row row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"1\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"2\"), row.getDimension(\"dim2\"));\n\n    row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"3\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"4\"), row.getDimension(\"dim2\"));\n  }\n","date":"2021-01-08 14:18:47","endLine":236,"groupId":"105601","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testCaseSensitivity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9b/5d2f3b12025e2c29d3090eb493cdae1cdd518b.src","preCode":"  public void testCaseSensitivity() throws Exception\n  {\n    long timestamp = System.currentTimeMillis();\n    IncrementalIndex index = closerRule.closeLater(indexCreator.createIndex(DEFAULT_AGGREGATOR_FACTORIES));\n\n    populateIndex(timestamp, index);\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), index.getDimensionNames());\n    Assert.assertEquals(2, index.size());\n\n    final Iterator<Row> rows = index.iterator();\n    Row row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"1\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"2\"), row.getDimension(\"dim2\"));\n\n    row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"3\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"4\"), row.getDimension(\"dim2\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/IncrementalIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"},{"authorDate":"2021-01-08 14:18:47","commitOrder":3,"curCode":"  public void testFilteredAggregators() throws Exception\n  {\n    long timestamp = System.currentTimeMillis();\n    IncrementalIndex<?> index = indexCreator.createIndex((Object) new AggregatorFactory[]{\n        new CountAggregatorFactory(\"count\"),\n        new FilteredAggregatorFactory(\n            new CountAggregatorFactory(\"count_selector_filtered\"),\n            new SelectorDimFilter(\"dim2\", \"2\", null)\n        ),\n        new FilteredAggregatorFactory(\n            new CountAggregatorFactory(\"count_bound_filtered\"),\n            new BoundDimFilter(\"dim2\", \"2\", \"3\", false, true, null, null, StringComparators.NUMERIC)\n        ),\n        new FilteredAggregatorFactory(\n            new CountAggregatorFactory(\"count_multivaldim_filtered\"),\n            new SelectorDimFilter(\"dim3\", \"b\", null)\n        ),\n        new FilteredAggregatorFactory(\n            new CountAggregatorFactory(\"count_numeric_filtered\"),\n            new SelectorDimFilter(\"met1\", \"11\", null)\n        )\n    });\n\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Arrays.asList(\"dim1\", \"dim2\", \"dim3\"),\n            ImmutableMap.of(\"dim1\", \"1\", \"dim2\", \"2\", \"dim3\", Lists.newArrayList(\"b\", \"a\"), \"met1\", 10)\n        )\n    );\n\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Arrays.asList(\"dim1\", \"dim2\", \"dim3\"),\n            ImmutableMap.of(\"dim1\", \"3\", \"dim2\", \"4\", \"dim3\", Lists.newArrayList(\"c\", \"d\"), \"met1\", 11)\n        )\n    );\n\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\", \"dim3\"), index.getDimensionNames());\n    Assert.assertEquals(\n        Arrays.asList(\n            \"count\",\n            \"count_selector_filtered\",\n            \"count_bound_filtered\",\n            \"count_multivaldim_filtered\",\n            \"count_numeric_filtered\"\n        ),\n        index.getMetricNames()\n    );\n    Assert.assertEquals(2, index.size());\n\n    final Iterator<Row> rows = index.iterator();\n    Row row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"1\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"2\"), row.getDimension(\"dim2\"));\n    Assert.assertEquals(Arrays.asList(\"a\", \"b\"), row.getDimension(\"dim3\"));\n    Assert.assertEquals(1L, row.getMetric(\"count\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_selector_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_bound_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_multivaldim_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_numeric_filtered\"));\n\n    row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"3\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"4\"), row.getDimension(\"dim2\"));\n    Assert.assertEquals(Arrays.asList(\"c\", \"d\"), row.getDimension(\"dim3\"));\n    Assert.assertEquals(1L, row.getMetric(\"count\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_selector_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_bound_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_multivaldim_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_numeric_filtered\"));\n  }\n","date":"2021-01-08 14:18:47","endLine":313,"groupId":"105601","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testFilteredAggregators","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9b/5d2f3b12025e2c29d3090eb493cdae1cdd518b.src","preCode":"  public void testFilteredAggregators() throws Exception\n  {\n    long timestamp = System.currentTimeMillis();\n    IncrementalIndex index = closerRule.closeLater(\n        indexCreator.createIndex(new AggregatorFactory[]{\n            new CountAggregatorFactory(\"count\"),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_selector_filtered\"),\n                new SelectorDimFilter(\"dim2\", \"2\", null)\n            ),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_bound_filtered\"),\n                new BoundDimFilter(\"dim2\", \"2\", \"3\", false, true, null, null, StringComparators.NUMERIC)\n            ),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_multivaldim_filtered\"),\n                new SelectorDimFilter(\"dim3\", \"b\", null)\n            ),\n            new FilteredAggregatorFactory(\n                new CountAggregatorFactory(\"count_numeric_filtered\"),\n                new SelectorDimFilter(\"met1\", \"11\", null)\n            )\n        })\n    );\n\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Arrays.asList(\"dim1\", \"dim2\", \"dim3\"),\n            ImmutableMap.of(\"dim1\", \"1\", \"dim2\", \"2\", \"dim3\", Lists.newArrayList(\"b\", \"a\"), \"met1\", 10)\n        )\n    );\n\n    index.add(\n        new MapBasedInputRow(\n            timestamp,\n            Arrays.asList(\"dim1\", \"dim2\", \"dim3\"),\n            ImmutableMap.of(\"dim1\", \"3\", \"dim2\", \"4\", \"dim3\", Lists.newArrayList(\"c\", \"d\"), \"met1\", 11)\n        )\n    );\n\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\", \"dim3\"), index.getDimensionNames());\n    Assert.assertEquals(\n        Arrays.asList(\n            \"count\",\n            \"count_selector_filtered\",\n            \"count_bound_filtered\",\n            \"count_multivaldim_filtered\",\n            \"count_numeric_filtered\"\n        ),\n        index.getMetricNames()\n    );\n    Assert.assertEquals(2, index.size());\n\n    final Iterator<Row> rows = index.iterator();\n    Row row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"1\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"2\"), row.getDimension(\"dim2\"));\n    Assert.assertEquals(Arrays.asList(\"a\", \"b\"), row.getDimension(\"dim3\"));\n    Assert.assertEquals(1L, row.getMetric(\"count\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_selector_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_bound_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_multivaldim_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_numeric_filtered\"));\n\n    row = rows.next();\n    Assert.assertEquals(timestamp, row.getTimestampFromEpoch());\n    Assert.assertEquals(Collections.singletonList(\"3\"), row.getDimension(\"dim1\"));\n    Assert.assertEquals(Collections.singletonList(\"4\"), row.getDimension(\"dim2\"));\n    Assert.assertEquals(Arrays.asList(\"c\", \"d\"), row.getDimension(\"dim3\"));\n    Assert.assertEquals(1L, row.getMetric(\"count\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_selector_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_bound_filtered\"));\n    Assert.assertEquals(0L, row.getMetric(\"count_multivaldim_filtered\"));\n    Assert.assertEquals(1L, row.getMetric(\"count_numeric_filtered\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/IncrementalIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"}],"commitId":"08ab82f55ca856d60dfe1088c1c0393428b0bb6d","commitMessage":"@@@IncrementalIndex Tests and Benchmarks Parametrization (#10593)\n\n* Remove redundant IncrementalIndex.Builder\n\n* Parametrize incremental index tests and benchmarks\n\n- Reveal and fix a bug in OffheapIncrementalIndex\n\n* Fix forbiddenapis error: Forbidden method invocation: java.lang.String#format(java.lang.String. java.lang.Object[]) [Uses default locale]\n\n* Fix Intellij errors: declared exception is never thrown\n\n* Add documentation and validate before closing objects on tearDown.\n\n* Add documentation to OffheapIncrementalIndexTestSpec\n\n* Doc corrections and minor changes.\n\n* Add logging for generated rows.\n\n* Refactor new tests/benchmarks.\n\n* Improve IncrementalIndexCreator documentation\n\n* Add required tests for DataGenerator\n\n* Revert \"rollupOpportunity\" to be a string","date":"2021-01-08 14:18:47","modifiedFileCount":"62","status":"M","submitter":"Liran Funaro"}]
