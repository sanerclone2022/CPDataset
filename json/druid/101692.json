[{"authorTime":"2020-02-20 05:09:20","codes":[{"authorDate":"2019-07-13 03:54:07","commitOrder":3,"curCode":"  public void testNvlColumns() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT NVL(dim2, dim1), COUNT(*) FROM druid.foo GROUP BY NVL(dim2, dim1)\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",\\\"dim1\\\")\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"v0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 2L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 2L}\n        )\n    );\n  }\n","date":"2019-07-13 03:54:07","endLine":8169,"groupId":"3588","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNvlColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/00/9c8ec103bf43a4fe3c4756281f89540f662955.src","preCode":"  public void testNvlColumns() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT NVL(dim2, dim1), COUNT(*) FROM druid.foo GROUP BY NVL(dim2, dim1)\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",\\\"dim1\\\")\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"v0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 2L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 2L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":8131,"status":"NB"},{"authorDate":"2020-02-20 05:09:20","commitOrder":3,"curCode":"  public void testNullParameter() throws Exception\n  {\n    \r\n    \r\n    cannotVectorize();\n\n    \r\n    testQuery(\n        \"SELECT COALESCE(dim2, ?, ?), COUNT(*) FROM druid.foo GROUP BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'parameter')\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"v0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 3L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 2L}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.VARCHAR, \"parameter\"), new SqlParameter(SqlType.VARCHAR, null))\n    );\n\n    \r\n    testQuery(\n        \"SELECT COALESCE(dim2, ?, ?), COUNT(*) FROM druid.foo GROUP BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'parameter')\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"v0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 3L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 2L}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.VARCHAR, null), new SqlParameter(SqlType.VARCHAR, \"parameter\"))\n    );\n  }\n","date":"2020-02-20 05:09:20","endLine":693,"groupId":"6625","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNullParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/98/263cb2dea42a4594bc3fb6d2c4a1b42a059bb6.src","preCode":"  public void testNullParameter() throws Exception\n  {\n    \r\n    \r\n    cannotVectorize();\n\n    \r\n    testQuery(\n        \"SELECT COALESCE(dim2, ?, ?), COUNT(*) FROM druid.foo GROUP BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'parameter')\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"v0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 3L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 2L}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.VARCHAR, \"parameter\"), new SqlParameter(SqlType.VARCHAR, null))\n    );\n\n    \r\n    testQuery(\n        \"SELECT COALESCE(dim2, ?, ?), COUNT(*) FROM druid.foo GROUP BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'parameter')\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"v0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 3L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 2L}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.VARCHAR, null), new SqlParameter(SqlType.VARCHAR, \"parameter\"))\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteParameterQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":618,"status":"B"}],"commitId":"b408a6d774e43e574bf8092584fae76d582cfd8f","commitMessage":"@@@sql support for dynamic parameters (#6974)\n\n* sql support for dynamic parameters\n\n* fixup\n\n* javadocs\n\n* fixup from merge\n\n* formatting\n\n* fixes\n\n* fix it\n\n* doc fix\n\n* remove druid fallback self-join parameterized test\n\n* unused imports\n\n* ignore test for now\n\n* fix imports\n\n* fixup\n\n* fix merge\n\n* merge fixup\n\n* fix test that cannot vectorize\n\n* fixup and more better\n\n* dependency thingo\n\n* fix docs\n\n* tweaks\n\n* fix docs\n\n* spelling\n\n* unused imports after merge\n\n* review stuffs\n\n* add comment\n\n* add ignore text\n\n* review stuffs\n","date":"2020-02-20 05:09:20","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-03-10 08:48:29","codes":[{"authorDate":"2020-03-10 08:48:29","commitOrder":4,"curCode":"  public void testNvlColumns() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT NVL(dim2, dim1), COUNT(*) FROM druid.foo GROUP BY NVL(dim2, dim1)\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",\\\"dim1\\\")\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 2L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 2L}\n        )\n    );\n  }\n","date":"2020-03-10 08:48:29","endLine":11466,"groupId":"3588","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNvlColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/76/cd55b72e7df3dc0e964e31bd267448f02f3a1f.src","preCode":"  public void testNvlColumns() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT NVL(dim2, dim1), COUNT(*) FROM druid.foo GROUP BY NVL(dim2, dim1)\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",\\\"dim1\\\")\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"v0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 2L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 2L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":11428,"status":"M"},{"authorDate":"2020-03-10 08:48:29","commitOrder":4,"curCode":"  public void testNullParameter() throws Exception\n  {\n    \r\n    \r\n    cannotVectorize();\n\n    \r\n    testQuery(\n        \"SELECT COALESCE(dim2, ?, ?), COUNT(*) FROM druid.foo GROUP BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'parameter')\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 3L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 2L}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.VARCHAR, \"parameter\"), new SqlParameter(SqlType.VARCHAR, null))\n    );\n\n    \r\n    testQuery(\n        \"SELECT COALESCE(dim2, ?, ?), COUNT(*) FROM druid.foo GROUP BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'parameter')\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"v0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 3L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 2L}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.VARCHAR, null), new SqlParameter(SqlType.VARCHAR, \"parameter\"))\n    );\n  }\n","date":"2020-03-10 08:48:29","endLine":693,"groupId":"6625","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNullParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/87/e8d2947cbd6a3fe01f2f837405ef0168951a7b.src","preCode":"  public void testNullParameter() throws Exception\n  {\n    \r\n    \r\n    cannotVectorize();\n\n    \r\n    testQuery(\n        \"SELECT COALESCE(dim2, ?, ?), COUNT(*) FROM druid.foo GROUP BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'parameter')\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"v0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 3L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 2L}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.VARCHAR, \"parameter\"), new SqlParameter(SqlType.VARCHAR, null))\n    );\n\n    \r\n    testQuery(\n        \"SELECT COALESCE(dim2, ?, ?), COUNT(*) FROM druid.foo GROUP BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'parameter')\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"v0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 3L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 2L}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.VARCHAR, null), new SqlParameter(SqlType.VARCHAR, \"parameter\"))\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteParameterQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":618,"status":"M"}],"commitId":"f8b1f2f7f3fe6d49cbb5f19bfe6196a5b716b3ef","commitMessage":"@@@fix issue when distinct grouping dimensions are optimized into the same virtual column expression (#9429)\n\n* fix issue when distinct grouping dimensions are optimized into the same virtual column expression\n\n* fix tests\n\n* more better\n\n* fixes","date":"2020-03-10 08:48:29","modifiedFileCount":"8","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-07-07 02:20:49","codes":[{"authorDate":"2020-03-10 08:48:29","commitOrder":5,"curCode":"  public void testNvlColumns() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT NVL(dim2, dim1), COUNT(*) FROM druid.foo GROUP BY NVL(dim2, dim1)\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",\\\"dim1\\\")\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 2L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 2L}\n        )\n    );\n  }\n","date":"2020-03-10 08:48:29","endLine":11466,"groupId":"101692","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNvlColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/76/cd55b72e7df3dc0e964e31bd267448f02f3a1f.src","preCode":"  public void testNvlColumns() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT NVL(dim2, dim1), COUNT(*) FROM druid.foo GROUP BY NVL(dim2, dim1)\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",\\\"dim1\\\")\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"2\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 2L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"10.1\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 2L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":11428,"status":"N"},{"authorDate":"2021-07-07 02:20:49","commitOrder":5,"curCode":"  public void testNullParameter() throws Exception\n  {\n    cannotVectorize();\n    \r\n    \r\n\n    \r\n    testQuery(\n        \"SELECT COALESCE(dim2, ?, ?), COUNT(*) FROM druid.foo GROUP BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'parameter')\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 3L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 2L}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.VARCHAR, \"parameter\"), new SqlParameter(SqlType.VARCHAR, null))\n    );\n\n    \r\n    testQuery(\n        \"SELECT COALESCE(dim2, ?, ?), COUNT(*) FROM druid.foo GROUP BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'parameter')\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 3L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 2L}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.VARCHAR, null), new SqlParameter(SqlType.VARCHAR, \"parameter\"))\n    );\n  }\n","date":"2021-07-07 02:20:49","endLine":726,"groupId":"101692","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testNullParameter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f5/512b5e8fb7f9fb23015e6e8bbc6dbe16daf5b5.src","preCode":"  public void testNullParameter() throws Exception\n  {\n    \r\n    \r\n    cannotVectorize();\n\n    \r\n    testQuery(\n        \"SELECT COALESCE(dim2, ?, ?), COUNT(*) FROM druid.foo GROUP BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'parameter')\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 3L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 2L}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.VARCHAR, \"parameter\"), new SqlParameter(SqlType.VARCHAR, null))\n    );\n\n    \r\n    testQuery(\n        \"SELECT COALESCE(dim2, ?, ?), COUNT(*) FROM druid.foo GROUP BY 1\\n\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'parameter')\",\n                                ValueType.STRING\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"v0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 3L}\n        ) :\n        ImmutableList.of(\n            new Object[]{\"\", 1L},\n            new Object[]{\"a\", 2L},\n            new Object[]{\"abc\", 1L},\n            new Object[]{\"parameter\", 2L}\n        ),\n        ImmutableList.of(new SqlParameter(SqlType.VARCHAR, null), new SqlParameter(SqlType.VARCHAR, \"parameter\"))\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteParameterQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":651,"status":"M"}],"commitId":"17efa6f5569d21fffdbb263d6e12db5982d7529b","commitMessage":"@@@add single input string expression dimension vector selector and better expression planning (#11213)\n\n* add single input string expression dimension vector selector and better expression planning\n\n* better\n\n* fixes\n\n* oops\n\n* rework how vector processor factories choose string processors.  fix to be less aggressive about vectorizing\n\n* oops\n\n* javadocs.  renaming\n\n* more javadocs\n\n* benchmarks\n\n* use string expression vector processor with vector size 1 instead of expr.eval\n\n* better logging\n\n* javadocs.  surprising number of the the\n\n* more\n\n* simplify","date":"2021-07-07 02:20:49","modifiedFileCount":"30","status":"M","submitter":"Clint Wylie"}]
