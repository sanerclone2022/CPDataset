[{"authorTime":"2020-02-14 06:58:32","codes":[{"authorDate":"2020-02-14 06:58:32","commitOrder":1,"curCode":"  public Parser getFieldDiscoveryParser()\n  {\n    List<JSONPathFieldSpec> fields = new ArrayList<>();\n    JSONPathSpec flattenSpec = new JSONPathSpec(true, fields);\n\n    JSONParseSpec spec = new JSONParseSpec(\n        new TimestampSpec(\"ts\", \"iso\", null),\n        new DimensionsSpec(null, null, null),\n        flattenSpec,\n        null\n    );\n\n    return spec.makeParser();\n  }\n","date":"2020-02-14 06:58:32","endLine":78,"groupId":"12278","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getFieldDiscoveryParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6c/0ec31d64a613ffe4fc82ad9b5beaa3d0b071f2.src","preCode":"  public Parser getFieldDiscoveryParser()\n  {\n    List<JSONPathFieldSpec> fields = new ArrayList<>();\n    JSONPathSpec flattenSpec = new JSONPathSpec(true, fields);\n\n    JSONParseSpec spec = new JSONParseSpec(\n        new TimestampSpec(\"ts\", \"iso\", null),\n        new DimensionsSpec(null, null, null),\n        flattenSpec,\n        null\n    );\n\n    return spec.makeParser();\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/FlattenJSONBenchmarkUtil.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2020-02-14 06:58:32","commitOrder":1,"curCode":"  public Parser getNestedParser()\n  {\n    List<JSONPathFieldSpec> fields = new ArrayList<>();\n    fields.add(JSONPathFieldSpec.createRootField(\"ts\"));\n\n    fields.add(JSONPathFieldSpec.createRootField(\"d1\"));\n    \r\n    fields.add(JSONPathFieldSpec.createNestedField(\"e1.d1\", \"$.e1.d1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e1.d2\", \"$.e1.d2\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d3\", \"$.e2.d3\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d4\", \"$.e2.d4\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d5\", \"$.e2.d5\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d6\", \"$.e2.d6\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.ad1[0]\", \"$.e2.ad1[0]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.ad1[1]\", \"$.e2.ad1[1]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.ad1[2]\", \"$.e2.ad1[2]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"ae1[0].d1\", \"$.ae1[0].d1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"ae1[1].d1\", \"$.ae1[1].d1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"ae1[2].e1.d2\", \"$.ae1[2].e1.d2\"));\n\n    fields.add(JSONPathFieldSpec.createRootField(\"m3\"));\n    \r\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m1\", \"$.e3.m1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m2\", \"$.e3.m2\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m3\", \"$.e3.m3\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m4\", \"$.e3.m4\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[0]\", \"$.e3.am1[0]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[1]\", \"$.e3.am1[1]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[2]\", \"$.e3.am1[2]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[3]\", \"$.e3.am1[3]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e4.e4.m4\", \"$.e4.e4.m4\"));\n\n    JSONPathSpec flattenSpec = new JSONPathSpec(true, fields);\n    JSONParseSpec spec = new JSONParseSpec(\n        new TimestampSpec(\"ts\", \"iso\", null),\n        new DimensionsSpec(null, null, null),\n        flattenSpec,\n        null\n    );\n\n    return spec.makeParser();\n  }\n","date":"2020-02-14 06:58:32","endLine":121,"groupId":"12278","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getNestedParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6c/0ec31d64a613ffe4fc82ad9b5beaa3d0b071f2.src","preCode":"  public Parser getNestedParser()\n  {\n    List<JSONPathFieldSpec> fields = new ArrayList<>();\n    fields.add(JSONPathFieldSpec.createRootField(\"ts\"));\n\n    fields.add(JSONPathFieldSpec.createRootField(\"d1\"));\n    \r\n    fields.add(JSONPathFieldSpec.createNestedField(\"e1.d1\", \"$.e1.d1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e1.d2\", \"$.e1.d2\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d3\", \"$.e2.d3\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d4\", \"$.e2.d4\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d5\", \"$.e2.d5\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d6\", \"$.e2.d6\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.ad1[0]\", \"$.e2.ad1[0]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.ad1[1]\", \"$.e2.ad1[1]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.ad1[2]\", \"$.e2.ad1[2]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"ae1[0].d1\", \"$.ae1[0].d1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"ae1[1].d1\", \"$.ae1[1].d1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"ae1[2].e1.d2\", \"$.ae1[2].e1.d2\"));\n\n    fields.add(JSONPathFieldSpec.createRootField(\"m3\"));\n    \r\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m1\", \"$.e3.m1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m2\", \"$.e3.m2\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m3\", \"$.e3.m3\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m4\", \"$.e3.m4\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[0]\", \"$.e3.am1[0]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[1]\", \"$.e3.am1[1]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[2]\", \"$.e3.am1[2]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[3]\", \"$.e3.am1[3]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e4.e4.m4\", \"$.e4.e4.m4\"));\n\n    JSONPathSpec flattenSpec = new JSONPathSpec(true, fields);\n    JSONParseSpec spec = new JSONParseSpec(\n        new TimestampSpec(\"ts\", \"iso\", null),\n        new DimensionsSpec(null, null, null),\n        flattenSpec,\n        null\n    );\n\n    return spec.makeParser();\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/FlattenJSONBenchmarkUtil.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"}],"commitId":"e9aebd994aa0e243446b4f76d819a503401104e3","commitMessage":"@@@Fix for building in Eclipse & VS Code. (#7481)\n\nFixes #6866\nReverse dependencies from /main/ to /test/\nAdd generated-test-sources to source path for Eclipse","date":"2020-02-14 06:58:32","modifiedFileCount":"1","status":"B","submitter":"Adam Peck"},{"authorTime":"2020-05-09 12:53:39","codes":[{"authorDate":"2020-05-09 12:53:39","commitOrder":2,"curCode":"  public Parser getFieldDiscoveryParser()\n  {\n    List<JSONPathFieldSpec> fields = new ArrayList<>();\n    JSONPathSpec flattenSpec = new JSONPathSpec(true, fields);\n\n    JSONParseSpec spec = new JSONParseSpec(\n        new TimestampSpec(\"ts\", \"iso\", null),\n        new DimensionsSpec(null, null, null),\n        flattenSpec,\n        null,\n        null\n    );\n\n    return spec.makeParser();\n  }\n","date":"2020-05-09 12:53:39","endLine":80,"groupId":"101367","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getFieldDiscoveryParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/55/7dca72effcae6f3de4ac873f527c36b1922056.src","preCode":"  public Parser getFieldDiscoveryParser()\n  {\n    List<JSONPathFieldSpec> fields = new ArrayList<>();\n    JSONPathSpec flattenSpec = new JSONPathSpec(true, fields);\n\n    JSONParseSpec spec = new JSONParseSpec(\n        new TimestampSpec(\"ts\", \"iso\", null),\n        new DimensionsSpec(null, null, null),\n        flattenSpec,\n        null\n    );\n\n    return spec.makeParser();\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/FlattenJSONBenchmarkUtil.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-05-09 12:53:39","commitOrder":2,"curCode":"  public Parser getNestedParser()\n  {\n    List<JSONPathFieldSpec> fields = new ArrayList<>();\n    fields.add(JSONPathFieldSpec.createRootField(\"ts\"));\n\n    fields.add(JSONPathFieldSpec.createRootField(\"d1\"));\n    \r\n    fields.add(JSONPathFieldSpec.createNestedField(\"e1.d1\", \"$.e1.d1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e1.d2\", \"$.e1.d2\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d3\", \"$.e2.d3\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d4\", \"$.e2.d4\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d5\", \"$.e2.d5\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d6\", \"$.e2.d6\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.ad1[0]\", \"$.e2.ad1[0]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.ad1[1]\", \"$.e2.ad1[1]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.ad1[2]\", \"$.e2.ad1[2]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"ae1[0].d1\", \"$.ae1[0].d1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"ae1[1].d1\", \"$.ae1[1].d1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"ae1[2].e1.d2\", \"$.ae1[2].e1.d2\"));\n\n    fields.add(JSONPathFieldSpec.createRootField(\"m3\"));\n    \r\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m1\", \"$.e3.m1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m2\", \"$.e3.m2\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m3\", \"$.e3.m3\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m4\", \"$.e3.m4\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[0]\", \"$.e3.am1[0]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[1]\", \"$.e3.am1[1]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[2]\", \"$.e3.am1[2]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[3]\", \"$.e3.am1[3]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e4.e4.m4\", \"$.e4.e4.m4\"));\n\n    JSONPathSpec flattenSpec = new JSONPathSpec(true, fields);\n    JSONParseSpec spec = new JSONParseSpec(\n        new TimestampSpec(\"ts\", \"iso\", null),\n        new DimensionsSpec(null, null, null),\n        flattenSpec,\n        null,\n        null\n    );\n\n    return spec.makeParser();\n  }\n","date":"2020-05-09 12:53:39","endLine":124,"groupId":"101367","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getNestedParser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/55/7dca72effcae6f3de4ac873f527c36b1922056.src","preCode":"  public Parser getNestedParser()\n  {\n    List<JSONPathFieldSpec> fields = new ArrayList<>();\n    fields.add(JSONPathFieldSpec.createRootField(\"ts\"));\n\n    fields.add(JSONPathFieldSpec.createRootField(\"d1\"));\n    \r\n    fields.add(JSONPathFieldSpec.createNestedField(\"e1.d1\", \"$.e1.d1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e1.d2\", \"$.e1.d2\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d3\", \"$.e2.d3\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d4\", \"$.e2.d4\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d5\", \"$.e2.d5\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.d6\", \"$.e2.d6\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.ad1[0]\", \"$.e2.ad1[0]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.ad1[1]\", \"$.e2.ad1[1]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e2.ad1[2]\", \"$.e2.ad1[2]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"ae1[0].d1\", \"$.ae1[0].d1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"ae1[1].d1\", \"$.ae1[1].d1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"ae1[2].e1.d2\", \"$.ae1[2].e1.d2\"));\n\n    fields.add(JSONPathFieldSpec.createRootField(\"m3\"));\n    \r\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m1\", \"$.e3.m1\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m2\", \"$.e3.m2\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m3\", \"$.e3.m3\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.m4\", \"$.e3.m4\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[0]\", \"$.e3.am1[0]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[1]\", \"$.e3.am1[1]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[2]\", \"$.e3.am1[2]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e3.am1[3]\", \"$.e3.am1[3]\"));\n    fields.add(JSONPathFieldSpec.createNestedField(\"e4.e4.m4\", \"$.e4.e4.m4\"));\n\n    JSONPathSpec flattenSpec = new JSONPathSpec(true, fields);\n    JSONParseSpec spec = new JSONParseSpec(\n        new TimestampSpec(\"ts\", \"iso\", null),\n        new DimensionsSpec(null, null, null),\n        flattenSpec,\n        null\n    );\n\n    return spec.makeParser();\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/FlattenJSONBenchmarkUtil.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"28be107a1c18ef1fd9fd268c8b04e232efb63695","commitMessage":"@@@add flag to flattenSpec to keep null columns (#9814)\n\n* add flag to flattenSpec to keep null columns\n\n* remove changes to inputFormat interface\n\n* add comment\n\n* change comment message\n\n* update web console e2e test\n\n* move keepNullColmns to JSONParseSpec\n\n* fix merge conflicts\n\n* fix tests\n\n* set keepNullColumns to false by default\n\n* fix lgtm\n\n* change Boolean to boolean.  add keepNullColumns to hash.  add tests for keepKeepNullColumns false + true with no nuulul columns\n\n* Add equals verifier tests","date":"2020-05-09 12:53:39","modifiedFileCount":"41","status":"M","submitter":"mcbrewster"}]
