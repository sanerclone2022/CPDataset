[{"authorTime":"2019-01-29 21:05:17","codes":[{"authorDate":"2019-01-29 21:05:17","commitOrder":1,"curCode":"  public void testBloomKFilterByte() throws IOException\n  {\n    BloomKFilter bf = new BloomKFilter(10000);\n    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n    BloomKFilter.serialize(bytesOut, bf);\n    byte[] bfBytes = bytesOut.toByteArray();\n    ByteBuffer buffer = ByteBuffer.wrap(bfBytes);\n\n    byte val = Byte.MIN_VALUE;\n    byte val1 = 1;\n    byte val2 = 2;\n    byte val3 = Byte.MAX_VALUE;\n\n    BloomKFilter.addLong(buffer, val);\n    BloomKFilter rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(false, rehydrated.testLong(val1));\n    assertEquals(false, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val1);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(false, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val2);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(true, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val3);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(true, rehydrated.testLong(val2));\n    assertEquals(true, rehydrated.testLong(val3));\n\n    byte randVal = 0;\n    for (int i = 0; i < COUNT; i++) {\n      randVal = (byte) rand.nextInt(Byte.MAX_VALUE);\n      BloomKFilter.addLong(buffer, randVal);\n    }\n\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n\n    \r\n    assertEquals(true, rehydrated.testLong(randVal));\n    \r\n    assertEquals(false, rehydrated.testLong((byte) -120));\n\n    assertEquals(7808, rehydrated.sizeInBytes());\n  }\n","date":"2019-01-29 21:05:17","endLine":161,"groupId":"12991","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBloomKFilterByte","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/33/85924e4e1acad6daef28d1bf7fcd8875ab307d.src","preCode":"  public void testBloomKFilterByte() throws IOException\n  {\n    BloomKFilter bf = new BloomKFilter(10000);\n    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n    BloomKFilter.serialize(bytesOut, bf);\n    byte[] bfBytes = bytesOut.toByteArray();\n    ByteBuffer buffer = ByteBuffer.wrap(bfBytes);\n\n    byte val = Byte.MIN_VALUE;\n    byte val1 = 1;\n    byte val2 = 2;\n    byte val3 = Byte.MAX_VALUE;\n\n    BloomKFilter.addLong(buffer, val);\n    BloomKFilter rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(false, rehydrated.testLong(val1));\n    assertEquals(false, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val1);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(false, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val2);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(true, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val3);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(true, rehydrated.testLong(val2));\n    assertEquals(true, rehydrated.testLong(val3));\n\n    byte randVal = 0;\n    for (int i = 0; i < COUNT; i++) {\n      randVal = (byte) rand.nextInt(Byte.MAX_VALUE);\n      BloomKFilter.addLong(buffer, randVal);\n    }\n\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n\n    \r\n    assertEquals(true, rehydrated.testLong(randVal));\n    \r\n    assertEquals(false, rehydrated.testLong((byte) -120));\n\n    assertEquals(7808, rehydrated.sizeInBytes());\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/test/java/org/apache/druid/query/filter/BloomKFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"},{"authorDate":"2019-01-29 21:05:17","commitOrder":1,"curCode":"  public void testBloomKFilterInt() throws IOException\n  {\n    BloomKFilter bf = new BloomKFilter(10000);\n    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n    BloomKFilter.serialize(bytesOut, bf);\n    byte[] bfBytes = bytesOut.toByteArray();\n    ByteBuffer buffer = ByteBuffer.wrap(bfBytes);\n\n    int val = Integer.MIN_VALUE;\n    int val1 = 1;\n    int val2 = 2;\n    int val3 = Integer.MAX_VALUE;\n\n    BloomKFilter.addLong(buffer, val);\n    BloomKFilter rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(false, rehydrated.testLong(val1));\n    assertEquals(false, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val1);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(false, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val2);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(true, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val3);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(true, rehydrated.testLong(val2));\n    assertEquals(true, rehydrated.testLong(val3));\n\n    int randVal = 0;\n    for (int i = 0; i < COUNT; i++) {\n      randVal = rand.nextInt();\n      BloomKFilter.addLong(buffer, randVal);\n    }\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    \r\n    assertEquals(true, rehydrated.testLong(randVal));\n    \r\n    assertEquals(false, rehydrated.testLong(-120));\n\n    assertEquals(7808, rehydrated.sizeInBytes());\n  }\n","date":"2019-01-29 21:05:17","endLine":218,"groupId":"12991","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBloomKFilterInt","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/33/85924e4e1acad6daef28d1bf7fcd8875ab307d.src","preCode":"  public void testBloomKFilterInt() throws IOException\n  {\n    BloomKFilter bf = new BloomKFilter(10000);\n    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n    BloomKFilter.serialize(bytesOut, bf);\n    byte[] bfBytes = bytesOut.toByteArray();\n    ByteBuffer buffer = ByteBuffer.wrap(bfBytes);\n\n    int val = Integer.MIN_VALUE;\n    int val1 = 1;\n    int val2 = 2;\n    int val3 = Integer.MAX_VALUE;\n\n    BloomKFilter.addLong(buffer, val);\n    BloomKFilter rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(false, rehydrated.testLong(val1));\n    assertEquals(false, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val1);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(false, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val2);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(true, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val3);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(true, rehydrated.testLong(val2));\n    assertEquals(true, rehydrated.testLong(val3));\n\n    int randVal = 0;\n    for (int i = 0; i < COUNT; i++) {\n      randVal = rand.nextInt();\n      BloomKFilter.addLong(buffer, randVal);\n    }\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    \r\n    assertEquals(true, rehydrated.testLong(randVal));\n    \r\n    assertEquals(false, rehydrated.testLong(-120));\n\n    assertEquals(7808, rehydrated.sizeInBytes());\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/test/java/org/apache/druid/query/filter/BloomKFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"}],"commitId":"a6d81c0d1654b28d15d922dbe0d128489978fc89","commitMessage":"@@@Adds bloom filter aggregator to 'druid-bloom-filters' extension (#6397)\n\n* blooming aggs\n\n* partially address review\n\n* fix docs\n\n* minor test refactor after rebase\n\n* use copied bloomkfilter\n\n* add ByteBuffer methods to BloomKFilter to allow agg to use in place.  simplify some things.  more tests\n\n* add methods to BloomKFilter to get number of set bits.  use in comparator.  fixes\n\n* more docs\n\n* fix\n\n* fix style\n\n* simplify bloomfilter bytebuffer merge.  change methods to allow passing buffer offsets\n\n* oof.  more fixes\n\n* more sane docs example\n\n* fix it\n\n* do the right thing in the right place\n\n* formatting\n\n* fix\n\n* avoid conflict\n\n* typo fixes.  faster comparator.  docs for comparator behavior\n\n* unused imports\n\n* use buffer comparator instead of deserializing\n\n* striped readwrite lock for buffer agg.  null handling comparator.  other review changes\n\n* style fixes\n\n* style\n\n* remove sync for now\n\n* oops\n\n* consistency\n\n* inspect runtime shape of selector instead of selector plus.  static comparator.  add inner exception on serde exception\n\n* CardinalityBufferAggregator inspect selectors instead of selectorPluses\n\n* fix style\n\n* refactor away from using ColumnSelectorPlus and ColumnSelectorStrategyFactory to instead use specialized aggregators for each supported column type.  other review comments\n\n* adjustment\n\n* fix teamcity error?\n\n* rename nil aggs to empty.  change empty agg constructor signature.  add comments\n\n* use stringutils base64 stuff to be chill with master\n\n* add aggregate combiner.  comment\n","date":"2019-01-29 21:05:17","modifiedFileCount":"6","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-07-07 00:33:12","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void testBloomKFilterByte() throws IOException\n  {\n    BloomKFilter bf = new BloomKFilter(10000);\n    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n    BloomKFilter.serialize(bytesOut, bf);\n    byte[] bfBytes = bytesOut.toByteArray();\n    ByteBuffer buffer = ByteBuffer.wrap(bfBytes);\n\n    byte val = Byte.MIN_VALUE;\n    byte val1 = 1;\n    byte val2 = 2;\n    byte val3 = Byte.MAX_VALUE;\n\n    BloomKFilter.addLong(buffer, val);\n    BloomKFilter rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    Assert.assertTrue(rehydrated.testLong(val));\n    Assert.assertFalse(rehydrated.testLong(val1));\n    Assert.assertFalse(rehydrated.testLong(val2));\n    Assert.assertFalse(rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val1);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    Assert.assertTrue(rehydrated.testLong(val));\n    Assert.assertTrue(rehydrated.testLong(val1));\n    Assert.assertFalse(rehydrated.testLong(val2));\n    Assert.assertFalse(rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val2);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    Assert.assertTrue(rehydrated.testLong(val));\n    Assert.assertTrue(rehydrated.testLong(val1));\n    Assert.assertTrue(rehydrated.testLong(val2));\n    Assert.assertFalse(rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val3);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    Assert.assertTrue(rehydrated.testLong(val));\n    Assert.assertTrue(rehydrated.testLong(val1));\n    Assert.assertTrue(rehydrated.testLong(val2));\n    Assert.assertTrue(rehydrated.testLong(val3));\n\n    byte randVal = 0;\n    for (int i = 0; i < COUNT; i++) {\n      randVal = (byte) rand.nextInt(Byte.MAX_VALUE);\n      BloomKFilter.addLong(buffer, randVal);\n    }\n\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n\n    \r\n    Assert.assertTrue(rehydrated.testLong(randVal));\n    \r\n    Assert.assertFalse(rehydrated.testLong((byte) -120));\n\n    Assert.assertEquals(7808, rehydrated.sizeInBytes());\n  }\n","date":"2019-07-07 00:33:12","endLine":159,"groupId":"103275","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testBloomKFilterByte","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/60/5634ad54ec0bf0cd044cc0caee23df0cdb977f.src","preCode":"  public void testBloomKFilterByte() throws IOException\n  {\n    BloomKFilter bf = new BloomKFilter(10000);\n    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n    BloomKFilter.serialize(bytesOut, bf);\n    byte[] bfBytes = bytesOut.toByteArray();\n    ByteBuffer buffer = ByteBuffer.wrap(bfBytes);\n\n    byte val = Byte.MIN_VALUE;\n    byte val1 = 1;\n    byte val2 = 2;\n    byte val3 = Byte.MAX_VALUE;\n\n    BloomKFilter.addLong(buffer, val);\n    BloomKFilter rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(false, rehydrated.testLong(val1));\n    assertEquals(false, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val1);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(false, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val2);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(true, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val3);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(true, rehydrated.testLong(val2));\n    assertEquals(true, rehydrated.testLong(val3));\n\n    byte randVal = 0;\n    for (int i = 0; i < COUNT; i++) {\n      randVal = (byte) rand.nextInt(Byte.MAX_VALUE);\n      BloomKFilter.addLong(buffer, randVal);\n    }\n\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n\n    \r\n    assertEquals(true, rehydrated.testLong(randVal));\n    \r\n    assertEquals(false, rehydrated.testLong((byte) -120));\n\n    assertEquals(7808, rehydrated.sizeInBytes());\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/test/java/org/apache/druid/query/filter/BloomKFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void testBloomKFilterInt() throws IOException\n  {\n    BloomKFilter bf = new BloomKFilter(10000);\n    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n    BloomKFilter.serialize(bytesOut, bf);\n    byte[] bfBytes = bytesOut.toByteArray();\n    ByteBuffer buffer = ByteBuffer.wrap(bfBytes);\n\n    int val = Integer.MIN_VALUE;\n    int val1 = 1;\n    int val2 = 2;\n    int val3 = Integer.MAX_VALUE;\n\n    BloomKFilter.addLong(buffer, val);\n    BloomKFilter rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    Assert.assertTrue(rehydrated.testLong(val));\n    Assert.assertFalse(rehydrated.testLong(val1));\n    Assert.assertFalse(rehydrated.testLong(val2));\n    Assert.assertFalse(rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val1);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    Assert.assertTrue(rehydrated.testLong(val));\n    Assert.assertTrue(rehydrated.testLong(val1));\n    Assert.assertFalse(rehydrated.testLong(val2));\n    Assert.assertFalse(rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val2);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    Assert.assertTrue(rehydrated.testLong(val));\n    Assert.assertTrue(rehydrated.testLong(val1));\n    Assert.assertTrue(rehydrated.testLong(val2));\n    Assert.assertFalse(rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val3);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    Assert.assertTrue(rehydrated.testLong(val));\n    Assert.assertTrue(rehydrated.testLong(val1));\n    Assert.assertTrue(rehydrated.testLong(val2));\n    Assert.assertTrue(rehydrated.testLong(val3));\n\n    int randVal = 0;\n    for (int i = 0; i < COUNT; i++) {\n      randVal = rand.nextInt();\n      BloomKFilter.addLong(buffer, randVal);\n    }\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    \r\n    Assert.assertTrue(rehydrated.testLong(randVal));\n    \r\n    Assert.assertFalse(rehydrated.testLong(-120));\n\n    Assert.assertEquals(7808, rehydrated.sizeInBytes());\n  }\n","date":"2019-07-07 00:33:12","endLine":216,"groupId":"103275","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testBloomKFilterInt","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/60/5634ad54ec0bf0cd044cc0caee23df0cdb977f.src","preCode":"  public void testBloomKFilterInt() throws IOException\n  {\n    BloomKFilter bf = new BloomKFilter(10000);\n    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n    BloomKFilter.serialize(bytesOut, bf);\n    byte[] bfBytes = bytesOut.toByteArray();\n    ByteBuffer buffer = ByteBuffer.wrap(bfBytes);\n\n    int val = Integer.MIN_VALUE;\n    int val1 = 1;\n    int val2 = 2;\n    int val3 = Integer.MAX_VALUE;\n\n    BloomKFilter.addLong(buffer, val);\n    BloomKFilter rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(false, rehydrated.testLong(val1));\n    assertEquals(false, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val1);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(false, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val2);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(true, rehydrated.testLong(val2));\n    assertEquals(false, rehydrated.testLong(val3));\n    BloomKFilter.addLong(buffer, val3);\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    buffer.position(0);\n    assertEquals(true, rehydrated.testLong(val));\n    assertEquals(true, rehydrated.testLong(val1));\n    assertEquals(true, rehydrated.testLong(val2));\n    assertEquals(true, rehydrated.testLong(val3));\n\n    int randVal = 0;\n    for (int i = 0; i < COUNT; i++) {\n      randVal = rand.nextInt();\n      BloomKFilter.addLong(buffer, randVal);\n    }\n    rehydrated = BloomKFilter.deserialize(new ByteBufferInputStream(buffer));\n    \r\n    assertEquals(true, rehydrated.testLong(randVal));\n    \r\n    assertEquals(false, rehydrated.testLong(-120));\n\n    assertEquals(7808, rehydrated.sizeInBytes());\n  }\n","realPath":"extensions-core/druid-bloom-filter/src/test/java/org/apache/druid/query/filter/BloomKFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"}]
