[{"authorTime":"2020-06-10 10:32:16","codes":[{"authorDate":"2020-06-10 10:32:16","commitOrder":1,"curCode":"  public void testFloat()\n  {\n    VectorValueMatcherFactory matcherFactory =\n        VectorValueMatcherColumnProcessorFactory.instance().makeFloatProcessor(vectorValueSelector);\n\n    Assert.assertTrue(matcherFactory instanceof FloatVectorValueMatcher);\n\n    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"2.0\");\n    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n\n    \r\n    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n    } else {\n      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n    }\n    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n    EasyMock.verify(vectorValueSelector);\n  }\n","date":"2020-06-10 10:32:16","endLine":71,"groupId":"6696","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFloat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ff/a0253b2cf39d03747f2883dfe739b9c4459910.src","preCode":"  public void testFloat()\n  {\n    VectorValueMatcherFactory matcherFactory =\n        VectorValueMatcherColumnProcessorFactory.instance().makeFloatProcessor(vectorValueSelector);\n\n    Assert.assertTrue(matcherFactory instanceof FloatVectorValueMatcher);\n\n    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"2.0\");\n    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n\n    \r\n    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n    } else {\n      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n    }\n    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n    EasyMock.verify(vectorValueSelector);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/filter/vector/VectorValueMatcherColumnProcessorFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2020-06-10 10:32:16","commitOrder":1,"curCode":"  public void testLong()\n  {\n    VectorValueMatcherFactory matcherFactory =\n        VectorValueMatcherColumnProcessorFactory.instance().makeLongProcessor(vectorValueSelector);\n\n    Assert.assertTrue(matcherFactory instanceof LongVectorValueMatcher);\n\n    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"1\");\n    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n\n    \r\n    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n    } else {\n      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n    }\n    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n    EasyMock.verify(vectorValueSelector);\n  }\n","date":"2020-06-10 10:32:16","endLine":122,"groupId":"6696","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ff/a0253b2cf39d03747f2883dfe739b9c4459910.src","preCode":"  public void testLong()\n  {\n    VectorValueMatcherFactory matcherFactory =\n        VectorValueMatcherColumnProcessorFactory.instance().makeLongProcessor(vectorValueSelector);\n\n    Assert.assertTrue(matcherFactory instanceof LongVectorValueMatcher);\n\n    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"1\");\n    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n\n    \r\n    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n    } else {\n      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n    }\n    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n    EasyMock.verify(vectorValueSelector);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/filter/vector/VectorValueMatcherColumnProcessorFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"1c9ca55247f7d90cf15d65e43aba0c1853d85629","commitMessage":"@@@remove incorrect and unnecessary overrides from BooleanVectorValueMatcher (#9994)\n\n* remove incorrect and unnecessary overrides from BooleanVectorValueMatcher\n\n* add test case\n\n* add unit tests for ... part of VectorValueMatcherColumnProcessorFactory\n\n* Update VectorValueMatcherColumnProcessorFactoryTest.java","date":"2020-06-10 10:32:16","modifiedFileCount":"2","status":"B","submitter":"Clint Wylie"},{"authorTime":"2020-10-06 12:53:53","codes":[{"authorDate":"2020-10-06 12:53:53","commitOrder":2,"curCode":"  public void testFloat()\n  {\n    VectorValueMatcherFactory matcherFactory =\n        VectorValueMatcherColumnProcessorFactory.instance().makeFloatProcessor(\n            ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.FLOAT),\n            vectorValueSelector\n        );\n\n    Assert.assertTrue(matcherFactory instanceof FloatVectorValueMatcher);\n\n    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"2.0\");\n    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n\n    \r\n    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n    } else {\n      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n    }\n    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n    EasyMock.verify(vectorValueSelector);\n  }\n","date":"2020-10-06 12:53:53","endLine":76,"groupId":"107082","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testFloat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9f/0e7c2faacc8093e9519ef2f1e07f63ff92a659.src","preCode":"  public void testFloat()\n  {\n    VectorValueMatcherFactory matcherFactory =\n        VectorValueMatcherColumnProcessorFactory.instance().makeFloatProcessor(vectorValueSelector);\n\n    Assert.assertTrue(matcherFactory instanceof FloatVectorValueMatcher);\n\n    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"2.0\");\n    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n\n    \r\n    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n    } else {\n      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n    }\n    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n    EasyMock.verify(vectorValueSelector);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/filter/vector/VectorValueMatcherColumnProcessorFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-10-06 12:53:53","commitOrder":2,"curCode":"  public void testLong()\n  {\n    VectorValueMatcherFactory matcherFactory =\n        VectorValueMatcherColumnProcessorFactory.instance().makeLongProcessor(\n            ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.LONG),\n            vectorValueSelector\n        );\n\n    Assert.assertTrue(matcherFactory instanceof LongVectorValueMatcher);\n\n    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"1\");\n    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n\n    \r\n    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n    } else {\n      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n    }\n    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n    EasyMock.verify(vectorValueSelector);\n  }\n","date":"2020-10-06 12:53:53","endLine":133,"groupId":"107082","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testLong","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9f/0e7c2faacc8093e9519ef2f1e07f63ff92a659.src","preCode":"  public void testLong()\n  {\n    VectorValueMatcherFactory matcherFactory =\n        VectorValueMatcherColumnProcessorFactory.instance().makeLongProcessor(vectorValueSelector);\n\n    Assert.assertTrue(matcherFactory instanceof LongVectorValueMatcher);\n\n    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"1\");\n    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n\n    \r\n    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n    } else {\n      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n    }\n    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n    EasyMock.verify(vectorValueSelector);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/filter/vector/VectorValueMatcherColumnProcessorFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"207ef310f221f105e534914cdcb3650748a23c71","commitMessage":"@@@vectorized group by support for nullable numeric columns (#10441)\n\n* vectorized group by support for numeric null columns\n\n* revert unintended change\n\n* adjust\n\n* review stuffs","date":"2020-10-06 12:53:53","modifiedFileCount":"10","status":"M","submitter":"Clint Wylie"}]
