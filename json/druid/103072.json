[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void start()\n  {\n    if (!lifecycleLock.canStart()) {\n      throw new ISE(\"can't start.\");\n    }\n\n    LOG.info(\"Starting DefaultBasicAuthenticatorCacheManager.\");\n\n    try {\n      initUserMaps();\n\n      ScheduledExecutors.scheduleWithFixedDelay(\n          exec,\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          () -> {\n            try {\n              long randomDelay = ThreadLocalRandom.current().nextLong(0, commonCacheConfig.getMaxRandomDelay());\n              LOG.debug(\"Inserting random polling delay of [%s] ms\", randomDelay);\n              Thread.sleep(randomDelay);\n\n              LOG.debug(\"Scheduled cache poll is running\");\n              for (String authenticatorPrefix : authenticatorPrefixes) {\n                Map<String, BasicAuthenticatorUser> userMap = fetchUserMapFromCoordinator(authenticatorPrefix, false);\n                if (userMap != null) {\n                  cachedUserMaps.put(authenticatorPrefix, userMap);\n                }\n              }\n              LOG.debug(\"Scheduled cache poll is done\");\n            }\n            catch (Throwable t) {\n              LOG.makeAlert(t, \"Error occured while polling for cachedUserMaps.\").emit();\n            }\n          }\n      );\n\n      lifecycleLock.started();\n      LOG.info(\"Started DefaultBasicAuthenticatorCacheManager.\");\n    }\n    finally {\n      lifecycleLock.exitStart();\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":140,"groupId":"13364","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/03/5568feb547b6366b8c25212eb4b5135fa04486.src","preCode":"  public void start()\n  {\n    if (!lifecycleLock.canStart()) {\n      throw new ISE(\"can't start.\");\n    }\n\n    LOG.info(\"Starting DefaultBasicAuthenticatorCacheManager.\");\n\n    try {\n      initUserMaps();\n\n      ScheduledExecutors.scheduleWithFixedDelay(\n          exec,\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          () -> {\n            try {\n              long randomDelay = ThreadLocalRandom.current().nextLong(0, commonCacheConfig.getMaxRandomDelay());\n              LOG.debug(\"Inserting random polling delay of [%s] ms\", randomDelay);\n              Thread.sleep(randomDelay);\n\n              LOG.debug(\"Scheduled cache poll is running\");\n              for (String authenticatorPrefix : authenticatorPrefixes) {\n                Map<String, BasicAuthenticatorUser> userMap = fetchUserMapFromCoordinator(authenticatorPrefix, false);\n                if (userMap != null) {\n                  cachedUserMaps.put(authenticatorPrefix, userMap);\n                }\n              }\n              LOG.debug(\"Scheduled cache poll is done\");\n            }\n            catch (Throwable t) {\n              LOG.makeAlert(t, \"Error occured while polling for cachedUserMaps.\").emit();\n            }\n          }\n      );\n\n      lifecycleLock.started();\n      LOG.info(\"Started DefaultBasicAuthenticatorCacheManager.\");\n    }\n    finally {\n      lifecycleLock.exitStart();\n    }\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/authentication/db/cache/CoordinatorPollingBasicAuthenticatorCacheManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void start()\n  {\n    if (!lifecycleLock.canStart()) {\n      throw new ISE(\"can't start.\");\n    }\n\n    LOG.info(\"Starting CoordinatorPollingBasicAuthorizerCacheManager.\");\n\n    try {\n      initUserMaps();\n\n      ScheduledExecutors.scheduleWithFixedDelay(\n          exec,\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          () -> {\n            try {\n              long randomDelay = ThreadLocalRandom.current().nextLong(0, commonCacheConfig.getMaxRandomDelay());\n              LOG.debug(\"Inserting random polling delay of [%s] ms\", randomDelay);\n              Thread.sleep(randomDelay);\n\n              LOG.debug(\"Scheduled cache poll is running\");\n              for (String authorizerPrefix : authorizerPrefixes) {\n                UserAndRoleMap userAndRoleMap = fetchUserAndRoleMapFromCoordinator(authorizerPrefix, false);\n                if (userAndRoleMap != null) {\n                  cachedUserMaps.put(authorizerPrefix, userAndRoleMap.getUserMap());\n                  cachedRoleMaps.put(authorizerPrefix, userAndRoleMap.getRoleMap());\n                }\n              }\n              LOG.debug(\"Scheduled cache poll is done\");\n            }\n            catch (Throwable t) {\n              LOG.makeAlert(t, \"Error occured while polling for cachedUserMaps.\").emit();\n            }\n          }\n      );\n\n      lifecycleLock.started();\n      LOG.info(\"Started CoordinatorPollingBasicAuthorizerCacheManager.\");\n    }\n    finally {\n      lifecycleLock.exitStart();\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":143,"groupId":"13364","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c3/115c3a24ba2a8ed4a105db081983151ff66474.src","preCode":"  public void start()\n  {\n    if (!lifecycleLock.canStart()) {\n      throw new ISE(\"can't start.\");\n    }\n\n    LOG.info(\"Starting CoordinatorPollingBasicAuthorizerCacheManager.\");\n\n    try {\n      initUserMaps();\n\n      ScheduledExecutors.scheduleWithFixedDelay(\n          exec,\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          () -> {\n            try {\n              long randomDelay = ThreadLocalRandom.current().nextLong(0, commonCacheConfig.getMaxRandomDelay());\n              LOG.debug(\"Inserting random polling delay of [%s] ms\", randomDelay);\n              Thread.sleep(randomDelay);\n\n              LOG.debug(\"Scheduled cache poll is running\");\n              for (String authorizerPrefix : authorizerPrefixes) {\n                UserAndRoleMap userAndRoleMap = fetchUserAndRoleMapFromCoordinator(authorizerPrefix, false);\n                if (userAndRoleMap != null) {\n                  cachedUserMaps.put(authorizerPrefix, userAndRoleMap.getUserMap());\n                  cachedRoleMaps.put(authorizerPrefix, userAndRoleMap.getRoleMap());\n                }\n              }\n              LOG.debug(\"Scheduled cache poll is done\");\n            }\n            catch (Throwable t) {\n              LOG.makeAlert(t, \"Error occured while polling for cachedUserMaps.\").emit();\n            }\n          }\n      );\n\n      lifecycleLock.started();\n      LOG.info(\"Started CoordinatorPollingBasicAuthorizerCacheManager.\");\n    }\n    finally {\n      lifecycleLock.exitStart();\n    }\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/authorization/db/cache/CoordinatorPollingBasicAuthorizerCacheManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-10-09 08:08:27","codes":[{"authorDate":"2019-10-09 08:08:27","commitOrder":2,"curCode":"  public void start()\n  {\n    if (!lifecycleLock.canStart()) {\n      throw new ISE(\"can't start.\");\n    }\n\n    LOG.info(\"Starting CoordinatorPollingBasicAuthenticatorCacheManager.\");\n\n    try {\n      initUserMaps();\n\n      ScheduledExecutors.scheduleWithFixedDelay(\n          exec,\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          () -> {\n            try {\n              long randomDelay = ThreadLocalRandom.current().nextLong(0, commonCacheConfig.getMaxRandomDelay());\n              LOG.debug(\"Inserting cachedUserMaps random polling delay of [%s] ms\", randomDelay);\n              Thread.sleep(randomDelay);\n\n              LOG.debug(\"Scheduled user cache poll is running\");\n              for (String authenticatorPrefix : authenticatorPrefixes) {\n                Map<String, BasicAuthenticatorUser> userMap = fetchUserMapFromCoordinator(authenticatorPrefix, false);\n                if (userMap != null) {\n                  cachedUserMaps.put(authenticatorPrefix, userMap);\n                }\n              }\n              LOG.debug(\"Scheduled user cache poll is done\");\n            }\n            catch (Throwable t) {\n              LOG.makeAlert(t, \"Error occured while polling for cachedUserMaps.\").emit();\n            }\n          }\n      );\n\n      lifecycleLock.started();\n      LOG.info(\"Started CoordinatorPollingBasicAuthenticatorCacheManager.\");\n    }\n    finally {\n      lifecycleLock.exitStart();\n    }\n  }\n","date":"2019-10-09 08:08:27","endLine":140,"groupId":"103072","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cd/fd8027c3be0a5eb7a26b7c9a67461036e178a4.src","preCode":"  public void start()\n  {\n    if (!lifecycleLock.canStart()) {\n      throw new ISE(\"can't start.\");\n    }\n\n    LOG.info(\"Starting DefaultBasicAuthenticatorCacheManager.\");\n\n    try {\n      initUserMaps();\n\n      ScheduledExecutors.scheduleWithFixedDelay(\n          exec,\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          () -> {\n            try {\n              long randomDelay = ThreadLocalRandom.current().nextLong(0, commonCacheConfig.getMaxRandomDelay());\n              LOG.debug(\"Inserting random polling delay of [%s] ms\", randomDelay);\n              Thread.sleep(randomDelay);\n\n              LOG.debug(\"Scheduled cache poll is running\");\n              for (String authenticatorPrefix : authenticatorPrefixes) {\n                Map<String, BasicAuthenticatorUser> userMap = fetchUserMapFromCoordinator(authenticatorPrefix, false);\n                if (userMap != null) {\n                  cachedUserMaps.put(authenticatorPrefix, userMap);\n                }\n              }\n              LOG.debug(\"Scheduled cache poll is done\");\n            }\n            catch (Throwable t) {\n              LOG.makeAlert(t, \"Error occured while polling for cachedUserMaps.\").emit();\n            }\n          }\n      );\n\n      lifecycleLock.started();\n      LOG.info(\"Started DefaultBasicAuthenticatorCacheManager.\");\n    }\n    finally {\n      lifecycleLock.exitStart();\n    }\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/authentication/db/cache/CoordinatorPollingBasicAuthenticatorCacheManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2019-10-09 08:08:27","commitOrder":2,"curCode":"  public void start()\n  {\n    if (!lifecycleLock.canStart()) {\n      throw new ISE(\"can't start.\");\n    }\n\n    LOG.info(\"Starting CoordinatorPollingBasicAuthorizerCacheManager.\");\n\n    try {\n      initUserMaps();\n\n      ScheduledExecutors.scheduleWithFixedDelay(\n          exec,\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          () -> {\n            try {\n              long randomDelay = ThreadLocalRandom.current().nextLong(0, commonCacheConfig.getMaxRandomDelay());\n              LOG.debug(\"Inserting random polling delay of [%s] ms\", randomDelay);\n              Thread.sleep(randomDelay);\n\n              LOG.debug(\"Scheduled userMap cache poll is running\");\n              for (String authorizerPrefix : authorizerPrefixes) {\n                UserAndRoleMap userAndRoleMap = fetchUserAndRoleMapFromCoordinator(authorizerPrefix, false);\n                if (userAndRoleMap != null) {\n                  cachedUserMaps.put(authorizerPrefix, userAndRoleMap.getUserMap());\n                  cachedRoleMaps.put(authorizerPrefix, userAndRoleMap.getRoleMap());\n                }\n              }\n              LOG.debug(\"Scheduled userMap cache poll is done\");\n            }\n            catch (Throwable t) {\n              LOG.makeAlert(t, \"Error occured while polling for cachedUserMaps.\").emit();\n            }\n          }\n      );\n\n      ScheduledExecutors.scheduleWithFixedDelay(\n          exec,\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          () -> {\n            try {\n              long randomDelay = ThreadLocalRandom.current().nextLong(0, commonCacheConfig.getMaxRandomDelay());\n              LOG.debug(\"Inserting random polling delay of [%s] ms\", randomDelay);\n              Thread.sleep(randomDelay);\n\n              LOG.debug(\"Scheduled groupMappingMap cache poll is running\");\n              for (String authorizerPrefix : authorizerPrefixes) {\n                GroupMappingAndRoleMap groupMappingAndRoleMap = fetchGroupAndRoleMapFromCoordinator(authorizerPrefix, false);\n                if (groupMappingAndRoleMap != null) {\n                  cachedGroupMappingMaps.put(authorizerPrefix, groupMappingAndRoleMap.getGroupMappingMap());\n                  cachedGroupMappingRoleMaps.put(authorizerPrefix, groupMappingAndRoleMap.getRoleMap());\n                }\n              }\n              LOG.debug(\"Scheduled groupMappingMap cache poll is done\");\n            }\n            catch (Throwable t) {\n              LOG.makeAlert(t, \"Error occured while polling for cachedGroupMappingMaps.\").emit();\n            }\n          }\n      );\n\n      lifecycleLock.started();\n      LOG.info(\"Started CoordinatorPollingBasicAuthorizerCacheManager.\");\n    }\n    finally {\n      lifecycleLock.exitStart();\n    }\n  }\n","date":"2019-10-09 08:08:27","endLine":175,"groupId":"103072","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d4/58d977a490bf94aeb8c63bd63770efbec4c111.src","preCode":"  public void start()\n  {\n    if (!lifecycleLock.canStart()) {\n      throw new ISE(\"can't start.\");\n    }\n\n    LOG.info(\"Starting CoordinatorPollingBasicAuthorizerCacheManager.\");\n\n    try {\n      initUserMaps();\n\n      ScheduledExecutors.scheduleWithFixedDelay(\n          exec,\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          new Duration(commonCacheConfig.getPollingPeriod()),\n          () -> {\n            try {\n              long randomDelay = ThreadLocalRandom.current().nextLong(0, commonCacheConfig.getMaxRandomDelay());\n              LOG.debug(\"Inserting random polling delay of [%s] ms\", randomDelay);\n              Thread.sleep(randomDelay);\n\n              LOG.debug(\"Scheduled cache poll is running\");\n              for (String authorizerPrefix : authorizerPrefixes) {\n                UserAndRoleMap userAndRoleMap = fetchUserAndRoleMapFromCoordinator(authorizerPrefix, false);\n                if (userAndRoleMap != null) {\n                  cachedUserMaps.put(authorizerPrefix, userAndRoleMap.getUserMap());\n                  cachedRoleMaps.put(authorizerPrefix, userAndRoleMap.getRoleMap());\n                }\n              }\n              LOG.debug(\"Scheduled cache poll is done\");\n            }\n            catch (Throwable t) {\n              LOG.makeAlert(t, \"Error occured while polling for cachedUserMaps.\").emit();\n            }\n          }\n      );\n\n      lifecycleLock.started();\n      LOG.info(\"Started CoordinatorPollingBasicAuthorizerCacheManager.\");\n    }\n    finally {\n      lifecycleLock.exitStart();\n    }\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/authorization/db/cache/CoordinatorPollingBasicAuthorizerCacheManager.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"18758f52283696ba12ab0763260909b7ca734f1e","commitMessage":"@@@Support LDAP authentication/authorization (#6972)\n\n* Support LDAP authentication/authorization\n\n* fixed integration-tests\n\n* fixed Travis CI build errors related to druid-security module\n\n* fixed failing test\n\n* fixed failing test header\n\n* added comments.  force build\n\n* fixes for strict compilation spotbugs checks\n\n* removed authenticator rolling credential update feature\n\n* removed escalator rolling credential update feature\n\n* fixed teamcity inspection deprecated API usage error\n\n* fixed checkstyle execution error.  removed unused import\n\n* removed cached config as part of removing authenticator rolling credential update feature\n\n* removed config bundle entity as part of removing authenticator rolling credential update feature\n\n* refactored ldao configuration\n\n* added support for SSLContext configuration and TLSCertificateChecker\n\n* removed check to return authentication failure when user has no group assigned.  will be checked and handled by the authorizer\n\n* Separate out authorizer checks between metadata-backed store user and LDAP user/groups\n\n* refactored BasicSecuritySSLSocketFactory usage to fix strict compilation spotbugs checks\n\n* fixes build issue\n\n* final review comments updates\n\n* final review comments updates\n\n* fixed LGTM and spellcheck alerts\n\n* Fixed Avatica auth failure error message check\n\n* Updated metadata credentials validator exception message string.  replaced DB with metadata store\n","date":"2019-10-09 08:08:27","modifiedFileCount":"44","status":"M","submitter":"Mohammad J. Khan"}]
