[{"authorTime":"2020-02-14 06:58:32","codes":[{"authorDate":"2020-02-14 06:58:32","commitOrder":1,"curCode":"  private static Druids.ScanQueryBuilder basicC(final BenchmarkSchemaInfo basicSchema)\n  {\n    final QuerySegmentSpec intervalSpec =\n        new MultipleIntervalSegmentSpec(Collections.singletonList(basicSchema.getDataInterval()));\n\n    final String dimName = \"dimUniform\";\n    return Druids.newScanQueryBuilder()\n                 .filters(new SelectorDimFilter(dimName, \"3\", StrlenExtractionFn.instance()))\n                 .intervals(intervalSpec)\n                 .dataSource(\"blah\")\n                 .order(ordering);\n  }\n","date":"2020-02-14 06:58:32","endLine":228,"groupId":"8277","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"basicC","params":"(finalBenchmarkSchemaInfobasicSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a2/b0e98fb980c47d353a27e57b76c3d1beaad6a0.src","preCode":"  private static Druids.ScanQueryBuilder basicC(final BenchmarkSchemaInfo basicSchema)\n  {\n    final QuerySegmentSpec intervalSpec =\n        new MultipleIntervalSegmentSpec(Collections.singletonList(basicSchema.getDataInterval()));\n\n    final String dimName = \"dimUniform\";\n    return Druids.newScanQueryBuilder()\n                 .filters(new SelectorDimFilter(dimName, \"3\", StrlenExtractionFn.instance()))\n                 .intervals(intervalSpec)\n                 .dataSource(\"blah\")\n                 .order(ordering);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/ScanBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"B"},{"authorDate":"2020-02-14 06:58:32","commitOrder":1,"curCode":"  private static Druids.ScanQueryBuilder basicD(final BenchmarkSchemaInfo basicSchema)\n  {\n    final QuerySegmentSpec intervalSpec = new MultipleIntervalSegmentSpec(\n        Collections.singletonList(basicSchema.getDataInterval())\n    );\n\n    final String dimName = \"dimUniform\";\n\n    return Druids.newScanQueryBuilder()\n                 .filters(new BoundDimFilter(dimName, \"100\", \"10000\", true, true, true, null, null))\n                 .intervals(intervalSpec)\n                 .dataSource(\"blah\")\n                 .order(ordering);\n  }\n","date":"2020-02-14 06:58:32","endLine":243,"groupId":"8277","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"basicD","params":"(finalBenchmarkSchemaInfobasicSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a2/b0e98fb980c47d353a27e57b76c3d1beaad6a0.src","preCode":"  private static Druids.ScanQueryBuilder basicD(final BenchmarkSchemaInfo basicSchema)\n  {\n    final QuerySegmentSpec intervalSpec = new MultipleIntervalSegmentSpec(\n        Collections.singletonList(basicSchema.getDataInterval())\n    );\n\n    final String dimName = \"dimUniform\";\n\n    return Druids.newScanQueryBuilder()\n                 .filters(new BoundDimFilter(dimName, \"100\", \"10000\", true, true, true, null, null))\n                 .intervals(intervalSpec)\n                 .dataSource(\"blah\")\n                 .order(ordering);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/ScanBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"B"}],"commitId":"e9aebd994aa0e243446b4f76d819a503401104e3","commitMessage":"@@@Fix for building in Eclipse & VS Code. (#7481)\n\nFixes #6866\nReverse dependencies from /main/ to /test/\nAdd generated-test-sources to source path for Eclipse","date":"2020-02-14 06:58:32","modifiedFileCount":"1","status":"B","submitter":"Adam Peck"},{"authorTime":"2020-06-10 10:31:04","codes":[{"authorDate":"2020-06-10 10:31:04","commitOrder":2,"curCode":"  private static Druids.ScanQueryBuilder basicC(final GeneratorSchemaInfo basicSchema)\n  {\n    final QuerySegmentSpec intervalSpec =\n        new MultipleIntervalSegmentSpec(Collections.singletonList(basicSchema.getDataInterval()));\n\n    final String dimName = \"dimUniform\";\n    return Druids.newScanQueryBuilder()\n                 .filters(new SelectorDimFilter(dimName, \"3\", StrlenExtractionFn.instance()))\n                 .intervals(intervalSpec)\n                 .dataSource(\"blah\")\n                 .order(ordering);\n  }\n","date":"2020-06-10 10:31:04","endLine":228,"groupId":"101428","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"basicC","params":"(finalGeneratorSchemaInfobasicSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/41/0b13e4661c725d22027464f7e2f9c140236a72.src","preCode":"  private static Druids.ScanQueryBuilder basicC(final BenchmarkSchemaInfo basicSchema)\n  {\n    final QuerySegmentSpec intervalSpec =\n        new MultipleIntervalSegmentSpec(Collections.singletonList(basicSchema.getDataInterval()));\n\n    final String dimName = \"dimUniform\";\n    return Druids.newScanQueryBuilder()\n                 .filters(new SelectorDimFilter(dimName, \"3\", StrlenExtractionFn.instance()))\n                 .intervals(intervalSpec)\n                 .dataSource(\"blah\")\n                 .order(ordering);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/ScanBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"},{"authorDate":"2020-06-10 10:31:04","commitOrder":2,"curCode":"  private static Druids.ScanQueryBuilder basicD(final GeneratorSchemaInfo basicSchema)\n  {\n    final QuerySegmentSpec intervalSpec = new MultipleIntervalSegmentSpec(\n        Collections.singletonList(basicSchema.getDataInterval())\n    );\n\n    final String dimName = \"dimUniform\";\n\n    return Druids.newScanQueryBuilder()\n                 .filters(new BoundDimFilter(dimName, \"100\", \"10000\", true, true, true, null, null))\n                 .intervals(intervalSpec)\n                 .dataSource(\"blah\")\n                 .order(ordering);\n  }\n","date":"2020-06-10 10:31:04","endLine":243,"groupId":"101428","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"basicD","params":"(finalGeneratorSchemaInfobasicSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/41/0b13e4661c725d22027464f7e2f9c140236a72.src","preCode":"  private static Druids.ScanQueryBuilder basicD(final BenchmarkSchemaInfo basicSchema)\n  {\n    final QuerySegmentSpec intervalSpec = new MultipleIntervalSegmentSpec(\n        Collections.singletonList(basicSchema.getDataInterval())\n    );\n\n    final String dimName = \"dimUniform\";\n\n    return Druids.newScanQueryBuilder()\n                 .filters(new BoundDimFilter(dimName, \"100\", \"10000\", true, true, true, null, null))\n                 .intervals(intervalSpec)\n                 .dataSource(\"blah\")\n                 .order(ordering);\n  }\n","realPath":"benchmarks/src/test/java/org/apache/druid/benchmark/query/ScanBenchmark.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"}],"commitId":"c5d6163c76e565f21d2d829c128c4c97e49f3eb1","commitMessage":"@@@add a GeneratorInputSource to fill up a cluster with generated data for testing (#9946)\n\n* move benchmark data generator into druid-processing.  add a GeneratorInputSource to fill up a cluster with data\n\n* newlines\n\n* make test coverage not fail maybe\n\n* remove useless test\n\n* Update pom.xml\n\n* Update GeneratorInputSourceTest.java\n\n* less passive aggressive test names","date":"2020-06-10 10:31:04","modifiedFileCount":"24","status":"M","submitter":"Clint Wylie"}]
