[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public static Map<String, BasicAuthorizerUser> deserializeAuthorizerUserMap(\n      ObjectMapper objectMapper,\n      byte[] userMapBytes\n  )\n  {\n    Map<String, BasicAuthorizerUser> userMap;\n    if (userMapBytes == null) {\n      userMap = Maps.newHashMap();\n    } else {\n      try {\n        userMap = objectMapper.readValue(userMapBytes, BasicAuthUtils.AUTHORIZER_USER_MAP_TYPE_REFERENCE);\n      }\n      catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n    return userMap;\n  }\n","date":"2018-08-31 00:56:26","endLine":194,"groupId":"22320","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deserializeAuthorizerUserMap","params":"(ObjectMapperobjectMapper@byte[]userMapBytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/66/77fbc4a91f47116d910d1b89f5ac569958ee5a.src","preCode":"  public static Map<String, BasicAuthorizerUser> deserializeAuthorizerUserMap(\n      ObjectMapper objectMapper,\n      byte[] userMapBytes\n  )\n  {\n    Map<String, BasicAuthorizerUser> userMap;\n    if (userMapBytes == null) {\n      userMap = Maps.newHashMap();\n    } else {\n      try {\n        userMap = objectMapper.readValue(userMapBytes, BasicAuthUtils.AUTHORIZER_USER_MAP_TYPE_REFERENCE);\n      }\n      catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n    return userMap;\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/BasicAuthUtils.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public static Map<String, BasicAuthorizerRole> deserializeAuthorizerRoleMap(\n      ObjectMapper objectMapper,\n      byte[] roleMapBytes\n  )\n  {\n    Map<String, BasicAuthorizerRole> roleMap;\n    if (roleMapBytes == null) {\n      roleMap = Maps.newHashMap();\n    } else {\n      try {\n        roleMap = objectMapper.readValue(roleMapBytes, BasicAuthUtils.AUTHORIZER_ROLE_MAP_TYPE_REFERENCE);\n      }\n      catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n    return roleMap;\n  }\n","date":"2018-08-31 00:56:26","endLine":223,"groupId":"22320","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeAuthorizerRoleMap","params":"(ObjectMapperobjectMapper@byte[]roleMapBytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/66/77fbc4a91f47116d910d1b89f5ac569958ee5a.src","preCode":"  public static Map<String, BasicAuthorizerRole> deserializeAuthorizerRoleMap(\n      ObjectMapper objectMapper,\n      byte[] roleMapBytes\n  )\n  {\n    Map<String, BasicAuthorizerRole> roleMap;\n    if (roleMapBytes == null) {\n      roleMap = Maps.newHashMap();\n    } else {\n      try {\n        roleMap = objectMapper.readValue(roleMapBytes, BasicAuthUtils.AUTHORIZER_ROLE_MAP_TYPE_REFERENCE);\n      }\n      catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n    return roleMap;\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/BasicAuthUtils.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public static Map<String, BasicAuthorizerUser> deserializeAuthorizerUserMap(\n      ObjectMapper objectMapper,\n      byte[] userMapBytes\n  )\n  {\n    Map<String, BasicAuthorizerUser> userMap;\n    if (userMapBytes == null) {\n      userMap = new HashMap<>();\n    } else {\n      try {\n        userMap = objectMapper.readValue(userMapBytes, BasicAuthUtils.AUTHORIZER_USER_MAP_TYPE_REFERENCE);\n      }\n      catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n    return userMap;\n  }\n","date":"2018-10-29 20:02:43","endLine":195,"groupId":"23008","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deserializeAuthorizerUserMap","params":"(ObjectMapperobjectMapper@byte[]userMapBytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/71/4fe8f3bad1c593c93b74e05969d41e505bba58.src","preCode":"  public static Map<String, BasicAuthorizerUser> deserializeAuthorizerUserMap(\n      ObjectMapper objectMapper,\n      byte[] userMapBytes\n  )\n  {\n    Map<String, BasicAuthorizerUser> userMap;\n    if (userMapBytes == null) {\n      userMap = Maps.newHashMap();\n    } else {\n      try {\n        userMap = objectMapper.readValue(userMapBytes, BasicAuthUtils.AUTHORIZER_USER_MAP_TYPE_REFERENCE);\n      }\n      catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n    return userMap;\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/BasicAuthUtils.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public static Map<String, BasicAuthorizerRole> deserializeAuthorizerRoleMap(\n      ObjectMapper objectMapper,\n      byte[] roleMapBytes\n  )\n  {\n    Map<String, BasicAuthorizerRole> roleMap;\n    if (roleMapBytes == null) {\n      roleMap = new HashMap<>();\n    } else {\n      try {\n        roleMap = objectMapper.readValue(roleMapBytes, BasicAuthUtils.AUTHORIZER_ROLE_MAP_TYPE_REFERENCE);\n      }\n      catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n    return roleMap;\n  }\n","date":"2018-10-29 20:02:43","endLine":224,"groupId":"23008","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeAuthorizerRoleMap","params":"(ObjectMapperobjectMapper@byte[]roleMapBytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/71/4fe8f3bad1c593c93b74e05969d41e505bba58.src","preCode":"  public static Map<String, BasicAuthorizerRole> deserializeAuthorizerRoleMap(\n      ObjectMapper objectMapper,\n      byte[] roleMapBytes\n  )\n  {\n    Map<String, BasicAuthorizerRole> roleMap;\n    if (roleMapBytes == null) {\n      roleMap = Maps.newHashMap();\n    } else {\n      try {\n        roleMap = objectMapper.readValue(roleMapBytes, BasicAuthUtils.AUTHORIZER_ROLE_MAP_TYPE_REFERENCE);\n      }\n      catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n    return roleMap;\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/BasicAuthUtils.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2019-10-09 08:08:27","codes":[{"authorDate":"2019-10-09 08:08:27","commitOrder":3,"curCode":"  public static Map<String, BasicAuthorizerUser> deserializeAuthorizerUserMap(\n      ObjectMapper objectMapper,\n      byte[] userMapBytes\n  )\n  {\n    Map<String, BasicAuthorizerUser> userMap;\n    if (userMapBytes == null) {\n      userMap = new HashMap<>();\n    } else {\n      try {\n        userMap = objectMapper.readValue(userMapBytes, BasicAuthUtils.AUTHORIZER_USER_MAP_TYPE_REFERENCE);\n      }\n      catch (IOException ioe) {\n        throw new RuntimeException(\"Couldn't deserialize authorizer userMap!\", ioe);\n      }\n    }\n    return userMap;\n  }\n","date":"2019-10-09 08:08:27","endLine":211,"groupId":"103065","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"deserializeAuthorizerUserMap","params":"(ObjectMapperobjectMapper@byte[]userMapBytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/21/664d0659f22f37b30e82d8ed6b07ee420792a7.src","preCode":"  public static Map<String, BasicAuthorizerUser> deserializeAuthorizerUserMap(\n      ObjectMapper objectMapper,\n      byte[] userMapBytes\n  )\n  {\n    Map<String, BasicAuthorizerUser> userMap;\n    if (userMapBytes == null) {\n      userMap = new HashMap<>();\n    } else {\n      try {\n        userMap = objectMapper.readValue(userMapBytes, BasicAuthUtils.AUTHORIZER_USER_MAP_TYPE_REFERENCE);\n      }\n      catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n    return userMap;\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/BasicAuthUtils.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2019-10-09 08:08:27","commitOrder":3,"curCode":"  public static Map<String, BasicAuthorizerRole> deserializeAuthorizerRoleMap(\n      ObjectMapper objectMapper,\n      byte[] roleMapBytes\n  )\n  {\n    Map<String, BasicAuthorizerRole> roleMap;\n    if (roleMapBytes == null) {\n      roleMap = new HashMap<>();\n    } else {\n      try {\n        roleMap = objectMapper.readValue(roleMapBytes, BasicAuthUtils.AUTHORIZER_ROLE_MAP_TYPE_REFERENCE);\n      }\n      catch (IOException ioe) {\n        throw new RuntimeException(\"Couldn't deserialize authorizer roleMap!\", ioe);\n      }\n    }\n    return roleMap;\n  }\n","date":"2019-10-09 08:08:27","endLine":269,"groupId":"103065","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeAuthorizerRoleMap","params":"(ObjectMapperobjectMapper@byte[]roleMapBytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/21/664d0659f22f37b30e82d8ed6b07ee420792a7.src","preCode":"  public static Map<String, BasicAuthorizerRole> deserializeAuthorizerRoleMap(\n      ObjectMapper objectMapper,\n      byte[] roleMapBytes\n  )\n  {\n    Map<String, BasicAuthorizerRole> roleMap;\n    if (roleMapBytes == null) {\n      roleMap = new HashMap<>();\n    } else {\n      try {\n        roleMap = objectMapper.readValue(roleMapBytes, BasicAuthUtils.AUTHORIZER_ROLE_MAP_TYPE_REFERENCE);\n      }\n      catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n    return roleMap;\n  }\n","realPath":"extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/BasicAuthUtils.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"18758f52283696ba12ab0763260909b7ca734f1e","commitMessage":"@@@Support LDAP authentication/authorization (#6972)\n\n* Support LDAP authentication/authorization\n\n* fixed integration-tests\n\n* fixed Travis CI build errors related to druid-security module\n\n* fixed failing test\n\n* fixed failing test header\n\n* added comments.  force build\n\n* fixes for strict compilation spotbugs checks\n\n* removed authenticator rolling credential update feature\n\n* removed escalator rolling credential update feature\n\n* fixed teamcity inspection deprecated API usage error\n\n* fixed checkstyle execution error.  removed unused import\n\n* removed cached config as part of removing authenticator rolling credential update feature\n\n* removed config bundle entity as part of removing authenticator rolling credential update feature\n\n* refactored ldao configuration\n\n* added support for SSLContext configuration and TLSCertificateChecker\n\n* removed check to return authentication failure when user has no group assigned.  will be checked and handled by the authorizer\n\n* Separate out authorizer checks between metadata-backed store user and LDAP user/groups\n\n* refactored BasicSecuritySSLSocketFactory usage to fix strict compilation spotbugs checks\n\n* fixes build issue\n\n* final review comments updates\n\n* final review comments updates\n\n* fixed LGTM and spellcheck alerts\n\n* Fixed Avatica auth failure error message check\n\n* Updated metadata credentials validator exception message string.  replaced DB with metadata store\n","date":"2019-10-09 08:08:27","modifiedFileCount":"44","status":"M","submitter":"Mohammad J. Khan"}]
