[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSimple() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n\n    Assert.assertNull(driver.startJob());\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    final SegmentsAndMetadata segmentsAndMetadata = driver.registerHandoff(published)\n                                                          .get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            new SegmentIdentifier(DATA_SOURCE, Intervals.of(\"2000/PT1H\"), VERSION, new NumberedShardSpec(0, 0)),\n            new SegmentIdentifier(DATA_SOURCE, Intervals.of(\"2000T01/PT1H\"), VERSION, new NumberedShardSpec(0, 0))\n        ),\n        asIdentifiers(segmentsAndMetadata.getSegments())\n    );\n\n    Assert.assertEquals(3, segmentsAndMetadata.getCommitMetadata());\n  }\n","date":"2018-08-31 00:56:26","endLine":165,"groupId":"22831","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/1cc5700845e3f2998f277446e25cb7418c2957.src","preCode":"  public void testSimple() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n\n    Assert.assertNull(driver.startJob());\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    final SegmentsAndMetadata segmentsAndMetadata = driver.registerHandoff(published)\n                                                          .get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            new SegmentIdentifier(DATA_SOURCE, Intervals.of(\"2000/PT1H\"), VERSION, new NumberedShardSpec(0, 0)),\n            new SegmentIdentifier(DATA_SOURCE, Intervals.of(\"2000T01/PT1H\"), VERSION, new NumberedShardSpec(0, 0))\n        ),\n        asIdentifiers(segmentsAndMetadata.getSegments())\n    );\n\n    Assert.assertEquals(3, segmentsAndMetadata.getCommitMetadata());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/appenderator/StreamAppenderatorDriverTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testHandoffTimeout() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n    segmentHandoffNotifierFactory.disableHandoff();\n\n    Assert.assertNull(driver.startJob());\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    driver.registerHandoff(published).get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n  }\n","date":"2018-08-31 00:56:26","endLine":233,"groupId":"22831","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHandoffTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/1cc5700845e3f2998f277446e25cb7418c2957.src","preCode":"  public void testHandoffTimeout() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n    segmentHandoffNotifierFactory.disableHandoff();\n\n    Assert.assertNull(driver.startJob());\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    driver.registerHandoff(published).get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/appenderator/StreamAppenderatorDriverTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void testSimple() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n\n    Assert.assertNull(driver.startJob());\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    final SegmentsAndMetadata segmentsAndMetadata = driver.registerHandoff(published)\n                                                          .get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            new SegmentIdWithShardSpec(DATA_SOURCE, Intervals.of(\"2000/PT1H\"), VERSION, new NumberedShardSpec(0, 0)),\n            new SegmentIdWithShardSpec(DATA_SOURCE, Intervals.of(\"2000T01/PT1H\"), VERSION, new NumberedShardSpec(0, 0))\n        ),\n        asIdentifiers(segmentsAndMetadata.getSegments())\n    );\n\n    Assert.assertEquals(3, segmentsAndMetadata.getCommitMetadata());\n  }\n","date":"2019-01-22 03:11:10","endLine":165,"groupId":"22831","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/692177fa9a10896610e1cf03ffa312c3a96a1a.src","preCode":"  public void testSimple() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n\n    Assert.assertNull(driver.startJob());\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    final SegmentsAndMetadata segmentsAndMetadata = driver.registerHandoff(published)\n                                                          .get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            new SegmentIdentifier(DATA_SOURCE, Intervals.of(\"2000/PT1H\"), VERSION, new NumberedShardSpec(0, 0)),\n            new SegmentIdentifier(DATA_SOURCE, Intervals.of(\"2000T01/PT1H\"), VERSION, new NumberedShardSpec(0, 0))\n        ),\n        asIdentifiers(segmentsAndMetadata.getSegments())\n    );\n\n    Assert.assertEquals(3, segmentsAndMetadata.getCommitMetadata());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/appenderator/StreamAppenderatorDriverTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testHandoffTimeout() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n    segmentHandoffNotifierFactory.disableHandoff();\n\n    Assert.assertNull(driver.startJob());\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    driver.registerHandoff(published).get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n  }\n","date":"2018-08-31 00:56:26","endLine":233,"groupId":"22831","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHandoffTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/1cc5700845e3f2998f277446e25cb7418c2957.src","preCode":"  public void testHandoffTimeout() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n    segmentHandoffNotifierFactory.disableHandoff();\n\n    Assert.assertNull(driver.startJob());\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    driver.registerHandoff(published).get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/appenderator/StreamAppenderatorDriverTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"N"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-07-25 08:35:46","codes":[{"authorDate":"2019-07-25 08:35:46","commitOrder":3,"curCode":"  public void testSimple() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n\n    Assert.assertNull(driver.startJob(null));\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    final SegmentsAndMetadata segmentsAndMetadata = driver.registerHandoff(published)\n                                                          .get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            new SegmentIdWithShardSpec(DATA_SOURCE, Intervals.of(\"2000/PT1H\"), VERSION, new NumberedShardSpec(0, 0)),\n            new SegmentIdWithShardSpec(DATA_SOURCE, Intervals.of(\"2000T01/PT1H\"), VERSION, new NumberedShardSpec(0, 0))\n        ),\n        asIdentifiers(segmentsAndMetadata.getSegments())\n    );\n\n    Assert.assertEquals(3, segmentsAndMetadata.getCommitMetadata());\n  }\n","date":"2019-07-25 08:35:46","endLine":165,"groupId":"22831","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0d/be905ad8f52f131421bfa47ef9b047ddc42373.src","preCode":"  public void testSimple() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n\n    Assert.assertNull(driver.startJob());\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    final SegmentsAndMetadata segmentsAndMetadata = driver.registerHandoff(published)\n                                                          .get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            new SegmentIdWithShardSpec(DATA_SOURCE, Intervals.of(\"2000/PT1H\"), VERSION, new NumberedShardSpec(0, 0)),\n            new SegmentIdWithShardSpec(DATA_SOURCE, Intervals.of(\"2000T01/PT1H\"), VERSION, new NumberedShardSpec(0, 0))\n        ),\n        asIdentifiers(segmentsAndMetadata.getSegments())\n    );\n\n    Assert.assertEquals(3, segmentsAndMetadata.getCommitMetadata());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/appenderator/StreamAppenderatorDriverTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2019-07-25 08:35:46","commitOrder":3,"curCode":"  public void testHandoffTimeout() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n    segmentHandoffNotifierFactory.disableHandoff();\n\n    Assert.assertNull(driver.startJob(null));\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    driver.registerHandoff(published).get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n  }\n","date":"2019-07-25 08:35:46","endLine":233,"groupId":"22831","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testHandoffTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0d/be905ad8f52f131421bfa47ef9b047ddc42373.src","preCode":"  public void testHandoffTimeout() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n    segmentHandoffNotifierFactory.disableHandoff();\n\n    Assert.assertNull(driver.startJob());\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    driver.registerHandoff(published).get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/appenderator/StreamAppenderatorDriverTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"}],"commitId":"db149462073d59e7563f0d3834e69d44a2bb4011","commitMessage":"@@@Add support minor compaction with segment locking (#7547)\n\n* Segment locking\n\n* Allow both timeChunk and segment lock in the same gruop\n\n* fix it test\n\n* Fix adding same chunk to atomicUpdateGroup\n\n* resolving todos\n\n* Fix segments to lock\n\n* fix segments to lock\n\n* fix kill task\n\n* resolving todos\n\n* resolving todos\n\n* fix teamcity\n\n* remove unused class\n\n* fix single map\n\n* resolving todos\n\n* fix build\n\n* fix SQLMetadataSegmentManager\n\n* fix findInputSegments\n\n* adding more tests\n\n* fixing task lock checks\n\n* add SegmentTransactionalOverwriteAction\n\n* changing publisher\n\n* fixing something\n\n* fix for perfect rollup\n\n* fix test\n\n* adjust package-lock.json\n\n* fix test\n\n* fix style\n\n* adding javadocs\n\n* remove unused classes\n\n* add more javadocs\n\n* unused import\n\n* fix test\n\n* fix test\n\n* Support forceTimeChunk context and force timeChunk lock for parallel index task if intervals are missing\n\n* fix travis\n\n* fix travis\n\n* unused import\n\n* spotbug\n\n* revert getMaxVersion\n\n* address comments\n\n* fix tc\n\n* add missing error handling\n\n* fix backward compatibility\n\n* unused import\n\n* Fix perf of versionedIntervalTimeline\n\n* fix timeline\n\n* fix tc\n\n* remove remaining todos\n\n* add comment for parallel index\n\n* fix javadoc and typos\n\n* typo\n\n* address comments\n","date":"2019-07-25 08:35:46","modifiedFileCount":"130","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-01-28 03:24:29","codes":[{"authorDate":"2020-01-28 03:24:29","commitOrder":4,"curCode":"  public void testSimple() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n\n    Assert.assertNull(driver.startJob(null));\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndCommitMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    final SegmentsAndCommitMetadata segmentsAndCommitMetadata = driver.registerHandoff(published)\n                                                                      .get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            new SegmentIdWithShardSpec(DATA_SOURCE, Intervals.of(\"2000/PT1H\"), VERSION, new NumberedShardSpec(0, 0)),\n            new SegmentIdWithShardSpec(DATA_SOURCE, Intervals.of(\"2000T01/PT1H\"), VERSION, new NumberedShardSpec(0, 0))\n        ),\n        asIdentifiers(segmentsAndCommitMetadata.getSegments())\n    );\n\n    Assert.assertEquals(3, segmentsAndCommitMetadata.getCommitMetadata());\n  }\n","date":"2020-01-28 03:24:29","endLine":165,"groupId":"10115","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1f/a7f370d9f00fc604624f500757c730636b4393.src","preCode":"  public void testSimple() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n\n    Assert.assertNull(driver.startJob(null));\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    final SegmentsAndMetadata segmentsAndMetadata = driver.registerHandoff(published)\n                                                          .get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    Assert.assertEquals(\n        ImmutableSet.of(\n            new SegmentIdWithShardSpec(DATA_SOURCE, Intervals.of(\"2000/PT1H\"), VERSION, new NumberedShardSpec(0, 0)),\n            new SegmentIdWithShardSpec(DATA_SOURCE, Intervals.of(\"2000T01/PT1H\"), VERSION, new NumberedShardSpec(0, 0))\n        ),\n        asIdentifiers(segmentsAndMetadata.getSegments())\n    );\n\n    Assert.assertEquals(3, segmentsAndMetadata.getCommitMetadata());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/appenderator/StreamAppenderatorDriverTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2020-01-28 03:24:29","commitOrder":4,"curCode":"  public void testHandoffTimeout() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n    segmentHandoffNotifierFactory.disableHandoff();\n\n    Assert.assertNull(driver.startJob(null));\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndCommitMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    driver.registerHandoff(published).get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n  }\n","date":"2020-01-28 03:24:29","endLine":233,"groupId":"10115","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testHandoffTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1f/a7f370d9f00fc604624f500757c730636b4393.src","preCode":"  public void testHandoffTimeout() throws Exception\n  {\n    final TestCommitterSupplier<Integer> committerSupplier = new TestCommitterSupplier<>();\n    segmentHandoffNotifierFactory.disableHandoff();\n\n    Assert.assertNull(driver.startJob(null));\n\n    for (int i = 0; i < ROWS.size(); i++) {\n      committerSupplier.setMetadata(i + 1);\n      Assert.assertTrue(driver.add(ROWS.get(i), \"dummy\", committerSupplier, false, true).isOk());\n    }\n\n    final SegmentsAndMetadata published = driver.publish(\n        makeOkPublisher(),\n        committerSupplier.get(),\n        ImmutableList.of(\"dummy\")\n    ).get(PUBLISH_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n\n    while (driver.getSegments().containsKey(\"dummy\")) {\n      Thread.sleep(100);\n    }\n\n    driver.registerHandoff(published).get(HANDOFF_CONDITION_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/appenderator/StreamAppenderatorDriverTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"}],"commitId":"b9186f8f9ff2ff52aceda42bc5f24ffd47a7d17e","commitMessage":"@@@Reconcile terminology and method naming to 'used/unused segments'; Rename MetadataSegmentManager to MetadataSegmentsManager (#7306)\n\n* Reconcile terminology and method naming to 'used/unused segments'; Don't use terms 'enable/disable data source'; Rename MetadataSegmentManager to MetadataSegments; Make REST API methods which mark segments as used/unused to return server error instead of an empty response in case of error\n\n* Fix brace\n\n* Import order\n\n* Rename withKillDataSourceWhitelist to withSpecificDataSourcesToKill\n\n* Fix tests\n\n* Fix tests by adding proper methods without interval parameters to IndexerMetadataStorageCoordinator instead of hacking with Intervals.ETERNITY\n\n* More aligned names of DruidCoordinatorHelpers.  rename several CoordinatorDynamicConfig parameters\n\n* Rename ClientCompactTaskQuery to ClientCompactionTaskQuery for consistency with CompactionTask; ClientCompactQueryTuningConfig to ClientCompactionTaskQueryTuningConfig\n\n* More variable and method renames\n\n* Rename MetadataSegments to SegmentsMetadata\n\n* Javadoc update\n\n* Simplify SegmentsMetadata.getUnusedSegmentIntervals().  more javadocs\n\n* Update Javadoc of VersionedIntervalTimeline.iterateAllObjects()\n\n* Reorder imports\n\n* Rename SegmentsMetadata.tryMark... methods to mark... and make them to return boolean and the numbers of segments changed and relay exceptions to callers\n\n* Complete merge\n\n* Add CollectionUtils.newTreeSet(); Refactor DruidCoordinatorRuntimeParams creation in tests\n\n* Remove MetadataSegmentManager\n\n* Rename millisLagSinceCoordinatorBecomesLeaderBeforeCanMarkAsUnusedOvershadowedSegments to leadingTimeMillisBeforeCanMarkAsUnusedOvershadowedSegments\n\n* Fix tests.  refactor DruidCluster creation in tests into DruidClusterBuilder\n\n* Fix inspections\n\n* Fix SQLMetadataSegmentManagerEmptyTest and rename it to SqlSegmentsMetadataEmptyTest\n\n* Rename SegmentsAndMetadata to SegmentsAndCommitMetadata to reduce the similarity with SegmentsMetadata; Rename some methods\n\n* Rename DruidCoordinatorHelper to CoordinatorDuty.  refactor DruidCoordinator\n\n* Unused import\n\n* Optimize imports\n\n* Rename IndexerSQLMetadataStorageCoordinator.getDataSourceMetadata() to retrieveDataSourceMetadata()\n\n* Unused import\n\n* Update terminology in datasource-view.tsx\n\n* Fix label in datasource-view.spec.tsx.snap\n\n* Fix lint errors in datasource-view.tsx\n\n* Doc improvements\n\n* Another attempt to please TSLint\n\n* Another attempt to please TSLint\n\n* Style fixes\n\n* Fix IndexerSQLMetadataStorageCoordinator.createUsedSegmentsSqlQueryForIntervals() (wrong merge)\n\n* Try to fix docs build issue\n\n* Javadoc and spelling fixes\n\n* Rename SegmentsMetadata to SegmentsMetadataManager.  address other comments\n\n* Address more comments\n","date":"2020-01-28 03:24:29","modifiedFileCount":"127","status":"M","submitter":"Roman Leventov"}]
