[{"authorTime":"2018-09-18 04:50:56","codes":[{"authorDate":"2018-09-22 08:58:19","commitOrder":3,"curCode":"  public void setUp() throws Exception\n  {\n    req = EasyMock.createMock(HttpServletRequest.class);\n    eventReceiverFirehoseFactory = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    firehose = (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory.connect(\n        new MapInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\n                    \"timestamp\",\n                    \"auto\",\n                    null\n                ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                null,\n                null\n            )\n        ),\n        null\n    );\n  }\n","date":"2018-09-22 08:58:19","endLine":85,"groupId":"897","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8d/2232aad6bd23bcf16852483599044695218410.src","preCode":"  public void setUp() throws Exception\n  {\n    req = EasyMock.createMock(HttpServletRequest.class);\n    eventReceiverFirehoseFactory = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    firehose = (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory.connect(\n        new MapInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\n                    \"timestamp\",\n                    \"auto\",\n                    null\n                ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                null,\n                null\n            )\n        ),\n        null\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/EventReceiverFirehoseIdleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2018-09-18 04:50:56","commitOrder":3,"curCode":"  public void testDuplicateRegistering()\n  {\n    EventReceiverFirehoseFactory eventReceiverFirehoseFactory2 = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    EventReceiverFirehoseFactory.EventReceiverFirehose firehose2 =\n        (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory2\n            .connect(\n                new MapInputRowParser(\n                    new JSONParseSpec(\n                        new TimestampSpec(\n                            \"timestamp\",\n                            \"auto\",\n                            null\n                        ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                        null,\n                        null\n                    )\n                ),\n                null\n            );\n  }\n","date":"2018-09-18 04:50:56","endLine":245,"groupId":"101","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDuplicateRegistering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/3c8ce061f4ecf86e7235efc9208fb4d02e8c58.src","preCode":"  public void testDuplicateRegistering()\n  {\n    EventReceiverFirehoseFactory eventReceiverFirehoseFactory2 = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    EventReceiverFirehoseFactory.EventReceiverFirehose firehose2 =\n        (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory2\n            .connect(\n                new MapInputRowParser(\n                    new JSONParseSpec(\n                        new TimestampSpec(\n                            \"timestamp\",\n                            \"auto\",\n                            null\n                        ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                        null,\n                        null\n                    )\n                ),\n                null\n            );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/EventReceiverFirehoseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"NB"}],"commitId":"364bf9d1f98114f3ae30e420ba593c67bc9504fa","commitMessage":"@@@Fix non org.apache.druid files and add package name checkstyle rule (#6367)\n\n* Fix non org.apache.druid files and add package name checkstyle rule\n\n* PR comment\n","date":"2018-09-22 08:58:19","modifiedFileCount":"3","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2019-03-05 05:50:03","codes":[{"authorDate":"2018-09-22 08:58:19","commitOrder":4,"curCode":"  public void setUp() throws Exception\n  {\n    req = EasyMock.createMock(HttpServletRequest.class);\n    eventReceiverFirehoseFactory = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    firehose = (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory.connect(\n        new MapInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\n                    \"timestamp\",\n                    \"auto\",\n                    null\n                ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                null,\n                null\n            )\n        ),\n        null\n    );\n  }\n","date":"2018-09-22 08:58:19","endLine":85,"groupId":"897","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8d/2232aad6bd23bcf16852483599044695218410.src","preCode":"  public void setUp() throws Exception\n  {\n    req = EasyMock.createMock(HttpServletRequest.class);\n    eventReceiverFirehoseFactory = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    firehose = (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory.connect(\n        new MapInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\n                    \"timestamp\",\n                    \"auto\",\n                    null\n                ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                null,\n                null\n            )\n        ),\n        null\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/EventReceiverFirehoseIdleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"N"},{"authorDate":"2019-03-05 05:50:03","commitOrder":4,"curCode":"  public void testDuplicateRegistering()\n  {\n    EventReceiverFirehoseFactory eventReceiverFirehoseFactory2 = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME_MILLIS,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    EventReceiverFirehoseFactory.EventReceiverFirehose firehose2 =\n        (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory2\n            .connect(\n                new MapInputRowParser(\n                    new JSONParseSpec(\n                        new TimestampSpec(\n                            \"timestamp\",\n                            \"auto\",\n                            null\n                        ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                        null,\n                        null\n                    )\n                ),\n                null\n            );\n  }\n","date":"2019-03-05 05:50:03","endLine":248,"groupId":"101","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDuplicateRegistering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e9/c7ee3a0c27e83d7f9888caec4875300a5f6608.src","preCode":"  public void testDuplicateRegistering()\n  {\n    EventReceiverFirehoseFactory eventReceiverFirehoseFactory2 = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    EventReceiverFirehoseFactory.EventReceiverFirehose firehose2 =\n        (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory2\n            .connect(\n                new MapInputRowParser(\n                    new JSONParseSpec(\n                        new TimestampSpec(\n                            \"timestamp\",\n                            \"auto\",\n                            null\n                        ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                        null,\n                        null\n                    )\n                ),\n                null\n            );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/EventReceiverFirehoseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"}],"commitId":"10c9f6d7086fc2bbccb8673bce55b1e711d131e7","commitMessage":"@@@Fix and document concurrency of EventReceiverFirehose and TimedShutoffFirehose; Refine concurrency specification of Firehose (#7038)\n\n\n# `EventReceiverFirehoseFactory`\nFixed several concurrency bugs in `EventReceiverFirehoseFactory`:\n - Race condition over putting an entry into `producerSequences` in `checkProducerSequence()`.\n - `Stopwatch` used to measure time across threads.  but it's a non-thread-safe class.\n - Use `System.nanoTime()` instead of `System.currentTimeMillis()` because the latter are [not suitable](https://stackoverflow.com/a/351571/648955)  for measuring time intervals.\n - `close()` was not synchronized by could be called from multiple threads concurrently.\n\nRemoved unnecessary `readLock` (protecting `hasMore()` and `nextRow()` which are always called from a single thread). Removed unnecessary `volatile` modifiers.\n\nDocumented threading model and concurrent control flow of `EventReceiverFirehose` instances.\n\n**Important:** please read the updated Javadoc for `EventReceiverFirehose.addAll()`. It allows events from different requests (batches) to be interleaved in the buffer. Is this OK?\n\n\n# `TimedShutoffFirehoseFactory`\n- Fixed a race condition that was possible because `close()` that was not properly synchronized.\n\nDocumented threading model and concurrent control flow of `TimedShutoffFirehose` instances.\n\n\n# `Firehose`\n\nRefined concurrency contract of `Firehose` based on `EventReceiverFirehose` implementation. Importantly.  now it states that `close()` doesn't affect `hasMore()` and `nextRow()` and could be called concurrently with them. In other words.  specified that `close()` is for \"row supply\" side rather than \"row consume\" side. However.  I didn't check that other `Firehose` implementatations adhere to this contract.\n\n<hr>\n\nThis issue is the result of reviewing `EventReceiverFirehose` and `TimedShutoffFirehose` using [this checklist](https://medium.com/@leventov/code-review-checklist-java-concurrency-49398c326154).","date":"2019-03-05 05:50:03","modifiedFileCount":"7","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-03-05 05:50:03","codes":[{"authorDate":"2019-03-26 08:11:01","commitOrder":5,"curCode":"  public void setUp()\n  {\n    req = EasyMock.createMock(HttpServletRequest.class);\n    eventReceiverFirehoseFactory = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    firehose = (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory.connect(\n        new MapInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\n                    \"timestamp\",\n                    \"auto\",\n                    null\n                ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                null,\n                null\n            )\n        ),\n        null\n    );\n  }\n","date":"2019-03-26 08:11:01","endLine":85,"groupId":"897","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/97/edb6a49ecb0c99250bfb4c4e25a00b62fbe149.src","preCode":"  public void setUp() throws Exception\n  {\n    req = EasyMock.createMock(HttpServletRequest.class);\n    eventReceiverFirehoseFactory = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    firehose = (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory.connect(\n        new MapInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\n                    \"timestamp\",\n                    \"auto\",\n                    null\n                ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                null,\n                null\n            )\n        ),\n        null\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/EventReceiverFirehoseIdleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2019-03-05 05:50:03","commitOrder":5,"curCode":"  public void testDuplicateRegistering()\n  {\n    EventReceiverFirehoseFactory eventReceiverFirehoseFactory2 = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME_MILLIS,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    EventReceiverFirehoseFactory.EventReceiverFirehose firehose2 =\n        (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory2\n            .connect(\n                new MapInputRowParser(\n                    new JSONParseSpec(\n                        new TimestampSpec(\n                            \"timestamp\",\n                            \"auto\",\n                            null\n                        ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                        null,\n                        null\n                    )\n                ),\n                null\n            );\n  }\n","date":"2019-03-05 05:50:03","endLine":248,"groupId":"101","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDuplicateRegistering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e9/c7ee3a0c27e83d7f9888caec4875300a5f6608.src","preCode":"  public void testDuplicateRegistering()\n  {\n    EventReceiverFirehoseFactory eventReceiverFirehoseFactory2 = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME_MILLIS,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    EventReceiverFirehoseFactory.EventReceiverFirehose firehose2 =\n        (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory2\n            .connect(\n                new MapInputRowParser(\n                    new JSONParseSpec(\n                        new TimestampSpec(\n                            \"timestamp\",\n                            \"auto\",\n                            null\n                        ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                        null,\n                        null\n                    )\n                ),\n                null\n            );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/EventReceiverFirehoseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"N"}],"commitId":"bca40dcdaf3177b95d01187f413e1c0c6865964b","commitMessage":"@@@Fix some IntelliJ inspections (#7273)\n\nPrepare TeamCity for IntelliJ 2018.3.1 upgrade. Mostly removed redundant exceptions declarations in `throws` clauses.","date":"2019-03-26 08:11:01","modifiedFileCount":"26","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-05-09 12:53:39","codes":[{"authorDate":"2020-05-09 12:53:39","commitOrder":6,"curCode":"  public void setUp()\n  {\n    req = EasyMock.createMock(HttpServletRequest.class);\n    eventReceiverFirehoseFactory = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    firehose = (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory.connect(\n        new MapInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\n                    \"timestamp\",\n                    \"auto\",\n                    null\n                ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                null,\n                null,\n                null\n            )\n        ),\n        null\n    );\n  }\n","date":"2020-05-09 12:53:39","endLine":86,"groupId":"10180","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/76/6c2a3596b70f9d2dae65dc97818eaa75f9c518.src","preCode":"  public void setUp()\n  {\n    req = EasyMock.createMock(HttpServletRequest.class);\n    eventReceiverFirehoseFactory = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    firehose = (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory.connect(\n        new MapInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\n                    \"timestamp\",\n                    \"auto\",\n                    null\n                ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                null,\n                null\n            )\n        ),\n        null\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/EventReceiverFirehoseIdleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2020-05-09 12:53:39","commitOrder":6,"curCode":"  public void testDuplicateRegistering()\n  {\n    EventReceiverFirehoseFactory eventReceiverFirehoseFactory2 = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME_MILLIS,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    EventReceiverFirehoseFactory.EventReceiverFirehose firehose2 =\n        (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory2\n            .connect(\n                new MapInputRowParser(\n                    new JSONParseSpec(\n                        new TimestampSpec(\n                            \"timestamp\",\n                            \"auto\",\n                            null\n                        ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                        null,\n                        null,\n                        null\n                    )\n                ),\n                null\n            );\n  }\n","date":"2020-05-09 12:53:39","endLine":250,"groupId":"10180","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testDuplicateRegistering","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/93/d259fab67634852624fa627a66cb630222ef42.src","preCode":"  public void testDuplicateRegistering()\n  {\n    EventReceiverFirehoseFactory eventReceiverFirehoseFactory2 = new EventReceiverFirehoseFactory(\n        SERVICE_NAME,\n        CAPACITY,\n        MAX_IDLE_TIME_MILLIS,\n        null,\n        new DefaultObjectMapper(),\n        new DefaultObjectMapper(),\n        register,\n        AuthTestUtils.TEST_AUTHORIZER_MAPPER\n    );\n    EventReceiverFirehoseFactory.EventReceiverFirehose firehose2 =\n        (EventReceiverFirehoseFactory.EventReceiverFirehose) eventReceiverFirehoseFactory2\n            .connect(\n                new MapInputRowParser(\n                    new JSONParseSpec(\n                        new TimestampSpec(\n                            \"timestamp\",\n                            \"auto\",\n                            null\n                        ), new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"d1\")), null, null),\n                        null,\n                        null\n                    )\n                ),\n                null\n            );\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/EventReceiverFirehoseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"}],"commitId":"28be107a1c18ef1fd9fd268c8b04e232efb63695","commitMessage":"@@@add flag to flattenSpec to keep null columns (#9814)\n\n* add flag to flattenSpec to keep null columns\n\n* remove changes to inputFormat interface\n\n* add comment\n\n* change comment message\n\n* update web console e2e test\n\n* move keepNullColmns to JSONParseSpec\n\n* fix merge conflicts\n\n* fix tests\n\n* set keepNullColumns to false by default\n\n* fix lgtm\n\n* change Boolean to boolean.  add keepNullColumns to hash.  add tests for keepKeepNullColumns false + true with no nuulul columns\n\n* Add equals verifier tests","date":"2020-05-09 12:53:39","modifiedFileCount":"41","status":"M","submitter":"mcbrewster"}]
