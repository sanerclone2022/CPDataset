[{"authorTime":"2019-11-26 14:31:19","codes":[{"authorDate":"2019-11-26 14:31:19","commitOrder":1,"curCode":"  public void testReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    addExpectedNonPrefixObjectsWithNoListPermission();\n    addExpectedGetObjectMock(EXPECTED_URIS.get(0));\n    addExpectedGetObjectMock(EXPECTED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_URIS.get(1)),\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n  }\n","date":"2019-11-26 14:31:19","endLine":297,"groupId":"20131","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1c/1bc01991233252d6f41fa74c5c3326f0ebdaa1.src","preCode":"  public void testReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    addExpectedNonPrefixObjectsWithNoListPermission();\n    addExpectedGetObjectMock(EXPECTED_URIS.get(0));\n    addExpectedGetObjectMock(EXPECTED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_URIS.get(1)),\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"B"},{"authorDate":"2019-11-26 14:31:19","commitOrder":1,"curCode":"  public void testCompressedReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(0)));\n    addExpectedNonPrefixObjectsWithNoListPermission();\n    addExpectedGetCompressedObjectMock(EXPECTED_COMPRESSED_URIS.get(0));\n    addExpectedGetCompressedObjectMock(EXPECTED_COMPRESSED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_COMPRESSED_URIS.get(1)),\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n  }\n","date":"2019-11-26 14:31:19","endLine":336,"groupId":"20131","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCompressedReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1c/1bc01991233252d6f41fa74c5c3326f0ebdaa1.src","preCode":"  public void testCompressedReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(0)));\n    addExpectedNonPrefixObjectsWithNoListPermission();\n    addExpectedGetCompressedObjectMock(EXPECTED_COMPRESSED_URIS.get(0));\n    addExpectedGetCompressedObjectMock(EXPECTED_COMPRESSED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_COMPRESSED_URIS.get(1)),\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"B"}],"commitId":"4458113375ee24cc11d8d5a3a6ddd3577d0571be","commitMessage":"@@@S3 input source (#8903)\n\n* add s3 input source for native batch ingestion\n\n* add docs\n\n* fixes\n\n* checkstyle\n\n* lazy splits\n\n* fixes and hella tests\n\n* fix it\n\n* re-use better iterator\n\n* use key\n\n* javadoc and checkstyle\n\n* exception\n\n* oops\n\n* refactor to use S3Coords instead of URI\n\n* remove unused code.  add retrying stream to handle s3 stream\n\n* remove unused parameter\n\n* update to latest master\n\n* use list of objects instead of object\n\n* serde test\n\n* refactor and such\n\n* now with the ability to compile\n\n* fix signature and javadocs\n\n* fix conflicts yet again.  fix S3 uri stuffs\n\n* more tests.  enforce uri for bucket\n\n* javadoc\n\n* oops\n\n* abstract class instead of interface\n\n* null or empty\n\n* better error\n","date":"2019-11-26 14:31:19","modifiedFileCount":"21","status":"B","submitter":"Clint Wylie"},{"authorTime":"2020-01-01 08:06:49","codes":[{"authorDate":"2020-01-01 08:06:49","commitOrder":2,"curCode":"  public void testReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(EXPECTED_URIS.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    expectGetObject(EXPECTED_URIS.get(0));\n    expectGetObject(EXPECTED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_URIS.get(1)),\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-01-01 08:06:49","endLine":303,"groupId":"20131","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4c/fca195d5960ea44c548fa1b51b5dc5b0f7fe7b.src","preCode":"  public void testReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    addExpectedNonPrefixObjectsWithNoListPermission();\n    addExpectedGetObjectMock(EXPECTED_URIS.get(0));\n    addExpectedGetObjectMock(EXPECTED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_URIS.get(1)),\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"},{"authorDate":"2020-01-01 08:06:49","commitOrder":2,"curCode":"  public void testCompressedReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(0)));\n    expectListObjects(EXPECTED_COMPRESSED_URIS.get(1), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(1)));\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(0));\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_COMPRESSED_URIS.get(1)),\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-01-01 08:06:49","endLine":344,"groupId":"20131","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCompressedReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4c/fca195d5960ea44c548fa1b51b5dc5b0f7fe7b.src","preCode":"  public void testCompressedReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(0)));\n    addExpectedNonPrefixObjectsWithNoListPermission();\n    addExpectedGetCompressedObjectMock(EXPECTED_COMPRESSED_URIS.get(0));\n    addExpectedGetCompressedObjectMock(EXPECTED_COMPRESSED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_COMPRESSED_URIS.get(1)),\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"M"}],"commitId":"18eb456fe6190e6db5d8e76324cc7b83cc4e0a35","commitMessage":"@@@S3: Improvements to prefix listing (including fix for an infinite loop) (#9098)\n\n* S3: Improvements to prefix listing (including fix for an infinite loop)\n\n1) Fixes #9097.  an infinite loop that occurs when more than one batch\n   of objects is retrieved during a prefix listing.\n\n2) Removes the Access Denied fallback code added in #4444. I don't think\n   the behavior is reasonable: its purpose is to fall back from a prefix\n   listing to a single-object access.  but it's only activated when the\n   end user supplied a prefix.  so it would be better to simply fail.  so\n   the end user knows that their request for a prefix-based load is not\n   going to work. Presumably the end user can switch from supplying\n   'prefixes' to supplying 'uris' if desired.\n\n3) Filters out directory placeholders when walking prefixes.\n\n4) Splits LazyObjectSummariesIterator into its own class and adds tests.\n\n* Adjust S3InputSourceTest.\n\n* Changes from review.\n\n* Include hamcrest-core.\n","date":"2020-01-01 08:06:49","modifiedFileCount":"5","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-02-22 06:12:03","codes":[{"authorDate":"2020-02-22 06:12:03","commitOrder":3,"curCode":"  public void testReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(EXPECTED_URIS.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    expectGetObject(EXPECTED_URIS.get(0));\n    expectGetObject(EXPECTED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        INPUT_DATA_CONFIG,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_URIS.get(1)),\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-02-22 06:12:03","endLine":318,"groupId":"20131","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ac/edc0c62969c66e5a10a048fe297e9f36eb9398.src","preCode":"  public void testReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(EXPECTED_URIS.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    expectGetObject(EXPECTED_URIS.get(0));\n    expectGetObject(EXPECTED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_URIS.get(1)),\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"},{"authorDate":"2020-02-22 06:12:03","commitOrder":3,"curCode":"  public void testCompressedReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(0)));\n    expectListObjects(EXPECTED_COMPRESSED_URIS.get(1), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(1)));\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(0));\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        INPUT_DATA_CONFIG,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_COMPRESSED_URIS.get(1)),\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-02-22 06:12:03","endLine":360,"groupId":"20131","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCompressedReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ac/edc0c62969c66e5a10a048fe297e9f36eb9398.src","preCode":"  public void testCompressedReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(0)));\n    expectListObjects(EXPECTED_COMPRESSED_URIS.get(1), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(1)));\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(0));\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_COMPRESSED_URIS.get(1)),\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"}],"commitId":"f707064bed89f668cf152ae18b445bceb540d529","commitMessage":"@@@Add Azure config options for segment prefix and max listing length (#9356)\n\n* Add Azure config options for segment prefix and max listing length\n\nAdded configuration options to allow the user to specify the prefix\nwithin the segment container to store the segment files. Also\nadded a configuration option to allow the user to specify the\nmaximum number of input files to stream for each iteration.\n\n* * Fix test failures\n\n* * Address review comments\n\n* * add dependency explicitly to pom\n\n* * update docs\n\n* * Address review comments\n\n* * Address review comments\n","date":"2020-02-22 06:12:03","modifiedFileCount":"22","status":"M","submitter":"zachjsh"},{"authorTime":"2020-02-26 12:59:53","codes":[{"authorDate":"2020-02-26 12:59:53","commitOrder":4,"curCode":"  public void testReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(EXPECTED_URIS.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    expectGetObject(EXPECTED_URIS.get(0));\n    expectGetObject(EXPECTED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_URIS.get(1)),\n        null,\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-02-26 12:59:53","endLine":500,"groupId":"20131","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/59/b6303eb28fdbec6fe5f42346074c71fd8451b0.src","preCode":"  public void testReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(EXPECTED_URIS.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    expectGetObject(EXPECTED_URIS.get(0));\n    expectGetObject(EXPECTED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        INPUT_DATA_CONFIG,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_URIS.get(1)),\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":459,"status":"M"},{"authorDate":"2020-02-26 12:59:53","commitOrder":4,"curCode":"  public void testCompressedReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(0)));\n    expectListObjects(EXPECTED_COMPRESSED_URIS.get(1), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(1)));\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(0));\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_COMPRESSED_URIS.get(1)),\n        null,\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-02-26 12:59:53","endLine":544,"groupId":"20131","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCompressedReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/59/b6303eb28fdbec6fe5f42346074c71fd8451b0.src","preCode":"  public void testCompressedReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(0)));\n    expectListObjects(EXPECTED_COMPRESSED_URIS.get(1), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(1)));\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(0));\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        INPUT_DATA_CONFIG,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_COMPRESSED_URIS.get(1)),\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":503,"status":"M"}],"commitId":"92fb83726b0275cb936fbed21a183c81b55df419","commitMessage":"@@@Add support for optional aws credentials for s3 for ingestion (#9375)\n\n* Add support for optional cloud (aws.  gcs.  etc.) credentials for s3 for ingestion\n\n* Add support for optional cloud (aws.  gcs.  etc.) credentials for s3 for ingestion\n\n* Add support for optional cloud (aws.  gcs.  etc.) credentials for s3 for ingestion\n\n* fix build failure\n\n* fix failing build\n\n* fix failing build\n\n* Code cleanup\n\n* fix failing test\n\n* Removed CloudConfigProperties and make specific class for each cloudInputSource\n\n* Removed CloudConfigProperties and make specific class for each cloudInputSource\n\n* pass s3ConfigProperties for split\n\n* lazy init s3client\n\n* update docs\n\n* fix docs check\n\n* address comments\n\n* add ServerSideEncryptingAmazonS3.Builder\n\n* fix failing checkstyle\n\n* fix typo\n\n* wrap the ServerSideEncryptingAmazonS3.Builder in a provider\n\n* added java docs for S3InputSource constructor\n\n* added java docs for S3InputSource constructor\n\n* remove wrap the ServerSideEncryptingAmazonS3.Builder in a provider\n","date":"2020-02-26 12:59:53","modifiedFileCount":"5","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-03-04 12:51:06","codes":[{"authorDate":"2020-03-04 12:51:06","commitOrder":5,"curCode":"  public void testReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)), CONTENT);\n    expectListObjects(EXPECTED_URIS.get(1), ImmutableList.of(EXPECTED_URIS.get(1)), CONTENT);\n    expectGetObject(EXPECTED_URIS.get(0));\n    expectGetObject(EXPECTED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_URIS.get(1)),\n        null,\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-03-04 12:51:06","endLine":530,"groupId":"20131","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/12/2f4fd6a56b242c5a558bc20248a2ffa62af036.src","preCode":"  public void testReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(EXPECTED_URIS.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    expectGetObject(EXPECTED_URIS.get(0));\n    expectGetObject(EXPECTED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_URIS.get(1)),\n        null,\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"M"},{"authorDate":"2020-03-04 12:51:06","commitOrder":5,"curCode":"  public void testCompressedReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(0)), CONTENT);\n    expectListObjects(EXPECTED_COMPRESSED_URIS.get(1), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(1)), CONTENT);\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(0));\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_COMPRESSED_URIS.get(1)),\n        null,\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-03-04 12:51:06","endLine":574,"groupId":"20131","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCompressedReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/12/2f4fd6a56b242c5a558bc20248a2ffa62af036.src","preCode":"  public void testCompressedReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(0)));\n    expectListObjects(EXPECTED_COMPRESSED_URIS.get(1), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(1)));\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(0));\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_COMPRESSED_URIS.get(1)),\n        null,\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":533,"status":"M"}],"commitId":"9466ac7c9b2b1d86b06cfa7c7f5eeb35d588dd22","commitMessage":"@@@Skip empty files for local.  hdfs.  and cloud input sources (#9450)\n\n* Skip empty files for local.  hdfs.  and cloud input sources\n\n* split hint spec doc\n\n* doc for skipping empty files\n\n* fix typo; adjust tests\n\n* unnecessary fluent iterable\n\n* address comments\n\n* fix test\n\n* use the right lists\n\n* fix test\n\n* fix test\n","date":"2020-03-04 12:51:06","modifiedFileCount":"16","status":"M","submitter":"Jihoon Son"},{"authorTime":"2021-03-26 01:32:21","codes":[{"authorDate":"2021-03-26 01:32:21","commitOrder":6,"curCode":"  public void testReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)), CONTENT);\n    expectListObjects(EXPECTED_URIS.get(1), ImmutableList.of(EXPECTED_URIS.get(1)), CONTENT);\n    expectGetObject(EXPECTED_URIS.get(0));\n    expectGetObject(EXPECTED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_URIS.get(1)),\n        null,\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ColumnsFilter.all()\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2021-03-26 01:32:21","endLine":532,"groupId":"102884","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/41/a5f8a36c8b9dd24527a7179bf2bbb1c66e2b32.src","preCode":"  public void testReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)), CONTENT);\n    expectListObjects(EXPECTED_URIS.get(1), ImmutableList.of(EXPECTED_URIS.get(1)), CONTENT);\n    expectGetObject(EXPECTED_URIS.get(0));\n    expectGetObject(EXPECTED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_URIS.get(1)),\n        null,\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":491,"status":"M"},{"authorDate":"2021-03-26 01:32:21","commitOrder":6,"curCode":"  public void testCompressedReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(0)), CONTENT);\n    expectListObjects(EXPECTED_COMPRESSED_URIS.get(1), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(1)), CONTENT);\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(0));\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_COMPRESSED_URIS.get(1)),\n        null,\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ColumnsFilter.all()\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2021-03-26 01:32:21","endLine":576,"groupId":"102884","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCompressedReader","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/41/a5f8a36c8b9dd24527a7179bf2bbb1c66e2b32.src","preCode":"  public void testCompressedReader() throws IOException\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(0)), CONTENT);\n    expectListObjects(EXPECTED_COMPRESSED_URIS.get(1), ImmutableList.of(EXPECTED_COMPRESSED_URIS.get(1)), CONTENT);\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(0));\n    expectGetObjectCompressed(EXPECTED_COMPRESSED_URIS.get(1));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        ImmutableList.of(PREFIXES.get(0), EXPECTED_COMPRESSED_URIS.get(1)),\n        null,\n        null\n    );\n\n    InputRowSchema someSchema = new InputRowSchema(\n        new TimestampSpec(\"time\", \"auto\", null),\n        new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dim1\", \"dim2\"))),\n        ImmutableList.of(\"count\")\n    );\n\n    InputSourceReader reader = inputSource.reader(\n        someSchema,\n        new CsvInputFormat(ImmutableList.of(\"time\", \"dim1\", \"dim2\"), \"|\", false, null, 0),\n        temporaryFolder.newFolder()\n    );\n\n    CloseableIterator<InputRow> iterator = reader.read();\n\n    while (iterator.hasNext()) {\n      InputRow nextRow = iterator.next();\n      Assert.assertEquals(NOW, nextRow.getTimestamp());\n      Assert.assertEquals(\"hello\", nextRow.getDimension(\"dim1\").get(0));\n      Assert.assertEquals(\"world\", nextRow.getDimension(\"dim2\").get(0));\n    }\n\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":535,"status":"M"}],"commitId":"bf20f9e9798417c9293a195690b6adcb48f44d3f","commitMessage":"@@@DruidInputSource: Fix issues in column projection.  timestamp handling. (#10267)\n\n* DruidInputSource: Fix issues in column projection.  timestamp handling.\n\nDruidInputSource.  DruidSegmentReader changes:\n\n1) Remove \"dimensions\" and \"metrics\". They are not necessary.  because we\n   can compute which columns we need to read based on what is going to\n   be used by the timestamp.  transform.  dimensions.  and metrics.\n2) Start using ColumnsFilter (see below) to decide which columns we need\n   to read.\n3) Actually respect the \"timestampSpec\". Previously.  it was ignored.  and\n   the timestamp of the returned InputRows was set to the `__time` column\n   of the input datasource.\n\n(1) and (2) together fix a bug in which the DruidInputSource would not\nproperly read columns that are used as inputs to a transformSpec.\n\n(3) fixes a bug where the timestampSpec would be ignored if you attempted\nto set the column to something other than `__time`.\n\n(1) and (3) are breaking changes.\n\nWeb console changes:\n\n1) Remove \"Dimensions\" and \"Metrics\" from the Druid input source.\n2) Set timestampSpec to `{\"column\": \"__time\".  \"format\": \"millis\"}` for\n   compatibility with the new behavior.\n\nOther changes:\n\n1) Add ColumnsFilter.  a new class that allows input readers to determine\n   which columns they need to read. Currently.  it's only used by the\n   DruidInputSource.  but it could be used by other columnar input sources\n   in the future.\n2) Add a ColumnsFilter to InputRowSchema.\n3) Remove the metric names from InputRowSchema (they were unused).\n4) Add InputRowSchemas.fromDataSchema method that computes the proper\n   ColumnsFilter for given timestamp.  dimensions.  transform.  and metrics.\n5) Add \"getRequiredColumns\" method to TransformSpec to support the above.\n\n* Various fixups.\n\n* Uncomment incorrectly commented lines.\n\n* Move TransformSpecTest to the proper module.\n\n* Add druid.indexer.task.ignoreTimestampSpecForDruidInputSource setting.\n\n* Fix.\n\n* Fix build.\n\n* Checkstyle.\n\n* Misc fixes.\n\n* Fix test.\n\n* Move config.\n\n* Fix imports.\n\n* Fixup.\n\n* Fix ShuffleResourceTest.\n\n* Add import.\n\n* Smarter exclusions.\n\n* Fixes based on tests.\n\nAlso.  add TIME_COLUMN constant in the web console.\n\n* Adjustments for tests.\n\n* Reorder test data.\n\n* Update docs.\n\n* Update docs to say Druid 0.22.0 instead of 0.21.0.\n\n* Fix test.\n\n* Fix ITAutoCompactionTest.\n\n* Changes from review & from merging.","date":"2021-03-26 01:32:21","modifiedFileCount":"60","status":"M","submitter":"Gian Merlino"}]
