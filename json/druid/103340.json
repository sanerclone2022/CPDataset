[{"authorTime":"2019-01-18 06:51:16","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":3,"curCode":"  public static Iterable<Object[]> constructorFeeder()\n  {\n    final GroupByQueryConfig v1Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1\";\n      }\n    };\n    final GroupByQueryConfig v1SingleThreadedConfig = new GroupByQueryConfig()\n    {\n      @Override\n      public boolean isSingleThreaded()\n      {\n        return true;\n      }\n\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1SingleThreaded\";\n      }\n    };\n    final GroupByQueryConfig v2Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V2;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v2\";\n      }\n    };\n\n    v1Config.setMaxIntermediateRows(10000);\n    v1SingleThreadedConfig.setMaxIntermediateRows(10000);\n\n    final List<Object[]> constructors = new ArrayList<>();\n    final List<GroupByQueryConfig> configs = ImmutableList.of(\n        v1Config,\n        v1SingleThreadedConfig,\n        v2Config\n    );\n\n    for (GroupByQueryConfig config : configs) {\n      final Pair<GroupByQueryRunnerFactory, Closer> factoryAndCloser = GroupByQueryRunnerTest.makeQueryRunnerFactory(\n          config\n      );\n      final GroupByQueryRunnerFactory factory = factoryAndCloser.lhs;\n      resourceCloser.register(factoryAndCloser.rhs);\n      for (QueryRunner<Row> runner : QueryRunnerTestHelper.makeQueryRunners(factory)) {\n        final String testName = StringUtils.format(\n            \"config=%s, runner=%s\",\n            config.toString(),\n            runner.toString()\n        );\n        constructors.add(new Object[]{testName, factory, runner});\n      }\n    }\n\n    return constructors;\n  }\n","date":"2018-10-29 20:02:43","endLine":138,"groupId":"17276","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"constructorFeeder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/61/acb6c7cc828fc1ce46871832354b876f83ba32.src","preCode":"  public static Iterable<Object[]> constructorFeeder()\n  {\n    final GroupByQueryConfig v1Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1\";\n      }\n    };\n    final GroupByQueryConfig v1SingleThreadedConfig = new GroupByQueryConfig()\n    {\n      @Override\n      public boolean isSingleThreaded()\n      {\n        return true;\n      }\n\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1SingleThreaded\";\n      }\n    };\n    final GroupByQueryConfig v2Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V2;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v2\";\n      }\n    };\n\n    v1Config.setMaxIntermediateRows(10000);\n    v1SingleThreadedConfig.setMaxIntermediateRows(10000);\n\n    final List<Object[]> constructors = new ArrayList<>();\n    final List<GroupByQueryConfig> configs = ImmutableList.of(\n        v1Config,\n        v1SingleThreadedConfig,\n        v2Config\n    );\n\n    for (GroupByQueryConfig config : configs) {\n      final Pair<GroupByQueryRunnerFactory, Closer> factoryAndCloser = GroupByQueryRunnerTest.makeQueryRunnerFactory(\n          config\n      );\n      final GroupByQueryRunnerFactory factory = factoryAndCloser.lhs;\n      resourceCloser.register(factoryAndCloser.rhs);\n      for (QueryRunner<Row> runner : QueryRunnerTestHelper.makeQueryRunners(factory)) {\n        final String testName = StringUtils.format(\n            \"config=%s, runner=%s\",\n            config.toString(),\n            runner.toString()\n        );\n        constructors.add(new Object[]{testName, factory, runner});\n      }\n    }\n\n    return constructors;\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogramGroupByQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"NB"},{"authorDate":"2019-01-18 06:51:16","commitOrder":3,"curCode":"  public static Iterable<Object[]> constructorFeeder()\n  {\n    final GroupByQueryConfig v1Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1\";\n      }\n    };\n    final GroupByQueryConfig v1SingleThreadedConfig = new GroupByQueryConfig()\n    {\n      @Override\n      public boolean isSingleThreaded()\n      {\n        return true;\n      }\n\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1SingleThreaded\";\n      }\n    };\n    final GroupByQueryConfig v2Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V2;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v2\";\n      }\n    };\n\n    v1Config.setMaxIntermediateRows(10000);\n    v1SingleThreadedConfig.setMaxIntermediateRows(10000);\n\n    final List<Object[]> constructors = new ArrayList<>();\n    final List<GroupByQueryConfig> configs = ImmutableList.of(\n        v1Config,\n        v1SingleThreadedConfig,\n        v2Config\n    );\n\n    for (GroupByQueryConfig config : configs) {\n      final Pair<GroupByQueryRunnerFactory, Closer> factoryAndCloser = GroupByQueryRunnerTest.makeQueryRunnerFactory(\n          config\n      );\n      final GroupByQueryRunnerFactory factory = factoryAndCloser.lhs;\n      resourceCloser.register(factoryAndCloser.rhs);\n      for (QueryRunner<Row> runner : QueryRunnerTestHelper.makeQueryRunners(factory)) {\n        final String testName = StringUtils.format(\n            \"config=%s, runner=%s\",\n            config.toString(),\n            runner.toString()\n        );\n        constructors.add(new Object[]{testName, factory, runner});\n      }\n    }\n\n    return constructors;\n  }\n","date":"2019-01-18 06:51:16","endLine":138,"groupId":"17276","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"constructorFeeder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4e/e5283502fc72ab649146de7dd39a7ff73cc42f.src","preCode":"  public static Iterable<Object[]> constructorFeeder()\n  {\n    final GroupByQueryConfig v1Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1\";\n      }\n    };\n    final GroupByQueryConfig v1SingleThreadedConfig = new GroupByQueryConfig()\n    {\n      @Override\n      public boolean isSingleThreaded()\n      {\n        return true;\n      }\n\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1SingleThreaded\";\n      }\n    };\n    final GroupByQueryConfig v2Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V2;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v2\";\n      }\n    };\n\n    v1Config.setMaxIntermediateRows(10000);\n    v1SingleThreadedConfig.setMaxIntermediateRows(10000);\n\n    final List<Object[]> constructors = new ArrayList<>();\n    final List<GroupByQueryConfig> configs = ImmutableList.of(\n        v1Config,\n        v1SingleThreadedConfig,\n        v2Config\n    );\n\n    for (GroupByQueryConfig config : configs) {\n      final Pair<GroupByQueryRunnerFactory, Closer> factoryAndCloser = GroupByQueryRunnerTest.makeQueryRunnerFactory(\n          config\n      );\n      final GroupByQueryRunnerFactory factory = factoryAndCloser.lhs;\n      resourceCloser.register(factoryAndCloser.rhs);\n      for (QueryRunner<Row> runner : QueryRunnerTestHelper.makeQueryRunners(factory)) {\n        final String testName = StringUtils.format(\n            \"config=%s, runner=%s\",\n            config.toString(),\n            runner.toString()\n        );\n        constructors.add(new Object[]{testName, factory, runner});\n      }\n    }\n\n    return constructors;\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramGroupByQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"}],"commitId":"68f744ec0ae573f17fc140f2e468869605e77fb6","commitMessage":"@@@Fixed buckets histogram aggregator (#6638)\n\n* Fixed buckets histogram aggregator\n\n* PR comments\n\n* More PR comments\n\n* Checkstyle\n\n* TeamCity\n\n* More TeamCity\n\n* PR comment\n\n* PR comment\n\n* Fix doc formatting\n","date":"2019-01-18 06:51:16","modifiedFileCount":"9","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2019-08-01 07:15:12","codes":[{"authorDate":"2019-08-01 07:15:12","commitOrder":4,"curCode":"  public static Iterable<Object[]> constructorFeeder()\n  {\n    final GroupByQueryConfig v1Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1\";\n      }\n    };\n    final GroupByQueryConfig v1SingleThreadedConfig = new GroupByQueryConfig()\n    {\n      @Override\n      public boolean isSingleThreaded()\n      {\n        return true;\n      }\n\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1SingleThreaded\";\n      }\n    };\n    final GroupByQueryConfig v2Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V2;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v2\";\n      }\n    };\n\n    v1Config.setMaxIntermediateRows(10000);\n    v1SingleThreadedConfig.setMaxIntermediateRows(10000);\n\n    final List<Object[]> constructors = new ArrayList<>();\n    final List<GroupByQueryConfig> configs = ImmutableList.of(\n        v1Config,\n        v1SingleThreadedConfig,\n        v2Config\n    );\n\n    for (GroupByQueryConfig config : configs) {\n      final Pair<GroupByQueryRunnerFactory, Closer> factoryAndCloser = GroupByQueryRunnerTest.makeQueryRunnerFactory(\n          config\n      );\n      final GroupByQueryRunnerFactory factory = factoryAndCloser.lhs;\n      resourceCloser.register(factoryAndCloser.rhs);\n      for (QueryRunner<ResultRow> runner : QueryRunnerTestHelper.makeQueryRunners(factory)) {\n        final String testName = StringUtils.format(\n            \"config=%s, runner=%s\",\n            config.toString(),\n            runner.toString()\n        );\n        constructors.add(new Object[]{testName, factory, runner});\n      }\n    }\n\n    return constructors;\n  }\n","date":"2019-08-01 07:15:12","endLine":139,"groupId":"17276","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"constructorFeeder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/24/5fde24a27bab55b96f48ad3cbfed08b9863e5b.src","preCode":"  public static Iterable<Object[]> constructorFeeder()\n  {\n    final GroupByQueryConfig v1Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1\";\n      }\n    };\n    final GroupByQueryConfig v1SingleThreadedConfig = new GroupByQueryConfig()\n    {\n      @Override\n      public boolean isSingleThreaded()\n      {\n        return true;\n      }\n\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1SingleThreaded\";\n      }\n    };\n    final GroupByQueryConfig v2Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V2;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v2\";\n      }\n    };\n\n    v1Config.setMaxIntermediateRows(10000);\n    v1SingleThreadedConfig.setMaxIntermediateRows(10000);\n\n    final List<Object[]> constructors = new ArrayList<>();\n    final List<GroupByQueryConfig> configs = ImmutableList.of(\n        v1Config,\n        v1SingleThreadedConfig,\n        v2Config\n    );\n\n    for (GroupByQueryConfig config : configs) {\n      final Pair<GroupByQueryRunnerFactory, Closer> factoryAndCloser = GroupByQueryRunnerTest.makeQueryRunnerFactory(\n          config\n      );\n      final GroupByQueryRunnerFactory factory = factoryAndCloser.lhs;\n      resourceCloser.register(factoryAndCloser.rhs);\n      for (QueryRunner<Row> runner : QueryRunnerTestHelper.makeQueryRunners(factory)) {\n        final String testName = StringUtils.format(\n            \"config=%s, runner=%s\",\n            config.toString(),\n            runner.toString()\n        );\n        constructors.add(new Object[]{testName, factory, runner});\n      }\n    }\n\n    return constructors;\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogramGroupByQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-08-01 07:15:12","commitOrder":4,"curCode":"  public static Iterable<Object[]> constructorFeeder()\n  {\n    final GroupByQueryConfig v1Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1\";\n      }\n    };\n    final GroupByQueryConfig v1SingleThreadedConfig = new GroupByQueryConfig()\n    {\n      @Override\n      public boolean isSingleThreaded()\n      {\n        return true;\n      }\n\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1SingleThreaded\";\n      }\n    };\n    final GroupByQueryConfig v2Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V2;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v2\";\n      }\n    };\n\n    v1Config.setMaxIntermediateRows(10000);\n    v1SingleThreadedConfig.setMaxIntermediateRows(10000);\n\n    final List<Object[]> constructors = new ArrayList<>();\n    final List<GroupByQueryConfig> configs = ImmutableList.of(\n        v1Config,\n        v1SingleThreadedConfig,\n        v2Config\n    );\n\n    for (GroupByQueryConfig config : configs) {\n      final Pair<GroupByQueryRunnerFactory, Closer> factoryAndCloser = GroupByQueryRunnerTest.makeQueryRunnerFactory(\n          config\n      );\n      final GroupByQueryRunnerFactory factory = factoryAndCloser.lhs;\n      resourceCloser.register(factoryAndCloser.rhs);\n      for (QueryRunner<ResultRow> runner : QueryRunnerTestHelper.makeQueryRunners(factory)) {\n        final String testName = StringUtils.format(\n            \"config=%s, runner=%s\",\n            config.toString(),\n            runner.toString()\n        );\n        constructors.add(new Object[]{testName, factory, runner});\n      }\n    }\n\n    return constructors;\n  }\n","date":"2019-08-01 07:15:12","endLine":139,"groupId":"17276","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"constructorFeeder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/92/9a3469fc0c84aa544aa3cac8ca54e7a6f6fb46.src","preCode":"  public static Iterable<Object[]> constructorFeeder()\n  {\n    final GroupByQueryConfig v1Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1\";\n      }\n    };\n    final GroupByQueryConfig v1SingleThreadedConfig = new GroupByQueryConfig()\n    {\n      @Override\n      public boolean isSingleThreaded()\n      {\n        return true;\n      }\n\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1SingleThreaded\";\n      }\n    };\n    final GroupByQueryConfig v2Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V2;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v2\";\n      }\n    };\n\n    v1Config.setMaxIntermediateRows(10000);\n    v1SingleThreadedConfig.setMaxIntermediateRows(10000);\n\n    final List<Object[]> constructors = new ArrayList<>();\n    final List<GroupByQueryConfig> configs = ImmutableList.of(\n        v1Config,\n        v1SingleThreadedConfig,\n        v2Config\n    );\n\n    for (GroupByQueryConfig config : configs) {\n      final Pair<GroupByQueryRunnerFactory, Closer> factoryAndCloser = GroupByQueryRunnerTest.makeQueryRunnerFactory(\n          config\n      );\n      final GroupByQueryRunnerFactory factory = factoryAndCloser.lhs;\n      resourceCloser.register(factoryAndCloser.rhs);\n      for (QueryRunner<Row> runner : QueryRunnerTestHelper.makeQueryRunners(factory)) {\n        final String testName = StringUtils.format(\n            \"config=%s, runner=%s\",\n            config.toString(),\n            runner.toString()\n        );\n        constructors.add(new Object[]{testName, factory, runner});\n      }\n    }\n\n    return constructors;\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramGroupByQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"77297f4e6f2e9d617c96cd46852bb5a772961e85","commitMessage":"@@@GroupBy array-based result rows. (#8196)\n\n* GroupBy array-based result rows.\n\nFixes #8118; see that proposal for details.\n\nOther than the GroupBy changes.  the main other \"interesting\" classes are:\n\n- ResultRow: The array-based result type.\n- BaseQuery: T is no longer required to be Comparable.\n- QueryToolChest: Adds \"decorateObjectMapper\" to enable query-aware serialization\n  and deserialization of result rows (necessary due to their positional nature).\n- QueryResource: Uses the new decoration functionality.\n- DirectDruidClient: Also uses the new decoration functionality.\n- QueryMaker (in Druid SQL): Modifications to read ResultRows.\n\nThese classes weren't changed.  but got some new javadocs:\n\n- BySegmentQueryRunner\n- FinalizeResultsQueryRunner\n- Query\n\n* Adjustments for TC stuff.\n","date":"2019-08-01 07:15:12","modifiedFileCount":"111","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":5,"curCode":"  public static Iterable<Object[]> constructorFeeder()\n  {\n    final GroupByQueryConfig v1Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1\";\n      }\n    };\n    final GroupByQueryConfig v1SingleThreadedConfig = new GroupByQueryConfig()\n    {\n      @Override\n      public boolean isSingleThreaded()\n      {\n        return true;\n      }\n\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1SingleThreaded\";\n      }\n    };\n    final GroupByQueryConfig v2Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V2;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v2\";\n      }\n    };\n\n    v1Config.setMaxIntermediateRows(10000);\n    v1SingleThreadedConfig.setMaxIntermediateRows(10000);\n\n    final List<Object[]> constructors = new ArrayList<>();\n    final List<GroupByQueryConfig> configs = ImmutableList.of(\n        v1Config,\n        v1SingleThreadedConfig,\n        v2Config\n    );\n\n    for (GroupByQueryConfig config : configs) {\n      final Pair<GroupByQueryRunnerFactory, Closer> factoryAndCloser = GroupByQueryRunnerTest.makeQueryRunnerFactory(\n          config\n      );\n      final GroupByQueryRunnerFactory factory = factoryAndCloser.lhs;\n      RESOURCE_CLOSER.register(factoryAndCloser.rhs);\n      for (QueryRunner<ResultRow> runner : QueryRunnerTestHelper.makeQueryRunners(factory)) {\n        final String testName = StringUtils.format(\n            \"config=%s, runner=%s\",\n            config.toString(),\n            runner.toString()\n        );\n        constructors.add(new Object[]{testName, factory, runner});\n      }\n    }\n\n    return constructors;\n  }\n","date":"2019-08-23 18:13:54","endLine":139,"groupId":"103340","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"constructorFeeder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d2/5b7ed7227a34810dd458570111c12d49aafb39.src","preCode":"  public static Iterable<Object[]> constructorFeeder()\n  {\n    final GroupByQueryConfig v1Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1\";\n      }\n    };\n    final GroupByQueryConfig v1SingleThreadedConfig = new GroupByQueryConfig()\n    {\n      @Override\n      public boolean isSingleThreaded()\n      {\n        return true;\n      }\n\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1SingleThreaded\";\n      }\n    };\n    final GroupByQueryConfig v2Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V2;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v2\";\n      }\n    };\n\n    v1Config.setMaxIntermediateRows(10000);\n    v1SingleThreadedConfig.setMaxIntermediateRows(10000);\n\n    final List<Object[]> constructors = new ArrayList<>();\n    final List<GroupByQueryConfig> configs = ImmutableList.of(\n        v1Config,\n        v1SingleThreadedConfig,\n        v2Config\n    );\n\n    for (GroupByQueryConfig config : configs) {\n      final Pair<GroupByQueryRunnerFactory, Closer> factoryAndCloser = GroupByQueryRunnerTest.makeQueryRunnerFactory(\n          config\n      );\n      final GroupByQueryRunnerFactory factory = factoryAndCloser.lhs;\n      resourceCloser.register(factoryAndCloser.rhs);\n      for (QueryRunner<ResultRow> runner : QueryRunnerTestHelper.makeQueryRunners(factory)) {\n        final String testName = StringUtils.format(\n            \"config=%s, runner=%s\",\n            config.toString(),\n            runner.toString()\n        );\n        constructors.add(new Object[]{testName, factory, runner});\n      }\n    }\n\n    return constructors;\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogramGroupByQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":5,"curCode":"  public static Iterable<Object[]> constructorFeeder()\n  {\n    final GroupByQueryConfig v1Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1\";\n      }\n    };\n    final GroupByQueryConfig v1SingleThreadedConfig = new GroupByQueryConfig()\n    {\n      @Override\n      public boolean isSingleThreaded()\n      {\n        return true;\n      }\n\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1SingleThreaded\";\n      }\n    };\n    final GroupByQueryConfig v2Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V2;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v2\";\n      }\n    };\n\n    v1Config.setMaxIntermediateRows(10000);\n    v1SingleThreadedConfig.setMaxIntermediateRows(10000);\n\n    final List<Object[]> constructors = new ArrayList<>();\n    final List<GroupByQueryConfig> configs = ImmutableList.of(\n        v1Config,\n        v1SingleThreadedConfig,\n        v2Config\n    );\n\n    for (GroupByQueryConfig config : configs) {\n      final Pair<GroupByQueryRunnerFactory, Closer> factoryAndCloser = GroupByQueryRunnerTest.makeQueryRunnerFactory(\n          config\n      );\n      final GroupByQueryRunnerFactory factory = factoryAndCloser.lhs;\n      RESOURCE_CLOSER.register(factoryAndCloser.rhs);\n      for (QueryRunner<ResultRow> runner : QueryRunnerTestHelper.makeQueryRunners(factory)) {\n        final String testName = StringUtils.format(\n            \"config=%s, runner=%s\",\n            config.toString(),\n            runner.toString()\n        );\n        constructors.add(new Object[]{testName, factory, runner});\n      }\n    }\n\n    return constructors;\n  }\n","date":"2019-08-23 18:13:54","endLine":139,"groupId":"103340","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"constructorFeeder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/03/301f5f8a64cbd2cc42412323a8afff0eb781da.src","preCode":"  public static Iterable<Object[]> constructorFeeder()\n  {\n    final GroupByQueryConfig v1Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1\";\n      }\n    };\n    final GroupByQueryConfig v1SingleThreadedConfig = new GroupByQueryConfig()\n    {\n      @Override\n      public boolean isSingleThreaded()\n      {\n        return true;\n      }\n\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V1;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v1SingleThreaded\";\n      }\n    };\n    final GroupByQueryConfig v2Config = new GroupByQueryConfig()\n    {\n      @Override\n      public String getDefaultStrategy()\n      {\n        return GroupByStrategySelector.STRATEGY_V2;\n      }\n\n      @Override\n      public String toString()\n      {\n        return \"v2\";\n      }\n    };\n\n    v1Config.setMaxIntermediateRows(10000);\n    v1SingleThreadedConfig.setMaxIntermediateRows(10000);\n\n    final List<Object[]> constructors = new ArrayList<>();\n    final List<GroupByQueryConfig> configs = ImmutableList.of(\n        v1Config,\n        v1SingleThreadedConfig,\n        v2Config\n    );\n\n    for (GroupByQueryConfig config : configs) {\n      final Pair<GroupByQueryRunnerFactory, Closer> factoryAndCloser = GroupByQueryRunnerTest.makeQueryRunnerFactory(\n          config\n      );\n      final GroupByQueryRunnerFactory factory = factoryAndCloser.lhs;\n      resourceCloser.register(factoryAndCloser.rhs);\n      for (QueryRunner<ResultRow> runner : QueryRunnerTestHelper.makeQueryRunners(factory)) {\n        final String testName = StringUtils.format(\n            \"config=%s, runner=%s\",\n            config.toString(),\n            runner.toString()\n        );\n        constructors.add(new Object[]{testName, factory, runner});\n      }\n    }\n\n    return constructors;\n  }\n","realPath":"extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramGroupByQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
