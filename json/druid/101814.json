[{"authorTime":"2020-06-02 00:39:06","codes":[{"authorDate":"2020-06-02 00:39:06","commitOrder":1,"curCode":"  public void testInnerJoinOnTwoInlineDataSourcesWithOuterWhere(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .columns(ImmutableList.of(\"dim1\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                        JoinType.INNER\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n                .columns(\"__time\", \"_v0\")\n                .filters(new NotDimFilter(new SelectorDimFilter(\"v0\", null, null)))\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","date":"2020-06-02 00:39:06","endLine":14351,"groupId":"9693","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInnerJoinOnTwoInlineDataSourcesWithOuterWhere","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/94/edd222dc67019a47d4ff971b60312f85a79148.src","preCode":"  public void testInnerJoinOnTwoInlineDataSourcesWithOuterWhere(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .columns(ImmutableList.of(\"dim1\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                        JoinType.INNER\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n                .columns(\"__time\", \"_v0\")\n                .filters(new NotDimFilter(new SelectorDimFilter(\"v0\", null, null)))\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":14301,"status":"B"},{"authorDate":"2020-06-02 00:39:06","commitOrder":1,"curCode":"  public void testInnerJoinOnTwoInlineDataSources(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .columns(ImmutableList.of(\"dim1\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                        JoinType.INNER\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n                .columns(\"__time\", \"_v0\")\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","date":"2020-06-02 00:39:06","endLine":14404,"groupId":"9693","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInnerJoinOnTwoInlineDataSources","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/94/edd222dc67019a47d4ff971b60312f85a79148.src","preCode":"  public void testInnerJoinOnTwoInlineDataSources(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .columns(ImmutableList.of(\"dim1\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                        JoinType.INNER\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n                .columns(\"__time\", \"_v0\")\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":14355,"status":"B"}],"commitId":"821c5d5a5cf7e70b501a57e2ff1901f2ec7f6404","commitMessage":"@@@Prevent JOIN reducing to a JOIN with constant in the ON condition (#9941)\n\n* Prevent Join reducing to on constant condition\n\n* Prevent Join reducing to on constant condition\n\n* addreess comments\n\n* set queryContext in tests","date":"2020-06-02 00:39:06","modifiedFileCount":"2","status":"B","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-03-05 02:39:21","codes":[{"authorDate":"2021-03-05 02:39:21","commitOrder":2,"curCode":"  public void testInnerJoinOnTwoInlineDataSourcesWithOuterWhere(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .columns(ImmutableList.of(\"dim1\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromExpression(\"'10.1'\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                        JoinType.INNER,\n                        selector(\"dim1\", \"10.1\", null)\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                .columns(\"__time\", \"v0\")\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","date":"2021-03-05 02:39:21","endLine":16196,"groupId":"13724","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInnerJoinOnTwoInlineDataSourcesWithOuterWhere","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c4/279f22838bb9060488946e60939c54eb63da1a.src","preCode":"  public void testInnerJoinOnTwoInlineDataSourcesWithOuterWhere(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .columns(ImmutableList.of(\"dim1\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                        JoinType.INNER\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n                .columns(\"__time\", \"_v0\")\n                .filters(new NotDimFilter(new SelectorDimFilter(\"v0\", null, null)))\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":16156,"status":"M"},{"authorDate":"2021-03-05 02:39:21","commitOrder":2,"curCode":"  public void testInnerJoinOnTwoInlineDataSources(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .columns(ImmutableList.of(\"dim1\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromExpression(\"'10.1'\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                        JoinType.INNER,\n                        selector(\"dim1\", \"10.1\", null)\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                .columns(\"__time\", \"v0\")\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","date":"2021-03-05 02:39:21","endLine":16240,"groupId":"13724","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInnerJoinOnTwoInlineDataSources","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c4/279f22838bb9060488946e60939c54eb63da1a.src","preCode":"  public void testInnerJoinOnTwoInlineDataSources(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .columns(ImmutableList.of(\"dim1\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                        JoinType.INNER\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n                .columns(\"__time\", \"_v0\")\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":16200,"status":"M"}],"commitId":"1a15987432fab044fc83a99af8ab497d887aeda1","commitMessage":"@@@Supporting filters in the left base table for join datasources (#10697)\n\n* where filter left first draft\n\n* Revert changes in calcite test\n\n* Refactor a bit\n\n* Fixing the Tests\n\n* Changes\n\n* Adding tests\n\n* Add tests for correlated queries\n\n* Add comment\n\n* Fix typos","date":"2021-03-05 02:39:21","modifiedFileCount":"26","status":"M","submitter":"Abhishek Agarwal"},{"authorTime":"2021-03-10 05:07:34","codes":[{"authorDate":"2021-03-10 05:07:34","commitOrder":3,"curCode":"  public void testInnerJoinOnTwoInlineDataSourcesWithOuterWhere(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .columns(ImmutableList.of(\"dim1\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                        JoinType.INNER\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n                .columns(\"__time\", \"_v0\")\n                .filters(new NotDimFilter(new SelectorDimFilter(\"v0\", null, null)))\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","date":"2021-03-10 05:07:34","endLine":16510,"groupId":"9693","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testInnerJoinOnTwoInlineDataSourcesWithOuterWhere","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f8/0ce303cd0586e7bacf2e167910070b05a69561.src","preCode":"  public void testInnerJoinOnTwoInlineDataSourcesWithOuterWhere(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .columns(ImmutableList.of(\"dim1\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromExpression(\"'10.1'\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                        JoinType.INNER,\n                        selector(\"dim1\", \"10.1\", null)\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                .columns(\"__time\", \"v0\")\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":16460,"status":"M"},{"authorDate":"2021-03-10 05:07:34","commitOrder":3,"curCode":"  public void testInnerJoinOnTwoInlineDataSources(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .columns(ImmutableList.of(\"dim1\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                        JoinType.INNER\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n                .columns(\"__time\", \"_v0\")\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","date":"2021-03-10 05:07:34","endLine":16608,"groupId":"9693","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testInnerJoinOnTwoInlineDataSources","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f8/0ce303cd0586e7bacf2e167910070b05a69561.src","preCode":"  public void testInnerJoinOnTwoInlineDataSources(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new TableDataSource(CalciteTests.DATASOURCE1),\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .columns(ImmutableList.of(\"dim1\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromExpression(\"'10.1'\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                        JoinType.INNER,\n                        selector(\"dim1\", \"10.1\", null)\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                .columns(\"__time\", \"v0\")\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":16559,"status":"M"}],"commitId":"c66951a59e2963369bbb447dba51ea7651a1cdb1","commitMessage":"@@@Add flag in SQL to disable left base filter optimization for joins (#10947)\n\n* Add flag to disable left base filter\n\n* code coverage\n\n* Draft\n\n* Review comments\n\n* code coverage\n\n* add docs\n\n* Add old tests","date":"2021-03-10 05:07:34","modifiedFileCount":"13","status":"M","submitter":"Abhishek Agarwal"},{"authorTime":"2021-03-10 05:07:34","codes":[{"authorDate":"2021-07-23 23:27:19","commitOrder":4,"curCode":"  public void testInnerJoinOnTwoInlineDataSourcesWithOuterWhere(Map<String, Object> queryContext) throws Exception\n  {\n    Druids.ScanQueryBuilder baseScanBuilder = newScanQueryBuilder()\n        .dataSource(\n            join(\n                new QueryDataSource(\n                    newScanQueryBuilder()\n                        .dataSource(CalciteTests.DATASOURCE1)\n                        .intervals(querySegmentSpec(Filtration.eternity()))\n                        .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                        .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                        .columns(ImmutableList.of(\"__time\", \"v0\"))\n                        .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                        .context(queryContext)\n                        .build()\n                ),\n                new QueryDataSource(\n                    newScanQueryBuilder()\n                        .dataSource(CalciteTests.DATASOURCE1)\n                        .intervals(querySegmentSpec(Filtration.eternity()))\n                        .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                        .columns(ImmutableList.of(\"dim1\"))\n                        .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                        .context(queryContext)\n                        .build()\n                ),\n                \"j0.\",\n                equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                JoinType.INNER\n            )\n        )\n        .intervals(querySegmentSpec(Filtration.eternity()))\n        .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n        .columns(\"__time\", \"_v0\")\n        .context(queryContext);\n\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n        queryContext,\n        ImmutableList.of(\n            NullHandling.sqlCompatible() ? baseScanBuilder.build() :\n            baseScanBuilder.filters(new NotDimFilter(new SelectorDimFilter(\"v0\", null, null))).build()),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","date":"2021-07-23 23:27:19","endLine":16900,"groupId":"101814","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testInnerJoinOnTwoInlineDataSourcesWithOuterWhere","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/94/04b037f001631c112fc76fd2502609202a6858.src","preCode":"  public void testInnerJoinOnTwoInlineDataSourcesWithOuterWhere(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .columns(ImmutableList.of(\"dim1\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                        JoinType.INNER\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n                .columns(\"__time\", \"_v0\")\n                .filters(new NotDimFilter(new SelectorDimFilter(\"v0\", null, null)))\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":16850,"status":"M"},{"authorDate":"2021-03-10 05:07:34","commitOrder":4,"curCode":"  public void testInnerJoinOnTwoInlineDataSources(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .columns(ImmutableList.of(\"dim1\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                        JoinType.INNER\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n                .columns(\"__time\", \"_v0\")\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","date":"2021-03-10 05:07:34","endLine":16608,"groupId":"101814","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testInnerJoinOnTwoInlineDataSources","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f8/0ce303cd0586e7bacf2e167910070b05a69561.src","preCode":"  public void testInnerJoinOnTwoInlineDataSources(Map<String, Object> queryContext) throws Exception\n  {\n    testQuery(\n        \"with abc as\\n\"\n        + \"(\\n\"\n        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n        + \")\\n\"\n        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1\\n\",\n        queryContext,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(\n                    join(\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        new QueryDataSource(\n                            newScanQueryBuilder()\n                                .dataSource(CalciteTests.DATASOURCE1)\n                                .intervals(querySegmentSpec(Filtration.eternity()))\n                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n                                .columns(ImmutableList.of(\"dim1\"))\n                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                                .context(queryContext)\n                                .build()\n                        ),\n                        \"j0.\",\n                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n                        JoinType.INNER\n                    )\n                )\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n                .columns(\"__time\", \"_v0\")\n                .context(queryContext)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"10.1\", 946771200000L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":16559,"status":"N"}],"commitId":"c98e7c3aa3d1b883f76f0edaafe29cf426fb119d","commitMessage":"@@@Fix left join SQL queries with IS NOT NULL filter (#11434)\n\nThis PR fixes the incorrect results for query : \n\nSELECT dim1.  l1.k FROM foo LEFT JOIN (select k || '' as k from lookup.lookyloo group by 1) l1 ON foo.dim1 = l1.k WHERE l1.k IS NOT NULL (in CalciteQueryTests)\nIn the current code.  the WHERE clause gets removed from the top of the left join and is pushed to the table foo\nleading to incorrect results.\nThe fix for such a situation is done by :\n\nConverting such left joins into inner joins (since logically the mentioned left join query is equivalent to an inner join) using Calcite while maintaining that the druid execution layer can execute such inner joins.\nPreferring converted inner joins over original left joins in our cost model","date":"2021-07-23 23:27:19","modifiedFileCount":"7","status":"M","submitter":"Rohan Garg"}]
