[{"authorTime":"2021-06-12 04:49:03","codes":[{"authorDate":"2021-06-12 04:49:03","commitOrder":1,"curCode":"  public void testStateTransition()\n      throws ValidationException, SqlParseException, RelConversionException, IOException\n  {\n    SqlLifecycle lifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"select 1 + ?\";\n    final Map<String, Object> queryContext = Collections.emptyMap();\n    Assert.assertEquals(SqlLifecycle.State.NEW, lifecycle.getState());\n\n    \r\n    lifecycle.initialize(sql, queryContext);\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n    List<TypedValue> parameters = ImmutableList.of(new SqlParameter(SqlType.BIGINT, 1L).getTypedValue());\n    lifecycle.setParameters(parameters);\n    \r\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n\n    \r\n    DruidPlanner mockPlanner = EasyMock.createMock(DruidPlanner.class);\n    PlannerContext mockPlannerContext = EasyMock.createMock(PlannerContext.class);\n    ValidationResult validationResult = new ValidationResult(Collections.emptySet());\n    EasyMock.expect(plannerFactory.createPlanner(EasyMock.anyObject())).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.getPlannerContext()).andReturn(mockPlannerContext).once();\n    mockPlannerContext.setAuthenticationResult(CalciteTests.REGULAR_USER_AUTH_RESULT);\n    EasyMock.expectLastCall();\n    mockPlannerContext.setParameters(parameters);\n    EasyMock.expectLastCall();\n    EasyMock.expect(plannerFactory.getAuthorizerMapper()).andReturn(CalciteTests.TEST_AUTHORIZER_MAPPER).once();\n    mockPlannerContext.setAuthorizationResult(Access.OK);\n    EasyMock.expectLastCall();\n    EasyMock.expect(mockPlanner.validate(sql)).andReturn(validationResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext);\n\n    lifecycle.validateAndAuthorize(CalciteTests.REGULAR_USER_AUTH_RESULT);\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext);\n\n    \r\n    PrepareResult mockPrepareResult = EasyMock.createMock(PrepareResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.prepare(sql)).andReturn(mockPrepareResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    lifecycle.prepare();\n    \r\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n\n    \r\n    PlannerResult mockPlanResult = EasyMock.createMock(PlannerResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.plan(sql)).andReturn(mockPlanResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    PlannerContext context = lifecycle.plan();\n    Assert.assertEquals(mockPlannerContext, context);\n    Assert.assertEquals(SqlLifecycle.State.PLANNED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlanResult.run()).andReturn(Sequences.simple(ImmutableList.of(new Object[]{2L}))).once();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    lifecycle.execute();\n    Assert.assertEquals(SqlLifecycle.State.EXECUTING, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlannerContext.getSqlQueryId()).andReturn(\"id\").once();\n    EasyMock.expect(mockPlannerContext.getNativeQueryIds()).andReturn(ImmutableList.of(\"id\")).times(2);\n    EasyMock.expect(mockPlannerContext.getAuthenticationResult()).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).once();\n\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    requestLogger.logSqlQuery(EasyMock.anyObject());\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    lifecycle.emitLogsAndMetrics(null, null, 10);\n    Assert.assertEquals(SqlLifecycle.State.DONE, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n  }\n","date":"2021-06-12 04:49:03","endLine":176,"groupId":"3735","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateTransition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6f/d383bb247223e0fce544a8ec41bba9f1e59368.src","preCode":"  public void testStateTransition()\n      throws ValidationException, SqlParseException, RelConversionException, IOException\n  {\n    SqlLifecycle lifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"select 1 + ?\";\n    final Map<String, Object> queryContext = Collections.emptyMap();\n    Assert.assertEquals(SqlLifecycle.State.NEW, lifecycle.getState());\n\n    \r\n    lifecycle.initialize(sql, queryContext);\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n    List<TypedValue> parameters = ImmutableList.of(new SqlParameter(SqlType.BIGINT, 1L).getTypedValue());\n    lifecycle.setParameters(parameters);\n    \r\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n\n    \r\n    DruidPlanner mockPlanner = EasyMock.createMock(DruidPlanner.class);\n    PlannerContext mockPlannerContext = EasyMock.createMock(PlannerContext.class);\n    ValidationResult validationResult = new ValidationResult(Collections.emptySet());\n    EasyMock.expect(plannerFactory.createPlanner(EasyMock.anyObject())).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.getPlannerContext()).andReturn(mockPlannerContext).once();\n    mockPlannerContext.setAuthenticationResult(CalciteTests.REGULAR_USER_AUTH_RESULT);\n    EasyMock.expectLastCall();\n    mockPlannerContext.setParameters(parameters);\n    EasyMock.expectLastCall();\n    EasyMock.expect(plannerFactory.getAuthorizerMapper()).andReturn(CalciteTests.TEST_AUTHORIZER_MAPPER).once();\n    mockPlannerContext.setAuthorizationResult(Access.OK);\n    EasyMock.expectLastCall();\n    EasyMock.expect(mockPlanner.validate(sql)).andReturn(validationResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext);\n\n    lifecycle.validateAndAuthorize(CalciteTests.REGULAR_USER_AUTH_RESULT);\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext);\n\n    \r\n    PrepareResult mockPrepareResult = EasyMock.createMock(PrepareResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.prepare(sql)).andReturn(mockPrepareResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    lifecycle.prepare();\n    \r\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n\n    \r\n    PlannerResult mockPlanResult = EasyMock.createMock(PlannerResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.plan(sql)).andReturn(mockPlanResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    PlannerContext context = lifecycle.plan();\n    Assert.assertEquals(mockPlannerContext, context);\n    Assert.assertEquals(SqlLifecycle.State.PLANNED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlanResult.run()).andReturn(Sequences.simple(ImmutableList.of(new Object[]{2L}))).once();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    lifecycle.execute();\n    Assert.assertEquals(SqlLifecycle.State.EXECUTING, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlannerContext.getSqlQueryId()).andReturn(\"id\").once();\n    EasyMock.expect(mockPlannerContext.getNativeQueryIds()).andReturn(ImmutableList.of(\"id\")).times(2);\n    EasyMock.expect(mockPlannerContext.getAuthenticationResult()).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).once();\n\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    requestLogger.logSqlQuery(EasyMock.anyObject());\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    lifecycle.emitLogsAndMetrics(null, null, 10);\n    Assert.assertEquals(SqlLifecycle.State.DONE, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/SqlLifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2021-06-12 04:49:03","commitOrder":1,"curCode":"  public void testStateTransitionHttpRequest()\n      throws ValidationException, SqlParseException, RelConversionException, IOException\n  {\n    \r\n    \r\n    SqlLifecycle lifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"select 1 + ?\";\n    final Map<String, Object> queryContext = Collections.emptyMap();\n    Assert.assertEquals(SqlLifecycle.State.NEW, lifecycle.getState());\n\n    \r\n    lifecycle.initialize(sql, queryContext);\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n    List<TypedValue> parameters = ImmutableList.of(new SqlParameter(SqlType.BIGINT, 1L).getTypedValue());\n    lifecycle.setParameters(parameters);\n    \r\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n\n    \r\n    DruidPlanner mockPlanner = EasyMock.createMock(DruidPlanner.class);\n    PlannerContext mockPlannerContext = EasyMock.createMock(PlannerContext.class);\n    ValidationResult validationResult = new ValidationResult(Collections.emptySet());\n    EasyMock.expect(plannerFactory.createPlanner(EasyMock.anyObject())).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.getPlannerContext()).andReturn(mockPlannerContext).once();\n    mockPlannerContext.setAuthenticationResult(CalciteTests.REGULAR_USER_AUTH_RESULT);\n    EasyMock.expectLastCall();\n    mockPlannerContext.setParameters(parameters);\n    EasyMock.expectLastCall();\n    EasyMock.expect(plannerFactory.getAuthorizerMapper()).andReturn(CalciteTests.TEST_AUTHORIZER_MAPPER).once();\n    mockPlannerContext.setAuthorizationResult(Access.OK);\n    EasyMock.expectLastCall();\n    EasyMock.expect(mockPlanner.validate(sql)).andReturn(validationResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n\n    HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).times(2);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).once();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).once();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, request);\n\n    lifecycle.validateAndAuthorize(request);\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, request);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, request);\n\n    \r\n    PrepareResult mockPrepareResult = EasyMock.createMock(PrepareResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.prepare(sql)).andReturn(mockPrepareResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    lifecycle.prepare();\n    \r\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n\n    \r\n    PlannerResult mockPlanResult = EasyMock.createMock(PlannerResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.plan(sql)).andReturn(mockPlanResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    PlannerContext context = lifecycle.plan();\n    Assert.assertEquals(mockPlannerContext, context);\n    Assert.assertEquals(SqlLifecycle.State.PLANNED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlanResult.run()).andReturn(Sequences.simple(ImmutableList.of(new Object[]{2L}))).once();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    lifecycle.execute();\n    Assert.assertEquals(SqlLifecycle.State.EXECUTING, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlannerContext.getSqlQueryId()).andReturn(\"id\").once();\n    EasyMock.expect(mockPlannerContext.getNativeQueryIds()).andReturn(ImmutableList.of(\"id\")).times(2);\n    EasyMock.expect(mockPlannerContext.getAuthenticationResult()).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).once();\n\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    requestLogger.logSqlQuery(EasyMock.anyObject());\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    lifecycle.emitLogsAndMetrics(null, null, 10);\n    Assert.assertEquals(SqlLifecycle.State.DONE, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n  }\n","date":"2021-06-12 04:49:03","endLine":278,"groupId":"3736","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateTransitionHttpRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6f/d383bb247223e0fce544a8ec41bba9f1e59368.src","preCode":"  public void testStateTransitionHttpRequest()\n      throws ValidationException, SqlParseException, RelConversionException, IOException\n  {\n    \r\n    \r\n    SqlLifecycle lifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"select 1 + ?\";\n    final Map<String, Object> queryContext = Collections.emptyMap();\n    Assert.assertEquals(SqlLifecycle.State.NEW, lifecycle.getState());\n\n    \r\n    lifecycle.initialize(sql, queryContext);\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n    List<TypedValue> parameters = ImmutableList.of(new SqlParameter(SqlType.BIGINT, 1L).getTypedValue());\n    lifecycle.setParameters(parameters);\n    \r\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n\n    \r\n    DruidPlanner mockPlanner = EasyMock.createMock(DruidPlanner.class);\n    PlannerContext mockPlannerContext = EasyMock.createMock(PlannerContext.class);\n    ValidationResult validationResult = new ValidationResult(Collections.emptySet());\n    EasyMock.expect(plannerFactory.createPlanner(EasyMock.anyObject())).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.getPlannerContext()).andReturn(mockPlannerContext).once();\n    mockPlannerContext.setAuthenticationResult(CalciteTests.REGULAR_USER_AUTH_RESULT);\n    EasyMock.expectLastCall();\n    mockPlannerContext.setParameters(parameters);\n    EasyMock.expectLastCall();\n    EasyMock.expect(plannerFactory.getAuthorizerMapper()).andReturn(CalciteTests.TEST_AUTHORIZER_MAPPER).once();\n    mockPlannerContext.setAuthorizationResult(Access.OK);\n    EasyMock.expectLastCall();\n    EasyMock.expect(mockPlanner.validate(sql)).andReturn(validationResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n\n    HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).times(2);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).once();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).once();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, request);\n\n    lifecycle.validateAndAuthorize(request);\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, request);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, request);\n\n    \r\n    PrepareResult mockPrepareResult = EasyMock.createMock(PrepareResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.prepare(sql)).andReturn(mockPrepareResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    lifecycle.prepare();\n    \r\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n\n    \r\n    PlannerResult mockPlanResult = EasyMock.createMock(PlannerResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.plan(sql)).andReturn(mockPlanResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    PlannerContext context = lifecycle.plan();\n    Assert.assertEquals(mockPlannerContext, context);\n    Assert.assertEquals(SqlLifecycle.State.PLANNED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlanResult.run()).andReturn(Sequences.simple(ImmutableList.of(new Object[]{2L}))).once();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    lifecycle.execute();\n    Assert.assertEquals(SqlLifecycle.State.EXECUTING, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlannerContext.getSqlQueryId()).andReturn(\"id\").once();\n    EasyMock.expect(mockPlannerContext.getNativeQueryIds()).andReturn(ImmutableList.of(\"id\")).times(2);\n    EasyMock.expect(mockPlannerContext.getAuthenticationResult()).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).once();\n\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    requestLogger.logSqlQuery(EasyMock.anyObject());\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    lifecycle.emitLogsAndMetrics(null, null, 10);\n    Assert.assertEquals(SqlLifecycle.State.DONE, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/SqlLifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"50327b8f6334f9bb89ab60e262ed47983a7711ee","commitMessage":"@@@ignore bySegment query context for SQL queries (#11352)\n\n* ignore bySegment query context for SQL queries\n\n* revert unintended change","date":"2021-06-12 04:49:03","modifiedFileCount":"9","status":"B","submitter":"Clint Wylie"},{"authorTime":"2021-09-06 01:57:45","codes":[{"authorDate":"2021-09-06 01:57:45","commitOrder":2,"curCode":"  public void testStateTransition()\n      throws ValidationException, SqlParseException, RelConversionException, IOException\n  {\n    SqlLifecycle lifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"select 1 + ?\";\n    final Map<String, Object> queryContext = Collections.emptyMap();\n    Assert.assertEquals(SqlLifecycle.State.NEW, lifecycle.getState());\n\n    \r\n    lifecycle.initialize(sql, queryContext);\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n    List<TypedValue> parameters = ImmutableList.of(new SqlParameter(SqlType.BIGINT, 1L).getTypedValue());\n    lifecycle.setParameters(parameters);\n    \r\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n\n    \r\n    DruidPlanner mockPlanner = EasyMock.createMock(DruidPlanner.class);\n    PlannerContext mockPlannerContext = EasyMock.createMock(PlannerContext.class);\n    ValidationResult validationResult = new ValidationResult(Collections.emptySet());\n    EasyMock.expect(plannerFactory.createPlanner(EasyMock.anyObject())).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.getPlannerContext()).andReturn(mockPlannerContext).once();\n    mockPlannerContext.setAuthenticationResult(CalciteTests.REGULAR_USER_AUTH_RESULT);\n    EasyMock.expectLastCall();\n    mockPlannerContext.setParameters(parameters);\n    EasyMock.expectLastCall();\n    EasyMock.expect(plannerFactory.getAuthorizerMapper()).andReturn(CalciteTests.TEST_AUTHORIZER_MAPPER).once();\n    mockPlannerContext.setAuthorizationResult(Access.OK);\n    EasyMock.expectLastCall();\n    EasyMock.expect(mockPlanner.validate(sql)).andReturn(validationResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext);\n\n    lifecycle.validateAndAuthorize(CalciteTests.REGULAR_USER_AUTH_RESULT);\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext);\n\n    \r\n    PrepareResult mockPrepareResult = EasyMock.createMock(PrepareResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.prepare(sql)).andReturn(mockPrepareResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    lifecycle.prepare();\n    \r\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n\n    \r\n    PlannerResult mockPlanResult = EasyMock.createMock(PlannerResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.plan(sql)).andReturn(mockPlanResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    lifecycle.plan();\n    Assert.assertEquals(mockPlannerContext, lifecycle.getPlannerContext());\n    Assert.assertEquals(SqlLifecycle.State.PLANNED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlanResult.run()).andReturn(Sequences.simple(ImmutableList.of(new Object[]{2L}))).once();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    lifecycle.execute();\n    Assert.assertEquals(SqlLifecycle.State.EXECUTING, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlannerContext.getSqlQueryId()).andReturn(\"id\").once();\n    CopyOnWriteArrayList<String> nativeQueryIds = new CopyOnWriteArrayList<>(ImmutableList.of(\"id\"));\n    EasyMock.expect(mockPlannerContext.getNativeQueryIds()).andReturn(nativeQueryIds).times(2);\n    EasyMock.expect(mockPlannerContext.getAuthenticationResult()).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).once();\n\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    requestLogger.logSqlQuery(EasyMock.anyObject());\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    lifecycle.finalizeStateAndEmitLogsAndMetrics(null, null, 10);\n    Assert.assertEquals(SqlLifecycle.State.DONE, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n  }\n","date":"2021-09-06 01:57:45","endLine":184,"groupId":"101560","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testStateTransition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/60/6591200131edfba82c1c40ec9c90b08aee4ee4.src","preCode":"  public void testStateTransition()\n      throws ValidationException, SqlParseException, RelConversionException, IOException\n  {\n    SqlLifecycle lifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"select 1 + ?\";\n    final Map<String, Object> queryContext = Collections.emptyMap();\n    Assert.assertEquals(SqlLifecycle.State.NEW, lifecycle.getState());\n\n    \r\n    lifecycle.initialize(sql, queryContext);\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n    List<TypedValue> parameters = ImmutableList.of(new SqlParameter(SqlType.BIGINT, 1L).getTypedValue());\n    lifecycle.setParameters(parameters);\n    \r\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n\n    \r\n    DruidPlanner mockPlanner = EasyMock.createMock(DruidPlanner.class);\n    PlannerContext mockPlannerContext = EasyMock.createMock(PlannerContext.class);\n    ValidationResult validationResult = new ValidationResult(Collections.emptySet());\n    EasyMock.expect(plannerFactory.createPlanner(EasyMock.anyObject())).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.getPlannerContext()).andReturn(mockPlannerContext).once();\n    mockPlannerContext.setAuthenticationResult(CalciteTests.REGULAR_USER_AUTH_RESULT);\n    EasyMock.expectLastCall();\n    mockPlannerContext.setParameters(parameters);\n    EasyMock.expectLastCall();\n    EasyMock.expect(plannerFactory.getAuthorizerMapper()).andReturn(CalciteTests.TEST_AUTHORIZER_MAPPER).once();\n    mockPlannerContext.setAuthorizationResult(Access.OK);\n    EasyMock.expectLastCall();\n    EasyMock.expect(mockPlanner.validate(sql)).andReturn(validationResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext);\n\n    lifecycle.validateAndAuthorize(CalciteTests.REGULAR_USER_AUTH_RESULT);\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext);\n\n    \r\n    PrepareResult mockPrepareResult = EasyMock.createMock(PrepareResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.prepare(sql)).andReturn(mockPrepareResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    lifecycle.prepare();\n    \r\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n\n    \r\n    PlannerResult mockPlanResult = EasyMock.createMock(PlannerResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.plan(sql)).andReturn(mockPlanResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    PlannerContext context = lifecycle.plan();\n    Assert.assertEquals(mockPlannerContext, context);\n    Assert.assertEquals(SqlLifecycle.State.PLANNED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlanResult.run()).andReturn(Sequences.simple(ImmutableList.of(new Object[]{2L}))).once();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    lifecycle.execute();\n    Assert.assertEquals(SqlLifecycle.State.EXECUTING, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlannerContext.getSqlQueryId()).andReturn(\"id\").once();\n    EasyMock.expect(mockPlannerContext.getNativeQueryIds()).andReturn(ImmutableList.of(\"id\")).times(2);\n    EasyMock.expect(mockPlannerContext.getAuthenticationResult()).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).once();\n\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    requestLogger.logSqlQuery(EasyMock.anyObject());\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    lifecycle.emitLogsAndMetrics(null, null, 10);\n    Assert.assertEquals(SqlLifecycle.State.DONE, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/SqlLifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2021-09-06 01:57:45","commitOrder":2,"curCode":"  public void testStateTransitionHttpRequest()\n      throws ValidationException, SqlParseException, RelConversionException, IOException\n  {\n    \r\n    \r\n    SqlLifecycle lifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"select 1 + ?\";\n    final Map<String, Object> queryContext = Collections.emptyMap();\n    Assert.assertEquals(SqlLifecycle.State.NEW, lifecycle.getState());\n\n    \r\n    lifecycle.initialize(sql, queryContext);\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n    List<TypedValue> parameters = ImmutableList.of(new SqlParameter(SqlType.BIGINT, 1L).getTypedValue());\n    lifecycle.setParameters(parameters);\n    \r\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n\n    \r\n    DruidPlanner mockPlanner = EasyMock.createMock(DruidPlanner.class);\n    PlannerContext mockPlannerContext = EasyMock.createMock(PlannerContext.class);\n    ValidationResult validationResult = new ValidationResult(Collections.emptySet());\n    EasyMock.expect(plannerFactory.createPlanner(EasyMock.anyObject())).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.getPlannerContext()).andReturn(mockPlannerContext).once();\n    mockPlannerContext.setAuthenticationResult(CalciteTests.REGULAR_USER_AUTH_RESULT);\n    EasyMock.expectLastCall();\n    mockPlannerContext.setParameters(parameters);\n    EasyMock.expectLastCall();\n    EasyMock.expect(plannerFactory.getAuthorizerMapper()).andReturn(CalciteTests.TEST_AUTHORIZER_MAPPER).once();\n    mockPlannerContext.setAuthorizationResult(Access.OK);\n    EasyMock.expectLastCall();\n    EasyMock.expect(mockPlanner.validate(sql)).andReturn(validationResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n\n    HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).times(2);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).once();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).once();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, request);\n\n    lifecycle.validateAndAuthorize(request);\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, request);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, request);\n\n    \r\n    PrepareResult mockPrepareResult = EasyMock.createMock(PrepareResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.prepare(sql)).andReturn(mockPrepareResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    lifecycle.prepare();\n    \r\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n\n    \r\n    PlannerResult mockPlanResult = EasyMock.createMock(PlannerResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.plan(sql)).andReturn(mockPlanResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    lifecycle.plan();\n    Assert.assertEquals(mockPlannerContext, lifecycle.getPlannerContext());\n    Assert.assertEquals(SqlLifecycle.State.PLANNED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlanResult.run()).andReturn(Sequences.simple(ImmutableList.of(new Object[]{2L}))).once();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    lifecycle.execute();\n    Assert.assertEquals(SqlLifecycle.State.EXECUTING, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlannerContext.getSqlQueryId()).andReturn(\"id\").once();\n    CopyOnWriteArrayList<String> nativeQueryIds = new CopyOnWriteArrayList<>(ImmutableList.of(\"id\"));\n    EasyMock.expect(mockPlannerContext.getNativeQueryIds()).andReturn(nativeQueryIds).times(2);\n    EasyMock.expect(mockPlannerContext.getAuthenticationResult()).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).once();\n\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    requestLogger.logSqlQuery(EasyMock.anyObject());\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    lifecycle.finalizeStateAndEmitLogsAndMetrics(null, null, 10);\n    Assert.assertEquals(SqlLifecycle.State.DONE, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n  }\n","date":"2021-09-06 01:57:45","endLine":287,"groupId":"101560","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testStateTransitionHttpRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/60/6591200131edfba82c1c40ec9c90b08aee4ee4.src","preCode":"  public void testStateTransitionHttpRequest()\n      throws ValidationException, SqlParseException, RelConversionException, IOException\n  {\n    \r\n    \r\n    SqlLifecycle lifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"select 1 + ?\";\n    final Map<String, Object> queryContext = Collections.emptyMap();\n    Assert.assertEquals(SqlLifecycle.State.NEW, lifecycle.getState());\n\n    \r\n    lifecycle.initialize(sql, queryContext);\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n    List<TypedValue> parameters = ImmutableList.of(new SqlParameter(SqlType.BIGINT, 1L).getTypedValue());\n    lifecycle.setParameters(parameters);\n    \r\n    Assert.assertEquals(SqlLifecycle.State.INITIALIZED, lifecycle.getState());\n\n    \r\n    DruidPlanner mockPlanner = EasyMock.createMock(DruidPlanner.class);\n    PlannerContext mockPlannerContext = EasyMock.createMock(PlannerContext.class);\n    ValidationResult validationResult = new ValidationResult(Collections.emptySet());\n    EasyMock.expect(plannerFactory.createPlanner(EasyMock.anyObject())).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.getPlannerContext()).andReturn(mockPlannerContext).once();\n    mockPlannerContext.setAuthenticationResult(CalciteTests.REGULAR_USER_AUTH_RESULT);\n    EasyMock.expectLastCall();\n    mockPlannerContext.setParameters(parameters);\n    EasyMock.expectLastCall();\n    EasyMock.expect(plannerFactory.getAuthorizerMapper()).andReturn(CalciteTests.TEST_AUTHORIZER_MAPPER).once();\n    mockPlannerContext.setAuthorizationResult(Access.OK);\n    EasyMock.expectLastCall();\n    EasyMock.expect(mockPlanner.validate(sql)).andReturn(validationResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n\n    HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).times(2);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).once();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).once();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, request);\n\n    lifecycle.validateAndAuthorize(request);\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, request);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, request);\n\n    \r\n    PrepareResult mockPrepareResult = EasyMock.createMock(PrepareResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.prepare(sql)).andReturn(mockPrepareResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    lifecycle.prepare();\n    \r\n    Assert.assertEquals(SqlLifecycle.State.AUTHORIZED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult);\n\n    \r\n    PlannerResult mockPlanResult = EasyMock.createMock(PlannerResult.class);\n    EasyMock.expect(plannerFactory.createPlannerWithContext(EasyMock.eq(mockPlannerContext))).andReturn(mockPlanner).once();\n    EasyMock.expect(mockPlanner.plan(sql)).andReturn(mockPlanResult).once();\n    mockPlanner.close();\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    PlannerContext context = lifecycle.plan();\n    Assert.assertEquals(mockPlannerContext, context);\n    Assert.assertEquals(SqlLifecycle.State.PLANNED, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlanResult.run()).andReturn(Sequences.simple(ImmutableList.of(new Object[]{2L}))).once();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    lifecycle.execute();\n    Assert.assertEquals(SqlLifecycle.State.EXECUTING, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    \r\n    EasyMock.expect(mockPlannerContext.getSqlQueryId()).andReturn(\"id\").once();\n    EasyMock.expect(mockPlannerContext.getNativeQueryIds()).andReturn(ImmutableList.of(\"id\")).times(2);\n    EasyMock.expect(mockPlannerContext.getAuthenticationResult()).andReturn(CalciteTests.REGULAR_USER_AUTH_RESULT).once();\n\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    serviceEmitter.emit(EasyMock.anyObject(ServiceEventBuilder.class));\n    EasyMock.expectLastCall();\n    requestLogger.logSqlQuery(EasyMock.anyObject());\n    EasyMock.expectLastCall();\n    EasyMock.replay(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n\n    lifecycle.emitLogsAndMetrics(null, null, 10);\n    Assert.assertEquals(SqlLifecycle.State.DONE, lifecycle.getState());\n    EasyMock.verify(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n    EasyMock.reset(plannerFactory, serviceEmitter, requestLogger, mockPlanner, mockPlannerContext, mockPrepareResult, mockPlanResult);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/SqlLifecycleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"82049bbf0a6409c09889ba9b3ea6131c9da86705","commitMessage":"@@@Cancel API for sqls (#11643)\n\n* initial work\n\n* reduce lock in sqlLifecycle\n\n* Integration test for sql canceling\n\n* javadoc.  cleanup.  more tests\n\n* log level to debug\n\n* fix test\n\n* checkstyle\n\n* fix flaky test; address comments\n\n* rowTransformer\n\n* cancelled state\n\n* use lock\n\n* explode instead of noop\n\n* oops\n\n* unused import\n\n* less aggressive with state\n\n* fix calcite charset\n\n* don't emit metrics when you are not authorized","date":"2021-09-06 01:57:45","modifiedFileCount":"17","status":"M","submitter":"Jihoon Son"}]
