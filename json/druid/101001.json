[{"authorTime":"2019-04-06 05:49:41","codes":[{"authorDate":"2019-04-06 05:49:41","commitOrder":1,"curCode":"  public void testNotImplementedIntrospectLookup()\n  {\n    EasyMock.expect(mockLookupExtractorFactory.getIntrospectHandler()).andReturn(null);\n    EasyMock.expect(mockLookupExtractorFactory.get())\n            .andReturn(new MapLookupExtractor(ImmutableMap.of(), false))\n            .anyTimes();\n    EasyMock.replay(mockLookupExtractorFactory);\n    Assert.assertEquals(\n        Response.status(Response.Status.NOT_FOUND).build().getStatus(),\n        ((Response) lookupIntrospectionResource.introspectLookup(\"lookupId\")).getStatus()\n    );\n  }\n","date":"2019-04-06 05:49:41","endLine":116,"groupId":"1604","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotImplementedIntrospectLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/37/cab516882675d237760ad0eaded25146920f61.src","preCode":"  public void testNotImplementedIntrospectLookup()\n  {\n    EasyMock.expect(mockLookupExtractorFactory.getIntrospectHandler()).andReturn(null);\n    EasyMock.expect(mockLookupExtractorFactory.get())\n            .andReturn(new MapLookupExtractor(ImmutableMap.of(), false))\n            .anyTimes();\n    EasyMock.replay(mockLookupExtractorFactory);\n    Assert.assertEquals(\n        Response.status(Response.Status.NOT_FOUND).build().getStatus(),\n        ((Response) lookupIntrospectionResource.introspectLookup(\"lookupId\")).getStatus()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/query/lookup/LookupIntrospectionResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"B"},{"authorDate":"2019-04-06 05:49:41","commitOrder":1,"curCode":"  @Test public void testExistingLookup()\n  {\n    EasyMock.expect(mockLookupExtractorFactory.getIntrospectHandler()).andReturn(mockLookupIntrospectHandler);\n    EasyMock.expect(mockLookupExtractorFactory.get())\n            .andReturn(new MapLookupExtractor(ImmutableMap.of(), false))\n            .anyTimes();\n    EasyMock.replay(mockLookupExtractorFactory);\n    Assert.assertEquals(mockLookupIntrospectHandler, lookupIntrospectionResource.introspectLookup(\"lookupId\"));\n  }\n","date":"2019-04-06 05:49:41","endLine":135,"groupId":"1604","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExistingLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/37/cab516882675d237760ad0eaded25146920f61.src","preCode":"  @Test public void testExistingLookup()\n  {\n    EasyMock.expect(mockLookupExtractorFactory.getIntrospectHandler()).andReturn(mockLookupIntrospectHandler);\n    EasyMock.expect(mockLookupExtractorFactory.get())\n            .andReturn(new MapLookupExtractor(ImmutableMap.of(), false))\n            .anyTimes();\n    EasyMock.replay(mockLookupExtractorFactory);\n    Assert.assertEquals(mockLookupIntrospectHandler, lookupIntrospectionResource.introspectLookup(\"lookupId\"));\n  }\n","realPath":"server/src/test/java/org/apache/druid/query/lookup/LookupIntrospectionResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"B"}],"commitId":"76b4a5c62e47775715fb619bd4f19da5db1b5b6a","commitMessage":"@@@refactor lookups to be more chill to router (#7222)\n\n* refactor lookups to be more chill to router\n\n* remove accidental change\n\n* fix and combine LookupIntrospectionResourceTest\n\n* fix inspection\n\n* rename RouterLookupModule to LookupSerdeModule and RouterLookupExtractorFactoryContainerProvider to NoopLookupExtractorFactoryContainerProvider\n\n* make comment generic\n\n* use ConfigResourceFilter instead of StateResourceFilter\n\n* fix indentation\n\n* unused import\n\n* another unused import\n\n* refactor some stuff into processing module.  split up LookupModule.java classes into their own files\n","date":"2019-04-06 05:49:41","modifiedFileCount":"17","status":"B","submitter":"Clint Wylie"},{"authorTime":"2020-01-31 06:46:21","codes":[{"authorDate":"2019-04-06 05:49:41","commitOrder":2,"curCode":"  public void testNotImplementedIntrospectLookup()\n  {\n    EasyMock.expect(mockLookupExtractorFactory.getIntrospectHandler()).andReturn(null);\n    EasyMock.expect(mockLookupExtractorFactory.get())\n            .andReturn(new MapLookupExtractor(ImmutableMap.of(), false))\n            .anyTimes();\n    EasyMock.replay(mockLookupExtractorFactory);\n    Assert.assertEquals(\n        Response.status(Response.Status.NOT_FOUND).build().getStatus(),\n        ((Response) lookupIntrospectionResource.introspectLookup(\"lookupId\")).getStatus()\n    );\n  }\n","date":"2019-04-06 05:49:41","endLine":116,"groupId":"101001","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotImplementedIntrospectLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/37/cab516882675d237760ad0eaded25146920f61.src","preCode":"  public void testNotImplementedIntrospectLookup()\n  {\n    EasyMock.expect(mockLookupExtractorFactory.getIntrospectHandler()).andReturn(null);\n    EasyMock.expect(mockLookupExtractorFactory.get())\n            .andReturn(new MapLookupExtractor(ImmutableMap.of(), false))\n            .anyTimes();\n    EasyMock.replay(mockLookupExtractorFactory);\n    Assert.assertEquals(\n        Response.status(Response.Status.NOT_FOUND).build().getStatus(),\n        ((Response) lookupIntrospectionResource.introspectLookup(\"lookupId\")).getStatus()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/query/lookup/LookupIntrospectionResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"N"},{"authorDate":"2020-01-31 06:46:21","commitOrder":2,"curCode":"  public void testExistingLookup()\n  {\n    EasyMock.expect(mockLookupExtractorFactory.getIntrospectHandler()).andReturn(mockLookupIntrospectHandler);\n    EasyMock.expect(mockLookupExtractorFactory.get())\n            .andReturn(new MapLookupExtractor(ImmutableMap.of(), false))\n            .anyTimes();\n    EasyMock.replay(mockLookupExtractorFactory);\n    Assert.assertEquals(mockLookupIntrospectHandler, lookupIntrospectionResource.introspectLookup(\"lookupId\"));\n  }\n","date":"2020-01-31 06:46:21","endLine":143,"groupId":"101001","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testExistingLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/dd/8c84a96dcd03529e784081253b5c8e14d668db.src","preCode":"  @Test public void testExistingLookup()\n  {\n    EasyMock.expect(mockLookupExtractorFactory.getIntrospectHandler()).andReturn(mockLookupIntrospectHandler);\n    EasyMock.expect(mockLookupExtractorFactory.get())\n            .andReturn(new MapLookupExtractor(ImmutableMap.of(), false))\n            .anyTimes();\n    EasyMock.replay(mockLookupExtractorFactory);\n    Assert.assertEquals(mockLookupIntrospectHandler, lookupIntrospectionResource.introspectLookup(\"lookupId\"));\n  }\n","realPath":"server/src/test/java/org/apache/druid/query/lookup/LookupIntrospectionResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"}],"commitId":"204ba9966f94d3e99be980ec9b2817eda0931ee2","commitMessage":"@@@Add LookupJoinableFactory. (#9281)\n\n* Add LookupJoinableFactory.\n\nEnables joins where the right-hand side is a lookup. Includes an\nintegration test.\n\nAlso.  includes changes to LookupExtractorFactoryContainerProvider:\n\n1) Add \"getAllLookupNames\".  which will be needed to eventually connect\n   lookups to Druid's SQL catalog.\n2) Convert \"get\" from nullable to Optional return.\n3) Swap out most usages of LookupReferencesManager in favor of the\n   simpler LookupExtractorFactoryContainerProvider interface.\n\n* Fixes for tests.\n\n* Fix another test.\n\n* Java 11 message fix.\n\n* Fixups.\n\n* Fixup benchmark class.\n","date":"2020-01-31 06:46:21","modifiedFileCount":"20","status":"M","submitter":"Gian Merlino"}]
