[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testMergeRetainsValues() throws Exception\n  {\n    final long timestamp = System.currentTimeMillis();\n    IncrementalIndex toPersist1 = IncrementalIndexTest.createIndex(null);\n    IncrementalIndexTest.populateIndex(timestamp, toPersist1);\n\n    final File tempDir1 = temporaryFolder.newFolder();\n    final File mergedDir = temporaryFolder.newFolder();\n    final IndexableAdapter incrementalAdapter = new IncrementalIndexAdapter(\n        toPersist1.getInterval(),\n        toPersist1,\n        indexSpec.getBitmapSerdeFactory()\n                 .getBitmapFactory()\n    );\n\n    QueryableIndex index1 = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersist1, tempDir1, indexSpec, null))\n    );\n\n\n    final IndexableAdapter queryableAdapter = new QueryableIndexIndexableAdapter(index1);\n\n    indexIO.validateTwoSegments(incrementalAdapter, queryableAdapter);\n\n    Assert.assertEquals(2, index1.getColumn(Column.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(index1.getAvailableDimensions()));\n    Assert.assertEquals(3, index1.getColumnNames().size());\n\n\n    QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                ImmutableList.of(index1),\n                true,\n                new AggregatorFactory[]{new CountAggregatorFactory(\"count\")},\n                mergedDir,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    Assert.assertEquals(2, merged.getColumn(Column.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(merged.getAvailableDimensions()));\n    Assert.assertEquals(3, merged.getColumnNames().size());\n\n    indexIO.validateTwoSegments(tempDir1, mergedDir);\n\n    assertDimCompression(index1, indexSpec.getDimensionCompression());\n    assertDimCompression(merged, indexSpec.getDimensionCompression());\n  }\n","date":"2018-08-31 00:56:26","endLine":461,"groupId":"6088","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeRetainsValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f6/178958205afa64b09fe57e0ebe46be3d93714c.src","preCode":"  public void testMergeRetainsValues() throws Exception\n  {\n    final long timestamp = System.currentTimeMillis();\n    IncrementalIndex toPersist1 = IncrementalIndexTest.createIndex(null);\n    IncrementalIndexTest.populateIndex(timestamp, toPersist1);\n\n    final File tempDir1 = temporaryFolder.newFolder();\n    final File mergedDir = temporaryFolder.newFolder();\n    final IndexableAdapter incrementalAdapter = new IncrementalIndexAdapter(\n        toPersist1.getInterval(),\n        toPersist1,\n        indexSpec.getBitmapSerdeFactory()\n                 .getBitmapFactory()\n    );\n\n    QueryableIndex index1 = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersist1, tempDir1, indexSpec, null))\n    );\n\n\n    final IndexableAdapter queryableAdapter = new QueryableIndexIndexableAdapter(index1);\n\n    indexIO.validateTwoSegments(incrementalAdapter, queryableAdapter);\n\n    Assert.assertEquals(2, index1.getColumn(Column.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(index1.getAvailableDimensions()));\n    Assert.assertEquals(3, index1.getColumnNames().size());\n\n\n    QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                ImmutableList.of(index1),\n                true,\n                new AggregatorFactory[]{new CountAggregatorFactory(\"count\")},\n                mergedDir,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    Assert.assertEquals(2, merged.getColumn(Column.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(merged.getAvailableDimensions()));\n    Assert.assertEquals(3, merged.getColumnNames().size());\n\n    indexIO.validateTwoSegments(tempDir1, mergedDir);\n\n    assertDimCompression(index1, indexSpec.getDimensionCompression());\n    assertDimCompression(merged, indexSpec.getDimensionCompression());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testAppendRetainsValues() throws Exception\n  {\n    final long timestamp = System.currentTimeMillis();\n    IncrementalIndex toPersist1 = IncrementalIndexTest.createIndex(null);\n    IncrementalIndexTest.populateIndex(timestamp, toPersist1);\n\n    final File tempDir1 = temporaryFolder.newFolder();\n    final File mergedDir = temporaryFolder.newFolder();\n    final IndexableAdapter incrementalAdapter = new IncrementalIndexAdapter(\n        toPersist1.getInterval(),\n        toPersist1,\n        indexSpec.getBitmapSerdeFactory()\n                 .getBitmapFactory()\n    );\n\n    QueryableIndex index1 = closer.closeLater(\n        indexIO.loadIndex(indexMerger.append(ImmutableList.of(incrementalAdapter), null, tempDir1, indexSpec, null))\n    );\n    final IndexableAdapter queryableAdapter = new QueryableIndexIndexableAdapter(index1);\n\n    indexIO.validateTwoSegments(incrementalAdapter, queryableAdapter);\n\n    Assert.assertEquals(2, index1.getColumn(Column.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(index1.getAvailableDimensions()));\n    Assert.assertEquals(3, index1.getColumnNames().size());\n\n    Assert.assertArrayEquals(\n        IncrementalIndexTest.getDefaultCombiningAggregatorFactories(),\n        index1.getMetadata().getAggregators()\n    );\n\n    AggregatorFactory[] mergedAggregators = new AggregatorFactory[]{new CountAggregatorFactory(\"count\")};\n    QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                ImmutableList.of(index1),\n                true,\n                mergedAggregators,\n                mergedDir,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    Assert.assertEquals(2, merged.getColumn(Column.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(merged.getAvailableDimensions()));\n    Assert.assertEquals(3, merged.getColumnNames().size());\n\n    indexIO.validateTwoSegments(tempDir1, mergedDir);\n\n    assertDimCompression(index1, indexSpec.getDimensionCompression());\n    assertDimCompression(merged, indexSpec.getDimensionCompression());\n\n    Assert.assertArrayEquals(\n        getCombiningAggregators(mergedAggregators),\n        merged.getMetadata().getAggregators()\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":522,"groupId":"6086","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAppendRetainsValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f6/178958205afa64b09fe57e0ebe46be3d93714c.src","preCode":"  public void testAppendRetainsValues() throws Exception\n  {\n    final long timestamp = System.currentTimeMillis();\n    IncrementalIndex toPersist1 = IncrementalIndexTest.createIndex(null);\n    IncrementalIndexTest.populateIndex(timestamp, toPersist1);\n\n    final File tempDir1 = temporaryFolder.newFolder();\n    final File mergedDir = temporaryFolder.newFolder();\n    final IndexableAdapter incrementalAdapter = new IncrementalIndexAdapter(\n        toPersist1.getInterval(),\n        toPersist1,\n        indexSpec.getBitmapSerdeFactory()\n                 .getBitmapFactory()\n    );\n\n    QueryableIndex index1 = closer.closeLater(\n        indexIO.loadIndex(indexMerger.append(ImmutableList.of(incrementalAdapter), null, tempDir1, indexSpec, null))\n    );\n    final IndexableAdapter queryableAdapter = new QueryableIndexIndexableAdapter(index1);\n\n    indexIO.validateTwoSegments(incrementalAdapter, queryableAdapter);\n\n    Assert.assertEquals(2, index1.getColumn(Column.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(index1.getAvailableDimensions()));\n    Assert.assertEquals(3, index1.getColumnNames().size());\n\n    Assert.assertArrayEquals(\n        IncrementalIndexTest.getDefaultCombiningAggregatorFactories(),\n        index1.getMetadata().getAggregators()\n    );\n\n    AggregatorFactory[] mergedAggregators = new AggregatorFactory[]{new CountAggregatorFactory(\"count\")};\n    QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                ImmutableList.of(index1),\n                true,\n                mergedAggregators,\n                mergedDir,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    Assert.assertEquals(2, merged.getColumn(Column.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(merged.getAvailableDimensions()));\n    Assert.assertEquals(3, merged.getColumnNames().size());\n\n    indexIO.validateTwoSegments(tempDir1, mergedDir);\n\n    assertDimCompression(index1, indexSpec.getDimensionCompression());\n    assertDimCompression(merged, indexSpec.getDimensionCompression());\n\n    Assert.assertArrayEquals(\n        getCombiningAggregators(mergedAggregators),\n        merged.getMetadata().getAggregators()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":464,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-03 01:50:22","codes":[{"authorDate":"2018-10-03 01:50:22","commitOrder":2,"curCode":"  public void testMergeRetainsValues() throws Exception\n  {\n    final long timestamp = System.currentTimeMillis();\n    IncrementalIndex toPersist1 = IncrementalIndexTest.createIndex(null);\n    IncrementalIndexTest.populateIndex(timestamp, toPersist1);\n\n    final File tempDir1 = temporaryFolder.newFolder();\n    final File mergedDir = temporaryFolder.newFolder();\n    final IndexableAdapter incrementalAdapter = new IncrementalIndexAdapter(\n        toPersist1.getInterval(),\n        toPersist1,\n        indexSpec.getBitmapSerdeFactory()\n                 .getBitmapFactory()\n    );\n\n    QueryableIndex index1 = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersist1, tempDir1, indexSpec, null))\n    );\n\n\n    final IndexableAdapter queryableAdapter = new QueryableIndexIndexableAdapter(index1);\n\n    indexIO.validateTwoSegments(incrementalAdapter, queryableAdapter);\n\n    Assert.assertEquals(2, index1.getColumnHolder(ColumnHolder.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(index1.getAvailableDimensions()));\n    Assert.assertEquals(3, index1.getColumnNames().size());\n\n\n    QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                ImmutableList.of(index1),\n                true,\n                new AggregatorFactory[]{new CountAggregatorFactory(\"count\")},\n                mergedDir,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    Assert.assertEquals(2, merged.getColumnHolder(ColumnHolder.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(merged.getAvailableDimensions()));\n    Assert.assertEquals(3, merged.getColumnNames().size());\n\n    indexIO.validateTwoSegments(tempDir1, mergedDir);\n\n    assertDimCompression(index1, indexSpec.getDimensionCompression());\n    assertDimCompression(merged, indexSpec.getDimensionCompression());\n  }\n","date":"2018-10-03 01:50:22","endLine":460,"groupId":"6911","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeRetainsValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d1/9af352d4088845b2b3780d0d18f1b47b6688eb.src","preCode":"  public void testMergeRetainsValues() throws Exception\n  {\n    final long timestamp = System.currentTimeMillis();\n    IncrementalIndex toPersist1 = IncrementalIndexTest.createIndex(null);\n    IncrementalIndexTest.populateIndex(timestamp, toPersist1);\n\n    final File tempDir1 = temporaryFolder.newFolder();\n    final File mergedDir = temporaryFolder.newFolder();\n    final IndexableAdapter incrementalAdapter = new IncrementalIndexAdapter(\n        toPersist1.getInterval(),\n        toPersist1,\n        indexSpec.getBitmapSerdeFactory()\n                 .getBitmapFactory()\n    );\n\n    QueryableIndex index1 = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersist1, tempDir1, indexSpec, null))\n    );\n\n\n    final IndexableAdapter queryableAdapter = new QueryableIndexIndexableAdapter(index1);\n\n    indexIO.validateTwoSegments(incrementalAdapter, queryableAdapter);\n\n    Assert.assertEquals(2, index1.getColumn(Column.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(index1.getAvailableDimensions()));\n    Assert.assertEquals(3, index1.getColumnNames().size());\n\n\n    QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                ImmutableList.of(index1),\n                true,\n                new AggregatorFactory[]{new CountAggregatorFactory(\"count\")},\n                mergedDir,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    Assert.assertEquals(2, merged.getColumn(Column.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(merged.getAvailableDimensions()));\n    Assert.assertEquals(3, merged.getColumnNames().size());\n\n    indexIO.validateTwoSegments(tempDir1, mergedDir);\n\n    assertDimCompression(index1, indexSpec.getDimensionCompression());\n    assertDimCompression(merged, indexSpec.getDimensionCompression());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":410,"status":"M"},{"authorDate":"2018-10-03 01:50:22","commitOrder":2,"curCode":"  public void testAppendRetainsValues() throws Exception\n  {\n    final long timestamp = System.currentTimeMillis();\n    IncrementalIndex toPersist1 = IncrementalIndexTest.createIndex(null);\n    IncrementalIndexTest.populateIndex(timestamp, toPersist1);\n\n    final File tempDir1 = temporaryFolder.newFolder();\n    final File mergedDir = temporaryFolder.newFolder();\n    final IndexableAdapter incrementalAdapter = new IncrementalIndexAdapter(\n        toPersist1.getInterval(),\n        toPersist1,\n        indexSpec.getBitmapSerdeFactory()\n                 .getBitmapFactory()\n    );\n\n    QueryableIndex index1 = closer.closeLater(\n        indexIO.loadIndex(indexMerger.append(ImmutableList.of(incrementalAdapter), null, tempDir1, indexSpec, null))\n    );\n    final IndexableAdapter queryableAdapter = new QueryableIndexIndexableAdapter(index1);\n\n    indexIO.validateTwoSegments(incrementalAdapter, queryableAdapter);\n\n    Assert.assertEquals(2, index1.getColumnHolder(ColumnHolder.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(index1.getAvailableDimensions()));\n    Assert.assertEquals(3, index1.getColumnNames().size());\n\n    Assert.assertArrayEquals(\n        IncrementalIndexTest.getDefaultCombiningAggregatorFactories(),\n        index1.getMetadata().getAggregators()\n    );\n\n    AggregatorFactory[] mergedAggregators = new AggregatorFactory[]{new CountAggregatorFactory(\"count\")};\n    QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                ImmutableList.of(index1),\n                true,\n                mergedAggregators,\n                mergedDir,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    Assert.assertEquals(2, merged.getColumnHolder(ColumnHolder.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(merged.getAvailableDimensions()));\n    Assert.assertEquals(3, merged.getColumnNames().size());\n\n    indexIO.validateTwoSegments(tempDir1, mergedDir);\n\n    assertDimCompression(index1, indexSpec.getDimensionCompression());\n    assertDimCompression(merged, indexSpec.getDimensionCompression());\n\n    Assert.assertArrayEquals(\n        getCombiningAggregators(mergedAggregators),\n        merged.getMetadata().getAggregators()\n    );\n  }\n","date":"2018-10-03 01:50:22","endLine":521,"groupId":"6086","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAppendRetainsValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d1/9af352d4088845b2b3780d0d18f1b47b6688eb.src","preCode":"  public void testAppendRetainsValues() throws Exception\n  {\n    final long timestamp = System.currentTimeMillis();\n    IncrementalIndex toPersist1 = IncrementalIndexTest.createIndex(null);\n    IncrementalIndexTest.populateIndex(timestamp, toPersist1);\n\n    final File tempDir1 = temporaryFolder.newFolder();\n    final File mergedDir = temporaryFolder.newFolder();\n    final IndexableAdapter incrementalAdapter = new IncrementalIndexAdapter(\n        toPersist1.getInterval(),\n        toPersist1,\n        indexSpec.getBitmapSerdeFactory()\n                 .getBitmapFactory()\n    );\n\n    QueryableIndex index1 = closer.closeLater(\n        indexIO.loadIndex(indexMerger.append(ImmutableList.of(incrementalAdapter), null, tempDir1, indexSpec, null))\n    );\n    final IndexableAdapter queryableAdapter = new QueryableIndexIndexableAdapter(index1);\n\n    indexIO.validateTwoSegments(incrementalAdapter, queryableAdapter);\n\n    Assert.assertEquals(2, index1.getColumn(Column.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(index1.getAvailableDimensions()));\n    Assert.assertEquals(3, index1.getColumnNames().size());\n\n    Assert.assertArrayEquals(\n        IncrementalIndexTest.getDefaultCombiningAggregatorFactories(),\n        index1.getMetadata().getAggregators()\n    );\n\n    AggregatorFactory[] mergedAggregators = new AggregatorFactory[]{new CountAggregatorFactory(\"count\")};\n    QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                ImmutableList.of(index1),\n                true,\n                mergedAggregators,\n                mergedDir,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    Assert.assertEquals(2, merged.getColumn(Column.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(merged.getAvailableDimensions()));\n    Assert.assertEquals(3, merged.getColumnNames().size());\n\n    indexIO.validateTwoSegments(tempDir1, mergedDir);\n\n    assertDimCompression(index1, indexSpec.getDimensionCompression());\n    assertDimCompression(merged, indexSpec.getDimensionCompression());\n\n    Assert.assertArrayEquals(\n        getCombiningAggregators(mergedAggregators),\n        merged.getMetadata().getAggregators()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":463,"status":"M"}],"commitId":"3ae563263a23000560749071d262727d47296856","commitMessage":"@@@Renamed 'Generic Column' -> 'Numeric Column'; Fixed a few resource leaks in processing; misc refinements (#5957)\n\nThis PR accumulates many refactorings and small improvements that I did while preparing the next change set of https://github.com/druid-io/druid/projects/2. I finally decided to make them a separate PR to minimize the volume of the main PR.\n\nSome of the changes:\n - Renamed confusing \"Generic Column\" term to \"Numeric Column\" (what it actually implies) in many class names.\n - Generified `ComplexMetricExtractor`","date":"2018-10-03 01:50:22","modifiedFileCount":"776","status":"M","submitter":"Roman Leventov"},{"authorTime":"2021-01-06 14:19:09","codes":[{"authorDate":"2021-01-06 14:19:09","commitOrder":3,"curCode":"  public void testMergeRetainsValues() throws Exception\n  {\n    final long timestamp = System.currentTimeMillis();\n    IncrementalIndex toPersist1 = IncrementalIndexTest.createIndex(null);\n    IncrementalIndexTest.populateIndex(timestamp, toPersist1);\n\n    final File tempDir1 = temporaryFolder.newFolder();\n    final File mergedDir = temporaryFolder.newFolder();\n    final IndexableAdapter incrementalAdapter = new IncrementalIndexAdapter(\n        toPersist1.getInterval(),\n        toPersist1,\n        indexSpec.getBitmapSerdeFactory()\n                 .getBitmapFactory()\n    );\n\n    QueryableIndex index1 = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersist1, tempDir1, indexSpec, null))\n    );\n\n\n    final IndexableAdapter queryableAdapter = new QueryableIndexIndexableAdapter(index1);\n\n    indexIO.validateTwoSegments(incrementalAdapter, queryableAdapter);\n\n    Assert.assertEquals(2, index1.getColumnHolder(ColumnHolder.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(index1.getAvailableDimensions()));\n    Assert.assertEquals(3, index1.getColumnNames().size());\n\n\n    QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                ImmutableList.of(index1),\n                true,\n                new AggregatorFactory[]{new CountAggregatorFactory(\"count\")},\n                mergedDir,\n                indexSpec,\n                null,\n                -1\n            )\n        )\n    );\n\n    Assert.assertEquals(2, merged.getColumnHolder(ColumnHolder.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(merged.getAvailableDimensions()));\n    Assert.assertEquals(3, merged.getColumnNames().size());\n\n    indexIO.validateTwoSegments(tempDir1, mergedDir);\n\n    assertDimCompression(index1, indexSpec.getDimensionCompression());\n    assertDimCompression(merged, indexSpec.getDimensionCompression());\n  }\n","date":"2021-01-06 14:19:09","endLine":463,"groupId":"105790","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeRetainsValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/6429f20ca529bbd9164de23ddb2068e18235fb.src","preCode":"  public void testMergeRetainsValues() throws Exception\n  {\n    final long timestamp = System.currentTimeMillis();\n    IncrementalIndex toPersist1 = IncrementalIndexTest.createIndex(null);\n    IncrementalIndexTest.populateIndex(timestamp, toPersist1);\n\n    final File tempDir1 = temporaryFolder.newFolder();\n    final File mergedDir = temporaryFolder.newFolder();\n    final IndexableAdapter incrementalAdapter = new IncrementalIndexAdapter(\n        toPersist1.getInterval(),\n        toPersist1,\n        indexSpec.getBitmapSerdeFactory()\n                 .getBitmapFactory()\n    );\n\n    QueryableIndex index1 = closer.closeLater(\n        indexIO.loadIndex(indexMerger.persist(toPersist1, tempDir1, indexSpec, null))\n    );\n\n\n    final IndexableAdapter queryableAdapter = new QueryableIndexIndexableAdapter(index1);\n\n    indexIO.validateTwoSegments(incrementalAdapter, queryableAdapter);\n\n    Assert.assertEquals(2, index1.getColumnHolder(ColumnHolder.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(index1.getAvailableDimensions()));\n    Assert.assertEquals(3, index1.getColumnNames().size());\n\n\n    QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                ImmutableList.of(index1),\n                true,\n                new AggregatorFactory[]{new CountAggregatorFactory(\"count\")},\n                mergedDir,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    Assert.assertEquals(2, merged.getColumnHolder(ColumnHolder.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(merged.getAvailableDimensions()));\n    Assert.assertEquals(3, merged.getColumnNames().size());\n\n    indexIO.validateTwoSegments(tempDir1, mergedDir);\n\n    assertDimCompression(index1, indexSpec.getDimensionCompression());\n    assertDimCompression(merged, indexSpec.getDimensionCompression());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"M"},{"authorDate":"2021-01-06 14:19:09","commitOrder":3,"curCode":"  public void testAppendRetainsValues() throws Exception\n  {\n    final long timestamp = System.currentTimeMillis();\n    IncrementalIndex toPersist1 = IncrementalIndexTest.createIndex(null);\n    IncrementalIndexTest.populateIndex(timestamp, toPersist1);\n\n    final File tempDir1 = temporaryFolder.newFolder();\n    final File mergedDir = temporaryFolder.newFolder();\n    final IndexableAdapter incrementalAdapter = new IncrementalIndexAdapter(\n        toPersist1.getInterval(),\n        toPersist1,\n        indexSpec.getBitmapSerdeFactory()\n                 .getBitmapFactory()\n    );\n\n    QueryableIndex index1 = closer.closeLater(\n        indexIO.loadIndex(indexMerger.append(ImmutableList.of(incrementalAdapter), null, tempDir1, indexSpec, null))\n    );\n    final IndexableAdapter queryableAdapter = new QueryableIndexIndexableAdapter(index1);\n\n    indexIO.validateTwoSegments(incrementalAdapter, queryableAdapter);\n\n    Assert.assertEquals(2, index1.getColumnHolder(ColumnHolder.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(index1.getAvailableDimensions()));\n    Assert.assertEquals(3, index1.getColumnNames().size());\n\n    Assert.assertArrayEquals(\n        IncrementalIndexTest.getDefaultCombiningAggregatorFactories(),\n        index1.getMetadata().getAggregators()\n    );\n\n    AggregatorFactory[] mergedAggregators = new AggregatorFactory[]{new CountAggregatorFactory(\"count\")};\n    QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                ImmutableList.of(index1),\n                true,\n                mergedAggregators,\n                mergedDir,\n                indexSpec,\n                null,\n                -1\n            )\n        )\n    );\n\n    Assert.assertEquals(2, merged.getColumnHolder(ColumnHolder.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(merged.getAvailableDimensions()));\n    Assert.assertEquals(3, merged.getColumnNames().size());\n\n    indexIO.validateTwoSegments(tempDir1, mergedDir);\n\n    assertDimCompression(index1, indexSpec.getDimensionCompression());\n    assertDimCompression(merged, indexSpec.getDimensionCompression());\n\n    Assert.assertArrayEquals(\n        getCombiningAggregators(mergedAggregators),\n        merged.getMetadata().getAggregators()\n    );\n  }\n","date":"2021-01-06 14:19:09","endLine":525,"groupId":"105790","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAppendRetainsValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/6429f20ca529bbd9164de23ddb2068e18235fb.src","preCode":"  public void testAppendRetainsValues() throws Exception\n  {\n    final long timestamp = System.currentTimeMillis();\n    IncrementalIndex toPersist1 = IncrementalIndexTest.createIndex(null);\n    IncrementalIndexTest.populateIndex(timestamp, toPersist1);\n\n    final File tempDir1 = temporaryFolder.newFolder();\n    final File mergedDir = temporaryFolder.newFolder();\n    final IndexableAdapter incrementalAdapter = new IncrementalIndexAdapter(\n        toPersist1.getInterval(),\n        toPersist1,\n        indexSpec.getBitmapSerdeFactory()\n                 .getBitmapFactory()\n    );\n\n    QueryableIndex index1 = closer.closeLater(\n        indexIO.loadIndex(indexMerger.append(ImmutableList.of(incrementalAdapter), null, tempDir1, indexSpec, null))\n    );\n    final IndexableAdapter queryableAdapter = new QueryableIndexIndexableAdapter(index1);\n\n    indexIO.validateTwoSegments(incrementalAdapter, queryableAdapter);\n\n    Assert.assertEquals(2, index1.getColumnHolder(ColumnHolder.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(index1.getAvailableDimensions()));\n    Assert.assertEquals(3, index1.getColumnNames().size());\n\n    Assert.assertArrayEquals(\n        IncrementalIndexTest.getDefaultCombiningAggregatorFactories(),\n        index1.getMetadata().getAggregators()\n    );\n\n    AggregatorFactory[] mergedAggregators = new AggregatorFactory[]{new CountAggregatorFactory(\"count\")};\n    QueryableIndex merged = closer.closeLater(\n        indexIO.loadIndex(\n            indexMerger.mergeQueryableIndex(\n                ImmutableList.of(index1),\n                true,\n                mergedAggregators,\n                mergedDir,\n                indexSpec,\n                null\n            )\n        )\n    );\n\n    Assert.assertEquals(2, merged.getColumnHolder(ColumnHolder.TIME_COLUMN_NAME).getLength());\n    Assert.assertEquals(Arrays.asList(\"dim1\", \"dim2\"), Lists.newArrayList(merged.getAvailableDimensions()));\n    Assert.assertEquals(3, merged.getColumnNames().size());\n\n    indexIO.validateTwoSegments(tempDir1, mergedDir);\n\n    assertDimCompression(index1, indexSpec.getDimensionCompression());\n    assertDimCompression(merged, indexSpec.getDimensionCompression());\n\n    Assert.assertArrayEquals(\n        getCombiningAggregators(mergedAggregators),\n        merged.getMetadata().getAggregators()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerTestBase.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":466,"status":"M"}],"commitId":"68bb038b314c26bcc57aa96e1078c22d2f24fd35","commitMessage":"@@@Multiphase segment merge for IndexMergerV9 (#10689)\n\n* Multiphase merge for IndexMergerV9\n\n* JSON fix\n\n* Cleanup temp files\n\n* Docs\n\n* Address logging and add IT\n\n* Fix spelling and test unloader datasource name","date":"2021-01-06 14:19:09","modifiedFileCount":"40","status":"M","submitter":"Jonathan Wei"}]
