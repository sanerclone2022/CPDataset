[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTimeBoundaryCaching()\n  {\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-02\")),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-03\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-10\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MAX_TIME)\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-01\"), null, DateTimes.of(\"2011-01-02\")),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), null, DateTimes.of(\"2011-01-03\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05\"), null, DateTimes.of(\"2011-01-10\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05T01\"), null, DateTimes.of(\"2011-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MIN_TIME)\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-01\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-02\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-05\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-05T01\"), null)\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":1597,"groupId":"15890","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeBoundaryCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4a/6dfd0a7ba50835713564aebc5ab8650ac4b7a1.src","preCode":"  public void testTimeBoundaryCaching()\n  {\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-02\")),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-03\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-10\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MAX_TIME)\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-01\"), null, DateTimes.of(\"2011-01-02\")),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), null, DateTimes.of(\"2011-01-03\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05\"), null, DateTimes.of(\"2011-01-10\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05T01\"), null, DateTimes.of(\"2011-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MIN_TIME)\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-01\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-02\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-05\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-05T01\"), null)\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/CachingClusteredClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1534,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTimeBoundaryCachingWhenTimeIsInteger()\n  {\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .build(),\n        Intervals.of(\"1970-01-01/1970-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-02\")),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-03\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-10\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MAX_TIME)\n              .build(),\n        Intervals.of(\"1970-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-01\"), null, DateTimes.of(\"1970-01-02\")),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), null, DateTimes.of(\"1970-01-03\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05\"), null, DateTimes.of(\"1970-01-10\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05T01\"), null, DateTimes.of(\"1970-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MIN_TIME)\n              .build(),\n        Intervals.of(\"1970-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-01\"), null),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-02\"), null),\n\n        Intervals.of(\"1970-01-01/1970-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-05\"), null),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-05T01\"), null)\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":2949,"groupId":"15890","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeBoundaryCachingWhenTimeIsInteger","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4a/6dfd0a7ba50835713564aebc5ab8650ac4b7a1.src","preCode":"  public void testTimeBoundaryCachingWhenTimeIsInteger()\n  {\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .build(),\n        Intervals.of(\"1970-01-01/1970-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-02\")),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-03\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-10\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MAX_TIME)\n              .build(),\n        Intervals.of(\"1970-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-01\"), null, DateTimes.of(\"1970-01-02\")),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), null, DateTimes.of(\"1970-01-03\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05\"), null, DateTimes.of(\"1970-01-10\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05T01\"), null, DateTimes.of(\"1970-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MIN_TIME)\n              .build(),\n        Intervals.of(\"1970-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-01\"), null),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-02\"), null),\n\n        Intervals.of(\"1970-01-01/1970-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-05\"), null),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-05T01\"), null)\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/CachingClusteredClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2886,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-11-08 03:58:46","codes":[{"authorDate":"2019-11-08 03:58:46","commitOrder":2,"curCode":"  public void testTimeBoundaryCaching()\n  {\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-02\")),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-03\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-10\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MAX_TIME)\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), null, DateTimes.of(\"2011-01-02\")),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-03\"), null, DateTimes.of(\"2011-01-03\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-10\"), null, DateTimes.of(\"2011-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MIN_TIME)\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-01\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-02\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-05\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-05T01\"), null)\n    );\n  }\n","date":"2019-11-08 03:58:46","endLine":1414,"groupId":"20559","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeBoundaryCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d8/75df32990400bfc403fed405514b1da9dd1a33.src","preCode":"  public void testTimeBoundaryCaching()\n  {\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-02\")),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-03\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-10\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MAX_TIME)\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-01\"), null, DateTimes.of(\"2011-01-02\")),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), null, DateTimes.of(\"2011-01-03\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05\"), null, DateTimes.of(\"2011-01-10\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05T01\"), null, DateTimes.of(\"2011-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MIN_TIME)\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-01\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-02\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-05\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-05T01\"), null)\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/CachingClusteredClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1354,"status":"M"},{"authorDate":"2019-11-08 03:58:46","commitOrder":2,"curCode":"  public void testTimeBoundaryCachingWhenTimeIsInteger()\n  {\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .build(),\n        Intervals.of(\"1970-01-01/1970-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-02\")),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-03\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-10\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MAX_TIME)\n              .build(),\n        Intervals.of(\"1970-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), null, DateTimes.of(\"1970-01-02\")),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-03\"), null, DateTimes.of(\"1970-01-03\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-10\"), null, DateTimes.of(\"1970-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MIN_TIME)\n              .build(),\n        Intervals.of(\"1970-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-01\"), null),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-02\"), null),\n\n        Intervals.of(\"1970-01-01/1970-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-05\"), null),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-05T01\"), null)\n    );\n  }\n","date":"2019-11-08 03:58:46","endLine":2806,"groupId":"20559","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeBoundaryCachingWhenTimeIsInteger","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d8/75df32990400bfc403fed405514b1da9dd1a33.src","preCode":"  public void testTimeBoundaryCachingWhenTimeIsInteger()\n  {\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .build(),\n        Intervals.of(\"1970-01-01/1970-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-02\")),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-03\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-10\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MAX_TIME)\n              .build(),\n        Intervals.of(\"1970-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-01\"), null, DateTimes.of(\"1970-01-02\")),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), null, DateTimes.of(\"1970-01-03\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05\"), null, DateTimes.of(\"1970-01-10\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05T01\"), null, DateTimes.of(\"1970-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MIN_TIME)\n              .build(),\n        Intervals.of(\"1970-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-01\"), null),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-02\"), null),\n\n        Intervals.of(\"1970-01-01/1970-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-05\"), null),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-05T01\"), null)\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/CachingClusteredClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2746,"status":"M"}],"commitId":"7aafcf8bcae3d57a8992a2634c7b73869c9a4117","commitMessage":"@@@parallel broker merges on fork join pool (#8578)\n\n* sketch of broker parallel merges done in small batches on fork join pool\n\n* fix non-terminating sequences.  auto compute parallelism\n\n* adjust benches\n\n* adjust benchmarks\n\n* now hella more faster.  fixed dumb\n\n* fix\n\n* remove comments\n\n* log.info for debug\n\n* javadoc\n\n* safer block for sequence to yielder conversion\n\n* refactor LifecycleForkJoinPool into LifecycleForkJoinPoolProvider which wraps a ForkJoinPool\n\n* smooth yield rate adjustment.  more logs to help tune\n\n* cleanup.  less logs\n\n* error handling.  bug fixes.  on by default.  more parallel.  more tests\n\n* remove unused var\n\n* comments\n\n* timeboundary mergeFn\n\n* simplify.  more javadoc\n\n* formatting\n\n* pushdown config\n\n* use nanos consistently.  move logs back to debug level.  bit more javadoc\n\n* static terminal result batch\n\n* javadoc for nullability of createMergeFn\n\n* cleanup\n\n* oops\n\n* fix race.  add docs\n\n* spelling.  remove todo.  add unhandled exception log\n\n* cleanup.  revert unintended change\n\n* another unintended change\n\n* review stuff\n\n* add ParallelMergeCombiningSequenceBenchmark.  fixes\n\n* hyper-threading is the enemy\n\n* fix initial start delay.  lol\n\n* parallelism computer now balances partition sizes to partition counts using sqrt of sequence count instead of sequence count by 2\n\n* fix those important style issues with the benchmarks code\n\n* lazy sequence creation for benchmarks\n\n* more benchmark comments\n\n* stable sequence generation time\n\n* update defaults to use 100ms target time.  4096 batch size.  16384 initial yield.  also update user docs\n\n* add jmh thread based benchmarks.  cleanup some stuff\n\n* oops\n\n* style\n\n* add spread to jmh thread benchmark start range.  more comments to benchmarks parameters and purpose\n\n* retool benchmark to allow modeling more typical heterogenous heavy workloads\n\n* spelling\n\n* fix\n\n* refactor benchmarks\n\n* formatting\n\n* docs\n\n* add maxThreadStartDelay parameter to threaded benchmark\n\n* why does catch need to be on its own line but else doesnt\n","date":"2019-11-08 03:58:46","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-07-02 05:02:21","codes":[{"authorDate":"2020-07-02 05:02:21","commitOrder":3,"curCode":"  public void testTimeBoundaryCaching()\n  {\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .randomQueryId()\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-02\")),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-03\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-10\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MAX_TIME)\n              .randomQueryId()\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), null, DateTimes.of(\"2011-01-02\")),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-03\"), null, DateTimes.of(\"2011-01-03\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-10\"), null, DateTimes.of(\"2011-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MIN_TIME)\n              .randomQueryId()\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-01\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-02\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-05\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-05T01\"), null)\n    );\n  }\n","date":"2020-07-02 05:02:21","endLine":1407,"groupId":"10878","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeBoundaryCaching","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/45/2dd8cadd6b4c232ab41fc0990812d7c3f25a27.src","preCode":"  public void testTimeBoundaryCaching()\n  {\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-02\")),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-03\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-10\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MAX_TIME)\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), null, DateTimes.of(\"2011-01-02\")),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-03\"), null, DateTimes.of(\"2011-01-03\")),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-10\"), null, DateTimes.of(\"2011-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MIN_TIME)\n              .build(),\n        Intervals.of(\"2011-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-01\"), DateTimes.of(\"2011-01-01\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-02\"), DateTimes.of(\"2011-01-02\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05\"), DateTimes.of(\"2011-01-05\"), null),\n\n        Intervals.of(\"2011-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"2011-01-05T01\"), DateTimes.of(\"2011-01-05T01\"), null)\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/CachingClusteredClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1344,"status":"M"},{"authorDate":"2020-07-02 05:02:21","commitOrder":3,"curCode":"  public void testTimeBoundaryCachingWhenTimeIsInteger()\n  {\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .randomQueryId()\n              .build(),\n        Intervals.of(\"1970-01-01/1970-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-02\")),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-03\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-10\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MAX_TIME)\n              .randomQueryId()\n              .build(),\n        Intervals.of(\"1970-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), null, DateTimes.of(\"1970-01-02\")),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-03\"), null, DateTimes.of(\"1970-01-03\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-10\"), null, DateTimes.of(\"1970-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MIN_TIME)\n              .randomQueryId()\n              .build(),\n        Intervals.of(\"1970-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-01\"), null),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-02\"), null),\n\n        Intervals.of(\"1970-01-01/1970-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-05\"), null),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-05T01\"), null)\n    );\n  }\n","date":"2020-07-02 05:02:21","endLine":2813,"groupId":"10878","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeBoundaryCachingWhenTimeIsInteger","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/45/2dd8cadd6b4c232ab41fc0990812d7c3f25a27.src","preCode":"  public void testTimeBoundaryCachingWhenTimeIsInteger()\n  {\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .build(),\n        Intervals.of(\"1970-01-01/1970-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-02\")),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-03\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-10\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MAX_TIME)\n              .build(),\n        Intervals.of(\"1970-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), null, DateTimes.of(\"1970-01-02\")),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-03\"), null, DateTimes.of(\"1970-01-03\")),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-10\"), null, DateTimes.of(\"1970-01-10\"))\n    );\n\n    testQueryCaching(\n        getDefaultQueryRunner(),\n        Druids.newTimeBoundaryQueryBuilder()\n              .dataSource(CachingClusteredClientTest.DATA_SOURCE)\n              .intervals(CachingClusteredClientTest.SEG_SPEC)\n              .context(CachingClusteredClientTest.CONTEXT)\n              .bound(TimeBoundaryQuery.MIN_TIME)\n              .build(),\n        Intervals.of(\"1970-01-01/2011-01-02\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-01\"), DateTimes.of(\"1970-01-01\"), null),\n\n        Intervals.of(\"1970-01-01/2011-01-03\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-02\"), DateTimes.of(\"1970-01-02\"), null),\n\n        Intervals.of(\"1970-01-01/1970-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05\"), DateTimes.of(\"1970-01-05\"), null),\n\n        Intervals.of(\"1970-01-01/2011-01-10\"),\n        makeTimeBoundaryResult(DateTimes.of(\"1970-01-05T01\"), DateTimes.of(\"1970-01-05T01\"), null)\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/CachingClusteredClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2750,"status":"M"}],"commitId":"657f8ee80fa86779cf26a01072814b1530277aa7","commitMessage":"@@@Fix RetryQueryRunner to actually do the job (#10082)\n\n* Fix RetryQueryRunner to actually do the job\n\n* more javadoc\n\n* fix test and checkstyle\n\n* don't combine for testing\n\n* address comments\n\n* fix unit tests\n\n* always initialize response context in cachingClusteredClient\n\n* fix subquery\n\n* address comments\n\n* fix test\n\n* query id for builders\n\n* make queryId optional in the builders and ClusterQueryResult\n\n* fix test\n\n* suppress tests and unused methods\n\n* exclude groupBy builder\n\n* fix jacoco exclusion\n\n* add tests for builders\n\n* address comments\n\n* don't truncate","date":"2020-07-02 05:02:21","modifiedFileCount":"33","status":"M","submitter":"Jihoon Son"}]
