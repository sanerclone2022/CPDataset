[{"authorTime":"2020-03-10 17:57:16","codes":[{"authorDate":"2020-03-10 17:57:16","commitOrder":1,"curCode":"  public void testConcurrencyLo() throws Exception\n  {\n    List<Future<?>> futures = new ArrayList<>(NUM_CONCURRENT_QUERIES);\n    for (int i = 0; i < NUM_CONCURRENT_QUERIES; i++) {\n      futures.add(makeQueryFuture(executorService, scheduler, makeReportQuery(), NUM_ROWS));\n      maybeDelayNextIteration(i);\n    }\n    getFuturesAndAssertAftermathIsChill(futures, scheduler, false);\n  }\n","date":"2020-03-10 17:57:16","endLine":332,"groupId":"9229","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcurrencyLo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/07/82be0a1936485da2dc0a2cd9f991160d874998.src","preCode":"  public void testConcurrencyLo() throws Exception\n  {\n    List<Future<?>> futures = new ArrayList<>(NUM_CONCURRENT_QUERIES);\n    for (int i = 0; i < NUM_CONCURRENT_QUERIES; i++) {\n      futures.add(makeQueryFuture(executorService, scheduler, makeReportQuery(), NUM_ROWS));\n      maybeDelayNextIteration(i);\n    }\n    getFuturesAndAssertAftermathIsChill(futures, scheduler, false);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QuerySchedulerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"B"},{"authorDate":"2020-03-10 17:57:16","commitOrder":1,"curCode":"  public void testConcurrencyHi() throws Exception\n  {\n    List<Future<?>> futures = new ArrayList<>(NUM_CONCURRENT_QUERIES);\n    for (int i = 0; i < NUM_CONCURRENT_QUERIES; i++) {\n      futures.add(makeQueryFuture(executorService, scheduler, makeInteractiveQuery(), NUM_ROWS));\n      maybeDelayNextIteration(i);\n    }\n    getFuturesAndAssertAftermathIsChill(futures, scheduler, true);\n  }\n","date":"2020-03-10 17:57:16","endLine":343,"groupId":"9229","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrencyHi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/07/82be0a1936485da2dc0a2cd9f991160d874998.src","preCode":"  public void testConcurrencyHi() throws Exception\n  {\n    List<Future<?>> futures = new ArrayList<>(NUM_CONCURRENT_QUERIES);\n    for (int i = 0; i < NUM_CONCURRENT_QUERIES; i++) {\n      futures.add(makeQueryFuture(executorService, scheduler, makeInteractiveQuery(), NUM_ROWS));\n      maybeDelayNextIteration(i);\n    }\n    getFuturesAndAssertAftermathIsChill(futures, scheduler, true);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QuerySchedulerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"B"}],"commitId":"8b9fe6f58461f1fc3f453c14f1634f9e779aeb71","commitMessage":"@@@query laning and load shedding (#9407)\n\n* prototype\n\n* merge QueryScheduler and QueryManager\n\n* everything in its right place\n\n* adjustments\n\n* docs\n\n* fixes\n\n* doc fixes\n\n* use resilience4j instead of semaphore\n\n* more tests\n\n* simplify\n\n* checkstyle\n\n* spelling\n\n* oops heh\n\n* remove unused\n\n* simplify\n\n* concurrency tests\n\n* add SqlResource tests.  refactor error response\n\n* add json config tests\n\n* use LongAdder instead of AtomicLong\n\n* remove test only stuffs from scheduler\n\n* javadocs.  etc\n\n* style\n\n* partial review stuffs\n\n* adjust\n\n* review stuffs\n\n* more javadoc\n\n* error response documentation\n\n* spelling\n\n* preserve user specified lane for NoSchedulingStrategy\n\n* more test.  why not\n\n* doc adjustment\n\n* style\n\n* missed review for make a thing a constant\n\n* fixes and tests\n\n* fix test\n\n* Update docs/configuration/index.md\n\nCo-Authored-By: sthetland <steve.hetland@imply.io>\n\n* doc update\n\nCo-authored-by: sthetland <steve.hetland@imply.io>","date":"2020-03-10 17:57:16","modifiedFileCount":"26","status":"B","submitter":"Clint Wylie"},{"authorTime":"2020-03-19 09:05:59","codes":[{"authorDate":"2020-03-19 09:05:59","commitOrder":2,"curCode":"  public void testConcurrencyLo() throws Exception\n  {\n    List<Future<?>> futures = new ArrayList<>(NUM_QUERIES);\n    for (int i = 0; i < NUM_QUERIES; i++) {\n      futures.add(makeQueryFuture(executorService, scheduler, makeReportQuery(), NUM_ROWS));\n      maybeDelayNextIteration(i);\n    }\n    getFuturesAndAssertAftermathIsChill(futures, scheduler, false, false);\n    assertHiLoHasAllCapacity(TEST_HI_CAPACITY, TEST_LO_CAPACITY);\n  }\n","date":"2020-03-19 09:05:59","endLine":298,"groupId":"10305","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcurrencyLo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/3ef3b55981f7baa88d87ef56dfc20eb9696140.src","preCode":"  public void testConcurrencyLo() throws Exception\n  {\n    List<Future<?>> futures = new ArrayList<>(NUM_CONCURRENT_QUERIES);\n    for (int i = 0; i < NUM_CONCURRENT_QUERIES; i++) {\n      futures.add(makeQueryFuture(executorService, scheduler, makeReportQuery(), NUM_ROWS));\n      maybeDelayNextIteration(i);\n    }\n    getFuturesAndAssertAftermathIsChill(futures, scheduler, false);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QuerySchedulerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"},{"authorDate":"2020-03-19 09:05:59","commitOrder":2,"curCode":"  public void testConcurrencyHi() throws Exception\n  {\n    List<Future<?>> futures = new ArrayList<>(NUM_QUERIES);\n    for (int i = 0; i < NUM_QUERIES; i++) {\n      futures.add(makeQueryFuture(executorService, scheduler, makeInteractiveQuery(), NUM_ROWS));\n      maybeDelayNextIteration(i);\n    }\n    getFuturesAndAssertAftermathIsChill(futures, scheduler, true, false);\n    assertHiLoHasAllCapacity(TEST_HI_CAPACITY, TEST_LO_CAPACITY);\n  }\n","date":"2020-03-19 09:05:59","endLine":310,"groupId":"10305","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrencyHi","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/3ef3b55981f7baa88d87ef56dfc20eb9696140.src","preCode":"  public void testConcurrencyHi() throws Exception\n  {\n    List<Future<?>> futures = new ArrayList<>(NUM_CONCURRENT_QUERIES);\n    for (int i = 0; i < NUM_CONCURRENT_QUERIES; i++) {\n      futures.add(makeQueryFuture(executorService, scheduler, makeInteractiveQuery(), NUM_ROWS));\n      maybeDelayNextIteration(i);\n    }\n    getFuturesAndAssertAftermathIsChill(futures, scheduler, true);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QuerySchedulerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"}],"commitId":"68013fbc64ac28e0033d7eca3099806609ba96f4","commitMessage":"@@@fix issue where total limit was being applied even when not configured (#9534)\n\n* fix issue where total limit was being applied even when not configured\n\n* fix inspection\n\n* add reserved lane name check to manual laning strategy","date":"2020-03-19 09:05:59","modifiedFileCount":"4","status":"M","submitter":"Clint Wylie"}]
