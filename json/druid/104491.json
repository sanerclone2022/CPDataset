[{"authorTime":"2019-12-10 15:05:49","codes":[{"authorDate":"2019-11-21 09:24:12","commitOrder":2,"curCode":"  public void forceGuaranteedRollupWithHashPartitionsMissingNumShards()\n  {\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\n        \"forceGuaranteedRollup is incompatible with partitionsSpec: numShards must be specified\"\n    );\n\n    Integer numShards = null;\n    new ParallelIndexSupervisorTaskBuilder()\n        .ingestionSpec(\n            new ParallelIndexIngestionSpecBuilder()\n                .forceGuaranteedRollup(true)\n                .partitionsSpec(new HashedPartitionsSpec(null, numShards, null))\n                .inputIntervals(INTERVALS)\n                .build()\n        )\n        .build();\n  }\n","date":"2019-11-21 09:24:12","endLine":135,"groupId":"22834","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"forceGuaranteedRollupWithHashPartitionsMissingNumShards","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/97/c6954e92474da59763ab8e9d4991072c23ea2d.src","preCode":"  public void forceGuaranteedRollupWithHashPartitionsMissingNumShards()\n  {\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\n        \"forceGuaranteedRollup is incompatible with partitionsSpec: numShards must be specified\"\n    );\n\n    Integer numShards = null;\n    new ParallelIndexSupervisorTaskBuilder()\n        .ingestionSpec(\n            new ParallelIndexIngestionSpecBuilder()\n                .forceGuaranteedRollup(true)\n                .partitionsSpec(new HashedPartitionsSpec(null, numShards, null))\n                .inputIntervals(INTERVALS)\n                .build()\n        )\n        .build();\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskSerdeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"NB"},{"authorDate":"2019-12-10 15:05:49","commitOrder":2,"curCode":"  public void forceGuaranteedRollupWithSingleDimPartitionsMissingDimension()\n  {\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\n        \"forceGuaranteedRollup is incompatible with partitionsSpec: partitionDimension must be specified\"\n    );\n\n    new ParallelIndexSupervisorTaskBuilder()\n        .ingestionSpec(\n            new ParallelIndexIngestionSpecBuilder()\n                .forceGuaranteedRollup(true)\n                .partitionsSpec(new SingleDimensionPartitionsSpec(1, null, null, true))\n                .inputIntervals(INTERVALS)\n                .build()\n        )\n        .build();\n  }\n","date":"2019-12-10 15:05:49","endLine":172,"groupId":"7986","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"forceGuaranteedRollupWithSingleDimPartitionsMissingDimension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d6/6193a1a7bd8ba80ebcdde0015d30a22c4fe2d2.src","preCode":"  public void forceGuaranteedRollupWithSingleDimPartitionsMissingDimension()\n  {\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\n        \"forceGuaranteedRollup is incompatible with partitionsSpec: partitionDimension must be specified\"\n    );\n\n    new ParallelIndexSupervisorTaskBuilder()\n        .ingestionSpec(\n            new ParallelIndexIngestionSpecBuilder()\n                .forceGuaranteedRollup(true)\n                .partitionsSpec(new SingleDimensionPartitionsSpec(1, null, null, true))\n                .inputIntervals(INTERVALS)\n                .build()\n        )\n        .build();\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskSerdeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"}],"commitId":"bab78fc80e8ee2929d6d2c277d3999695c8402a4","commitMessage":"@@@Parallel indexing single dim partitions (#8925)\n\n* Parallel indexing single dim partitions\n\nImplements single dimension range partitioning for native parallel batch\nindexing as described in #8769. This initial version requires the\ndruid-datasketches extension to be loaded.\n\nThe algorithm has 5 phases that are orchestrated by the supervisor in\n`ParallelIndexSupervisorTask#runRangePartitionMultiPhaseParallel()`.\nThese phases and the main classes involved are described below:\n\n1) In parallel.  determine the distribution of dimension values for each\n   input source split.\n\n   `PartialDimensionDistributionTask` uses `StringSketch` to generate\n   the approximate distribution of dimension values for each input\n   source split. If the rows are ungrouped. \n   `PartialDimensionDistributionTask.UngroupedRowDimensionValueFilter`\n   uses a Bloom filter to skip rows that would be grouped. The final\n   distribution is sent back to the supervisor via\n   `DimensionDistributionReport`.\n\n2) The range partitions are determined.\n\n   In `ParallelIndexSupervisorTask#determineAllRangePartitions()`.  the\n   supervisor uses `StringSketchMerger` to merge the individual\n   `StringSketch`es created in the preceding phase. The merged sketch is\n   then used to create the range partitions.\n\n3) In parallel.  generate partial range-partitioned segments.\n\n   `PartialRangeSegmentGenerateTask` uses the range partitions\n   determined in the preceding phase and\n   `RangePartitionCachingLocalSegmentAllocator` to generate\n   `SingleDimensionShardSpec`s.  The partition information is sent back\n   to the supervisor via `GeneratedGenericPartitionsReport`.\n\n4) The partial range segments are grouped.\n\n   In `ParallelIndexSupervisorTask#groupGenericPartitionLocationsPerPartition()`. \n   the supervisor creates the `PartialGenericSegmentMergeIOConfig`s\n   necessary for the next phase.\n\n5) In parallel.  merge partial range-partitioned segments.\n\n   `PartialGenericSegmentMergeTask` uses `GenericPartitionLocation` to\n   retrieve the partial range-partitioned segments generated earlier and\n   then merges and publishes them.\n\n* Fix dependencies & forbidden apis\n\n* Fixes for integration test\n\n* Address review comments\n\n* Fix docs.  strict compile.  sketch check.  rollup check\n\n* Fix first shard spec.  partition serde.  single subtask\n\n* Fix first partition check in test\n\n* Misc rewording/refactoring to address code review\n\n* Fix doc link\n\n* Split batch index integration test\n\n* Do not run parallel-batch-index twice\n\n* Adjust last partition\n\n* Split ITParallelIndexTest to reduce runtime\n\n* Rename test class\n\n* Allow null values in range partitions\n\n* Indicate which phase failed\n\n* Improve asserts in tests\n","date":"2019-12-10 15:05:49","modifiedFileCount":"18","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2020-02-08 08:23:07","codes":[{"authorDate":"2019-11-21 09:24:12","commitOrder":3,"curCode":"  public void forceGuaranteedRollupWithHashPartitionsMissingNumShards()\n  {\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\n        \"forceGuaranteedRollup is incompatible with partitionsSpec: numShards must be specified\"\n    );\n\n    Integer numShards = null;\n    new ParallelIndexSupervisorTaskBuilder()\n        .ingestionSpec(\n            new ParallelIndexIngestionSpecBuilder()\n                .forceGuaranteedRollup(true)\n                .partitionsSpec(new HashedPartitionsSpec(null, numShards, null))\n                .inputIntervals(INTERVALS)\n                .build()\n        )\n        .build();\n  }\n","date":"2019-11-21 09:24:12","endLine":135,"groupId":"22834","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"forceGuaranteedRollupWithHashPartitionsMissingNumShards","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/97/c6954e92474da59763ab8e9d4991072c23ea2d.src","preCode":"  public void forceGuaranteedRollupWithHashPartitionsMissingNumShards()\n  {\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\n        \"forceGuaranteedRollup is incompatible with partitionsSpec: numShards must be specified\"\n    );\n\n    Integer numShards = null;\n    new ParallelIndexSupervisorTaskBuilder()\n        .ingestionSpec(\n            new ParallelIndexIngestionSpecBuilder()\n                .forceGuaranteedRollup(true)\n                .partitionsSpec(new HashedPartitionsSpec(null, numShards, null))\n                .inputIntervals(INTERVALS)\n                .build()\n        )\n        .build();\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskSerdeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"},{"authorDate":"2020-02-08 08:23:07","commitOrder":3,"curCode":"  public void forceGuaranteedRollupWithSingleDimPartitionsMissingDimension()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"partitionDimension must be specified\");\n\n    new ParallelIndexSupervisorTaskBuilder()\n        .ingestionSpec(\n            new ParallelIndexIngestionSpecBuilder()\n                .forceGuaranteedRollup(true)\n                .partitionsSpec(new SingleDimensionPartitionsSpec(1, null, null, true))\n                .inputIntervals(INTERVALS)\n                .build()\n        )\n        .build();\n  }\n","date":"2020-02-08 08:23:07","endLine":170,"groupId":"7986","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"forceGuaranteedRollupWithSingleDimPartitionsMissingDimension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f6/a47f07d98ae2c24f495684f9314e06f7163841.src","preCode":"  public void forceGuaranteedRollupWithSingleDimPartitionsMissingDimension()\n  {\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\n        \"forceGuaranteedRollup is incompatible with partitionsSpec: partitionDimension must be specified\"\n    );\n\n    new ParallelIndexSupervisorTaskBuilder()\n        .ingestionSpec(\n            new ParallelIndexIngestionSpecBuilder()\n                .forceGuaranteedRollup(true)\n                .partitionsSpec(new SingleDimensionPartitionsSpec(1, null, null, true))\n                .inputIntervals(INTERVALS)\n                .build()\n        )\n        .build();\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskSerdeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"e81230f9abd092b2ac742258abf534f6e17f35e8","commitMessage":"@@@Refactoring some codes around ingestion (#9274)\n\n* Refactoring codes around ingestion:\n\n- Parallel index task and simple task now use the same segment allocator implementation. This is reusable for the future implementation as well.\n- Added PartitionAnalysis to store the analysis of the partitioning\n- Move some util methods to SegmentLockHelper and rename it to TaskLockHelper\n\n* fix build\n\n* fix SingleDimensionShardSpecFactory\n\n* optimize SingledimensionShardSpecFactory\n\n* fix test\n\n* shard spec builder\n\n* import order\n\n* shardSpecBuilder -> partialShardSpec\n\n* build -> complete\n\n* fix comment; add unit tests for partitionBoundaries\n\n* add more tests and fix javadoc\n\n* fix toString(); add serde tests for HashBasedNumberedPartialShardSpec and SegmentAllocateAction\n\n* fix test\n\n* add equality test for hash and range partial shard specs\n","date":"2020-02-08 08:23:07","modifiedFileCount":"49","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-02-08 08:23:07","codes":[{"authorDate":"2020-09-25 04:47:53","commitOrder":4,"curCode":"  public void forceGuaranteedRollupWithHashPartitionsMissingNumShards()\n  {\n    Integer numShards = null;\n    ParallelIndexSupervisorTask task = new ParallelIndexSupervisorTaskBuilder()\n        .ingestionSpec(\n            new ParallelIndexIngestionSpecBuilder()\n                .forceGuaranteedRollup(true)\n                .partitionsSpec(new HashedPartitionsSpec(null, numShards, null))\n                .inputIntervals(INTERVALS)\n                .build()\n        )\n        .build();\n\n    PartitionsSpec partitionsSpec = task.getIngestionSchema().getTuningConfig().getPartitionsSpec();\n    Assert.assertThat(partitionsSpec, CoreMatchers.instanceOf(HashedPartitionsSpec.class));\n  }\n","date":"2020-09-25 04:47:53","endLine":129,"groupId":"104491","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"forceGuaranteedRollupWithHashPartitionsMissingNumShards","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e6/b144fc0217725b56a2f79a3da2d1d869469ec7.src","preCode":"  public void forceGuaranteedRollupWithHashPartitionsMissingNumShards()\n  {\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\n        \"forceGuaranteedRollup is incompatible with partitionsSpec: numShards must be specified\"\n    );\n\n    Integer numShards = null;\n    new ParallelIndexSupervisorTaskBuilder()\n        .ingestionSpec(\n            new ParallelIndexIngestionSpecBuilder()\n                .forceGuaranteedRollup(true)\n                .partitionsSpec(new HashedPartitionsSpec(null, numShards, null))\n                .inputIntervals(INTERVALS)\n                .build()\n        )\n        .build();\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskSerdeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2020-02-08 08:23:07","commitOrder":4,"curCode":"  public void forceGuaranteedRollupWithSingleDimPartitionsMissingDimension()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"partitionDimension must be specified\");\n\n    new ParallelIndexSupervisorTaskBuilder()\n        .ingestionSpec(\n            new ParallelIndexIngestionSpecBuilder()\n                .forceGuaranteedRollup(true)\n                .partitionsSpec(new SingleDimensionPartitionsSpec(1, null, null, true))\n                .inputIntervals(INTERVALS)\n                .build()\n        )\n        .build();\n  }\n","date":"2020-02-08 08:23:07","endLine":170,"groupId":"104491","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"forceGuaranteedRollupWithSingleDimPartitionsMissingDimension","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f6/a47f07d98ae2c24f495684f9314e06f7163841.src","preCode":"  public void forceGuaranteedRollupWithSingleDimPartitionsMissingDimension()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"partitionDimension must be specified\");\n\n    new ParallelIndexSupervisorTaskBuilder()\n        .ingestionSpec(\n            new ParallelIndexIngestionSpecBuilder()\n                .forceGuaranteedRollup(true)\n                .partitionsSpec(new SingleDimensionPartitionsSpec(1, null, null, true))\n                .inputIntervals(INTERVALS)\n                .build()\n        )\n        .build();\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTaskSerdeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"N"}],"commitId":"cb30b1fe2353dc28601c50984def9e83adb89571","commitMessage":"@@@Automatically determine numShards for parallel ingestion hash partitioning (#10419)\n\n* Automatically determine numShards for parallel ingestion hash partitioning\n\n* Fix inspection.  tests.  coverage\n\n* Docs and some PR comments\n\n* Adjust locking\n\n* Use HllSketch instead of HyperLogLogCollector\n\n* Fix tests\n\n* Address some PR comments\n\n* Fix granularity bug\n\n* Small doc fix","date":"2020-09-25 04:47:53","modifiedFileCount":"14","status":"M","submitter":"Jonathan Wei"}]
