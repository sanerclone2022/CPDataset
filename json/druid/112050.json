[{"authorTime":"2020-02-05 03:33:48","codes":[{"authorDate":"2020-02-05 03:33:48","commitOrder":1,"curCode":"  public static SchemaPlus createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    InformationSchema informationSchema =\n        new InformationSchema(rootSchema, authorizerMapper, CalciteTests.DRUID_SCHEMA_NAME);\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(CalciteTests.SYSTEM_SCHEMA_NAME, systemSchema);\n    rootSchema.add(CalciteTests.LOOKUP_SCHEMA_NAME, lookupSchema);\n    return rootSchema;\n  }\n","date":"2020-02-05 03:33:48","endLine":899,"groupId":"8695","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createMockRootSchema","params":"(finalQueryRunnerFactoryConglomerateconglomerate@finalSpecificSegmentsQuerySegmentWalkerwalker@finalPlannerConfigplannerConfig@finalAuthorizerMapperauthorizerMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/59/9f258f4fc2c62b93595a0889717fa43fddece0.src","preCode":"  public static SchemaPlus createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    InformationSchema informationSchema =\n        new InformationSchema(rootSchema, authorizerMapper, CalciteTests.DRUID_SCHEMA_NAME);\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(CalciteTests.SYSTEM_SCHEMA_NAME, systemSchema);\n    rootSchema.add(CalciteTests.LOOKUP_SCHEMA_NAME, lookupSchema);\n    return rootSchema;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/util/CalciteTests.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":879,"status":"B"},{"authorDate":"2020-02-05 03:33:48","commitOrder":1,"curCode":"  public static SchemaPlus createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final ViewManager viewManager,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig, viewManager);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    InformationSchema informationSchema =\n        new InformationSchema(rootSchema, authorizerMapper, CalciteTests.DRUID_SCHEMA_NAME);\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(CalciteTests.SYSTEM_SCHEMA_NAME, systemSchema);\n    rootSchema.add(CalciteTests.LOOKUP_SCHEMA_NAME, lookupSchema);\n    return rootSchema;\n  }\n","date":"2020-02-05 03:33:48","endLine":921,"groupId":"8695","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createMockRootSchema","params":"(finalQueryRunnerFactoryConglomerateconglomerate@finalSpecificSegmentsQuerySegmentWalkerwalker@finalPlannerConfigplannerConfig@finalViewManagerviewManager@finalAuthorizerMapperauthorizerMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/59/9f258f4fc2c62b93595a0889717fa43fddece0.src","preCode":"  public static SchemaPlus createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final ViewManager viewManager,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig, viewManager);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    InformationSchema informationSchema =\n        new InformationSchema(rootSchema, authorizerMapper, CalciteTests.DRUID_SCHEMA_NAME);\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(CalciteTests.SYSTEM_SCHEMA_NAME, systemSchema);\n    rootSchema.add(CalciteTests.LOOKUP_SCHEMA_NAME, lookupSchema);\n    return rootSchema;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/util/CalciteTests.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":901,"status":"B"}],"commitId":"33a97dfaae00d88fb3001f55e1fa23211edc7640","commitMessage":"@@@Guicify druid sql module (#9279)\n\n* Guicify druid sql module\n\nBreak up the SQLModule in to smaller modules and provide a binding that\nmodules can use to register schemas with druid sql.\n\n* fix some tests\n\n* address code review\n\n* tests compile\n\n* Working tests\n\n* Add all the tests\n\n* fix up licenses and dependencies\n\n* add calcite dependency to druid-benchmarks\n\n* tests pass\n\n* rename the schemas\n","date":"2020-02-05 03:33:48","modifiedFileCount":"31","status":"B","submitter":"Suneet Saldanha"},{"authorTime":"2021-02-06 04:56:55","codes":[{"authorDate":"2020-02-05 03:33:48","commitOrder":2,"curCode":"  public static SchemaPlus createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    InformationSchema informationSchema =\n        new InformationSchema(rootSchema, authorizerMapper, CalciteTests.DRUID_SCHEMA_NAME);\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(CalciteTests.SYSTEM_SCHEMA_NAME, systemSchema);\n    rootSchema.add(CalciteTests.LOOKUP_SCHEMA_NAME, lookupSchema);\n    return rootSchema;\n  }\n","date":"2020-02-05 03:33:48","endLine":899,"groupId":"8695","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createMockRootSchema","params":"(finalQueryRunnerFactoryConglomerateconglomerate@finalSpecificSegmentsQuerySegmentWalkerwalker@finalPlannerConfigplannerConfig@finalAuthorizerMapperauthorizerMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/59/9f258f4fc2c62b93595a0889717fa43fddece0.src","preCode":"  public static SchemaPlus createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    InformationSchema informationSchema =\n        new InformationSchema(rootSchema, authorizerMapper, CalciteTests.DRUID_SCHEMA_NAME);\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(CalciteTests.SYSTEM_SCHEMA_NAME, systemSchema);\n    rootSchema.add(CalciteTests.LOOKUP_SCHEMA_NAME, lookupSchema);\n    return rootSchema;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/util/CalciteTests.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":879,"status":"N"},{"authorDate":"2021-02-06 04:56:55","commitOrder":2,"curCode":"  public static SchemaPlus createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final ViewManager viewManager,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig, viewManager);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    InformationSchema informationSchema =\n        new InformationSchema(rootSchema, authorizerMapper, CalciteTests.DRUID_SCHEMA_NAME);\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(CalciteTests.SYSTEM_SCHEMA_NAME, systemSchema);\n    rootSchema.add(CalciteTests.LOOKUP_SCHEMA_NAME, lookupSchema);\n    rootSchema.add(CalciteTests.VIEW_SCHEMA_NAME, new ViewSchema(viewManager));\n    return rootSchema;\n  }\n","date":"2021-02-06 04:56:55","endLine":1107,"groupId":"8695","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createMockRootSchema","params":"(finalQueryRunnerFactoryConglomerateconglomerate@finalSpecificSegmentsQuerySegmentWalkerwalker@finalPlannerConfigplannerConfig@finalViewManagerviewManager@finalAuthorizerMapperauthorizerMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/98/17908b07daa04fc7a4d7a53de6354b4c337b44.src","preCode":"  public static SchemaPlus createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final ViewManager viewManager,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig, viewManager);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    InformationSchema informationSchema =\n        new InformationSchema(rootSchema, authorizerMapper, CalciteTests.DRUID_SCHEMA_NAME);\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(CalciteTests.SYSTEM_SCHEMA_NAME, systemSchema);\n    rootSchema.add(CalciteTests.LOOKUP_SCHEMA_NAME, lookupSchema);\n    return rootSchema;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/util/CalciteTests.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1086,"status":"M"}],"commitId":"fe30f4b4144b782075db2c7e068f2bd9565a6cfd","commitMessage":"@@@refactor sql lifecycle.  druid planner.  views.  and view permissions (#10812)\n\n* before i leaped i should've seen.  the view from halfway down\n\n* fixes\n\n* fixes.  more test\n\n* rename\n\n* fix style\n\n* further refactoring\n\n* review stuffs\n\n* rename\n\n* more javadoc and comments","date":"2021-02-06 04:56:55","modifiedFileCount":"29","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-09-18 00:53:25","codes":[{"authorDate":"2021-09-18 00:53:25","commitOrder":3,"curCode":"  public static DruidSchemaCatalog createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    Set<NamedSchema> namedSchemas = ImmutableSet.of(\n        new NamedDruidSchema(druidSchema, CalciteTests.DRUID_SCHEMA_NAME),\n        new NamedSystemSchema(systemSchema),\n        new NamedLookupSchema(lookupSchema)\n    );\n    DruidSchemaCatalog catalog = new DruidSchemaCatalog(\n        rootSchema,\n        namedSchemas.stream().collect(Collectors.toMap(NamedSchema::getSchemaName, x -> x))\n    );\n    InformationSchema informationSchema =\n        new InformationSchema(\n            catalog,\n            authorizerMapper\n        );\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(NamedSystemSchema.NAME, systemSchema);\n    rootSchema.add(NamedLookupSchema.NAME, lookupSchema);\n\n    return catalog;\n  }\n","date":"2021-09-18 00:53:25","endLine":1161,"groupId":"16136","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createMockRootSchema","params":"(finalQueryRunnerFactoryConglomerateconglomerate@finalSpecificSegmentsQuerySegmentWalkerwalker@finalPlannerConfigplannerConfig@finalAuthorizerMapperauthorizerMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a5/e493d7f85861462d005afdf195866fbbe2ab26.src","preCode":"  public static SchemaPlus createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    InformationSchema informationSchema =\n        new InformationSchema(\n            rootSchema,\n            authorizerMapper,\n            CalciteTests.DRUID_SCHEMA_NAME\n        );\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(CalciteTests.SYSTEM_SCHEMA_NAME, systemSchema);\n    rootSchema.add(CalciteTests.LOOKUP_SCHEMA_NAME, lookupSchema);\n    return rootSchema;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/util/CalciteTests.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1128,"status":"M"},{"authorDate":"2021-09-18 00:53:25","commitOrder":3,"curCode":"  public static DruidSchemaCatalog createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final ViewManager viewManager,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig, viewManager);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    ViewSchema viewSchema = new ViewSchema(viewManager);\n\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    Set<NamedSchema> namedSchemas = ImmutableSet.of(\n        new NamedDruidSchema(druidSchema, CalciteTests.DRUID_SCHEMA_NAME),\n        new NamedSystemSchema(systemSchema),\n        new NamedLookupSchema(lookupSchema),\n        new NamedViewSchema(viewSchema)\n    );\n    DruidSchemaCatalog catalog = new DruidSchemaCatalog(\n        rootSchema,\n        namedSchemas.stream().collect(Collectors.toMap(NamedSchema::getSchemaName, x -> x))\n    );\n    InformationSchema informationSchema =\n        new InformationSchema(\n            catalog,\n            authorizerMapper\n        );\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(NamedSystemSchema.NAME, systemSchema);\n    rootSchema.add(NamedLookupSchema.NAME, lookupSchema);\n    rootSchema.add(NamedViewSchema.NAME, viewSchema);\n    return catalog;\n  }\n","date":"2021-09-18 00:53:25","endLine":1200,"groupId":"16136","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createMockRootSchema","params":"(finalQueryRunnerFactoryConglomerateconglomerate@finalSpecificSegmentsQuerySegmentWalkerwalker@finalPlannerConfigplannerConfig@finalViewManagerviewManager@finalAuthorizerMapperauthorizerMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a5/e493d7f85861462d005afdf195866fbbe2ab26.src","preCode":"  public static SchemaPlus createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final ViewManager viewManager,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig, viewManager);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    InformationSchema informationSchema =\n        new InformationSchema(\n            rootSchema,\n            authorizerMapper,\n            CalciteTests.DRUID_SCHEMA_NAME\n        );\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(CalciteTests.SYSTEM_SCHEMA_NAME, systemSchema);\n    rootSchema.add(CalciteTests.LOOKUP_SCHEMA_NAME, lookupSchema);\n    rootSchema.add(CalciteTests.VIEW_SCHEMA_NAME, new ViewSchema(viewManager));\n    return rootSchema;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/util/CalciteTests.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1163,"status":"M"}],"commitId":"392f0ca1b52ee66aa8b3affed58eb117bb44d910","commitMessage":"@@@refactor sql authorization to get resource type from schema.  resource type to be string (#11692)\n\n* refactor sql authorization to get resource type from schema.  refactor resource type from enum to string\n\n* information schema auth filtering adjustments\n\n* refactor\n\n* minor stuff\n\n* Update SqlResourceCollectorShuttle.java","date":"2021-09-18 00:53:25","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-09-22 04:28:26","codes":[{"authorDate":"2021-09-22 04:28:26","commitOrder":4,"curCode":"  public static DruidSchemaCatalog createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    Set<NamedSchema> namedSchemas = ImmutableSet.of(\n        new NamedDruidSchema(druidSchema, CalciteTests.DRUID_SCHEMA_NAME),\n        new NamedSystemSchema(plannerConfig, systemSchema),\n        new NamedLookupSchema(lookupSchema)\n    );\n    DruidSchemaCatalog catalog = new DruidSchemaCatalog(\n        rootSchema,\n        namedSchemas.stream().collect(Collectors.toMap(NamedSchema::getSchemaName, x -> x))\n    );\n    InformationSchema informationSchema =\n        new InformationSchema(\n            catalog,\n            authorizerMapper\n        );\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(NamedSystemSchema.NAME, systemSchema);\n    rootSchema.add(NamedLookupSchema.NAME, lookupSchema);\n\n    return catalog;\n  }\n","date":"2021-09-22 04:28:26","endLine":1161,"groupId":"112050","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"createMockRootSchema","params":"(finalQueryRunnerFactoryConglomerateconglomerate@finalSpecificSegmentsQuerySegmentWalkerwalker@finalPlannerConfigplannerConfig@finalAuthorizerMapperauthorizerMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ca/70e1dfe4afcd42374e3ba843e68d3b1d20c0fc.src","preCode":"  public static DruidSchemaCatalog createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    Set<NamedSchema> namedSchemas = ImmutableSet.of(\n        new NamedDruidSchema(druidSchema, CalciteTests.DRUID_SCHEMA_NAME),\n        new NamedSystemSchema(systemSchema),\n        new NamedLookupSchema(lookupSchema)\n    );\n    DruidSchemaCatalog catalog = new DruidSchemaCatalog(\n        rootSchema,\n        namedSchemas.stream().collect(Collectors.toMap(NamedSchema::getSchemaName, x -> x))\n    );\n    InformationSchema informationSchema =\n        new InformationSchema(\n            catalog,\n            authorizerMapper\n        );\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(NamedSystemSchema.NAME, systemSchema);\n    rootSchema.add(NamedLookupSchema.NAME, lookupSchema);\n\n    return catalog;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/util/CalciteTests.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1128,"status":"M"},{"authorDate":"2021-09-22 04:28:26","commitOrder":4,"curCode":"  public static DruidSchemaCatalog createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final ViewManager viewManager,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig, viewManager);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    ViewSchema viewSchema = new ViewSchema(viewManager);\n\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    Set<NamedSchema> namedSchemas = ImmutableSet.of(\n        new NamedDruidSchema(druidSchema, CalciteTests.DRUID_SCHEMA_NAME),\n        new NamedSystemSchema(plannerConfig, systemSchema),\n        new NamedLookupSchema(lookupSchema),\n        new NamedViewSchema(viewSchema)\n    );\n    DruidSchemaCatalog catalog = new DruidSchemaCatalog(\n        rootSchema,\n        namedSchemas.stream().collect(Collectors.toMap(NamedSchema::getSchemaName, x -> x))\n    );\n    InformationSchema informationSchema =\n        new InformationSchema(\n            catalog,\n            authorizerMapper\n        );\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(NamedSystemSchema.NAME, systemSchema);\n    rootSchema.add(NamedLookupSchema.NAME, lookupSchema);\n    rootSchema.add(NamedViewSchema.NAME, viewSchema);\n    return catalog;\n  }\n","date":"2021-09-22 04:28:26","endLine":1200,"groupId":"112050","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"createMockRootSchema","params":"(finalQueryRunnerFactoryConglomerateconglomerate@finalSpecificSegmentsQuerySegmentWalkerwalker@finalPlannerConfigplannerConfig@finalViewManagerviewManager@finalAuthorizerMapperauthorizerMapper)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ca/70e1dfe4afcd42374e3ba843e68d3b1d20c0fc.src","preCode":"  public static DruidSchemaCatalog createMockRootSchema(\n      final QueryRunnerFactoryConglomerate conglomerate,\n      final SpecificSegmentsQuerySegmentWalker walker,\n      final PlannerConfig plannerConfig,\n      final ViewManager viewManager,\n      final AuthorizerMapper authorizerMapper\n  )\n  {\n    DruidSchema druidSchema = createMockSchema(conglomerate, walker, plannerConfig, viewManager);\n    SystemSchema systemSchema =\n        CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig, authorizerMapper);\n\n    LookupSchema lookupSchema = CalciteTests.createMockLookupSchema();\n    ViewSchema viewSchema = new ViewSchema(viewManager);\n\n    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n    Set<NamedSchema> namedSchemas = ImmutableSet.of(\n        new NamedDruidSchema(druidSchema, CalciteTests.DRUID_SCHEMA_NAME),\n        new NamedSystemSchema(systemSchema),\n        new NamedLookupSchema(lookupSchema),\n        new NamedViewSchema(viewSchema)\n    );\n    DruidSchemaCatalog catalog = new DruidSchemaCatalog(\n        rootSchema,\n        namedSchemas.stream().collect(Collectors.toMap(NamedSchema::getSchemaName, x -> x))\n    );\n    InformationSchema informationSchema =\n        new InformationSchema(\n            catalog,\n            authorizerMapper\n        );\n    rootSchema.add(CalciteTests.DRUID_SCHEMA_NAME, druidSchema);\n    rootSchema.add(CalciteTests.INFORMATION_SCHEMA_NAME, informationSchema);\n    rootSchema.add(NamedSystemSchema.NAME, systemSchema);\n    rootSchema.add(NamedLookupSchema.NAME, lookupSchema);\n    rootSchema.add(NamedViewSchema.NAME, viewSchema);\n    return catalog;\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/util/CalciteTests.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1163,"status":"M"}],"commitId":"5de26cf6d9ba94bdfb34ec9fcc76a2e7aa32db79","commitMessage":"@@@add optional system schema authorization (#11720)\n\n* add optional system schema authorization\n\n* remove unused\n\n* adjust docs\n\n* doc fixes.  missing ldap config change for integration tests\n\n* style","date":"2021-09-22 04:28:26","modifiedFileCount":"10","status":"M","submitter":"Clint Wylie"}]
