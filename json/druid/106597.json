[{"authorTime":"2020-03-13 02:06:44","codes":[{"authorDate":"2020-03-13 02:06:44","commitOrder":1,"curCode":"  public void testResultArraySignatureAllGran()\n  {\n    final GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(Granularities.ALL)\n        .setDimensions(new DefaultDimensionSpec(\"col\", \"dim\"))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setAggregatorSpecs(QueryRunnerTestHelper.COMMON_DOUBLE_AGGREGATORS)\n        .setPostAggregatorSpecs(ImmutableList.of(QueryRunnerTestHelper.CONSTANT))\n        .build();\n\n    Assert.assertEquals(\n        RowSignature.builder()\n                    .add(\"dim\", ValueType.STRING)\n                    .add(\"rows\", ValueType.LONG)\n                    .add(\"index\", ValueType.DOUBLE)\n                    .add(\"uniques\", null)\n                    .add(\"const\", null)\n                    .build(),\n        new GroupByQueryQueryToolChest(null, null).resultArraySignature(query)\n    );\n  }\n","date":"2020-03-13 02:06:44","endLine":691,"groupId":"11302","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testResultArraySignatureAllGran","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f3/e0befbe9c8ba10c1889583e387babe2dd8dc85.src","preCode":"  public void testResultArraySignatureAllGran()\n  {\n    final GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(Granularities.ALL)\n        .setDimensions(new DefaultDimensionSpec(\"col\", \"dim\"))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setAggregatorSpecs(QueryRunnerTestHelper.COMMON_DOUBLE_AGGREGATORS)\n        .setPostAggregatorSpecs(ImmutableList.of(QueryRunnerTestHelper.CONSTANT))\n        .build();\n\n    Assert.assertEquals(\n        RowSignature.builder()\n                    .add(\"dim\", ValueType.STRING)\n                    .add(\"rows\", ValueType.LONG)\n                    .add(\"index\", ValueType.DOUBLE)\n                    .add(\"uniques\", null)\n                    .add(\"const\", null)\n                    .build(),\n        new GroupByQueryQueryToolChest(null, null).resultArraySignature(query)\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"B"},{"authorDate":"2020-03-13 02:06:44","commitOrder":1,"curCode":"  public void testResultArraySignatureDayGran()\n  {\n    final GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(Granularities.DAY)\n        .setDimensions(new DefaultDimensionSpec(\"col\", \"dim\"))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setAggregatorSpecs(QueryRunnerTestHelper.COMMON_DOUBLE_AGGREGATORS)\n        .setPostAggregatorSpecs(ImmutableList.of(QueryRunnerTestHelper.CONSTANT))\n        .build();\n\n    Assert.assertEquals(\n        RowSignature.builder()\n                    .addTimeColumn()\n                    .add(\"dim\", ValueType.STRING)\n                    .add(\"rows\", ValueType.LONG)\n                    .add(\"index\", ValueType.DOUBLE)\n                    .add(\"uniques\", null)\n                    .add(\"const\", null)\n                    .build(),\n        new GroupByQueryQueryToolChest(null, null).resultArraySignature(query)\n    );\n  }\n","date":"2020-03-13 02:06:44","endLine":716,"groupId":"21138","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testResultArraySignatureDayGran","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f3/e0befbe9c8ba10c1889583e387babe2dd8dc85.src","preCode":"  public void testResultArraySignatureDayGran()\n  {\n    final GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(Granularities.DAY)\n        .setDimensions(new DefaultDimensionSpec(\"col\", \"dim\"))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setAggregatorSpecs(QueryRunnerTestHelper.COMMON_DOUBLE_AGGREGATORS)\n        .setPostAggregatorSpecs(ImmutableList.of(QueryRunnerTestHelper.CONSTANT))\n        .build();\n\n    Assert.assertEquals(\n        RowSignature.builder()\n                    .addTimeColumn()\n                    .add(\"dim\", ValueType.STRING)\n                    .add(\"rows\", ValueType.LONG)\n                    .add(\"index\", ValueType.DOUBLE)\n                    .add(\"uniques\", null)\n                    .add(\"const\", null)\n                    .build(),\n        new GroupByQueryQueryToolChest(null, null).resultArraySignature(query)\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":694,"status":"B"}],"commitId":"ff59d2e78bd3949e46858bc2f9882db9a7d2a186","commitMessage":"@@@Move RowSignature from druid-sql to druid-processing and make use of it. (#9508)\n\n* Move RowSignature from druid-sql to druid-processing and make use of it.\n\n1) Moved (most of) RowSignature from sql to processing. Left behind the SQL-specific\n   stuff in a RowSignatures utility class. It also picked up some new convenience\n   methods along the way.\n2) There were a lot of places in the code where Map<String.  ValueType> was used to\n   associate columns with type info. These are now all replaced with RowSignature.\n3) QueryToolChest's resultArrayFields method is replaced with resultArraySignature. \n   and it now provides type info.\n\n* Fix up extensions.\n\n* Various fixes","date":"2020-03-13 02:06:44","modifiedFileCount":"166","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-08-27 01:53:44","codes":[{"authorDate":"2020-08-27 01:53:44","commitOrder":2,"curCode":"  public void testResultArraySignatureAllGran()\n  {\n    final GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(Granularities.ALL)\n        .setDimensions(new DefaultDimensionSpec(\"col\", \"dim\"))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setAggregatorSpecs(QueryRunnerTestHelper.COMMON_DOUBLE_AGGREGATORS)\n        .setPostAggregatorSpecs(ImmutableList.of(QueryRunnerTestHelper.CONSTANT))\n        .build();\n\n    Assert.assertEquals(\n        RowSignature.builder()\n                    .add(\"dim\", ValueType.STRING)\n                    .add(\"rows\", ValueType.LONG)\n                    .add(\"index\", ValueType.DOUBLE)\n                    .add(\"uniques\", null)\n                    .add(\"const\", ValueType.LONG)\n                    .build(),\n        new GroupByQueryQueryToolChest(null, null).resultArraySignature(query)\n    );\n  }\n","date":"2020-08-27 01:53:44","endLine":692,"groupId":"106597","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testResultArraySignatureAllGran","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ea/f85fc44ea854966fbc98ab843734aa9b0db1a1.src","preCode":"  public void testResultArraySignatureAllGran()\n  {\n    final GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(Granularities.ALL)\n        .setDimensions(new DefaultDimensionSpec(\"col\", \"dim\"))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setAggregatorSpecs(QueryRunnerTestHelper.COMMON_DOUBLE_AGGREGATORS)\n        .setPostAggregatorSpecs(ImmutableList.of(QueryRunnerTestHelper.CONSTANT))\n        .build();\n\n    Assert.assertEquals(\n        RowSignature.builder()\n                    .add(\"dim\", ValueType.STRING)\n                    .add(\"rows\", ValueType.LONG)\n                    .add(\"index\", ValueType.DOUBLE)\n                    .add(\"uniques\", null)\n                    .add(\"const\", null)\n                    .build(),\n        new GroupByQueryQueryToolChest(null, null).resultArraySignature(query)\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":671,"status":"M"},{"authorDate":"2020-08-27 01:53:44","commitOrder":2,"curCode":"  public void testResultArraySignatureDayGran()\n  {\n    final GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(Granularities.DAY)\n        .setDimensions(new DefaultDimensionSpec(\"col\", \"dim\"))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setAggregatorSpecs(QueryRunnerTestHelper.COMMON_DOUBLE_AGGREGATORS)\n        .setPostAggregatorSpecs(ImmutableList.of(QueryRunnerTestHelper.CONSTANT))\n        .build();\n\n    Assert.assertEquals(\n        RowSignature.builder()\n                    .addTimeColumn()\n                    .add(\"dim\", ValueType.STRING)\n                    .add(\"rows\", ValueType.LONG)\n                    .add(\"index\", ValueType.DOUBLE)\n                    .add(\"uniques\", null)\n                    .add(\"const\", ValueType.LONG)\n                    .build(),\n        new GroupByQueryQueryToolChest(null, null).resultArraySignature(query)\n    );\n  }\n","date":"2020-08-27 01:53:44","endLine":717,"groupId":"106597","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testResultArraySignatureDayGran","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ea/f85fc44ea854966fbc98ab843734aa9b0db1a1.src","preCode":"  public void testResultArraySignatureDayGran()\n  {\n    final GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(Granularities.DAY)\n        .setDimensions(new DefaultDimensionSpec(\"col\", \"dim\"))\n        .setInterval(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .setAggregatorSpecs(QueryRunnerTestHelper.COMMON_DOUBLE_AGGREGATORS)\n        .setPostAggregatorSpecs(ImmutableList.of(QueryRunnerTestHelper.CONSTANT))\n        .build();\n\n    Assert.assertEquals(\n        RowSignature.builder()\n                    .addTimeColumn()\n                    .add(\"dim\", ValueType.STRING)\n                    .add(\"rows\", ValueType.LONG)\n                    .add(\"index\", ValueType.DOUBLE)\n                    .add(\"uniques\", null)\n                    .add(\"const\", null)\n                    .build(),\n        new GroupByQueryQueryToolChest(null, null).resultArraySignature(query)\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryQueryToolChestTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":695,"status":"M"}],"commitId":"ab606610089f7bb9b4b1b68ac488764f394723fd","commitMessage":"@@@refactor internal type system (#9638)\n\n* better type tracking: add typed postaggs.  finalized types for agg factories\n\n* more javadoc\n\n* adjustments\n\n* transition to getTypeName to be used exclusively for complex types\n\n* remove unused fn\n\n* adjust\n\n* more better\n\n* rename getTypeName to getComplexTypeName\n\n* setup expression post agg for type inference existing\n\n* more javadocs\n\n* fixup\n\n* oops\n\n* more test\n\n* more test\n\n* more comments/javadoc\n\n* nulls\n\n* explicitly handle only numeric and complex aggregators for incremental index\n\n* checkstyle\n\n* more tests\n\n* adjust\n\n* more tests to showcase difference in behavior\n\n* timeseries longsum array","date":"2020-08-27 01:53:44","modifiedFileCount":"176","status":"M","submitter":"Clint Wylie"}]
