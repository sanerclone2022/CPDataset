[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSingleValueStringColumnWithNulls()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of(\"0\"));\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    } else {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of());\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    }\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"10\", null), ImmutableList.of(\"1\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"2\", null), ImmutableList.of(\"2\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"1\", null), ImmutableList.of(\"3\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"def\", null), ImmutableList.of(\"4\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abc\", null), ImmutableList.of(\"5\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"ab\", null), ImmutableList.of());\n  }\n","date":"2018-08-31 00:56:26","endLine":141,"groupId":"10858","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleValueStringColumnWithNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/55/f8c09b9c94771dc6c2ddf0903c4a3c51f3c462.src","preCode":"  public void testSingleValueStringColumnWithNulls()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of(\"0\"));\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    } else {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of());\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    }\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"10\", null), ImmutableList.of(\"1\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"2\", null), ImmutableList.of(\"2\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"1\", null), ImmutableList.of(\"3\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"def\", null), ImmutableList.of(\"4\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abc\", null), ImmutableList.of(\"5\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"ab\", null), ImmutableList.of());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/SelectorFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSinglePreFilterWithNulls()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of(\"0\"));\n    } else {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of());\n    }\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"10\", null), ImmutableList.of(\"1\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"2\", null), ImmutableList.of(\"2\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"1\", null), ImmutableList.of(\"3\", \"9\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"def\", null), ImmutableList.of(\"4\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abc\", null), ImmutableList.of(\"5\", \"8\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"ab\", null), ImmutableList.of());\n  }\n","date":"2018-08-31 00:56:26","endLine":214,"groupId":"10858","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSinglePreFilterWithNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ac/d7498eb5d297915485f8a55cfb8f77812d2a95.src","preCode":"  public void testSinglePreFilterWithNulls()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of(\"0\"));\n    } else {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of());\n    }\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"10\", null), ImmutableList.of(\"1\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"2\", null), ImmutableList.of(\"2\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"1\", null), ImmutableList.of(\"3\", \"9\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"def\", null), ImmutableList.of(\"4\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abc\", null), ImmutableList.of(\"5\", \"8\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"ab\", null), ImmutableList.of());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/FilterPartitionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-01-28 10:01:01","codes":[{"authorDate":"2020-01-28 10:01:01","commitOrder":2,"curCode":"  public void testSingleValueStringColumnWithNulls()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of(\"0\"));\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    } else {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of());\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    }\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"10\", null), ImmutableList.of(\"1\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"2\", null), ImmutableList.of(\"2\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"1\", null), ImmutableList.of(\"3\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abdef\", null), ImmutableList.of(\"4\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abc\", null), ImmutableList.of(\"5\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"ab\", null), ImmutableList.of());\n  }\n","date":"2020-01-28 10:01:01","endLine":120,"groupId":"10858","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleValueStringColumnWithNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/38/c817fe9e04fa606c3270f0c85c4634f3bc7d67.src","preCode":"  public void testSingleValueStringColumnWithNulls()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of(\"0\"));\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    } else {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of());\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    }\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"10\", null), ImmutableList.of(\"1\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"2\", null), ImmutableList.of(\"2\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"1\", null), ImmutableList.of(\"3\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"def\", null), ImmutableList.of(\"4\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abc\", null), ImmutableList.of(\"5\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"ab\", null), ImmutableList.of());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/SelectorFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2020-01-28 10:01:01","commitOrder":2,"curCode":"  public void testSinglePreFilterWithNulls()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of(\"0\"));\n    } else {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of());\n    }\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"10\", null), ImmutableList.of(\"1\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"2\", null), ImmutableList.of(\"2\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"1\", null), ImmutableList.of(\"3\", \"9\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abdef\", null), ImmutableList.of(\"4\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abc\", null), ImmutableList.of(\"5\", \"8\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"ab\", null), ImmutableList.of());\n  }\n","date":"2020-01-28 10:01:01","endLine":198,"groupId":"10858","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSinglePreFilterWithNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bb/76c54620813560b6cc3ce4a710a4f3e064ded8.src","preCode":"  public void testSinglePreFilterWithNulls()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of(\"0\"));\n    } else {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of());\n    }\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"10\", null), ImmutableList.of(\"1\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"2\", null), ImmutableList.of(\"2\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"1\", null), ImmutableList.of(\"3\", \"9\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"def\", null), ImmutableList.of(\"4\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abc\", null), ImmutableList.of(\"5\", \"8\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"ab\", null), ImmutableList.of());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/FilterPartitionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"}],"commitId":"36c5efe2ab88e03b804eb20bf1f138fae2ef1cf9","commitMessage":"@@@fix some issues with filters on numeric columns with nulls (#9251)\n\n* fix issue with long column predicate filters and nulls\n\n* dang\n\n* uncomment a thing\n\n* styles\n\n* oops\n\n* allcaps\n\n* review stuff\n","date":"2020-01-28 10:01:01","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-01-28 10:01:01","codes":[{"authorDate":"2020-03-10 22:15:57","commitOrder":3,"curCode":"  public void testSingleValueStringColumnWithNulls()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of(\"0\"));\n    } else {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of());\n    }\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"10\", null), ImmutableList.of(\"1\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"2\", null), ImmutableList.of(\"2\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"1\", null), ImmutableList.of(\"3\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abdef\", null), ImmutableList.of(\"4\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abc\", null), ImmutableList.of(\"5\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"ab\", null), ImmutableList.of());\n  }\n","date":"2020-03-10 22:15:57","endLine":120,"groupId":"105953","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleValueStringColumnWithNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2b/343fc791740261dc04ed55855a448c85d0c408.src","preCode":"  public void testSingleValueStringColumnWithNulls()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of(\"0\"));\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    } else {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of());\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    }\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"10\", null), ImmutableList.of(\"1\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"2\", null), ImmutableList.of(\"2\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"1\", null), ImmutableList.of(\"3\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abdef\", null), ImmutableList.of(\"4\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abc\", null), ImmutableList.of(\"5\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"ab\", null), ImmutableList.of());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/SelectorFilterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2020-01-28 10:01:01","commitOrder":3,"curCode":"  public void testSinglePreFilterWithNulls()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of(\"0\"));\n    } else {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of());\n    }\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"10\", null), ImmutableList.of(\"1\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"2\", null), ImmutableList.of(\"2\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"1\", null), ImmutableList.of(\"3\", \"9\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abdef\", null), ImmutableList.of(\"4\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abc\", null), ImmutableList.of(\"5\", \"8\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"ab\", null), ImmutableList.of());\n  }\n","date":"2020-01-28 10:01:01","endLine":198,"groupId":"105953","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSinglePreFilterWithNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bb/76c54620813560b6cc3ce4a710a4f3e064ded8.src","preCode":"  public void testSinglePreFilterWithNulls()\n  {\n    if (NullHandling.replaceWithDefault()) {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of(\"0\"));\n    } else {\n      assertFilterMatches(new SelectorDimFilter(\"dim1\", null, null), ImmutableList.of());\n    }\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"\", null), ImmutableList.of(\"0\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"10\", null), ImmutableList.of(\"1\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"2\", null), ImmutableList.of(\"2\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"1\", null), ImmutableList.of(\"3\", \"9\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abdef\", null), ImmutableList.of(\"4\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"abc\", null), ImmutableList.of(\"5\", \"8\"));\n    assertFilterMatches(new SelectorDimFilter(\"dim1\", \"ab\", null), ImmutableList.of());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/FilterPartitionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"N"}],"commitId":"c6c2282b59cda107089a9b3944477fd630bc0657","commitMessage":"@@@Harmonization and bug-fixing for selector and filter behavior on unknown types. (#9484)\n\n* Harmonization and bug-fixing for selector and filter behavior on unknown types.\n\n- Migrate ValueMatcherColumnSelectorStrategy to newer ColumnProcessorFactory\n  system.  and set defaultType COMPLEX so unknown types can be dynamically matched.\n- Remove ValueGetters in favor of ColumnComparisonFilter doing its own thing.\n- Switch various methods to use convertObjectToX when casting to numbers.  rather\n  than ad-hoc and inconsistent logic.\n- Fix bug in RowBasedExpressionColumnValueSelector: isBindingArray should return\n  true even for 0- or 1- element arrays.\n- Adjust various javadocs.\n\n* Add throwParseExceptions option to Rows.objectToNumber.  switch back to that.\n\n* Update tests.\n\n* Adjust moment sketch tests.","date":"2020-03-10 22:15:57","modifiedFileCount":"32","status":"M","submitter":"Gian Merlino"}]
