[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testFullOnSelect()\n  {\n    List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .build();\n\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query), context).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(results, \"null_column\"));\n  }\n","date":"2018-08-31 00:56:26","endLine":188,"groupId":"8391","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFullOnSelect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cc/532982b65c74e7a19ddf02847b8da44b8a6466.src","preCode":"  public void testFullOnSelect()\n  {\n    List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .build();\n\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query), context).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(results, \"null_column\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/scan/ScanQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testFullOnSelectAsCompactedList()\n  {\n    final List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n        .build();\n\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query), context).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(compactedListToRow(results), \"null_column\"));\n  }\n","date":"2018-08-31 00:56:26","endLine":230,"groupId":"8390","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFullOnSelectAsCompactedList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cc/532982b65c74e7a19ddf02847b8da44b8a6466.src","preCode":"  public void testFullOnSelectAsCompactedList()\n  {\n    final List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n        .build();\n\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query), context).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(compactedListToRow(results), \"null_column\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/scan/ScanQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-03-29 05:37:09","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testFullOnSelect()\n  {\n    List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .build();\n\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query), context).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(results, \"null_column\"));\n  }\n","date":"2018-08-31 00:56:26","endLine":188,"groupId":"8391","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFullOnSelect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cc/532982b65c74e7a19ddf02847b8da44b8a6466.src","preCode":"  public void testFullOnSelect()\n  {\n    List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .build();\n\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query), context).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(results, \"null_column\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/scan/ScanQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"N"},{"authorDate":"2019-03-29 05:37:09","commitOrder":2,"curCode":"  public void testFullOnSelectAsCompactedList()\n  {\n    final List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n        .build();\n\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query), context).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(compactedListToRow(results), \"null_column\"));\n  }\n","date":"2019-03-29 05:37:09","endLine":234,"groupId":"4214","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFullOnSelectAsCompactedList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b3/a0d0069ac14b8a4058b1274d797dd8be60f949.src","preCode":"  public void testFullOnSelectAsCompactedList()\n  {\n    final List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n        .build();\n\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query), context).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(compactedListToRow(results), \"null_column\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/scan/ScanQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"ad7862c58ac7f05cb28108543c017e2b186d1031","commitMessage":"@@@Time Ordering On Scans (#7133)\n\n* Moved Scan Builder to Druids class and started on Scan Benchmark setup\n\n* Need to form queries\n\n* It runs.\n\n* Stuff for time-ordered scan query\n\n* Move ScanResultValue timestamp comparator to a separate class for testing\n\n* Licensing stuff\n\n* Change benchmark\n\n* Remove todos\n\n* Added TimestampComparator tests\n\n* Change number of benchmark iterations\n\n* Added time ordering to the scan benchmark\n\n* Changed benchmark params\n\n* More param changes\n\n* Benchmark param change\n\n* Made Jon's changes and removed TODOs\n\n* Broke some long lines into two lines\n\n* nit\n\n* Decrease segment size for less memory usage\n\n* Wrote tests for heapsort scan result values and fixed bug where iterator\nwasn't returning elements in correct order\n\n* Wrote more tests for scan result value sort\n\n* Committing a param change to kick teamcity\n\n* Fixed codestyle and forbidden API errors\n\n* .\n\n* Improved conciseness\n\n* nit\n\n* Created an error message for when someone tries to time order a result\nset > threshold limit\n\n* Set to spaces over tabs\n\n* Fixing tests WIP\n\n* Fixed failing calcite tests\n\n* Kicking travis with change to benchmark param\n\n* added all query types to scan benchmark\n\n* Fixed benchmark queries\n\n* Renamed sort function\n\n* Added javadoc on ScanResultValueTimestampComparator\n\n* Unused import\n\n* Added more javadoc\n\n* improved doc\n\n* Removed unused import to satisfy PMD check\n\n* Small changes\n\n* Changes based on Gian's comments\n\n* Fixed failing test due to null resultFormat\n\n* Added config and get # of segments\n\n* Set up time ordering strategy decision tree\n\n* Refactor and pQueue works\n\n* Cleanup\n\n* Ordering is correct on n-way merge -> still need to batch events into\nScanResultValues\n\n* WIP\n\n* Sequence stuff is so dirty :(\n\n* Fixed bug introduced by replacing deque with list\n\n* Wrote docs\n\n* Multi-historical setup works\n\n* WIP\n\n* Change so batching only occurs on broker for time-ordered scans\n\nRestricted batching to broker for time-ordered queries and adjusted\ntests\n\nFormatting\n\nCleanup\n\n* Fixed mistakes in merge\n\n* Fixed failing tests\n\n* Reset config\n\n* Wrote tests and added Javadoc\n\n* Nit-change on javadoc\n\n* Checkstyle fix\n\n* Improved test and appeased TeamCity\n\n* Sorry.  checkstyle\n\n* Applied Jon's recommended changes\n\n* Checkstyle fix\n\n* Optimization\n\n* Fixed tests\n\n* Updated error message\n\n* Added error message for UOE\n\n* Renaming\n\n* Finish rename\n\n* Smarter limiting for pQueue method\n\n* Optimized n-way merge strategy\n\n* Rename segment limit -> segment partitions limit\n\n* Added a bit of docs\n\n* More comments\n\n* Fix checkstyle and test\n\n* Nit comment\n\n* Fixed failing tests -> allow usage of all types of segment spec\n\n* Fixed failing tests -> allow usage of all types of segment spec\n\n* Revert \"Fixed failing tests -> allow usage of all types of segment spec\"\n\nThis reverts commit ec470288c7b725f5310bcf69d1db9f85ff509c8d.\n\n* Revert \"Merge branch '6088-Time-Ordering-On-Scans-N-Way-Merge' of github.com:justinborromeo/incubator-druid into 6088-Time-Ordering-On-Scans-N-Way-Merge\"\n\nThis reverts commit 57033f36df6e3ef887e5f0399ad74bb091306de8.  reversing\nchanges made to 8f01d8dd16f40d10c60519ca0ec0d2e6b2dde941.\n\n* Check type of segment spec before using for time ordering\n\n* Fix bug in numRowsScanned\n\n* Fix bug messing up count of rows\n\n* Fix docs and flipped boolean in ScanQueryLimitRowIterator\n\n* Refactor n-way merge\n\n* Added test for n-way merge\n\n* Refixed regression\n\n* Checkstyle and doc update\n\n* Modified sequence limit to accept longs and added test for long limits\n\n* doc fix\n\n* Implemented Clint's recommendations\n","date":"2019-03-29 05:37:09","modifiedFileCount":"23","status":"M","submitter":"Justin Borromeo"},{"authorTime":"2019-07-24 23:29:03","codes":[{"authorDate":"2019-07-24 23:29:03","commitOrder":3,"curCode":"  public void testFullOnSelect()\n  {\n    List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .build();\n\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query)).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(results, \"null_column\"));\n  }\n","date":"2019-07-24 23:29:03","endLine":192,"groupId":"5683","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFullOnSelect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/05/07da3b2c1f7906027ebdda3220cf39db72ada8.src","preCode":"  public void testFullOnSelect()\n  {\n    List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .build();\n\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query), context).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(results, \"null_column\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/scan/ScanQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2019-07-24 23:29:03","commitOrder":3,"curCode":"  public void testFullOnSelectAsCompactedList()\n  {\n    final List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n        .build();\n\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query)).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(compactedListToRow(results), \"null_column\"));\n  }\n","date":"2019-07-24 23:29:03","endLine":233,"groupId":"5683","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFullOnSelectAsCompactedList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/05/07da3b2c1f7906027ebdda3220cf39db72ada8.src","preCode":"  public void testFullOnSelectAsCompactedList()\n  {\n    final List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n        .build();\n\n    HashMap<String, Object> context = new HashMap<String, Object>();\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query), context).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(compactedListToRow(results), \"null_column\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/scan/ScanQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"799d20249fe6333ea86b020f6d09c91fa4d3f998","commitMessage":"@@@Response context refactoring (#8110)\n\n* Response context refactoring\n\n* Serialization/Deserialization of ResponseContext\n\n* Added java doc comments\n\n* Renamed vars related to ResponseContext\n\n* Renamed empty() methods to createEmpty()\n\n* Fixed ResponseContext usage\n\n* Renamed multiple ResponseContext static fields\n\n* Added PublicApi annotations\n\n* Renamed QueryResponseContext class to ResourceIOReaderWriter\n\n* Moved the protected method below public static constants\n\n* Added createEmpty method to ResponseContext with DefaultResponseContext creation\n\n* Fixed inspection error\n\n* Added comments to the ResponseContext length limit and ResponseContext\nhttp header name\n\n* Added a comment of possible future refactoring\n\n* Removed .gitignore file of indexing-service\n\n* Removed a never-used method\n\n* VisibleForTesting method reducing boilerplate\n\nCo-Authored-By: Clint Wylie <cjwylie@gmail.com>\n\n* Reduced boilerplate\n\n* Renamed the method serialize to serializeWith\n\n* Removed unused import\n\n* Fixed incorrectly refactored test method\n\n* Added comments for ResponseContext keys\n\n* Fixed incorrectly refactored test method\n\n* Fixed IntervalChunkingQueryRunnerTest mocks\n","date":"2019-07-24 23:29:03","modifiedFileCount":"142","status":"M","submitter":"Eugene Sevastianov"},{"authorTime":"2020-01-11 05:49:06","codes":[{"authorDate":"2020-01-11 05:49:06","commitOrder":4,"curCode":"  public void testFullOnSelect()\n  {\n    List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"longNumericNull\",\n        \"floatNumericNull\",\n        \"doubleNumericNull\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .build();\n\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query)).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(results, \"null_column\"));\n  }\n","date":"2020-01-11 05:49:06","endLine":213,"groupId":"106689","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFullOnSelect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c1/52936a8e498bd72c04b6e423797e4da12e2ea4.src","preCode":"  public void testFullOnSelect()\n  {\n    List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .build();\n\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query)).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(results, \"null_column\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/scan/ScanQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2020-01-11 05:49:06","commitOrder":4,"curCode":"  public void testFullOnSelectAsCompactedList()\n  {\n    final List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"longNumericNull\",\n        \"floatNumericNull\",\n        \"doubleNumericNull\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n        .build();\n\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query)).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(compactedListToRow(results), \"null_column\"));\n  }\n","date":"2020-01-11 05:49:06","endLine":257,"groupId":"106689","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFullOnSelectAsCompactedList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c1/52936a8e498bd72c04b6e423797e4da12e2ea4.src","preCode":"  public void testFullOnSelectAsCompactedList()\n  {\n    final List<String> columns = Lists.newArrayList(\n        getTimestampName(),\n        \"expr\",\n        \"market\",\n        \"quality\",\n        \"qualityLong\",\n        \"qualityFloat\",\n        \"qualityDouble\",\n        \"qualityNumericString\",\n        \"placement\",\n        \"placementish\",\n        \"partial_null_column\",\n        \"null_column\",\n        \"index\",\n        \"indexMin\",\n        \"indexMaxPlusTen\",\n        \"quality_uniques\",\n        \"indexFloat\",\n        \"indexMaxFloat\",\n        \"indexMinFloat\"\n    );\n    ScanQuery query = newTestQuery()\n        .intervals(I_0112_0114)\n        .virtualColumns(EXPR_COLUMN)\n        .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n        .build();\n\n    Iterable<ScanResultValue> results = runner.run(QueryPlus.wrap(query)).toList();\n\n    List<ScanResultValue> expectedResults = toExpected(\n        toFullEvents(V_0112_0114),\n        columns,\n        0,\n        3\n    );\n    verify(expectedResults, populateNullColumnAtLastForQueryableIndexCase(compactedListToRow(results), \"null_column\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/scan/ScanQueryRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"}],"commitId":"8c53818fa9e4efabce8ef7745bba1cd2c044ffb4","commitMessage":"@@@Add numeric nulls to sample data.  fix some numeric null handling issues (#9154)\n\n* Fix LongSumAggregator comparator null handling\n\n* Remove unneeded GroupBy test change\n\n* Checkstyle\n\n* Update other processing tests for new sample data\n\n* Remove unused code\n\n* Fix SearchQueryRunner column selectors\n\n* Fix DimensionIndexer null handling and ScanQueryRunnerTest\n\n* Fix TeamCity errors\n","date":"2020-01-11 05:49:06","modifiedFileCount":"17","status":"M","submitter":"Jonathan Wei"}]
