[{"authorTime":"2020-03-19 06:06:45","codes":[{"authorDate":"2020-03-19 06:06:45","commitOrder":1,"curCode":"  public void testTimeseriesOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new QueryDataSource(subquery))\n              .granularity(Granularities.ALL)\n              .intervals(Intervals.ONLY_ETERNITY)\n              .aggregators(new CountAggregatorFactory(\"cnt\"))\n              .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(new Object[]{\"x\"}, new Object[]{\"y\"}, new Object[]{\"z\"}),\n                        RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{Intervals.ETERNITY.getStartMillis(), 3L})\n    );\n  }\n","date":"2020-03-19 06:06:45","endLine":239,"groupId":"20081","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeseriesOnGroupByOnTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/22/15dcb162ae18a4db421c0b7c175b9052f4c9a3.src","preCode":"  public void testTimeseriesOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new QueryDataSource(subquery))\n              .granularity(Granularities.ALL)\n              .intervals(Intervals.ONLY_ETERNITY)\n              .aggregators(new CountAggregatorFactory(\"cnt\"))\n              .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(new Object[]{\"x\"}, new Object[]{\"y\"}, new Object[]{\"z\"}),\n                        RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{Intervals.ETERNITY.getStartMillis(), 3L})\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"B"},{"authorDate":"2020-03-19 06:06:45","commitOrder":1,"curCode":"  public void testTimeseriesOnGroupByOnTableErrorTooManyRows()\n  {\n    initWalker(ImmutableMap.of(\"maxSubqueryRows\", \"2\"));\n\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new QueryDataSource(subquery))\n              .granularity(Granularities.ALL)\n              .intervals(Intervals.ONLY_ETERNITY)\n              .aggregators(new CountAggregatorFactory(\"cnt\"))\n              .build();\n\n    expectedException.expect(ResourceLimitExceededException.class);\n    expectedException.expectMessage(\"Subquery generated results beyond maximum[2]\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2020-03-19 06:06:45","endLine":408,"groupId":"4304","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeseriesOnGroupByOnTableErrorTooManyRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/22/15dcb162ae18a4db421c0b7c175b9052f4c9a3.src","preCode":"  public void testTimeseriesOnGroupByOnTableErrorTooManyRows()\n  {\n    initWalker(ImmutableMap.of(\"maxSubqueryRows\", \"2\"));\n\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new QueryDataSource(subquery))\n              .granularity(Granularities.ALL)\n              .intervals(Intervals.ONLY_ETERNITY)\n              .aggregators(new CountAggregatorFactory(\"cnt\"))\n              .build();\n\n    expectedException.expect(ResourceLimitExceededException.class);\n    expectedException.expectMessage(\"Subquery generated results beyond maximum[2]\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"B"}],"commitId":"1ef25a438fd9456f40f2adb36549eeaf86fef4f2","commitMessage":"@@@Broker: Add ability to inline subqueries. (#9533)\n\n* Broker: Add ability to inline subqueries.\n\nThe main changes:\n\n- ClientQuerySegmentWalker: Add ability to inline queries.\n- Query: Add \"getSubQueryId\" and \"withSubQueryId\" methods.\n- QueryMetrics: Add \"subQueryId\" dimension.\n- ServerConfig: Add new \"maxSubqueryRows\" parameter.  which is used by\n  ClientQuerySegmentWalker to limit how many rows can be inlined per\n  query.\n- IndexedTableJoinMatcher: Allow creating keys on top of unknown types. \n  by assuming they are strings. This is useful because not all types are\n  known for fields in query results.\n- InlineDataSource: Store RowSignature rather than component parts. Add\n  more zealous \"equals\" and \"hashCode\" methods to ease testing.\n- Moved QuerySegmentWalker test code from CalciteTests and\n  SpecificSegmentsQueryWalker in druid-sql to QueryStackTests in\n  druid-server. Use this to spin up a new ClientQuerySegmentWalkerTest.\n\n* Adjustments from CI.\n\n* Fix integration test.","date":"2020-03-19 06:06:45","modifiedFileCount":"46","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-03-19 06:06:45","codes":[{"authorDate":"2020-03-31 02:58:16","commitOrder":2,"curCode":"  public void testTimeseriesOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new QueryDataSource(subquery))\n              .granularity(Granularities.ALL)\n              .intervals(Intervals.ONLY_ETERNITY)\n              .aggregators(new CountAggregatorFactory(\"cnt\"))\n              .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(new Object[]{\"x\"}, new Object[]{\"y\"}, new Object[]{\"z\"}),\n                        RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{Intervals.ETERNITY.getStartMillis(), 3L})\n    );\n\n    \r\n    \r\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(2, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","date":"2020-03-31 02:58:16","endLine":266,"groupId":"20081","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeseriesOnGroupByOnTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c9/8c7768decd9c3468d713a374f74f497bb2f70c.src","preCode":"  public void testTimeseriesOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new QueryDataSource(subquery))\n              .granularity(Granularities.ALL)\n              .intervals(Intervals.ONLY_ETERNITY)\n              .aggregators(new CountAggregatorFactory(\"cnt\"))\n              .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(new Object[]{\"x\"}, new Object[]{\"y\"}, new Object[]{\"z\"}),\n                        RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{Intervals.ETERNITY.getStartMillis(), 3L})\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"},{"authorDate":"2020-03-19 06:06:45","commitOrder":2,"curCode":"  public void testTimeseriesOnGroupByOnTableErrorTooManyRows()\n  {\n    initWalker(ImmutableMap.of(\"maxSubqueryRows\", \"2\"));\n\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new QueryDataSource(subquery))\n              .granularity(Granularities.ALL)\n              .intervals(Intervals.ONLY_ETERNITY)\n              .aggregators(new CountAggregatorFactory(\"cnt\"))\n              .build();\n\n    expectedException.expect(ResourceLimitExceededException.class);\n    expectedException.expectMessage(\"Subquery generated results beyond maximum[2]\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2020-03-19 06:06:45","endLine":408,"groupId":"4304","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeseriesOnGroupByOnTableErrorTooManyRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/22/15dcb162ae18a4db421c0b7c175b9052f4c9a3.src","preCode":"  public void testTimeseriesOnGroupByOnTableErrorTooManyRows()\n  {\n    initWalker(ImmutableMap.of(\"maxSubqueryRows\", \"2\"));\n\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new QueryDataSource(subquery))\n              .granularity(Granularities.ALL)\n              .intervals(Intervals.ONLY_ETERNITY)\n              .aggregators(new CountAggregatorFactory(\"cnt\"))\n              .build();\n\n    expectedException.expect(ResourceLimitExceededException.class);\n    expectedException.expectMessage(\"Subquery generated results beyond maximum[2]\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"N"}],"commitId":"fa5da6693ca4dbb614c6398e50e34b772298f5ae","commitMessage":"@@@add lane enforcement for joinish queries (#9563)\n\n* add lane enforcement for joinish queries\n\n* oops\n\n* style\n\n* review stuffs","date":"2020-03-31 02:58:16","modifiedFileCount":"13","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-03-19 06:06:45","codes":[{"authorDate":"2020-07-01 10:14:22","commitOrder":3,"curCode":"  public void testTimeseriesOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new QueryDataSource(subquery))\n              .granularity(Granularities.ALL)\n              .intervals(Intervals.ONLY_ETERNITY)\n              .aggregators(new CountAggregatorFactory(\"cnt\"))\n              .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(new Object[]{\"x\"}, new Object[]{\"y\"}, new Object[]{\"z\"}),\n                        RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{Intervals.ETERNITY.getStartMillis(), 3L})\n    );\n\n    \r\n    \r\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","date":"2020-07-01 10:14:22","endLine":324,"groupId":"20081","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeseriesOnGroupByOnTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/48/46e6375021d3e38305ff4af817324259957b1f.src","preCode":"  public void testTimeseriesOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new QueryDataSource(subquery))\n              .granularity(Granularities.ALL)\n              .intervals(Intervals.ONLY_ETERNITY)\n              .aggregators(new CountAggregatorFactory(\"cnt\"))\n              .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(new Object[]{\"x\"}, new Object[]{\"y\"}, new Object[]{\"z\"}),\n                        RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{Intervals.ETERNITY.getStartMillis(), 3L})\n    );\n\n    \r\n    \r\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(2, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"},{"authorDate":"2020-03-19 06:06:45","commitOrder":3,"curCode":"  public void testTimeseriesOnGroupByOnTableErrorTooManyRows()\n  {\n    initWalker(ImmutableMap.of(\"maxSubqueryRows\", \"2\"));\n\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new QueryDataSource(subquery))\n              .granularity(Granularities.ALL)\n              .intervals(Intervals.ONLY_ETERNITY)\n              .aggregators(new CountAggregatorFactory(\"cnt\"))\n              .build();\n\n    expectedException.expect(ResourceLimitExceededException.class);\n    expectedException.expectMessage(\"Subquery generated results beyond maximum[2]\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2020-03-19 06:06:45","endLine":408,"groupId":"4304","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeseriesOnGroupByOnTableErrorTooManyRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/22/15dcb162ae18a4db421c0b7c175b9052f4c9a3.src","preCode":"  public void testTimeseriesOnGroupByOnTableErrorTooManyRows()\n  {\n    initWalker(ImmutableMap.of(\"maxSubqueryRows\", \"2\"));\n\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new QueryDataSource(subquery))\n              .granularity(Granularities.ALL)\n              .intervals(Intervals.ONLY_ETERNITY)\n              .aggregators(new CountAggregatorFactory(\"cnt\"))\n              .build();\n\n    expectedException.expect(ResourceLimitExceededException.class);\n    expectedException.expectMessage(\"Subquery generated results beyond maximum[2]\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"N"}],"commitId":"5faa897a342096b2ac88587ad62e6e15022b01dd","commitMessage":"@@@Join filter pre-analysis simplifications and sanity checks. (#10104)\n\n* Join filter pre-analysis simplifications and sanity checks.\n\n- At pre-analysis time.  only compute pre-analysis for the innermost\n  root query.  since this is the one that will run on the join that involves\n  the base datasource. Previously.  pre-analyses were computed for multiple\n  levels of the query.  some of which were unnecessary.\n- Remove JoinFilterPreAnalysisGroup and join query level gathering code. \n  since they existed to support precomputation of multiple pre-analyses.\n- Embed JoinFilterPreAnalysisKey into JoinFilterPreAnalysis and use it to\n  sanity check?at processing time that the correct pre-analysis was done.\n\nTangentially related changes:\n\n- Remove prioritizeAndLaneQuery functionality from LocalQuerySegmentWalker.\n  The computed priority and lanes were not being used.\n- Add \"getBaseQuery\" method to DataSourceAnalysis to support identification\n  of the proper subquery for filter pre-analysis.\n\n* Fix compilation errors.\n\n* Adjust tests.","date":"2020-07-01 10:14:22","modifiedFileCount":"20","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-07-02 05:02:21","codes":[{"authorDate":"2020-07-02 05:02:21","commitOrder":4,"curCode":"  public void testTimeseriesOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        (TimeseriesQuery) Druids.newTimeseriesQueryBuilder()\n                                .dataSource(new QueryDataSource(subquery))\n                                .granularity(Granularities.ALL)\n                                .intervals(Intervals.ONLY_ETERNITY)\n                                .aggregators(new CountAggregatorFactory(\"cnt\"))\n                                .build()\n                                .withId(UUID.randomUUID().toString());\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(new Object[]{\"x\"}, new Object[]{\"y\"}, new Object[]{\"z\"}),\n                        RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{Intervals.ETERNITY.getStartMillis(), 3L})\n    );\n\n    \r\n    \r\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","date":"2020-07-02 05:02:21","endLine":330,"groupId":"10671","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeseriesOnGroupByOnTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/e75008d93c8fc7b3635e3a9860a830f48fb950.src","preCode":"  public void testTimeseriesOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new QueryDataSource(subquery))\n              .granularity(Granularities.ALL)\n              .intervals(Intervals.ONLY_ETERNITY)\n              .aggregators(new CountAggregatorFactory(\"cnt\"))\n              .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.local(\n                query.withDataSource(\n                    InlineDataSource.fromIterable(\n                        ImmutableList.of(new Object[]{\"x\"}, new Object[]{\"y\"}, new Object[]{\"z\"}),\n                        RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{Intervals.ETERNITY.getStartMillis(), 3L})\n    );\n\n    \r\n    \r\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"},{"authorDate":"2020-07-02 05:02:21","commitOrder":4,"curCode":"  public void testTimeseriesOnGroupByOnTableErrorTooManyRows()\n  {\n    initWalker(ImmutableMap.of(\"maxSubqueryRows\", \"2\"));\n\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        (TimeseriesQuery) Druids.newTimeseriesQueryBuilder()\n                                .dataSource(new QueryDataSource(subquery))\n                                .granularity(Granularities.ALL)\n                                .intervals(Intervals.ONLY_ETERNITY)\n                                .aggregators(new CountAggregatorFactory(\"cnt\"))\n                                .build()\n                                .withId(UUID.randomUUID().toString());\n\n    expectedException.expect(ResourceLimitExceededException.class);\n    expectedException.expectMessage(\"Subquery generated results beyond maximum[2]\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2020-07-02 05:02:21","endLine":635,"groupId":"10671","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeseriesOnGroupByOnTableErrorTooManyRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/e75008d93c8fc7b3635e3a9860a830f48fb950.src","preCode":"  public void testTimeseriesOnGroupByOnTableErrorTooManyRows()\n  {\n    initWalker(ImmutableMap.of(\"maxSubqueryRows\", \"2\"));\n\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .build();\n\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new QueryDataSource(subquery))\n              .granularity(Granularities.ALL)\n              .intervals(Intervals.ONLY_ETERNITY)\n              .aggregators(new CountAggregatorFactory(\"cnt\"))\n              .build();\n\n    expectedException.expect(ResourceLimitExceededException.class);\n    expectedException.expectMessage(\"Subquery generated results beyond maximum[2]\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":610,"status":"M"}],"commitId":"657f8ee80fa86779cf26a01072814b1530277aa7","commitMessage":"@@@Fix RetryQueryRunner to actually do the job (#10082)\n\n* Fix RetryQueryRunner to actually do the job\n\n* more javadoc\n\n* fix test and checkstyle\n\n* don't combine for testing\n\n* address comments\n\n* fix unit tests\n\n* always initialize response context in cachingClusteredClient\n\n* fix subquery\n\n* address comments\n\n* fix test\n\n* query id for builders\n\n* make queryId optional in the builders and ClusterQueryResult\n\n* fix test\n\n* suppress tests and unused methods\n\n* exclude groupBy builder\n\n* fix jacoco exclusion\n\n* add tests for builders\n\n* address comments\n\n* don't truncate","date":"2020-07-02 05:02:21","modifiedFileCount":"33","status":"M","submitter":"Jihoon Son"}]
