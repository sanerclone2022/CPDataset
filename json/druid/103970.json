[{"authorTime":"2019-04-27 08:07:48","codes":[{"authorDate":"2019-04-27 08:07:48","commitOrder":1,"curCode":"  public void testApplyLastDayNoRows()\n  {\n\n    intervals = new ArrayList<>();\n    intervals.add(INTERVAL_JAN_1_4);\n\n    List<Row> expectedDay1 = Arrays.asList(JAN_1_M_10, JAN_1_F_20);\n    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);\n    List<Row> expectedDay3 = Collections.singletonList(JAN_3_F_20);\n    List<Row> expectedDay4 = Collections.emptyList();\n\n    rows = new ArrayList<>();\n    rows.add(JAN_1_M_10);\n    rows.add(JAN_1_F_20);\n    rows.add(JAN_2_M_10);\n    rows.add(JAN_3_F_20);\n\n    Sequence<Row> seq = Sequences.simple(rows);\n    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);\n    Iterator<RowBucket> iter = rbi.iterator();\n\n    RowBucket actual = iter.next();\n    assertEquals(expectedDay1, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay2, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay3, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(JAN_4, actual.getDateTime());\n    assertEquals(expectedDay4, actual.getRows());\n  }\n","date":"2019-04-27 08:07:48","endLine":558,"groupId":"15411","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testApplyLastDayNoRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/04a979bac20896d5f7acf32ae5969010ce4207.src","preCode":"  public void testApplyLastDayNoRows()\n  {\n\n    intervals = new ArrayList<>();\n    intervals.add(INTERVAL_JAN_1_4);\n\n    List<Row> expectedDay1 = Arrays.asList(JAN_1_M_10, JAN_1_F_20);\n    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);\n    List<Row> expectedDay3 = Collections.singletonList(JAN_3_F_20);\n    List<Row> expectedDay4 = Collections.emptyList();\n\n    rows = new ArrayList<>();\n    rows.add(JAN_1_M_10);\n    rows.add(JAN_1_F_20);\n    rows.add(JAN_2_M_10);\n    rows.add(JAN_3_F_20);\n\n    Sequence<Row> seq = Sequences.simple(rows);\n    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);\n    Iterator<RowBucket> iter = rbi.iterator();\n\n    RowBucket actual = iter.next();\n    assertEquals(expectedDay1, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay2, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay3, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(JAN_4, actual.getDateTime());\n    assertEquals(expectedDay4, actual.getRows());\n  }\n","realPath":"extensions-contrib/moving-average-query/src/test/java/org/apache/druid/query/movingaverage/RowBucketIterableTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"B"},{"authorDate":"2019-04-27 08:07:48","commitOrder":1,"curCode":"  public void testApplyMultipleInterval()\n  {\n\n    intervals = new ArrayList<>();\n    intervals.add(INTERVAL_JAN_1_4);\n    intervals.add(INTERVAL_JAN_6_8);\n\n    List<Row> expectedDay1 = Arrays.asList(JAN_1_M_10, JAN_1_F_20);\n    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);\n    List<Row> expectedDay3 = Collections.singletonList(JAN_3_F_20);\n    List<Row> expectedDay4 = Arrays.asList(JAN_4_M_10, JAN_4_F_20, JAN_4_U_30);\n    List<Row> expectedDay6 = Collections.singletonList(JAN_6_M_10);\n    List<Row> expectedDay7 = Collections.singletonList(JAN_7_F_20);\n    List<Row> expectedDay8 = Collections.singletonList(JAN_8_U_30);\n\n    rows = new ArrayList<>();\n    rows.add(JAN_1_M_10);\n    rows.add(JAN_1_F_20);\n    rows.add(JAN_2_M_10);\n    rows.add(JAN_3_F_20);\n    rows.add(JAN_4_M_10);\n    rows.add(JAN_4_F_20);\n    rows.add(JAN_4_U_30);\n    rows.add(JAN_6_M_10);\n    rows.add(JAN_7_F_20);\n    rows.add(JAN_8_U_30);\n\n    Sequence<Row> seq = Sequences.simple(rows);\n    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);\n    Iterator<RowBucket> iter = rbi.iterator();\n\n    RowBucket actual = iter.next();\n    assertEquals(expectedDay1, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay2, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay3, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay4, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay6, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay7, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay8, actual.getRows());\n  }\n","date":"2019-04-27 08:07:48","endLine":650,"groupId":"15412","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testApplyMultipleInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/04a979bac20896d5f7acf32ae5969010ce4207.src","preCode":"  public void testApplyMultipleInterval()\n  {\n\n    intervals = new ArrayList<>();\n    intervals.add(INTERVAL_JAN_1_4);\n    intervals.add(INTERVAL_JAN_6_8);\n\n    List<Row> expectedDay1 = Arrays.asList(JAN_1_M_10, JAN_1_F_20);\n    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);\n    List<Row> expectedDay3 = Collections.singletonList(JAN_3_F_20);\n    List<Row> expectedDay4 = Arrays.asList(JAN_4_M_10, JAN_4_F_20, JAN_4_U_30);\n    List<Row> expectedDay6 = Collections.singletonList(JAN_6_M_10);\n    List<Row> expectedDay7 = Collections.singletonList(JAN_7_F_20);\n    List<Row> expectedDay8 = Collections.singletonList(JAN_8_U_30);\n\n    rows = new ArrayList<>();\n    rows.add(JAN_1_M_10);\n    rows.add(JAN_1_F_20);\n    rows.add(JAN_2_M_10);\n    rows.add(JAN_3_F_20);\n    rows.add(JAN_4_M_10);\n    rows.add(JAN_4_F_20);\n    rows.add(JAN_4_U_30);\n    rows.add(JAN_6_M_10);\n    rows.add(JAN_7_F_20);\n    rows.add(JAN_8_U_30);\n\n    Sequence<Row> seq = Sequences.simple(rows);\n    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);\n    Iterator<RowBucket> iter = rbi.iterator();\n\n    RowBucket actual = iter.next();\n    assertEquals(expectedDay1, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay2, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay3, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay4, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay6, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay7, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay8, actual.getRows());\n  }\n","realPath":"extensions-contrib/moving-average-query/src/test/java/org/apache/druid/query/movingaverage/RowBucketIterableTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":599,"status":"B"}],"commitId":"f02251ab2d6e1b4d13bf78415c9c7528a7a9c063","commitMessage":"@@@Contributing Moving-Average Query to open source. (#6430)\n\n* Contributing Moving-Average Query to open source.\n\n* Fix failing code inspections.\n\n* See if explicit types will invoke the correct comparison function.\n\n* Explicitly remove support for druid.generic.useDefaultValueForNull configuration parameter.\n\n* Update styling and headers for complience.\n\n* Refresh code with latest master changes:\n\n* Remove NullDimensionSelector.\n* Apply changes of RequestLogger.\n* Apply changes of TimelineServerView.\n\n* Small checkstyle fix.\n\n* Checkstyle fixes.\n\n* Fixing rat errors; Teamcity errors.\n\n* Removing support theta sketches. Will be added back in this pr or a following once DI conflicts with datasketches are resolved.\n\n* Implements some of the review fixes.\n\n* Contributing Moving-Average Query to open source.\n\n* Fix failing code inspections.\n\n* See if explicit types will invoke the correct comparison function.\n\n* Explicitly remove support for druid.generic.useDefaultValueForNull configuration parameter.\n\n* Update styling and headers for complience.\n\n* Refresh code with latest master changes:\n\n* Remove NullDimensionSelector.\n* Apply changes of RequestLogger.\n* Apply changes of TimelineServerView.\n\n* Small checkstyle fix.\n\n* Checkstyle fixes.\n\n* Fixing rat errors; Teamcity errors.\n\n* Removing support theta sketches. Will be added back in this pr or a following once DI conflicts with datasketches are resolved.\n\n* Implements some of the review fixes.\n\n* More fixes for review.\n\n* More fixes from review.\n\n* MapBasedRow is Unmodifiable. Create new rows instead of modifying existing ones.\n\n* Remove more changes related to datasketches support.\n\n* Refactor BaseAverager startFrom field and add a comment.\n\n* fakeEvents field: Refactor initialization and add comment.\n\n* Rename parameters (tiny change).\n\n* Fix variable name typo in test (JAN_4).\n\n* Fix styling of non camelCase fields.\n\n* Fix Preconditions.checkArgument for cycleSize.\n\n* Add more documentation to RowBucketIterable and other classes.\n\n* key/value comment on in MovingAverageIterable.\n\n* Fix anonymous makeColumnValueSelector returning null.\n\n* Replace IdentityYieldingAccumolator with Yielders.each().\n\n* * internalNext() should return null instead of throwing exception.\n* Remove unused variables/prarameters.\n\n* Harden MovingAverageIterableTest (Switch anyOf to exact match).\n\n* Change internalNext() from recursion to iteration; Simplify next() and hasNext().\n\n* Remove unused imports.\n\n* Address review comments.\n\n* Rename fakeEvents to emptyEvents.\n\n* Remove redundant parameter key from computeMovingAverage.\n\n* Check yielder as well in RowBucketIterable#hasNext()\n\n* Fix javadoc.\n","date":"2019-04-27 08:07:48","modifiedFileCount":"0","status":"B","submitter":"Eyal Yurman"},{"authorTime":"2019-07-07 00:33:12","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void testApplyLastDayNoRows()\n  {\n    intervals = new ArrayList<>();\n    intervals.add(INTERVAL_JAN_1_4);\n\n    List<Row> expectedDay1 = Arrays.asList(JAN_1_M_10, JAN_1_F_20);\n    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);\n    List<Row> expectedDay3 = Collections.singletonList(JAN_3_F_20);\n    List<Row> expectedDay4 = Collections.emptyList();\n\n    rows = new ArrayList<>();\n    rows.add(JAN_1_M_10);\n    rows.add(JAN_1_F_20);\n    rows.add(JAN_2_M_10);\n    rows.add(JAN_3_F_20);\n\n    Sequence<Row> seq = Sequences.simple(rows);\n    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);\n    Iterator<RowBucket> iter = rbi.iterator();\n\n    RowBucket actual = iter.next();\n    Assert.assertEquals(expectedDay1, actual.getRows());\n\n    actual = iter.next();\n    Assert.assertEquals(expectedDay2, actual.getRows());\n\n    actual = iter.next();\n    Assert.assertEquals(expectedDay3, actual.getRows());\n\n    actual = iter.next();\n    Assert.assertEquals(JAN_4, actual.getDateTime());\n    Assert.assertEquals(expectedDay4, actual.getRows());\n  }\n","date":"2019-07-07 00:33:12","endLine":523,"groupId":"103970","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testApplyLastDayNoRows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b4/9e4d950331a4ef23efc80855c4b0a1124319d2.src","preCode":"  public void testApplyLastDayNoRows()\n  {\n\n    intervals = new ArrayList<>();\n    intervals.add(INTERVAL_JAN_1_4);\n\n    List<Row> expectedDay1 = Arrays.asList(JAN_1_M_10, JAN_1_F_20);\n    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);\n    List<Row> expectedDay3 = Collections.singletonList(JAN_3_F_20);\n    List<Row> expectedDay4 = Collections.emptyList();\n\n    rows = new ArrayList<>();\n    rows.add(JAN_1_M_10);\n    rows.add(JAN_1_F_20);\n    rows.add(JAN_2_M_10);\n    rows.add(JAN_3_F_20);\n\n    Sequence<Row> seq = Sequences.simple(rows);\n    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);\n    Iterator<RowBucket> iter = rbi.iterator();\n\n    RowBucket actual = iter.next();\n    assertEquals(expectedDay1, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay2, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay3, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(JAN_4, actual.getDateTime());\n    assertEquals(expectedDay4, actual.getRows());\n  }\n","realPath":"extensions-contrib/moving-average-query/src/test/java/org/apache/druid/query/movingaverage/RowBucketIterableTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":491,"status":"M"},{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void testApplyMultipleInterval()\n  {\n    intervals = new ArrayList<>();\n    intervals.add(INTERVAL_JAN_1_4);\n    intervals.add(INTERVAL_JAN_6_8);\n\n    List<Row> expectedDay1 = Arrays.asList(JAN_1_M_10, JAN_1_F_20);\n    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);\n    List<Row> expectedDay3 = Collections.singletonList(JAN_3_F_20);\n    List<Row> expectedDay4 = Arrays.asList(JAN_4_M_10, JAN_4_F_20, JAN_4_U_30);\n    List<Row> expectedDay6 = Collections.singletonList(JAN_6_M_10);\n    List<Row> expectedDay7 = Collections.singletonList(JAN_7_F_20);\n    List<Row> expectedDay8 = Collections.singletonList(JAN_8_U_30);\n\n    rows = new ArrayList<>();\n    rows.add(JAN_1_M_10);\n    rows.add(JAN_1_F_20);\n    rows.add(JAN_2_M_10);\n    rows.add(JAN_3_F_20);\n    rows.add(JAN_4_M_10);\n    rows.add(JAN_4_F_20);\n    rows.add(JAN_4_U_30);\n    rows.add(JAN_6_M_10);\n    rows.add(JAN_7_F_20);\n    rows.add(JAN_8_U_30);\n\n    Sequence<Row> seq = Sequences.simple(rows);\n    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);\n    Iterator<RowBucket> iter = rbi.iterator();\n\n    RowBucket actual = iter.next();\n    Assert.assertEquals(expectedDay1, actual.getRows());\n\n    actual = iter.next();\n    Assert.assertEquals(expectedDay2, actual.getRows());\n\n    actual = iter.next();\n    Assert.assertEquals(expectedDay3, actual.getRows());\n\n    actual = iter.next();\n    Assert.assertEquals(expectedDay4, actual.getRows());\n\n    actual = iter.next();\n    Assert.assertEquals(expectedDay6, actual.getRows());\n\n    actual = iter.next();\n    Assert.assertEquals(expectedDay7, actual.getRows());\n\n    actual = iter.next();\n    Assert.assertEquals(expectedDay8, actual.getRows());\n  }\n","date":"2019-07-07 00:33:12","endLine":611,"groupId":"103970","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testApplyMultipleInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b4/9e4d950331a4ef23efc80855c4b0a1124319d2.src","preCode":"  public void testApplyMultipleInterval()\n  {\n\n    intervals = new ArrayList<>();\n    intervals.add(INTERVAL_JAN_1_4);\n    intervals.add(INTERVAL_JAN_6_8);\n\n    List<Row> expectedDay1 = Arrays.asList(JAN_1_M_10, JAN_1_F_20);\n    List<Row> expectedDay2 = Collections.singletonList(JAN_2_M_10);\n    List<Row> expectedDay3 = Collections.singletonList(JAN_3_F_20);\n    List<Row> expectedDay4 = Arrays.asList(JAN_4_M_10, JAN_4_F_20, JAN_4_U_30);\n    List<Row> expectedDay6 = Collections.singletonList(JAN_6_M_10);\n    List<Row> expectedDay7 = Collections.singletonList(JAN_7_F_20);\n    List<Row> expectedDay8 = Collections.singletonList(JAN_8_U_30);\n\n    rows = new ArrayList<>();\n    rows.add(JAN_1_M_10);\n    rows.add(JAN_1_F_20);\n    rows.add(JAN_2_M_10);\n    rows.add(JAN_3_F_20);\n    rows.add(JAN_4_M_10);\n    rows.add(JAN_4_F_20);\n    rows.add(JAN_4_U_30);\n    rows.add(JAN_6_M_10);\n    rows.add(JAN_7_F_20);\n    rows.add(JAN_8_U_30);\n\n    Sequence<Row> seq = Sequences.simple(rows);\n    RowBucketIterable rbi = new RowBucketIterable(seq, intervals, ONE_DAY);\n    Iterator<RowBucket> iter = rbi.iterator();\n\n    RowBucket actual = iter.next();\n    assertEquals(expectedDay1, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay2, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay3, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay4, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay6, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay7, actual.getRows());\n\n    actual = iter.next();\n    assertEquals(expectedDay8, actual.getRows());\n  }\n","realPath":"extensions-contrib/moving-average-query/src/test/java/org/apache/druid/query/movingaverage/RowBucketIterableTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":561,"status":"M"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"}]
