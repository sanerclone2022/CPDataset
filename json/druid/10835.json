[{"authorTime":"2020-03-10 17:57:16","codes":[{"authorDate":"2020-03-10 17:57:16","commitOrder":1,"curCode":"  public void testTooManyQuery() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n\n    final CountDownLatch waitTwoScheduled = new CountDownLatch(2);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler laningScheduler = new QueryScheduler(2, NoQueryLaningStrategy.INSTANCE, new ServerConfig());\n\n    createScheduledQueryResource(laningScheduler, Collections.emptyList(), ImmutableList.of(waitTwoScheduled));\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitTwoScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = JSON_MAPPER.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_MESSAGE, ex.getMessage());\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n        }\n    );\n    waitAllFinished.await();\n  }\n","date":"2020-03-10 17:57:16","endLine":711,"groupId":"5490","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTooManyQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a1/2b69025dd76b7493c0961ff10f70b4691c7411.src","preCode":"  public void testTooManyQuery() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n\n    final CountDownLatch waitTwoScheduled = new CountDownLatch(2);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler laningScheduler = new QueryScheduler(2, NoQueryLaningStrategy.INSTANCE, new ServerConfig());\n\n    createScheduledQueryResource(laningScheduler, Collections.emptyList(), ImmutableList.of(waitTwoScheduled));\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitTwoScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = JSON_MAPPER.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_MESSAGE, ex.getMessage());\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n        }\n    );\n    waitAllFinished.await();\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":674,"status":"B"},{"authorDate":"2020-03-10 17:57:16","commitOrder":1,"curCode":"  public void testTooManyQueryInLane() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n    final CountDownLatch waitTwoStarted = new CountDownLatch(2);\n    final CountDownLatch waitOneScheduled = new CountDownLatch(1);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler scheduler = new QueryScheduler(40, new HiLoQueryLaningStrategy(1), new ServerConfig());\n\n    createScheduledQueryResource(scheduler, ImmutableList.of(waitTwoStarted), ImmutableList.of(waitOneScheduled));\n\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitOneScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = JSON_MAPPER.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(\n              StringUtils.format(\n                  QueryCapacityExceededException.ERROR_MESSAGE_TEMPLATE,\n                  HiLoQueryLaningStrategy.LOW\n              ),\n              ex.getMessage()\n          );\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n\n        }\n    );\n    waitTwoStarted.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n\n    waitAllFinished.await();\n  }\n","date":"2020-03-10 17:57:16","endLine":761,"groupId":"3795","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTooManyQueryInLane","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a1/2b69025dd76b7493c0961ff10f70b4691c7411.src","preCode":"  public void testTooManyQueryInLane() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n    final CountDownLatch waitTwoStarted = new CountDownLatch(2);\n    final CountDownLatch waitOneScheduled = new CountDownLatch(1);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler scheduler = new QueryScheduler(40, new HiLoQueryLaningStrategy(1), new ServerConfig());\n\n    createScheduledQueryResource(scheduler, ImmutableList.of(waitTwoStarted), ImmutableList.of(waitOneScheduled));\n\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitOneScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = JSON_MAPPER.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(\n              StringUtils.format(\n                  QueryCapacityExceededException.ERROR_MESSAGE_TEMPLATE,\n                  HiLoQueryLaningStrategy.LOW\n              ),\n              ex.getMessage()\n          );\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n\n        }\n    );\n    waitTwoStarted.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n\n    waitAllFinished.await();\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":714,"status":"B"}],"commitId":"8b9fe6f58461f1fc3f453c14f1634f9e779aeb71","commitMessage":"@@@query laning and load shedding (#9407)\n\n* prototype\n\n* merge QueryScheduler and QueryManager\n\n* everything in its right place\n\n* adjustments\n\n* docs\n\n* fixes\n\n* doc fixes\n\n* use resilience4j instead of semaphore\n\n* more tests\n\n* simplify\n\n* checkstyle\n\n* spelling\n\n* oops heh\n\n* remove unused\n\n* simplify\n\n* concurrency tests\n\n* add SqlResource tests.  refactor error response\n\n* add json config tests\n\n* use LongAdder instead of AtomicLong\n\n* remove test only stuffs from scheduler\n\n* javadocs.  etc\n\n* style\n\n* partial review stuffs\n\n* adjust\n\n* review stuffs\n\n* more javadoc\n\n* error response documentation\n\n* spelling\n\n* preserve user specified lane for NoSchedulingStrategy\n\n* more test.  why not\n\n* doc adjustment\n\n* style\n\n* missed review for make a thing a constant\n\n* fixes and tests\n\n* fix test\n\n* Update docs/configuration/index.md\n\nCo-Authored-By: sthetland <steve.hetland@imply.io>\n\n* doc update\n\nCo-authored-by: sthetland <steve.hetland@imply.io>","date":"2020-03-10 17:57:16","modifiedFileCount":"26","status":"B","submitter":"Clint Wylie"},{"authorTime":"2020-03-13 16:41:54","codes":[{"authorDate":"2020-03-13 16:41:54","commitOrder":2,"curCode":"  public void testTooManyQuery() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n\n    final CountDownLatch waitTwoScheduled = new CountDownLatch(2);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler laningScheduler = new QueryScheduler(\n        2,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        NoQueryLaningStrategy.INSTANCE,\n        new ServerConfig()\n    );\n\n    createScheduledQueryResource(laningScheduler, Collections.emptyList(), ImmutableList.of(waitTwoScheduled));\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitTwoScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = JSON_MAPPER.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_MESSAGE, ex.getMessage());\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n        }\n    );\n    waitAllFinished.await();\n  }\n","date":"2020-03-13 16:41:54","endLine":736,"groupId":"5490","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTooManyQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a0/604e1e4179de4f6d04efb68c902cc6b896eac3.src","preCode":"  public void testTooManyQuery() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n\n    final CountDownLatch waitTwoScheduled = new CountDownLatch(2);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler laningScheduler = new QueryScheduler(2, NoQueryLaningStrategy.INSTANCE, new ServerConfig());\n\n    createScheduledQueryResource(laningScheduler, Collections.emptyList(), ImmutableList.of(waitTwoScheduled));\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitTwoScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = JSON_MAPPER.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_MESSAGE, ex.getMessage());\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n        }\n    );\n    waitAllFinished.await();\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":694,"status":"M"},{"authorDate":"2020-03-13 16:41:54","commitOrder":2,"curCode":"  public void testTooManyQueryInLane() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n    final CountDownLatch waitTwoStarted = new CountDownLatch(2);\n    final CountDownLatch waitOneScheduled = new CountDownLatch(1);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler scheduler = new QueryScheduler(\n        40,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(2),\n        new ServerConfig()\n    );\n\n    createScheduledQueryResource(scheduler, ImmutableList.of(waitTwoStarted), ImmutableList.of(waitOneScheduled));\n\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitOneScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = JSON_MAPPER.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(\n              StringUtils.format(\n                  QueryCapacityExceededException.ERROR_MESSAGE_TEMPLATE,\n                  HiLoQueryLaningStrategy.LOW\n              ),\n              ex.getMessage()\n          );\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n\n        }\n    );\n    waitTwoStarted.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n\n    waitAllFinished.await();\n  }\n","date":"2020-03-13 16:41:54","endLine":791,"groupId":"3795","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTooManyQueryInLane","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a0/604e1e4179de4f6d04efb68c902cc6b896eac3.src","preCode":"  public void testTooManyQueryInLane() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n    final CountDownLatch waitTwoStarted = new CountDownLatch(2);\n    final CountDownLatch waitOneScheduled = new CountDownLatch(1);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler scheduler = new QueryScheduler(40, new HiLoQueryLaningStrategy(1), new ServerConfig());\n\n    createScheduledQueryResource(scheduler, ImmutableList.of(waitTwoStarted), ImmutableList.of(waitOneScheduled));\n\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitOneScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = JSON_MAPPER.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(\n              StringUtils.format(\n                  QueryCapacityExceededException.ERROR_MESSAGE_TEMPLATE,\n                  HiLoQueryLaningStrategy.LOW\n              ),\n              ex.getMessage()\n          );\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n\n        }\n    );\n    waitTwoStarted.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n\n    waitAllFinished.await();\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":739,"status":"M"}],"commitId":"6afd55c8f4b49802d873ca181727231670abd566","commitMessage":"@@@threshold based automatic query prioritization (#9493)\n\n* threshold based automatic query prioritization\n\n* fixes\n\n* spelling and fixes\n\n* fix docs\n\n* spelling\n\n* checkstyle\n\n* adjustments\n\n* doc fix","date":"2020-03-13 16:41:54","modifiedFileCount":"13","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-03-24 11:05:11","codes":[{"authorDate":"2020-03-24 11:05:11","commitOrder":3,"curCode":"  public void testTooManyQuery() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n\n    final CountDownLatch waitTwoScheduled = new CountDownLatch(2);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler laningScheduler = new QueryScheduler(\n        2,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        NoQueryLaningStrategy.INSTANCE,\n        new ServerConfig()\n    );\n\n    createScheduledQueryResource(laningScheduler, Collections.emptyList(), ImmutableList.of(waitTwoScheduled));\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitTwoScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = JSON_MAPPER.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(QueryCapacityExceededException.makeTotalErrorMessage(2), ex.getMessage());\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n        }\n    );\n    waitAllFinished.await();\n  }\n","date":"2020-03-24 11:05:11","endLine":736,"groupId":"5490","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTooManyQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d1/7a3726be0ce2a7382647640137692719054cbd.src","preCode":"  public void testTooManyQuery() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n\n    final CountDownLatch waitTwoScheduled = new CountDownLatch(2);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler laningScheduler = new QueryScheduler(\n        2,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        NoQueryLaningStrategy.INSTANCE,\n        new ServerConfig()\n    );\n\n    createScheduledQueryResource(laningScheduler, Collections.emptyList(), ImmutableList.of(waitTwoScheduled));\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitTwoScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = JSON_MAPPER.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_MESSAGE, ex.getMessage());\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n        }\n    );\n    waitAllFinished.await();\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":694,"status":"M"},{"authorDate":"2020-03-24 11:05:11","commitOrder":3,"curCode":"  public void testTooManyQueryInLane() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n    final CountDownLatch waitTwoStarted = new CountDownLatch(2);\n    final CountDownLatch waitOneScheduled = new CountDownLatch(1);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler scheduler = new QueryScheduler(\n        40,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(2),\n        new ServerConfig()\n    );\n\n    createScheduledQueryResource(scheduler, ImmutableList.of(waitTwoStarted), ImmutableList.of(waitOneScheduled));\n\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitOneScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = JSON_MAPPER.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(\n              QueryCapacityExceededException.makeLaneErrorMessage(HiLoQueryLaningStrategy.LOW, 1),\n              ex.getMessage()\n          );\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n\n        }\n    );\n    waitTwoStarted.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n\n    waitAllFinished.await();\n  }\n","date":"2020-03-24 11:05:11","endLine":788,"groupId":"3795","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTooManyQueryInLane","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d1/7a3726be0ce2a7382647640137692719054cbd.src","preCode":"  public void testTooManyQueryInLane() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n    final CountDownLatch waitTwoStarted = new CountDownLatch(2);\n    final CountDownLatch waitOneScheduled = new CountDownLatch(1);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler scheduler = new QueryScheduler(\n        40,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(2),\n        new ServerConfig()\n    );\n\n    createScheduledQueryResource(scheduler, ImmutableList.of(waitTwoStarted), ImmutableList.of(waitOneScheduled));\n\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitOneScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = JSON_MAPPER.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(\n              StringUtils.format(\n                  QueryCapacityExceededException.ERROR_MESSAGE_TEMPLATE,\n                  HiLoQueryLaningStrategy.LOW\n              ),\n              ex.getMessage()\n          );\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n\n        }\n    );\n    waitTwoStarted.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n\n    waitAllFinished.await();\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":739,"status":"M"}],"commitId":"2bc29543e596892749b9c3582a231e3ad771013d","commitMessage":"@@@modify QueryCapacityExceededException to provide better messaging (#9547)\n\n* modify QueryCapacityExceededException to provide better messaging\n\n* style","date":"2020-03-24 11:05:11","modifiedFileCount":"6","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-05-04 13:43:47","codes":[{"authorDate":"2021-05-04 13:43:47","commitOrder":4,"curCode":"  public void testTooManyQuery() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n\n    final CountDownLatch waitTwoScheduled = new CountDownLatch(2);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler laningScheduler = new QueryScheduler(\n        2,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        NoQueryLaningStrategy.INSTANCE,\n        new ServerConfig()\n    );\n\n    createScheduledQueryResource(laningScheduler, Collections.emptyList(), ImmutableList.of(waitTwoScheduled));\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitTwoScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = jsonMapper.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(QueryCapacityExceededException.makeTotalErrorMessage(2), ex.getMessage());\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n        }\n    );\n    waitAllFinished.await();\n  }\n","date":"2021-05-04 13:43:47","endLine":1112,"groupId":"10835","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testTooManyQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/6af18220878b5785dada0eb6b6e8aaf0d07db2.src","preCode":"  public void testTooManyQuery() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n\n    final CountDownLatch waitTwoScheduled = new CountDownLatch(2);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler laningScheduler = new QueryScheduler(\n        2,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        NoQueryLaningStrategy.INSTANCE,\n        new ServerConfig()\n    );\n\n    createScheduledQueryResource(laningScheduler, Collections.emptyList(), ImmutableList.of(waitTwoScheduled));\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitTwoScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = JSON_MAPPER.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(QueryCapacityExceededException.makeTotalErrorMessage(2), ex.getMessage());\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n        }\n    );\n    waitAllFinished.await();\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1070,"status":"M"},{"authorDate":"2021-05-04 13:43:47","commitOrder":4,"curCode":"  public void testTooManyQueryInLane() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n    final CountDownLatch waitTwoStarted = new CountDownLatch(2);\n    final CountDownLatch waitOneScheduled = new CountDownLatch(1);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler scheduler = new QueryScheduler(\n        40,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(2),\n        new ServerConfig()\n    );\n\n    createScheduledQueryResource(scheduler, ImmutableList.of(waitTwoStarted), ImmutableList.of(waitOneScheduled));\n\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitOneScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = jsonMapper.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(\n              QueryCapacityExceededException.makeLaneErrorMessage(HiLoQueryLaningStrategy.LOW, 1),\n              ex.getMessage()\n          );\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n\n        }\n    );\n    waitTwoStarted.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n\n    waitAllFinished.await();\n  }\n","date":"2021-05-04 13:43:47","endLine":1164,"groupId":"10835","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testTooManyQueryInLane","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/6af18220878b5785dada0eb6b6e8aaf0d07db2.src","preCode":"  public void testTooManyQueryInLane() throws InterruptedException\n  {\n    expectPermissiveHappyPathAuth();\n    final CountDownLatch waitTwoStarted = new CountDownLatch(2);\n    final CountDownLatch waitOneScheduled = new CountDownLatch(1);\n    final CountDownLatch waitAllFinished = new CountDownLatch(3);\n    final QueryScheduler scheduler = new QueryScheduler(\n        40,\n        ManualQueryPrioritizationStrategy.INSTANCE,\n        new HiLoQueryLaningStrategy(2),\n        new ServerConfig()\n    );\n\n    createScheduledQueryResource(scheduler, ImmutableList.of(waitTwoStarted), ImmutableList.of(waitOneScheduled));\n\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n    waitOneScheduled.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY_LOW_PRIORITY,\n        waitAllFinished,\n        response -> {\n          Assert.assertEquals(QueryCapacityExceededException.STATUS_CODE, response.getStatus());\n          QueryCapacityExceededException ex;\n          try {\n            ex = JSON_MAPPER.readValue((byte[]) response.getEntity(), QueryCapacityExceededException.class);\n          }\n          catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          Assert.assertEquals(\n              QueryCapacityExceededException.makeLaneErrorMessage(HiLoQueryLaningStrategy.LOW, 1),\n              ex.getMessage()\n          );\n          Assert.assertEquals(QueryCapacityExceededException.ERROR_CODE, ex.getErrorCode());\n\n        }\n    );\n    waitTwoStarted.await();\n    assertResponseAndCountdownOrBlockForever(\n        SIMPLE_TIMESERIES_QUERY,\n        waitAllFinished,\n        response -> Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus())\n    );\n\n    waitAllFinished.await();\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/QueryResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1115,"status":"M"}],"commitId":"204901a602bfb151d473adef8586bc13a065d4d0","commitMessage":"@@@Fix Smile encoding for HTTP response (#10980)\n\n* fix Smile encoding bug\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>\n\n* Add unit tests\n\n* Add IT for smile encoding\n\n* Fix cases\n\n* Update javadoc\n\nCo-authored-by: Jihoon Son <jihoonson@apache.org>\n\n* resolve comments\n\nCo-authored-by: Jihoon Son <jihoonson@apache.org>","date":"2021-05-04 13:43:47","modifiedFileCount":"9","status":"M","submitter":"frank chen"}]
