[{"authorTime":"2020-01-23 06:54:47","codes":[{"authorDate":"2020-01-23 06:54:47","commitOrder":1,"curCode":"  public void testJoinLookupToLookup()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        LOOKUP_LOOKYLOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertFalse(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertTrue(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", LOOKUP_LOOKYLOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","date":"2020-01-23 06:54:47","endLine":395,"groupId":"13485","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinLookupToLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1b/24c5e389835021c35e97d88e33a7d2b7f1c045.src","preCode":"  public void testJoinLookupToLookup()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        LOOKUP_LOOKYLOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertFalse(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertTrue(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", LOOKUP_LOOKYLOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/planning/DataSourceAnalysisTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"B"},{"authorDate":"2020-01-23 06:54:47","commitOrder":1,"curCode":"  public void testJoinLookupToTable()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        TABLE_FOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertFalse(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertFalse(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", TABLE_FOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","date":"2020-01-23 06:54:47","endLine":423,"groupId":"13485","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinLookupToTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1b/24c5e389835021c35e97d88e33a7d2b7f1c045.src","preCode":"  public void testJoinLookupToTable()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        TABLE_FOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertFalse(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertFalse(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", TABLE_FOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/planning/DataSourceAnalysisTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":398,"status":"B"}],"commitId":"d886463253e1f537e32b8aedac60c8ee741f6cc7","commitMessage":"@@@Add join-related DataSource types.  and analysis functionality. (#9235)\n\n* Add join-related DataSource types.  and analysis functionality.\n\nBuilds on #9111 and implements the datasource analysis mentioned in #8728. Still can't\nhandle join datasources.  but we're a step closer.\n\nJoin-related DataSource types:\n\n1) Add \"join\".  \"lookup\".  and \"inline\" datasources.\n2) Add \"getChildren\" and \"withChildren\" methods to DataSource.  which will be used\n   in the future for query rewriting (e.g. inlining of subqueries).\n\nDataSource analysis functionality:\n\n1) Add DataSourceAnalysis class.  which breaks down datasources into three components:\n   outer queries.  a base datasource (left-most of the highest level left-leaning join\n   tree).  and other joined-in leaf datasources (the right-hand branches of the\n   left-leaning join tree).\n2) Add \"isConcrete\".  \"isGlobal\".  and \"isCacheable\" methods to DataSource in order to\n   support analysis.\n\nOther notes:\n\n1) Renamed DataSource#getNames to DataSource#getTableNames.  which I think is clearer.\n   Also.  made it a Set.  so implementations don't need to worry about duplicates.\n2) The addition of \"isCacheable\" should work around #8713.  since UnionDataSource now\n   returns false for cacheability.\n\n* Remove javadoc comment.\n\n* Updates reflecting code review.\n\n* Add comments.\n\n* Add more comments.\n","date":"2020-01-23 06:54:47","modifiedFileCount":"32","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-01-23 06:54:47","codes":[{"authorDate":"2020-03-12 02:32:27","commitOrder":2,"curCode":"  public void testJoinLookupToLookup()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        LOOKUP_LOOKYLOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertTrue(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertTrue(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", LOOKUP_LOOKYLOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","date":"2020-03-12 02:32:27","endLine":395,"groupId":"13485","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinLookupToLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d0/53c7cca392e5eaa9ff6ada369b435a5df83962.src","preCode":"  public void testJoinLookupToLookup()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        LOOKUP_LOOKYLOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertFalse(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertTrue(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", LOOKUP_LOOKYLOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/planning/DataSourceAnalysisTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"M"},{"authorDate":"2020-01-23 06:54:47","commitOrder":2,"curCode":"  public void testJoinLookupToTable()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        TABLE_FOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertFalse(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertFalse(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", TABLE_FOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","date":"2020-01-23 06:54:47","endLine":423,"groupId":"13485","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinLookupToTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1b/24c5e389835021c35e97d88e33a7d2b7f1c045.src","preCode":"  public void testJoinLookupToTable()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        TABLE_FOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertFalse(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertFalse(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", TABLE_FOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/planning/DataSourceAnalysisTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":398,"status":"N"}],"commitId":"2ef5c17441a450171523653787743db76a3e3bdb","commitMessage":"@@@Link up row-based datasources to serving layer. (#9503)\n\n* Link up row-based datasources to serving layer.\n\n- Add SegmentWrangler interface that allows linking of DataSources to Segments.\n- Add LocalQuerySegmentWalker that uses SegmentWranglers to compute queries on\n  data that is available locally.\n- Modify ClientQuerySegmentWalker to use LocalQuerySegmentWalker when the base\n  datasource is concrete and not a table.\n- Add SegmentWranglerModule to the Broker so it has them available and can\n  properly instantiate . LocalQuerySegmentWalkers.\n- Set InlineDataSource and LookupDataSource to concrete.  since they can be\n  directly queried now.\n\n* Fix tests.","date":"2020-03-12 02:32:27","modifiedFileCount":"12","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-07-01 10:14:22","codes":[{"authorDate":"2020-07-01 10:14:22","commitOrder":3,"curCode":"  public void testJoinLookupToLookup()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        LOOKUP_LOOKYLOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertTrue(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertTrue(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuery());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", LOOKUP_LOOKYLOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","date":"2020-07-01 10:14:22","endLine":419,"groupId":"13485","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinLookupToLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/59/7740cad0af4b3563784f87e8a219ce9da3af9e.src","preCode":"  public void testJoinLookupToLookup()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        LOOKUP_LOOKYLOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertTrue(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertTrue(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", LOOKUP_LOOKYLOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/planning/DataSourceAnalysisTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"M"},{"authorDate":"2020-07-01 10:14:22","commitOrder":3,"curCode":"  public void testJoinLookupToTable()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        TABLE_FOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertFalse(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertFalse(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuery());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", TABLE_FOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","date":"2020-07-01 10:14:22","endLine":448,"groupId":"13485","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinLookupToTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/59/7740cad0af4b3563784f87e8a219ce9da3af9e.src","preCode":"  public void testJoinLookupToTable()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        TABLE_FOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertFalse(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertFalse(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", TABLE_FOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/planning/DataSourceAnalysisTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"M"}],"commitId":"5faa897a342096b2ac88587ad62e6e15022b01dd","commitMessage":"@@@Join filter pre-analysis simplifications and sanity checks. (#10104)\n\n* Join filter pre-analysis simplifications and sanity checks.\n\n- At pre-analysis time.  only compute pre-analysis for the innermost\n  root query.  since this is the one that will run on the join that involves\n  the base datasource. Previously.  pre-analyses were computed for multiple\n  levels of the query.  some of which were unnecessary.\n- Remove JoinFilterPreAnalysisGroup and join query level gathering code. \n  since they existed to support precomputation of multiple pre-analyses.\n- Embed JoinFilterPreAnalysisKey into JoinFilterPreAnalysis and use it to\n  sanity check?at processing time that the correct pre-analysis was done.\n\nTangentially related changes:\n\n- Remove prioritizeAndLaneQuery functionality from LocalQuerySegmentWalker.\n  The computed priority and lanes were not being used.\n- Add \"getBaseQuery\" method to DataSourceAnalysis to support identification\n  of the proper subquery for filter pre-analysis.\n\n* Fix compilation errors.\n\n* Adjust tests.","date":"2020-07-01 10:14:22","modifiedFileCount":"20","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-08-27 05:23:54","codes":[{"authorDate":"2020-08-27 05:23:54","commitOrder":4,"curCode":"  public void testJoinLookupToLookup()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        LOOKUP_LOOKYLOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertTrue(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertTrue(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseUnionDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuery());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", LOOKUP_LOOKYLOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","date":"2020-08-27 05:23:54","endLine":433,"groupId":"13485","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinLookupToLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/82/9d5c21e4d263418d1404bb09d047c82c42c784.src","preCode":"  public void testJoinLookupToLookup()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        LOOKUP_LOOKYLOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertTrue(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertTrue(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuery());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", LOOKUP_LOOKYLOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/planning/DataSourceAnalysisTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"M"},{"authorDate":"2020-08-27 05:23:54","commitOrder":4,"curCode":"  public void testJoinLookupToTable()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        TABLE_FOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertFalse(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertFalse(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseUnionDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuery());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", TABLE_FOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","date":"2020-08-27 05:23:54","endLine":463,"groupId":"13485","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinLookupToTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/82/9d5c21e4d263418d1404bb09d047c82c42c784.src","preCode":"  public void testJoinLookupToTable()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        TABLE_FOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertFalse(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertFalse(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuery());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", TABLE_FOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/planning/DataSourceAnalysisTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":436,"status":"M"}],"commitId":"21703d81ac4aabb8c2dfc66cacd18a42b3c38fbd","commitMessage":"@@@Fix handling of 'join' on top of 'union' datasources. (#10318)\n\n* Fix handling of 'join' on top of 'union' datasources.\n\nThe problem is that unions are typically rewritten into a series of\nindividual queries on the underlying tables.  but this isn't done when\nthe union is wrapped in a join.\n\nThe main changes are in UnionQueryRunner:\n\n1) Replace an instanceof UnionQueryRunner check with DataSourceAnalysis.\n2) Replace a \"query.withDataSource\" call with a new function.  \"Queries.withBaseDataSource\".\n\nTogether.  these enable UnionQueryRunner to \"see through\" a join.\n\n* Tests.\n\n* Adjust heap sizes for integration tests.\n\n* Different approach.  more tests.\n\n* Tweak.\n\n* Styling.","date":"2020-08-27 05:23:54","modifiedFileCount":"13","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-10-10 08:42:30","codes":[{"authorDate":"2020-10-10 08:42:30","commitOrder":5,"curCode":"  public void testJoinLookupToLookup()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        LOOKUP_LOOKYLOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertTrue(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertTrue(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseUnionDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuery());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", LOOKUP_LOOKYLOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n    Assert.assertTrue(analysis.isJoin());\n  }\n","date":"2020-10-10 08:42:30","endLine":446,"groupId":"13485","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinLookupToLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/82/d66351470a6abd4cf2d6c8f1c51bfa773ef962.src","preCode":"  public void testJoinLookupToLookup()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        LOOKUP_LOOKYLOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertTrue(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertTrue(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseUnionDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuery());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", LOOKUP_LOOKYLOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/planning/DataSourceAnalysisTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"},{"authorDate":"2020-10-10 08:42:30","commitOrder":5,"curCode":"  public void testJoinLookupToTable()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        TABLE_FOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertFalse(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertFalse(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseUnionDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuery());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", TABLE_FOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n    Assert.assertTrue(analysis.isJoin());\n  }\n","date":"2020-10-10 08:42:30","endLine":477,"groupId":"13485","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinLookupToTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/82/d66351470a6abd4cf2d6c8f1c51bfa773ef962.src","preCode":"  public void testJoinLookupToTable()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        TABLE_FOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertFalse(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertFalse(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseUnionDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuery());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", TABLE_FOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/planning/DataSourceAnalysisTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":449,"status":"M"}],"commitId":"4d2a92f46a121fc8b3f5a02f1480156ccc62bb4a","commitMessage":"@@@Add caching support to join queries (#10366)\n\n* Proposed changes for making joins cacheable\n\n* Add unit tests\n\n* Fix tests\n\n* simplify logic\n\n* Pull empty byte array logic out of CachingQueryRunner\n\n* remove useless null check\n\n* Minor refactor\n\n* Fix tests\n\n* Fix segment caching on Broker\n\n* Move join cache key computation in Broker\n\nMove join cache key computation in Broker from ResultLevelCachingQueryRunner to CachingClusteredClient\n\n* Fix compilation\n\n* Review comments\n\n* Add more tests\n\n* Fix inspection errors\n\n* Pushed condition analysis to JoinableFactory\n\n* review comments\n\n* Disable join caching for broker and add prefix key to BroadcastSegmentIndexedTable\n\n* Remove commented lines\n\n* Fix populateCache\n\n* Disable caching for selective datasources\n\nRefactored the code so that we can decide at the data source level.  whether to enable cache for broker or data nodes","date":"2020-10-10 08:42:30","modifiedFileCount":"52","status":"M","submitter":"Abhishek Agarwal"},{"authorTime":"2021-03-05 02:39:21","codes":[{"authorDate":"2021-03-05 02:39:21","commitOrder":6,"curCode":"  public void testJoinLookupToLookup()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        LOOKUP_LOOKYLOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertTrue(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertTrue(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseUnionDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuery());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(Optional.empty(), analysis.getJoinBaseTableFilter());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", LOOKUP_LOOKYLOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n    Assert.assertTrue(analysis.isJoin());\n  }\n","date":"2021-03-05 02:39:21","endLine":551,"groupId":"106860","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testJoinLookupToLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/93/e75c3f190c26e5da34417026a035576a686382.src","preCode":"  public void testJoinLookupToLookup()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        LOOKUP_LOOKYLOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertTrue(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertTrue(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseUnionDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuery());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", LOOKUP_LOOKYLOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n    Assert.assertTrue(analysis.isJoin());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/planning/DataSourceAnalysisTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":522,"status":"M"},{"authorDate":"2021-03-05 02:39:21","commitOrder":6,"curCode":"  public void testJoinLookupToTable()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        TABLE_FOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertFalse(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertFalse(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseUnionDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuery());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(Optional.empty(), analysis.getJoinBaseTableFilter());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", TABLE_FOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n    Assert.assertTrue(analysis.isJoin());\n  }\n","date":"2021-03-05 02:39:21","endLine":583,"groupId":"106860","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testJoinLookupToTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/93/e75c3f190c26e5da34417026a035576a686382.src","preCode":"  public void testJoinLookupToTable()\n  {\n    final JoinDataSource joinDataSource = join(\n        LOOKUP_LOOKYLOO,\n        TABLE_FOO,\n        \"1.\",\n        JoinType.INNER\n    );\n\n    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(joinDataSource);\n\n    Assert.assertFalse(analysis.isConcreteBased());\n    Assert.assertFalse(analysis.isConcreteTableBased());\n    Assert.assertFalse(analysis.isGlobal());\n    Assert.assertFalse(analysis.isQuery());\n    Assert.assertEquals(joinDataSource, analysis.getDataSource());\n    Assert.assertEquals(LOOKUP_LOOKYLOO, analysis.getBaseDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseTableDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseUnionDataSource());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuery());\n    Assert.assertEquals(Optional.empty(), analysis.getBaseQuerySegmentSpec());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new PreJoinableClause(\"1.\", TABLE_FOO, JoinType.INNER, joinClause(\"1.\"))\n        ),\n        analysis.getPreJoinableClauses()\n    );\n    Assert.assertTrue(analysis.isJoin());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/planning/DataSourceAnalysisTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":554,"status":"M"}],"commitId":"1a15987432fab044fc83a99af8ab497d887aeda1","commitMessage":"@@@Supporting filters in the left base table for join datasources (#10697)\n\n* where filter left first draft\n\n* Revert changes in calcite test\n\n* Refactor a bit\n\n* Fixing the Tests\n\n* Changes\n\n* Adding tests\n\n* Add tests for correlated queries\n\n* Add comment\n\n* Fix typos","date":"2021-03-05 02:39:21","modifiedFileCount":"26","status":"M","submitter":"Abhishek Agarwal"}]
