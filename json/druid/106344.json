[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDefaultTopNQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    DefaultTopNQueryMetrics queryMetrics = new DefaultTopNQueryMetrics(TestHelper.makeJsonMapper());\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(\"xx\")\n        .granularity(Granularities.ALL)\n        .dimension(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .metric(\"count\")\n        .intervals(QueryRunnerTestHelper.fullOnInterval)\n        .aggregators(Collections.singletonList(new CountAggregatorFactory(\"count\")))\n        .threshold(5)\n        .filters(new SelectorDimFilter(\"tags\", \"t3\", null))\n        .build();\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(16, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(\"xx\", actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnInterval.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"true\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"5\", actualEvent.get(\"threshold\"));\n    Assert.assertEquals(\"tags\", actualEvent.get(\"dimension\"));\n    Assert.assertEquals(\"1\", actualEvent.get(\"numMetrics\"));\n    Assert.assertEquals(\"0\", actualEvent.get(\"numComplexMetrics\"));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","date":"2018-08-31 00:56:26","endLine":98,"groupId":"20893","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultTopNQueryMetricsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/23/abdb63df57304ed60fba0fbd3abd6fc0ee375f.src","preCode":"  public void testDefaultTopNQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    DefaultTopNQueryMetrics queryMetrics = new DefaultTopNQueryMetrics(TestHelper.makeJsonMapper());\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(\"xx\")\n        .granularity(Granularities.ALL)\n        .dimension(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .metric(\"count\")\n        .intervals(QueryRunnerTestHelper.fullOnInterval)\n        .aggregators(Collections.singletonList(new CountAggregatorFactory(\"count\")))\n        .threshold(5)\n        .filters(new SelectorDimFilter(\"tags\", \"t3\", null))\n        .build();\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(16, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(\"xx\", actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnInterval.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"true\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"5\", actualEvent.get(\"threshold\"));\n    Assert.assertEquals(\"tags\", actualEvent.get(\"dimension\"));\n    Assert.assertEquals(\"1\", actualEvent.get(\"numMetrics\"));\n    Assert.assertEquals(\"0\", actualEvent.get(\"numComplexMetrics\"));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/DefaultTopNQueryMetricsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDefaultSearchQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    SearchQuery query = Druids\n        .newSearchQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.dayGran)\n        .intervals(QueryRunnerTestHelper.fullOnInterval)\n        .dimensions(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .build();\n\n    SearchQueryMetrics queryMetrics = DefaultSearchQueryMetricsFactory.instance().makeMetrics(query);\n\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(12, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(QueryRunnerTestHelper.dataSource, actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnInterval.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"false\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","date":"2018-08-31 00:56:26","endLine":86,"groupId":"2938","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultSearchQueryMetricsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d0/378ea2d2ba807a20fe80b6337576d1ddf226c2.src","preCode":"  public void testDefaultSearchQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    SearchQuery query = Druids\n        .newSearchQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.dayGran)\n        .intervals(QueryRunnerTestHelper.fullOnInterval)\n        .dimensions(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .build();\n\n    SearchQueryMetrics queryMetrics = DefaultSearchQueryMetricsFactory.instance().makeMetrics(query);\n\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(12, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(QueryRunnerTestHelper.dataSource, actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnInterval.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"false\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/DefaultSearchQueryMetricsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void testDefaultTopNQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    DefaultTopNQueryMetrics queryMetrics = new DefaultTopNQueryMetrics(TestHelper.makeJsonMapper());\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(\"xx\")\n        .granularity(Granularities.ALL)\n        .dimension(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .metric(\"count\")\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(Collections.singletonList(new CountAggregatorFactory(\"count\")))\n        .threshold(5)\n        .filters(new SelectorDimFilter(\"tags\", \"t3\", null))\n        .build();\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(16, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(\"xx\", actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnIntervalSpec.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"true\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"5\", actualEvent.get(\"threshold\"));\n    Assert.assertEquals(\"tags\", actualEvent.get(\"dimension\"));\n    Assert.assertEquals(\"1\", actualEvent.get(\"numMetrics\"));\n    Assert.assertEquals(\"0\", actualEvent.get(\"numComplexMetrics\"));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","date":"2019-01-22 03:11:10","endLine":98,"groupId":"18569","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultTopNQueryMetricsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7d/113602c8242226defed5d41fde6787c9e305ad.src","preCode":"  public void testDefaultTopNQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    DefaultTopNQueryMetrics queryMetrics = new DefaultTopNQueryMetrics(TestHelper.makeJsonMapper());\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(\"xx\")\n        .granularity(Granularities.ALL)\n        .dimension(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .metric(\"count\")\n        .intervals(QueryRunnerTestHelper.fullOnInterval)\n        .aggregators(Collections.singletonList(new CountAggregatorFactory(\"count\")))\n        .threshold(5)\n        .filters(new SelectorDimFilter(\"tags\", \"t3\", null))\n        .build();\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(16, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(\"xx\", actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnInterval.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"true\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"5\", actualEvent.get(\"threshold\"));\n    Assert.assertEquals(\"tags\", actualEvent.get(\"dimension\"));\n    Assert.assertEquals(\"1\", actualEvent.get(\"numMetrics\"));\n    Assert.assertEquals(\"0\", actualEvent.get(\"numComplexMetrics\"));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/DefaultTopNQueryMetricsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void testDefaultSearchQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    SearchQuery query = Druids\n        .newSearchQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.dayGran)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .dimensions(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .build();\n\n    SearchQueryMetrics queryMetrics = DefaultSearchQueryMetricsFactory.instance().makeMetrics(query);\n\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(12, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(QueryRunnerTestHelper.dataSource, actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnIntervalSpec.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"false\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","date":"2019-01-22 03:11:10","endLine":86,"groupId":"2938","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultSearchQueryMetricsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d3/f4ee1fefa80d719cfa560beadc5fffaa79cf99.src","preCode":"  public void testDefaultSearchQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    SearchQuery query = Druids\n        .newSearchQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.dayGran)\n        .intervals(QueryRunnerTestHelper.fullOnInterval)\n        .dimensions(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .build();\n\n    SearchQueryMetrics queryMetrics = DefaultSearchQueryMetricsFactory.instance().makeMetrics(query);\n\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(12, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(QueryRunnerTestHelper.dataSource, actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnInterval.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"false\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/DefaultSearchQueryMetricsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-07-19 04:16:28","commitOrder":3,"curCode":"  public void testDefaultTopNQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    DefaultTopNQueryMetrics queryMetrics = new DefaultTopNQueryMetrics(TestHelper.makeJsonMapper());\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(\"xx\")\n        .granularity(Granularities.ALL)\n        .dimension(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .metric(\"count\")\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(new CountAggregatorFactory(\"count\"))\n        .threshold(5)\n        .filters(new SelectorDimFilter(\"tags\", \"t3\", null))\n        .build();\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(16, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(\"xx\", actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnIntervalSpec.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"true\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"5\", actualEvent.get(\"threshold\"));\n    Assert.assertEquals(\"tags\", actualEvent.get(\"dimension\"));\n    Assert.assertEquals(\"1\", actualEvent.get(\"numMetrics\"));\n    Assert.assertEquals(\"0\", actualEvent.get(\"numComplexMetrics\"));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","date":"2019-07-19 04:16:28","endLine":97,"groupId":"18569","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultTopNQueryMetricsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4f/59e561b1d4457dfd5bbe5ff61c8b40395f8b3e.src","preCode":"  public void testDefaultTopNQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    DefaultTopNQueryMetrics queryMetrics = new DefaultTopNQueryMetrics(TestHelper.makeJsonMapper());\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(\"xx\")\n        .granularity(Granularities.ALL)\n        .dimension(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .metric(\"count\")\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(Collections.singletonList(new CountAggregatorFactory(\"count\")))\n        .threshold(5)\n        .filters(new SelectorDimFilter(\"tags\", \"t3\", null))\n        .build();\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(16, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(\"xx\", actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnIntervalSpec.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"true\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"5\", actualEvent.get(\"threshold\"));\n    Assert.assertEquals(\"tags\", actualEvent.get(\"dimension\"));\n    Assert.assertEquals(\"1\", actualEvent.get(\"numMetrics\"));\n    Assert.assertEquals(\"0\", actualEvent.get(\"numComplexMetrics\"));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/DefaultTopNQueryMetricsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":3,"curCode":"  public void testDefaultSearchQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    SearchQuery query = Druids\n        .newSearchQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.dayGran)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .dimensions(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .build();\n\n    SearchQueryMetrics queryMetrics = DefaultSearchQueryMetricsFactory.instance().makeMetrics(query);\n\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(12, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(QueryRunnerTestHelper.dataSource, actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnIntervalSpec.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"false\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","date":"2019-01-22 03:11:10","endLine":86,"groupId":"2938","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultSearchQueryMetricsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d3/f4ee1fefa80d719cfa560beadc5fffaa79cf99.src","preCode":"  public void testDefaultSearchQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    SearchQuery query = Druids\n        .newSearchQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.dayGran)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .dimensions(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .build();\n\n    SearchQueryMetrics queryMetrics = DefaultSearchQueryMetricsFactory.instance().makeMetrics(query);\n\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(12, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(QueryRunnerTestHelper.dataSource, actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnIntervalSpec.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"false\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/DefaultSearchQueryMetricsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"}],"commitId":"03e55d30ebcac9ec97edb1a638a5a99886c41374","commitMessage":"@@@add CachingClusteredClient benchmark.  refactor some stuff (#8089)\n\n* add CachingClusteredClient benchmark.  refactor some stuff\n\n* revert WeightedServerSelectorStrategy to ConnectionCountServerSelectorStrategy and remove getWeight since felt artificial.  default mergeResults in toolchest implementation for topn.  search.  select\n\n* adjust javadoc\n\n* adjustments\n\n* oops\n\n* use it\n\n* use BinaryOperator.  remove CombiningFunction.  use Comparator instead of Ordering.  other review adjustments\n\n* rename createComparator to createResultComparator.  fix typo.  firstNonNull nullable parameters\n","date":"2019-07-19 04:16:28","modifiedFileCount":"50","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testDefaultTopNQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    DefaultTopNQueryMetrics queryMetrics = new DefaultTopNQueryMetrics(TestHelper.makeJsonMapper());\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(\"xx\")\n        .granularity(Granularities.ALL)\n        .dimension(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .metric(\"count\")\n        .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .aggregators(new CountAggregatorFactory(\"count\"))\n        .threshold(5)\n        .filters(new SelectorDimFilter(\"tags\", \"t3\", null))\n        .build();\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(16, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(\"xx\", actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"true\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"5\", actualEvent.get(\"threshold\"));\n    Assert.assertEquals(\"tags\", actualEvent.get(\"dimension\"));\n    Assert.assertEquals(\"1\", actualEvent.get(\"numMetrics\"));\n    Assert.assertEquals(\"0\", actualEvent.get(\"numComplexMetrics\"));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","date":"2019-08-23 18:13:54","endLine":97,"groupId":"18569","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultTopNQueryMetricsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/80/06303e1ab7afd695498882b2e12627aec68e2f.src","preCode":"  public void testDefaultTopNQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    DefaultTopNQueryMetrics queryMetrics = new DefaultTopNQueryMetrics(TestHelper.makeJsonMapper());\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(\"xx\")\n        .granularity(Granularities.ALL)\n        .dimension(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .metric(\"count\")\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .aggregators(new CountAggregatorFactory(\"count\"))\n        .threshold(5)\n        .filters(new SelectorDimFilter(\"tags\", \"t3\", null))\n        .build();\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(16, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(\"xx\", actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnIntervalSpec.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"true\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"5\", actualEvent.get(\"threshold\"));\n    Assert.assertEquals(\"tags\", actualEvent.get(\"dimension\"));\n    Assert.assertEquals(\"1\", actualEvent.get(\"numMetrics\"));\n    Assert.assertEquals(\"0\", actualEvent.get(\"numComplexMetrics\"));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/DefaultTopNQueryMetricsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testDefaultSearchQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    SearchQuery query = Druids\n        .newSearchQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .granularity(QueryRunnerTestHelper.DAY_GRAN)\n        .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .dimensions(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .build();\n\n    SearchQueryMetrics queryMetrics = DefaultSearchQueryMetricsFactory.instance().makeMetrics(query);\n\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(12, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(QueryRunnerTestHelper.DATA_SOURCE, actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"false\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","date":"2019-08-23 18:13:54","endLine":86,"groupId":"2938","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultSearchQueryMetricsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e7/29a9cd31757395cb51ac18b56e46148309b60a.src","preCode":"  public void testDefaultSearchQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    SearchQuery query = Druids\n        .newSearchQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.dataSource)\n        .granularity(QueryRunnerTestHelper.dayGran)\n        .intervals(QueryRunnerTestHelper.fullOnIntervalSpec)\n        .dimensions(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .build();\n\n    SearchQueryMetrics queryMetrics = DefaultSearchQueryMetricsFactory.instance().makeMetrics(query);\n\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(12, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(QueryRunnerTestHelper.dataSource, actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.fullOnIntervalSpec.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"false\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/DefaultSearchQueryMetricsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-28 06:00:23","commitOrder":5,"curCode":"  public void testDefaultTopNQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    DefaultTopNQueryMetrics queryMetrics = new DefaultTopNQueryMetrics();\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(\"xx\")\n        .granularity(Granularities.ALL)\n        .dimension(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .metric(\"count\")\n        .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .aggregators(new CountAggregatorFactory(\"count\"))\n        .threshold(5)\n        .filters(new SelectorDimFilter(\"tags\", \"t3\", null))\n        .build();\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(16, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(\"xx\", actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"true\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"5\", actualEvent.get(\"threshold\"));\n    Assert.assertEquals(\"tags\", actualEvent.get(\"dimension\"));\n    Assert.assertEquals(\"1\", actualEvent.get(\"numMetrics\"));\n    Assert.assertEquals(\"0\", actualEvent.get(\"numComplexMetrics\"));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","date":"2019-08-28 06:00:23","endLine":96,"groupId":"18569","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultTopNQueryMetricsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/11/5f55d34e60ae4270b42f9fb2a07530ebe07166.src","preCode":"  public void testDefaultTopNQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    DefaultTopNQueryMetrics queryMetrics = new DefaultTopNQueryMetrics(TestHelper.makeJsonMapper());\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(\"xx\")\n        .granularity(Granularities.ALL)\n        .dimension(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .metric(\"count\")\n        .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .aggregators(new CountAggregatorFactory(\"count\"))\n        .threshold(5)\n        .filters(new SelectorDimFilter(\"tags\", \"t3\", null))\n        .build();\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(16, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(\"xx\", actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"true\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"5\", actualEvent.get(\"threshold\"));\n    Assert.assertEquals(\"tags\", actualEvent.get(\"dimension\"));\n    Assert.assertEquals(\"1\", actualEvent.get(\"numMetrics\"));\n    Assert.assertEquals(\"0\", actualEvent.get(\"numComplexMetrics\"));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/DefaultTopNQueryMetricsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":5,"curCode":"  public void testDefaultSearchQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    SearchQuery query = Druids\n        .newSearchQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .granularity(QueryRunnerTestHelper.DAY_GRAN)\n        .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .dimensions(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .build();\n\n    SearchQueryMetrics queryMetrics = DefaultSearchQueryMetricsFactory.instance().makeMetrics(query);\n\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(12, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(QueryRunnerTestHelper.DATA_SOURCE, actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"false\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","date":"2019-08-23 18:13:54","endLine":86,"groupId":"2938","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultSearchQueryMetricsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e7/29a9cd31757395cb51ac18b56e46148309b60a.src","preCode":"  public void testDefaultSearchQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    SearchQuery query = Druids\n        .newSearchQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .granularity(QueryRunnerTestHelper.DAY_GRAN)\n        .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .dimensions(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .build();\n\n    SearchQueryMetrics queryMetrics = DefaultSearchQueryMetricsFactory.instance().makeMetrics(query);\n\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(12, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(QueryRunnerTestHelper.DATA_SOURCE, actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"false\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/DefaultSearchQueryMetricsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"}],"commitId":"4d87a1954778a2de7609a24daf1b225b874e74be","commitMessage":"@@@Logging emitter to publish query and other metric events as valid json objects (#8359)\n\n* LoggingEmitter: print event as json\n\n* use DefaultRequestLogEventBuilderFactory in emitting request logger by default\n\n* print context in query metric as json\n\n* removed unused jsonMapper from DefaultQueryMetrics\n\n* add comment\n\n* remove change to DefaultRequestLogEventBuilderFactory.java\n","date":"2019-08-28 06:00:23","modifiedFileCount":"23","status":"M","submitter":"Himanshu"},{"authorTime":"2020-12-02 10:34:03","codes":[{"authorDate":"2020-12-02 10:34:03","commitOrder":6,"curCode":"  public void testDefaultTopNQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    DefaultTopNQueryMetrics queryMetrics = new DefaultTopNQueryMetrics();\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(\"xx\")\n        .granularity(Granularities.ALL)\n        .dimension(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .metric(\"count\")\n        .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .aggregators(new CountAggregatorFactory(\"count\"))\n        .threshold(5)\n        .filters(new SelectorDimFilter(\"tags\", \"t3\", null))\n        .context(ImmutableMap.of(\"testKey\", \"testValue\"))\n        .build();\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(17, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(\"xx\", actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"true\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n    Assert.assertEquals(ImmutableMap.of(\"testKey\", \"testValue\"), actualEvent.get(\"context\"));\n\n    \r\n    Assert.assertEquals(\"5\", actualEvent.get(\"threshold\"));\n    Assert.assertEquals(\"tags\", actualEvent.get(\"dimension\"));\n    Assert.assertEquals(\"1\", actualEvent.get(\"numMetrics\"));\n    Assert.assertEquals(\"0\", actualEvent.get(\"numComplexMetrics\"));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","date":"2020-12-02 10:34:03","endLine":99,"groupId":"106344","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testDefaultTopNQueryMetricsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/19/f561afe4458cbeeb1687a8056b8939206c1cdf.src","preCode":"  public void testDefaultTopNQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    DefaultTopNQueryMetrics queryMetrics = new DefaultTopNQueryMetrics();\n    TopNQuery query = new TopNQueryBuilder()\n        .dataSource(\"xx\")\n        .granularity(Granularities.ALL)\n        .dimension(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .metric(\"count\")\n        .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .aggregators(new CountAggregatorFactory(\"count\"))\n        .threshold(5)\n        .filters(new SelectorDimFilter(\"tags\", \"t3\", null))\n        .build();\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(16, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(\"xx\", actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"true\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"5\", actualEvent.get(\"threshold\"));\n    Assert.assertEquals(\"tags\", actualEvent.get(\"dimension\"));\n    Assert.assertEquals(\"1\", actualEvent.get(\"numMetrics\"));\n    Assert.assertEquals(\"0\", actualEvent.get(\"numComplexMetrics\"));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/topn/DefaultTopNQueryMetricsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2020-12-02 10:34:03","commitOrder":6,"curCode":"  public void testDefaultSearchQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    SearchQuery query = Druids\n        .newSearchQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .granularity(QueryRunnerTestHelper.DAY_GRAN)\n        .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .dimensions(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .context(ImmutableMap.of(\"testKey\", \"testValue\"))\n        .build();\n\n    SearchQueryMetrics queryMetrics = DefaultSearchQueryMetricsFactory.instance().makeMetrics(query);\n\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(13, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(QueryRunnerTestHelper.DATA_SOURCE, actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"false\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n    Assert.assertEquals(ImmutableMap.of(\"testKey\", \"testValue\"), actualEvent.get(\"context\"));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","date":"2020-12-02 10:34:03","endLine":89,"groupId":"106344","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testDefaultSearchQueryMetricsQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ae/666e39022950c21936d19fb845082f3f96aefd.src","preCode":"  public void testDefaultSearchQueryMetricsQuery()\n  {\n    CachingEmitter cachingEmitter = new CachingEmitter();\n    ServiceEmitter serviceEmitter = new ServiceEmitter(\"\", \"\", cachingEmitter);\n    SearchQuery query = Druids\n        .newSearchQueryBuilder()\n        .dataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .granularity(QueryRunnerTestHelper.DAY_GRAN)\n        .intervals(QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC)\n        .dimensions(new ListFilteredDimensionSpec(\n            new DefaultDimensionSpec(\"tags\", \"tags\"),\n            ImmutableSet.of(\"t3\"),\n            null\n        ))\n        .build();\n\n    SearchQueryMetrics queryMetrics = DefaultSearchQueryMetricsFactory.instance().makeMetrics(query);\n\n    queryMetrics.query(query);\n\n    queryMetrics.reportQueryTime(0).emit(serviceEmitter);\n    Map<String, Object> actualEvent = cachingEmitter.getLastEmittedEvent().toMap();\n    Assert.assertEquals(12, actualEvent.size());\n    Assert.assertTrue(actualEvent.containsKey(\"feed\"));\n    Assert.assertTrue(actualEvent.containsKey(\"timestamp\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"host\"));\n    Assert.assertEquals(\"\", actualEvent.get(\"service\"));\n    Assert.assertEquals(QueryRunnerTestHelper.DATA_SOURCE, actualEvent.get(DruidMetrics.DATASOURCE));\n    Assert.assertEquals(query.getType(), actualEvent.get(DruidMetrics.TYPE));\n    List<Interval> expectedIntervals = QueryRunnerTestHelper.FULL_ON_INTERVAL_SPEC.getIntervals();\n    List<String> expectedStringIntervals =\n        expectedIntervals.stream().map(Interval::toString).collect(Collectors.toList());\n    Assert.assertEquals(expectedStringIntervals, actualEvent.get(DruidMetrics.INTERVAL));\n    Assert.assertEquals(\"false\", actualEvent.get(\"hasFilters\"));\n    Assert.assertEquals(expectedIntervals.get(0).toDuration().toString(), actualEvent.get(\"duration\"));\n    Assert.assertEquals(\"\", actualEvent.get(DruidMetrics.ID));\n\n    \r\n    Assert.assertEquals(\"query/time\", actualEvent.get(\"metric\"));\n    Assert.assertEquals(0L, actualEvent.get(\"value\"));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/search/DefaultSearchQueryMetricsTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"2e02eebd9d09d27dd2e8f73b40dc95eec6d56531","commitMessage":"@@@Add context dimension to DefaultQueryMetrics (#10578)\n\n* Add context dimension to DefaultQueryMetrics\n\n* remove redundant addition of context dimension from DruidMetrics now that QueryMetrics adds it by default\n\n* update SearchQueryMetrics to reflect the same pattern as other default dimensions in QueryMetrics\n\n* add PublicApi annotation for context in QueryMetrics Interface","date":"2020-12-02 10:34:03","modifiedFileCount":"9","status":"M","submitter":"Lucas Capistrant"}]
