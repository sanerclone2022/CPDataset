[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testNotEnoughMergeBuffersOnQueryable()\n  {\n    expectedException.expect(QueryInterruptedException.class);\n    expectedException.expectCause(CoreMatchers.instanceOf(TimeoutException.class));\n    expectedException.expectMessage(\"Cannot acquire enough merge buffers\");\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n  }\n","date":"2018-08-31 00:56:26","endLine":216,"groupId":"10583","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotEnoughMergeBuffersOnQueryable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ca/c1ac443c67400ae804c502cc8b2cd262b17550.src","preCode":"  public void testNotEnoughMergeBuffersOnQueryable()\n  {\n    expectedException.expect(QueryInterruptedException.class);\n    expectedException.expectCause(CoreMatchers.instanceOf(TimeoutException.class));\n    expectedException.expectMessage(\"Cannot acquire enough merge buffers\");\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerFailureTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testResourceLimitExceededOnBroker()\n  {\n    expectedException.expect(ResourceLimitExceededException.class);\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n  }\n","date":"2018-08-31 00:56:26","endLine":254,"groupId":"10583","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testResourceLimitExceededOnBroker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ca/c1ac443c67400ae804c502cc8b2cd262b17550.src","preCode":"  public void testResourceLimitExceededOnBroker()\n  {\n    expectedException.expect(ResourceLimitExceededException.class);\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerFailureTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":2,"curCode":"  public void testNotEnoughMergeBuffersOnQueryable()\n  {\n    expectedException.expect(QueryInterruptedException.class);\n    expectedException.expectCause(CoreMatchers.instanceOf(TimeoutException.class));\n    expectedException.expectMessage(\"Cannot acquire enough merge buffers\");\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(FACTORY, runner, query);\n  }\n","date":"2019-08-23 18:13:54","endLine":212,"groupId":"10583","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotEnoughMergeBuffersOnQueryable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/85/85aae4b55a04d0f9ad2b2f7c563b76517d97dd.src","preCode":"  public void testNotEnoughMergeBuffersOnQueryable()\n  {\n    expectedException.expect(QueryInterruptedException.class);\n    expectedException.expectCause(CoreMatchers.instanceOf(TimeoutException.class));\n    expectedException.expectMessage(\"Cannot acquire enough merge buffers\");\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerFailureTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":2,"curCode":"  public void testResourceLimitExceededOnBroker()\n  {\n    expectedException.expect(ResourceLimitExceededException.class);\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(FACTORY, runner, query);\n  }\n","date":"2019-08-23 18:13:54","endLine":250,"groupId":"10583","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testResourceLimitExceededOnBroker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/85/85aae4b55a04d0f9ad2b2f7c563b76517d97dd.src","preCode":"  public void testResourceLimitExceededOnBroker()\n  {\n    expectedException.expect(ResourceLimitExceededException.class);\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(QueryRunnerTestHelper.dataSource)\n                                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.firstToThird)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.rowsCount))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.firstToThird)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(factory, runner, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerFailureTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2020-11-03 23:00:33","commitOrder":3,"curCode":"  public void testNotEnoughMergeBuffersOnQueryable()\n  {\n    expectedException.expect(QueryTimeoutException.class);\n    expectedException.expectMessage(\"Cannot acquire enough merge buffers\");\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(FACTORY, runner, query);\n  }\n","date":"2020-11-03 23:00:33","endLine":206,"groupId":"106656","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotEnoughMergeBuffersOnQueryable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/11/238f1b87825d510db538d6dd05b32e81d4b8ad.src","preCode":"  public void testNotEnoughMergeBuffersOnQueryable()\n  {\n    expectedException.expect(QueryInterruptedException.class);\n    expectedException.expectCause(CoreMatchers.instanceOf(TimeoutException.class));\n    expectedException.expectMessage(\"Cannot acquire enough merge buffers\");\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(FACTORY, runner, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerFailureTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testResourceLimitExceededOnBroker()\n  {\n    expectedException.expect(ResourceLimitExceededException.class);\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(FACTORY, runner, query);\n  }\n","date":"2019-08-23 18:13:54","endLine":250,"groupId":"106656","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testResourceLimitExceededOnBroker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/85/85aae4b55a04d0f9ad2b2f7c563b76517d97dd.src","preCode":"  public void testResourceLimitExceededOnBroker()\n  {\n    expectedException.expect(ResourceLimitExceededException.class);\n\n    final GroupByQuery query = GroupByQuery\n        .builder()\n        .setDataSource(\n            new QueryDataSource(\n                GroupByQuery.builder()\n                            .setDataSource(\n                                GroupByQuery.builder()\n                                            .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n                                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                                            .setGranularity(Granularities.ALL)\n                                            .setDimensions(\n                                                new DefaultDimensionSpec(\"quality\", \"alias\"),\n                                                new DefaultDimensionSpec(\"market\", null)\n                                            )\n                                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                                            .build()\n                            )\n                            .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n                            .setGranularity(Granularities.ALL)\n                            .setDimensions(new DefaultDimensionSpec(\"quality\", \"alias\"))\n                            .setAggregatorSpecs(Collections.singletonList(QueryRunnerTestHelper.ROWS_COUNT))\n                            .build()\n            )\n        )\n        .setGranularity(Granularities.ALL)\n        .setInterval(QueryRunnerTestHelper.FIRST_TO_THIRD)\n        .setAggregatorSpecs(new LongSumAggregatorFactory(\"rows\", \"rows\"))\n        .setContext(ImmutableMap.of(QueryContexts.TIMEOUT_KEY, 500))\n        .build();\n\n    GroupByQueryRunnerTestHelper.runQuery(FACTORY, runner, query);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/GroupByQueryRunnerFailureTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"N"}],"commitId":"6ccddedb7a1752dc130d939066b04da16eb6b1bd","commitMessage":"@@@Improved exception handling in case of query timeouts (#10464)\n\n* Separate timeout exceptions\n\n* Add more tests\n\nCo-authored-by: Atul Mohan <atulmohan@yahoo-inc.com>","date":"2020-11-03 23:00:33","modifiedFileCount":"25","status":"M","submitter":"Atul Mohan"}]
