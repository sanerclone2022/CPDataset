[{"authorTime":"2019-06-20 04:57:37","codes":[{"authorDate":"2019-06-20 04:57:37","commitOrder":1,"curCode":"  public void testMap()\n  {\n    assertExpr(\"map((x) -> concat(x, 'foo'), ['foo', 'bar', 'baz', 'foobar'])\", new String[] {\"foofoo\", \"barfoo\", \"bazfoo\", \"foobarfoo\"});\n    assertExpr(\"map((x) -> concat(x, 'foo'), a)\", new String[] {\"foofoo\", \"barfoo\", \"bazfoo\", \"foobarfoo\"});\n\n    assertExpr(\"map((x) -> x + 1, [1, 2, 3, 4, 5])\", new Long[] {2L, 3L, 4L, 5L, 6L});\n    assertExpr(\"map((x) -> x + 1, b)\", new Long[] {2L, 3L, 4L, 5L, 6L});\n\n    assertExpr(\"map((c) -> c + z, [3.1, 4.2, 5.3])\", new Double[]{6.2, 7.3, 8.4});\n    assertExpr(\"map((c) -> c + z, c)\", new Double[]{6.2, 7.3, 8.4});\n\n    assertExpr(\"map((x) -> x + 1, map((x) -> x + 1, [1, 2, 3, 4, 5]))\", new Long[] {3L, 4L, 5L, 6L, 7L});\n    assertExpr(\"map((x) -> x + 1, map((x) -> x + 1, b))\", new Long[] {3L, 4L, 5L, 6L, 7L});\n    assertExpr(\"map(() -> 1, [1, 2, 3, 4, 5])\", new Long[] {1L, 1L, 1L, 1L, 1L});\n  }\n","date":"2019-06-20 04:57:37","endLine":68,"groupId":"10896","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/c937df6ca3ed03d10bd6ed6f771ce8e2d18df8.src","preCode":"  public void testMap()\n  {\n    assertExpr(\"map((x) -> concat(x, 'foo'), ['foo', 'bar', 'baz', 'foobar'])\", new String[] {\"foofoo\", \"barfoo\", \"bazfoo\", \"foobarfoo\"});\n    assertExpr(\"map((x) -> concat(x, 'foo'), a)\", new String[] {\"foofoo\", \"barfoo\", \"bazfoo\", \"foobarfoo\"});\n\n    assertExpr(\"map((x) -> x + 1, [1, 2, 3, 4, 5])\", new Long[] {2L, 3L, 4L, 5L, 6L});\n    assertExpr(\"map((x) -> x + 1, b)\", new Long[] {2L, 3L, 4L, 5L, 6L});\n\n    assertExpr(\"map((c) -> c + z, [3.1, 4.2, 5.3])\", new Double[]{6.2, 7.3, 8.4});\n    assertExpr(\"map((c) -> c + z, c)\", new Double[]{6.2, 7.3, 8.4});\n\n    assertExpr(\"map((x) -> x + 1, map((x) -> x + 1, [1, 2, 3, 4, 5]))\", new Long[] {3L, 4L, 5L, 6L, 7L});\n    assertExpr(\"map((x) -> x + 1, map((x) -> x + 1, b))\", new Long[] {3L, 4L, 5L, 6L, 7L});\n    assertExpr(\"map(() -> 1, [1, 2, 3, 4, 5])\", new Long[] {1L, 1L, 1L, 1L, 1L});\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/ApplyFunctionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2019-06-20 04:57:37","commitOrder":1,"curCode":"  public void testArrayCast()\n  {\n    assertExpr(\"cast([1, 2, 3], 'STRING_ARRAY')\", new String[]{\"1\", \"2\", \"3\"});\n    assertExpr(\"cast([1, 2, 3], 'DOUBLE_ARRAY')\", new Double[]{1.0, 2.0, 3.0});\n    assertExpr(\"cast(c, 'LONG_ARRAY')\", new Long[]{3L, 4L, 5L});\n    assertExpr(\"cast(string_to_array(array_to_string(b, ','), ','), 'LONG_ARRAY')\", new Long[]{1L, 2L, 3L, 4L, 5L});\n    assertExpr(\"cast(['1.0', '2.0', '3.0'], 'LONG_ARRAY')\", new Long[]{1L, 2L, 3L});\n  }\n","date":"2019-06-20 04:57:37","endLine":261,"groupId":"10896","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testArrayCast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ec/0884cefcf49cb1b1108ea143c6262ff80fbcbc.src","preCode":"  public void testArrayCast()\n  {\n    assertExpr(\"cast([1, 2, 3], 'STRING_ARRAY')\", new String[]{\"1\", \"2\", \"3\"});\n    assertExpr(\"cast([1, 2, 3], 'DOUBLE_ARRAY')\", new Double[]{1.0, 2.0, 3.0});\n    assertExpr(\"cast(c, 'LONG_ARRAY')\", new Long[]{3L, 4L, 5L});\n    assertExpr(\"cast(string_to_array(array_to_string(b, ','), ','), 'LONG_ARRAY')\", new Long[]{1L, 2L, 3L, 4L, 5L});\n    assertExpr(\"cast(['1.0', '2.0', '3.0'], 'LONG_ARRAY')\", new Long[]{1L, 2L, 3L});\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/FunctionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"B"}],"commitId":"494b8ebe56308fe69c2a758f80f1ae56bf17d54d","commitMessage":"@@@multi-value string column support for expressions (#7588)\n\n* array support for expression language for multi-value string columns\n\n* fix tests?\n\n* fixes\n\n* more tests\n\n* fixes\n\n* cleanup\n\n* more better.  more test\n\n* ignore inspection\n\n* license\n\n* license fix\n\n* inspection\n\n* remove dumb import\n\n* more better\n\n* some comments\n\n* add expr rewrite for arrayfn args for more magic.  tests\n\n* test stuff\n\n* more tests\n\n* fix test\n\n* fix test\n\n* castfunc can deal with arrays\n\n* needs more empty array\n\n* more tests.  make cast to long array more forgiving\n\n* refactor\n\n* simplify ExprMacro Expr implementations with base classes in core\n\n* oops\n\n* more test\n\n* use Shuttle for Parser.flatten.  javadoc.  cleanup\n\n* fixes and more tests\n\n* unused import\n\n* fixes\n\n* javadocs.  cleanup.  refactors\n\n* fix imports\n\n* more javadoc\n\n* more javadoc\n\n* more\n\n* more javadocs.  nonnullbydefault.  minor refactor\n\n* markdown fix\n\n* adjustments\n\n* more doc\n\n* move initial filter out\n\n* docs\n\n* map empty arg lambda.  apply function argument validation\n\n* check function args at parse time instead of eval time\n\n* more immutable\n\n* more more immutable\n\n* clarify grammar\n\n* fix docs\n\n* empty array is string test.  we need a way to make arrays better maybe in the future.  or define empty arrays as other types..\n","date":"2019-06-20 04:57:37","modifiedFileCount":"43","status":"B","submitter":"Clint Wylie"},{"authorTime":"2020-03-13 06:10:11","codes":[{"authorDate":"2019-06-20 04:57:37","commitOrder":2,"curCode":"  public void testMap()\n  {\n    assertExpr(\"map((x) -> concat(x, 'foo'), ['foo', 'bar', 'baz', 'foobar'])\", new String[] {\"foofoo\", \"barfoo\", \"bazfoo\", \"foobarfoo\"});\n    assertExpr(\"map((x) -> concat(x, 'foo'), a)\", new String[] {\"foofoo\", \"barfoo\", \"bazfoo\", \"foobarfoo\"});\n\n    assertExpr(\"map((x) -> x + 1, [1, 2, 3, 4, 5])\", new Long[] {2L, 3L, 4L, 5L, 6L});\n    assertExpr(\"map((x) -> x + 1, b)\", new Long[] {2L, 3L, 4L, 5L, 6L});\n\n    assertExpr(\"map((c) -> c + z, [3.1, 4.2, 5.3])\", new Double[]{6.2, 7.3, 8.4});\n    assertExpr(\"map((c) -> c + z, c)\", new Double[]{6.2, 7.3, 8.4});\n\n    assertExpr(\"map((x) -> x + 1, map((x) -> x + 1, [1, 2, 3, 4, 5]))\", new Long[] {3L, 4L, 5L, 6L, 7L});\n    assertExpr(\"map((x) -> x + 1, map((x) -> x + 1, b))\", new Long[] {3L, 4L, 5L, 6L, 7L});\n    assertExpr(\"map(() -> 1, [1, 2, 3, 4, 5])\", new Long[] {1L, 1L, 1L, 1L, 1L});\n  }\n","date":"2019-06-20 04:57:37","endLine":68,"groupId":"104945","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/c937df6ca3ed03d10bd6ed6f771ce8e2d18df8.src","preCode":"  public void testMap()\n  {\n    assertExpr(\"map((x) -> concat(x, 'foo'), ['foo', 'bar', 'baz', 'foobar'])\", new String[] {\"foofoo\", \"barfoo\", \"bazfoo\", \"foobarfoo\"});\n    assertExpr(\"map((x) -> concat(x, 'foo'), a)\", new String[] {\"foofoo\", \"barfoo\", \"bazfoo\", \"foobarfoo\"});\n\n    assertExpr(\"map((x) -> x + 1, [1, 2, 3, 4, 5])\", new Long[] {2L, 3L, 4L, 5L, 6L});\n    assertExpr(\"map((x) -> x + 1, b)\", new Long[] {2L, 3L, 4L, 5L, 6L});\n\n    assertExpr(\"map((c) -> c + z, [3.1, 4.2, 5.3])\", new Double[]{6.2, 7.3, 8.4});\n    assertExpr(\"map((c) -> c + z, c)\", new Double[]{6.2, 7.3, 8.4});\n\n    assertExpr(\"map((x) -> x + 1, map((x) -> x + 1, [1, 2, 3, 4, 5]))\", new Long[] {3L, 4L, 5L, 6L, 7L});\n    assertExpr(\"map((x) -> x + 1, map((x) -> x + 1, b))\", new Long[] {3L, 4L, 5L, 6L, 7L});\n    assertExpr(\"map(() -> 1, [1, 2, 3, 4, 5])\", new Long[] {1L, 1L, 1L, 1L, 1L});\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/ApplyFunctionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"},{"authorDate":"2020-03-13 06:10:11","commitOrder":2,"curCode":"  public void testArrayCast()\n  {\n    assertArrayExpr(\"cast([1, 2, 3], 'STRING_ARRAY')\", new String[]{\"1\", \"2\", \"3\"});\n    assertArrayExpr(\"cast([1, 2, 3], 'DOUBLE_ARRAY')\", new Double[]{1.0, 2.0, 3.0});\n    assertArrayExpr(\"cast(c, 'LONG_ARRAY')\", new Long[]{3L, 4L, 5L});\n    assertArrayExpr(\"cast(string_to_array(array_to_string(b, ','), ','), 'LONG_ARRAY')\", new Long[]{1L, 2L, 3L, 4L, 5L});\n    assertArrayExpr(\"cast(['1.0', '2.0', '3.0'], 'LONG_ARRAY')\", new Long[]{1L, 2L, 3L});\n  }\n","date":"2020-03-13 06:10:11","endLine":273,"groupId":"104945","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testArrayCast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/92/39e778390baad88a5feeafd54dea862fa4bbe9.src","preCode":"  public void testArrayCast()\n  {\n    assertExpr(\"cast([1, 2, 3], 'STRING_ARRAY')\", new String[]{\"1\", \"2\", \"3\"});\n    assertExpr(\"cast([1, 2, 3], 'DOUBLE_ARRAY')\", new Double[]{1.0, 2.0, 3.0});\n    assertExpr(\"cast(c, 'LONG_ARRAY')\", new Long[]{3L, 4L, 5L});\n    assertExpr(\"cast(string_to_array(array_to_string(b, ','), ','), 'LONG_ARRAY')\", new Long[]{1L, 2L, 3L, 4L, 5L});\n    assertExpr(\"cast(['1.0', '2.0', '3.0'], 'LONG_ARRAY')\", new Long[]{1L, 2L, 3L});\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/FunctionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"}],"commitId":"6b02991464839188ae815242adeef5b43da16341","commitMessage":"@@@Match GREATEST/LEAST function behavior to other DBs (#9488)\n\n* Match GREATEST/LEAST function behavior\n\nChange the behavior of the GREATEST / LEAST functions to be similar to\nhow it is implemented in other databases (as functions instead of\naggregators). The GREATEST/LEAST functions are not in the SQL standard. \nbut users will expect behavior similar to what other databases provide.\n\n* Match postgres behavior & handle more SQL types\n\n* Fix imports","date":"2020-03-13 06:10:11","modifiedFileCount":"5","status":"M","submitter":"Chi Cao Minh"}]
