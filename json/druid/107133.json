[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSearchWithSplit3()\n  {\n    BitmapFactory bf = new ConciseBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    tree.insert(new float[]{0.0f, 0.0f}, 0);\n    tree.insert(new float[]{1.0f, 3.0f}, 1);\n    tree.insert(new float[]{4.0f, 2.0f}, 2);\n    tree.insert(new float[]{7.0f, 3.0f}, 3);\n    tree.insert(new float[]{8.0f, 6.0f}, 4);\n\n    Random rand = new Random();\n    for (int i = 5; i < 5000; i++) {\n      tree.insert(\n          new float[]{(float) (rand.nextFloat() * 10 + 10.0), (float) (rand.nextFloat() * 10 + 10.0)},\n          i\n      );\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(\n        new RadiusBound(new float[]{0.0f, 0.0f}, 5)\n    );\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() >= 3);\n\n    Set<Integer> expected = Sets.newHashSet(0, 1, 2);\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":330,"groupId":"200","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearchWithSplit3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1d/12d379ab20a8f8a648329ef40a6366b6b54810.src","preCode":"  public void testSearchWithSplit3()\n  {\n    BitmapFactory bf = new ConciseBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    tree.insert(new float[]{0.0f, 0.0f}, 0);\n    tree.insert(new float[]{1.0f, 3.0f}, 1);\n    tree.insert(new float[]{4.0f, 2.0f}, 2);\n    tree.insert(new float[]{7.0f, 3.0f}, 3);\n    tree.insert(new float[]{8.0f, 6.0f}, 4);\n\n    Random rand = new Random();\n    for (int i = 5; i < 5000; i++) {\n      tree.insert(\n          new float[]{(float) (rand.nextFloat() * 10 + 10.0), (float) (rand.nextFloat() * 10 + 10.0)},\n          i\n      );\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(\n        new RadiusBound(new float[]{0.0f, 0.0f}, 5)\n    );\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() >= 3);\n\n    Set<Integer> expected = Sets.newHashSet(0, 1, 2);\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/collections/spatial/ImmutableRTreeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSearchWithSplit3Roaring()\n  {\n    BitmapFactory bf = new RoaringBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    tree.insert(new float[]{0.0f, 0.0f}, 0);\n    tree.insert(new float[]{1.0f, 3.0f}, 1);\n    tree.insert(new float[]{4.0f, 2.0f}, 2);\n    tree.insert(new float[]{7.0f, 3.0f}, 3);\n    tree.insert(new float[]{8.0f, 6.0f}, 4);\n\n    Random rand = new Random();\n    for (int i = 5; i < 5000; i++) {\n      tree.insert(\n          new float[]{(float) (rand.nextFloat() * 10 + 10.0), (float) (rand.nextFloat() * 10 + 10.0)},\n          i\n      );\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(\n        new RadiusBound(new float[]{0.0f, 0.0f}, 5)\n    );\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() >= 3);\n\n    Set<Integer> expected = Sets.newHashSet(0, 1, 2);\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":363,"groupId":"200","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSearchWithSplit3Roaring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1d/12d379ab20a8f8a648329ef40a6366b6b54810.src","preCode":"  public void testSearchWithSplit3Roaring()\n  {\n    BitmapFactory bf = new RoaringBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    tree.insert(new float[]{0.0f, 0.0f}, 0);\n    tree.insert(new float[]{1.0f, 3.0f}, 1);\n    tree.insert(new float[]{4.0f, 2.0f}, 2);\n    tree.insert(new float[]{7.0f, 3.0f}, 3);\n    tree.insert(new float[]{8.0f, 6.0f}, 4);\n\n    Random rand = new Random();\n    for (int i = 5; i < 5000; i++) {\n      tree.insert(\n          new float[]{(float) (rand.nextFloat() * 10 + 10.0), (float) (rand.nextFloat() * 10 + 10.0)},\n          i\n      );\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(\n        new RadiusBound(new float[]{0.0f, 0.0f}, 5)\n    );\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() >= 3);\n\n    Set<Integer> expected = Sets.newHashSet(0, 1, 2);\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/collections/spatial/ImmutableRTreeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-09-15 04:35:51","codes":[{"authorDate":"2018-09-15 04:35:51","commitOrder":2,"curCode":"  public void testSearchWithSplit3()\n  {\n    BitmapFactory bf = new ConciseBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    tree.insert(new float[]{0.0f, 0.0f}, 0);\n    tree.insert(new float[]{1.0f, 3.0f}, 1);\n    tree.insert(new float[]{4.0f, 2.0f}, 2);\n    tree.insert(new float[]{7.0f, 3.0f}, 3);\n    tree.insert(new float[]{8.0f, 6.0f}, 4);\n\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 5; i < 5000; i++) {\n      tree.insert(\n          new float[]{(float) (rand.nextFloat() * 10 + 10.0), (float) (rand.nextFloat() * 10 + 10.0)},\n          i\n      );\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(\n        new RadiusBound(new float[]{0.0f, 0.0f}, 5)\n    );\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() >= 3);\n\n    Set<Integer> expected = Sets.newHashSet(0, 1, 2);\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","date":"2018-09-15 04:35:51","endLine":331,"groupId":"107133","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSearchWithSplit3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2c/c5099efe6d59157673a3c75d4ed53dfce68f49.src","preCode":"  public void testSearchWithSplit3()\n  {\n    BitmapFactory bf = new ConciseBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    tree.insert(new float[]{0.0f, 0.0f}, 0);\n    tree.insert(new float[]{1.0f, 3.0f}, 1);\n    tree.insert(new float[]{4.0f, 2.0f}, 2);\n    tree.insert(new float[]{7.0f, 3.0f}, 3);\n    tree.insert(new float[]{8.0f, 6.0f}, 4);\n\n    Random rand = new Random();\n    for (int i = 5; i < 5000; i++) {\n      tree.insert(\n          new float[]{(float) (rand.nextFloat() * 10 + 10.0), (float) (rand.nextFloat() * 10 + 10.0)},\n          i\n      );\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(\n        new RadiusBound(new float[]{0.0f, 0.0f}, 5)\n    );\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() >= 3);\n\n    Set<Integer> expected = Sets.newHashSet(0, 1, 2);\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/collections/spatial/ImmutableRTreeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"},{"authorDate":"2018-09-15 04:35:51","commitOrder":2,"curCode":"  public void testSearchWithSplit3Roaring()\n  {\n    BitmapFactory bf = new RoaringBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    tree.insert(new float[]{0.0f, 0.0f}, 0);\n    tree.insert(new float[]{1.0f, 3.0f}, 1);\n    tree.insert(new float[]{4.0f, 2.0f}, 2);\n    tree.insert(new float[]{7.0f, 3.0f}, 3);\n    tree.insert(new float[]{8.0f, 6.0f}, 4);\n\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 5; i < 5000; i++) {\n      tree.insert(\n          new float[]{(float) (rand.nextFloat() * 10 + 10.0), (float) (rand.nextFloat() * 10 + 10.0)},\n          i\n      );\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(\n        new RadiusBound(new float[]{0.0f, 0.0f}, 5)\n    );\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() >= 3);\n\n    Set<Integer> expected = Sets.newHashSet(0, 1, 2);\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","date":"2018-09-15 04:35:51","endLine":364,"groupId":"107133","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSearchWithSplit3Roaring","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2c/c5099efe6d59157673a3c75d4ed53dfce68f49.src","preCode":"  public void testSearchWithSplit3Roaring()\n  {\n    BitmapFactory bf = new RoaringBitmapFactory();\n    RTree tree = new RTree(2, new LinearGutmanSplitStrategy(0, 50, bf), bf);\n    tree.insert(new float[]{0.0f, 0.0f}, 0);\n    tree.insert(new float[]{1.0f, 3.0f}, 1);\n    tree.insert(new float[]{4.0f, 2.0f}, 2);\n    tree.insert(new float[]{7.0f, 3.0f}, 3);\n    tree.insert(new float[]{8.0f, 6.0f}, 4);\n\n    Random rand = new Random();\n    for (int i = 5; i < 5000; i++) {\n      tree.insert(\n          new float[]{(float) (rand.nextFloat() * 10 + 10.0), (float) (rand.nextFloat() * 10 + 10.0)},\n          i\n      );\n    }\n\n    ImmutableRTree searchTree = ImmutableRTree.newImmutableFromMutable(tree);\n    Iterable<ImmutableBitmap> points = searchTree.search(\n        new RadiusBound(new float[]{0.0f, 0.0f}, 5)\n    );\n    ImmutableBitmap finalSet = bf.union(points);\n    Assert.assertTrue(finalSet.size() >= 3);\n\n    Set<Integer> expected = Sets.newHashSet(0, 1, 2);\n    IntIterator iter = finalSet.iterator();\n    while (iter.hasNext()) {\n      Assert.assertTrue(expected.contains(iter.next()));\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/collections/spatial/ImmutableRTreeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":334,"status":"M"}],"commitId":"0c4bd2b57b19bcbd9a275fad412960aa0a39ca5f","commitMessage":"@@@Prohibit some Random usage patterns (#6226)\n\n* Prohibit Random usage patterns\n\n* Fix FlattenJSONBenchmarkUtil\n","date":"2018-09-15 04:35:51","modifiedFileCount":"44","status":"M","submitter":"Roman Leventov"}]
