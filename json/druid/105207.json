[{"authorTime":"2020-06-30 08:31:37","codes":[{"authorDate":"2020-06-30 08:31:37","commitOrder":1,"curCode":"  public void testSharePartitionSpace()\n  {\n    final NumberedShardSpec shardSpec = new NumberedShardSpec(0, 1);\n    Assert.assertTrue(shardSpec.sharePartitionSpace(NumberedPartialShardSpec.instance()));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new HashBasedNumberedPartialShardSpec(null, 0, 1)));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new SingleDimensionPartialShardSpec(\"dim\", 0, null, null, 1)));\n    Assert.assertFalse(shardSpec.sharePartitionSpace(new NumberedOverwritePartialShardSpec(0, 2, 1)));\n  }\n","date":"2020-06-30 08:31:37","endLine":204,"groupId":"20848","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSharePartitionSpace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8b/8d5da1b2c212d15b0fc75bcb6652e9a09b8ad4.src","preCode":"  public void testSharePartitionSpace()\n  {\n    final NumberedShardSpec shardSpec = new NumberedShardSpec(0, 1);\n    Assert.assertTrue(shardSpec.sharePartitionSpace(NumberedPartialShardSpec.instance()));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new HashBasedNumberedPartialShardSpec(null, 0, 1)));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new SingleDimensionPartialShardSpec(\"dim\", 0, null, null, 1)));\n    Assert.assertFalse(shardSpec.sharePartitionSpace(new NumberedOverwritePartialShardSpec(0, 2, 1)));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/partition/NumberedShardSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"B"},{"authorDate":"2020-06-30 08:31:37","commitOrder":1,"curCode":"  public void testSharePartitionSpace()\n  {\n    final SingleDimensionShardSpec shardSpec = makeSpec(\"start\", \"end\");\n    Assert.assertTrue(shardSpec.sharePartitionSpace(NumberedPartialShardSpec.instance()));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new HashBasedNumberedPartialShardSpec(null, 0, 1)));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new SingleDimensionPartialShardSpec(\"dim\", 0, null, null, 1)));\n    Assert.assertFalse(shardSpec.sharePartitionSpace(new NumberedOverwritePartialShardSpec(0, 2, 1)));\n  }\n","date":"2020-06-30 08:31:37","endLine":151,"groupId":"20848","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSharePartitionSpace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a8/f1aa9d33efe62a132c9afb8116ccf3ddb688e0.src","preCode":"  public void testSharePartitionSpace()\n  {\n    final SingleDimensionShardSpec shardSpec = makeSpec(\"start\", \"end\");\n    Assert.assertTrue(shardSpec.sharePartitionSpace(NumberedPartialShardSpec.instance()));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new HashBasedNumberedPartialShardSpec(null, 0, 1)));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new SingleDimensionPartialShardSpec(\"dim\", 0, null, null, 1)));\n    Assert.assertFalse(shardSpec.sharePartitionSpace(new NumberedOverwritePartialShardSpec(0, 2, 1)));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/partition/SingleDimensionShardSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"}],"commitId":"8ef3598c0555068f4b0a5a86811a157778ece2a1","commitMessage":"@@@Move shardSpec tests to core (#10079)\n\n* Move shardSpec tests to core\n\n* checkstyle\n\n* inject object mapper for testing\n\n* unused import","date":"2020-06-30 08:31:37","modifiedFileCount":"1","status":"B","submitter":"Jihoon Son"},{"authorTime":"2020-09-25 07:32:56","codes":[{"authorDate":"2020-09-25 07:32:56","commitOrder":2,"curCode":"  public void testSharePartitionSpace()\n  {\n    final NumberedShardSpec shardSpec = new NumberedShardSpec(0, 1);\n    Assert.assertTrue(shardSpec.sharePartitionSpace(NumberedPartialShardSpec.instance()));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new HashBasedNumberedPartialShardSpec(null, 0, 1, null)));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new SingleDimensionPartialShardSpec(\"dim\", 0, null, null, 1)));\n    Assert.assertFalse(shardSpec.sharePartitionSpace(new NumberedOverwritePartialShardSpec(0, 2, 1)));\n  }\n","date":"2020-09-25 07:32:56","endLine":204,"groupId":"105207","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testSharePartitionSpace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1c/77a7f8040f0046823d007f268bbec36b8cc9b6.src","preCode":"  public void testSharePartitionSpace()\n  {\n    final NumberedShardSpec shardSpec = new NumberedShardSpec(0, 1);\n    Assert.assertTrue(shardSpec.sharePartitionSpace(NumberedPartialShardSpec.instance()));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new HashBasedNumberedPartialShardSpec(null, 0, 1)));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new SingleDimensionPartialShardSpec(\"dim\", 0, null, null, 1)));\n    Assert.assertFalse(shardSpec.sharePartitionSpace(new NumberedOverwritePartialShardSpec(0, 2, 1)));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/partition/NumberedShardSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"},{"authorDate":"2020-09-25 07:32:56","commitOrder":2,"curCode":"  public void testSharePartitionSpace()\n  {\n    final SingleDimensionShardSpec shardSpec = makeSpec(\"start\", \"end\");\n    Assert.assertTrue(shardSpec.sharePartitionSpace(NumberedPartialShardSpec.instance()));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new HashBasedNumberedPartialShardSpec(null, 0, 1, null)));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new SingleDimensionPartialShardSpec(\"dim\", 0, null, null, 1)));\n    Assert.assertFalse(shardSpec.sharePartitionSpace(new NumberedOverwritePartialShardSpec(0, 2, 1)));\n  }\n","date":"2020-09-25 07:32:56","endLine":151,"groupId":"105207","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testSharePartitionSpace","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a5/79245528cae7ba3bac2072feb72d9f6c8799cb.src","preCode":"  public void testSharePartitionSpace()\n  {\n    final SingleDimensionShardSpec shardSpec = makeSpec(\"start\", \"end\");\n    Assert.assertTrue(shardSpec.sharePartitionSpace(NumberedPartialShardSpec.instance()));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new HashBasedNumberedPartialShardSpec(null, 0, 1)));\n    Assert.assertTrue(shardSpec.sharePartitionSpace(new SingleDimensionPartialShardSpec(\"dim\", 0, null, null, 1)));\n    Assert.assertFalse(shardSpec.sharePartitionSpace(new NumberedOverwritePartialShardSpec(0, 2, 1)));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/partition/SingleDimensionShardSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"0cc9eb4903e7bddb4c1484984bf87c8fab7648df","commitMessage":"@@@Store hash partition function in dataSegment and allow segment pruning only when hash partition function is provided (#10288)\n\n* Store hash partition function in dataSegment and allow segment pruning only when hash partition function is provided\n\n* query context\n\n* fix tests; add more test\n\n* javadoc\n\n* docs and more tests\n\n* remove default and hadoop tests\n\n* consistent name and fix javadoc\n\n* spelling and field name\n\n* default function for partitionsSpec\n\n* other comments\n\n* address comments\n\n* fix tests and spelling\n\n* test\n\n* doc","date":"2020-09-25 07:32:56","modifiedFileCount":"50","status":"M","submitter":"Jihoon Son"}]
