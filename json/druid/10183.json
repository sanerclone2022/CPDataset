[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSingleThread() throws IOException\n  {\n    for (int i = 0; i < NUM_EVENTS; ++i) {\n      setUpRequestExpectations(null, null);\n      final InputStream inputStream = IOUtils.toInputStream(inputRow, StandardCharsets.UTF_8);\n      firehose.addAll(inputStream, req);\n      Assert.assertEquals(i + 1, firehose.getCurrentBufferSize());\n      inputStream.close();\n    }\n\n    EasyMock.verify(req);\n\n    final Iterable<Map.Entry<String, EventReceiverFirehoseMetric>> metrics = register.getMetrics();\n    Assert.assertEquals(1, Iterables.size(metrics));\n\n    final Map.Entry<String, EventReceiverFirehoseMetric> entry = Iterables.getLast(metrics);\n    Assert.assertEquals(SERVICE_NAME, entry.getKey());\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(NUM_EVENTS, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(NUM_EVENTS, firehose.getCurrentBufferSize());\n\n    for (int i = NUM_EVENTS - 1; i >= 0; --i) {\n      Assert.assertTrue(firehose.hasMore());\n      Assert.assertNotNull(firehose.nextRow());\n      Assert.assertEquals(i, firehose.getCurrentBufferSize());\n    }\n\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(0, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(0, firehose.getCurrentBufferSize());\n\n    firehose.close();\n    Assert.assertFalse(firehose.hasMore());\n    Assert.assertEquals(0, Iterables.size(register.getMetrics()));\n\n  }\n","date":"2018-08-31 00:56:26","endLine":139,"groupId":"16870","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleThread","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/62/414e1228e5db5107098b29d139aec5091d21d7.src","preCode":"  public void testSingleThread() throws IOException\n  {\n    for (int i = 0; i < NUM_EVENTS; ++i) {\n      setUpRequestExpectations(null, null);\n      final InputStream inputStream = IOUtils.toInputStream(inputRow, StandardCharsets.UTF_8);\n      firehose.addAll(inputStream, req);\n      Assert.assertEquals(i + 1, firehose.getCurrentBufferSize());\n      inputStream.close();\n    }\n\n    EasyMock.verify(req);\n\n    final Iterable<Map.Entry<String, EventReceiverFirehoseMetric>> metrics = register.getMetrics();\n    Assert.assertEquals(1, Iterables.size(metrics));\n\n    final Map.Entry<String, EventReceiverFirehoseMetric> entry = Iterables.getLast(metrics);\n    Assert.assertEquals(SERVICE_NAME, entry.getKey());\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(NUM_EVENTS, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(NUM_EVENTS, firehose.getCurrentBufferSize());\n\n    for (int i = NUM_EVENTS - 1; i >= 0; --i) {\n      Assert.assertTrue(firehose.hasMore());\n      Assert.assertNotNull(firehose.nextRow());\n      Assert.assertEquals(i, firehose.getCurrentBufferSize());\n    }\n\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(0, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(0, firehose.getCurrentBufferSize());\n\n    firehose.close();\n    Assert.assertFalse(firehose.hasMore());\n    Assert.assertEquals(0, Iterables.size(register.getMetrics()));\n\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/EventReceiverFirehoseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testProducerSequence() throws IOException\n  {\n    for (int i = 0; i < NUM_EVENTS; ++i) {\n      setUpRequestExpectations(\"producer\", String.valueOf(i));\n\n      final InputStream inputStream = IOUtils.toInputStream(inputRow, StandardCharsets.UTF_8);\n      firehose.addAll(inputStream, req);\n      Assert.assertEquals(i + 1, firehose.getCurrentBufferSize());\n      inputStream.close();\n    }\n\n    EasyMock.verify(req);\n\n    final Iterable<Map.Entry<String, EventReceiverFirehoseMetric>> metrics = register.getMetrics();\n    Assert.assertEquals(1, Iterables.size(metrics));\n\n    final Map.Entry<String, EventReceiverFirehoseMetric> entry = Iterables.getLast(metrics);\n    Assert.assertEquals(SERVICE_NAME, entry.getKey());\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(NUM_EVENTS, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(NUM_EVENTS, firehose.getCurrentBufferSize());\n\n    for (int i = NUM_EVENTS - 1; i >= 0; --i) {\n      Assert.assertTrue(firehose.hasMore());\n      Assert.assertNotNull(firehose.nextRow());\n      Assert.assertEquals(i, firehose.getCurrentBufferSize());\n    }\n\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(0, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(0, firehose.getCurrentBufferSize());\n\n    firehose.close();\n    Assert.assertFalse(firehose.hasMore());\n    Assert.assertEquals(0, Iterables.size(register.getMetrics()));\n\n  }\n","date":"2018-08-31 00:56:26","endLine":323,"groupId":"16870","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProducerSequence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/62/414e1228e5db5107098b29d139aec5091d21d7.src","preCode":"  public void testProducerSequence() throws IOException\n  {\n    for (int i = 0; i < NUM_EVENTS; ++i) {\n      setUpRequestExpectations(\"producer\", String.valueOf(i));\n\n      final InputStream inputStream = IOUtils.toInputStream(inputRow, StandardCharsets.UTF_8);\n      firehose.addAll(inputStream, req);\n      Assert.assertEquals(i + 1, firehose.getCurrentBufferSize());\n      inputStream.close();\n    }\n\n    EasyMock.verify(req);\n\n    final Iterable<Map.Entry<String, EventReceiverFirehoseMetric>> metrics = register.getMetrics();\n    Assert.assertEquals(1, Iterables.size(metrics));\n\n    final Map.Entry<String, EventReceiverFirehoseMetric> entry = Iterables.getLast(metrics);\n    Assert.assertEquals(SERVICE_NAME, entry.getKey());\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(NUM_EVENTS, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(NUM_EVENTS, firehose.getCurrentBufferSize());\n\n    for (int i = NUM_EVENTS - 1; i >= 0; --i) {\n      Assert.assertTrue(firehose.hasMore());\n      Assert.assertNotNull(firehose.nextRow());\n      Assert.assertEquals(i, firehose.getCurrentBufferSize());\n    }\n\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(0, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(0, firehose.getCurrentBufferSize());\n\n    firehose.close();\n    Assert.assertFalse(firehose.hasMore());\n    Assert.assertEquals(0, Iterables.size(register.getMetrics()));\n\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/EventReceiverFirehoseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2019-03-05 05:50:03","commitOrder":2,"curCode":"  public void testSingleThread() throws IOException, InterruptedException\n  {\n    for (int i = 0; i < NUM_EVENTS; ++i) {\n      setUpRequestExpectations(null, null);\n      final InputStream inputStream = IOUtils.toInputStream(inputRow, StandardCharsets.UTF_8);\n      firehose.addAll(inputStream, req);\n      Assert.assertEquals(i + 1, firehose.getCurrentBufferSize());\n      inputStream.close();\n    }\n\n    EasyMock.verify(req);\n\n    final Iterable<Map.Entry<String, EventReceiverFirehoseMetric>> metrics = register.getMetrics();\n    Assert.assertEquals(1, Iterables.size(metrics));\n\n    final Map.Entry<String, EventReceiverFirehoseMetric> entry = Iterables.getLast(metrics);\n    Assert.assertEquals(SERVICE_NAME, entry.getKey());\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(NUM_EVENTS, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(NUM_EVENTS, firehose.getCurrentBufferSize());\n\n    for (int i = NUM_EVENTS - 1; i >= 0; --i) {\n      Assert.assertTrue(firehose.hasMore());\n      Assert.assertNotNull(firehose.nextRow());\n      Assert.assertEquals(i, firehose.getCurrentBufferSize());\n    }\n\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(0, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(0, firehose.getCurrentBufferSize());\n\n    firehose.close();\n    Assert.assertFalse(firehose.hasMore());\n    Assert.assertEquals(0, Iterables.size(register.getMetrics()));\n\n    awaitDelayedExecutorThreadTerminated();\n  }\n","date":"2019-03-05 05:50:03","endLine":142,"groupId":"10183","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleThread","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e9/c7ee3a0c27e83d7f9888caec4875300a5f6608.src","preCode":"  public void testSingleThread() throws IOException\n  {\n    for (int i = 0; i < NUM_EVENTS; ++i) {\n      setUpRequestExpectations(null, null);\n      final InputStream inputStream = IOUtils.toInputStream(inputRow, StandardCharsets.UTF_8);\n      firehose.addAll(inputStream, req);\n      Assert.assertEquals(i + 1, firehose.getCurrentBufferSize());\n      inputStream.close();\n    }\n\n    EasyMock.verify(req);\n\n    final Iterable<Map.Entry<String, EventReceiverFirehoseMetric>> metrics = register.getMetrics();\n    Assert.assertEquals(1, Iterables.size(metrics));\n\n    final Map.Entry<String, EventReceiverFirehoseMetric> entry = Iterables.getLast(metrics);\n    Assert.assertEquals(SERVICE_NAME, entry.getKey());\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(NUM_EVENTS, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(NUM_EVENTS, firehose.getCurrentBufferSize());\n\n    for (int i = NUM_EVENTS - 1; i >= 0; --i) {\n      Assert.assertTrue(firehose.hasMore());\n      Assert.assertNotNull(firehose.nextRow());\n      Assert.assertEquals(i, firehose.getCurrentBufferSize());\n    }\n\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(0, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(0, firehose.getCurrentBufferSize());\n\n    firehose.close();\n    Assert.assertFalse(firehose.hasMore());\n    Assert.assertEquals(0, Iterables.size(register.getMetrics()));\n\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/EventReceiverFirehoseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testProducerSequence() throws IOException\n  {\n    for (int i = 0; i < NUM_EVENTS; ++i) {\n      setUpRequestExpectations(\"producer\", String.valueOf(i));\n\n      final InputStream inputStream = IOUtils.toInputStream(inputRow, StandardCharsets.UTF_8);\n      firehose.addAll(inputStream, req);\n      Assert.assertEquals(i + 1, firehose.getCurrentBufferSize());\n      inputStream.close();\n    }\n\n    EasyMock.verify(req);\n\n    final Iterable<Map.Entry<String, EventReceiverFirehoseMetric>> metrics = register.getMetrics();\n    Assert.assertEquals(1, Iterables.size(metrics));\n\n    final Map.Entry<String, EventReceiverFirehoseMetric> entry = Iterables.getLast(metrics);\n    Assert.assertEquals(SERVICE_NAME, entry.getKey());\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(NUM_EVENTS, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(NUM_EVENTS, firehose.getCurrentBufferSize());\n\n    for (int i = NUM_EVENTS - 1; i >= 0; --i) {\n      Assert.assertTrue(firehose.hasMore());\n      Assert.assertNotNull(firehose.nextRow());\n      Assert.assertEquals(i, firehose.getCurrentBufferSize());\n    }\n\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(0, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(0, firehose.getCurrentBufferSize());\n\n    firehose.close();\n    Assert.assertFalse(firehose.hasMore());\n    Assert.assertEquals(0, Iterables.size(register.getMetrics()));\n\n  }\n","date":"2018-08-31 00:56:26","endLine":323,"groupId":"10183","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProducerSequence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/62/414e1228e5db5107098b29d139aec5091d21d7.src","preCode":"  public void testProducerSequence() throws IOException\n  {\n    for (int i = 0; i < NUM_EVENTS; ++i) {\n      setUpRequestExpectations(\"producer\", String.valueOf(i));\n\n      final InputStream inputStream = IOUtils.toInputStream(inputRow, StandardCharsets.UTF_8);\n      firehose.addAll(inputStream, req);\n      Assert.assertEquals(i + 1, firehose.getCurrentBufferSize());\n      inputStream.close();\n    }\n\n    EasyMock.verify(req);\n\n    final Iterable<Map.Entry<String, EventReceiverFirehoseMetric>> metrics = register.getMetrics();\n    Assert.assertEquals(1, Iterables.size(metrics));\n\n    final Map.Entry<String, EventReceiverFirehoseMetric> entry = Iterables.getLast(metrics);\n    Assert.assertEquals(SERVICE_NAME, entry.getKey());\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(NUM_EVENTS, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(NUM_EVENTS, firehose.getCurrentBufferSize());\n\n    for (int i = NUM_EVENTS - 1; i >= 0; --i) {\n      Assert.assertTrue(firehose.hasMore());\n      Assert.assertNotNull(firehose.nextRow());\n      Assert.assertEquals(i, firehose.getCurrentBufferSize());\n    }\n\n    Assert.assertEquals(CAPACITY, entry.getValue().getCapacity());\n    Assert.assertEquals(CAPACITY, firehose.getCapacity());\n    Assert.assertEquals(0, entry.getValue().getCurrentBufferSize());\n    Assert.assertEquals(0, firehose.getCurrentBufferSize());\n\n    firehose.close();\n    Assert.assertFalse(firehose.hasMore());\n    Assert.assertEquals(0, Iterables.size(register.getMetrics()));\n\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/EventReceiverFirehoseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"N"}],"commitId":"10c9f6d7086fc2bbccb8673bce55b1e711d131e7","commitMessage":"@@@Fix and document concurrency of EventReceiverFirehose and TimedShutoffFirehose; Refine concurrency specification of Firehose (#7038)\n\n\n# `EventReceiverFirehoseFactory`\nFixed several concurrency bugs in `EventReceiverFirehoseFactory`:\n - Race condition over putting an entry into `producerSequences` in `checkProducerSequence()`.\n - `Stopwatch` used to measure time across threads.  but it's a non-thread-safe class.\n - Use `System.nanoTime()` instead of `System.currentTimeMillis()` because the latter are [not suitable](https://stackoverflow.com/a/351571/648955)  for measuring time intervals.\n - `close()` was not synchronized by could be called from multiple threads concurrently.\n\nRemoved unnecessary `readLock` (protecting `hasMore()` and `nextRow()` which are always called from a single thread). Removed unnecessary `volatile` modifiers.\n\nDocumented threading model and concurrent control flow of `EventReceiverFirehose` instances.\n\n**Important:** please read the updated Javadoc for `EventReceiverFirehose.addAll()`. It allows events from different requests (batches) to be interleaved in the buffer. Is this OK?\n\n\n# `TimedShutoffFirehoseFactory`\n- Fixed a race condition that was possible because `close()` that was not properly synchronized.\n\nDocumented threading model and concurrent control flow of `TimedShutoffFirehose` instances.\n\n\n# `Firehose`\n\nRefined concurrency contract of `Firehose` based on `EventReceiverFirehose` implementation. Importantly.  now it states that `close()` doesn't affect `hasMore()` and `nextRow()` and could be called concurrently with them. In other words.  specified that `close()` is for \"row supply\" side rather than \"row consume\" side. However.  I didn't check that other `Firehose` implementatations adhere to this contract.\n\n<hr>\n\nThis issue is the result of reviewing `EventReceiverFirehose` and `TimedShutoffFirehose` using [this checklist](https://medium.com/@leventov/code-review-checklist-java-concurrency-49398c326154).","date":"2019-03-05 05:50:03","modifiedFileCount":"7","status":"M","submitter":"Roman Leventov"}]
