[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void setUp() throws Exception\n  {\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":231,"groupId":"15256","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0e/52e668e57497f5ff3050efea812388548a1386.src","preCode":"  public void setUp() throws Exception\n  {\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":217,"groupId":"14866","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bf/e308cbd609a2f9d8661dce9117ededf65fa4a7.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-16 05:19:40","codes":[{"authorDate":"2018-10-16 05:19:40","commitOrder":2,"curCode":"  public void setUp() throws Exception\n  {\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2018-10-16 05:19:40","endLine":240,"groupId":"15256","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/81/f73bea5e34d063b788713a44b9ff17b164e449.src","preCode":"  public void setUp() throws Exception\n  {\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2018-10-16 05:19:40","commitOrder":2,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2018-10-16 05:19:40","endLine":217,"groupId":"2699","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0a/871daaaed1daa44b80795a31365d9966f969f1.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"85a89e27033b046c58346bbcedc8db37aa59dbf9","commitMessage":"@@@make druid node bind address configurable (#6464)\n\n* make druid node bind address configurable\n\n* fix tests\n\n* fix travis-ci\n","date":"2018-10-16 05:19:40","modifiedFileCount":"38","status":"M","submitter":"QiuMM"},{"authorTime":"2019-03-20 05:22:56","codes":[{"authorDate":"2018-10-16 05:19:40","commitOrder":3,"curCode":"  public void setUp() throws Exception\n  {\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2018-10-16 05:19:40","endLine":240,"groupId":"15256","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/81/f73bea5e34d063b788713a44b9ff17b164e449.src","preCode":"  public void setUp() throws Exception\n  {\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"},{"authorDate":"2019-03-20 05:22:56","commitOrder":3,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2019-03-20 05:22:56","endLine":214,"groupId":"2699","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1f/4f7e2844b2bbccae825c77786c2c6ad09529ef.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"dfd27e00c0559e89a77ad8abbae03eeb382c2d09","commitMessage":"@@@Avoid many unnecessary materializations of collections of 'all segments in cluster' cardinality (#7185)\n\n* Avoid many  unnecessary materializations of collections of 'all segments in cluster' cardinality\n\n* Fix DruidCoordinatorTest; Renamed DruidCoordinator.getReplicationStatus() to computeUnderReplicationCountsPerDataSourcePerTier()\n\n* More Javadocs.  typos.  refactor DruidCoordinatorRuntimeParams.createAvailableSegmentsSet()\n\n* Style\n\n* typo\n\n* Disable StaticPseudoFunctionalStyleMethod inspection because of too much false positives\n\n* Fixes\n","date":"2019-03-20 05:22:56","modifiedFileCount":"45","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-05-03 21:58:42","codes":[{"authorDate":"2019-05-03 21:58:42","commitOrder":4,"curCode":"  public void setUp() throws Exception\n  {\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\"),\n        Duration.millis(10)\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2019-05-03 21:58:42","endLine":245,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3b/2223514f5943aa164f0cccf2e521ca891373b4.src","preCode":"  public void setUp() throws Exception\n  {\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2019-05-03 21:58:42","commitOrder":4,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\"),\n        Duration.millis(10)\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2019-05-03 21:58:42","endLine":215,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/79/3bd287b9501590ee132d13f5fb340026c707ee.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"afbcb9c07f21c12f241f1dc6575589ef14cda836","commitMessage":"@@@Improve parallelism of zookeeper based segment change processing (#7088)\n\n* V1 - improve parallelism of zookeeper based segment change processing\n\n* Create zk nodes in batches. Address code review comments.\nIntroduce various configs.\n\n* Add documentation for the newly added configs\n\n* Fix test failures\n\n* Fix more test failures\n\n* Remove prinstacktrace statements\n\n* Address code review comments\n\n* Use a single queue\n\n* Address code review comments\n\nSince we have a separate load peon for every historical.  just having a single SegmentChangeProcessor\ntask per historical is enough. This commit also gets rid of the associated config druid.coordinator.loadqueuepeon.curator.numCreateThreads\n\n* Resolve merge conflict\n\n* Fix compilation failure\n\n* Remove batching since we already have a dynamic config maxSegmentsInNodeLoadingQueue that provides that control\n\n* Fix NPE in test\n\n* Remove documentation for configs that are no longer needed\n\n* Address code review comments\n\n* Address more code review comments\n\n* Fix checkstyle issue\n\n* Address code review comments\n\n* Code review comments\n\n* Add back monitor node remove executor\n\n* Cleanup code to isolate null checks  and minor refactoring\n\n* Change param name since it conflicts with member variable name\n","date":"2019-05-03 21:58:42","modifiedFileCount":"13","status":"M","submitter":"Samarth Jain"},{"authorTime":"2019-05-30 02:20:45","codes":[{"authorDate":"2019-05-30 02:20:45","commitOrder":5,"curCode":"  public void setUp() throws Exception\n  {\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2019-05-30 02:20:45","endLine":242,"groupId":"5669","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/53/d6d34e7d394f6466d45751993306a6dfef2b4c.src","preCode":"  public void setUp() throws Exception\n  {\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\"),\n        Duration.millis(10)\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2019-05-30 02:20:45","commitOrder":5,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2019-05-30 02:20:45","endLine":212,"groupId":"2699","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/f127504957781742f922d65a4038530964bec6.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        false,\n        false,\n        new Duration(\"PT0s\"),\n        Duration.millis(10)\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"782863ed0f00fe199599b6bafc587afd929e0f14","commitMessage":"@@@Fix some problems reported by PVS-Studio (#7738)\n\n* Fix some problems reported by PVS-Studio\n\n* Address comments\n","date":"2019-05-30 02:20:45","modifiedFileCount":"43","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-06-08 01:15:54","codes":[{"authorDate":"2019-06-08 01:15:54","commitOrder":6,"curCode":"  public void setUp() throws Exception\n  {\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2019-06-08 01:15:54","endLine":245,"groupId":"5669","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a8/faeacc8807cb750de9712743a0a0c8ab745cdd.src","preCode":"  public void setUp() throws Exception\n  {\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2019-06-08 01:15:54","commitOrder":6,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(databaseSegmentManager.getDataSourcesSnapshot()).andReturn(dataSourcesSnapshot).anyTimes();\n    EasyMock.expect(databaseSegmentManager.isStarted()).andReturn(true).anyTimes();\n    EasyMock.replay(databaseSegmentManager);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2019-06-08 01:15:54","endLine":218,"groupId":"2699","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3d/f7fc655bc504d4a105101640edc8ddfee18c8d.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"ea752ef562b5987ff1cb0a03469855097a4bec9e","commitMessage":"@@@Optimize overshadowed segments computation (#7595)\n\n* Move the overshadowed segment computation to SQLMetadataSegmentManager's poll\n\n* rename method in MetadataSegmentManager\n\n* Fix tests\n\n* PR comments\n\n* PR comments\n\n* PR comments\n\n* fix indentation\n\n* fix tests\n\n*  fix test\n\n*  add test for SegmentWithOvershadowedStatus serde format\n\n* PR comments\n\n* PR comments\n\n* fix test\n\n* remove snapshot updates outside poll\n\n* PR comments\n\n* PR comments\n\n* PR comments\n\n*  removed unused import\n","date":"2019-06-08 01:15:54","modifiedFileCount":"17","status":"M","submitter":"Surekha"},{"authorTime":"2019-07-17 22:18:48","codes":[{"authorDate":"2019-07-17 22:18:48","commitOrder":7,"curCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2019-07-17 22:18:48","endLine":249,"groupId":"5669","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/eb/3b25b6899f111cb04563dad3fc8b0bf48fb4a6.src","preCode":"  public void setUp() throws Exception\n  {\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2019-07-17 22:18:48","commitOrder":7,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2019-07-17 22:18:48","endLine":219,"groupId":"2699","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b5/87842d797d99740f0a3db849ccc3cfb5df0340.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    databaseSegmentManager = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(databaseSegmentManager.getDataSourcesSnapshot()).andReturn(dataSourcesSnapshot).anyTimes();\n    EasyMock.expect(databaseSegmentManager.isStarted()).andReturn(true).anyTimes();\n    EasyMock.replay(databaseSegmentManager);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        databaseSegmentManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"ceb969903f06a72d669bb55ab83223bddb5355ee","commitMessage":"@@@Refactor SQLMetadataSegmentManager; Change contract of REST met? (#7653)\n\n* Refactor SQLMetadataSegmentManager; Change contract of REST methods in DataSourcesResource\n\n* Style fixes\n\n* Unused imports\n\n* Fix tests\n\n* Fix style\n\n* Comments\n\n* Comment fix\n\n* Remove unresolvable Javadoc references; address comments\n\n* Add comments to ImmutableDruidDataSource\n\n* Merge with master\n\n* Fix bad web-console merge\n\n* Fixes in api-reference.md\n\n* Rename in DruidCoordinatorRuntimeParams\n\n* Fix compilation\n\n* Residual changes\n","date":"2019-07-17 22:18:48","modifiedFileCount":"77","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-07-17 22:18:48","codes":[{"authorDate":"2019-07-25 01:59:43","commitOrder":8,"curCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2019-07-25 01:59:43","endLine":254,"groupId":"15398","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7e/9659e2060deb2af3be5f467ebe68ffcd2dca0b.src","preCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_src_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_src-%d\"),\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_dest_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon_dest-%d\"),\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2019-07-17 22:18:48","commitOrder":8,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","date":"2019-07-17 22:18:48","endLine":219,"groupId":"2699","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b5/87842d797d99740f0a3db849ccc3cfb5df0340.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"N"}],"commitId":"0695e487e7cd93ba63d2c2355db47bd5ee3111b8","commitMessage":"@@@fix issue with CuratorLoadQueuePeon shutting down executors it does not own (#8140)\n\n* fix issue with CuratorLoadQueuePeon shutting down executors it does not own\n\n* use lifecycled executors\n\n* maybe this\n","date":"2019-07-25 01:59:43","modifiedFileCount":"3","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-10-16 13:57:42","codes":[{"authorDate":"2019-10-16 13:57:42","commitOrder":9,"curCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","date":"2019-10-16 13:57:42","endLine":255,"groupId":"15398","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/36/1355226bdb42e8d4a1ee149851bcb9253370ff.src","preCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2019-10-16 13:57:42","commitOrder":9,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","date":"2019-10-16 13:57:42","endLine":220,"groupId":"2699","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/06/419789b4a25c4e708975b9e03ca0733aa25a7c.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector()\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"4046c86d62192c812cea87188dd17e745fb83b04","commitMessage":"@@@Stateful auto compaction (#8573)\n\n* Stateful auto compaction\n\n* javaodc\n\n* add removed test back\n\n* fix test\n\n* adding indexSpec to compactionState\n\n* fix build\n\n* add lastCompactionState\n\n* address comments\n\n* extract CompactionState\n\n* fix doc\n\n* fix build and test\n\n* Add a task context to store compaction state; add javadoc\n\n* fix it test\n","date":"2019-10-16 13:57:42","modifiedFileCount":"69","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-11-16 11:45:14","codes":[{"authorDate":"2019-11-16 11:45:14","commitOrder":10,"curCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","date":"2019-11-16 11:45:14","endLine":254,"groupId":"15398","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/51/d27463d0c3733cd4d7e98202895d52bb0bb88b.src","preCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2019-11-16 11:45:14","commitOrder":10,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","date":"2019-11-16 11:45:14","endLine":219,"groupId":"15006","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a2/0aea63473b454bcdd513ae2654210b6ea2297f.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        null,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"17d773dca2e10529912d0e645170fe0eb5a13d35","commitMessage":"@@@Web console: replace (and remove) old consoles (#8838)\n\n* first steps\n\n* clean licenses\n\n* fix capabilities\n\n* fix specs\n\n* more tests\n\n* new web console on coordinator and overlord.  remove setup for old consoles.  old configs\n\n* better message\n\n* update licenses\n\n* sync license files\n\n* more button\n\n* fix tslint issue\n\n* jetty-rewrite dependency to add redirects for old console paths\n\n* put dependency in the right place\n\n* fix overlord detection\n\n* fix notices.  dedupe licenses\n\n* make segment timeline work in no SQL mode\n\n* update license\n\n* revert hard coded coordinator mode from testing\n\n* update restricted mode copy\n","date":"2019-11-16 11:45:14","modifiedFileCount":"12","status":"M","submitter":"Vadim Ogievetsky"},{"authorTime":"2020-01-28 03:24:29","codes":[{"authorDate":"2020-01-28 03:24:29","commitOrder":11,"curCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","date":"2020-01-28 03:24:29","endLine":254,"groupId":"15398","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c4/4c0d8d3fb36cab628f1d1f56eacf8899d19a5b.src","preCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2020-01-28 03:24:29","commitOrder":11,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","date":"2020-01-28 03:24:29","endLine":219,"groupId":"15006","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e4/8bf9430211ab44c0259bf97d79826e1680608c.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadata = EasyMock.createNiceMock(MetadataSegmentManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadata,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"b9186f8f9ff2ff52aceda42bc5f24ffd47a7d17e","commitMessage":"@@@Reconcile terminology and method naming to 'used/unused segments'; Rename MetadataSegmentManager to MetadataSegmentsManager (#7306)\n\n* Reconcile terminology and method naming to 'used/unused segments'; Don't use terms 'enable/disable data source'; Rename MetadataSegmentManager to MetadataSegments; Make REST API methods which mark segments as used/unused to return server error instead of an empty response in case of error\n\n* Fix brace\n\n* Import order\n\n* Rename withKillDataSourceWhitelist to withSpecificDataSourcesToKill\n\n* Fix tests\n\n* Fix tests by adding proper methods without interval parameters to IndexerMetadataStorageCoordinator instead of hacking with Intervals.ETERNITY\n\n* More aligned names of DruidCoordinatorHelpers.  rename several CoordinatorDynamicConfig parameters\n\n* Rename ClientCompactTaskQuery to ClientCompactionTaskQuery for consistency with CompactionTask; ClientCompactQueryTuningConfig to ClientCompactionTaskQueryTuningConfig\n\n* More variable and method renames\n\n* Rename MetadataSegments to SegmentsMetadata\n\n* Javadoc update\n\n* Simplify SegmentsMetadata.getUnusedSegmentIntervals().  more javadocs\n\n* Update Javadoc of VersionedIntervalTimeline.iterateAllObjects()\n\n* Reorder imports\n\n* Rename SegmentsMetadata.tryMark... methods to mark... and make them to return boolean and the numbers of segments changed and relay exceptions to callers\n\n* Complete merge\n\n* Add CollectionUtils.newTreeSet(); Refactor DruidCoordinatorRuntimeParams creation in tests\n\n* Remove MetadataSegmentManager\n\n* Rename millisLagSinceCoordinatorBecomesLeaderBeforeCanMarkAsUnusedOvershadowedSegments to leadingTimeMillisBeforeCanMarkAsUnusedOvershadowedSegments\n\n* Fix tests.  refactor DruidCluster creation in tests into DruidClusterBuilder\n\n* Fix inspections\n\n* Fix SQLMetadataSegmentManagerEmptyTest and rename it to SqlSegmentsMetadataEmptyTest\n\n* Rename SegmentsAndMetadata to SegmentsAndCommitMetadata to reduce the similarity with SegmentsMetadata; Rename some methods\n\n* Rename DruidCoordinatorHelper to CoordinatorDuty.  refactor DruidCoordinator\n\n* Unused import\n\n* Optimize imports\n\n* Rename IndexerSQLMetadataStorageCoordinator.getDataSourceMetadata() to retrieveDataSourceMetadata()\n\n* Unused import\n\n* Update terminology in datasource-view.tsx\n\n* Fix label in datasource-view.spec.tsx.snap\n\n* Fix lint errors in datasource-view.tsx\n\n* Doc improvements\n\n* Another attempt to please TSLint\n\n* Another attempt to please TSLint\n\n* Style fixes\n\n* Fix IndexerSQLMetadataStorageCoordinator.createUsedSegmentsSqlQueryForIntervals() (wrong merge)\n\n* Try to fix docs build issue\n\n* Javadoc and spelling fixes\n\n* Rename SegmentsMetadata to SegmentsMetadataManager.  address other comments\n\n* Address more comments\n","date":"2020-01-28 03:24:29","modifiedFileCount":"127","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-06-19 08:52:33","codes":[{"authorDate":"2020-01-28 03:24:29","commitOrder":12,"curCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","date":"2020-01-28 03:24:29","endLine":254,"groupId":"15398","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c4/4c0d8d3fb36cab628f1d1f56eacf8899d19a5b.src","preCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"N"},{"authorDate":"2020-06-19 08:52:33","commitOrder":12,"curCode":"  public void setUp() throws Exception\n  {\n    serverAddedCountExpected = true;\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","date":"2020-06-19 08:52:33","endLine":220,"groupId":"15006","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/00/77fc1123a480b0781f0726a02828a710bdcf72.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"857e5204bf2e71b83da6eecb71105f4947bbd1d6","commitMessage":"@@@Coordinator loadstatus API full format does not consider Broadcast rules (#10048)\n\n* Coordinator loadstatus API full format does not consider Broadcast rules\n\n* address comments\n\n* fix checkstyle\n\n* minor optimization\n\n* address comments","date":"2020-06-19 08:52:33","modifiedFileCount":"2","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-07-09 11:03:52","codes":[{"authorDate":"2020-01-28 03:24:29","commitOrder":13,"curCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","date":"2020-01-28 03:24:29","endLine":254,"groupId":"15398","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c4/4c0d8d3fb36cab628f1d1f56eacf8899d19a5b.src","preCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"N"},{"authorDate":"2020-07-09 11:03:52","commitOrder":13,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","date":"2020-07-09 11:03:52","endLine":218,"groupId":"15006","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/51/308cbd8fa9fe10ec147424822768c7eb75b453.src","preCode":"  public void setUp() throws Exception\n  {\n    serverAddedCountExpected = true;\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"54a8fb827df6ca2d7b0f1e86656d0cd5a978f273","commitMessage":"@@@Fix flaky tests in DruidCoordinatorTest (#10157)\n\n* Fix flaky tests in DruidCoordinatorTest\n\n* Imporve fail msg\n\n* Fix flaky tests in DruidCoordinatorTest","date":"2020-07-09 11:03:52","modifiedFileCount":"1","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-10-27 13:35:59","codes":[{"authorDate":"2020-10-27 13:35:59","commitOrder":14,"curCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        () -> curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","date":"2020-10-27 13:35:59","endLine":256,"groupId":"15398","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/dd/382e31a65f4424c3dfc692c10fbddcfc4a6802.src","preCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2020-10-27 13:35:59","commitOrder":14,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        () -> curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","date":"2020-10-27 13:35:59","endLine":221,"groupId":"15006","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/34/fe944f61e4153a0e6e6f7c137899042eba8197.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"ee136303bb561d02dcfc8e4cd7f7b7af907e4e28","commitMessage":"@@@optionally disable all of hardcoded zookeeper use (#9507)\n\n* optionally disable all of hardcoded zookeeper use\n\n* fix DruidCoordinatorTest compilation\n\n* fix test in DruidCoordinatorTest\n\n* fix strict compilation\n\nCo-authored-by: Himanshu Gupta <fill email>","date":"2020-10-27 13:35:59","modifiedFileCount":"22","status":"M","submitter":"Himanshu"},{"authorTime":"2021-04-21 08:10:43","codes":[{"authorDate":"2021-04-21 08:10:43","commitOrder":15,"curCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        () -> curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","date":"2021-04-21 08:10:43","endLine":260,"groupId":"0","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a8/deb667dd0593142792f87eb0e25006165a317b.src","preCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        () -> curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2021-04-21 08:10:43","commitOrder":15,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        () -> curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new HashSet<>(),\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","date":"2021-04-21 08:10:43","endLine":225,"groupId":"0","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3a/aef647c41893df1406915a60434dbd5019c203.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        () -> curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"6d2b5cdd7e080401bce64d352e3a65788ff110c4","commitMessage":"@@@Add feature to automatically remove audit logs based on retention period (#11084)\n\n* add docs\n\n* add impl\n\n* fix checkstyle\n\n* fix test\n\n* add test\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix test\n\n* Address comments\n\n* Address comments\n\n* fix spelling\n\n* fix docs","date":"2021-04-21 08:10:43","modifiedFileCount":"13","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-05-04 02:50:45","codes":[{"authorDate":"2021-05-04 02:50:45","commitOrder":16,"curCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        () -> curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","date":"2021-05-04 02:50:45","endLine":262,"groupId":"19802","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/40/2c92be203e1eae23ef3071f8e8accba08df235.src","preCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        () -> curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2021-05-04 02:50:45","commitOrder":16,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        () -> curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new HashSet<>(),\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","date":"2021-05-04 02:50:45","endLine":227,"groupId":"8895","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a1/c3d033118d1cc08c2554bf9618d14c51420698.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        () -> curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new HashSet<>(),\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"84aac4832d66d2bf2c9e2903b9772bb5882c5ccf","commitMessage":"@@@Add feature to automatically remove rules based on retention period (#11164)\n\n* Add feature to automatically remove rules based on retention period\n\n* Add feature to automatically remove rules based on retention period\n\n* address comments","date":"2021-05-04 02:50:45","modifiedFileCount":"13","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-05-07 13:25:23","codes":[{"authorDate":"2021-05-07 13:25:23","commitOrder":17,"curCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        () -> curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","date":"2021-05-07 13:25:23","endLine":264,"groupId":"19802","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b8/e3103681efda72dbc98e61ec686f10deb4e846.src","preCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        () -> curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2021-05-07 13:25:23","commitOrder":17,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        () -> curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new HashSet<>(),\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","date":"2021-05-07 13:25:23","endLine":229,"groupId":"8895","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/97/c220d3626ce523e1442f053058e95bbe4ca127.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        () -> curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new HashSet<>(),\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"d73f72e50892fe0b7450d8d4bf5678c3f8270cfe","commitMessage":"@@@Add feature to automatically remove supervisor based on retention period (#11200)\n\n* add auto clean up\n\n* add test\n\n* add test\n\n* fix test\n\n* Address comments\n\n* Address comments","date":"2021-05-07 13:25:23","modifiedFileCount":"14","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-05-11 16:22:33","codes":[{"authorDate":"2021-05-11 16:22:33","commitOrder":18,"curCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        () -> curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","date":"2021-05-11 16:22:33","endLine":266,"groupId":"105","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/ad57e7a8ea6eacfbd3b453c48b1a9ae78365d0.src","preCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        () -> curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2021-05-11 16:22:33","commitOrder":18,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        () -> curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new HashSet<>(),\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","date":"2021-05-11 16:22:33","endLine":231,"groupId":"20935","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2d/88d6ee4f137dc4f3153800dafb20594f627028.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        () -> curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new HashSet<>(),\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"4326e699bd3e146e1899f014e8765c52241f3cd3","commitMessage":"@@@Add feature to automatically remove datasource metadata based on retention period (#11227)\n\n* add auto clean up datasource metadata\n\n* add test\n\n* fix checkstyle\n\n* add comments\n\n* fix error\n\n* address comments\n\n* Address comments\n\n* fix test\n\n* fix test\n\n* fix typo\n\n* add comment\n\n* fix test\n\n* fix test","date":"2021-05-11 16:22:33","modifiedFileCount":"22","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-05-12 09:49:18","codes":[{"authorDate":"2021-05-12 09:49:18","commitOrder":19,"curCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        () -> curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","date":"2021-05-12 09:49:18","endLine":267,"groupId":"105","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a7/214d3567cfa7be0e5588f0d7a2b18acc724034.src","preCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        () -> curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2021-05-12 09:49:18","commitOrder":19,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        () -> curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new HashSet<>(),\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","date":"2021-05-12 09:49:18","endLine":232,"groupId":"20935","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2a/96bf5b5a4a58868075a11f13ff438bea276897.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        () -> curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new HashSet<>(),\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"3455352241f774cfc581de7cf7b328d5cf061e3d","commitMessage":"@@@Add feature to automatically remove compaction configurations for inactive datasources (#11232)\n\n* add auto cleanup\n\n* add auto cleanup\n\n* add auto cleanup\n\n* add tests\n\n* add tests\n\n* use retryutils\n\n* use retryutils\n\n* use retryutils\n\n* address comments","date":"2021-05-12 09:49:18","modifiedFileCount":"14","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-08-19 12:54:11","codes":[{"authorDate":"2021-08-19 12:54:11","commitOrder":20,"curCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        () -> curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        null,\n        new CoordinatorCustomDutyGroups(ImmutableSet.of()),\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","date":"2021-08-19 12:54:11","endLine":269,"groupId":"10386","id":39,"instanceNumber":1,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f8/304085a2d56f254bfe98bf5610c9ebff38c6d8.src","preCode":"  public void setUp() throws Exception\n  {\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference<>(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(SEGPATH);\n    curator.create().creatingParentsIfNeeded().forPath(SOURCE_LOAD_PATH);\n    curator.create().creatingParentsIfNeeded().forPath(DESTINATION_LOAD_PATH);\n\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    sourceLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        SOURCE_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_src-%d\")\n    );\n    destinationLoadQueueChildrenCache = new PathChildrenCache(\n        curator,\n        DESTINATION_LOAD_PATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache_dest-%d\")\n    );\n    sourceLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        SOURCE_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    destinationLoadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        DESTINATION_LOAD_PATH,\n        objectMapper,\n        peonExec,\n        callbackExec,\n        druidCoordinatorConfig\n    );\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = (corePoolSize, nameFormat) -> Executors.newSingleThreadScheduledExecutor();\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        baseView,\n        metadataRuleManager,\n        () -> curator,\n        new NoopServiceEmitter(),\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        null,\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CuratorDruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2021-08-19 12:54:11","commitOrder":20,"curCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        () -> curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new HashSet<>(),\n        new CoordinatorCustomDutyGroups(ImmutableSet.of()),\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","date":"2021-08-19 12:54:11","endLine":236,"groupId":"10386","id":40,"instanceNumber":2,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0a/2db2cf1cba6b7d4af7188f7b554aa7650346bd.src","preCode":"  public void setUp() throws Exception\n  {\n    druidServer = EasyMock.createMock(DruidServer.class);\n    serverInventoryView = EasyMock.createMock(SingleServerInventoryView.class);\n    segmentsMetadataManager = EasyMock.createNiceMock(SegmentsMetadataManager.class);\n    dataSourcesSnapshot = EasyMock.createNiceMock(DataSourcesSnapshot.class);\n    coordinatorRuntimeParams = EasyMock.createNiceMock(DruidCoordinatorRuntimeParams.class);\n    metadataRuleManager = EasyMock.createNiceMock(MetadataRuleManager.class);\n    JacksonConfigManager configManager = EasyMock.createNiceMock(JacksonConfigManager.class);\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorDynamicConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorDynamicConfig.builder().build())).anyTimes();\n    EasyMock.expect(\n        configManager.watch(\n            EasyMock.eq(CoordinatorCompactionConfig.CONFIG_KEY),\n            EasyMock.anyObject(Class.class),\n            EasyMock.anyObject()\n        )\n    ).andReturn(new AtomicReference(CoordinatorCompactionConfig.empty())).anyTimes();\n    EasyMock.replay(configManager);\n    setupServerAndCurator();\n    curator.start();\n    curator.blockUntilConnected();\n    curator.create().creatingParentsIfNeeded().forPath(LOADPATH);\n    objectMapper = new DefaultObjectMapper();\n    druidCoordinatorConfig = new TestDruidCoordinatorConfig(\n        new Duration(COORDINATOR_START_DELAY),\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        new Duration(COORDINATOR_PERIOD),\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        10,\n        new Duration(\"PT0s\")\n    );\n    pathChildrenCache = new PathChildrenCache(\n        curator,\n        LOADPATH,\n        true,\n        true,\n        Execs.singleThreaded(\"coordinator_test_path_children_cache-%d\")\n    );\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOADPATH,\n        objectMapper,\n        Execs.scheduledSingleThreaded(\"coordinator_test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"coordinator_test_load_queue_peon-%d\"),\n        druidCoordinatorConfig\n    );\n    loadQueuePeon.start();\n    druidNode = new DruidNode(\"hey\", \"what\", false, 1234, null, true, false);\n    loadManagementPeons = new ConcurrentHashMap<>();\n    scheduledExecutorFactory = new ScheduledExecutorFactory()\n    {\n      @Override\n      public ScheduledExecutorService create(int corePoolSize, final String nameFormat)\n      {\n        return Executors.newSingleThreadScheduledExecutor();\n      }\n    };\n    leaderAnnouncerLatch = new CountDownLatch(1);\n    leaderUnannouncerLatch = new CountDownLatch(1);\n    coordinator = new DruidCoordinator(\n        druidCoordinatorConfig,\n        new ZkPathsConfig()\n        {\n\n          @Override\n          public String getBase()\n          {\n            return \"druid\";\n          }\n        },\n        configManager,\n        segmentsMetadataManager,\n        serverInventoryView,\n        metadataRuleManager,\n        () -> curator,\n        serviceEmitter,\n        scheduledExecutorFactory,\n        null,\n        null,\n        new NoopServiceAnnouncer()\n        {\n          @Override\n          public void announce(DruidNode node)\n          {\n            \r\n            leaderAnnouncerLatch.countDown();\n          }\n\n          @Override\n          public void unannounce(DruidNode node)\n          {\n            leaderUnannouncerLatch.countDown();\n          }\n        },\n        druidNode,\n        loadManagementPeons,\n        null,\n        new HashSet<>(),\n        new CostBalancerStrategyFactory(),\n        EasyMock.createNiceMock(LookupCoordinatorManager.class),\n        new TestDruidLeaderSelector(),\n        null,\n        ZkEnablementConfig.ENABLED\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DruidCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"ce4dd48bb8b33110f66737820aec936f536fa75c","commitMessage":"@@@Support custom coordinator duties (#11601)\n\n* impl\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add test\n\n* add test\n\n* add test\n\n* add integration tests\n\n* add integration tests\n\n* add more docs\n\n* address comments\n\n* address comments\n\n* address comments\n\n* add test\n\n* fix checkstyle\n\n* fix test","date":"2021-08-19 12:54:11","modifiedFileCount":"5","status":"M","submitter":"Maytas Monsereenusorn"}]
