[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testAggregate()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final IntGrouper grouper = newGrouper(columnSelectorFactory, 1024);\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    grouper.aggregate(12);\n    grouper.aggregate(6);\n    grouper.aggregate(10);\n    grouper.aggregate(6);\n    grouper.aggregate(12);\n    grouper.aggregate(6);\n\n    final List<Entry<Integer>> expected = ImmutableList.of(\n        new Grouper.Entry<>(6, new Object[]{30L, 3L}),\n        new Grouper.Entry<>(10, new Object[]{10L, 1L}),\n        new Grouper.Entry<>(12, new Object[]{20L, 2L})\n    );\n    final List<Entry<Integer>> unsortedEntries = Lists.newArrayList(grouper.iterator(false));\n\n    Assert.assertEquals(\n        expected,\n        Ordering.from((Comparator<Entry<Integer>>) (o1, o2) -> Ints.compare(o1.getKey(), o2.getKey()))\n                .sortedCopy(unsortedEntries)\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":69,"groupId":"22996","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8f/2d3f69a57198f616f95466c72d752b20fbf265.src","preCode":"  public void testAggregate()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final IntGrouper grouper = newGrouper(columnSelectorFactory, 1024);\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    grouper.aggregate(12);\n    grouper.aggregate(6);\n    grouper.aggregate(10);\n    grouper.aggregate(6);\n    grouper.aggregate(12);\n    grouper.aggregate(6);\n\n    final List<Entry<Integer>> expected = ImmutableList.of(\n        new Grouper.Entry<>(6, new Object[]{30L, 3L}),\n        new Grouper.Entry<>(10, new Object[]{10L, 1L}),\n        new Grouper.Entry<>(12, new Object[]{20L, 2L})\n    );\n    final List<Entry<Integer>> unsortedEntries = Lists.newArrayList(grouper.iterator(false));\n\n    Assert.assertEquals(\n        expected,\n        Ordering.from((Comparator<Entry<Integer>>) (o1, o2) -> Ints.compare(o1.getKey(), o2.getKey()))\n                .sortedCopy(unsortedEntries)\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/epinephelinae/BufferArrayGrouperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTimeout()\n  {\n    expectedException.expect(RuntimeException.class);\n    expectedException.expectCause(CoreMatchers.instanceOf(TimeoutException.class));\n\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final StreamingMergeSortedGrouper<Integer> grouper = newGrouper(columnSelectorFactory, 100);\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    grouper.aggregate(6);\n\n    grouper.iterator();\n  }\n","date":"2018-08-31 00:56:26","endLine":174,"groupId":"13946","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/15/712510db184c2a54c88a4552e6780d577769cc.src","preCode":"  public void testTimeout()\n  {\n    expectedException.expect(RuntimeException.class);\n    expectedException.expectCause(CoreMatchers.instanceOf(TimeoutException.class));\n\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final StreamingMergeSortedGrouper<Integer> grouper = newGrouper(columnSelectorFactory, 100);\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    grouper.aggregate(6);\n\n    grouper.iterator();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/epinephelinae/StreamingMergeSortedGrouperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2019-07-13 03:54:07","commitOrder":2,"curCode":"  public void testAggregate()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final IntGrouper grouper = newGrouper(columnSelectorFactory, 32768);\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    grouper.aggregate(12);\n    grouper.aggregate(6);\n    grouper.aggregate(10);\n    grouper.aggregate(6);\n    grouper.aggregate(12);\n    grouper.aggregate(6);\n\n    final List<Entry<Integer>> expected = ImmutableList.of(\n        new Grouper.Entry<>(6, new Object[]{30L, 3L}),\n        new Grouper.Entry<>(10, new Object[]{10L, 1L}),\n        new Grouper.Entry<>(12, new Object[]{20L, 2L})\n    );\n    final List<Entry<Integer>> unsortedEntries = Lists.newArrayList(grouper.iterator(false));\n\n    Assert.assertEquals(\n        expected,\n        Ordering.from((Comparator<Entry<Integer>>) (o1, o2) -> Ints.compare(o1.getKey(), o2.getKey()))\n                .sortedCopy(unsortedEntries)\n    );\n  }\n","date":"2019-07-13 03:54:07","endLine":70,"groupId":"22996","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/98/d46fc9d126a625c427e9cd0c952ae9a0e61611.src","preCode":"  public void testAggregate()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final IntGrouper grouper = newGrouper(columnSelectorFactory, 1024);\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    grouper.aggregate(12);\n    grouper.aggregate(6);\n    grouper.aggregate(10);\n    grouper.aggregate(6);\n    grouper.aggregate(12);\n    grouper.aggregate(6);\n\n    final List<Entry<Integer>> expected = ImmutableList.of(\n        new Grouper.Entry<>(6, new Object[]{30L, 3L}),\n        new Grouper.Entry<>(10, new Object[]{10L, 1L}),\n        new Grouper.Entry<>(12, new Object[]{20L, 2L})\n    );\n    final List<Entry<Integer>> unsortedEntries = Lists.newArrayList(grouper.iterator(false));\n\n    Assert.assertEquals(\n        expected,\n        Ordering.from((Comparator<Entry<Integer>>) (o1, o2) -> Ints.compare(o1.getKey(), o2.getKey()))\n                .sortedCopy(unsortedEntries)\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/epinephelinae/BufferArrayGrouperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testTimeout()\n  {\n    expectedException.expect(RuntimeException.class);\n    expectedException.expectCause(CoreMatchers.instanceOf(TimeoutException.class));\n\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final StreamingMergeSortedGrouper<Integer> grouper = newGrouper(columnSelectorFactory, 100);\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    grouper.aggregate(6);\n\n    grouper.iterator();\n  }\n","date":"2018-08-31 00:56:26","endLine":174,"groupId":"13946","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/15/712510db184c2a54c88a4552e6780d577769cc.src","preCode":"  public void testTimeout()\n  {\n    expectedException.expect(RuntimeException.class);\n    expectedException.expectCause(CoreMatchers.instanceOf(TimeoutException.class));\n\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final StreamingMergeSortedGrouper<Integer> grouper = newGrouper(columnSelectorFactory, 100);\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    grouper.aggregate(6);\n\n    grouper.iterator();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/epinephelinae/StreamingMergeSortedGrouperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"N"}],"commitId":"ffa25b78321a56b210a8ad5b6c9ca61b3b737153","commitMessage":"@@@Query vectorization. (#6794)\n\n* Benchmarks: New SqlBenchmark.  add caching & vectorization to some others.\n\n- Introduce a new SqlBenchmark geared towards benchmarking a wide\n  variety of SQL queries. Rename the old SqlBenchmark to\n  SqlVsNativeBenchmark.\n- Add (optional) caching to SegmentGenerator to enable easier\n  benchmarking of larger segments.\n- Add vectorization to FilteredAggregatorBenchmark and GroupByBenchmark.\n\n* Query vectorization.\n\nThis patch includes vectorized timeseries and groupBy engines.  as well\nas some analogs of your favorite Druid classes:\n\n- VectorCursor is like Cursor. (It comes from StorageAdapter.makeVectorCursor.)\n- VectorColumnSelectorFactory is like ColumnSelectorFactory.  and it has\n  methods to create analogs of the column selectors you know and love.\n- VectorOffset and ReadableVectorOffset are like Offset and ReadableOffset.\n- VectorAggregator is like BufferAggregator.\n- VectorValueMatcher is like ValueMatcher.\n\nThere are some noticeable differences between vectorized and regular\nexecution:\n\n- Unlike regular cursors.  vector cursors do not understand time\n  granularity. They expect query engines to handle this on their own. \n  which a new VectorCursorGranularizer class helps with. This is to\n  avoid too much batch-splitting and to respect the fact that vector\n  selectors are somewhat more heavyweight than regular selectors.\n- Unlike FilteredOffset.  FilteredVectorOffset does not leverage indexes\n  for filters that might partially support them (like an OR of one\n  filter that supports indexing and another that doesn't). I'm not sure\n  that this behavior is desirable anyway (it is potentially too eager)\n  but.  at any rate.  it'd be better to harmonize it between the two\n  classes. Potentially they should both do some different thing that\n  is smarter than what either of them is doing right now.\n- When vector cursors are created by QueryableIndexCursorSequenceBuilder. \n  they use a morphing binary-then-linear search to find their start and\n  end rows.  rather than linear search.\n\nLimitations in this patch are:\n\n- Only timeseries and groupBy have vectorized engines.\n- GroupBy doesn't handle multi-value dimensions yet.\n- Vector cursors cannot handle virtual columns or descending order.\n- Only some filters have vectorized matchers: \"selector\".  \"bound\".  \"in\". \n  \"like\".  \"regex\".  \"search\".  \"and\".  \"or\".  and \"not\".\n- Only some aggregators have vectorized implementations: \"count\". \n  \"doubleSum\".  \"floatSum\".  \"longSum\".  \"hyperUnique\".  and \"filtered\".\n- Dimension specs other than \"default\" don't work yet (no extraction\n  functions or filtered dimension specs).\n\nCurrently.  the testing strategy includes adding vectorization-enabled\ntests to TimeseriesQueryRunnerTest.  GroupByQueryRunnerTest. \nGroupByTimeseriesQueryRunnerTest.  CalciteQueryTest.  and all of the\nfiltering tests that extend BaseFilterTest. In all of those classes. \nthere are some test cases that don't support vectorization. They are\nmarked by special function calls like \"cannotVectorize\" or \"skipVectorize\"\nthat tell the test harness to either expect an exception or to skip the\ntest case.\n\nTesting should be expanded in the future -- a project in and of itself.\n\nRelated to #3011.\n\n* WIP\n\n* Adjustments for unused things.\n\n* Adjust javadocs.\n\n* DimensionDictionarySelector adjustments.\n\n* Add \"clone\" to BatchIteratorAdapter.\n\n* ValueMatcher javadocs.\n\n* Fix benchmark.\n\n* Fixups post-merge.\n\n* Expect exception on testGroupByWithStringVirtualColumn for IncrementalIndex.\n\n* BloomDimFilterSqlTest: Tag two non-vectorizable tests.\n\n* Minor adjustments.\n\n* Update surefire.  bump up Xmx in Travis.\n\n* Some more adjustments.\n\n* Javadoc adjustments\n\n* AggregatorAdapters adjustments.\n\n* Additional comments.\n\n* Remove switching search.\n\n* Only missiles.\n","date":"2019-07-13 03:54:07","modifiedFileCount":"143","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-11-03 23:00:33","codes":[{"authorDate":"2019-07-13 03:54:07","commitOrder":3,"curCode":"  public void testAggregate()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final IntGrouper grouper = newGrouper(columnSelectorFactory, 32768);\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    grouper.aggregate(12);\n    grouper.aggregate(6);\n    grouper.aggregate(10);\n    grouper.aggregate(6);\n    grouper.aggregate(12);\n    grouper.aggregate(6);\n\n    final List<Entry<Integer>> expected = ImmutableList.of(\n        new Grouper.Entry<>(6, new Object[]{30L, 3L}),\n        new Grouper.Entry<>(10, new Object[]{10L, 1L}),\n        new Grouper.Entry<>(12, new Object[]{20L, 2L})\n    );\n    final List<Entry<Integer>> unsortedEntries = Lists.newArrayList(grouper.iterator(false));\n\n    Assert.assertEquals(\n        expected,\n        Ordering.from((Comparator<Entry<Integer>>) (o1, o2) -> Ints.compare(o1.getKey(), o2.getKey()))\n                .sortedCopy(unsortedEntries)\n    );\n  }\n","date":"2019-07-13 03:54:07","endLine":70,"groupId":"106556","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAggregate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/98/d46fc9d126a625c427e9cd0c952ae9a0e61611.src","preCode":"  public void testAggregate()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final IntGrouper grouper = newGrouper(columnSelectorFactory, 32768);\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    grouper.aggregate(12);\n    grouper.aggregate(6);\n    grouper.aggregate(10);\n    grouper.aggregate(6);\n    grouper.aggregate(12);\n    grouper.aggregate(6);\n\n    final List<Entry<Integer>> expected = ImmutableList.of(\n        new Grouper.Entry<>(6, new Object[]{30L, 3L}),\n        new Grouper.Entry<>(10, new Object[]{10L, 1L}),\n        new Grouper.Entry<>(12, new Object[]{20L, 2L})\n    );\n    final List<Entry<Integer>> unsortedEntries = Lists.newArrayList(grouper.iterator(false));\n\n    Assert.assertEquals(\n        expected,\n        Ordering.from((Comparator<Entry<Integer>>) (o1, o2) -> Ints.compare(o1.getKey(), o2.getKey()))\n                .sortedCopy(unsortedEntries)\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/epinephelinae/BufferArrayGrouperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"},{"authorDate":"2020-11-03 23:00:33","commitOrder":3,"curCode":"  public void testTimeout()\n  {\n    expectedException.expect(QueryTimeoutException.class);\n\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final StreamingMergeSortedGrouper<Integer> grouper = newGrouper(columnSelectorFactory, 100);\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    grouper.aggregate(6);\n\n    grouper.iterator();\n  }\n","date":"2020-11-03 23:00:33","endLine":173,"groupId":"106556","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/83/1db4da1ed721694e8e2d0794a9c363db5145b0.src","preCode":"  public void testTimeout()\n  {\n    expectedException.expect(RuntimeException.class);\n    expectedException.expectCause(CoreMatchers.instanceOf(TimeoutException.class));\n\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final StreamingMergeSortedGrouper<Integer> grouper = newGrouper(columnSelectorFactory, 100);\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    grouper.aggregate(6);\n\n    grouper.iterator();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/epinephelinae/StreamingMergeSortedGrouperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"6ccddedb7a1752dc130d939066b04da16eb6b1bd","commitMessage":"@@@Improved exception handling in case of query timeouts (#10464)\n\n* Separate timeout exceptions\n\n* Add more tests\n\nCo-authored-by: Atul Mohan <atulmohan@yahoo-inc.com>","date":"2020-11-03 23:00:33","modifiedFileCount":"25","status":"M","submitter":"Atul Mohan"}]
