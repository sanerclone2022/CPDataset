[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Arrays.asList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                Arrays.asList(\"lat\", \"long\")\n                            ),\n                            new SpatialDimensionSchema(\n                                \"spatialIsRad\",\n                                Arrays.asList(\"lat2\", \"long2\")\n                            )\n\n                        )\n                    )\n                ).build()\n        )\n        .setReportParseExceptions(false)\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 0.0f,\n                \"long\", 0.0f,\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 1.0f,\n                \"long\", 3.0f,\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 4.0f,\n                \"long\", 2.0f,\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 7.0f,\n                \"long\", 3.0f,\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 8.0f,\n                \"long\", 6.0f,\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", \"_mmx.unknown\",\n                \"long\", \"_mmx.unknown\",\n                \"val\", 101L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"lat2\", 0.0f,\n                \"long2\", 0.0f,\n                \"val\", 13L\n            )\n        )\n    );\n\n    \r\n    Random rand = new Random();\n    for (int i = 8; i < NUM_POINTS; i++) {\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"lat\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"long\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","date":"2018-08-31 00:56:26","endLine":254,"groupId":"12422","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"makeIncrementalIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/35/09eec506a0b927f41a07e2d407045b394b6816.src","preCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Arrays.asList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                Arrays.asList(\"lat\", \"long\")\n                            ),\n                            new SpatialDimensionSchema(\n                                \"spatialIsRad\",\n                                Arrays.asList(\"lat2\", \"long2\")\n                            )\n\n                        )\n                    )\n                ).build()\n        )\n        .setReportParseExceptions(false)\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 0.0f,\n                \"long\", 0.0f,\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 1.0f,\n                \"long\", 3.0f,\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 4.0f,\n                \"long\", 2.0f,\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 7.0f,\n                \"long\", 3.0f,\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 8.0f,\n                \"long\", 6.0f,\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", \"_mmx.unknown\",\n                \"long\", \"_mmx.unknown\",\n                \"val\", 101L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"lat2\", 0.0f,\n                \"long2\", 0.0f,\n                \"val\", 13L\n            )\n        )\n    );\n\n    \r\n    Random rand = new Random();\n    for (int i = 8; i < NUM_POINTS; i++) {\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"lat\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"long\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerV9WithSpatialIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Collections.singletonList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                Lists.newArrayList()\n                            )\n                        )\n                    )\n                ).build()\n        )\n        .setReportParseExceptions(false)\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"0.0,0.0\",\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"1.0,3.0\",\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"4.0,2.0\",\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"7.0,3.0\",\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"8.0,6.0\",\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n\n    \r\n    Set<String> alreadyChosen = Sets.newHashSet();\n    Random rand = new Random();\n    for (int i = 6; i < NUM_POINTS; i++) {\n      String coord = null;\n      while (coord == null) {\n        coord = StringUtils.format(\n            \"%s,%s\",\n            (float) (rand.nextFloat() * 10 + 10.0),\n            (float) (rand.nextFloat() * 10 + 10.0)\n        );\n        if (!alreadyChosen.add(coord)) {\n          coord = null;\n        }\n      }\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"dim.geo\", coord,\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","date":"2018-08-31 00:56:26","endLine":244,"groupId":"15034","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"makeIncrementalIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/50/791c53dcebf8f47a1223a1cf59d98721187213.src","preCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Collections.singletonList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                Lists.newArrayList()\n                            )\n                        )\n                    )\n                ).build()\n        )\n        .setReportParseExceptions(false)\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"0.0,0.0\",\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"1.0,3.0\",\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"4.0,2.0\",\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"7.0,3.0\",\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"8.0,6.0\",\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n\n    \r\n    Set<String> alreadyChosen = Sets.newHashSet();\n    Random rand = new Random();\n    for (int i = 6; i < NUM_POINTS; i++) {\n      String coord = null;\n      while (coord == null) {\n        coord = StringUtils.format(\n            \"%s,%s\",\n            (float) (rand.nextFloat() * 10 + 10.0),\n            (float) (rand.nextFloat() * 10 + 10.0)\n        );\n        if (!alreadyChosen.add(coord)) {\n          coord = null;\n        }\n      }\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"dim.geo\", coord,\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/SpatialFilterBonusTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-09-15 04:35:51","codes":[{"authorDate":"2018-09-15 04:35:51","commitOrder":2,"curCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Arrays.asList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                Arrays.asList(\"lat\", \"long\")\n                            ),\n                            new SpatialDimensionSchema(\n                                \"spatialIsRad\",\n                                Arrays.asList(\"lat2\", \"long2\")\n                            )\n\n                        )\n                    )\n                ).build()\n        )\n        .setReportParseExceptions(false)\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 0.0f,\n                \"long\", 0.0f,\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 1.0f,\n                \"long\", 3.0f,\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 4.0f,\n                \"long\", 2.0f,\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 7.0f,\n                \"long\", 3.0f,\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 8.0f,\n                \"long\", 6.0f,\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", \"_mmx.unknown\",\n                \"long\", \"_mmx.unknown\",\n                \"val\", 101L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"lat2\", 0.0f,\n                \"long2\", 0.0f,\n                \"val\", 13L\n            )\n        )\n    );\n\n    \r\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 8; i < NUM_POINTS; i++) {\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"lat\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"long\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","date":"2018-09-15 04:35:51","endLine":255,"groupId":"12422","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"makeIncrementalIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bd/5d144735ec60931dc342eb88eb2279426e1fd4.src","preCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Arrays.asList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                Arrays.asList(\"lat\", \"long\")\n                            ),\n                            new SpatialDimensionSchema(\n                                \"spatialIsRad\",\n                                Arrays.asList(\"lat2\", \"long2\")\n                            )\n\n                        )\n                    )\n                ).build()\n        )\n        .setReportParseExceptions(false)\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 0.0f,\n                \"long\", 0.0f,\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 1.0f,\n                \"long\", 3.0f,\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 4.0f,\n                \"long\", 2.0f,\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 7.0f,\n                \"long\", 3.0f,\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 8.0f,\n                \"long\", 6.0f,\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", \"_mmx.unknown\",\n                \"long\", \"_mmx.unknown\",\n                \"val\", 101L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"lat2\", 0.0f,\n                \"long2\", 0.0f,\n                \"val\", 13L\n            )\n        )\n    );\n\n    \r\n    Random rand = new Random();\n    for (int i = 8; i < NUM_POINTS; i++) {\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"lat\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"long\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerV9WithSpatialIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2018-09-15 04:35:51","commitOrder":2,"curCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Collections.singletonList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                Lists.newArrayList()\n                            )\n                        )\n                    )\n                ).build()\n        )\n        .setReportParseExceptions(false)\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"0.0,0.0\",\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"1.0,3.0\",\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"4.0,2.0\",\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"7.0,3.0\",\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"8.0,6.0\",\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n\n    \r\n    Set<String> alreadyChosen = Sets.newHashSet();\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 6; i < NUM_POINTS; i++) {\n      String coord = null;\n      while (coord == null) {\n        coord = StringUtils.format(\n            \"%s,%s\",\n            (float) (rand.nextFloat() * 10 + 10.0),\n            (float) (rand.nextFloat() * 10 + 10.0)\n        );\n        if (!alreadyChosen.add(coord)) {\n          coord = null;\n        }\n      }\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"dim.geo\", coord,\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","date":"2018-09-15 04:35:51","endLine":245,"groupId":"15034","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"makeIncrementalIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/88/840a4494b750a0c7db4b7fb6bed5ffc32046b7.src","preCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Collections.singletonList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                Lists.newArrayList()\n                            )\n                        )\n                    )\n                ).build()\n        )\n        .setReportParseExceptions(false)\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"0.0,0.0\",\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"1.0,3.0\",\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"4.0,2.0\",\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"7.0,3.0\",\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"8.0,6.0\",\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n\n    \r\n    Set<String> alreadyChosen = Sets.newHashSet();\n    Random rand = new Random();\n    for (int i = 6; i < NUM_POINTS; i++) {\n      String coord = null;\n      while (coord == null) {\n        coord = StringUtils.format(\n            \"%s,%s\",\n            (float) (rand.nextFloat() * 10 + 10.0),\n            (float) (rand.nextFloat() * 10 + 10.0)\n        );\n        if (!alreadyChosen.add(coord)) {\n          coord = null;\n        }\n      }\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"dim.geo\", coord,\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/SpatialFilterBonusTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"0c4bd2b57b19bcbd9a275fad412960aa0a39ca5f","commitMessage":"@@@Prohibit some Random usage patterns (#6226)\n\n* Prohibit Random usage patterns\n\n* Fix FlattenJSONBenchmarkUtil\n","date":"2018-09-15 04:35:51","modifiedFileCount":"44","status":"M","submitter":"Roman Leventov"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-09-15 04:35:51","commitOrder":3,"curCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Arrays.asList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                Arrays.asList(\"lat\", \"long\")\n                            ),\n                            new SpatialDimensionSchema(\n                                \"spatialIsRad\",\n                                Arrays.asList(\"lat2\", \"long2\")\n                            )\n\n                        )\n                    )\n                ).build()\n        )\n        .setReportParseExceptions(false)\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 0.0f,\n                \"long\", 0.0f,\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 1.0f,\n                \"long\", 3.0f,\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 4.0f,\n                \"long\", 2.0f,\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 7.0f,\n                \"long\", 3.0f,\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 8.0f,\n                \"long\", 6.0f,\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", \"_mmx.unknown\",\n                \"long\", \"_mmx.unknown\",\n                \"val\", 101L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"lat2\", 0.0f,\n                \"long2\", 0.0f,\n                \"val\", 13L\n            )\n        )\n    );\n\n    \r\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 8; i < NUM_POINTS; i++) {\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"lat\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"long\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","date":"2018-09-15 04:35:51","endLine":255,"groupId":"12422","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"makeIncrementalIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bd/5d144735ec60931dc342eb88eb2279426e1fd4.src","preCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Arrays.asList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                Arrays.asList(\"lat\", \"long\")\n                            ),\n                            new SpatialDimensionSchema(\n                                \"spatialIsRad\",\n                                Arrays.asList(\"lat2\", \"long2\")\n                            )\n\n                        )\n                    )\n                ).build()\n        )\n        .setReportParseExceptions(false)\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 0.0f,\n                \"long\", 0.0f,\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 1.0f,\n                \"long\", 3.0f,\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 4.0f,\n                \"long\", 2.0f,\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 7.0f,\n                \"long\", 3.0f,\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 8.0f,\n                \"long\", 6.0f,\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", \"_mmx.unknown\",\n                \"long\", \"_mmx.unknown\",\n                \"val\", 101L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"lat2\", 0.0f,\n                \"long2\", 0.0f,\n                \"val\", 13L\n            )\n        )\n    );\n\n    \r\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 8; i < NUM_POINTS; i++) {\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"lat\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"long\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerV9WithSpatialIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2018-10-29 20:02:43","commitOrder":3,"curCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Collections.singletonList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                new ArrayList<>()\n                            )\n                        )\n                    )\n                ).build()\n        )\n        .setReportParseExceptions(false)\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"0.0,0.0\",\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"1.0,3.0\",\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"4.0,2.0\",\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"7.0,3.0\",\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"8.0,6.0\",\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n\n    \r\n    Set<String> alreadyChosen = new HashSet<>();\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 6; i < NUM_POINTS; i++) {\n      String coord = null;\n      while (coord == null) {\n        coord = StringUtils.format(\n            \"%s,%s\",\n            (float) (rand.nextFloat() * 10 + 10.0),\n            (float) (rand.nextFloat() * 10 + 10.0)\n        );\n        if (!alreadyChosen.add(coord)) {\n          coord = null;\n        }\n      }\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"dim.geo\", coord,\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","date":"2018-10-29 20:02:43","endLine":245,"groupId":"15034","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"makeIncrementalIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3f/f9fb73b5e412c2191349815c2412fbf0e220ea.src","preCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Collections.singletonList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                Lists.newArrayList()\n                            )\n                        )\n                    )\n                ).build()\n        )\n        .setReportParseExceptions(false)\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"0.0,0.0\",\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"1.0,3.0\",\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"4.0,2.0\",\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"7.0,3.0\",\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"8.0,6.0\",\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n\n    \r\n    Set<String> alreadyChosen = Sets.newHashSet();\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 6; i < NUM_POINTS; i++) {\n      String coord = null;\n      while (coord == null) {\n        coord = StringUtils.format(\n            \"%s,%s\",\n            (float) (rand.nextFloat() * 10 + 10.0),\n            (float) (rand.nextFloat() * 10 + 10.0)\n        );\n        if (!alreadyChosen.add(coord)) {\n          coord = null;\n        }\n      }\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"dim.geo\", coord,\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/SpatialFilterBonusTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2020-09-12 07:31:10","codes":[{"authorDate":"2020-09-12 07:31:10","commitOrder":4,"curCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Arrays.asList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                Arrays.asList(\"lat\", \"long\")\n                            ),\n                            new SpatialDimensionSchema(\n                                \"spatialIsRad\",\n                                Arrays.asList(\"lat2\", \"long2\")\n                            )\n\n                        )\n                    )\n                ).build()\n        )\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 0.0f,\n                \"long\", 0.0f,\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 1.0f,\n                \"long\", 3.0f,\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 4.0f,\n                \"long\", 2.0f,\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 7.0f,\n                \"long\", 3.0f,\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 8.0f,\n                \"long\", 6.0f,\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", \"_mmx.unknown\",\n                \"long\", \"_mmx.unknown\",\n                \"val\", 101L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"lat2\", 0.0f,\n                \"long2\", 0.0f,\n                \"val\", 13L\n            )\n        )\n    );\n\n    \r\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 8; i < NUM_POINTS; i++) {\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"lat\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"long\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","date":"2020-09-12 07:31:10","endLine":253,"groupId":"12422","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"makeIncrementalIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cc/c6ff7b359d91ec7ca331386b8b12fc2bb75ce5.src","preCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Arrays.asList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                Arrays.asList(\"lat\", \"long\")\n                            ),\n                            new SpatialDimensionSchema(\n                                \"spatialIsRad\",\n                                Arrays.asList(\"lat2\", \"long2\")\n                            )\n\n                        )\n                    )\n                ).build()\n        )\n        .setReportParseExceptions(false)\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 0.0f,\n                \"long\", 0.0f,\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 1.0f,\n                \"long\", 3.0f,\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 4.0f,\n                \"long\", 2.0f,\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 7.0f,\n                \"long\", 3.0f,\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 8.0f,\n                \"long\", 6.0f,\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", \"_mmx.unknown\",\n                \"long\", \"_mmx.unknown\",\n                \"val\", 101L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"lat2\", 0.0f,\n                \"long2\", 0.0f,\n                \"val\", 13L\n            )\n        )\n    );\n\n    \r\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 8; i < NUM_POINTS; i++) {\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"lat\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"long\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerV9WithSpatialIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2020-09-12 07:31:10","commitOrder":4,"curCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Collections.singletonList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                new ArrayList<>()\n                            )\n                        )\n                    )\n                ).build()\n        )\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"0.0,0.0\",\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"1.0,3.0\",\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"4.0,2.0\",\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"7.0,3.0\",\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"8.0,6.0\",\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n\n    \r\n    Set<String> alreadyChosen = new HashSet<>();\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 6; i < NUM_POINTS; i++) {\n      String coord = null;\n      while (coord == null) {\n        coord = StringUtils.format(\n            \"%s,%s\",\n            (float) (rand.nextFloat() * 10 + 10.0),\n            (float) (rand.nextFloat() * 10 + 10.0)\n        );\n        if (!alreadyChosen.add(coord)) {\n          coord = null;\n        }\n      }\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"dim.geo\", coord,\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","date":"2020-09-12 07:31:10","endLine":242,"groupId":"15034","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"makeIncrementalIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a6/207aa09e52590968087d91c50644044261a2ff.src","preCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Collections.singletonList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                new ArrayList<>()\n                            )\n                        )\n                    )\n                ).build()\n        )\n        .setReportParseExceptions(false)\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"0.0,0.0\",\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"1.0,3.0\",\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"4.0,2.0\",\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"7.0,3.0\",\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"8.0,6.0\",\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n\n    \r\n    Set<String> alreadyChosen = new HashSet<>();\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 6; i < NUM_POINTS; i++) {\n      String coord = null;\n      while (coord == null) {\n        coord = StringUtils.format(\n            \"%s,%s\",\n            (float) (rand.nextFloat() * 10 + 10.0),\n            (float) (rand.nextFloat() * 10 + 10.0)\n        );\n        if (!alreadyChosen.add(coord)) {\n          coord = null;\n        }\n      }\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"dim.geo\", coord,\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/SpatialFilterBonusTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"8f14ac814e1fdf11878a5ba9bdba58fb745b4c8f","commitMessage":"@@@More structured way to handle parse exceptions (#10336)\n\n* More structured way to handle parse exceptions\n\n* checkstyle; add more tests\n\n* forbidden api; test\n\n* address comment; new test\n\n* address review comments\n\n* javadoc for parseException; remove redundant parseException in streaming ingestion\n\n* fix tests\n\n* unnecessary catch\n\n* unused imports\n\n* appenderator test\n\n* unused import","date":"2020-09-12 07:31:10","modifiedFileCount":"116","status":"M","submitter":"Jihoon Son"},{"authorTime":"2021-01-08 14:18:47","codes":[{"authorDate":"2021-01-08 14:18:47","commitOrder":5,"curCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new OnheapIncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Arrays.asList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                Arrays.asList(\"lat\", \"long\")\n                            ),\n                            new SpatialDimensionSchema(\n                                \"spatialIsRad\",\n                                Arrays.asList(\"lat2\", \"long2\")\n                            )\n\n                        )\n                    )\n                ).build()\n        )\n        .setMaxRowCount(NUM_POINTS)\n        .build();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 0.0f,\n                \"long\", 0.0f,\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 1.0f,\n                \"long\", 3.0f,\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 4.0f,\n                \"long\", 2.0f,\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 7.0f,\n                \"long\", 3.0f,\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 8.0f,\n                \"long\", 6.0f,\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", \"_mmx.unknown\",\n                \"long\", \"_mmx.unknown\",\n                \"val\", 101L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"lat2\", 0.0f,\n                \"long2\", 0.0f,\n                \"val\", 13L\n            )\n        )\n    );\n\n    \r\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 8; i < NUM_POINTS; i++) {\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"lat\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"long\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","date":"2021-01-08 14:18:47","endLine":254,"groupId":"105934","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"makeIncrementalIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8e/5da945bef2ea1d0d0893e0395c52456c07e40a.src","preCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Arrays.asList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                Arrays.asList(\"lat\", \"long\")\n                            ),\n                            new SpatialDimensionSchema(\n                                \"spatialIsRad\",\n                                Arrays.asList(\"lat2\", \"long2\")\n                            )\n\n                        )\n                    )\n                ).build()\n        )\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 0.0f,\n                \"long\", 0.0f,\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 1.0f,\n                \"long\", 3.0f,\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 4.0f,\n                \"long\", 2.0f,\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 7.0f,\n                \"long\", 3.0f,\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", 8.0f,\n                \"long\", 6.0f,\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"lat\", \"_mmx.unknown\",\n                \"long\", \"_mmx.unknown\",\n                \"val\", 101L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"lat2\", 0.0f,\n                \"long2\", 0.0f,\n                \"val\", 13L\n            )\n        )\n    );\n\n    \r\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 8; i < NUM_POINTS; i++) {\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"lat\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"long\", (float) (rand.nextFloat() * 10 + 10.0),\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/IndexMergerV9WithSpatialIndexTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2021-01-08 14:18:47","commitOrder":5,"curCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new OnheapIncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Collections.singletonList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                new ArrayList<>()\n                            )\n                        )\n                    )\n                ).build()\n        )\n        .setMaxRowCount(NUM_POINTS)\n        .build();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"0.0,0.0\",\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"1.0,3.0\",\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"4.0,2.0\",\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"7.0,3.0\",\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"8.0,6.0\",\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n\n    \r\n    Set<String> alreadyChosen = new HashSet<>();\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 6; i < NUM_POINTS; i++) {\n      String coord = null;\n      while (coord == null) {\n        coord = StringUtils.format(\n            \"%s,%s\",\n            (float) (rand.nextFloat() * 10 + 10.0),\n            (float) (rand.nextFloat() * 10 + 10.0)\n        );\n        if (!alreadyChosen.add(coord)) {\n          coord = null;\n        }\n      }\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"dim.geo\", coord,\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","date":"2021-01-08 14:18:47","endLine":243,"groupId":"105934","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"makeIncrementalIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/94/e413c3b7987bebe04887b5c825a4f16fa665e7.src","preCode":"  private static IncrementalIndex makeIncrementalIndex() throws IOException\n  {\n    IncrementalIndex theIndex = new IncrementalIndex.Builder()\n        .setIndexSchema(\n            new IncrementalIndexSchema.Builder()\n                .withMinTimestamp(DATA_INTERVAL.getStartMillis())\n                .withQueryGranularity(Granularities.DAY)\n                .withMetrics(METRIC_AGGS)\n                .withDimensionsSpec(\n                    new DimensionsSpec(\n                        null,\n                        null,\n                        Collections.singletonList(\n                            new SpatialDimensionSchema(\n                                \"dim.geo\",\n                                new ArrayList<>()\n                            )\n                        )\n                    )\n                ).build()\n        )\n        .setMaxRowCount(NUM_POINTS)\n        .buildOnheap();\n\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-01\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"0.0,0.0\",\n                \"val\", 17L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-02\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-02\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"1.0,3.0\",\n                \"val\", 29L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-03\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-03\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"4.0,2.0\",\n                \"val\", 13L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-04\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-04\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"7.0,3.0\",\n                \"val\", 91L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"8.0,6.0\",\n                \"val\", 47L\n            )\n        )\n    );\n    theIndex.add(\n        new MapBasedInputRow(\n            DateTimes.of(\"2013-01-05\").getMillis(),\n            DIMS,\n            ImmutableMap.of(\n                \"timestamp\", DateTimes.of(\"2013-01-05\").toString(),\n                \"dim\", \"foo\",\n                \"dim.geo\", \"_mmx.unknown\",\n                \"val\", 501L\n            )\n        )\n    );\n\n    \r\n    Set<String> alreadyChosen = new HashSet<>();\n    Random rand = ThreadLocalRandom.current();\n    for (int i = 6; i < NUM_POINTS; i++) {\n      String coord = null;\n      while (coord == null) {\n        coord = StringUtils.format(\n            \"%s,%s\",\n            (float) (rand.nextFloat() * 10 + 10.0),\n            (float) (rand.nextFloat() * 10 + 10.0)\n        );\n        if (!alreadyChosen.add(coord)) {\n          coord = null;\n        }\n      }\n      theIndex.add(\n          new MapBasedInputRow(\n              DateTimes.of(\"2013-01-01\").getMillis(),\n              DIMS,\n              ImmutableMap.of(\n                  \"timestamp\", DateTimes.of(\"2013-01-01\").toString(),\n                  \"dim\", \"boo\",\n                  \"dim.geo\", coord,\n                  \"val\", i\n              )\n          )\n      );\n    }\n\n    return theIndex;\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/SpatialFilterBonusTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"08ab82f55ca856d60dfe1088c1c0393428b0bb6d","commitMessage":"@@@IncrementalIndex Tests and Benchmarks Parametrization (#10593)\n\n* Remove redundant IncrementalIndex.Builder\n\n* Parametrize incremental index tests and benchmarks\n\n- Reveal and fix a bug in OffheapIncrementalIndex\n\n* Fix forbiddenapis error: Forbidden method invocation: java.lang.String#format(java.lang.String. java.lang.Object[]) [Uses default locale]\n\n* Fix Intellij errors: declared exception is never thrown\n\n* Add documentation and validate before closing objects on tearDown.\n\n* Add documentation to OffheapIncrementalIndexTestSpec\n\n* Doc corrections and minor changes.\n\n* Add logging for generated rows.\n\n* Refactor new tests/benchmarks.\n\n* Improve IncrementalIndexCreator documentation\n\n* Add required tests for DataGenerator\n\n* Revert \"rollupOpportunity\" to be a string","date":"2021-01-08 14:18:47","modifiedFileCount":"62","status":"M","submitter":"Liran Funaro"}]
