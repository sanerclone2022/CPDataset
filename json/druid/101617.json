[{"authorTime":"2020-08-02 06:32:09","codes":[{"authorDate":"2020-01-21 03:51:54","commitOrder":2,"curCode":"  public void testLatestAggregatorsNumericNull() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT LATEST(l1), LATEST(d1), LATEST(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongLastAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleLastAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatLastAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.defaultLongValue(), NullHandling.defaultDoubleValue(), NullHandling.defaultFloatValue()}\n        )\n    );\n  }\n","date":"2020-01-21 03:51:54","endLine":1741,"groupId":"15727","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLatestAggregatorsNumericNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/d6ccd14905b03f29d530e6926d34b67ece734c.src","preCode":"  public void testLatestAggregatorsNumericNull() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT LATEST(l1), LATEST(d1), LATEST(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongLastAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleLastAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatLastAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.defaultLongValue(), NullHandling.defaultDoubleValue(), NullHandling.defaultFloatValue()}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1715,"status":"NB"},{"authorDate":"2020-08-02 06:32:09","commitOrder":2,"curCode":"  public void testSimpleLongAggregations() throws Exception\n  {\n    testQuery(\n        \"SELECT  MIN(l1), MIN(cnt) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .aggregators(aggregators(\n                                new LongMinAggregatorFactory(\"a0\", \"l1\"),\n                                new LongMinAggregatorFactory(\"a1\", \"cnt\")\n                            ))\n                .context(TIMESERIES_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{0L, 1L}\n        )\n    );\n  }\n","date":"2020-08-02 06:32:09","endLine":4821,"groupId":"7438","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleLongAggregations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/74/901df9caf3cb087f086e6f7f02d6517f1809c9.src","preCode":"  public void testSimpleLongAggregations() throws Exception\n  {\n    testQuery(\n        \"SELECT  MIN(l1), MIN(cnt) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .aggregators(aggregators(\n                                new LongMinAggregatorFactory(\"a0\", \"l1\"),\n                                new LongMinAggregatorFactory(\"a1\", \"cnt\")\n                            ))\n                .context(TIMESERIES_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{0L, 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4801,"status":"B"}],"commitId":"34a41137522fca463c6af1df5edb2f41297491f5","commitMessage":"@@@Add vectorization support for the longMin aggregator. (#10211)\n\n* Fix minor formatting in docs.\n\n* Add Nullhandling initialization for test to run from IDE.\n\n* Vectorize longMin aggregator.\n\n- A new vectorized class for the vectorized long min aggregator.\n- Changes to AggregatorFactory to support vectorize functionality.\n- Few changes to schema evolution test to add LongMinAggregatorFactory.\n\n* Add longSum to the supported vectorized aggregator implementations.\n\n* Add MIN() long min to calcite query test that can vectorize.\n\n* Add simple long aggregations test.\n\n* Fixup formatting per checkstyle guide.\n\n* fixup and add more tests for long min aggregator.\n\n* Override test for groupBy since timestamps are handled differently.\n\n* Null compatibility check in test.\n\n* Review comment: Add a test case to LongMinAggregationTest.","date":"2020-08-02 06:32:09","modifiedFileCount":"9","status":"M","submitter":"Abhishek Radhakrishnan"},{"authorTime":"2020-08-11 06:18:55","codes":[{"authorDate":"2020-01-21 03:51:54","commitOrder":3,"curCode":"  public void testLatestAggregatorsNumericNull() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT LATEST(l1), LATEST(d1), LATEST(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongLastAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleLastAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatLastAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.defaultLongValue(), NullHandling.defaultDoubleValue(), NullHandling.defaultFloatValue()}\n        )\n    );\n  }\n","date":"2020-01-21 03:51:54","endLine":1741,"groupId":"15727","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLatestAggregatorsNumericNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/d6ccd14905b03f29d530e6926d34b67ece734c.src","preCode":"  public void testLatestAggregatorsNumericNull() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT LATEST(l1), LATEST(d1), LATEST(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongLastAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleLastAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatLastAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.defaultLongValue(), NullHandling.defaultDoubleValue(), NullHandling.defaultFloatValue()}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1715,"status":"N"},{"authorDate":"2020-08-11 06:18:55","commitOrder":3,"curCode":"  public void testSimpleLongAggregations() throws Exception\n  {\n    testQuery(\n        \"SELECT  MIN(l1), MIN(cnt), MAX(l1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .aggregators(aggregators(\n                                new LongMinAggregatorFactory(\"a0\", \"l1\"),\n                                new LongMinAggregatorFactory(\"a1\", \"cnt\"),\n                                new LongMaxAggregatorFactory(\"a2\", \"l1\")\n                            ))\n                .context(TIMESERIES_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{0L, 1L, 325323L}\n        )\n    );\n  }\n","date":"2020-08-11 06:18:55","endLine":4820,"groupId":"16631","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleLongAggregations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/94/09f818693a35f2f3a96203cfca0c9d0498ad8d.src","preCode":"  public void testSimpleLongAggregations() throws Exception\n  {\n    testQuery(\n        \"SELECT  MIN(l1), MIN(cnt) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .aggregators(aggregators(\n                                new LongMinAggregatorFactory(\"a0\", \"l1\"),\n                                new LongMinAggregatorFactory(\"a1\", \"cnt\")\n                            ))\n                .context(TIMESERIES_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{0L, 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4799,"status":"M"}],"commitId":"dc16abae34ca9f4159f692ee866a122f70de9cdf","commitMessage":"@@@Vectorization support for long.  double.  float min & max aggregators. (#10260)\n\n* LongMaxVectorAggregator support and test case.\n\n* DoubleMinVectorAggregator and test cases.\n\n* DoubleMaxVectorAggregator and unit test.\n\n* FloatMinVectorAggregator and FloatMaxVectorAggregator.\n\n* Documentation update to include the other vector aggregators.\n\n* Bug fix.\n\n* checkstyle formatting fixes.\n\n* CalciteQueryTest cases update.\n\n* Separate test classes for FloatMaxAggregation and FloatMniAggregation.\n\n* remove the cannotVectorize for float max/min aggregator in test.\n\n* Tests in GroupByQueryRunner.  GroupByTimeseriesQueryRunner and TimeseriesQueryRunner.","date":"2020-08-11 06:18:55","modifiedFileCount":"13","status":"M","submitter":"Abhishek Radhakrishnan"},{"authorTime":"2021-05-11 01:13:37","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":4,"curCode":"  public void testLatestAggregatorsNumericNull() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT LATEST(l1), LATEST(d1), LATEST(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongLastAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleLastAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatLastAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.defaultLongValue(), NullHandling.defaultDoubleValue(), NullHandling.defaultFloatValue()}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":2641,"groupId":"101617","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLatestAggregatorsNumericNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testLatestAggregatorsNumericNull() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT LATEST(l1), LATEST(d1), LATEST(f1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(\n                      aggregators(\n                          new LongLastAggregatorFactory(\"a0\", \"l1\"),\n                          new DoubleLastAggregatorFactory(\"a1\", \"d1\"),\n                          new FloatLastAggregatorFactory(\"a2\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{NullHandling.defaultLongValue(), NullHandling.defaultDoubleValue(), NullHandling.defaultFloatValue()}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2615,"status":"M"},{"authorDate":"2021-05-11 01:13:37","commitOrder":4,"curCode":"  public void testSimpleLongAggregations() throws Exception\n  {\n    testQuery(\n        \"SELECT  MIN(l1), MIN(cnt), MAX(l1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .aggregators(aggregators(\n                                new LongMinAggregatorFactory(\"a0\", \"l1\"),\n                                new LongMinAggregatorFactory(\"a1\", \"cnt\"),\n                                new LongMaxAggregatorFactory(\"a2\", \"l1\")\n                            ))\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{0L, 1L, 325323L}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":6029,"groupId":"101617","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleLongAggregations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testSimpleLongAggregations() throws Exception\n  {\n    testQuery(\n        \"SELECT  MIN(l1), MIN(cnt), MAX(l1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .aggregators(aggregators(\n                                new LongMinAggregatorFactory(\"a0\", \"l1\"),\n                                new LongMinAggregatorFactory(\"a1\", \"cnt\"),\n                                new LongMaxAggregatorFactory(\"a2\", \"l1\")\n                            ))\n                .context(TIMESERIES_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{0L, 1L, 325323L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6008,"status":"M"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
