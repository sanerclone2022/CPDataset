[{"authorTime":"2020-02-05 03:33:48","codes":[{"authorDate":"2020-02-05 03:33:48","commitOrder":1,"curCode":"  public void testFieldAliasingSelect() throws Exception\n  {\n    final List<Map<String, Object>> rows = doPost(\n        new SqlQuery(\"SELECT dim2 \\\"x\\\", dim2 \\\"y\\\" FROM druid.foo LIMIT 1\", ResultFormat.OBJECT, false, null)\n    ).rhs;\n\n    Assert.assertEquals(\n        ImmutableList.of(\n            ImmutableMap.of(\"x\", \"a\", \"y\", \"a\")\n        ),\n        rows\n    );\n  }\n","date":"2020-02-05 03:33:48","endLine":272,"groupId":"16671","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldAliasingSelect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a9/201eb521214a5d3eac90cca430d552c913ac9f.src","preCode":"  public void testFieldAliasingSelect() throws Exception\n  {\n    final List<Map<String, Object>> rows = doPost(\n        new SqlQuery(\"SELECT dim2 \\\"x\\\", dim2 \\\"y\\\" FROM druid.foo LIMIT 1\", ResultFormat.OBJECT, false, null)\n    ).rhs;\n\n    Assert.assertEquals(\n        ImmutableList.of(\n            ImmutableMap.of(\"x\", \"a\", \"y\", \"a\")\n        ),\n        rows\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"B"},{"authorDate":"2020-02-05 03:33:48","commitOrder":1,"curCode":"  public void testFieldAliasingGroupBy() throws Exception\n  {\n    final List<Map<String, Object>> rows = doPost(\n        new SqlQuery(\"SELECT dim2 \\\"x\\\", dim2 \\\"y\\\" FROM druid.foo GROUP BY dim2\", ResultFormat.OBJECT, false, null)\n    ).rhs;\n\n    Assert.assertEquals(\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            ImmutableMap.of(\"x\", \"\", \"y\", \"\"),\n            ImmutableMap.of(\"x\", \"a\", \"y\", \"a\"),\n            ImmutableMap.of(\"x\", \"abc\", \"y\", \"abc\")\n        ) :\n        ImmutableList.of(\n            \r\n            Maps.transformValues(ImmutableMap.of(\"x\", \"\", \"y\", \"\"), (val) -> null),\n            ImmutableMap.of(\"x\", \"\", \"y\", \"\"),\n            ImmutableMap.of(\"x\", \"a\", \"y\", \"a\"),\n            ImmutableMap.of(\"x\", \"abc\", \"y\", \"abc\")\n        ),\n        rows\n    );\n  }\n","date":"2020-02-05 03:33:48","endLine":297,"groupId":"12391","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFieldAliasingGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a9/201eb521214a5d3eac90cca430d552c913ac9f.src","preCode":"  public void testFieldAliasingGroupBy() throws Exception\n  {\n    final List<Map<String, Object>> rows = doPost(\n        new SqlQuery(\"SELECT dim2 \\\"x\\\", dim2 \\\"y\\\" FROM druid.foo GROUP BY dim2\", ResultFormat.OBJECT, false, null)\n    ).rhs;\n\n    Assert.assertEquals(\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            ImmutableMap.of(\"x\", \"\", \"y\", \"\"),\n            ImmutableMap.of(\"x\", \"a\", \"y\", \"a\"),\n            ImmutableMap.of(\"x\", \"abc\", \"y\", \"abc\")\n        ) :\n        ImmutableList.of(\n            \r\n            Maps.transformValues(ImmutableMap.of(\"x\", \"\", \"y\", \"\"), (val) -> null),\n            ImmutableMap.of(\"x\", \"\", \"y\", \"\"),\n            ImmutableMap.of(\"x\", \"a\", \"y\", \"a\"),\n            ImmutableMap.of(\"x\", \"abc\", \"y\", \"abc\")\n        ),\n        rows\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"B"}],"commitId":"33a97dfaae00d88fb3001f55e1fa23211edc7640","commitMessage":"@@@Guicify druid sql module (#9279)\n\n* Guicify druid sql module\n\nBreak up the SQLModule in to smaller modules and provide a binding that\nmodules can use to register schemas with druid sql.\n\n* fix some tests\n\n* address code review\n\n* tests compile\n\n* Working tests\n\n* Add all the tests\n\n* fix up licenses and dependencies\n\n* add calcite dependency to druid-benchmarks\n\n* tests pass\n\n* rename the schemas\n","date":"2020-02-05 03:33:48","modifiedFileCount":"31","status":"B","submitter":"Suneet Saldanha"},{"authorTime":"2020-02-20 05:09:20","codes":[{"authorDate":"2020-02-20 05:09:20","commitOrder":2,"curCode":"  public void testFieldAliasingSelect() throws Exception\n  {\n    final List<Map<String, Object>> rows = doPost(\n        new SqlQuery(\"SELECT dim2 \\\"x\\\", dim2 \\\"y\\\" FROM druid.foo LIMIT 1\", ResultFormat.OBJECT, false, null, null)\n    ).rhs;\n\n    Assert.assertEquals(\n        ImmutableList.of(\n            ImmutableMap.of(\"x\", \"a\", \"y\", \"a\")\n        ),\n        rows\n    );\n  }\n","date":"2020-02-20 05:09:20","endLine":296,"groupId":"101546","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFieldAliasingSelect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ce/925902a575cbbf2589ae93ea4af3f1938c97e0.src","preCode":"  public void testFieldAliasingSelect() throws Exception\n  {\n    final List<Map<String, Object>> rows = doPost(\n        new SqlQuery(\"SELECT dim2 \\\"x\\\", dim2 \\\"y\\\" FROM druid.foo LIMIT 1\", ResultFormat.OBJECT, false, null)\n    ).rhs;\n\n    Assert.assertEquals(\n        ImmutableList.of(\n            ImmutableMap.of(\"x\", \"a\", \"y\", \"a\")\n        ),\n        rows\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"},{"authorDate":"2020-02-20 05:09:20","commitOrder":2,"curCode":"  public void testFieldAliasingGroupBy() throws Exception\n  {\n    final List<Map<String, Object>> rows = doPost(\n        new SqlQuery(\"SELECT dim2 \\\"x\\\", dim2 \\\"y\\\" FROM druid.foo GROUP BY dim2\", ResultFormat.OBJECT, false, null, null)\n    ).rhs;\n\n    Assert.assertEquals(\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            ImmutableMap.of(\"x\", \"\", \"y\", \"\"),\n            ImmutableMap.of(\"x\", \"a\", \"y\", \"a\"),\n            ImmutableMap.of(\"x\", \"abc\", \"y\", \"abc\")\n        ) :\n        ImmutableList.of(\n            \r\n            Maps.transformValues(ImmutableMap.of(\"x\", \"\", \"y\", \"\"), (val) -> null),\n            ImmutableMap.of(\"x\", \"\", \"y\", \"\"),\n            ImmutableMap.of(\"x\", \"a\", \"y\", \"a\"),\n            ImmutableMap.of(\"x\", \"abc\", \"y\", \"abc\")\n        ),\n        rows\n    );\n  }\n","date":"2020-02-20 05:09:20","endLine":321,"groupId":"101546","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFieldAliasingGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ce/925902a575cbbf2589ae93ea4af3f1938c97e0.src","preCode":"  public void testFieldAliasingGroupBy() throws Exception\n  {\n    final List<Map<String, Object>> rows = doPost(\n        new SqlQuery(\"SELECT dim2 \\\"x\\\", dim2 \\\"y\\\" FROM druid.foo GROUP BY dim2\", ResultFormat.OBJECT, false, null)\n    ).rhs;\n\n    Assert.assertEquals(\n        NullHandling.replaceWithDefault() ?\n        ImmutableList.of(\n            ImmutableMap.of(\"x\", \"\", \"y\", \"\"),\n            ImmutableMap.of(\"x\", \"a\", \"y\", \"a\"),\n            ImmutableMap.of(\"x\", \"abc\", \"y\", \"abc\")\n        ) :\n        ImmutableList.of(\n            \r\n            Maps.transformValues(ImmutableMap.of(\"x\", \"\", \"y\", \"\"), (val) -> null),\n            ImmutableMap.of(\"x\", \"\", \"y\", \"\"),\n            ImmutableMap.of(\"x\", \"a\", \"y\", \"a\"),\n            ImmutableMap.of(\"x\", \"abc\", \"y\", \"abc\")\n        ),\n        rows\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/http/SqlResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"}],"commitId":"b408a6d774e43e574bf8092584fae76d582cfd8f","commitMessage":"@@@sql support for dynamic parameters (#6974)\n\n* sql support for dynamic parameters\n\n* fixup\n\n* javadocs\n\n* fixup from merge\n\n* formatting\n\n* fixes\n\n* fix it\n\n* doc fix\n\n* remove druid fallback self-join parameterized test\n\n* unused imports\n\n* ignore test for now\n\n* fix imports\n\n* fixup\n\n* fix merge\n\n* merge fixup\n\n* fix test that cannot vectorize\n\n* fixup and more better\n\n* dependency thingo\n\n* fix docs\n\n* tweaks\n\n* fix docs\n\n* spelling\n\n* unused imports after merge\n\n* review stuffs\n\n* add comment\n\n* add ignore text\n\n* review stuffs\n","date":"2020-02-20 05:09:20","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"}]
