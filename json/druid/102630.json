[{"authorTime":"2020-06-25 09:01:31","codes":[{"authorDate":"2020-06-25 09:01:31","commitOrder":1,"curCode":"  public void testParseNestedData() throws Exception\n  {\n    \r\n    ProtobufInputRowParser parser = new ProtobufInputRowParser(parseSpec, \"prototest.desc\", \"ProtoTestEvent\");\n\n    \r\n    DateTime dateTime = new DateTime(2012, 7, 12, 9, 30, ISOChronology.getInstanceUTC());\n    ProtoTestEventWrapper.ProtoTestEvent event = ProtoTestEventWrapper.ProtoTestEvent.newBuilder()\n                                                                                     .setDescription(\"description\")\n                                                                                     .setEventType(ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE)\n                                                                                     .setId(4711L)\n                                                                                     .setIsValid(true)\n                                                                                     .setSomeOtherId(4712)\n                                                                                     .setTimestamp(dateTime.toString())\n                                                                                     .setSomeFloatColumn(47.11F)\n                                                                                     .setSomeIntColumn(815)\n                                                                                     .setSomeLongColumn(816L)\n                                                                                     .setFoo(ProtoTestEventWrapper.ProtoTestEvent.Foo\n                                                                                                 .newBuilder()\n                                                                                                 .setBar(\"baz\"))\n                                                                                     .addBar(ProtoTestEventWrapper.ProtoTestEvent.Foo\n                                                                                                 .newBuilder()\n                                                                                                 .setBar(\"bar0\"))\n                                                                                     .addBar(ProtoTestEventWrapper.ProtoTestEvent.Foo\n                                                                                                 .newBuilder()\n                                                                                                 .setBar(\"bar1\"))\n                                                                                     .build();\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    event.writeTo(out);\n\n    InputRow row = parser.parseBatch(ByteBuffer.wrap(out.toByteArray())).get(0);\n\n    Assert.assertEquals(dateTime.getMillis(), row.getTimestampFromEpoch());\n\n    assertDimensionEquals(row, \"id\", \"4711\");\n    assertDimensionEquals(row, \"isValid\", \"true\");\n    assertDimensionEquals(row, \"someOtherId\", \"4712\");\n    assertDimensionEquals(row, \"description\", \"description\");\n\n    assertDimensionEquals(row, \"eventType\", ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE.name());\n    assertDimensionEquals(row, \"foobar\", \"baz\");\n    assertDimensionEquals(row, \"bar0\", \"bar0\");\n\n\n    Assert.assertEquals(47.11F, row.getMetric(\"someFloatColumn\").floatValue(), 0.0);\n    Assert.assertEquals(815.0F, row.getMetric(\"someIntColumn\").floatValue(), 0.0);\n    Assert.assertEquals(816.0F, row.getMetric(\"someLongColumn\").floatValue(), 0.0);\n  }\n","date":"2020-06-25 09:01:31","endLine":191,"groupId":"22030","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseNestedData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/31/71cc577d5fd74d1be9062de0ea91a3a0e04098.src","preCode":"  public void testParseNestedData() throws Exception\n  {\n    \r\n    ProtobufInputRowParser parser = new ProtobufInputRowParser(parseSpec, \"prototest.desc\", \"ProtoTestEvent\");\n\n    \r\n    DateTime dateTime = new DateTime(2012, 7, 12, 9, 30, ISOChronology.getInstanceUTC());\n    ProtoTestEventWrapper.ProtoTestEvent event = ProtoTestEventWrapper.ProtoTestEvent.newBuilder()\n                                                                                     .setDescription(\"description\")\n                                                                                     .setEventType(ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE)\n                                                                                     .setId(4711L)\n                                                                                     .setIsValid(true)\n                                                                                     .setSomeOtherId(4712)\n                                                                                     .setTimestamp(dateTime.toString())\n                                                                                     .setSomeFloatColumn(47.11F)\n                                                                                     .setSomeIntColumn(815)\n                                                                                     .setSomeLongColumn(816L)\n                                                                                     .setFoo(ProtoTestEventWrapper.ProtoTestEvent.Foo\n                                                                                                 .newBuilder()\n                                                                                                 .setBar(\"baz\"))\n                                                                                     .addBar(ProtoTestEventWrapper.ProtoTestEvent.Foo\n                                                                                                 .newBuilder()\n                                                                                                 .setBar(\"bar0\"))\n                                                                                     .addBar(ProtoTestEventWrapper.ProtoTestEvent.Foo\n                                                                                                 .newBuilder()\n                                                                                                 .setBar(\"bar1\"))\n                                                                                     .build();\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    event.writeTo(out);\n\n    InputRow row = parser.parseBatch(ByteBuffer.wrap(out.toByteArray())).get(0);\n\n    Assert.assertEquals(dateTime.getMillis(), row.getTimestampFromEpoch());\n\n    assertDimensionEquals(row, \"id\", \"4711\");\n    assertDimensionEquals(row, \"isValid\", \"true\");\n    assertDimensionEquals(row, \"someOtherId\", \"4712\");\n    assertDimensionEquals(row, \"description\", \"description\");\n\n    assertDimensionEquals(row, \"eventType\", ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE.name());\n    assertDimensionEquals(row, \"foobar\", \"baz\");\n    assertDimensionEquals(row, \"bar0\", \"bar0\");\n\n\n    Assert.assertEquals(47.11F, row.getMetric(\"someFloatColumn\").floatValue(), 0.0);\n    Assert.assertEquals(815.0F, row.getMetric(\"someIntColumn\").floatValue(), 0.0);\n    Assert.assertEquals(816.0F, row.getMetric(\"someLongColumn\").floatValue(), 0.0);\n  }\n","realPath":"extensions-core/protobuf-extensions/src/test/java/org/apache/druid/data/input/protobuf/ProtobufInputRowParserTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"B"},{"authorDate":"2020-06-25 09:01:31","commitOrder":1,"curCode":"  public void testParseFlatData() throws Exception\n  {\n    \r\n    ProtobufInputRowParser parser = new ProtobufInputRowParser(flatParseSpec, \"prototest.desc\", \"ProtoTestEvent\");\n\n    \r\n    DateTime dateTime = new DateTime(2012, 7, 12, 9, 30, ISOChronology.getInstanceUTC());\n    ProtoTestEventWrapper.ProtoTestEvent event = ProtoTestEventWrapper.ProtoTestEvent.newBuilder()\n            .setDescription(\"description\")\n            .setEventType(ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE)\n            .setId(4711L)\n            .setIsValid(true)\n            .setSomeOtherId(4712)\n            .setTimestamp(dateTime.toString())\n            .setSomeFloatColumn(47.11F)\n            .setSomeIntColumn(815)\n            .setSomeLongColumn(816L)\n            .build();\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    event.writeTo(out);\n\n    InputRow row = parser.parseBatch(ByteBuffer.wrap(out.toByteArray())).get(0);\n    System.out.println(row);\n\n    Assert.assertEquals(dateTime.getMillis(), row.getTimestampFromEpoch());\n\n    assertDimensionEquals(row, \"id\", \"4711\");\n    assertDimensionEquals(row, \"isValid\", \"true\");\n    assertDimensionEquals(row, \"someOtherId\", \"4712\");\n    assertDimensionEquals(row, \"description\", \"description\");\n\n\n    Assert.assertEquals(47.11F, row.getMetric(\"someFloatColumn\").floatValue(), 0.0);\n    Assert.assertEquals(815.0F, row.getMetric(\"someIntColumn\").floatValue(), 0.0);\n    Assert.assertEquals(816.0F, row.getMetric(\"someLongColumn\").floatValue(), 0.0);\n  }\n","date":"2020-06-25 09:01:31","endLine":230,"groupId":"22030","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseFlatData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/31/71cc577d5fd74d1be9062de0ea91a3a0e04098.src","preCode":"  public void testParseFlatData() throws Exception\n  {\n    \r\n    ProtobufInputRowParser parser = new ProtobufInputRowParser(flatParseSpec, \"prototest.desc\", \"ProtoTestEvent\");\n\n    \r\n    DateTime dateTime = new DateTime(2012, 7, 12, 9, 30, ISOChronology.getInstanceUTC());\n    ProtoTestEventWrapper.ProtoTestEvent event = ProtoTestEventWrapper.ProtoTestEvent.newBuilder()\n            .setDescription(\"description\")\n            .setEventType(ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE)\n            .setId(4711L)\n            .setIsValid(true)\n            .setSomeOtherId(4712)\n            .setTimestamp(dateTime.toString())\n            .setSomeFloatColumn(47.11F)\n            .setSomeIntColumn(815)\n            .setSomeLongColumn(816L)\n            .build();\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    event.writeTo(out);\n\n    InputRow row = parser.parseBatch(ByteBuffer.wrap(out.toByteArray())).get(0);\n    System.out.println(row);\n\n    Assert.assertEquals(dateTime.getMillis(), row.getTimestampFromEpoch());\n\n    assertDimensionEquals(row, \"id\", \"4711\");\n    assertDimensionEquals(row, \"isValid\", \"true\");\n    assertDimensionEquals(row, \"someOtherId\", \"4712\");\n    assertDimensionEquals(row, \"description\", \"description\");\n\n\n    Assert.assertEquals(47.11F, row.getMetric(\"someFloatColumn\").floatValue(), 0.0);\n    Assert.assertEquals(815.0F, row.getMetric(\"someIntColumn\").floatValue(), 0.0);\n    Assert.assertEquals(816.0F, row.getMetric(\"someLongColumn\").floatValue(), 0.0);\n  }\n","realPath":"extensions-core/protobuf-extensions/src/test/java/org/apache/druid/data/input/protobuf/ProtobufInputRowParserTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"B"}],"commitId":"1596b3eacdb1ec127a9b1f4aa99ee8b8dd7a8b76","commitMessage":"@@@Optimize protobuf parsing for flatten data (#9999)\n\n* optimize for protobuf parsing\n\n* fix import error and maven dependency\n\n* add unit test in protobufInputrowParserTest for flatten data\n\n* solve code duplication (remove the log and main())\n\n* rename 'flatten' to 'flat' to make it clearer\n\nCo-authored-by: xionghuilin <xionghuilin@bytedance.com>","date":"2020-06-25 09:01:31","modifiedFileCount":"2","status":"B","submitter":"xhl0726"},{"authorTime":"2021-03-10 07:15:51","codes":[{"authorDate":"2021-03-10 07:15:51","commitOrder":2,"curCode":"  public void testParseNestedData() throws Exception\n  {\n    \r\n    ProtobufInputRowParser parser = new ProtobufInputRowParser(parseSpec, decoder, null, null);\n\n    \r\n    DateTime dateTime = new DateTime(2012, 7, 12, 9, 30, ISOChronology.getInstanceUTC());\n    ProtoTestEventWrapper.ProtoTestEvent event = ProtoTestEventWrapper.ProtoTestEvent.newBuilder()\n                                                                                     .setDescription(\"description\")\n                                                                                     .setEventType(ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE)\n                                                                                     .setId(4711L)\n                                                                                     .setIsValid(true)\n                                                                                     .setSomeOtherId(4712)\n                                                                                     .setTimestamp(dateTime.toString())\n                                                                                     .setSomeFloatColumn(47.11F)\n                                                                                     .setSomeIntColumn(815)\n                                                                                     .setSomeLongColumn(816L)\n                                                                                     .setFoo(ProtoTestEventWrapper.ProtoTestEvent.Foo\n                                                                                                 .newBuilder()\n                                                                                                 .setBar(\"baz\"))\n                                                                                     .addBar(ProtoTestEventWrapper.ProtoTestEvent.Foo\n                                                                                                 .newBuilder()\n                                                                                                 .setBar(\"bar0\"))\n                                                                                     .addBar(ProtoTestEventWrapper.ProtoTestEvent.Foo\n                                                                                                 .newBuilder()\n                                                                                                 .setBar(\"bar1\"))\n                                                                                     .build();\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    event.writeTo(out);\n\n    InputRow row = parser.parseBatch(ByteBuffer.wrap(out.toByteArray())).get(0);\n\n    Assert.assertEquals(dateTime.getMillis(), row.getTimestampFromEpoch());\n\n    assertDimensionEquals(row, \"id\", \"4711\");\n    assertDimensionEquals(row, \"isValid\", \"true\");\n    assertDimensionEquals(row, \"someOtherId\", \"4712\");\n    assertDimensionEquals(row, \"description\", \"description\");\n\n    assertDimensionEquals(row, \"eventType\", ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE.name());\n    assertDimensionEquals(row, \"foobar\", \"baz\");\n    assertDimensionEquals(row, \"bar0\", \"bar0\");\n\n\n    Assert.assertEquals(47.11F, row.getMetric(\"someFloatColumn\").floatValue(), 0.0);\n    Assert.assertEquals(815.0F, row.getMetric(\"someIntColumn\").floatValue(), 0.0);\n    Assert.assertEquals(816.0F, row.getMetric(\"someLongColumn\").floatValue(), 0.0);\n  }\n","date":"2021-03-10 07:15:51","endLine":145,"groupId":"22030","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseNestedData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/03/d4f874c7d2f0b678b8a698f9f13f6e4e0a1dda.src","preCode":"  public void testParseNestedData() throws Exception\n  {\n    \r\n    ProtobufInputRowParser parser = new ProtobufInputRowParser(parseSpec, \"prototest.desc\", \"ProtoTestEvent\");\n\n    \r\n    DateTime dateTime = new DateTime(2012, 7, 12, 9, 30, ISOChronology.getInstanceUTC());\n    ProtoTestEventWrapper.ProtoTestEvent event = ProtoTestEventWrapper.ProtoTestEvent.newBuilder()\n                                                                                     .setDescription(\"description\")\n                                                                                     .setEventType(ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE)\n                                                                                     .setId(4711L)\n                                                                                     .setIsValid(true)\n                                                                                     .setSomeOtherId(4712)\n                                                                                     .setTimestamp(dateTime.toString())\n                                                                                     .setSomeFloatColumn(47.11F)\n                                                                                     .setSomeIntColumn(815)\n                                                                                     .setSomeLongColumn(816L)\n                                                                                     .setFoo(ProtoTestEventWrapper.ProtoTestEvent.Foo\n                                                                                                 .newBuilder()\n                                                                                                 .setBar(\"baz\"))\n                                                                                     .addBar(ProtoTestEventWrapper.ProtoTestEvent.Foo\n                                                                                                 .newBuilder()\n                                                                                                 .setBar(\"bar0\"))\n                                                                                     .addBar(ProtoTestEventWrapper.ProtoTestEvent.Foo\n                                                                                                 .newBuilder()\n                                                                                                 .setBar(\"bar1\"))\n                                                                                     .build();\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    event.writeTo(out);\n\n    InputRow row = parser.parseBatch(ByteBuffer.wrap(out.toByteArray())).get(0);\n\n    Assert.assertEquals(dateTime.getMillis(), row.getTimestampFromEpoch());\n\n    assertDimensionEquals(row, \"id\", \"4711\");\n    assertDimensionEquals(row, \"isValid\", \"true\");\n    assertDimensionEquals(row, \"someOtherId\", \"4712\");\n    assertDimensionEquals(row, \"description\", \"description\");\n\n    assertDimensionEquals(row, \"eventType\", ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE.name());\n    assertDimensionEquals(row, \"foobar\", \"baz\");\n    assertDimensionEquals(row, \"bar0\", \"bar0\");\n\n\n    Assert.assertEquals(47.11F, row.getMetric(\"someFloatColumn\").floatValue(), 0.0);\n    Assert.assertEquals(815.0F, row.getMetric(\"someIntColumn\").floatValue(), 0.0);\n    Assert.assertEquals(816.0F, row.getMetric(\"someLongColumn\").floatValue(), 0.0);\n  }\n","realPath":"extensions-core/protobuf-extensions/src/test/java/org/apache/druid/data/input/protobuf/ProtobufInputRowParserTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2021-03-10 07:15:51","commitOrder":2,"curCode":"  public void testParseFlatData() throws Exception\n  {\n    \r\n    ProtobufInputRowParser parser = new ProtobufInputRowParser(flatParseSpec, decoder, null, null);\n\n    \r\n    DateTime dateTime = new DateTime(2012, 7, 12, 9, 30, ISOChronology.getInstanceUTC());\n    ProtoTestEventWrapper.ProtoTestEvent event = ProtoTestEventWrapper.ProtoTestEvent.newBuilder()\n            .setDescription(\"description\")\n            .setEventType(ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE)\n            .setId(4711L)\n            .setIsValid(true)\n            .setSomeOtherId(4712)\n            .setTimestamp(dateTime.toString())\n            .setSomeFloatColumn(47.11F)\n            .setSomeIntColumn(815)\n            .setSomeLongColumn(816L)\n            .build();\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    event.writeTo(out);\n\n    InputRow row = parser.parseBatch(ByteBuffer.wrap(out.toByteArray())).get(0);\n    System.out.println(row);\n\n    Assert.assertEquals(dateTime.getMillis(), row.getTimestampFromEpoch());\n\n    assertDimensionEquals(row, \"id\", \"4711\");\n    assertDimensionEquals(row, \"isValid\", \"true\");\n    assertDimensionEquals(row, \"someOtherId\", \"4712\");\n    assertDimensionEquals(row, \"description\", \"description\");\n\n\n    Assert.assertEquals(47.11F, row.getMetric(\"someFloatColumn\").floatValue(), 0.0);\n    Assert.assertEquals(815.0F, row.getMetric(\"someIntColumn\").floatValue(), 0.0);\n    Assert.assertEquals(816.0F, row.getMetric(\"someLongColumn\").floatValue(), 0.0);\n  }\n","date":"2021-03-10 07:15:51","endLine":184,"groupId":"22030","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseFlatData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/03/d4f874c7d2f0b678b8a698f9f13f6e4e0a1dda.src","preCode":"  public void testParseFlatData() throws Exception\n  {\n    \r\n    ProtobufInputRowParser parser = new ProtobufInputRowParser(flatParseSpec, \"prototest.desc\", \"ProtoTestEvent\");\n\n    \r\n    DateTime dateTime = new DateTime(2012, 7, 12, 9, 30, ISOChronology.getInstanceUTC());\n    ProtoTestEventWrapper.ProtoTestEvent event = ProtoTestEventWrapper.ProtoTestEvent.newBuilder()\n            .setDescription(\"description\")\n            .setEventType(ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE)\n            .setId(4711L)\n            .setIsValid(true)\n            .setSomeOtherId(4712)\n            .setTimestamp(dateTime.toString())\n            .setSomeFloatColumn(47.11F)\n            .setSomeIntColumn(815)\n            .setSomeLongColumn(816L)\n            .build();\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    event.writeTo(out);\n\n    InputRow row = parser.parseBatch(ByteBuffer.wrap(out.toByteArray())).get(0);\n    System.out.println(row);\n\n    Assert.assertEquals(dateTime.getMillis(), row.getTimestampFromEpoch());\n\n    assertDimensionEquals(row, \"id\", \"4711\");\n    assertDimensionEquals(row, \"isValid\", \"true\");\n    assertDimensionEquals(row, \"someOtherId\", \"4712\");\n    assertDimensionEquals(row, \"description\", \"description\");\n\n\n    Assert.assertEquals(47.11F, row.getMetric(\"someFloatColumn\").floatValue(), 0.0);\n    Assert.assertEquals(815.0F, row.getMetric(\"someIntColumn\").floatValue(), 0.0);\n    Assert.assertEquals(816.0F, row.getMetric(\"someLongColumn\").floatValue(), 0.0);\n  }\n","realPath":"extensions-core/protobuf-extensions/src/test/java/org/apache/druid/data/input/protobuf/ProtobufInputRowParserTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"36e86a2880de52e8270ffa26904f179cdd243b75","commitMessage":"@@@Add protobuf schema registry (#10839)\n\n* dd_protobuf_schema_registry\n\n* change licese\n\n* delete some annotation\n\n* nodify tests\n\n* delete extra exception\n\n* add licenses\n\n* add descriptor and protoMessageType in ProtobufInputRowParser for adopt to old version\n\n* seperate kafka-protobuf-provider\n\n* modify protobuf.md\n\n* refine protobuf.md\n\n* add config and header\n\n* bug fixed\n\nCo-authored-by: yuanyi <yuanyi@freewheel.tv>","date":"2021-03-10 07:15:51","modifiedFileCount":"3","status":"M","submitter":"Yi Yuan"},{"authorTime":"2021-06-07 17:49:39","codes":[{"authorDate":"2021-06-07 17:49:39","commitOrder":3,"curCode":"  public void testParseNestedData() throws Exception\n  {\n    \r\n    ProtobufInputRowParser parser = new ProtobufInputRowParser(parseSpec, decoder, null, null);\n\n    \r\n    DateTime dateTime = new DateTime(2012, 7, 12, 9, 30, ISOChronology.getInstanceUTC());\n\n    ProtoTestEventWrapper.ProtoTestEvent event = buildNestedData(dateTime);\n\n    InputRow row = parser.parseBatch(toByteBuffer(event)).get(0);\n    verifyNestedData(row, dateTime);\n  }\n","date":"2021-06-07 17:49:39","endLine":126,"groupId":"102630","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testParseNestedData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7d/0b1cd39770aa86a1dfcf31bc92a13c0eaa400d.src","preCode":"  public void testParseNestedData() throws Exception\n  {\n    \r\n    ProtobufInputRowParser parser = new ProtobufInputRowParser(parseSpec, decoder, null, null);\n\n    \r\n    DateTime dateTime = new DateTime(2012, 7, 12, 9, 30, ISOChronology.getInstanceUTC());\n    ProtoTestEventWrapper.ProtoTestEvent event = ProtoTestEventWrapper.ProtoTestEvent.newBuilder()\n                                                                                     .setDescription(\"description\")\n                                                                                     .setEventType(ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE)\n                                                                                     .setId(4711L)\n                                                                                     .setIsValid(true)\n                                                                                     .setSomeOtherId(4712)\n                                                                                     .setTimestamp(dateTime.toString())\n                                                                                     .setSomeFloatColumn(47.11F)\n                                                                                     .setSomeIntColumn(815)\n                                                                                     .setSomeLongColumn(816L)\n                                                                                     .setFoo(ProtoTestEventWrapper.ProtoTestEvent.Foo\n                                                                                                 .newBuilder()\n                                                                                                 .setBar(\"baz\"))\n                                                                                     .addBar(ProtoTestEventWrapper.ProtoTestEvent.Foo\n                                                                                                 .newBuilder()\n                                                                                                 .setBar(\"bar0\"))\n                                                                                     .addBar(ProtoTestEventWrapper.ProtoTestEvent.Foo\n                                                                                                 .newBuilder()\n                                                                                                 .setBar(\"bar1\"))\n                                                                                     .build();\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    event.writeTo(out);\n\n    InputRow row = parser.parseBatch(ByteBuffer.wrap(out.toByteArray())).get(0);\n\n    Assert.assertEquals(dateTime.getMillis(), row.getTimestampFromEpoch());\n\n    assertDimensionEquals(row, \"id\", \"4711\");\n    assertDimensionEquals(row, \"isValid\", \"true\");\n    assertDimensionEquals(row, \"someOtherId\", \"4712\");\n    assertDimensionEquals(row, \"description\", \"description\");\n\n    assertDimensionEquals(row, \"eventType\", ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE.name());\n    assertDimensionEquals(row, \"foobar\", \"baz\");\n    assertDimensionEquals(row, \"bar0\", \"bar0\");\n\n\n    Assert.assertEquals(47.11F, row.getMetric(\"someFloatColumn\").floatValue(), 0.0);\n    Assert.assertEquals(815.0F, row.getMetric(\"someIntColumn\").floatValue(), 0.0);\n    Assert.assertEquals(816.0F, row.getMetric(\"someLongColumn\").floatValue(), 0.0);\n  }\n","realPath":"extensions-core/protobuf-extensions/src/test/java/org/apache/druid/data/input/protobuf/ProtobufInputRowParserTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2021-06-07 17:49:39","commitOrder":3,"curCode":"  public void testParseFlatData() throws Exception\n  {\n    \r\n    ProtobufInputRowParser parser = new ProtobufInputRowParser(flatParseSpec, decoder, null, null);\n\n    \r\n    DateTime dateTime = new DateTime(2012, 7, 12, 9, 30, ISOChronology.getInstanceUTC());\n    ProtoTestEventWrapper.ProtoTestEvent event = buildFlatData(dateTime);\n\n    InputRow row = parser.parseBatch(toByteBuffer(event)).get(0);\n    verifyFlatData(row, dateTime);\n  }\n","date":"2021-06-07 17:49:39","endLine":140,"groupId":"102630","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testParseFlatData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7d/0b1cd39770aa86a1dfcf31bc92a13c0eaa400d.src","preCode":"  public void testParseFlatData() throws Exception\n  {\n    \r\n    ProtobufInputRowParser parser = new ProtobufInputRowParser(flatParseSpec, decoder, null, null);\n\n    \r\n    DateTime dateTime = new DateTime(2012, 7, 12, 9, 30, ISOChronology.getInstanceUTC());\n    ProtoTestEventWrapper.ProtoTestEvent event = ProtoTestEventWrapper.ProtoTestEvent.newBuilder()\n            .setDescription(\"description\")\n            .setEventType(ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE)\n            .setId(4711L)\n            .setIsValid(true)\n            .setSomeOtherId(4712)\n            .setTimestamp(dateTime.toString())\n            .setSomeFloatColumn(47.11F)\n            .setSomeIntColumn(815)\n            .setSomeLongColumn(816L)\n            .build();\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    event.writeTo(out);\n\n    InputRow row = parser.parseBatch(ByteBuffer.wrap(out.toByteArray())).get(0);\n    System.out.println(row);\n\n    Assert.assertEquals(dateTime.getMillis(), row.getTimestampFromEpoch());\n\n    assertDimensionEquals(row, \"id\", \"4711\");\n    assertDimensionEquals(row, \"isValid\", \"true\");\n    assertDimensionEquals(row, \"someOtherId\", \"4712\");\n    assertDimensionEquals(row, \"description\", \"description\");\n\n\n    Assert.assertEquals(47.11F, row.getMetric(\"someFloatColumn\").floatValue(), 0.0);\n    Assert.assertEquals(815.0F, row.getMetric(\"someIntColumn\").floatValue(), 0.0);\n    Assert.assertEquals(816.0F, row.getMetric(\"someLongColumn\").floatValue(), 0.0);\n  }\n","realPath":"extensions-core/protobuf-extensions/src/test/java/org/apache/druid/data/input/protobuf/ProtobufInputRowParserTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"44d629319d4fa274276f11951b0141c420e073c4","commitMessage":"@@@handle timestamps of complex types when parsing protobuf messages (#11293)\n\n* handle timestamps correctly when parsing protobuf\n\n* Add timestamp handling to ProtobufReader\n\n* disable checkstyle for generated sourcecode\n\n* Fix test\n\n* try this\n\n* refactor tests","date":"2021-06-07 17:49:39","modifiedFileCount":"6","status":"M","submitter":"Abhishek Agarwal"}]
