[{"authorTime":"2021-04-15 01:49:27","codes":[{"authorDate":"2021-04-15 01:49:27","commitOrder":1,"curCode":"  public void testTwoSemiJoinsSimultaneously(Map<String, Object> queryContext) throws Exception\n  {\n    \r\n    if (!isRewriteJoinToFilter(queryContext)) {\n      cannotVectorize();\n    }\n\n    testQuery(\n        \"SELECT dim1, COUNT(*) FROM foo\\n\"\n        + \"WHERE dim1 IN ('abc', 'def')\"\n        + \"AND __time IN (SELECT MAX(__time) FROM foo WHERE cnt = 1)\\n\"\n        + \"AND __time IN (SELECT MAX(__time) FROM foo WHERE cnt <> 2)\\n\"\n        + \"GROUP BY 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                join(\n                                    new TableDataSource(CalciteTests.DATASOURCE1),\n                                    new QueryDataSource(\n                                        Druids.newTimeseriesQueryBuilder()\n                                              .dataSource(CalciteTests.DATASOURCE1)\n                                              .intervals(querySegmentSpec(Filtration.eternity()))\n                                              .granularity(Granularities.ALL)\n                                              .filters(selector(\"cnt\", \"1\", null))\n                                              .aggregators(new LongMaxAggregatorFactory(\"a0\", \"__time\"))\n                                              .context(TIMESERIES_CONTEXT_DEFAULT)\n                                              .build()\n                                    ),\n                                    \"j0.\",\n                                    \"(\\\"__time\\\" == \\\"j0.a0\\\")\",\n                                    JoinType.INNER\n                                ),\n                                new QueryDataSource(\n                                    Druids.newTimeseriesQueryBuilder()\n                                          .dataSource(CalciteTests.DATASOURCE1)\n                                          .intervals(querySegmentSpec(Filtration.eternity()))\n                                          .granularity(Granularities.ALL)\n                                          .filters(not(selector(\"cnt\", \"2\", null)))\n                                          .aggregators(new LongMaxAggregatorFactory(\"a0\", \"__time\"))\n                                          .context(TIMESERIES_CONTEXT_DEFAULT)\n                                          .build()\n                                ),\n                                \"_j0.\",\n                                \"(\\\"__time\\\" == \\\"_j0.a0\\\")\",\n                                JoinType.INNER\n                            )\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(in(\"dim1\", ImmutableList.of(\"abc\", \"def\"), null))\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(new Object[]{\"abc\", 1L})\n    );\n  }\n","date":"2021-04-15 01:49:27","endLine":14012,"groupId":"19049","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTwoSemiJoinsSimultaneously","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e4/7a89a5f784d8e7b5f15645a5dacf38a7460d1d.src","preCode":"  public void testTwoSemiJoinsSimultaneously(Map<String, Object> queryContext) throws Exception\n  {\n    \r\n    if (!isRewriteJoinToFilter(queryContext)) {\n      cannotVectorize();\n    }\n\n    testQuery(\n        \"SELECT dim1, COUNT(*) FROM foo\\n\"\n        + \"WHERE dim1 IN ('abc', 'def')\"\n        + \"AND __time IN (SELECT MAX(__time) FROM foo WHERE cnt = 1)\\n\"\n        + \"AND __time IN (SELECT MAX(__time) FROM foo WHERE cnt <> 2)\\n\"\n        + \"GROUP BY 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                join(\n                                    new TableDataSource(CalciteTests.DATASOURCE1),\n                                    new QueryDataSource(\n                                        Druids.newTimeseriesQueryBuilder()\n                                              .dataSource(CalciteTests.DATASOURCE1)\n                                              .intervals(querySegmentSpec(Filtration.eternity()))\n                                              .granularity(Granularities.ALL)\n                                              .filters(selector(\"cnt\", \"1\", null))\n                                              .aggregators(new LongMaxAggregatorFactory(\"a0\", \"__time\"))\n                                              .context(TIMESERIES_CONTEXT_DEFAULT)\n                                              .build()\n                                    ),\n                                    \"j0.\",\n                                    \"(\\\"__time\\\" == \\\"j0.a0\\\")\",\n                                    JoinType.INNER\n                                ),\n                                new QueryDataSource(\n                                    Druids.newTimeseriesQueryBuilder()\n                                          .dataSource(CalciteTests.DATASOURCE1)\n                                          .intervals(querySegmentSpec(Filtration.eternity()))\n                                          .granularity(Granularities.ALL)\n                                          .filters(not(selector(\"cnt\", \"2\", null)))\n                                          .aggregators(new LongMaxAggregatorFactory(\"a0\", \"__time\"))\n                                          .context(TIMESERIES_CONTEXT_DEFAULT)\n                                          .build()\n                                ),\n                                \"_j0.\",\n                                \"(\\\"__time\\\" == \\\"_j0.a0\\\")\",\n                                JoinType.INNER\n                            )\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(in(\"dim1\", ImmutableList.of(\"abc\", \"def\"), null))\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(new Object[]{\"abc\", 1L})\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":13953,"status":"B"},{"authorDate":"2021-04-15 01:49:27","commitOrder":1,"curCode":"  public void testSemiAndAntiJoinSimultaneouslyUsingExplicitJoins(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim1, COUNT(*) FROM\\n\"\n        + \"foo\\n\"\n        + \"INNER JOIN (SELECT MAX(__time) t FROM foo) t0 on t0.t = foo.__time\\n\"\n        + \"LEFT JOIN (SELECT MIN(__time) t FROM foo) t1 on t1.t = foo.__time\\n\"\n        + \"WHERE dim1 IN ('abc', 'def') AND t1.t is null\\n\"\n        + \"GROUP BY 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                join(\n                                    new TableDataSource(CalciteTests.DATASOURCE1),\n                                    new QueryDataSource(\n                                        Druids.newTimeseriesQueryBuilder()\n                                              .dataSource(CalciteTests.DATASOURCE1)\n                                              .intervals(querySegmentSpec(Filtration.eternity()))\n                                              .granularity(Granularities.ALL)\n                                              .aggregators(new LongMaxAggregatorFactory(\"a0\", \"__time\"))\n                                              .context(TIMESERIES_CONTEXT_DEFAULT)\n                                              .build()\n                                    ),\n                                    \"j0.\",\n                                    \"(\\\"__time\\\" == \\\"j0.a0\\\")\",\n                                    JoinType.INNER\n                                ),\n                                new QueryDataSource(\n                                    Druids.newTimeseriesQueryBuilder()\n                                          .dataSource(CalciteTests.DATASOURCE1)\n                                          .intervals(querySegmentSpec(Filtration.eternity()))\n                                          .granularity(Granularities.ALL)\n                                          .aggregators(new LongMinAggregatorFactory(\"a0\", \"__time\"))\n                                          .context(TIMESERIES_CONTEXT_DEFAULT)\n                                          .build()\n                                ),\n                                \"_j0.\",\n                                \"(\\\"__time\\\" == \\\"_j0.a0\\\")\",\n                                JoinType.LEFT\n                            )\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(\n                            and(\n                                in(\"dim1\", ImmutableList.of(\"abc\", \"def\"), null),\n                                selector(\"_j0.a0\", null, null)\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(new Object[]{\"abc\", 1L})\n    );\n  }\n","date":"2021-04-15 01:49:27","endLine":14177,"groupId":"15444","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSemiAndAntiJoinSimultaneouslyUsingExplicitJoins","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e4/7a89a5f784d8e7b5f15645a5dacf38a7460d1d.src","preCode":"  public void testSemiAndAntiJoinSimultaneouslyUsingExplicitJoins(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim1, COUNT(*) FROM\\n\"\n        + \"foo\\n\"\n        + \"INNER JOIN (SELECT MAX(__time) t FROM foo) t0 on t0.t = foo.__time\\n\"\n        + \"LEFT JOIN (SELECT MIN(__time) t FROM foo) t1 on t1.t = foo.__time\\n\"\n        + \"WHERE dim1 IN ('abc', 'def') AND t1.t is null\\n\"\n        + \"GROUP BY 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                join(\n                                    new TableDataSource(CalciteTests.DATASOURCE1),\n                                    new QueryDataSource(\n                                        Druids.newTimeseriesQueryBuilder()\n                                              .dataSource(CalciteTests.DATASOURCE1)\n                                              .intervals(querySegmentSpec(Filtration.eternity()))\n                                              .granularity(Granularities.ALL)\n                                              .aggregators(new LongMaxAggregatorFactory(\"a0\", \"__time\"))\n                                              .context(TIMESERIES_CONTEXT_DEFAULT)\n                                              .build()\n                                    ),\n                                    \"j0.\",\n                                    \"(\\\"__time\\\" == \\\"j0.a0\\\")\",\n                                    JoinType.INNER\n                                ),\n                                new QueryDataSource(\n                                    Druids.newTimeseriesQueryBuilder()\n                                          .dataSource(CalciteTests.DATASOURCE1)\n                                          .intervals(querySegmentSpec(Filtration.eternity()))\n                                          .granularity(Granularities.ALL)\n                                          .aggregators(new LongMinAggregatorFactory(\"a0\", \"__time\"))\n                                          .context(TIMESERIES_CONTEXT_DEFAULT)\n                                          .build()\n                                ),\n                                \"_j0.\",\n                                \"(\\\"__time\\\" == \\\"_j0.a0\\\")\",\n                                JoinType.LEFT\n                            )\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(\n                            and(\n                                in(\"dim1\", ImmutableList.of(\"abc\", \"def\"), null),\n                                selector(\"_j0.a0\", null, null)\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(new Object[]{\"abc\", 1L})\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":14117,"status":"B"}],"commitId":"202c78c8f32bd3ec5e70e021b1494d878f38d678","commitMessage":"@@@Enable rewriting certain inner joins as filters. (#11068)\n\n* Enable rewriting certain inner joins as filters.\n\nThe main logic for doing the rewrite is in JoinableFactoryWrapper's\nsegmentMapFn method. The requirements are:\n\n- It must be an inner equi-join.\n- The right-hand columns referenced by the condition must not contain any\n  duplicate values. (If they did.  the inner join would not be guaranteed\n  to return at most one row for each left-hand-side row.)\n- No columns from the right-hand side can be used by anything other than\n  the join condition itself.\n\nHashJoinSegmentStorageAdapter is also modified to pass through to\nthe base adapter (even allowing vectorization!) in the case where 100%\nof join clauses could be rewritten as filters.\n\nIn support of this goal:\n\n- Add Query getRequiredColumns() method to help us figure out whether\n  the right-hand side of a join datasource is being used or not.\n- Add JoinConditionAnalysis getRequiredColumns() method to help us\n  figure out if the right-hand side of a join is being used by later\n  join clauses acting on the same base.\n- Add Joinable getNonNullColumnValuesIfAllUnique method to enable\n  retrieving the set of values that will form the \"in\" filter.\n- Add LookupExtractor canGetKeySet() and keySet() methods to support\n  LookupJoinable in its efforts to implement the new Joinable method.\n- Add \"enableRewriteJoinToFilter\" feature flag to\n  JoinFilterRewriteConfig. The default is disabled.\n\n* Test improvements.\n\n* Test fixes.\n\n* Avoid slow size() call.\n\n* Remove invalid test.\n\n* Fix style.\n\n* Fix mistaken default.\n\n* Small fixes.\n\n* Fix logic error.","date":"2021-04-15 01:49:27","modifiedFileCount":"38","status":"B","submitter":"Gian Merlino"},{"authorTime":"2021-05-11 01:13:37","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":2,"curCode":"  public void testTwoSemiJoinsSimultaneously(Map<String, Object> queryContext) throws Exception\n  {\n    \r\n    if (!isRewriteJoinToFilter(queryContext)) {\n      cannotVectorize();\n    }\n\n    testQuery(\n        \"SELECT dim1, COUNT(*) FROM foo\\n\"\n        + \"WHERE dim1 IN ('abc', 'def')\"\n        + \"AND __time IN (SELECT MAX(__time) FROM foo WHERE cnt = 1)\\n\"\n        + \"AND __time IN (SELECT MAX(__time) FROM foo WHERE cnt <> 2)\\n\"\n        + \"GROUP BY 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                join(\n                                    new TableDataSource(CalciteTests.DATASOURCE1),\n                                    new QueryDataSource(\n                                        Druids.newTimeseriesQueryBuilder()\n                                              .dataSource(CalciteTests.DATASOURCE1)\n                                              .intervals(querySegmentSpec(Filtration.eternity()))\n                                              .granularity(Granularities.ALL)\n                                              .filters(selector(\"cnt\", \"1\", null))\n                                              .aggregators(new LongMaxAggregatorFactory(\"a0\", \"__time\"))\n                                              .context(QUERY_CONTEXT_DEFAULT)\n                                              .build()\n                                    ),\n                                    \"j0.\",\n                                    \"(\\\"__time\\\" == \\\"j0.a0\\\")\",\n                                    JoinType.INNER\n                                ),\n                                new QueryDataSource(\n                                    Druids.newTimeseriesQueryBuilder()\n                                          .dataSource(CalciteTests.DATASOURCE1)\n                                          .intervals(querySegmentSpec(Filtration.eternity()))\n                                          .granularity(Granularities.ALL)\n                                          .filters(not(selector(\"cnt\", \"2\", null)))\n                                          .aggregators(new LongMaxAggregatorFactory(\"a0\", \"__time\"))\n                                          .context(QUERY_CONTEXT_DEFAULT)\n                                          .build()\n                                ),\n                                \"_j0.\",\n                                \"(\\\"__time\\\" == \\\"_j0.a0\\\")\",\n                                JoinType.INNER\n                            )\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(in(\"dim1\", ImmutableList.of(\"abc\", \"def\"), null))\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(new Object[]{\"abc\", 1L})\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":14470,"groupId":"101798","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTwoSemiJoinsSimultaneously","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testTwoSemiJoinsSimultaneously(Map<String, Object> queryContext) throws Exception\n  {\n    \r\n    if (!isRewriteJoinToFilter(queryContext)) {\n      cannotVectorize();\n    }\n\n    testQuery(\n        \"SELECT dim1, COUNT(*) FROM foo\\n\"\n        + \"WHERE dim1 IN ('abc', 'def')\"\n        + \"AND __time IN (SELECT MAX(__time) FROM foo WHERE cnt = 1)\\n\"\n        + \"AND __time IN (SELECT MAX(__time) FROM foo WHERE cnt <> 2)\\n\"\n        + \"GROUP BY 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                join(\n                                    new TableDataSource(CalciteTests.DATASOURCE1),\n                                    new QueryDataSource(\n                                        Druids.newTimeseriesQueryBuilder()\n                                              .dataSource(CalciteTests.DATASOURCE1)\n                                              .intervals(querySegmentSpec(Filtration.eternity()))\n                                              .granularity(Granularities.ALL)\n                                              .filters(selector(\"cnt\", \"1\", null))\n                                              .aggregators(new LongMaxAggregatorFactory(\"a0\", \"__time\"))\n                                              .context(TIMESERIES_CONTEXT_DEFAULT)\n                                              .build()\n                                    ),\n                                    \"j0.\",\n                                    \"(\\\"__time\\\" == \\\"j0.a0\\\")\",\n                                    JoinType.INNER\n                                ),\n                                new QueryDataSource(\n                                    Druids.newTimeseriesQueryBuilder()\n                                          .dataSource(CalciteTests.DATASOURCE1)\n                                          .intervals(querySegmentSpec(Filtration.eternity()))\n                                          .granularity(Granularities.ALL)\n                                          .filters(not(selector(\"cnt\", \"2\", null)))\n                                          .aggregators(new LongMaxAggregatorFactory(\"a0\", \"__time\"))\n                                          .context(TIMESERIES_CONTEXT_DEFAULT)\n                                          .build()\n                                ),\n                                \"_j0.\",\n                                \"(\\\"__time\\\" == \\\"_j0.a0\\\")\",\n                                JoinType.INNER\n                            )\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(in(\"dim1\", ImmutableList.of(\"abc\", \"def\"), null))\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(new Object[]{\"abc\", 1L})\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":14411,"status":"M"},{"authorDate":"2021-05-11 01:13:37","commitOrder":2,"curCode":"  public void testSemiAndAntiJoinSimultaneouslyUsingExplicitJoins(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim1, COUNT(*) FROM\\n\"\n        + \"foo\\n\"\n        + \"INNER JOIN (SELECT MAX(__time) t FROM foo) t0 on t0.t = foo.__time\\n\"\n        + \"LEFT JOIN (SELECT MIN(__time) t FROM foo) t1 on t1.t = foo.__time\\n\"\n        + \"WHERE dim1 IN ('abc', 'def') AND t1.t is null\\n\"\n        + \"GROUP BY 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                join(\n                                    new TableDataSource(CalciteTests.DATASOURCE1),\n                                    new QueryDataSource(\n                                        Druids.newTimeseriesQueryBuilder()\n                                              .dataSource(CalciteTests.DATASOURCE1)\n                                              .intervals(querySegmentSpec(Filtration.eternity()))\n                                              .granularity(Granularities.ALL)\n                                              .aggregators(new LongMaxAggregatorFactory(\"a0\", \"__time\"))\n                                              .context(QUERY_CONTEXT_DEFAULT)\n                                              .build()\n                                    ),\n                                    \"j0.\",\n                                    \"(\\\"__time\\\" == \\\"j0.a0\\\")\",\n                                    JoinType.INNER\n                                ),\n                                new QueryDataSource(\n                                    Druids.newTimeseriesQueryBuilder()\n                                          .dataSource(CalciteTests.DATASOURCE1)\n                                          .intervals(querySegmentSpec(Filtration.eternity()))\n                                          .granularity(Granularities.ALL)\n                                          .aggregators(new LongMinAggregatorFactory(\"a0\", \"__time\"))\n                                          .context(QUERY_CONTEXT_DEFAULT)\n                                          .build()\n                                ),\n                                \"_j0.\",\n                                \"(\\\"__time\\\" == \\\"_j0.a0\\\")\",\n                                JoinType.LEFT\n                            )\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(\n                            and(\n                                in(\"dim1\", ImmutableList.of(\"abc\", \"def\"), null),\n                                selector(\"_j0.a0\", null, null)\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(new Object[]{\"abc\", 1L})\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":14635,"groupId":"101798","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSemiAndAntiJoinSimultaneouslyUsingExplicitJoins","params":"(Map<String@Object>queryContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testSemiAndAntiJoinSimultaneouslyUsingExplicitJoins(Map<String, Object> queryContext) throws Exception\n  {\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim1, COUNT(*) FROM\\n\"\n        + \"foo\\n\"\n        + \"INNER JOIN (SELECT MAX(__time) t FROM foo) t0 on t0.t = foo.__time\\n\"\n        + \"LEFT JOIN (SELECT MIN(__time) t FROM foo) t1 on t1.t = foo.__time\\n\"\n        + \"WHERE dim1 IN ('abc', 'def') AND t1.t is null\\n\"\n        + \"GROUP BY 1\",\n        queryContext,\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(\n                            join(\n                                join(\n                                    new TableDataSource(CalciteTests.DATASOURCE1),\n                                    new QueryDataSource(\n                                        Druids.newTimeseriesQueryBuilder()\n                                              .dataSource(CalciteTests.DATASOURCE1)\n                                              .intervals(querySegmentSpec(Filtration.eternity()))\n                                              .granularity(Granularities.ALL)\n                                              .aggregators(new LongMaxAggregatorFactory(\"a0\", \"__time\"))\n                                              .context(TIMESERIES_CONTEXT_DEFAULT)\n                                              .build()\n                                    ),\n                                    \"j0.\",\n                                    \"(\\\"__time\\\" == \\\"j0.a0\\\")\",\n                                    JoinType.INNER\n                                ),\n                                new QueryDataSource(\n                                    Druids.newTimeseriesQueryBuilder()\n                                          .dataSource(CalciteTests.DATASOURCE1)\n                                          .intervals(querySegmentSpec(Filtration.eternity()))\n                                          .granularity(Granularities.ALL)\n                                          .aggregators(new LongMinAggregatorFactory(\"a0\", \"__time\"))\n                                          .context(TIMESERIES_CONTEXT_DEFAULT)\n                                          .build()\n                                ),\n                                \"_j0.\",\n                                \"(\\\"__time\\\" == \\\"_j0.a0\\\")\",\n                                JoinType.LEFT\n                            )\n                        )\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimFilter(\n                            and(\n                                in(\"dim1\", ImmutableList.of(\"abc\", \"def\"), null),\n                                selector(\"_j0.a0\", null, null)\n                            )\n                        )\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\", ValueType.STRING)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setContext(queryContext)\n                        .build()\n        ),\n        ImmutableList.of(new Object[]{\"abc\", 1L})\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":14575,"status":"M"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
