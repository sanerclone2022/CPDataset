[{"authorTime":"2020-06-19 08:32:10","codes":[{"authorDate":"2020-03-31 02:58:16","commitOrder":3,"curCode":"  public void testTimeseriesOnTable()\n  {\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(FOO)\n              .granularity(Granularities.ALL)\n              .intervals(Collections.singletonList(INTERVAL))\n              .aggregators(new LongSumAggregatorFactory(\"sum\", \"n\"))\n              .context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL, false))\n              .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(ExpectedQuery.cluster(query)),\n        ImmutableList.of(new Object[]{INTERVAL.getStartMillis(), 10L})\n    );\n\n    Assert.assertEquals(1, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(1, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(1, scheduler.getTotalReleased().get());\n  }\n","date":"2020-03-31 02:58:16","endLine":200,"groupId":"7473","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeseriesOnTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c9/8c7768decd9c3468d713a374f74f497bb2f70c.src","preCode":"  public void testTimeseriesOnTable()\n  {\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(FOO)\n              .granularity(Granularities.ALL)\n              .intervals(Collections.singletonList(INTERVAL))\n              .aggregators(new LongSumAggregatorFactory(\"sum\", \"n\"))\n              .context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL, false))\n              .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(ExpectedQuery.cluster(query)),\n        ImmutableList.of(new Object[]{INTERVAL.getStartMillis(), 10L})\n    );\n\n    Assert.assertEquals(1, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(1, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(1, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"NB"},{"authorDate":"2020-06-19 08:32:10","commitOrder":3,"curCode":"  public void testTimeseriesOnAutomaticGlobalTable()\n  {\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(GLOBAL)\n              .granularity(Granularities.ALL)\n              .intervals(Collections.singletonList(INTERVAL))\n              .aggregators(new LongSumAggregatorFactory(\"sum\", \"n\"))\n              .context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL, false))\n              .build();\n\n    \r\n    final TimeseriesQuery expectedClusterQuery =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new GlobalTableDataSource(GLOBAL))\n              .granularity(Granularities.ALL)\n              .intervals(Collections.singletonList(INTERVAL))\n              .aggregators(new LongSumAggregatorFactory(\"sum\", \"n\"))\n              .context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL, false))\n              .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(ExpectedQuery.cluster(expectedClusterQuery)),\n        ImmutableList.of(new Object[]{INTERVAL.getStartMillis(), 10L})\n    );\n\n    Assert.assertEquals(1, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(1, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(1, scheduler.getTotalReleased().get());\n  }\n","date":"2020-06-19 08:32:10","endLine":258,"groupId":"7473","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeseriesOnAutomaticGlobalTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/56/5fee9fddd941cbd60899859d94b55bc02b3cb1.src","preCode":"  public void testTimeseriesOnAutomaticGlobalTable()\n  {\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(GLOBAL)\n              .granularity(Granularities.ALL)\n              .intervals(Collections.singletonList(INTERVAL))\n              .aggregators(new LongSumAggregatorFactory(\"sum\", \"n\"))\n              .context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL, false))\n              .build();\n\n    \r\n    final TimeseriesQuery expectedClusterQuery =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new GlobalTableDataSource(GLOBAL))\n              .granularity(Granularities.ALL)\n              .intervals(Collections.singletonList(INTERVAL))\n              .aggregators(new LongSumAggregatorFactory(\"sum\", \"n\"))\n              .context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL, false))\n              .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(ExpectedQuery.cluster(expectedClusterQuery)),\n        ImmutableList.of(new Object[]{INTERVAL.getStartMillis(), 10L})\n    );\n\n    Assert.assertEquals(1, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(1, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(1, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"B"}],"commitId":"b5e6569d2c1b52abcf41495a01fe0dc383ab037c","commitMessage":"@@@global table only if joinable (#10041)\n\n* global table if only joinable\n\n* oops\n\n* fix style.  add more tests\n\n* Update sql/src/test/java/org/apache/druid/sql/calcite/schema/DruidSchemaTest.java\n\n* better information schema columns.  distinguish broadcast from joinable\n\n* fix javadoc\n\n* fix mistake\n\nCo-authored-by: Jihoon Son <jihoonson@apache.org>","date":"2020-06-19 08:32:10","modifiedFileCount":"27","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-07-02 05:02:21","codes":[{"authorDate":"2020-07-02 05:02:21","commitOrder":4,"curCode":"  public void testTimeseriesOnTable()\n  {\n    final TimeseriesQuery query =\n        (TimeseriesQuery) Druids.newTimeseriesQueryBuilder()\n                                .dataSource(FOO)\n                                .granularity(Granularities.ALL)\n                                .intervals(Collections.singletonList(INTERVAL))\n                                .aggregators(new LongSumAggregatorFactory(\"sum\", \"n\"))\n                                .context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL, false))\n                                .build()\n                                .withId(UUID.randomUUID().toString());\n\n    testQuery(\n        query,\n        ImmutableList.of(ExpectedQuery.cluster(query)),\n        ImmutableList.of(new Object[]{INTERVAL.getStartMillis(), 10L})\n    );\n\n    Assert.assertEquals(1, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(1, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(1, scheduler.getTotalReleased().get());\n  }\n","date":"2020-07-02 05:02:21","endLine":226,"groupId":"10670","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeseriesOnTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/e75008d93c8fc7b3635e3a9860a830f48fb950.src","preCode":"  public void testTimeseriesOnTable()\n  {\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(FOO)\n              .granularity(Granularities.ALL)\n              .intervals(Collections.singletonList(INTERVAL))\n              .aggregators(new LongSumAggregatorFactory(\"sum\", \"n\"))\n              .context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL, false))\n              .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(ExpectedQuery.cluster(query)),\n        ImmutableList.of(new Object[]{INTERVAL.getStartMillis(), 10L})\n    );\n\n    Assert.assertEquals(1, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(1, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(1, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"},{"authorDate":"2020-07-02 05:02:21","commitOrder":4,"curCode":"  public void testTimeseriesOnAutomaticGlobalTable()\n  {\n    final TimeseriesQuery query =\n        (TimeseriesQuery) Druids.newTimeseriesQueryBuilder()\n                                .dataSource(GLOBAL)\n                                .granularity(Granularities.ALL)\n                                .intervals(Collections.singletonList(INTERVAL))\n                                .aggregators(new LongSumAggregatorFactory(\"sum\", \"n\"))\n                                .context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL, false))\n                                .build()\n                                .withId(\"queryId\");\n\n    \r\n    final TimeseriesQuery expectedClusterQuery =\n        (TimeseriesQuery) Druids.newTimeseriesQueryBuilder()\n                                .dataSource(new GlobalTableDataSource(GLOBAL))\n                                .granularity(Granularities.ALL)\n                                .intervals(Collections.singletonList(INTERVAL))\n                                .aggregators(new LongSumAggregatorFactory(\"sum\", \"n\"))\n                                .context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL, false))\n                                .build()\n                                .withId(\"queryId\");\n\n    testQuery(\n        query,\n        ImmutableList.of(ExpectedQuery.cluster(expectedClusterQuery)),\n        ImmutableList.of(new Object[]{INTERVAL.getStartMillis(), 10L})\n    );\n\n    Assert.assertEquals(1, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(1, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(1, scheduler.getTotalReleased().get());\n  }\n","date":"2020-07-02 05:02:21","endLine":262,"groupId":"10670","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeseriesOnAutomaticGlobalTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/e75008d93c8fc7b3635e3a9860a830f48fb950.src","preCode":"  public void testTimeseriesOnAutomaticGlobalTable()\n  {\n    final TimeseriesQuery query =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(GLOBAL)\n              .granularity(Granularities.ALL)\n              .intervals(Collections.singletonList(INTERVAL))\n              .aggregators(new LongSumAggregatorFactory(\"sum\", \"n\"))\n              .context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL, false))\n              .build();\n\n    \r\n    final TimeseriesQuery expectedClusterQuery =\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(new GlobalTableDataSource(GLOBAL))\n              .granularity(Granularities.ALL)\n              .intervals(Collections.singletonList(INTERVAL))\n              .aggregators(new LongSumAggregatorFactory(\"sum\", \"n\"))\n              .context(ImmutableMap.of(TimeseriesQuery.CTX_GRAND_TOTAL, false))\n              .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(ExpectedQuery.cluster(expectedClusterQuery)),\n        ImmutableList.of(new Object[]{INTERVAL.getStartMillis(), 10L})\n    );\n\n    Assert.assertEquals(1, scheduler.getTotalRun().get());\n    Assert.assertEquals(1, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(1, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(1, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"657f8ee80fa86779cf26a01072814b1530277aa7","commitMessage":"@@@Fix RetryQueryRunner to actually do the job (#10082)\n\n* Fix RetryQueryRunner to actually do the job\n\n* more javadoc\n\n* fix test and checkstyle\n\n* don't combine for testing\n\n* address comments\n\n* fix unit tests\n\n* always initialize response context in cachingClusteredClient\n\n* fix subquery\n\n* address comments\n\n* fix test\n\n* query id for builders\n\n* make queryId optional in the builders and ClusterQueryResult\n\n* fix test\n\n* suppress tests and unused methods\n\n* exclude groupBy builder\n\n* fix jacoco exclusion\n\n* add tests for builders\n\n* address comments\n\n* don't truncate","date":"2020-07-02 05:02:21","modifiedFileCount":"33","status":"M","submitter":"Jihoon Son"}]
