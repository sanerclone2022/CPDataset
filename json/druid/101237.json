[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void announce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    try {\n      log.info(\"Announcing [%s].\", discoveryDruidNode);\n\n      announcer.announce(\n          ZKPaths.makePath(\n              config.getInternalDiscoveryPath(),\n              discoveryDruidNode.getNodeType(),\n              discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n          ),\n          jsonMapper.writeValueAsBytes(discoveryDruidNode)\n      );\n\n      log.info(\"Announced [%s].\", discoveryDruidNode);\n    }\n    catch (JsonProcessingException e) {\n      throw Throwables.propagate(e);\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":76,"groupId":"6415","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"announce","params":"(DiscoveryDruidNodediscoveryDruidNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/26/adb758559b9e5ee47743f14740a42639e3c571.src","preCode":"  public void announce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    try {\n      log.info(\"Announcing [%s].\", discoveryDruidNode);\n\n      announcer.announce(\n          ZKPaths.makePath(\n              config.getInternalDiscoveryPath(),\n              discoveryDruidNode.getNodeType(),\n              discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n          ),\n          jsonMapper.writeValueAsBytes(discoveryDruidNode)\n      );\n\n      log.info(\"Announced [%s].\", discoveryDruidNode);\n    }\n    catch (JsonProcessingException e) {\n      throw Throwables.propagate(e);\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/curator/discovery/CuratorDruidNodeAnnouncer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void unannounce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    log.info(\"Unannouncing [%s].\", discoveryDruidNode);\n\n    announcer.unannounce(\n        ZKPaths.makePath(\n            config.getInternalDiscoveryPath(),\n            discoveryDruidNode.getNodeType(),\n            discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n        )\n    );\n\n    log.info(\"Unannounced [%s].\", discoveryDruidNode);\n  }\n","date":"2018-08-31 00:56:26","endLine":92,"groupId":"6415","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unannounce","params":"(DiscoveryDruidNodediscoveryDruidNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/26/adb758559b9e5ee47743f14740a42639e3c571.src","preCode":"  public void unannounce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    log.info(\"Unannouncing [%s].\", discoveryDruidNode);\n\n    announcer.unannounce(\n        ZKPaths.makePath(\n            config.getInternalDiscoveryPath(),\n            discoveryDruidNode.getNodeType(),\n            discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n        )\n    );\n\n    log.info(\"Unannounced [%s].\", discoveryDruidNode);\n  }\n","realPath":"server/src/main/java/org/apache/druid/curator/discovery/CuratorDruidNodeAnnouncer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-15 11:49:38","codes":[{"authorDate":"2018-10-15 11:49:38","commitOrder":2,"curCode":"  public void announce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    try {\n      log.info(\"Announcing [%s].\", discoveryDruidNode);\n\n      String path = ZKPaths.makePath(\n          config.getInternalDiscoveryPath(),\n          discoveryDruidNode.getNodeType().toString(),\n          discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n      );\n      announcer.announce(path, jsonMapper.writeValueAsBytes(discoveryDruidNode));\n\n      log.info(\"Announced [%s].\", discoveryDruidNode);\n    }\n    catch (JsonProcessingException e) {\n      throw Throwables.propagate(e);\n    }\n  }\n","date":"2018-10-15 11:49:38","endLine":70,"groupId":"6942","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"announce","params":"(DiscoveryDruidNodediscoveryDruidNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ea/a5a36e0fa6b7c04f1c82fd7930f05be55d46b6.src","preCode":"  public void announce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    try {\n      log.info(\"Announcing [%s].\", discoveryDruidNode);\n\n      announcer.announce(\n          ZKPaths.makePath(\n              config.getInternalDiscoveryPath(),\n              discoveryDruidNode.getNodeType(),\n              discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n          ),\n          jsonMapper.writeValueAsBytes(discoveryDruidNode)\n      );\n\n      log.info(\"Announced [%s].\", discoveryDruidNode);\n    }\n    catch (JsonProcessingException e) {\n      throw Throwables.propagate(e);\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/curator/discovery/CuratorDruidNodeAnnouncer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2018-10-15 11:49:38","commitOrder":2,"curCode":"  public void unannounce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    log.info(\"Unannouncing [%s].\", discoveryDruidNode);\n\n    String path = ZKPaths.makePath(\n        config.getInternalDiscoveryPath(),\n        discoveryDruidNode.getNodeType().toString(),\n        discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n    );\n    announcer.unannounce(path);\n\n    log.info(\"Unannounced [%s].\", discoveryDruidNode);\n  }\n","date":"2018-10-15 11:49:38","endLine":85,"groupId":"6942","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unannounce","params":"(DiscoveryDruidNodediscoveryDruidNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ea/a5a36e0fa6b7c04f1c82fd7930f05be55d46b6.src","preCode":"  public void unannounce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    log.info(\"Unannouncing [%s].\", discoveryDruidNode);\n\n    announcer.unannounce(\n        ZKPaths.makePath(\n            config.getInternalDiscoveryPath(),\n            discoveryDruidNode.getNodeType(),\n            discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n        )\n    );\n\n    log.info(\"Unannounced [%s].\", discoveryDruidNode);\n  }\n","realPath":"server/src/main/java/org/apache/druid/curator/discovery/CuratorDruidNodeAnnouncer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"aa121da25f019ad3345c747ce56261fbb7e77885","commitMessage":"@@@Use NodeType enum instead of Strings (#6377)\n\n* Use NodeType enum instead of Strings\n\n* Make NodeType constants uppercase\n\n* Fix CommonCacheNotifier and NodeType/ServerType comments\n\n* Reconsidering comment\n\n* Fix import\n\n* Add a comment to CommonCacheNotifier.NODE_TYPES\n","date":"2018-10-15 11:49:38","modifiedFileCount":"30","status":"M","submitter":"Roman Leventov"},{"authorTime":"2018-10-15 11:49:38","codes":[{"authorDate":"2019-03-15 05:28:33","commitOrder":3,"curCode":"  public void announce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    try {\n      log.info(\"Announcing [%s].\", discoveryDruidNode);\n\n      String path = ZKPaths.makePath(\n          config.getInternalDiscoveryPath(),\n          discoveryDruidNode.getNodeType().toString(),\n          discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n      );\n      announcer.announce(path, jsonMapper.writeValueAsBytes(discoveryDruidNode));\n\n      log.info(\"Announced [%s].\", discoveryDruidNode);\n    }\n    catch (JsonProcessingException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2019-03-15 05:28:33","endLine":69,"groupId":"6942","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"announce","params":"(DiscoveryDruidNodediscoveryDruidNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ab/27916907d37e08601073a70025cbd8be289d1a.src","preCode":"  public void announce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    try {\n      log.info(\"Announcing [%s].\", discoveryDruidNode);\n\n      String path = ZKPaths.makePath(\n          config.getInternalDiscoveryPath(),\n          discoveryDruidNode.getNodeType().toString(),\n          discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n      );\n      announcer.announce(path, jsonMapper.writeValueAsBytes(discoveryDruidNode));\n\n      log.info(\"Announced [%s].\", discoveryDruidNode);\n    }\n    catch (JsonProcessingException e) {\n      throw Throwables.propagate(e);\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/curator/discovery/CuratorDruidNodeAnnouncer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2018-10-15 11:49:38","commitOrder":3,"curCode":"  public void unannounce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    log.info(\"Unannouncing [%s].\", discoveryDruidNode);\n\n    String path = ZKPaths.makePath(\n        config.getInternalDiscoveryPath(),\n        discoveryDruidNode.getNodeType().toString(),\n        discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n    );\n    announcer.unannounce(path);\n\n    log.info(\"Unannounced [%s].\", discoveryDruidNode);\n  }\n","date":"2018-10-15 11:49:38","endLine":85,"groupId":"6942","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unannounce","params":"(DiscoveryDruidNodediscoveryDruidNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ea/a5a36e0fa6b7c04f1c82fd7930f05be55d46b6.src","preCode":"  public void unannounce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    log.info(\"Unannouncing [%s].\", discoveryDruidNode);\n\n    String path = ZKPaths.makePath(\n        config.getInternalDiscoveryPath(),\n        discoveryDruidNode.getNodeType().toString(),\n        discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n    );\n    announcer.unannounce(path);\n\n    log.info(\"Unannounced [%s].\", discoveryDruidNode);\n  }\n","realPath":"server/src/main/java/org/apache/druid/curator/discovery/CuratorDruidNodeAnnouncer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"7ada1c49f9735a37808f3ed7656d93ae88b8b925","commitMessage":"@@@Prohibit Throwables.propagate() (#7121)\n\n* Throw caught exception.\n\n* Throw caught exceptions.\n\n* Related checkstyle rule is added to prevent further bugs.\n\n* RuntimeException() is used instead of Throwables.propagate().\n\n* Missing import is added.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* * Checkstyle definition is improved.\n* Throwables.propagate() usages are removed.\n\n* Checkstyle pattern is changed for only scanning \"Throwables.propagate(\" instead of checking lookbehind.\n\n* Throwable is kept before firing a Runtime Exception.\n\n* Fix unused assignments.\n","date":"2019-03-15 05:28:33","modifiedFileCount":"228","status":"M","submitter":"Furkan KAMACI"},{"authorTime":"2019-11-20 05:57:58","codes":[{"authorDate":"2019-11-20 05:57:58","commitOrder":4,"curCode":"  public void announce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    try {\n      final String asString = jsonMapper.writeValueAsString(discoveryDruidNode);\n\n      log.debug(\"Announcing self [%s].\", asString);\n\n      String path = ZKPaths.makePath(\n          config.getInternalDiscoveryPath(),\n          discoveryDruidNode.getNodeType().toString(),\n          discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n      );\n      announcer.announce(path, StringUtils.toUtf8(asString));\n\n      log.info(\"Announced self [%s].\", asString);\n    }\n    catch (JsonProcessingException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2019-11-20 05:57:58","endLine":70,"groupId":"6942","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"announce","params":"(DiscoveryDruidNodediscoveryDruidNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/55/29d90b20d3bd810bbe1f7f437b77a9e2716a87.src","preCode":"  public void announce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    try {\n      log.info(\"Announcing [%s].\", discoveryDruidNode);\n\n      String path = ZKPaths.makePath(\n          config.getInternalDiscoveryPath(),\n          discoveryDruidNode.getNodeType().toString(),\n          discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n      );\n      announcer.announce(path, jsonMapper.writeValueAsBytes(discoveryDruidNode));\n\n      log.info(\"Announced [%s].\", discoveryDruidNode);\n    }\n    catch (JsonProcessingException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/curator/discovery/CuratorDruidNodeAnnouncer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2019-11-20 05:57:58","commitOrder":4,"curCode":"  public void unannounce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    try {\n      final String asString = jsonMapper.writeValueAsString(discoveryDruidNode);\n\n      log.debug(\"Unannouncing self [%s].\", asString);\n\n      String path = ZKPaths.makePath(\n          config.getInternalDiscoveryPath(),\n          discoveryDruidNode.getNodeType().toString(),\n          discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n      );\n      announcer.unannounce(path);\n\n      log.info(\"Unannounced self [%s].\", asString);\n    }\n    catch (JsonProcessingException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2019-11-20 05:57:58","endLine":92,"groupId":"6942","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"unannounce","params":"(DiscoveryDruidNodediscoveryDruidNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/55/29d90b20d3bd810bbe1f7f437b77a9e2716a87.src","preCode":"  public void unannounce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    log.info(\"Unannouncing [%s].\", discoveryDruidNode);\n\n    String path = ZKPaths.makePath(\n        config.getInternalDiscoveryPath(),\n        discoveryDruidNode.getNodeType().toString(),\n        discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n    );\n    announcer.unannounce(path);\n\n    log.info(\"Unannounced [%s].\", discoveryDruidNode);\n  }\n","realPath":"server/src/main/java/org/apache/druid/curator/discovery/CuratorDruidNodeAnnouncer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"c44452f0c1b051b03343d8bb479828f01461d68f","commitMessage":"@@@Tidy up lifecycle.  query.  and ingestion logging. (#8889)\n\n* Tidy up lifecycle.  query.  and ingestion logging.\n\nThe goal of this patch is to improve the clarity and usefulness of\nDruid's logging for cluster operators. For more information.  see\nhttps://twitter.com/cowtowncoder/status/1195469299814555648.\n\nConcretely.  this patch does the following:\n\n- Changes a lot of INFO logs to DEBUG.  and DEBUG to TRACE.  with the\n  goal of reducing redundancy and improving clarity by avoiding\n  showing rarely-useful log messages. This includes most \"starting\"\n  and \"stopping\" messages.  and most messages related to individual\n  columns.\n- Adds new log4j2 templates that show operators how to enabled DEBUG\n  logging for certain important packages.\n- Eliminate stack traces for query errors.  unless log level is DEBUG\n  or more. This is useful because query errors often indicate user\n  error rather than system error.  but dumping stack trace often gave\n  operators the impression that there was a system failure.\n- Adds task id to Appenderator.  AppenderatorDriver thread names. In\n  the default log4j2 configuration.  this will put them in log lines\n  as well. It's very useful if a user is using the Indexer.  where\n  multiple tasks run in the same JVM.\n- More consistent terminology when it comes to \"sequences\" (sets of\n  segments that are handed-off together by Kafka ingestion) and\n  \"offsets\" (cursors in partitions). These terms had been confused in\n  some log messages due to the fact that Kinesis calls offsets\n  \"sequence numbers\".\n- Replaces some ugly toString calls with either the JSONification or\n  something more operator-accessible (like a URL or segment identifier. \n  instead of JSON object representing the same).\n\n* Adjustments.\n\n* Adjust integration test.\n","date":"2019-11-20 05:57:58","modifiedFileCount":"101","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-12-08 23:47:58","codes":[{"authorDate":"2019-12-08 23:47:58","commitOrder":5,"curCode":"  public void announce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    try {\n      final String asString = jsonMapper.writeValueAsString(discoveryDruidNode);\n\n      log.debug(\"Announcing self [%s].\", asString);\n\n      String path =\n          makeNodeAnnouncementPath(config, discoveryDruidNode.getNodeRole(), discoveryDruidNode.getDruidNode());\n      announcer.announce(path, StringUtils.toUtf8(asString));\n\n      log.info(\"Announced self [%s].\", asString);\n    }\n    catch (JsonProcessingException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2019-12-08 23:47:58","endLine":74,"groupId":"101237","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"announce","params":"(DiscoveryDruidNodediscoveryDruidNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5b/536c65d39d60083c5a76034647b327cb247928.src","preCode":"  public void announce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    try {\n      final String asString = jsonMapper.writeValueAsString(discoveryDruidNode);\n\n      log.debug(\"Announcing self [%s].\", asString);\n\n      String path = ZKPaths.makePath(\n          config.getInternalDiscoveryPath(),\n          discoveryDruidNode.getNodeType().toString(),\n          discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n      );\n      announcer.announce(path, StringUtils.toUtf8(asString));\n\n      log.info(\"Announced self [%s].\", asString);\n    }\n    catch (JsonProcessingException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/curator/discovery/CuratorDruidNodeAnnouncer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2019-12-08 23:47:58","commitOrder":5,"curCode":"  public void unannounce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    try {\n      final String asString = jsonMapper.writeValueAsString(discoveryDruidNode);\n\n      log.debug(\"Unannouncing self [%s].\", asString);\n\n      String path =\n          makeNodeAnnouncementPath(config, discoveryDruidNode.getNodeRole(), discoveryDruidNode.getDruidNode());\n      announcer.unannounce(path);\n\n      log.info(\"Unannounced self [%s].\", asString);\n    }\n    catch (JsonProcessingException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2019-12-08 23:47:58","endLine":93,"groupId":"101237","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"unannounce","params":"(DiscoveryDruidNodediscoveryDruidNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5b/536c65d39d60083c5a76034647b327cb247928.src","preCode":"  public void unannounce(DiscoveryDruidNode discoveryDruidNode)\n  {\n    try {\n      final String asString = jsonMapper.writeValueAsString(discoveryDruidNode);\n\n      log.debug(\"Unannouncing self [%s].\", asString);\n\n      String path = ZKPaths.makePath(\n          config.getInternalDiscoveryPath(),\n          discoveryDruidNode.getNodeType().toString(),\n          discoveryDruidNode.getDruidNode().getHostAndPortToUse()\n      );\n      announcer.unannounce(path);\n\n      log.info(\"Unannounced self [%s].\", asString);\n    }\n    catch (JsonProcessingException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"server/src/main/java/org/apache/druid/curator/discovery/CuratorDruidNodeAnnouncer.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"1c62987783e85867856f567b04aad807a26bb2e3","commitMessage":"@@@Add SelfDiscoveryResource; rename org.apache.druid.discovery.No? (#6702)\n\n* Add SelfDiscoveryResource\n\n* Rename org.apache.druid.discovery.NodeType to NodeRole. Refactor CuratorDruidNodeDiscoveryProvider. Make SelfDiscoveryResource to listen to updates only about a single node (itself).\n\n* Extended docs\n\n* Fix brace\n\n* Remove redundant throws in Lifecycle.Handler.stop()\n\n* Import order\n\n* Remove unresolvable link\n\n* Address comments\n\n* tmp\n\n* tmp\n\n* Rollback docker changes\n\n* Remove extra .sh files\n\n* Move filter\n\n* Fix SecurityResourceFilterTest\n","date":"2019-12-08 23:47:58","modifiedFileCount":"54","status":"M","submitter":"Roman Leventov"}]
