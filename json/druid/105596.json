[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testValues(long[] values) throws Exception\n  {\n    ColumnarLongsSerializer serializer = CompressionFactory.getLongSerializer(\n        new OffHeapMemorySegmentWriteOutMedium(),\n        \"test\",\n        order,\n        encodingStrategy,\n        compressionStrategy\n    );\n    serializer.open();\n\n    for (long value : values) {\n      serializer.add(value);\n    }\n    Assert.assertEquals(values.length, serializer.size());\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    serializer.writeTo(Channels.newChannel(baos), null);\n    Assert.assertEquals(baos.size(), serializer.getSerializedSize());\n    CompressedColumnarLongsSupplier supplier =\n        CompressedColumnarLongsSupplier.fromByteBuffer(ByteBuffer.wrap(baos.toByteArray()), order);\n    ColumnarLongs longs = supplier.get();\n\n    assertIndexMatchesVals(longs, values);\n    longs.close();\n  }\n","date":"2018-08-31 00:56:26","endLine":120,"groupId":"14950","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testValues","params":"(long[]values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8f/e0bf8ac3ad6ded897a97dd765734d6f837db1d.src","preCode":"  public void testValues(long[] values) throws Exception\n  {\n    ColumnarLongsSerializer serializer = CompressionFactory.getLongSerializer(\n        new OffHeapMemorySegmentWriteOutMedium(),\n        \"test\",\n        order,\n        encodingStrategy,\n        compressionStrategy\n    );\n    serializer.open();\n\n    for (long value : values) {\n      serializer.add(value);\n    }\n    Assert.assertEquals(values.length, serializer.size());\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    serializer.writeTo(Channels.newChannel(baos), null);\n    Assert.assertEquals(baos.size(), serializer.getSerializedSize());\n    CompressedColumnarLongsSupplier supplier =\n        CompressedColumnarLongsSupplier.fromByteBuffer(ByteBuffer.wrap(baos.toByteArray()), order);\n    ColumnarLongs longs = supplier.get();\n\n    assertIndexMatchesVals(longs, values);\n    longs.close();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/CompressedLongsAutoEncodingSerdeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testValues(long[] values) throws Exception\n  {\n    ColumnarLongsSerializer serializer = CompressionFactory.getLongSerializer(\n        new OffHeapMemorySegmentWriteOutMedium(),\n        \"test\",\n        order,\n        encodingStrategy,\n        compressionStrategy\n    );\n    serializer.open();\n\n    for (long value : values) {\n      serializer.add(value);\n    }\n    Assert.assertEquals(values.length, serializer.size());\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    serializer.writeTo(Channels.newChannel(baos), null);\n    Assert.assertEquals(baos.size(), serializer.getSerializedSize());\n    CompressedColumnarLongsSupplier supplier = CompressedColumnarLongsSupplier\n        .fromByteBuffer(ByteBuffer.wrap(baos.toByteArray()), order);\n    ColumnarLongs longs = supplier.get();\n\n    assertIndexMatchesVals(longs, values);\n    for (int i = 0; i < 10; i++) {\n      int a = (int) (Math.random() * values.length);\n      int b = (int) (Math.random() * values.length);\n      int start = a < b ? a : b;\n      int end = a < b ? b : a;\n      tryFill(longs, values, start, end - start);\n    }\n    testSupplierSerde(supplier, values);\n    testConcurrentThreadReads(supplier, longs, values);\n\n    longs.close();\n  }\n","date":"2018-08-31 00:56:26","endLine":165,"groupId":"14950","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testValues","params":"(long[]values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6b/a5b7ebb2980b527f3a70b5f69f4162c65e52df.src","preCode":"  public void testValues(long[] values) throws Exception\n  {\n    ColumnarLongsSerializer serializer = CompressionFactory.getLongSerializer(\n        new OffHeapMemorySegmentWriteOutMedium(),\n        \"test\",\n        order,\n        encodingStrategy,\n        compressionStrategy\n    );\n    serializer.open();\n\n    for (long value : values) {\n      serializer.add(value);\n    }\n    Assert.assertEquals(values.length, serializer.size());\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    serializer.writeTo(Channels.newChannel(baos), null);\n    Assert.assertEquals(baos.size(), serializer.getSerializedSize());\n    CompressedColumnarLongsSupplier supplier = CompressedColumnarLongsSupplier\n        .fromByteBuffer(ByteBuffer.wrap(baos.toByteArray()), order);\n    ColumnarLongs longs = supplier.get();\n\n    assertIndexMatchesVals(longs, values);\n    for (int i = 0; i < 10; i++) {\n      int a = (int) (Math.random() * values.length);\n      int b = (int) (Math.random() * values.length);\n      int start = a < b ? a : b;\n      int end = a < b ? b : a;\n      tryFill(longs, values, start, end - start);\n    }\n    testSupplierSerde(supplier, values);\n    testConcurrentThreadReads(supplier, longs, values);\n\n    longs.close();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/CompressedLongsSerdeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-01-25 19:49:20","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testValues(long[] values) throws Exception\n  {\n    ColumnarLongsSerializer serializer = CompressionFactory.getLongSerializer(\n        new OffHeapMemorySegmentWriteOutMedium(),\n        \"test\",\n        order,\n        encodingStrategy,\n        compressionStrategy\n    );\n    serializer.open();\n\n    for (long value : values) {\n      serializer.add(value);\n    }\n    Assert.assertEquals(values.length, serializer.size());\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    serializer.writeTo(Channels.newChannel(baos), null);\n    Assert.assertEquals(baos.size(), serializer.getSerializedSize());\n    CompressedColumnarLongsSupplier supplier =\n        CompressedColumnarLongsSupplier.fromByteBuffer(ByteBuffer.wrap(baos.toByteArray()), order);\n    ColumnarLongs longs = supplier.get();\n\n    assertIndexMatchesVals(longs, values);\n    longs.close();\n  }\n","date":"2018-08-31 00:56:26","endLine":120,"groupId":"14950","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testValues","params":"(long[]values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8f/e0bf8ac3ad6ded897a97dd765734d6f837db1d.src","preCode":"  public void testValues(long[] values) throws Exception\n  {\n    ColumnarLongsSerializer serializer = CompressionFactory.getLongSerializer(\n        new OffHeapMemorySegmentWriteOutMedium(),\n        \"test\",\n        order,\n        encodingStrategy,\n        compressionStrategy\n    );\n    serializer.open();\n\n    for (long value : values) {\n      serializer.add(value);\n    }\n    Assert.assertEquals(values.length, serializer.size());\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    serializer.writeTo(Channels.newChannel(baos), null);\n    Assert.assertEquals(baos.size(), serializer.getSerializedSize());\n    CompressedColumnarLongsSupplier supplier =\n        CompressedColumnarLongsSupplier.fromByteBuffer(ByteBuffer.wrap(baos.toByteArray()), order);\n    ColumnarLongs longs = supplier.get();\n\n    assertIndexMatchesVals(longs, values);\n    longs.close();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/CompressedLongsAutoEncodingSerdeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"},{"authorDate":"2019-01-25 19:49:20","commitOrder":2,"curCode":"  public void testValues(long[] values) throws Exception\n  {\n    ColumnarLongsSerializer serializer = CompressionFactory.getLongSerializer(\n        new OffHeapMemorySegmentWriteOutMedium(),\n        \"test\",\n        order,\n        encodingStrategy,\n        compressionStrategy\n    );\n    serializer.open();\n\n    for (long value : values) {\n      serializer.add(value);\n    }\n    Assert.assertEquals(values.length, serializer.size());\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    serializer.writeTo(Channels.newChannel(baos), null);\n    Assert.assertEquals(baos.size(), serializer.getSerializedSize());\n    CompressedColumnarLongsSupplier supplier = CompressedColumnarLongsSupplier\n        .fromByteBuffer(ByteBuffer.wrap(baos.toByteArray()), order);\n    ColumnarLongs longs = supplier.get();\n\n    assertIndexMatchesVals(longs, values);\n    for (int i = 0; i < 10; i++) {\n      int a = (int) (ThreadLocalRandom.current().nextDouble() * values.length);\n      int b = (int) (ThreadLocalRandom.current().nextDouble() * values.length);\n      int start = a < b ? a : b;\n      int end = a < b ? b : a;\n      tryFill(longs, values, start, end - start);\n    }\n    testSupplierSerde(supplier, values);\n    testConcurrentThreadReads(supplier, longs, values);\n\n    longs.close();\n  }\n","date":"2019-01-25 19:49:20","endLine":165,"groupId":"14950","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testValues","params":"(long[]values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/e30f6ee49b98531c1c22a333c26b75dabb9c0c.src","preCode":"  public void testValues(long[] values) throws Exception\n  {\n    ColumnarLongsSerializer serializer = CompressionFactory.getLongSerializer(\n        new OffHeapMemorySegmentWriteOutMedium(),\n        \"test\",\n        order,\n        encodingStrategy,\n        compressionStrategy\n    );\n    serializer.open();\n\n    for (long value : values) {\n      serializer.add(value);\n    }\n    Assert.assertEquals(values.length, serializer.size());\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    serializer.writeTo(Channels.newChannel(baos), null);\n    Assert.assertEquals(baos.size(), serializer.getSerializedSize());\n    CompressedColumnarLongsSupplier supplier = CompressedColumnarLongsSupplier\n        .fromByteBuffer(ByteBuffer.wrap(baos.toByteArray()), order);\n    ColumnarLongs longs = supplier.get();\n\n    assertIndexMatchesVals(longs, values);\n    for (int i = 0; i < 10; i++) {\n      int a = (int) (Math.random() * values.length);\n      int b = (int) (Math.random() * values.length);\n      int start = a < b ? a : b;\n      int end = a < b ? b : a;\n      tryFill(longs, values, start, end - start);\n    }\n    testSupplierSerde(supplier, values);\n    testConcurrentThreadReads(supplier, longs, values);\n\n    longs.close();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/CompressedLongsSerdeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"e1033bb412244fc9dff9dea1c89d43a8e0081fd3","commitMessage":"@@@Issue#6892- Replaced Math.random() with ThreadLocalRandom.current().nextDouble() (#6914)\n\n*  Replacing Math.random() with ThreadLocalRandom.current().nextDouble()\n\n* Added java.lang.Math#random() in forbidden-apis.txt\n\n* Minor change in the message - druid-forbidden-apis.txt\n","date":"2019-01-25 19:49:20","modifiedFileCount":"3","status":"M","submitter":"Himanshu Pandey"},{"authorTime":"2020-03-27 07:54:48","codes":[{"authorDate":"2020-03-27 07:54:48","commitOrder":3,"curCode":"  public void testValues(long[] values) throws Exception\n  {\n    ColumnarLongsSerializer serializer = CompressionFactory.getLongSerializer(\n        \"test\",\n        new OffHeapMemorySegmentWriteOutMedium(),\n        \"test\",\n        order,\n        encodingStrategy,\n        compressionStrategy\n    );\n    serializer.open();\n\n    for (long value : values) {\n      serializer.add(value);\n    }\n    Assert.assertEquals(values.length, serializer.size());\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    serializer.writeTo(Channels.newChannel(baos), null);\n    Assert.assertEquals(baos.size(), serializer.getSerializedSize());\n    CompressedColumnarLongsSupplier supplier =\n        CompressedColumnarLongsSupplier.fromByteBuffer(ByteBuffer.wrap(baos.toByteArray()), order);\n    ColumnarLongs longs = supplier.get();\n\n    assertIndexMatchesVals(longs, values);\n    longs.close();\n  }\n","date":"2020-03-27 07:54:48","endLine":121,"groupId":"105596","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testValues","params":"(long[]values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/11/86d32a3634d69940be916fdad80258913415bb.src","preCode":"  public void testValues(long[] values) throws Exception\n  {\n    ColumnarLongsSerializer serializer = CompressionFactory.getLongSerializer(\n        new OffHeapMemorySegmentWriteOutMedium(),\n        \"test\",\n        order,\n        encodingStrategy,\n        compressionStrategy\n    );\n    serializer.open();\n\n    for (long value : values) {\n      serializer.add(value);\n    }\n    Assert.assertEquals(values.length, serializer.size());\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    serializer.writeTo(Channels.newChannel(baos), null);\n    Assert.assertEquals(baos.size(), serializer.getSerializedSize());\n    CompressedColumnarLongsSupplier supplier =\n        CompressedColumnarLongsSupplier.fromByteBuffer(ByteBuffer.wrap(baos.toByteArray()), order);\n    ColumnarLongs longs = supplier.get();\n\n    assertIndexMatchesVals(longs, values);\n    longs.close();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/CompressedLongsAutoEncodingSerdeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2020-03-27 07:54:48","commitOrder":3,"curCode":"  public void testValues(long[] values) throws Exception\n  {\n    ColumnarLongsSerializer serializer = CompressionFactory.getLongSerializer(\n        \"test\",\n        new OffHeapMemorySegmentWriteOutMedium(),\n        \"test\",\n        order,\n        encodingStrategy,\n        compressionStrategy\n    );\n    serializer.open();\n\n    for (long value : values) {\n      serializer.add(value);\n    }\n    Assert.assertEquals(values.length, serializer.size());\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    serializer.writeTo(Channels.newChannel(baos), null);\n    Assert.assertEquals(baos.size(), serializer.getSerializedSize());\n    CompressedColumnarLongsSupplier supplier = CompressedColumnarLongsSupplier\n        .fromByteBuffer(ByteBuffer.wrap(baos.toByteArray()), order);\n    ColumnarLongs longs = supplier.get();\n\n    assertIndexMatchesVals(longs, values);\n    for (int i = 0; i < 10; i++) {\n      int a = (int) (ThreadLocalRandom.current().nextDouble() * values.length);\n      int b = (int) (ThreadLocalRandom.current().nextDouble() * values.length);\n      int start = a < b ? a : b;\n      int end = a < b ? b : a;\n      tryFill(longs, values, start, end - start);\n    }\n    testSupplierSerde(supplier, values);\n    testConcurrentThreadReads(supplier, longs, values);\n\n    longs.close();\n  }\n","date":"2020-03-27 07:54:48","endLine":210,"groupId":"105596","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testValues","params":"(long[]values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/67/5c49420cb06a0f0c42227c50c23bfc7f9c4cca.src","preCode":"  public void testValues(long[] values) throws Exception\n  {\n    ColumnarLongsSerializer serializer = CompressionFactory.getLongSerializer(\n        new OffHeapMemorySegmentWriteOutMedium(),\n        \"test\",\n        order,\n        encodingStrategy,\n        compressionStrategy\n    );\n    serializer.open();\n\n    for (long value : values) {\n      serializer.add(value);\n    }\n    Assert.assertEquals(values.length, serializer.size());\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    serializer.writeTo(Channels.newChannel(baos), null);\n    Assert.assertEquals(baos.size(), serializer.getSerializedSize());\n    CompressedColumnarLongsSupplier supplier = CompressedColumnarLongsSupplier\n        .fromByteBuffer(ByteBuffer.wrap(baos.toByteArray()), order);\n    ColumnarLongs longs = supplier.get();\n\n    assertIndexMatchesVals(longs, values);\n    for (int i = 0; i < 10; i++) {\n      int a = (int) (ThreadLocalRandom.current().nextDouble() * values.length);\n      int b = (int) (ThreadLocalRandom.current().nextDouble() * values.length);\n      int start = a < b ? a : b;\n      int end = a < b ? b : a;\n      tryFill(longs, values, start, end - start);\n    }\n    testSupplierSerde(supplier, values);\n    testConcurrentThreadReads(supplier, longs, values);\n\n    longs.close();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/CompressedLongsSerdeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"}],"commitId":"2c49f6d89acdf1e15f6bc339321f0e78066e2e42","commitMessage":"@@@error on value counter overflow instead of writing sad segments (#9559)\n\n","date":"2020-03-27 07:54:48","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"}]
