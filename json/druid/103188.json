[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testInjection()\n  {\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                JsonConfigProvider.bindInstance(\n                    binder, Key.get(DruidNode.class, Self.class), new DruidNode(\"test-inject\", null, null, null, true, false)\n                );\n              }\n            }\n        )\n    );\n    final Properties properties = injector.getInstance(Properties.class);\n    properties.clear();\n    properties.put(NamespaceExtractionModule.TYPE_PREFIX, \"offHeap\");\n    final NamespaceExtractionCacheManager manager = injector.getInstance(NamespaceExtractionCacheManager.class);\n    Assert.assertEquals(OffHeapNamespaceExtractionCacheManager.class, manager.getClass());\n  }\n","date":"2018-08-31 00:56:26","endLine":63,"groupId":"21934","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9c/9e4cecbc936520ea1e4d6bdd089d65a6803a38.src","preCode":"  public void testInjection()\n  {\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                JsonConfigProvider.bindInstance(\n                    binder, Key.get(DruidNode.class, Self.class), new DruidNode(\"test-inject\", null, null, null, true, false)\n                );\n              }\n            }\n        )\n    );\n    final Properties properties = injector.getInstance(Properties.class);\n    properties.clear();\n    properties.put(NamespaceExtractionModule.TYPE_PREFIX, \"offHeap\");\n    final NamespaceExtractionCacheManager manager = injector.getInstance(NamespaceExtractionCacheManager.class);\n    Assert.assertEquals(OffHeapNamespaceExtractionCacheManager.class, manager.getClass());\n  }\n","realPath":"extensions-core/lookups-cached-global/src/test/java/org/apache/druid/server/lookup/namespace/cache/OffHeapNamespaceExtractionCacheManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private Injector makeInjector()\n  {\n    return Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                JsonConfigProvider.bindInstance(\n                    binder, Key.get(DruidNode.class, Self.class), new DruidNode(\"test-inject\", null, null, null, true, false)\n                );\n              }\n            }\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":533,"groupId":"21934","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"makeInjector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9c/108185dc5e9437b7807a042dd51b2dee7fe7e4.src","preCode":"  private Injector makeInjector()\n  {\n    return Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                JsonConfigProvider.bindInstance(\n                    binder, Key.get(DruidNode.class, Self.class), new DruidNode(\"test-inject\", null, null, null, true, false)\n                );\n              }\n            }\n        )\n    );\n  }\n","realPath":"extensions-core/lookups-cached-global/src/test/java/org/apache/druid/query/lookup/NamespaceLookupExtractorFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-16 05:19:40","codes":[{"authorDate":"2018-10-16 05:19:40","commitOrder":2,"curCode":"  public void testInjection()\n  {\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                JsonConfigProvider.bindInstance(\n                    binder, Key.get(DruidNode.class, Self.class), new DruidNode(\"test-inject\", null, false, null, null, true, false)\n                );\n              }\n            }\n        )\n    );\n    final Properties properties = injector.getInstance(Properties.class);\n    properties.clear();\n    properties.put(NamespaceExtractionModule.TYPE_PREFIX, \"offHeap\");\n    final NamespaceExtractionCacheManager manager = injector.getInstance(NamespaceExtractionCacheManager.class);\n    Assert.assertEquals(OffHeapNamespaceExtractionCacheManager.class, manager.getClass());\n  }\n","date":"2018-10-16 05:19:40","endLine":63,"groupId":"103188","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInjection","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/69/9f688542de0975bfca9913266f646cec84e716.src","preCode":"  public void testInjection()\n  {\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                JsonConfigProvider.bindInstance(\n                    binder, Key.get(DruidNode.class, Self.class), new DruidNode(\"test-inject\", null, null, null, true, false)\n                );\n              }\n            }\n        )\n    );\n    final Properties properties = injector.getInstance(Properties.class);\n    properties.clear();\n    properties.put(NamespaceExtractionModule.TYPE_PREFIX, \"offHeap\");\n    final NamespaceExtractionCacheManager manager = injector.getInstance(NamespaceExtractionCacheManager.class);\n    Assert.assertEquals(OffHeapNamespaceExtractionCacheManager.class, manager.getClass());\n  }\n","realPath":"extensions-core/lookups-cached-global/src/test/java/org/apache/druid/server/lookup/namespace/cache/OffHeapNamespaceExtractionCacheManagerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2018-10-16 05:19:40","commitOrder":2,"curCode":"  private Injector makeInjector()\n  {\n    return Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                JsonConfigProvider.bindInstance(\n                    binder, Key.get(DruidNode.class, Self.class), new DruidNode(\"test-inject\", null, false, null, null, true, false)\n                );\n              }\n            }\n        )\n    );\n  }\n","date":"2018-10-16 05:19:40","endLine":533,"groupId":"103188","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"makeInjector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7f/121b7a36593e8cdfa07f333454c68acde30a4c.src","preCode":"  private Injector makeInjector()\n  {\n    return Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                JsonConfigProvider.bindInstance(\n                    binder, Key.get(DruidNode.class, Self.class), new DruidNode(\"test-inject\", null, null, null, true, false)\n                );\n              }\n            }\n        )\n    );\n  }\n","realPath":"extensions-core/lookups-cached-global/src/test/java/org/apache/druid/query/lookup/NamespaceLookupExtractorFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"M"}],"commitId":"85a89e27033b046c58346bbcedc8db37aa59dbf9","commitMessage":"@@@make druid node bind address configurable (#6464)\n\n* make druid node bind address configurable\n\n* fix tests\n\n* fix travis-ci\n","date":"2018-10-16 05:19:40","modifiedFileCount":"38","status":"M","submitter":"QiuMM"}]
