[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","date":"2018-08-31 00:56:26","endLine":466,"groupId":"19926","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultFromProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/67/f93012f80cdc94572d95455905cecb914220dd.src","preCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/cache/CaffeineCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n              }\n            }\n        )\n    );\n    druidMeta = new DruidMeta(\n        new PlannerFactory(\n            druidSchema,\n            CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n            operatorTable,\n            macroTable,\n            plannerConfig,\n            CalciteTests.TEST_AUTHORIZER_MAPPER,\n            CalciteTests.getJsonMapper()\n        ),\n        AVATICA_CONFIG,\n        injector\n    );\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = new Random().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","date":"2018-08-31 00:56:26","endLine":211,"groupId":"14931","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8f/a788c34b6f2611483de86ee589999bdb12a2af.src","preCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n              }\n            }\n        )\n    );\n    druidMeta = new DruidMeta(\n        new PlannerFactory(\n            druidSchema,\n            CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n            operatorTable,\n            macroTable,\n            plannerConfig,\n            CalciteTests.TEST_AUTHORIZER_MAPPER,\n            CalciteTests.getJsonMapper()\n        ),\n        AVATICA_CONFIG,\n        injector\n    );\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = new Random().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-09-15 04:35:51","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","date":"2018-08-31 00:56:26","endLine":466,"groupId":"19926","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultFromProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/67/f93012f80cdc94572d95455905cecb914220dd.src","preCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/cache/CaffeineCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"N"},{"authorDate":"2018-09-15 04:35:51","commitOrder":2,"curCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n              }\n            }\n        )\n    );\n    druidMeta = new DruidMeta(\n        new PlannerFactory(\n            druidSchema,\n            CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n            operatorTable,\n            macroTable,\n            plannerConfig,\n            CalciteTests.TEST_AUTHORIZER_MAPPER,\n            CalciteTests.getJsonMapper()\n        ),\n        AVATICA_CONFIG,\n        injector\n    );\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","date":"2018-09-15 04:35:51","endLine":211,"groupId":"14931","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/be/673420d41ef9f77cf7d7d4235ea348574dbe04.src","preCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n              }\n            }\n        )\n    );\n    druidMeta = new DruidMeta(\n        new PlannerFactory(\n            druidSchema,\n            CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n            operatorTable,\n            macroTable,\n            plannerConfig,\n            CalciteTests.TEST_AUTHORIZER_MAPPER,\n            CalciteTests.getJsonMapper()\n        ),\n        AVATICA_CONFIG,\n        injector\n    );\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = new Random().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"0c4bd2b57b19bcbd9a275fad412960aa0a39ca5f","commitMessage":"@@@Prohibit some Random usage patterns (#6226)\n\n* Prohibit Random usage patterns\n\n* Fix FlattenJSONBenchmarkUtil\n","date":"2018-09-15 04:35:51","modifiedFileCount":"44","status":"M","submitter":"Roman Leventov"},{"authorTime":"2018-10-11 08:17:29","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":3,"curCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","date":"2018-08-31 00:56:26","endLine":466,"groupId":"19926","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultFromProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/67/f93012f80cdc94572d95455905cecb914220dd.src","preCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/cache/CaffeineCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"N"},{"authorDate":"2018-10-11 08:17:29","commitOrder":3,"curCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n              }\n            }\n        )\n    );\n    druidMeta = new DruidMeta(\n        new PlannerFactory(\n            druidSchema,\n            systemSchema,\n            CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n            operatorTable,\n            macroTable,\n            plannerConfig,\n            CalciteTests.TEST_AUTHORIZER_MAPPER,\n            CalciteTests.getJsonMapper()\n        ),\n        AVATICA_CONFIG,\n        injector\n    );\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","date":"2018-10-11 08:17:29","endLine":214,"groupId":"15704","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/48/31421cdf8aba36c2e675e5b240abd864265ddf.src","preCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n              }\n            }\n        )\n    );\n    druidMeta = new DruidMeta(\n        new PlannerFactory(\n            druidSchema,\n            CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n            operatorTable,\n            macroTable,\n            plannerConfig,\n            CalciteTests.TEST_AUTHORIZER_MAPPER,\n            CalciteTests.getJsonMapper()\n        ),\n        AVATICA_CONFIG,\n        injector\n    );\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"3a0a667fe03d03d97c4e5d6cbeb3e60e28c7d4f7","commitMessage":"@@@Introduce SystemSchema tables (#5989) (#6094)\n\n* Added SystemSchema with following tables (#5989)\n\n* SEGMENTS table provides details on served and published segments\n* SERVERS table provides details on data servers\n* SERVERSEGMETS table is the JOIN of SEGMENTS and SERVERS\n* TASKS table provides details on tasks\n\n* Add documentation for system schema\n\n* Fix static-analysis warnings\n\n* Address PR comments\n\n*Add unit tests\n\n* Fix a test\n\n* Try to fix a test\n\n* Fix a bug around replica count\n\n* rename io.druid to org.apache.druid\n\n* Major change is to make tasks and segment queries streaming\n\n* Made tasks/segments stream to calcite instead of storing it in memory\n* Add num_rows to segments table\n* Refactor JsonParserIterator\n* Replace with closeable iterator\n\n* Fix docs.  make num_rows column nullable.  some unit test changes\n\n* make num_rows column type long.  allow it to be null\n\nfix a compile error after merge.  add TrafficCop param to InputStreamResponseHandler\n\n* Filter null rows for segments table from Linq4j enumerable\n\n* change num_replicas datatype to long in segments table\n\n* Fix some tests and address comments\n\n* Doc updates.  other PR comments\n\n* Update tests\n\n* Address comments\n\n* Add auth check\n* Update docs\n* Refactoring\n\n* Fix teamcity warning.  change the getQueryableServer in TimelineServerView\n\n* Fix compilation after rebase\n\n* Use the stream API from AuthorizationUtils\n\n* Added LeaderClient interface and NoopDruidLeaderClient class\n\n* Revert \"Added LeaderClient interface and NoopDruidLeaderClient class\"\n\nThis reverts commit 100fa46e396ab0f68da6c4bef80951f6b996657e.\n\n* Make the naming consistent to server_segments for the join table\n\n* Add ForbiddenException on auth check failure\n* Remove static block from SystemSchema\n\n* Try to fix a test in CalciteQueryTest due to rename of server_segments\n\n* Fix the json output format in the coordinator API\n\n* Add auth check in the segments API\n* Add null check to avoid NPE\n\n* Use annonymous class object instead of mock for DruidLeaderClient in SqlBenchmark\n\n* Fix test failures.  type long/BIGINT can be nullable\n\n* Revert long nullability to fix tests\n\n* Fix style for tests\n\n* PR comments\n\n* Address PR comments\n\n* Add the missing BytesAccumulatingResponseHandler class\n\n* Use Sequences.withBaggage in DruidPlanner\n\n* Fix docs.  add comments\n\n* Close the iterator if hasNext returns false\n","date":"2018-10-11 08:17:29","modifiedFileCount":"22","status":"M","submitter":"Surekha"},{"authorTime":"2018-10-16 05:19:40","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":4,"curCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","date":"2018-08-31 00:56:26","endLine":466,"groupId":"19926","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultFromProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/67/f93012f80cdc94572d95455905cecb914220dd.src","preCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/cache/CaffeineCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"N"},{"authorDate":"2018-10-16 05:19:40","commitOrder":4,"curCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n              }\n            }\n        )\n    );\n    druidMeta = new DruidMeta(\n        new PlannerFactory(\n            druidSchema,\n            systemSchema,\n            CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n            operatorTable,\n            macroTable,\n            plannerConfig,\n            CalciteTests.TEST_AUTHORIZER_MAPPER,\n            CalciteTests.getJsonMapper()\n        ),\n        AVATICA_CONFIG,\n        injector\n    );\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", false, 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","date":"2018-10-16 05:19:40","endLine":214,"groupId":"7940","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ff/8dd2a5877deeb57234d54922d7f5d885e07a6f.src","preCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n              }\n            }\n        )\n    );\n    druidMeta = new DruidMeta(\n        new PlannerFactory(\n            druidSchema,\n            systemSchema,\n            CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n            operatorTable,\n            macroTable,\n            plannerConfig,\n            CalciteTests.TEST_AUTHORIZER_MAPPER,\n            CalciteTests.getJsonMapper()\n        ),\n        AVATICA_CONFIG,\n        injector\n    );\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"85a89e27033b046c58346bbcedc8db37aa59dbf9","commitMessage":"@@@make druid node bind address configurable (#6464)\n\n* make druid node bind address configurable\n\n* fix tests\n\n* fix travis-ci\n","date":"2018-10-16 05:19:40","modifiedFileCount":"38","status":"M","submitter":"QiuMM"},{"authorTime":"2019-01-16 15:12:59","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":5,"curCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","date":"2018-08-31 00:56:26","endLine":466,"groupId":"19926","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultFromProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/67/f93012f80cdc94572d95455905cecb914220dd.src","preCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/cache/CaffeineCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"N"},{"authorDate":"2019-01-16 15:12:59","commitOrder":5,"curCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n              }\n            }\n        )\n    );\n\n    testRequestLogger = new TestRequestLogger();\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        druidSchema,\n        systemSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper()\n    );\n    druidMeta = new DruidMeta(\n        new SqlLifecycleFactory(\n            plannerFactory,\n            new NoopServiceEmitter(),\n            testRequestLogger\n        ),\n        AVATICA_CONFIG,\n        injector\n    );\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", false, 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    propertiesLosAngeles.setProperty(\"sqlQueryId\", DUMMY_SQL_QUERY_ID);\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","date":"2019-01-16 15:12:59","endLine":227,"groupId":"10709","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f9/b999db3659072da98b002c4341574f65cd9d3b.src","preCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n              }\n            }\n        )\n    );\n    druidMeta = new DruidMeta(\n        new PlannerFactory(\n            druidSchema,\n            systemSchema,\n            CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n            operatorTable,\n            macroTable,\n            plannerConfig,\n            CalciteTests.TEST_AUTHORIZER_MAPPER,\n            CalciteTests.getJsonMapper()\n        ),\n        AVATICA_CONFIG,\n        injector\n    );\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", false, 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"5b8a221713615fff53cbd352cda925ecb1334d98","commitMessage":"@@@Add SQL id.  request logs.  and metrics (#6302)\n\n* use SqlLifecyle to manage sql execution.  add sqlId\n\n* add sql request logger\n\n* fix UT\n\n* rename sqlId to sqlQueryId.  sql/time to sqlQuery/time.  etc\n\n* add docs and more sql request logger impls\n\n* add UT for http and jdbc\n\n* fix forbidden use of com.google.common.base.Charsets\n\n* fix UT in QuantileSqlAggregatorTest.  supressed unused warning of getSqlQueryId\n\n* do not use default method in QueryMetrics interface\n\n* capitalize 'sql' everywhere in the non-property parts of the docs\n\n* use RequestLogger interface to log sql query\n\n* minor bugfixes and add switching request logger\n\n* add filePattern configs for FileRequestLogger\n\n* address review comments.  adjust sql request log format\n\n* fix inspection error\n\n* try SuppressWarnings(\"RedundantThrows\") to fix inspection error on ComposingRequestLoggerProvider\n","date":"2019-01-16 15:12:59","modifiedFileCount":"44","status":"M","submitter":"Dayue Gao"},{"authorTime":"2019-02-03 14:27:13","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":6,"curCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","date":"2018-08-31 00:56:26","endLine":466,"groupId":"19926","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultFromProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/67/f93012f80cdc94572d95455905cecb914220dd.src","preCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/cache/CaffeineCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"N"},{"authorDate":"2019-02-03 14:27:13","commitOrder":6,"curCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n              }\n            }\n        )\n    );\n\n    testRequestLogger = new TestRequestLogger();\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        druidSchema,\n        systemSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper()\n    );\n    druidMeta = new DruidMeta(\n        new SqlLifecycleFactory(\n            plannerFactory,\n            new NoopServiceEmitter(),\n            testRequestLogger\n        ),\n        AVATICA_CONFIG,\n        injector\n    );\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", false, 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    propertiesLosAngeles.setProperty(\"sqlQueryId\", DUMMY_SQL_QUERY_ID);\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","date":"2019-02-03 14:27:13","endLine":227,"groupId":"10709","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4f/25a66c11399c532a0b12caef9e68c5d2ea472d.src","preCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n              }\n            }\n        )\n    );\n\n    testRequestLogger = new TestRequestLogger();\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        druidSchema,\n        systemSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper()\n    );\n    druidMeta = new DruidMeta(\n        new SqlLifecycleFactory(\n            plannerFactory,\n            new NoopServiceEmitter(),\n            testRequestLogger\n        ),\n        AVATICA_CONFIG,\n        injector\n    );\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", false, 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    propertiesLosAngeles.setProperty(\"sqlQueryId\", DUMMY_SQL_QUERY_ID);\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"7baa33049cde3c3751037f014f468db4beb41a4c","commitMessage":"@@@Introduce published segment cache in broker (#6901)\n\n* Add published segment cache in broker\n\n* Change the DataSegment interner so it's not based on DataSEgment's equals only and size is preserved if set\n\n* Added a trueEquals to DataSegment class\n\n* Use separate interner for realtime and historical segments\n\n* Remove trueEquals as it's not used anymore.  change log message\n\n* PR comments\n\n* PR comments\n\n* Fix tests\n\n* PR comments\n\n* Few more modification to\n\n* change the coordinator api\n* removeall segments at once from MetadataSegmentView in order to serve a more consistent view of published segments\n* Change the poll behaviour to avoid multiple poll execution at same time\n\n* minor changes\n\n* PR comments\n\n* PR comments\n\n* Make the segment cache in broker off by default\n\n* Added a config to PlannerConfig\n* Moved MetadataSegmentView to sql module\n\n* Add doc for new planner config\n\n* Update documentation\n\n* PR comments\n\n* some more changes\n\n* PR comments\n\n* fix test\n\n* remove unintentional change.  whether to synchronize on lifecycleLock is still in discussion in PR\n\n* minor changes\n\n* some changes to initialization\n\n* use pollPeriodInMS\n\n* Add boolean cachePopulated to check if first poll succeeds\n\n* Remove poll from start()\n\n* take the log message out of condition in stop()\n","date":"2019-02-03 14:27:13","modifiedFileCount":"14","status":"M","submitter":"Surekha"},{"authorTime":"2020-02-01 15:51:16","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":7,"curCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","date":"2018-08-31 00:56:26","endLine":466,"groupId":"19926","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultFromProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/67/f93012f80cdc94572d95455905cecb914220dd.src","preCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/cache/CaffeineCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"N"},{"authorDate":"2020-02-01 15:51:16","commitOrder":7,"curCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n              }\n            }\n        )\n    );\n\n    testRequestLogger = new TestRequestLogger();\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        druidSchema,\n        CalciteTests.createMockLookupSchema(),\n        systemSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper()\n    );\n    druidMeta = new DruidMeta(\n        new SqlLifecycleFactory(\n            plannerFactory,\n            new NoopServiceEmitter(),\n            testRequestLogger\n        ),\n        AVATICA_CONFIG,\n        injector\n    );\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", false, 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    propertiesLosAngeles.setProperty(\"sqlQueryId\", DUMMY_SQL_QUERY_ID);\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","date":"2020-02-01 15:51:16","endLine":230,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0a/ee60617cdfd0cd0bba79264ed59ecd197d3f1d.src","preCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n              }\n            }\n        )\n    );\n\n    testRequestLogger = new TestRequestLogger();\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        druidSchema,\n        systemSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper()\n    );\n    druidMeta = new DruidMeta(\n        new SqlLifecycleFactory(\n            plannerFactory,\n            new NoopServiceEmitter(),\n            testRequestLogger\n        ),\n        AVATICA_CONFIG,\n        injector\n    );\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", false, 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    propertiesLosAngeles.setProperty(\"sqlQueryId\", DUMMY_SQL_QUERY_ID);\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"b411443d228c14de746311e09db28b437c2746a5","commitMessage":"@@@SQL join support for lookups. (#9294)\n\n* SQL join support for lookups.\n\n1) Add LookupSchema to SQL.  so lookups show up in the catalog.\n2) Add join-related rels and rules to SQL.  allowing joins to be planned into\n   native Druid queries.\n\n* Add two missing LookupSchema calls in tests.\n\n* Fix tests.\n\n* Fix typo.\n","date":"2020-02-01 15:51:16","modifiedFileCount":"30","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-02-05 03:33:48","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":8,"curCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","date":"2018-08-31 00:56:26","endLine":466,"groupId":"19926","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultFromProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/67/f93012f80cdc94572d95455905cecb914220dd.src","preCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/cache/CaffeineCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"N"},{"authorDate":"2020-02-05 03:33:48","commitOrder":8,"curCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, CalciteTests.TEST_AUTHORIZER_MAPPER);\n    testRequestLogger = new TestRequestLogger();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n                binder.bind(RequestLogger.class).toInstance(testRequestLogger);\n                binder.bind(SchemaPlus.class).toInstance(rootSchema);\n                binder.bind(QueryLifecycleFactory.class)\n                      .toInstance(CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate));\n                binder.bind(DruidOperatorTable.class).toInstance(operatorTable);\n                binder.bind(ExprMacroTable.class).toInstance(macroTable);\n                binder.bind(PlannerConfig.class).toInstance(plannerConfig);\n                binder.bind(String.class)\n                      .annotatedWith(DruidSchemaName.class)\n                      .toInstance(CalciteTests.DRUID_SCHEMA_NAME);\n                binder.bind(AvaticaServerConfig.class).toInstance(AVATICA_CONFIG);\n                binder.bind(ServiceEmitter.class).to(NoopServiceEmitter.class);\n              }\n            }\n        )\n    );\n\n    druidMeta = injector.getInstance(DruidMeta.class);\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", false, 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    propertiesLosAngeles.setProperty(\"sqlQueryId\", DUMMY_SQL_QUERY_ID);\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","date":"2020-02-05 03:33:48","endLine":225,"groupId":"2076","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9a/613b8ce78daba989bb29e38bbf71d1bd73a833.src","preCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n              }\n            }\n        )\n    );\n\n    testRequestLogger = new TestRequestLogger();\n    final PlannerFactory plannerFactory = new PlannerFactory(\n        druidSchema,\n        CalciteTests.createMockLookupSchema(),\n        systemSchema,\n        CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate),\n        operatorTable,\n        macroTable,\n        plannerConfig,\n        CalciteTests.TEST_AUTHORIZER_MAPPER,\n        CalciteTests.getJsonMapper()\n    );\n    druidMeta = new DruidMeta(\n        new SqlLifecycleFactory(\n            plannerFactory,\n            new NoopServiceEmitter(),\n            testRequestLogger\n        ),\n        AVATICA_CONFIG,\n        injector\n    );\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", false, 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    propertiesLosAngeles.setProperty(\"sqlQueryId\", DUMMY_SQL_QUERY_ID);\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"33a97dfaae00d88fb3001f55e1fa23211edc7640","commitMessage":"@@@Guicify druid sql module (#9279)\n\n* Guicify druid sql module\n\nBreak up the SQLModule in to smaller modules and provide a binding that\nmodules can use to register schemas with druid sql.\n\n* fix some tests\n\n* address code review\n\n* tests compile\n\n* Working tests\n\n* Add all the tests\n\n* fix up licenses and dependencies\n\n* add calcite dependency to druid-benchmarks\n\n* tests pass\n\n* rename the schemas\n","date":"2020-02-05 03:33:48","modifiedFileCount":"31","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2021-04-01 03:46:25","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":9,"curCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","date":"2018-08-31 00:56:26","endLine":466,"groupId":"19926","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultFromProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/67/f93012f80cdc94572d95455905cecb914220dd.src","preCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/cache/CaffeineCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"N"},{"authorDate":"2021-04-01 03:46:25","commitOrder":9,"curCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, CalciteTests.TEST_AUTHORIZER_MAPPER);\n    testRequestLogger = new TestRequestLogger();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n                binder.bind(RequestLogger.class).toInstance(testRequestLogger);\n                binder.bind(SchemaPlus.class).toInstance(rootSchema);\n                binder.bind(QueryLifecycleFactory.class)\n                      .toInstance(CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate));\n                binder.bind(DruidOperatorTable.class).toInstance(operatorTable);\n                binder.bind(ExprMacroTable.class).toInstance(macroTable);\n                binder.bind(PlannerConfig.class).toInstance(plannerConfig);\n                binder.bind(String.class)\n                      .annotatedWith(DruidSchemaName.class)\n                      .toInstance(CalciteTests.DRUID_SCHEMA_NAME);\n                binder.bind(AvaticaServerConfig.class).toInstance(AVATICA_CONFIG);\n                binder.bind(ServiceEmitter.class).to(NoopServiceEmitter.class);\n              }\n            }\n        )\n    );\n\n    druidMeta = injector.getInstance(DruidMeta.class);\n    final AbstractAvaticaHandler handler = this.getAvaticaHandler(druidMeta);\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = this.getJdbcConnectionString(port);\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    propertiesLosAngeles.setProperty(\"sqlQueryId\", DUMMY_SQL_QUERY_ID);\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","date":"2021-04-01 03:46:25","endLine":217,"groupId":"2076","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b3/9c35173adc2c86f8b71a8fd67ea2c35d43b0cc.src","preCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, CalciteTests.TEST_AUTHORIZER_MAPPER);\n    testRequestLogger = new TestRequestLogger();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n                binder.bind(RequestLogger.class).toInstance(testRequestLogger);\n                binder.bind(SchemaPlus.class).toInstance(rootSchema);\n                binder.bind(QueryLifecycleFactory.class)\n                      .toInstance(CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate));\n                binder.bind(DruidOperatorTable.class).toInstance(operatorTable);\n                binder.bind(ExprMacroTable.class).toInstance(macroTable);\n                binder.bind(PlannerConfig.class).toInstance(plannerConfig);\n                binder.bind(String.class)\n                      .annotatedWith(DruidSchemaName.class)\n                      .toInstance(CalciteTests.DRUID_SCHEMA_NAME);\n                binder.bind(AvaticaServerConfig.class).toInstance(AVATICA_CONFIG);\n                binder.bind(ServiceEmitter.class).to(NoopServiceEmitter.class);\n              }\n            }\n        )\n    );\n\n    druidMeta = injector.getInstance(DruidMeta.class);\n    final DruidAvaticaHandler handler = new DruidAvaticaHandler(\n        druidMeta,\n        new DruidNode(\"dummy\", \"dummy\", false, 1, null, true, false),\n        new AvaticaMonitor()\n    );\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = StringUtils.format(\n        \"jdbc:avatica:remote:url=http://127.0.0.1:%d%s\",\n        port,\n        DruidAvaticaHandler.AVATICA_PATH\n    );\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    propertiesLosAngeles.setProperty(\"sqlQueryId\", DUMMY_SQL_QUERY_ID);\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"782a1d4e6ca53076cfe100e391f3b77ab39a055f","commitMessage":"@@@Add Calcite Avatica protobuf handler (#10543)\n\n","date":"2021-04-01 03:46:25","modifiedFileCount":"8","status":"M","submitter":"Lasse Krogh Mammen"},{"authorTime":"2021-09-06 01:57:45","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":10,"curCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","date":"2018-08-31 00:56:26","endLine":466,"groupId":"19926","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultFromProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/67/f93012f80cdc94572d95455905cecb914220dd.src","preCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/cache/CaffeineCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"N"},{"authorDate":"2021-09-06 01:57:45","commitOrder":10,"curCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, CalciteTests.TEST_AUTHORIZER_MAPPER);\n    testRequestLogger = new TestRequestLogger();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n                binder.bind(RequestLogger.class).toInstance(testRequestLogger);\n                binder.bind(SchemaPlus.class).toInstance(rootSchema);\n                binder.bind(QueryLifecycleFactory.class)\n                      .toInstance(CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate));\n                binder.bind(DruidOperatorTable.class).toInstance(operatorTable);\n                binder.bind(ExprMacroTable.class).toInstance(macroTable);\n                binder.bind(PlannerConfig.class).toInstance(plannerConfig);\n                binder.bind(String.class)\n                      .annotatedWith(DruidSchemaName.class)\n                      .toInstance(CalciteTests.DRUID_SCHEMA_NAME);\n                binder.bind(AvaticaServerConfig.class).toInstance(AVATICA_CONFIG);\n                binder.bind(ServiceEmitter.class).to(NoopServiceEmitter.class);\n                binder.bind(QuerySchedulerProvider.class).in(LazySingleton.class);\n                binder.bind(QueryScheduler.class)\n                      .toProvider(QuerySchedulerProvider.class)\n                      .in(LazySingleton.class);\n              }\n            }\n        )\n    );\n\n    druidMeta = injector.getInstance(DruidMeta.class);\n    final AbstractAvaticaHandler handler = this.getAvaticaHandler(druidMeta);\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = this.getJdbcConnectionString(port);\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    propertiesLosAngeles.setProperty(\"sqlQueryId\", DUMMY_SQL_QUERY_ID);\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","date":"2021-09-06 01:57:45","endLine":225,"groupId":"19926","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/32/78bb6a80f3f08685af5e8a28fca76ca38c910c.src","preCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, CalciteTests.TEST_AUTHORIZER_MAPPER);\n    testRequestLogger = new TestRequestLogger();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n                binder.bind(RequestLogger.class).toInstance(testRequestLogger);\n                binder.bind(SchemaPlus.class).toInstance(rootSchema);\n                binder.bind(QueryLifecycleFactory.class)\n                      .toInstance(CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate));\n                binder.bind(DruidOperatorTable.class).toInstance(operatorTable);\n                binder.bind(ExprMacroTable.class).toInstance(macroTable);\n                binder.bind(PlannerConfig.class).toInstance(plannerConfig);\n                binder.bind(String.class)\n                      .annotatedWith(DruidSchemaName.class)\n                      .toInstance(CalciteTests.DRUID_SCHEMA_NAME);\n                binder.bind(AvaticaServerConfig.class).toInstance(AVATICA_CONFIG);\n                binder.bind(ServiceEmitter.class).to(NoopServiceEmitter.class);\n              }\n            }\n        )\n    );\n\n    druidMeta = injector.getInstance(DruidMeta.class);\n    final AbstractAvaticaHandler handler = this.getAvaticaHandler(druidMeta);\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = this.getJdbcConnectionString(port);\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    propertiesLosAngeles.setProperty(\"sqlQueryId\", DUMMY_SQL_QUERY_ID);\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"82049bbf0a6409c09889ba9b3ea6131c9da86705","commitMessage":"@@@Cancel API for sqls (#11643)\n\n* initial work\n\n* reduce lock in sqlLifecycle\n\n* Integration test for sql canceling\n\n* javadoc.  cleanup.  more tests\n\n* log level to debug\n\n* fix test\n\n* checkstyle\n\n* fix flaky test; address comments\n\n* rowTransformer\n\n* cancelled state\n\n* use lock\n\n* explode instead of noop\n\n* oops\n\n* unused import\n\n* less aggressive with state\n\n* fix calcite charset\n\n* don't emit metrics when you are not authorized","date":"2021-09-06 01:57:45","modifiedFileCount":"17","status":"M","submitter":"Jihoon Son"},{"authorTime":"2021-09-18 00:53:25","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":11,"curCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","date":"2018-08-31 00:56:26","endLine":466,"groupId":"10967","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultFromProperties","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/67/f93012f80cdc94572d95455905cecb914220dd.src","preCode":"  public void testDefaultFromProperties()\n  {\n    final String keyPrefix = \"cache.config.prefix\";\n    final Properties properties = new Properties();\n    final Injector injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            binder -> {\n              binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"druid/test\");\n              binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n              binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n              JsonConfigProvider.bind(binder, keyPrefix, CaffeineCacheConfig.class);\n            }\n        )\n    );\n    final JsonConfigurator configurator = injector.getInstance(JsonConfigurator.class);\n    final JsonConfigProvider<CaffeineCacheConfig> caffeineCacheConfigJsonConfigProvider = JsonConfigProvider.of(\n        keyPrefix,\n        CaffeineCacheConfig.class\n    );\n    caffeineCacheConfigJsonConfigProvider.inject(properties, configurator);\n    final CaffeineCacheConfig config = caffeineCacheConfigJsonConfigProvider.get().get();\n    Assert.assertEquals(-1, config.getExpireAfter());\n    Assert.assertEquals(-1L, config.getSizeInBytes());\n    Assert.assertEquals(ForkJoinPool.commonPool(), config.createExecutor());\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/cache/CaffeineCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"N"},{"authorDate":"2021-09-18 00:53:25","commitOrder":11,"curCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    final DruidSchemaCatalog rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, CalciteTests.TEST_AUTHORIZER_MAPPER);\n    testRequestLogger = new TestRequestLogger();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n                binder.bind(RequestLogger.class).toInstance(testRequestLogger);\n                binder.bind(DruidSchemaCatalog.class).toInstance(rootSchema);\n                for (NamedSchema schema : rootSchema.getNamedSchemas().values()) {\n                  Multibinder.newSetBinder(binder, NamedSchema.class).addBinding().toInstance(schema);\n                }\n                binder.bind(QueryLifecycleFactory.class)\n                      .toInstance(CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate));\n                binder.bind(DruidOperatorTable.class).toInstance(operatorTable);\n                binder.bind(ExprMacroTable.class).toInstance(macroTable);\n                binder.bind(PlannerConfig.class).toInstance(plannerConfig);\n                binder.bind(String.class)\n                      .annotatedWith(DruidSchemaName.class)\n                      .toInstance(CalciteTests.DRUID_SCHEMA_NAME);\n                binder.bind(AvaticaServerConfig.class).toInstance(AVATICA_CONFIG);\n                binder.bind(ServiceEmitter.class).to(NoopServiceEmitter.class);\n                binder.bind(QuerySchedulerProvider.class).in(LazySingleton.class);\n                binder.bind(QueryScheduler.class)\n                      .toProvider(QuerySchedulerProvider.class)\n                      .in(LazySingleton.class);\n              }\n            }\n        )\n    );\n\n    druidMeta = injector.getInstance(DruidMeta.class);\n    final AbstractAvaticaHandler handler = this.getAvaticaHandler(druidMeta);\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = this.getJdbcConnectionString(port);\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    propertiesLosAngeles.setProperty(\"sqlQueryId\", DUMMY_SQL_QUERY_ID);\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","date":"2021-09-18 00:53:25","endLine":230,"groupId":"10967","id":22,"instanceNumber":2,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/34665da4862a9f3d40a8ad475275ad8f4a0f73.src","preCode":"  public void setUp() throws Exception\n  {\n    walker = CalciteTests.createMockWalker(conglomerate, temporaryFolder.newFolder());\n    final PlannerConfig plannerConfig = new PlannerConfig();\n    final DruidOperatorTable operatorTable = CalciteTests.createOperatorTable();\n    final ExprMacroTable macroTable = CalciteTests.createExprMacroTable();\n    final SchemaPlus rootSchema =\n        CalciteTests.createMockRootSchema(conglomerate, walker, plannerConfig, CalciteTests.TEST_AUTHORIZER_MAPPER);\n    testRequestLogger = new TestRequestLogger();\n\n    injector = Initialization.makeInjectorWithModules(\n        GuiceInjectors.makeStartupInjector(),\n        ImmutableList.of(\n            new Module()\n            {\n              @Override\n              public void configure(Binder binder)\n              {\n                binder.bindConstant().annotatedWith(Names.named(\"serviceName\")).to(\"test\");\n                binder.bindConstant().annotatedWith(Names.named(\"servicePort\")).to(0);\n                binder.bindConstant().annotatedWith(Names.named(\"tlsServicePort\")).to(-1);\n                binder.bind(AuthenticatorMapper.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_MAPPER);\n                binder.bind(AuthorizerMapper.class).toInstance(CalciteTests.TEST_AUTHORIZER_MAPPER);\n                binder.bind(Escalator.class).toInstance(CalciteTests.TEST_AUTHENTICATOR_ESCALATOR);\n                binder.bind(RequestLogger.class).toInstance(testRequestLogger);\n                binder.bind(SchemaPlus.class).toInstance(rootSchema);\n                binder.bind(QueryLifecycleFactory.class)\n                      .toInstance(CalciteTests.createMockQueryLifecycleFactory(walker, conglomerate));\n                binder.bind(DruidOperatorTable.class).toInstance(operatorTable);\n                binder.bind(ExprMacroTable.class).toInstance(macroTable);\n                binder.bind(PlannerConfig.class).toInstance(plannerConfig);\n                binder.bind(String.class)\n                      .annotatedWith(DruidSchemaName.class)\n                      .toInstance(CalciteTests.DRUID_SCHEMA_NAME);\n                binder.bind(AvaticaServerConfig.class).toInstance(AVATICA_CONFIG);\n                binder.bind(ServiceEmitter.class).to(NoopServiceEmitter.class);\n                binder.bind(QuerySchedulerProvider.class).in(LazySingleton.class);\n                binder.bind(QueryScheduler.class)\n                      .toProvider(QuerySchedulerProvider.class)\n                      .in(LazySingleton.class);\n              }\n            }\n        )\n    );\n\n    druidMeta = injector.getInstance(DruidMeta.class);\n    final AbstractAvaticaHandler handler = this.getAvaticaHandler(druidMeta);\n    final int port = ThreadLocalRandom.current().nextInt(9999) + 10000;\n    server = new Server(new InetSocketAddress(\"127.0.0.1\", port));\n    server.setHandler(handler);\n    server.start();\n    url = this.getJdbcConnectionString(port);\n    client = DriverManager.getConnection(url, \"regularUser\", \"druid\");\n    superuserClient = DriverManager.getConnection(url, CalciteTests.TEST_SUPERUSER_NAME, \"druid\");\n\n    final Properties propertiesLosAngeles = new Properties();\n    propertiesLosAngeles.setProperty(\"sqlTimeZone\", \"America/Los_Angeles\");\n    propertiesLosAngeles.setProperty(\"user\", \"regularUserLA\");\n    propertiesLosAngeles.setProperty(\"sqlQueryId\", DUMMY_SQL_QUERY_ID);\n    clientLosAngeles = DriverManager.getConnection(url, propertiesLosAngeles);\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"392f0ca1b52ee66aa8b3affed58eb117bb44d910","commitMessage":"@@@refactor sql authorization to get resource type from schema.  resource type to be string (#11692)\n\n* refactor sql authorization to get resource type from schema.  refactor resource type from enum to string\n\n* information schema auth filtering adjustments\n\n* refactor\n\n* minor stuff\n\n* Update SqlResourceCollectorShuttle.java","date":"2021-09-18 00:53:25","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"}]
