[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void calculationIntervalTest()\n  {\n    DataSegment segmentA = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, 0), 100);\n    DataSegment segmentB = createSegment(\n        DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, (int) TimeUnit.DAYS.toHours(50)), 100\n    );\n\n    SegmentsCostCache.Bucket.Builder prototype = SegmentsCostCache.Bucket.builder(new Interval(\n        REFERENCE_TIME.minusHours(5),\n        REFERENCE_TIME.plusHours(5)\n    ));\n    prototype.addSegment(segmentA);\n    SegmentsCostCache.Bucket bucket = prototype.build();\n\n    assertTrue(bucket.inCalculationInterval(segmentA));\n    assertFalse(bucket.inCalculationInterval(segmentB));\n  }\n","date":"2018-08-31 00:56:26","endLine":110,"groupId":"14504","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"calculationIntervalTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ea/8d0339d4616f0eb19faa47252356075aaf15c3.src","preCode":"  public void calculationIntervalTest()\n  {\n    DataSegment segmentA = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, 0), 100);\n    DataSegment segmentB = createSegment(\n        DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, (int) TimeUnit.DAYS.toHours(50)), 100\n    );\n\n    SegmentsCostCache.Bucket.Builder prototype = SegmentsCostCache.Bucket.builder(new Interval(\n        REFERENCE_TIME.minusHours(5),\n        REFERENCE_TIME.plusHours(5)\n    ));\n    prototype.addSegment(segmentA);\n    SegmentsCostCache.Bucket bucket = prototype.build();\n\n    assertTrue(bucket.inCalculationInterval(segmentA));\n    assertFalse(bucket.inCalculationInterval(segmentB));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/cost/SegmentsCostCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void multipleSegmentsCostTest()\n  {\n    DataSegment segmentA = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, -2), 100);\n    DataSegment segmentB = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, 0), 100);\n    DataSegment segmentC = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, 2), 100);\n\n    SegmentsCostCache.Bucket.Builder prototype = SegmentsCostCache.Bucket.builder(new Interval(\n        REFERENCE_TIME.minusHours(5),\n        REFERENCE_TIME.plusHours(5)\n    ));\n\n    prototype.addSegment(segmentA);\n    prototype.addSegment(segmentC);\n    SegmentsCostCache.Bucket bucket = prototype.build();\n\n    double segmentCost = bucket.cost(segmentB);\n\n    assertEquals(0.001574717989780039, segmentCost, EPSILON);\n  }\n","date":"2018-08-31 00:56:26","endLine":149,"groupId":"14506","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"multipleSegmentsCostTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ea/8d0339d4616f0eb19faa47252356075aaf15c3.src","preCode":"  public void multipleSegmentsCostTest()\n  {\n    DataSegment segmentA = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, -2), 100);\n    DataSegment segmentB = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, 0), 100);\n    DataSegment segmentC = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, 2), 100);\n\n    SegmentsCostCache.Bucket.Builder prototype = SegmentsCostCache.Bucket.builder(new Interval(\n        REFERENCE_TIME.minusHours(5),\n        REFERENCE_TIME.plusHours(5)\n    ));\n\n    prototype.addSegment(segmentA);\n    prototype.addSegment(segmentC);\n    SegmentsCostCache.Bucket bucket = prototype.build();\n\n    double segmentCost = bucket.cost(segmentB);\n\n    assertEquals(0.001574717989780039, segmentCost, EPSILON);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/cost/SegmentsCostCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-07-07 00:33:12","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void calculationIntervalTest()\n  {\n    DataSegment segmentA = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, 0), 100);\n    DataSegment segmentB = createSegment(\n        DATA_SOURCE,\n        shifted1HInterval(REFERENCE_TIME, (int) TimeUnit.DAYS.toHours(50)),\n        100\n    );\n\n    SegmentsCostCache.Bucket.Builder prototype = SegmentsCostCache.Bucket.builder(\n        new Interval(REFERENCE_TIME.minusHours(5), REFERENCE_TIME.plusHours(5))\n    );\n    prototype.addSegment(segmentA);\n    SegmentsCostCache.Bucket bucket = prototype.build();\n\n    Assert.assertTrue(bucket.inCalculationInterval(segmentA));\n    Assert.assertFalse(bucket.inCalculationInterval(segmentB));\n  }\n","date":"2019-07-07 00:33:12","endLine":107,"groupId":"10399","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"calculationIntervalTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f0/ae22094fe4952b4906906295c88ccf1eab5bc3.src","preCode":"  public void calculationIntervalTest()\n  {\n    DataSegment segmentA = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, 0), 100);\n    DataSegment segmentB = createSegment(\n        DATA_SOURCE,\n        shifted1HInterval(REFERENCE_TIME, (int) TimeUnit.DAYS.toHours(50)),\n        100\n    );\n\n    SegmentsCostCache.Bucket.Builder prototype = SegmentsCostCache.Bucket.builder(\n        new Interval(REFERENCE_TIME.minusHours(5), REFERENCE_TIME.plusHours(5))\n    );\n    prototype.addSegment(segmentA);\n    SegmentsCostCache.Bucket bucket = prototype.build();\n\n    assertTrue(bucket.inCalculationInterval(segmentA));\n    assertFalse(bucket.inCalculationInterval(segmentB));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/cost/SegmentsCostCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void multipleSegmentsCostTest()\n  {\n    DataSegment segmentA = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, -2), 100);\n    DataSegment segmentB = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, 0), 100);\n    DataSegment segmentC = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, 2), 100);\n\n    SegmentsCostCache.Bucket.Builder prototype = SegmentsCostCache.Bucket.builder(new Interval(\n        REFERENCE_TIME.minusHours(5),\n        REFERENCE_TIME.plusHours(5)\n    ));\n\n    prototype.addSegment(segmentA);\n    prototype.addSegment(segmentC);\n    SegmentsCostCache.Bucket bucket = prototype.build();\n\n    double segmentCost = bucket.cost(segmentB);\n\n    Assert.assertEquals(0.001574717989780039, segmentCost, EPSILON);\n  }\n","date":"2019-07-07 00:33:12","endLine":146,"groupId":"10399","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"multipleSegmentsCostTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f0/ae22094fe4952b4906906295c88ccf1eab5bc3.src","preCode":"  public void multipleSegmentsCostTest()\n  {\n    DataSegment segmentA = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, -2), 100);\n    DataSegment segmentB = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, 0), 100);\n    DataSegment segmentC = createSegment(DATA_SOURCE, shifted1HInterval(REFERENCE_TIME, 2), 100);\n\n    SegmentsCostCache.Bucket.Builder prototype = SegmentsCostCache.Bucket.builder(new Interval(\n        REFERENCE_TIME.minusHours(5),\n        REFERENCE_TIME.plusHours(5)\n    ));\n\n    prototype.addSegment(segmentA);\n    prototype.addSegment(segmentC);\n    SegmentsCostCache.Bucket bucket = prototype.build();\n\n    double segmentCost = bucket.cost(segmentB);\n\n    assertEquals(0.001574717989780039, segmentCost, EPSILON);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/cost/SegmentsCostCacheTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"}]
