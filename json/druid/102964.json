[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testFindSelf()\n  {\n    String bucket = \"bucket\";\n    String keyPrefix = \"prefix/dir/0\";\n    ServerSideEncryptingAmazonS3 s3Client = EasyMock.createStrictMock(ServerSideEncryptingAmazonS3.class);\n\n    S3ObjectSummary object0 = new S3ObjectSummary();\n\n    object0.setBucketName(bucket);\n    object0.setKey(keyPrefix + \"/renames-0.gz\");\n    object0.setLastModified(new Date(0));\n\n    final ListObjectsV2Result result = new ListObjectsV2Result();\n    result.getObjectSummaries().add(object0);\n    result.setKeyCount(1);\n    result.setTruncated(false);\n\n    EasyMock.expect(s3Client.listObjectsV2(EasyMock.anyObject(ListObjectsV2Request.class)))\n            .andReturn(result)\n            .once();\n    S3TimestampVersionedDataFinder finder = new S3TimestampVersionedDataFinder(s3Client);\n\n    Pattern pattern = Pattern.compile(\"renames-[0-9]*\\\\.gz\");\n\n    EasyMock.replay(s3Client);\n\n\n    URI latest = finder.getLatestVersion(URI.create(StringUtils.format(\"s3://%s/%s\", bucket, keyPrefix)), pattern);\n\n    EasyMock.verify(s3Client);\n\n    URI expected = URI.create(StringUtils.format(\"s3://%s/%s\", bucket, object0.getKey()));\n\n    Assert.assertEquals(expected, latest);\n  }\n","date":"2018-08-31 00:56:26","endLine":142,"groupId":"3054","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFindSelf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8e/144c2340f29996dd1c312f6aae77714eb7e5ef.src","preCode":"  public void testFindSelf()\n  {\n    String bucket = \"bucket\";\n    String keyPrefix = \"prefix/dir/0\";\n    ServerSideEncryptingAmazonS3 s3Client = EasyMock.createStrictMock(ServerSideEncryptingAmazonS3.class);\n\n    S3ObjectSummary object0 = new S3ObjectSummary();\n\n    object0.setBucketName(bucket);\n    object0.setKey(keyPrefix + \"/renames-0.gz\");\n    object0.setLastModified(new Date(0));\n\n    final ListObjectsV2Result result = new ListObjectsV2Result();\n    result.getObjectSummaries().add(object0);\n    result.setKeyCount(1);\n    result.setTruncated(false);\n\n    EasyMock.expect(s3Client.listObjectsV2(EasyMock.anyObject(ListObjectsV2Request.class)))\n            .andReturn(result)\n            .once();\n    S3TimestampVersionedDataFinder finder = new S3TimestampVersionedDataFinder(s3Client);\n\n    Pattern pattern = Pattern.compile(\"renames-[0-9]*\\\\.gz\");\n\n    EasyMock.replay(s3Client);\n\n\n    URI latest = finder.getLatestVersion(URI.create(StringUtils.format(\"s3://%s/%s\", bucket, keyPrefix)), pattern);\n\n    EasyMock.verify(s3Client);\n\n    URI expected = URI.create(StringUtils.format(\"s3://%s/%s\", bucket, object0.getKey()));\n\n    Assert.assertEquals(expected, latest);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/S3TimestampVersionedDataFinderTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testFindExact()\n  {\n    String bucket = \"bucket\";\n    String keyPrefix = \"prefix/dir/0\";\n    ServerSideEncryptingAmazonS3 s3Client = EasyMock.createStrictMock(ServerSideEncryptingAmazonS3.class);\n\n    S3ObjectSummary object0 = new S3ObjectSummary();\n\n    object0.setBucketName(bucket);\n    object0.setKey(keyPrefix + \"/renames-0.gz\");\n    object0.setLastModified(new Date(0));\n\n    final ListObjectsV2Result result = new ListObjectsV2Result();\n    result.getObjectSummaries().add(object0);\n    result.setKeyCount(1);\n    result.setTruncated(false);\n\n    EasyMock.expect(s3Client.listObjectsV2(EasyMock.anyObject(ListObjectsV2Request.class)))\n            .andReturn(result)\n            .once();\n    S3TimestampVersionedDataFinder finder = new S3TimestampVersionedDataFinder(s3Client);\n\n    EasyMock.replay(s3Client);\n\n    URI latest = finder.getLatestVersion(URI.create(StringUtils.format(\"s3://%s/%s\", bucket, object0.getKey())), null);\n\n    EasyMock.verify(s3Client);\n\n    URI expected = URI.create(StringUtils.format(\"s3://%s/%s\", bucket, object0.getKey()));\n\n    Assert.assertEquals(expected, latest);\n  }\n","date":"2018-08-31 00:56:26","endLine":176,"groupId":"3054","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFindExact","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8e/144c2340f29996dd1c312f6aae77714eb7e5ef.src","preCode":"  public void testFindExact()\n  {\n    String bucket = \"bucket\";\n    String keyPrefix = \"prefix/dir/0\";\n    ServerSideEncryptingAmazonS3 s3Client = EasyMock.createStrictMock(ServerSideEncryptingAmazonS3.class);\n\n    S3ObjectSummary object0 = new S3ObjectSummary();\n\n    object0.setBucketName(bucket);\n    object0.setKey(keyPrefix + \"/renames-0.gz\");\n    object0.setLastModified(new Date(0));\n\n    final ListObjectsV2Result result = new ListObjectsV2Result();\n    result.getObjectSummaries().add(object0);\n    result.setKeyCount(1);\n    result.setTruncated(false);\n\n    EasyMock.expect(s3Client.listObjectsV2(EasyMock.anyObject(ListObjectsV2Request.class)))\n            .andReturn(result)\n            .once();\n    S3TimestampVersionedDataFinder finder = new S3TimestampVersionedDataFinder(s3Client);\n\n    EasyMock.replay(s3Client);\n\n    URI latest = finder.getLatestVersion(URI.create(StringUtils.format(\"s3://%s/%s\", bucket, object0.getKey())), null);\n\n    EasyMock.verify(s3Client);\n\n    URI expected = URI.create(StringUtils.format(\"s3://%s/%s\", bucket, object0.getKey()));\n\n    Assert.assertEquals(expected, latest);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/S3TimestampVersionedDataFinderTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-03-04 12:51:06","codes":[{"authorDate":"2020-03-04 12:51:06","commitOrder":2,"curCode":"  public void testFindSelf()\n  {\n    String bucket = \"bucket\";\n    String keyPrefix = \"prefix/dir/0\";\n    ServerSideEncryptingAmazonS3 s3Client = EasyMock.createStrictMock(ServerSideEncryptingAmazonS3.class);\n\n    S3ObjectSummary object0 = new S3ObjectSummary();\n\n    object0.setBucketName(bucket);\n    object0.setKey(keyPrefix + \"/renames-0.gz\");\n    object0.setLastModified(new Date(0));\n    object0.setSize(10);\n\n    final ListObjectsV2Result result = new ListObjectsV2Result();\n    result.getObjectSummaries().add(object0);\n    result.setKeyCount(1);\n    result.setTruncated(false);\n\n    EasyMock.expect(s3Client.listObjectsV2(EasyMock.anyObject(ListObjectsV2Request.class)))\n            .andReturn(result)\n            .once();\n    S3TimestampVersionedDataFinder finder = new S3TimestampVersionedDataFinder(s3Client);\n\n    Pattern pattern = Pattern.compile(\"renames-[0-9]*\\\\.gz\");\n\n    EasyMock.replay(s3Client);\n\n\n    URI latest = finder.getLatestVersion(URI.create(StringUtils.format(\"s3://%s/%s\", bucket, keyPrefix)), pattern);\n\n    EasyMock.verify(s3Client);\n\n    URI expected = URI.create(StringUtils.format(\"s3://%s/%s\", bucket, object0.getKey()));\n\n    Assert.assertEquals(expected, latest);\n  }\n","date":"2020-03-04 12:51:06","endLine":145,"groupId":"102964","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testFindSelf","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f8/39d3df4c7f95e44432f01c32e7fe0f74c100dc.src","preCode":"  public void testFindSelf()\n  {\n    String bucket = \"bucket\";\n    String keyPrefix = \"prefix/dir/0\";\n    ServerSideEncryptingAmazonS3 s3Client = EasyMock.createStrictMock(ServerSideEncryptingAmazonS3.class);\n\n    S3ObjectSummary object0 = new S3ObjectSummary();\n\n    object0.setBucketName(bucket);\n    object0.setKey(keyPrefix + \"/renames-0.gz\");\n    object0.setLastModified(new Date(0));\n\n    final ListObjectsV2Result result = new ListObjectsV2Result();\n    result.getObjectSummaries().add(object0);\n    result.setKeyCount(1);\n    result.setTruncated(false);\n\n    EasyMock.expect(s3Client.listObjectsV2(EasyMock.anyObject(ListObjectsV2Request.class)))\n            .andReturn(result)\n            .once();\n    S3TimestampVersionedDataFinder finder = new S3TimestampVersionedDataFinder(s3Client);\n\n    Pattern pattern = Pattern.compile(\"renames-[0-9]*\\\\.gz\");\n\n    EasyMock.replay(s3Client);\n\n\n    URI latest = finder.getLatestVersion(URI.create(StringUtils.format(\"s3://%s/%s\", bucket, keyPrefix)), pattern);\n\n    EasyMock.verify(s3Client);\n\n    URI expected = URI.create(StringUtils.format(\"s3://%s/%s\", bucket, object0.getKey()));\n\n    Assert.assertEquals(expected, latest);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/S3TimestampVersionedDataFinderTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2020-03-04 12:51:06","commitOrder":2,"curCode":"  public void testFindExact()\n  {\n    String bucket = \"bucket\";\n    String keyPrefix = \"prefix/dir/0\";\n    ServerSideEncryptingAmazonS3 s3Client = EasyMock.createStrictMock(ServerSideEncryptingAmazonS3.class);\n\n    S3ObjectSummary object0 = new S3ObjectSummary();\n\n    object0.setBucketName(bucket);\n    object0.setKey(keyPrefix + \"/renames-0.gz\");\n    object0.setLastModified(new Date(0));\n    object0.setSize(10);\n\n    final ListObjectsV2Result result = new ListObjectsV2Result();\n    result.getObjectSummaries().add(object0);\n    result.setKeyCount(1);\n    result.setTruncated(false);\n\n    EasyMock.expect(s3Client.listObjectsV2(EasyMock.anyObject(ListObjectsV2Request.class)))\n            .andReturn(result)\n            .once();\n    S3TimestampVersionedDataFinder finder = new S3TimestampVersionedDataFinder(s3Client);\n\n    EasyMock.replay(s3Client);\n\n    URI latest = finder.getLatestVersion(URI.create(StringUtils.format(\"s3://%s/%s\", bucket, object0.getKey())), null);\n\n    EasyMock.verify(s3Client);\n\n    URI expected = URI.create(StringUtils.format(\"s3://%s/%s\", bucket, object0.getKey()));\n\n    Assert.assertEquals(expected, latest);\n  }\n","date":"2020-03-04 12:51:06","endLine":180,"groupId":"102964","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testFindExact","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f8/39d3df4c7f95e44432f01c32e7fe0f74c100dc.src","preCode":"  public void testFindExact()\n  {\n    String bucket = \"bucket\";\n    String keyPrefix = \"prefix/dir/0\";\n    ServerSideEncryptingAmazonS3 s3Client = EasyMock.createStrictMock(ServerSideEncryptingAmazonS3.class);\n\n    S3ObjectSummary object0 = new S3ObjectSummary();\n\n    object0.setBucketName(bucket);\n    object0.setKey(keyPrefix + \"/renames-0.gz\");\n    object0.setLastModified(new Date(0));\n\n    final ListObjectsV2Result result = new ListObjectsV2Result();\n    result.getObjectSummaries().add(object0);\n    result.setKeyCount(1);\n    result.setTruncated(false);\n\n    EasyMock.expect(s3Client.listObjectsV2(EasyMock.anyObject(ListObjectsV2Request.class)))\n            .andReturn(result)\n            .once();\n    S3TimestampVersionedDataFinder finder = new S3TimestampVersionedDataFinder(s3Client);\n\n    EasyMock.replay(s3Client);\n\n    URI latest = finder.getLatestVersion(URI.create(StringUtils.format(\"s3://%s/%s\", bucket, object0.getKey())), null);\n\n    EasyMock.verify(s3Client);\n\n    URI expected = URI.create(StringUtils.format(\"s3://%s/%s\", bucket, object0.getKey()));\n\n    Assert.assertEquals(expected, latest);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/S3TimestampVersionedDataFinderTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"9466ac7c9b2b1d86b06cfa7c7f5eeb35d588dd22","commitMessage":"@@@Skip empty files for local.  hdfs.  and cloud input sources (#9450)\n\n* Skip empty files for local.  hdfs.  and cloud input sources\n\n* split hint spec doc\n\n* doc for skipping empty files\n\n* fix typo; adjust tests\n\n* unnecessary fluent iterable\n\n* address comments\n\n* fix test\n\n* use the right lists\n\n* fix test\n\n* fix test\n","date":"2020-03-04 12:51:06","modifiedFileCount":"16","status":"M","submitter":"Jihoon Son"}]
