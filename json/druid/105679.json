[{"authorTime":"2019-05-21 08:04:35","codes":[{"authorDate":"2019-05-21 08:04:35","commitOrder":1,"curCode":"  private void testGroupBy(List<Segment> segments, boolean enableRowBasedMethods, boolean enableColumnBasedMethods)\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(Granularities.ALL)\n        .setVirtualColumns(\n            new DummyStringVirtualColumn(QueryRunnerTestHelper.marketDimension, VSTRING_DIM,\n                                         enableRowBasedMethods, enableColumnBasedMethods,\n                                         false, true\n            )\n        )\n        .addDimension(VSTRING_DIM)\n        .setAggregatorSpecs(new CountAggregatorFactory(COUNT))\n        .setInterval(\"2000/2030\")\n        .addOrderByColumn(VSTRING_DIM)\n        .build();\n\n    List<Row> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments, query).toList();\n\n    List<Row> expectedRows = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\", COUNT, 1674L, VSTRING_DIM, \"spot\"),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2000-01-01T00:00:00.000Z\",\n            COUNT,\n            372L,\n            VSTRING_DIM,\n            \"total_market\"\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\", COUNT, 372L, VSTRING_DIM, \"upfront\")\n    );\n\n    TestHelper.assertExpectedObjects(expectedRows, rows, \"failed\");\n  }\n","date":"2019-05-21 08:04:35","endLine":274,"groupId":"14569","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupBy","params":"(List<Segment>segments@booleanenableRowBasedMethods@booleanenableColumnBasedMethods)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/11/58d57eaba5d315f8fdd90439cf27eda8b37c60.src","preCode":"  private void testGroupBy(List<Segment> segments, boolean enableRowBasedMethods, boolean enableColumnBasedMethods)\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(Granularities.ALL)\n        .setVirtualColumns(\n            new DummyStringVirtualColumn(QueryRunnerTestHelper.marketDimension, VSTRING_DIM,\n                                         enableRowBasedMethods, enableColumnBasedMethods,\n                                         false, true\n            )\n        )\n        .addDimension(VSTRING_DIM)\n        .setAggregatorSpecs(new CountAggregatorFactory(COUNT))\n        .setInterval(\"2000/2030\")\n        .addOrderByColumn(VSTRING_DIM)\n        .build();\n\n    List<Row> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments, query).toList();\n\n    List<Row> expectedRows = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\", COUNT, 1674L, VSTRING_DIM, \"spot\"),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2000-01-01T00:00:00.000Z\",\n            COUNT,\n            372L,\n            VSTRING_DIM,\n            \"total_market\"\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\", COUNT, 372L, VSTRING_DIM, \"upfront\")\n    );\n\n    TestHelper.assertExpectedObjects(expectedRows, rows, \"failed\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/DummyStringVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"B"},{"authorDate":"2019-05-21 08:04:35","commitOrder":1,"curCode":"  private void testGroupByWithSelectFilter(\n      List<Segment> segments,\n      boolean enableRowBasedMethods,\n      boolean enableColumnBasedMethods,\n      boolean enableBitmaps,\n      boolean disableValueMatchers\n  )\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(Granularities.ALL)\n        .setVirtualColumns(\n            new DummyStringVirtualColumn(\n                QueryRunnerTestHelper.marketDimension,\n                VSTRING_DIM,\n                enableRowBasedMethods,\n                enableColumnBasedMethods,\n                enableBitmaps,\n                disableValueMatchers\n            )\n        )\n        .addDimension(VSTRING_DIM)\n        .setAggregatorSpecs(new CountAggregatorFactory(COUNT))\n        .setInterval(\"2000/2030\")\n        .addOrderByColumn(VSTRING_DIM)\n        .setDimFilter(new SelectorDimFilter(VSTRING_DIM, \"spot\", null))\n        .build();\n\n    List<Row> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments, query).toList();\n\n    List<Row> expectedRows = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\", COUNT, 1674L, VSTRING_DIM, \"spot\")\n    );\n\n    TestHelper.assertExpectedObjects(expectedRows, rows, \"failed\");\n  }\n","date":"2019-05-21 08:04:35","endLine":311,"groupId":"14568","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByWithSelectFilter","params":"(List<Segment>segments@booleanenableRowBasedMethods@booleanenableColumnBasedMethods@booleanenableBitmaps@booleandisableValueMatchers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/11/58d57eaba5d315f8fdd90439cf27eda8b37c60.src","preCode":"  private void testGroupByWithSelectFilter(\n      List<Segment> segments,\n      boolean enableRowBasedMethods,\n      boolean enableColumnBasedMethods,\n      boolean enableBitmaps,\n      boolean disableValueMatchers\n  )\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(Granularities.ALL)\n        .setVirtualColumns(\n            new DummyStringVirtualColumn(\n                QueryRunnerTestHelper.marketDimension,\n                VSTRING_DIM,\n                enableRowBasedMethods,\n                enableColumnBasedMethods,\n                enableBitmaps,\n                disableValueMatchers\n            )\n        )\n        .addDimension(VSTRING_DIM)\n        .setAggregatorSpecs(new CountAggregatorFactory(COUNT))\n        .setInterval(\"2000/2030\")\n        .addOrderByColumn(VSTRING_DIM)\n        .setDimFilter(new SelectorDimFilter(VSTRING_DIM, \"spot\", null))\n        .build();\n\n    List<Row> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments, query).toList();\n\n    List<Row> expectedRows = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\", COUNT, 1674L, VSTRING_DIM, \"spot\")\n    );\n\n    TestHelper.assertExpectedObjects(expectedRows, rows, \"failed\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/DummyStringVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"B"}],"commitId":"fb0c84694143cda3e66d59e3d706f38f3fd5d1cb","commitMessage":"@@@Virtual column updates for exploiting base column internal structure (#7618)\n\n* VirtualColumn updates for exploiting base column internal structure\n\n* unit tests for virtual column interface updates\n\n* groupBy needs to use VirtualizedColumnSelectorFactory if outer query in\nnested groupBy has virtual columns.\n\n* fix strict compile checks\n\n* fix teamcity build errors\n\n* add comment explaining useVirtualizedColumnSelectorFactory flag in RowBasedGrouperHelper.createGrouperAccumulatorPair(..)\n","date":"2019-05-21 08:04:35","modifiedFileCount":"9","status":"B","submitter":"Himanshu"},{"authorTime":"2019-08-01 07:15:12","codes":[{"authorDate":"2019-08-01 07:15:12","commitOrder":2,"curCode":"  private void testGroupBy(List<Segment> segments, boolean enableRowBasedMethods, boolean enableColumnBasedMethods)\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(Granularities.ALL)\n        .setVirtualColumns(\n            new DummyStringVirtualColumn(QueryRunnerTestHelper.marketDimension, VSTRING_DIM,\n                                         enableRowBasedMethods, enableColumnBasedMethods,\n                                         false, true\n            )\n        )\n        .addDimension(VSTRING_DIM)\n        .setAggregatorSpecs(new CountAggregatorFactory(COUNT))\n        .setInterval(\"2000/2030\")\n        .addOrderByColumn(VSTRING_DIM)\n        .build();\n\n    List<ResultRow> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments, query).toList();\n\n    List<ResultRow> expectedRows = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"2000\", COUNT, 1674L, VSTRING_DIM, \"spot\"),\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"2000\", COUNT, 372L, VSTRING_DIM, \"total_market\"),\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"2000\", COUNT, 372L, VSTRING_DIM, \"upfront\")\n    );\n\n    TestHelper.assertExpectedObjects(expectedRows, rows, \"failed\");\n  }\n","date":"2019-08-01 07:15:12","endLine":268,"groupId":"14569","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupBy","params":"(List<Segment>segments@booleanenableRowBasedMethods@booleanenableColumnBasedMethods)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/89bf02c3f7040b9819486602106ea28fbf8eec.src","preCode":"  private void testGroupBy(List<Segment> segments, boolean enableRowBasedMethods, boolean enableColumnBasedMethods)\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(Granularities.ALL)\n        .setVirtualColumns(\n            new DummyStringVirtualColumn(QueryRunnerTestHelper.marketDimension, VSTRING_DIM,\n                                         enableRowBasedMethods, enableColumnBasedMethods,\n                                         false, true\n            )\n        )\n        .addDimension(VSTRING_DIM)\n        .setAggregatorSpecs(new CountAggregatorFactory(COUNT))\n        .setInterval(\"2000/2030\")\n        .addOrderByColumn(VSTRING_DIM)\n        .build();\n\n    List<Row> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments, query).toList();\n\n    List<Row> expectedRows = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\", COUNT, 1674L, VSTRING_DIM, \"spot\"),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\n            \"2000-01-01T00:00:00.000Z\",\n            COUNT,\n            372L,\n            VSTRING_DIM,\n            \"total_market\"\n        ),\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\", COUNT, 372L, VSTRING_DIM, \"upfront\")\n    );\n\n    TestHelper.assertExpectedObjects(expectedRows, rows, \"failed\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/DummyStringVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2019-08-01 07:15:12","commitOrder":2,"curCode":"  private void testGroupByWithSelectFilter(\n      List<Segment> segments,\n      boolean enableRowBasedMethods,\n      boolean enableColumnBasedMethods,\n      boolean enableBitmaps,\n      boolean disableValueMatchers\n  )\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(Granularities.ALL)\n        .setVirtualColumns(\n            new DummyStringVirtualColumn(\n                QueryRunnerTestHelper.marketDimension,\n                VSTRING_DIM,\n                enableRowBasedMethods,\n                enableColumnBasedMethods,\n                enableBitmaps,\n                disableValueMatchers\n            )\n        )\n        .addDimension(VSTRING_DIM)\n        .setAggregatorSpecs(new CountAggregatorFactory(COUNT))\n        .setInterval(\"2000/2030\")\n        .addOrderByColumn(VSTRING_DIM)\n        .setDimFilter(new SelectorDimFilter(VSTRING_DIM, \"spot\", null))\n        .build();\n\n    List<ResultRow> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments, query).toList();\n\n    List<ResultRow> expectedRows = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"2000\", COUNT, 1674L, VSTRING_DIM, \"spot\")\n    );\n\n    TestHelper.assertExpectedObjects(expectedRows, rows, \"failed\");\n  }\n","date":"2019-08-01 07:15:12","endLine":305,"groupId":"14568","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByWithSelectFilter","params":"(List<Segment>segments@booleanenableRowBasedMethods@booleanenableColumnBasedMethods@booleanenableBitmaps@booleandisableValueMatchers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b1/89bf02c3f7040b9819486602106ea28fbf8eec.src","preCode":"  private void testGroupByWithSelectFilter(\n      List<Segment> segments,\n      boolean enableRowBasedMethods,\n      boolean enableColumnBasedMethods,\n      boolean enableBitmaps,\n      boolean disableValueMatchers\n  )\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(Granularities.ALL)\n        .setVirtualColumns(\n            new DummyStringVirtualColumn(\n                QueryRunnerTestHelper.marketDimension,\n                VSTRING_DIM,\n                enableRowBasedMethods,\n                enableColumnBasedMethods,\n                enableBitmaps,\n                disableValueMatchers\n            )\n        )\n        .addDimension(VSTRING_DIM)\n        .setAggregatorSpecs(new CountAggregatorFactory(COUNT))\n        .setInterval(\"2000/2030\")\n        .addOrderByColumn(VSTRING_DIM)\n        .setDimFilter(new SelectorDimFilter(VSTRING_DIM, \"spot\", null))\n        .build();\n\n    List<Row> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments, query).toList();\n\n    List<Row> expectedRows = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(\"2000-01-01T00:00:00.000Z\", COUNT, 1674L, VSTRING_DIM, \"spot\")\n    );\n\n    TestHelper.assertExpectedObjects(expectedRows, rows, \"failed\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/DummyStringVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"}],"commitId":"77297f4e6f2e9d617c96cd46852bb5a772961e85","commitMessage":"@@@GroupBy array-based result rows. (#8196)\n\n* GroupBy array-based result rows.\n\nFixes #8118; see that proposal for details.\n\nOther than the GroupBy changes.  the main other \"interesting\" classes are:\n\n- ResultRow: The array-based result type.\n- BaseQuery: T is no longer required to be Comparable.\n- QueryToolChest: Adds \"decorateObjectMapper\" to enable query-aware serialization\n  and deserialization of result rows (necessary due to their positional nature).\n- QueryResource: Uses the new decoration functionality.\n- DirectDruidClient: Also uses the new decoration functionality.\n- QueryMaker (in Druid SQL): Modifications to read ResultRows.\n\nThese classes weren't changed.  but got some new javadocs:\n\n- BySegmentQueryRunner\n- FinalizeResultsQueryRunner\n- Query\n\n* Adjustments for TC stuff.\n","date":"2019-08-01 07:15:12","modifiedFileCount":"111","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  private void testGroupBy(List<Segment> segments, boolean enableRowBasedMethods, boolean enableColumnBasedMethods)\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(Granularities.ALL)\n        .setVirtualColumns(\n            new DummyStringVirtualColumn(QueryRunnerTestHelper.MARKET_DIMENSION, VSTRING_DIM,\n                                         enableRowBasedMethods, enableColumnBasedMethods,\n                                         false, true\n            )\n        )\n        .addDimension(VSTRING_DIM)\n        .setAggregatorSpecs(new CountAggregatorFactory(COUNT))\n        .setInterval(\"2000/2030\")\n        .addOrderByColumn(VSTRING_DIM)\n        .build();\n\n    List<ResultRow> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments, query).toList();\n\n    List<ResultRow> expectedRows = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"2000\", COUNT, 1674L, VSTRING_DIM, \"spot\"),\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"2000\", COUNT, 372L, VSTRING_DIM, \"total_market\"),\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"2000\", COUNT, 372L, VSTRING_DIM, \"upfront\")\n    );\n\n    TestHelper.assertExpectedObjects(expectedRows, rows, \"failed\");\n  }\n","date":"2019-08-23 18:13:54","endLine":268,"groupId":"105679","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupBy","params":"(List<Segment>segments@booleanenableRowBasedMethods@booleanenableColumnBasedMethods)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d2/b3ccddedae9e0feb0ba728529c43bba8f8389a.src","preCode":"  private void testGroupBy(List<Segment> segments, boolean enableRowBasedMethods, boolean enableColumnBasedMethods)\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(Granularities.ALL)\n        .setVirtualColumns(\n            new DummyStringVirtualColumn(QueryRunnerTestHelper.marketDimension, VSTRING_DIM,\n                                         enableRowBasedMethods, enableColumnBasedMethods,\n                                         false, true\n            )\n        )\n        .addDimension(VSTRING_DIM)\n        .setAggregatorSpecs(new CountAggregatorFactory(COUNT))\n        .setInterval(\"2000/2030\")\n        .addOrderByColumn(VSTRING_DIM)\n        .build();\n\n    List<ResultRow> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments, query).toList();\n\n    List<ResultRow> expectedRows = Arrays.asList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"2000\", COUNT, 1674L, VSTRING_DIM, \"spot\"),\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"2000\", COUNT, 372L, VSTRING_DIM, \"total_market\"),\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"2000\", COUNT, 372L, VSTRING_DIM, \"upfront\")\n    );\n\n    TestHelper.assertExpectedObjects(expectedRows, rows, \"failed\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/DummyStringVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  private void testGroupByWithSelectFilter(\n      List<Segment> segments,\n      boolean enableRowBasedMethods,\n      boolean enableColumnBasedMethods,\n      boolean enableBitmaps,\n      boolean disableValueMatchers\n  )\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.DATA_SOURCE)\n        .setGranularity(Granularities.ALL)\n        .setVirtualColumns(\n            new DummyStringVirtualColumn(\n                QueryRunnerTestHelper.MARKET_DIMENSION,\n                VSTRING_DIM,\n                enableRowBasedMethods,\n                enableColumnBasedMethods,\n                enableBitmaps,\n                disableValueMatchers\n            )\n        )\n        .addDimension(VSTRING_DIM)\n        .setAggregatorSpecs(new CountAggregatorFactory(COUNT))\n        .setInterval(\"2000/2030\")\n        .addOrderByColumn(VSTRING_DIM)\n        .setDimFilter(new SelectorDimFilter(VSTRING_DIM, \"spot\", null))\n        .build();\n\n    List<ResultRow> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments, query).toList();\n\n    List<ResultRow> expectedRows = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"2000\", COUNT, 1674L, VSTRING_DIM, \"spot\")\n    );\n\n    TestHelper.assertExpectedObjects(expectedRows, rows, \"failed\");\n  }\n","date":"2019-08-23 18:13:54","endLine":305,"groupId":"105679","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupByWithSelectFilter","params":"(List<Segment>segments@booleanenableRowBasedMethods@booleanenableColumnBasedMethods@booleanenableBitmaps@booleandisableValueMatchers)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d2/b3ccddedae9e0feb0ba728529c43bba8f8389a.src","preCode":"  private void testGroupByWithSelectFilter(\n      List<Segment> segments,\n      boolean enableRowBasedMethods,\n      boolean enableColumnBasedMethods,\n      boolean enableBitmaps,\n      boolean disableValueMatchers\n  )\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(QueryRunnerTestHelper.dataSource)\n        .setGranularity(Granularities.ALL)\n        .setVirtualColumns(\n            new DummyStringVirtualColumn(\n                QueryRunnerTestHelper.marketDimension,\n                VSTRING_DIM,\n                enableRowBasedMethods,\n                enableColumnBasedMethods,\n                enableBitmaps,\n                disableValueMatchers\n            )\n        )\n        .addDimension(VSTRING_DIM)\n        .setAggregatorSpecs(new CountAggregatorFactory(COUNT))\n        .setInterval(\"2000/2030\")\n        .addOrderByColumn(VSTRING_DIM)\n        .setDimFilter(new SelectorDimFilter(VSTRING_DIM, \"spot\", null))\n        .build();\n\n    List<ResultRow> rows = groupByTestHelper.runQueryOnSegmentsObjs(segments, query).toList();\n\n    List<ResultRow> expectedRows = Collections.singletonList(\n        GroupByQueryRunnerTestHelper.createExpectedRow(query, \"2000\", COUNT, 1674L, VSTRING_DIM, \"spot\")\n    );\n\n    TestHelper.assertExpectedObjects(expectedRows, rows, \"failed\");\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/DummyStringVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
