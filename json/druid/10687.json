[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testLoadCache() throws Exception\n  {\n    List<DataSegment> segments = Lists.newLinkedList();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-03\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-04\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T01\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T03\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T06\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n    Collections.sort(segments);\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n    segmentLoadDropHandler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(11L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(13 * COUNT, announceCount.get());\n    segmentLoadDropHandler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","date":"2018-08-31 00:56:26","endLine":316,"groupId":"12803","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cc/4f4ca69d1a67b4e964dae9a05848f75a420b03.src","preCode":"  public void testLoadCache() throws Exception\n  {\n    List<DataSegment> segments = Lists.newLinkedList();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-03\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-04\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T01\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T03\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T06\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n    Collections.sort(segments);\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n    segmentLoadDropHandler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(11L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(13 * COUNT, announceCount.get());\n    segmentLoadDropHandler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentLoadDropHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testStartStop() throws Exception\n  {\n    SegmentLoadDropHandler handler = new SegmentLoadDropHandler(\n        jsonMapper,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public File getInfoDir()\n          {\n            return infoDir;\n          }\n\n          @Override\n          public int getNumLoadingThreads()\n          {\n            return 5;\n          }\n\n          @Override\n          public int getAnnounceIntervalMillis()\n          {\n            return 50;\n          }\n        },\n        announcer, EasyMock.createNiceMock(DataSegmentServerAnnouncer.class), segmentManager\n    );\n\n    List<DataSegment> segments = Lists.newLinkedList();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n    Collections.sort(segments);\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n\n    handler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(3L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(5 * COUNT, announceCount.get());\n    handler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","date":"2018-08-31 00:56:26","endLine":441,"groupId":"15463","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cc/4f4ca69d1a67b4e964dae9a05848f75a420b03.src","preCode":"  public void testStartStop() throws Exception\n  {\n    SegmentLoadDropHandler handler = new SegmentLoadDropHandler(\n        jsonMapper,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public File getInfoDir()\n          {\n            return infoDir;\n          }\n\n          @Override\n          public int getNumLoadingThreads()\n          {\n            return 5;\n          }\n\n          @Override\n          public int getAnnounceIntervalMillis()\n          {\n            return 50;\n          }\n        },\n        announcer, EasyMock.createNiceMock(DataSegmentServerAnnouncer.class), segmentManager\n    );\n\n    List<DataSegment> segments = Lists.newLinkedList();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n    Collections.sort(segments);\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n\n    handler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(3L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(5 * COUNT, announceCount.get());\n    handler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentLoadDropHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-09-14 09:07:06","codes":[{"authorDate":"2018-09-14 09:07:06","commitOrder":2,"curCode":"  public void testLoadCache() throws Exception\n  {\n    List<DataSegment> segments = new ArrayList<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-03\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-04\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T01\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T03\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T06\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n    Collections.sort(segments);\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n    segmentLoadDropHandler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(11L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(13 * COUNT, announceCount.get());\n    segmentLoadDropHandler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","date":"2018-09-14 09:07:06","endLine":315,"groupId":"12803","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/47/99f3f2c1a41a2ef143577ff2a6e3032ce1817f.src","preCode":"  public void testLoadCache() throws Exception\n  {\n    List<DataSegment> segments = Lists.newLinkedList();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-03\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-04\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T01\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T03\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T06\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n    Collections.sort(segments);\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n    segmentLoadDropHandler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(11L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(13 * COUNT, announceCount.get());\n    segmentLoadDropHandler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentLoadDropHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2018-09-14 09:07:06","commitOrder":2,"curCode":"  public void testStartStop() throws Exception\n  {\n    SegmentLoadDropHandler handler = new SegmentLoadDropHandler(\n        jsonMapper,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public File getInfoDir()\n          {\n            return infoDir;\n          }\n\n          @Override\n          public int getNumLoadingThreads()\n          {\n            return 5;\n          }\n\n          @Override\n          public int getAnnounceIntervalMillis()\n          {\n            return 50;\n          }\n        },\n        announcer, EasyMock.createNiceMock(DataSegmentServerAnnouncer.class), segmentManager\n    );\n\n    List<DataSegment> segments = new ArrayList<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n    Collections.sort(segments);\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n\n    handler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(3L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(5 * COUNT, announceCount.get());\n    handler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","date":"2018-09-14 09:07:06","endLine":440,"groupId":"15463","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/47/99f3f2c1a41a2ef143577ff2a6e3032ce1817f.src","preCode":"  public void testStartStop() throws Exception\n  {\n    SegmentLoadDropHandler handler = new SegmentLoadDropHandler(\n        jsonMapper,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public File getInfoDir()\n          {\n            return infoDir;\n          }\n\n          @Override\n          public int getNumLoadingThreads()\n          {\n            return 5;\n          }\n\n          @Override\n          public int getAnnounceIntervalMillis()\n          {\n            return 50;\n          }\n        },\n        announcer, EasyMock.createNiceMock(DataSegmentServerAnnouncer.class), segmentManager\n    );\n\n    List<DataSegment> segments = Lists.newLinkedList();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n    Collections.sort(segments);\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n\n    handler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(3L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(5 * COUNT, announceCount.get());\n    handler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentLoadDropHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"M"}],"commitId":"d50b69e6d4c29913de4d670b05523a719dbfd97f","commitMessage":"@@@Prohibit LinkedList (#6112)\n\n* Prohibit LinkedList\n\n* Fix tests\n\n* Fix\n\n* Remove unused import\n","date":"2018-09-14 09:07:06","modifiedFileCount":"24","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":3,"curCode":"  public void testLoadCache() throws Exception\n  {\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-03\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-04\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T01\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T03\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T06\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n    segmentLoadDropHandler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(11L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(13 * COUNT, announceCount.get());\n    segmentLoadDropHandler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","date":"2019-01-22 03:11:10","endLine":312,"groupId":"12803","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6f/227e486993c4484d855bfd9e1de893453aee19.src","preCode":"  public void testLoadCache() throws Exception\n  {\n    List<DataSegment> segments = new ArrayList<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-03\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-04\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T01\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T03\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T06\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n    Collections.sort(segments);\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n    segmentLoadDropHandler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(11L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(13 * COUNT, announceCount.get());\n    segmentLoadDropHandler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentLoadDropHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":3,"curCode":"  public void testStartStop() throws Exception\n  {\n    SegmentLoadDropHandler handler = new SegmentLoadDropHandler(\n        jsonMapper,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public File getInfoDir()\n          {\n            return infoDir;\n          }\n\n          @Override\n          public int getNumLoadingThreads()\n          {\n            return 5;\n          }\n\n          @Override\n          public int getAnnounceIntervalMillis()\n          {\n            return 50;\n          }\n        },\n        announcer, EasyMock.createNiceMock(DataSegmentServerAnnouncer.class), segmentManager\n    );\n\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n\n    handler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(3L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(5 * COUNT, announceCount.get());\n    handler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","date":"2019-01-22 03:11:10","endLine":434,"groupId":"12632","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6f/227e486993c4484d855bfd9e1de893453aee19.src","preCode":"  public void testStartStop() throws Exception\n  {\n    SegmentLoadDropHandler handler = new SegmentLoadDropHandler(\n        jsonMapper,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public File getInfoDir()\n          {\n            return infoDir;\n          }\n\n          @Override\n          public int getNumLoadingThreads()\n          {\n            return 5;\n          }\n\n          @Override\n          public int getAnnounceIntervalMillis()\n          {\n            return 50;\n          }\n        },\n        announcer, EasyMock.createNiceMock(DataSegmentServerAnnouncer.class), segmentManager\n    );\n\n    List<DataSegment> segments = new ArrayList<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n    Collections.sort(segments);\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n\n    handler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(3L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(5 * COUNT, announceCount.get());\n    handler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentLoadDropHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-06-09 11:15:59","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":4,"curCode":"  public void testLoadCache() throws Exception\n  {\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-03\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-04\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T01\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T03\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T06\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n    segmentLoadDropHandler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(11L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(13 * COUNT, announceCount.get());\n    segmentLoadDropHandler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","date":"2019-01-22 03:11:10","endLine":312,"groupId":"12803","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6f/227e486993c4484d855bfd9e1de893453aee19.src","preCode":"  public void testLoadCache() throws Exception\n  {\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-03\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-04\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T01\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T03\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T06\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n    segmentLoadDropHandler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(11L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(13 * COUNT, announceCount.get());\n    segmentLoadDropHandler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentLoadDropHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"N"},{"authorDate":"2020-06-09 11:15:59","commitOrder":4,"curCode":"  public void testStartStop() throws Exception\n  {\n    SegmentLoadDropHandler handler = new SegmentLoadDropHandler(\n        jsonMapper,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public File getInfoDir()\n          {\n            return infoDir;\n          }\n\n          @Override\n          public int getNumLoadingThreads()\n          {\n            return 5;\n          }\n\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return locations;\n          }\n\n          @Override\n          public int getAnnounceIntervalMillis()\n          {\n            return 50;\n          }\n        },\n        announcer, EasyMock.createNiceMock(DataSegmentServerAnnouncer.class), segmentManager,\n        new ServerTypeConfig(ServerType.HISTORICAL)\n    );\n\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n\n    handler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(3L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(5 * COUNT, announceCount.get());\n    handler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","date":"2020-06-09 11:15:59","endLine":522,"groupId":"12632","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6d/8ef0a8cc4e3f3fd5e4dffbb3ca796e43f5ab45.src","preCode":"  public void testStartStop() throws Exception\n  {\n    SegmentLoadDropHandler handler = new SegmentLoadDropHandler(\n        jsonMapper,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public File getInfoDir()\n          {\n            return infoDir;\n          }\n\n          @Override\n          public int getNumLoadingThreads()\n          {\n            return 5;\n          }\n\n          @Override\n          public int getAnnounceIntervalMillis()\n          {\n            return 50;\n          }\n        },\n        announcer, EasyMock.createNiceMock(DataSegmentServerAnnouncer.class), segmentManager\n    );\n\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n\n    handler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(3L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(5 * COUNT, announceCount.get());\n    handler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentLoadDropHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":457,"status":"M"}],"commitId":"771870ae2d312d643e6d98f3d0af8a9618af9681","commitMessage":"@@@Load broadcast datasources on broker and tasks (#9971)\n\n* Load broadcast datasources on broker and tasks\n\n* Add javadocs\n\n* Support HTTP segment management\n\n* Fix indexer maxSize\n\n* inspection fix\n\n* Make segment cache optional on non-historicals\n\n* Fix build\n\n* Fix inspections.  some coverage.  failed tests\n\n* More tests\n\n* Add CliIndexer to MainTest\n\n* Fix inspection\n\n* Rename UnprunedDataSegment to LoadableDataSegment\n\n* Address PR comments\n\n* Fix","date":"2020-06-09 11:15:59","modifiedFileCount":"52","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2021-01-12 08:20:13","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":5,"curCode":"  public void testLoadCache() throws Exception\n  {\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-03\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-04\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T01\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T03\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T06\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n    segmentLoadDropHandler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(11L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(13 * COUNT, announceCount.get());\n    segmentLoadDropHandler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","date":"2019-01-22 03:11:10","endLine":312,"groupId":"12803","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6f/227e486993c4484d855bfd9e1de893453aee19.src","preCode":"  public void testLoadCache() throws Exception\n  {\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-03\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-04\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T01\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T03\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T06\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n    segmentLoadDropHandler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(11L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(13 * COUNT, announceCount.get());\n    segmentLoadDropHandler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentLoadDropHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"N"},{"authorDate":"2021-01-12 08:20:13","commitOrder":5,"curCode":"  public void testStartStop() throws Exception\n  {\n    SegmentLoadDropHandler handler = new SegmentLoadDropHandler(\n        jsonMapper,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public File getInfoDir()\n          {\n            return infoDir;\n          }\n\n          @Override\n          public int getNumLoadingThreads()\n          {\n            return 5;\n          }\n\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return locations;\n          }\n\n          @Override\n          public int getAnnounceIntervalMillis()\n          {\n            return 50;\n          }\n        },\n        announcer,\n        Mockito.mock(DataSegmentServerAnnouncer.class),\n        segmentManager,\n        new ServerTypeConfig(ServerType.HISTORICAL)\n    );\n\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n\n    handler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(3L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(5 * COUNT, announceCount.get());\n    handler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","date":"2021-01-12 08:20:13","endLine":499,"groupId":"12632","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a9/797846e64fed9e2ea50f675a119a21f278900a.src","preCode":"  public void testStartStop() throws Exception\n  {\n    SegmentLoadDropHandler handler = new SegmentLoadDropHandler(\n        jsonMapper,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public File getInfoDir()\n          {\n            return infoDir;\n          }\n\n          @Override\n          public int getNumLoadingThreads()\n          {\n            return 5;\n          }\n\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return locations;\n          }\n\n          @Override\n          public int getAnnounceIntervalMillis()\n          {\n            return 50;\n          }\n        },\n        announcer, EasyMock.createNiceMock(DataSegmentServerAnnouncer.class), segmentManager,\n        new ServerTypeConfig(ServerType.HISTORICAL)\n    );\n\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n\n    handler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(3L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(5 * COUNT, announceCount.get());\n    handler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentLoadDropHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"M"}],"commitId":"3984457e5bea1f73d4340edb010a4debab054596","commitMessage":"@@@Add missing unit tests for segment loading in historicals (#10737)\n\n* Add missing unit tests for segment loading in historicals\n\n* unused import","date":"2021-01-12 08:20:13","modifiedFileCount":"3","status":"M","submitter":"Jihoon Son"},{"authorTime":"2021-02-22 16:08:44","codes":[{"authorDate":"2021-02-22 16:08:44","commitOrder":6,"curCode":"  public void testLoadCache() throws Exception\n  {\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-03\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-04\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T01\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T03\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T06\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      testStorageLocation.writeSegmentInfoToCache(segment);\n    }\n\n    testStorageLocation.checkInfoCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n    segmentLoadDropHandler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(11L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(13 * COUNT, announceCount.get());\n    segmentLoadDropHandler.stop();\n\n    for (DataSegment segment : segments) {\n      testStorageLocation.deleteSegmentInfoFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","date":"2021-02-22 16:08:44","endLine":361,"groupId":"2049","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/30706658e91c425c66ae9640b5974850d16bf4.src","preCode":"  public void testLoadCache() throws Exception\n  {\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-03\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-04\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T01\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T03\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T06\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n    segmentLoadDropHandler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(11L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(13 * COUNT, announceCount.get());\n    segmentLoadDropHandler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentLoadDropHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"},{"authorDate":"2021-02-22 16:08:44","commitOrder":6,"curCode":"  public void testStartStop() throws Exception\n  {\n    SegmentLoadDropHandler handler = new SegmentLoadDropHandler(\n        jsonMapper,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public File getInfoDir()\n          {\n            return infoDir;\n          }\n\n          @Override\n          public int getNumLoadingThreads()\n          {\n            return 5;\n          }\n\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return locations;\n          }\n\n          @Override\n          public int getAnnounceIntervalMillis()\n          {\n            return 50;\n          }\n        },\n        announcer,\n        Mockito.mock(DataSegmentServerAnnouncer.class),\n        segmentManager,\n        new ServerTypeConfig(ServerType.HISTORICAL)\n    );\n\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      testStorageLocation.writeSegmentInfoToCache(segment);\n    }\n\n    testStorageLocation.checkInfoCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n\n    handler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(3L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(5 * COUNT, announceCount.get());\n    handler.stop();\n\n    for (DataSegment segment : segments) {\n      testStorageLocation.deleteSegmentInfoFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","date":"2021-02-22 16:08:44","endLine":446,"groupId":"2051","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/30706658e91c425c66ae9640b5974850d16bf4.src","preCode":"  public void testStartStop() throws Exception\n  {\n    SegmentLoadDropHandler handler = new SegmentLoadDropHandler(\n        jsonMapper,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public File getInfoDir()\n          {\n            return infoDir;\n          }\n\n          @Override\n          public int getNumLoadingThreads()\n          {\n            return 5;\n          }\n\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return locations;\n          }\n\n          @Override\n          public int getAnnounceIntervalMillis()\n          {\n            return 50;\n          }\n        },\n        announcer,\n        Mockito.mock(DataSegmentServerAnnouncer.class),\n        segmentManager,\n        new ServerTypeConfig(ServerType.HISTORICAL)\n    );\n\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      writeSegmentToCache(segment);\n    }\n\n    checkCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n\n    handler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(3L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(5 * COUNT, announceCount.get());\n    handler.stop();\n\n    for (DataSegment segment : segments) {\n      deleteSegmentFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentLoadDropHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":379,"status":"M"}],"commitId":"3a0a0c033f9dd6633e554fb694ec9853494ee320","commitMessage":"@@@Reload segment usage when starting the process (#10884)\n\n* Reload segment usage when starting the process\n\n* doc\n\n* Add more tests\n\n* remove forbidden method\n\n* Add alert","date":"2021-02-22 16:08:44","modifiedFileCount":"6","status":"M","submitter":"Abhishek Agarwal"},{"authorTime":"2021-07-21 02:44:19","codes":[{"authorDate":"2021-02-22 16:08:44","commitOrder":7,"curCode":"  public void testLoadCache() throws Exception\n  {\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-03\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-04\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T01\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T03\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T06\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      testStorageLocation.writeSegmentInfoToCache(segment);\n    }\n\n    testStorageLocation.checkInfoCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n    segmentLoadDropHandler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(11L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(13 * COUNT, announceCount.get());\n    segmentLoadDropHandler.stop();\n\n    for (DataSegment segment : segments) {\n      testStorageLocation.deleteSegmentInfoFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","date":"2021-02-22 16:08:44","endLine":361,"groupId":"10687","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/30706658e91c425c66ae9640b5974850d16bf4.src","preCode":"  public void testLoadCache() throws Exception\n  {\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-03\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-04\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T01\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T03\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T05\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"PT1h/2011-04-04T06\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      testStorageLocation.writeSegmentInfoToCache(segment);\n    }\n\n    testStorageLocation.checkInfoCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n    segmentLoadDropHandler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(11L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(13 * COUNT, announceCount.get());\n    segmentLoadDropHandler.stop();\n\n    for (DataSegment segment : segments) {\n      testStorageLocation.deleteSegmentInfoFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentLoadDropHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"N"},{"authorDate":"2021-07-21 02:44:19","commitOrder":7,"curCode":"  public void testStartStop() throws Exception\n  {\n    SegmentLoadDropHandler handler = new SegmentLoadDropHandler(\n        jsonMapper,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public File getInfoDir()\n          {\n            return infoDir;\n          }\n\n          @Override\n          public int getNumLoadingThreads()\n          {\n            return 5;\n          }\n\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return locations;\n          }\n\n          @Override\n          public int getAnnounceIntervalMillis()\n          {\n            return 50;\n          }\n        },\n        announcer,\n        Mockito.mock(DataSegmentServerAnnouncer.class),\n        segmentManager,\n        segmentCacheManager,\n        new ServerTypeConfig(ServerType.HISTORICAL)\n    );\n\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      testStorageLocation.writeSegmentInfoToCache(segment);\n    }\n\n    testStorageLocation.checkInfoCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n\n    handler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(3L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(5 * COUNT, announceCount.get());\n    handler.stop();\n\n    for (DataSegment segment : segments) {\n      testStorageLocation.deleteSegmentInfoFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","date":"2021-07-21 02:44:19","endLine":452,"groupId":"10687","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"testStartStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/a6db13bcdecf276081232e117a48e0d424f6b9.src","preCode":"  public void testStartStop() throws Exception\n  {\n    SegmentLoadDropHandler handler = new SegmentLoadDropHandler(\n        jsonMapper,\n        new SegmentLoaderConfig()\n        {\n          @Override\n          public File getInfoDir()\n          {\n            return infoDir;\n          }\n\n          @Override\n          public int getNumLoadingThreads()\n          {\n            return 5;\n          }\n\n          @Override\n          public List<StorageLocationConfig> getLocations()\n          {\n            return locations;\n          }\n\n          @Override\n          public int getAnnounceIntervalMillis()\n          {\n            return 50;\n          }\n        },\n        announcer,\n        Mockito.mock(DataSegmentServerAnnouncer.class),\n        segmentManager,\n        new ServerTypeConfig(ServerType.HISTORICAL)\n    );\n\n    Set<DataSegment> segments = new HashSet<>();\n    for (int i = 0; i < COUNT; ++i) {\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test\" + i, \"2\", Intervals.of(\"P1d/2011-04-02\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-01\")));\n      segments.add(makeSegment(\"test_two\" + i, \"1\", Intervals.of(\"P1d/2011-04-02\")));\n    }\n\n    for (DataSegment segment : segments) {\n      testStorageLocation.writeSegmentInfoToCache(segment);\n    }\n\n    testStorageLocation.checkInfoCache(segments);\n    Assert.assertTrue(segmentManager.getDataSourceCounts().isEmpty());\n\n    handler.start();\n    Assert.assertTrue(!segmentManager.getDataSourceCounts().isEmpty());\n    for (int i = 0; i < COUNT; ++i) {\n      Assert.assertEquals(3L, segmentManager.getDataSourceCounts().get(\"test\" + i).longValue());\n      Assert.assertEquals(2L, segmentManager.getDataSourceCounts().get(\"test_two\" + i).longValue());\n    }\n    Assert.assertEquals(5 * COUNT, announceCount.get());\n    handler.stop();\n\n    for (DataSegment segment : segments) {\n      testStorageLocation.deleteSegmentInfoFromCache(segment);\n    }\n\n    Assert.assertEquals(0, infoDir.listFiles().length);\n    Assert.assertTrue(infoDir.delete());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentLoadDropHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"}],"commitId":"94c1671eaf7b050972602fdedcb1971cdbde692d","commitMessage":"@@@Split SegmentLoader into SegmentLoader and SegmentCacheManager (#11466)\n\nThis PR splits current SegmentLoader into SegmentLoader and SegmentCacheManager.\n\nSegmentLoader - this class is responsible for building the segment object but does not expose any methods for downloading.  cache space management.  etc. Default implementation delegates the download operations to SegmentCacheManager and only contains the logic for building segments once downloaded. . This class will be used in SegmentManager to construct Segment objects.\n\nSegmentCacheManager - this class manages the segment cache on the local disk. It fetches the segment files to the local disk.  can clean up the cache.  and in the future.  support reserve and release on cache space. [See https://github.com/Make SegmentLoader extensible and customizable #11398]. This class will be used in ingestion tasks such as compaction.  re-indexing where segment files need to be downloaded locally.","date":"2021-07-21 02:44:19","modifiedFileCount":"41","status":"M","submitter":"Abhishek Agarwal"}]
