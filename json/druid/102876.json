[{"authorTime":"2020-02-25 09:34:39","codes":[{"authorDate":"2020-02-25 09:34:39","commitOrder":4,"curCode":"  public void testWithPrefixesSplit()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(SERVICE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(1L) \r\n    );\n\n    Assert.assertEquals(EXPECTED_COORDS, splits.map(InputSplit::get).collect(Collectors.toList()));\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-02-25 09:34:39","endLine":253,"groupId":"12085","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithPrefixesSplit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a7/ab23bd9feba00ab9c04741e4313e4098d06cb4.src","preCode":"  public void testWithPrefixesSplit()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(SERVICE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(1L) \r\n    );\n\n    Assert.assertEquals(EXPECTED_COORDS, splits.map(InputSplit::get).collect(Collectors.toList()));\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"MB"},{"authorDate":"2020-02-25 09:34:39","commitOrder":4,"curCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(SERVICE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(CONTENT.length * 3L)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-02-25 09:34:39","endLine":275,"groupId":"12085","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateSplitsWithSplitHintSpecRespectingHint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a7/ab23bd9feba00ab9c04741e4313e4098d06cb4.src","preCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(SERVICE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(CONTENT.length * 3L)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"B"}],"commitId":"3bc7ae782c9e5989da88999fa91ddfb6fa559a31","commitMessage":"@@@Create splits of multiple files for parallel indexing (#9360)\n\n* Create splits of multiple files for parallel indexing\n\n* fix wrong import and npe in test\n\n* use the single file split in tests\n\n* rename\n\n* import order\n\n* Remove specific local input source\n\n* Update docs/ingestion/native-batch.md\n\nCo-Authored-By: sthetland <steve.hetland@imply.io>\n\n* Update docs/ingestion/native-batch.md\n\nCo-Authored-By: sthetland <steve.hetland@imply.io>\n\n* doc and error msg\n\n* fix build\n\n* fix a test and address comments\n\nCo-authored-by: sthetland <steve.hetland@imply.io>\n","date":"2020-02-25 09:34:39","modifiedFileCount":"31","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-02-26 12:59:53","codes":[{"authorDate":"2020-02-26 12:59:53","commitOrder":5,"curCode":"  public void testWithPrefixesSplit()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        PREFIXES,\n        null,\n        null\n    );\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(1L) \r\n    );\n\n    Assert.assertEquals(EXPECTED_COORDS, splits.map(InputSplit::get).collect(Collectors.toList()));\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-02-26 12:59:53","endLine":398,"groupId":"13381","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithPrefixesSplit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/59/b6303eb28fdbec6fe5f42346074c71fd8451b0.src","preCode":"  public void testWithPrefixesSplit()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(SERVICE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(1L) \r\n    );\n\n    Assert.assertEquals(EXPECTED_COORDS, splits.map(InputSplit::get).collect(Collectors.toList()));\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":374,"status":"M"},{"authorDate":"2020-02-26 12:59:53","commitOrder":5,"curCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        PREFIXES,\n        null,\n        null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(CONTENT.length * 3L)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-02-26 12:59:53","endLine":427,"groupId":"13381","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateSplitsWithSplitHintSpecRespectingHint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/59/b6303eb28fdbec6fe5f42346074c71fd8451b0.src","preCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(SERVICE, INPUT_DATA_CONFIG, null, PREFIXES, null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(CONTENT.length * 3L)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"M"}],"commitId":"92fb83726b0275cb936fbed21a183c81b55df419","commitMessage":"@@@Add support for optional aws credentials for s3 for ingestion (#9375)\n\n* Add support for optional cloud (aws.  gcs.  etc.) credentials for s3 for ingestion\n\n* Add support for optional cloud (aws.  gcs.  etc.) credentials for s3 for ingestion\n\n* Add support for optional cloud (aws.  gcs.  etc.) credentials for s3 for ingestion\n\n* fix build failure\n\n* fix failing build\n\n* fix failing build\n\n* Code cleanup\n\n* fix failing test\n\n* Removed CloudConfigProperties and make specific class for each cloudInputSource\n\n* Removed CloudConfigProperties and make specific class for each cloudInputSource\n\n* pass s3ConfigProperties for split\n\n* lazy init s3client\n\n* update docs\n\n* fix docs check\n\n* address comments\n\n* add ServerSideEncryptingAmazonS3.Builder\n\n* fix failing checkstyle\n\n* fix typo\n\n* wrap the ServerSideEncryptingAmazonS3.Builder in a provider\n\n* added java docs for S3InputSource constructor\n\n* added java docs for S3InputSource constructor\n\n* remove wrap the ServerSideEncryptingAmazonS3.Builder in a provider\n","date":"2020-02-26 12:59:53","modifiedFileCount":"5","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-03-04 12:51:06","codes":[{"authorDate":"2020-03-04 12:51:06","commitOrder":6,"curCode":"  public void testWithPrefixesSplit()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)), CONTENT);\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)), CONTENT);\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        PREFIXES,\n        null,\n        null\n    );\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(1L) \r\n    );\n\n    Assert.assertEquals(EXPECTED_COORDS, splits.map(InputSplit::get).collect(Collectors.toList()));\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-03-04 12:51:06","endLine":398,"groupId":"13381","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithPrefixesSplit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/12/2f4fd6a56b242c5a558bc20248a2ffa62af036.src","preCode":"  public void testWithPrefixesSplit()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        PREFIXES,\n        null,\n        null\n    );\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(1L) \r\n    );\n\n    Assert.assertEquals(EXPECTED_COORDS, splits.map(InputSplit::get).collect(Collectors.toList()));\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":374,"status":"M"},{"authorDate":"2020-03-04 12:51:06","commitOrder":6,"curCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)), CONTENT);\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)), CONTENT);\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        PREFIXES,\n        null,\n        null\n    );\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(CONTENT.length * 3L)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-03-04 12:51:06","endLine":428,"groupId":"13381","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateSplitsWithSplitHintSpecRespectingHint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/12/2f4fd6a56b242c5a558bc20248a2ffa62af036.src","preCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        PREFIXES,\n        null,\n        null);\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(CONTENT.length * 3L)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"M"}],"commitId":"9466ac7c9b2b1d86b06cfa7c7f5eeb35d588dd22","commitMessage":"@@@Skip empty files for local.  hdfs.  and cloud input sources (#9450)\n\n* Skip empty files for local.  hdfs.  and cloud input sources\n\n* split hint spec doc\n\n* doc for skipping empty files\n\n* fix typo; adjust tests\n\n* unnecessary fluent iterable\n\n* address comments\n\n* fix test\n\n* use the right lists\n\n* fix test\n\n* fix test\n","date":"2020-03-04 12:51:06","modifiedFileCount":"16","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-05-09 12:53:39","codes":[{"authorDate":"2020-05-09 12:53:39","commitOrder":7,"curCode":"  public void testWithPrefixesSplit()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)), CONTENT);\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)), CONTENT);\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        PREFIXES,\n        null,\n        null\n    );\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null, null),\n        new MaxSizeSplitHintSpec(1L) \r\n    );\n\n    Assert.assertEquals(EXPECTED_COORDS, splits.map(InputSplit::get).collect(Collectors.toList()));\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-05-09 12:53:39","endLine":398,"groupId":"13381","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithPrefixesSplit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8d/d82a97ec9da60d03c0a3314a74490d067f4b51.src","preCode":"  public void testWithPrefixesSplit()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)), CONTENT);\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)), CONTENT);\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        PREFIXES,\n        null,\n        null\n    );\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(1L) \r\n    );\n\n    Assert.assertEquals(EXPECTED_COORDS, splits.map(InputSplit::get).collect(Collectors.toList()));\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":374,"status":"M"},{"authorDate":"2020-05-09 12:53:39","commitOrder":7,"curCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)), CONTENT);\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)), CONTENT);\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        PREFIXES,\n        null,\n        null\n    );\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null, null),\n        new MaxSizeSplitHintSpec(CONTENT.length * 3L)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-05-09 12:53:39","endLine":428,"groupId":"13381","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateSplitsWithSplitHintSpecRespectingHint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8d/d82a97ec9da60d03c0a3314a74490d067f4b51.src","preCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)), CONTENT);\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)), CONTENT);\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        PREFIXES,\n        null,\n        null\n    );\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null),\n        new MaxSizeSplitHintSpec(CONTENT.length * 3L)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"M"}],"commitId":"28be107a1c18ef1fd9fd268c8b04e232efb63695","commitMessage":"@@@add flag to flattenSpec to keep null columns (#9814)\n\n* add flag to flattenSpec to keep null columns\n\n* remove changes to inputFormat interface\n\n* add comment\n\n* change comment message\n\n* update web console e2e test\n\n* move keepNullColmns to JSONParseSpec\n\n* fix merge conflicts\n\n* fix tests\n\n* set keepNullColumns to false by default\n\n* fix lgtm\n\n* change Boolean to boolean.  add keepNullColumns to hash.  add tests for keepKeepNullColumns false + true with no nuulul columns\n\n* Add equals verifier tests","date":"2020-05-09 12:53:39","modifiedFileCount":"41","status":"M","submitter":"mcbrewster"},{"authorTime":"2020-08-22 00:43:58","codes":[{"authorDate":"2020-08-22 00:43:58","commitOrder":8,"curCode":"  public void testWithPrefixesSplit()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)), CONTENT);\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)), CONTENT);\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        PREFIXES,\n        null,\n        null\n    );\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null, null),\n        new MaxSizeSplitHintSpec(null, 1)\n    );\n\n    Assert.assertEquals(EXPECTED_COORDS, splits.map(InputSplit::get).collect(Collectors.toList()));\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-08-22 00:43:58","endLine":399,"groupId":"102876","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithPrefixesSplit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9e/faf4fd09c3c1773b23dc34e1212a737bacffbc.src","preCode":"  public void testWithPrefixesSplit()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)), CONTENT);\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)), CONTENT);\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        PREFIXES,\n        null,\n        null\n    );\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null, null),\n        new MaxSizeSplitHintSpec(1L) \r\n    );\n\n    Assert.assertEquals(EXPECTED_COORDS, splits.map(InputSplit::get).collect(Collectors.toList()));\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"M"},{"authorDate":"2020-08-22 00:43:58","commitOrder":8,"curCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)), CONTENT);\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)), CONTENT);\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        PREFIXES,\n        null,\n        null\n    );\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null, null),\n        new MaxSizeSplitHintSpec(new HumanReadableBytes(CONTENT.length * 3L), null)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n    EasyMock.verify(S3_CLIENT);\n  }\n","date":"2020-08-22 00:43:58","endLine":429,"groupId":"102876","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateSplitsWithSplitHintSpecRespectingHint","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9e/faf4fd09c3c1773b23dc34e1212a737bacffbc.src","preCode":"  public void testCreateSplitsWithSplitHintSpecRespectingHint()\n  {\n    EasyMock.reset(S3_CLIENT);\n    expectListObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)), CONTENT);\n    expectListObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)), CONTENT);\n    EasyMock.replay(S3_CLIENT);\n\n    S3InputSource inputSource = new S3InputSource(\n        SERVICE,\n        SERVER_SIDE_ENCRYPTING_AMAZON_S3_BUILDER,\n        INPUT_DATA_CONFIG,\n        null,\n        PREFIXES,\n        null,\n        null\n    );\n\n    Stream<InputSplit<List<CloudObjectLocation>>> splits = inputSource.createSplits(\n        new JsonInputFormat(JSONPathSpec.DEFAULT, null, null),\n        new MaxSizeSplitHintSpec(CONTENT.length * 3L)\n    );\n\n    Assert.assertEquals(\n        ImmutableList.of(EXPECTED_URIS.stream().map(CloudObjectLocation::new).collect(Collectors.toList())),\n        splits.map(InputSplit::get).collect(Collectors.toList())\n    );\n    EasyMock.verify(S3_CLIENT);\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/data/input/s3/S3InputSourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"M"}],"commitId":"b5b3e6ecce6f5346c4a1ed440b27656dd3b130a5","commitMessage":"@@@Add maxNumFiles to splitHintSpec (#10243)\n\n* Add maxNumFiles to splitHintSpec\n\n* missing link\n\n* fix build failure; use maxNumFiles for integration tests\n\n* spelling\n\n* lower default\n\n* Update docs/ingestion/native-batch.md\n\nCo-authored-by: Abhishek Agarwal <1477457+abhishekagarwal87@users.noreply.github.com>\n\n* address comments; change default maxSplitSize\n\n* spelling\n\n* typos and doc\n\n* same change for segments splitHintSpec\n\n* fix build\n\n* fix build\n\nCo-authored-by: Abhishek Agarwal <1477457+abhishekagarwal87@users.noreply.github.com>","date":"2020-08-22 00:43:58","modifiedFileCount":"19","status":"M","submitter":"Jihoon Son"}]
