[{"authorTime":"2019-09-27 07:15:24","codes":[{"authorDate":"2019-09-27 07:15:24","commitOrder":1,"curCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n\n    supervisorRecordSupplier.assign(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM))\n            .andReturn(ImmutableSet.of(SHARD_ID1, SHARD_ID0))\n            .anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getAssignment())\n            .andReturn(ImmutableSet.of(SHARD1_PARTITION, SHARD0_PARTITION))\n            .anyTimes();\n    supervisorRecordSupplier.seekToLatest(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(EasyMock.anyObject())).andReturn(\"100\").anyTimes();\n    supervisorRecordSupplier.seek(EasyMock.anyObject(), EasyMock.anyString());\n    EasyMock.expectLastCall().anyTimes();\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(\n        new KinesisDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).times(2);\n\n    replayAll();\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","date":"2019-09-27 07:15:24","endLine":674,"groupId":"2798","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDontKillTasksWithMismatchedType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a9/c182bed796859937f9e962860053e662ecf784.src","preCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n\n    supervisorRecordSupplier.assign(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM))\n            .andReturn(ImmutableSet.of(SHARD_ID1, SHARD_ID0))\n            .anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getAssignment())\n            .andReturn(ImmutableSet.of(SHARD1_PARTITION, SHARD0_PARTITION))\n            .anyTimes();\n    supervisorRecordSupplier.seekToLatest(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(EasyMock.anyObject())).andReturn(\"100\").anyTimes();\n    supervisorRecordSupplier.seek(EasyMock.anyObject(), EasyMock.anyString());\n    EasyMock.expectLastCall().anyTimes();\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(\n        new KinesisDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).times(2);\n\n    replayAll();\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":618,"status":"B"},{"authorDate":"2019-09-27 07:15:24","commitOrder":1,"curCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n    addSomeEvents(1);\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(\n        new KafkaDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).anyTimes();\n\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","date":"2019-09-27 07:15:24","endLine":700,"groupId":"23201","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDontKillTasksWithMismatchedType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/9182feac2928302ae8f3579d872a1883a232c5.src","preCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n    addSomeEvents(1);\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(\n        new KafkaDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).anyTimes();\n\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":656,"status":"B"}],"commitId":"7f2b6577ef19f18523e8353336ad496e8dc4a270","commitMessage":"@@@get active task by datasource when supervisor discover tasks (#8450)\n\n* get active task by datasource when supervisor discover tasks\n\n* fix ut\n\n* fix ut\n\n* fix ut\n\n* remove unnecessary condition check\n\n* fix ut\n\n* remove stream in hot loop\n","date":"2019-09-27 07:15:24","modifiedFileCount":"7","status":"B","submitter":"elloooooo"},{"authorTime":"2020-01-28 03:24:29","codes":[{"authorDate":"2020-01-28 03:24:29","commitOrder":2,"curCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n\n    supervisorRecordSupplier.assign(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM))\n            .andReturn(ImmutableSet.of(SHARD_ID1, SHARD_ID0))\n            .anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getAssignment())\n            .andReturn(ImmutableSet.of(SHARD1_PARTITION, SHARD0_PARTITION))\n            .anyTimes();\n    supervisorRecordSupplier.seekToLatest(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(EasyMock.anyObject())).andReturn(\"100\").anyTimes();\n    supervisorRecordSupplier.seek(EasyMock.anyObject(), EasyMock.anyString());\n    EasyMock.expectLastCall().anyTimes();\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(\n        new KinesisDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).times(2);\n\n    replayAll();\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","date":"2020-01-28 03:24:29","endLine":682,"groupId":"2798","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDontKillTasksWithMismatchedType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/267e8a1eaa52ef1a024b696bf027db057d33b6.src","preCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n\n    supervisorRecordSupplier.assign(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM))\n            .andReturn(ImmutableSet.of(SHARD_ID1, SHARD_ID0))\n            .anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getAssignment())\n            .andReturn(ImmutableSet.of(SHARD1_PARTITION, SHARD0_PARTITION))\n            .anyTimes();\n    supervisorRecordSupplier.seekToLatest(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(EasyMock.anyObject())).andReturn(\"100\").anyTimes();\n    supervisorRecordSupplier.seek(EasyMock.anyObject(), EasyMock.anyString());\n    EasyMock.expectLastCall().anyTimes();\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(\n        new KinesisDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).times(2);\n\n    replayAll();\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":626,"status":"M"},{"authorDate":"2020-01-28 03:24:29","commitOrder":2,"curCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n    addSomeEvents(1);\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(\n        new KafkaDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).anyTimes();\n\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","date":"2020-01-28 03:24:29","endLine":815,"groupId":"23201","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDontKillTasksWithMismatchedType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0b/29b65a628bb6f0503d980831a84ce2d009150d.src","preCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n    addSomeEvents(1);\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(\n        new KafkaDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).anyTimes();\n\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":771,"status":"M"}],"commitId":"b9186f8f9ff2ff52aceda42bc5f24ffd47a7d17e","commitMessage":"@@@Reconcile terminology and method naming to 'used/unused segments'; Rename MetadataSegmentManager to MetadataSegmentsManager (#7306)\n\n* Reconcile terminology and method naming to 'used/unused segments'; Don't use terms 'enable/disable data source'; Rename MetadataSegmentManager to MetadataSegments; Make REST API methods which mark segments as used/unused to return server error instead of an empty response in case of error\n\n* Fix brace\n\n* Import order\n\n* Rename withKillDataSourceWhitelist to withSpecificDataSourcesToKill\n\n* Fix tests\n\n* Fix tests by adding proper methods without interval parameters to IndexerMetadataStorageCoordinator instead of hacking with Intervals.ETERNITY\n\n* More aligned names of DruidCoordinatorHelpers.  rename several CoordinatorDynamicConfig parameters\n\n* Rename ClientCompactTaskQuery to ClientCompactionTaskQuery for consistency with CompactionTask; ClientCompactQueryTuningConfig to ClientCompactionTaskQueryTuningConfig\n\n* More variable and method renames\n\n* Rename MetadataSegments to SegmentsMetadata\n\n* Javadoc update\n\n* Simplify SegmentsMetadata.getUnusedSegmentIntervals().  more javadocs\n\n* Update Javadoc of VersionedIntervalTimeline.iterateAllObjects()\n\n* Reorder imports\n\n* Rename SegmentsMetadata.tryMark... methods to mark... and make them to return boolean and the numbers of segments changed and relay exceptions to callers\n\n* Complete merge\n\n* Add CollectionUtils.newTreeSet(); Refactor DruidCoordinatorRuntimeParams creation in tests\n\n* Remove MetadataSegmentManager\n\n* Rename millisLagSinceCoordinatorBecomesLeaderBeforeCanMarkAsUnusedOvershadowedSegments to leadingTimeMillisBeforeCanMarkAsUnusedOvershadowedSegments\n\n* Fix tests.  refactor DruidCluster creation in tests into DruidClusterBuilder\n\n* Fix inspections\n\n* Fix SQLMetadataSegmentManagerEmptyTest and rename it to SqlSegmentsMetadataEmptyTest\n\n* Rename SegmentsAndMetadata to SegmentsAndCommitMetadata to reduce the similarity with SegmentsMetadata; Rename some methods\n\n* Rename DruidCoordinatorHelper to CoordinatorDuty.  refactor DruidCoordinator\n\n* Unused import\n\n* Optimize imports\n\n* Rename IndexerSQLMetadataStorageCoordinator.getDataSourceMetadata() to retrieveDataSourceMetadata()\n\n* Unused import\n\n* Update terminology in datasource-view.tsx\n\n* Fix label in datasource-view.spec.tsx.snap\n\n* Fix lint errors in datasource-view.tsx\n\n* Doc improvements\n\n* Another attempt to please TSLint\n\n* Another attempt to please TSLint\n\n* Style fixes\n\n* Fix IndexerSQLMetadataStorageCoordinator.createUsedSegmentsSqlQueryForIntervals() (wrong merge)\n\n* Try to fix docs build issue\n\n* Javadoc and spelling fixes\n\n* Rename SegmentsMetadata to SegmentsMetadataManager.  address other comments\n\n* Address more comments\n","date":"2020-01-28 03:24:29","modifiedFileCount":"127","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-01-28 03:24:29","codes":[{"authorDate":"2020-03-17 12:39:53","commitOrder":3,"curCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n\n    supervisorRecordSupplier.assign(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM))\n            .andReturn(ImmutableSet.of(SHARD_ID1, SHARD_ID0))\n            .anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getAssignment())\n            .andReturn(ImmutableSet.of(SHARD1_PARTITION, SHARD0_PARTITION))\n            .anyTimes();\n    supervisorRecordSupplier.seekToLatest(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(EasyMock.anyObject())).andReturn(\"100\").anyTimes();\n    supervisorRecordSupplier.seek(EasyMock.anyObject(), EasyMock.anyString());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getPartitionTimeLag(EasyMock.anyObject()))\n            .andReturn(TIME_LAG)\n            .atLeastOnce();\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(\n        new KinesisDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).times(2);\n\n    replayAll();\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","date":"2020-03-17 12:39:53","endLine":704,"groupId":"15481","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDontKillTasksWithMismatchedType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/94/ca6bf693b0f756794d2354302ba22e8b2b1d8f.src","preCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n\n    supervisorRecordSupplier.assign(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM))\n            .andReturn(ImmutableSet.of(SHARD_ID1, SHARD_ID0))\n            .anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getAssignment())\n            .andReturn(ImmutableSet.of(SHARD1_PARTITION, SHARD0_PARTITION))\n            .anyTimes();\n    supervisorRecordSupplier.seekToLatest(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(EasyMock.anyObject())).andReturn(\"100\").anyTimes();\n    supervisorRecordSupplier.seek(EasyMock.anyObject(), EasyMock.anyString());\n    EasyMock.expectLastCall().anyTimes();\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(\n        new KinesisDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).times(2);\n\n    replayAll();\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":645,"status":"M"},{"authorDate":"2020-01-28 03:24:29","commitOrder":3,"curCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n    addSomeEvents(1);\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(\n        new KafkaDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).anyTimes();\n\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","date":"2020-01-28 03:24:29","endLine":815,"groupId":"23201","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDontKillTasksWithMismatchedType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0b/29b65a628bb6f0503d980831a84ce2d009150d.src","preCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n    addSomeEvents(1);\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(\n        new KafkaDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).anyTimes();\n\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":771,"status":"N"}],"commitId":"142742f291daaf1ac9afea319cacbbe2a3077952","commitMessage":"@@@add kinesis lag metric (#9509)\n\n* add kinesis lag metric\n\n* fixes\n\n* heh\n\n* do it right this time\n\n* more test\n\n* split out supervisor report lags into lagMillis.  remove latest offsets from kinesis supervisor report since always null.  review stuffs","date":"2020-03-17 12:39:53","modifiedFileCount":"17","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-01-28 03:24:29","codes":[{"authorDate":"2020-05-17 05:09:39","commitOrder":4,"curCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n\n    supervisorRecordSupplier.assign(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM))\n            .andReturn(ImmutableSet.of(SHARD_ID1, SHARD_ID0))\n            .anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getAssignment())\n            .andReturn(ImmutableSet.of(SHARD1_PARTITION, SHARD0_PARTITION))\n            .anyTimes();\n    supervisorRecordSupplier.seekToLatest(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(EasyMock.anyObject())).andReturn(\"100\").anyTimes();\n    supervisorRecordSupplier.seek(EasyMock.anyObject(), EasyMock.anyString());\n    EasyMock.expectLastCall().anyTimes();\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(\n        new KinesisDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).times(2);\n\n    replayAll();\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","date":"2020-05-17 05:09:39","endLine":745,"groupId":"2798","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDontKillTasksWithMismatchedType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f3/a21d9b2278abf9369dd4760fda54ee8e78a8af.src","preCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n\n    supervisorRecordSupplier.assign(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM))\n            .andReturn(ImmutableSet.of(SHARD_ID1, SHARD_ID0))\n            .anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getAssignment())\n            .andReturn(ImmutableSet.of(SHARD1_PARTITION, SHARD0_PARTITION))\n            .anyTimes();\n    supervisorRecordSupplier.seekToLatest(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(EasyMock.anyObject())).andReturn(\"100\").anyTimes();\n    supervisorRecordSupplier.seek(EasyMock.anyObject(), EasyMock.anyString());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getPartitionTimeLag(EasyMock.anyObject()))\n            .andReturn(TIME_LAG)\n            .atLeastOnce();\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(\n        new KinesisDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).times(2);\n\n    replayAll();\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":689,"status":"M"},{"authorDate":"2020-01-28 03:24:29","commitOrder":4,"curCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n    addSomeEvents(1);\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(\n        new KafkaDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).anyTimes();\n\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","date":"2020-01-28 03:24:29","endLine":815,"groupId":"23201","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDontKillTasksWithMismatchedType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0b/29b65a628bb6f0503d980831a84ce2d009150d.src","preCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n    addSomeEvents(1);\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(\n        new KafkaDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).anyTimes();\n\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":771,"status":"N"}],"commitId":"2e9548d93d5a27e824cc93293e1de55af63d158f","commitMessage":"@@@refactor SeekableStreamSupervisor usage of RecordSupplier (#9819)\n\n* refactor SeekableStreamSupervisor usage of RecordSupplier to reduce contention between background threads and main thread.  refactor KinesisRecordSupplier.  refactor Kinesis lag metric collection and emitting\n\n* fix style and test\n\n* cleanup.  refactor.  javadocs.  test\n\n* fixes\n\n* keep collecting current offsets and lag if unhealthy in background reporting thread\n\n* review stuffs\n\n* add comment","date":"2020-05-17 05:09:39","modifiedFileCount":"13","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-06-19 00:47:07","codes":[{"authorDate":"2020-06-19 00:47:07","commitOrder":5,"curCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n\n    supervisorRecordSupplier.assign(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM))\n            .andReturn(ImmutableSet.of(SHARD_ID1, SHARD_ID0))\n            .anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getAssignment())\n            .andReturn(ImmutableSet.of(SHARD1_PARTITION, SHARD0_PARTITION))\n            .anyTimes();\n    supervisorRecordSupplier.seekToLatest(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(EasyMock.anyObject())).andReturn(\"100\").anyTimes();\n    supervisorRecordSupplier.seek(EasyMock.anyObject(), EasyMock.anyString());\n    EasyMock.expectLastCall().anyTimes();\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.emptyList()).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(\n        new KinesisDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).times(2);\n\n    replayAll();\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","date":"2020-06-19 00:47:07","endLine":745,"groupId":"102274","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDontKillTasksWithMismatchedType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6b/d309c8b7d36589c3bce8ef8067d38a0e5f58d2.src","preCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n\n    supervisorRecordSupplier.assign(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(STREAM))\n            .andReturn(ImmutableSet.of(SHARD_ID1, SHARD_ID0))\n            .anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getAssignment())\n            .andReturn(ImmutableSet.of(SHARD1_PARTITION, SHARD0_PARTITION))\n            .anyTimes();\n    supervisorRecordSupplier.seekToLatest(EasyMock.anyObject());\n    EasyMock.expectLastCall().anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getEarliestSequenceNumber(EasyMock.anyObject())).andReturn(\"0\").anyTimes();\n    EasyMock.expect(supervisorRecordSupplier.getLatestSequenceNumber(EasyMock.anyObject())).andReturn(\"100\").anyTimes();\n    supervisorRecordSupplier.seek(EasyMock.anyObject(), EasyMock.anyString());\n    EasyMock.expectLastCall().anyTimes();\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(SeekableStreamIndexTaskRunner.Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(\n        new KinesisDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).times(2);\n\n    replayAll();\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":689,"status":"M"},{"authorDate":"2020-06-19 00:47:07","commitOrder":5,"curCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n    addSomeEvents(1);\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.emptyList()).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(\n        new KafkaDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).anyTimes();\n\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","date":"2020-06-19 00:47:07","endLine":806,"groupId":"102274","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDontKillTasksWithMismatchedType","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9d/8635dd39a96f9b339addcce86eff768ca2769e.src","preCode":"  public void testDontKillTasksWithMismatchedType() throws Exception\n  {\n    supervisor = getTestableSupervisor(2, 1, true, \"PT1H\", null, null);\n    addSomeEvents(1);\n\n    \r\n    Task id2 = new RealtimeIndexTask(\n        \"id2\",\n        null,\n        new FireDepartment(\n            dataSchema,\n            new RealtimeIOConfig(null, null),\n            null\n        ),\n        null\n    );\n\n    List<Task> existingTasks = ImmutableList.of(id2);\n\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(existingTasks).anyTimes();\n    EasyMock.expect(taskClient.getStatusAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(Status.NOT_STARTED))\n            .anyTimes();\n    EasyMock.expect(taskClient.getStartTimeAsync(EasyMock.anyString()))\n            .andReturn(Futures.immediateFuture(DateTimes.nowUtc()))\n            .anyTimes();\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(\n        new KafkaDataSourceMetadata(\n            null\n        )\n    ).anyTimes();\n\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n\n    EasyMock.expect(taskQueue.add(EasyMock.anyObject(Task.class))).andReturn(true).anyTimes();\n\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":762,"status":"M"}],"commitId":"2c384b61ff47f858a0adb6f8b389c84f2acc84d1","commitMessage":"@@@IntelliJ inspection and checkstyle rule for \"Collection.EMPTY_* field accesses replaceable with Collections.empty*()\" (#9690)\n\n* IntelliJ inspection and checkstyle rule for \"Collection.EMPTY_* field accesses replaceable with Collections.empty*()\"\n\n* Reverted checkstyle rule\n\n* Added tests to pass CI\n\n* Codestyle","date":"2020-06-19 00:47:07","modifiedFileCount":"33","status":"M","submitter":"Aleksey Plekhanov"}]
