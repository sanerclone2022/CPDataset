[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDimensionSelector()\n  {\n    final DimensionSelector selector = XPLUSY.makeDimensionSelector(\n        new DefaultDimensionSpec(\"expr\", \"expr\"),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4.0\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5.1\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","date":"2018-08-31 00:56:26","endLine":271,"groupId":"21485","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDimensionSelector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/37/b6e5f86b6d9a3f57d9a68a18b7fa3036c76611.src","preCode":"  public void testDimensionSelector()\n  {\n    final DimensionSelector selector = XPLUSY.makeDimensionSelector(\n        new DefaultDimensionSpec(\"expr\", \"expr\"),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4.0\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5.1\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDimensionSelectorWithExtraction()\n  {\n    final DimensionSelector selector = XPLUSY.makeDimensionSelector(\n        new ExtractionDimensionSpec(\"expr\", \"x\", new BucketExtractionFn(1.0, 0.0)),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","date":"2018-08-31 00:56:26","endLine":346,"groupId":"2255","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDimensionSelectorWithExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/37/b6e5f86b6d9a3f57d9a68a18b7fa3036c76611.src","preCode":"  public void testDimensionSelectorWithExtraction()\n  {\n    final DimensionSelector selector = XPLUSY.makeDimensionSelector(\n        new ExtractionDimensionSpec(\"expr\", \"x\", new BucketExtractionFn(1.0, 0.0)),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-11-16 14:13:32","codes":[{"authorDate":"2018-11-16 14:13:32","commitOrder":2,"curCode":"  public void testDimensionSelector()\n  {\n    final DimensionSelector selector = X_PLUS_Y.makeDimensionSelector(\n        new DefaultDimensionSpec(\"expr\", \"expr\"),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4.0\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5.1\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","date":"2018-11-16 14:13:32","endLine":277,"groupId":"21485","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDimensionSelector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/38/2de0bd4c897e7519185dec4b0ab48c9971a701.src","preCode":"  public void testDimensionSelector()\n  {\n    final DimensionSelector selector = XPLUSY.makeDimensionSelector(\n        new DefaultDimensionSpec(\"expr\", \"expr\"),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4.0\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5.1\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"},{"authorDate":"2018-11-16 14:13:32","commitOrder":2,"curCode":"  public void testDimensionSelectorWithExtraction()\n  {\n    final DimensionSelector selector = X_PLUS_Y.makeDimensionSelector(\n        new ExtractionDimensionSpec(\"expr\", \"x\", new BucketExtractionFn(1.0, 0.0)),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","date":"2018-11-16 14:13:32","endLine":385,"groupId":"2255","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDimensionSelectorWithExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/38/2de0bd4c897e7519185dec4b0ab48c9971a701.src","preCode":"  public void testDimensionSelectorWithExtraction()\n  {\n    final DimensionSelector selector = XPLUSY.makeDimensionSelector(\n        new ExtractionDimensionSpec(\"expr\", \"x\", new BucketExtractionFn(1.0, 0.0)),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"M"}],"commitId":"fe69da0d95a361708923fbe5b82ded0d461aa495","commitMessage":"@@@Expressions: Fix improper supplier reuse with missing columns. (#6600)\n\n* Expressions: Fix improper supplier reuse with missing columns.\n\nExpressionSelectors has an optimization that skips building a Map\nwhen there is only one input supplier. However.  this optimization\nshould not be used in the case where the is one input supplier but\nmore than one input identifier (which can happen when only one\ninput identifier corresponds to an actual column).\n\nFixes #6556.\n\n* Add underscores to statics.\n","date":"2018-11-16 14:13:32","modifiedFileCount":"2","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-06-20 04:57:37","codes":[{"authorDate":"2018-11-16 14:13:32","commitOrder":3,"curCode":"  public void testDimensionSelector()\n  {\n    final DimensionSelector selector = X_PLUS_Y.makeDimensionSelector(\n        new DefaultDimensionSpec(\"expr\", \"expr\"),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4.0\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5.1\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","date":"2018-11-16 14:13:32","endLine":277,"groupId":"21485","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDimensionSelector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/38/2de0bd4c897e7519185dec4b0ab48c9971a701.src","preCode":"  public void testDimensionSelector()\n  {\n    final DimensionSelector selector = X_PLUS_Y.makeDimensionSelector(\n        new DefaultDimensionSpec(\"expr\", \"expr\"),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4.0\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5.1\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"},{"authorDate":"2019-06-20 04:57:37","commitOrder":3,"curCode":"  public void testDimensionSelectorWithExtraction()\n  {\n    final DimensionSelector selector = X_PLUS_Y.makeDimensionSelector(\n        new ExtractionDimensionSpec(\"expr\", \"x\", new BucketExtractionFn(1.0, 0.0)),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4.0\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5.1\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","date":"2019-06-20 04:57:37","endLine":469,"groupId":"23103","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDimensionSelectorWithExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/66/223bed66e8618d41b6e01930a06f1038d66fda.src","preCode":"  public void testDimensionSelectorWithExtraction()\n  {\n    final DimensionSelector selector = X_PLUS_Y.makeDimensionSelector(\n        new ExtractionDimensionSpec(\"expr\", \"x\", new BucketExtractionFn(1.0, 0.0)),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"M"}],"commitId":"494b8ebe56308fe69c2a758f80f1ae56bf17d54d","commitMessage":"@@@multi-value string column support for expressions (#7588)\n\n* array support for expression language for multi-value string columns\n\n* fix tests?\n\n* fixes\n\n* more tests\n\n* fixes\n\n* cleanup\n\n* more better.  more test\n\n* ignore inspection\n\n* license\n\n* license fix\n\n* inspection\n\n* remove dumb import\n\n* more better\n\n* some comments\n\n* add expr rewrite for arrayfn args for more magic.  tests\n\n* test stuff\n\n* more tests\n\n* fix test\n\n* fix test\n\n* castfunc can deal with arrays\n\n* needs more empty array\n\n* more tests.  make cast to long array more forgiving\n\n* refactor\n\n* simplify ExprMacro Expr implementations with base classes in core\n\n* oops\n\n* more test\n\n* use Shuttle for Parser.flatten.  javadoc.  cleanup\n\n* fixes and more tests\n\n* unused import\n\n* fixes\n\n* javadocs.  cleanup.  refactors\n\n* fix imports\n\n* more javadoc\n\n* more javadoc\n\n* more\n\n* more javadocs.  nonnullbydefault.  minor refactor\n\n* markdown fix\n\n* adjustments\n\n* more doc\n\n* move initial filter out\n\n* docs\n\n* map empty arg lambda.  apply function argument validation\n\n* check function args at parse time instead of eval time\n\n* more immutable\n\n* more more immutable\n\n* clarify grammar\n\n* fix docs\n\n* empty array is string test.  we need a way to make arrays better maybe in the future.  or define empty arrays as other types..\n","date":"2019-06-20 04:57:37","modifiedFileCount":"43","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-10-27 10:55:24","codes":[{"authorDate":"2020-10-27 10:55:24","commitOrder":4,"curCode":"  public void testDimensionSelector()\n  {\n    final DimensionSelector selector = X_PLUS_Y.makeDimensionSelector(\n        new DefaultDimensionSpec(\"expr\", \"expr\"),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5.1\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","date":"2020-10-27 10:55:24","endLine":504,"groupId":"105687","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDimensionSelector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ae/fb99364ed8a1c1584b1551aca6c0e193c4f95b.src","preCode":"  public void testDimensionSelector()\n  {\n    final DimensionSelector selector = X_PLUS_Y.makeDimensionSelector(\n        new DefaultDimensionSpec(\"expr\", \"expr\"),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4.0\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5.1\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"M"},{"authorDate":"2020-10-27 10:55:24","commitOrder":4,"curCode":"  public void testDimensionSelectorWithExtraction()\n  {\n    final DimensionSelector selector = X_PLUS_Y.makeDimensionSelector(\n        new ExtractionDimensionSpec(\"expr\", \"x\", new BucketExtractionFn(1.0, 0.0)),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5.1\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","date":"2020-10-27 10:55:24","endLine":628,"groupId":"105687","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDimensionSelectorWithExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ae/fb99364ed8a1c1584b1551aca6c0e193c4f95b.src","preCode":"  public void testDimensionSelectorWithExtraction()\n  {\n    final DimensionSelector selector = X_PLUS_Y.makeDimensionSelector(\n        new ExtractionDimensionSpec(\"expr\", \"x\", new BucketExtractionFn(1.0, 0.0)),\n        COLUMN_SELECTOR_FACTORY\n    );\n\n    final ValueMatcher nullMatcher = selector.makeValueMatcher((String) null);\n    final ValueMatcher fiveMatcher = selector.makeValueMatcher(\"5\");\n    final ValueMatcher nonNullMatcher = selector.makeValueMatcher(Predicates.notNull());\n\n    CURRENT_ROW.set(ROW0);\n    Assert.assertEquals(true, nullMatcher.matches());\n    Assert.assertEquals(false, fiveMatcher.matches());\n    Assert.assertEquals(false, nonNullMatcher.matches());\n    Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(false, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(true, nonNullMatcher.matches());\n      Assert.assertEquals(\"4.0\", selector.lookupName(selector.getRow().get(0)));\n    } else {\n      \r\n      Assert.assertEquals(true, nullMatcher.matches());\n      Assert.assertEquals(false, fiveMatcher.matches());\n      Assert.assertEquals(false, nonNullMatcher.matches());\n      Assert.assertEquals(null, selector.lookupName(selector.getRow().get(0)));\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5.1\", selector.lookupName(selector.getRow().get(0)));\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(false, nullMatcher.matches());\n    Assert.assertEquals(true, fiveMatcher.matches());\n    Assert.assertEquals(true, nonNullMatcher.matches());\n    Assert.assertEquals(\"5\", selector.lookupName(selector.getRow().get(0)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":586,"status":"M"}],"commitId":"d0821de8540686eb64a9b3e22fe4a637b58920ef","commitMessage":"@@@support for vectorizing expressions with non-existent inputs.  more consistent type handling for non-vectorized expressions (#10499)\n\n* support for vectorizing expressions with non-existent inputs.  more consistent type handling for non-vectorized expressions\n\n* inspector\n\n* changes\n\n* more test\n\n* clean","date":"2020-10-27 10:55:24","modifiedFileCount":"56","status":"M","submitter":"Clint Wylie"}]
