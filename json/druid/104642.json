[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void simpleFirehoseReadingTest() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    try (final IngestSegmentFirehose firehose =\n             (IngestSegmentFirehose)\n                 factory.connect(rowParser, null)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME));\n        Assert.assertEquals(METRIC_FLOAT_VALUE, row.getMetric(METRIC_FLOAT_NAME).floatValue(), METRIC_FLOAT_VALUE * 0.0001);\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals((int) MAX_SHARD_NUMBER * MAX_ROWS, (int) rowcount);\n  }\n","date":"2018-08-31 00:56:26","endLine":553,"groupId":"5406","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"simpleFirehoseReadingTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bb/fb25ffb5182911ebe4412d06eb2ec118c20f6e.src","preCode":"  public void simpleFirehoseReadingTest() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    try (final IngestSegmentFirehose firehose =\n             (IngestSegmentFirehose)\n                 factory.connect(rowParser, null)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME));\n        Assert.assertEquals(METRIC_FLOAT_VALUE, row.getMetric(METRIC_FLOAT_NAME).floatValue(), METRIC_FLOAT_VALUE * 0.0001);\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals((int) MAX_SHARD_NUMBER * MAX_ROWS, (int) rowcount);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/firehose/IngestSegmentFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":536,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testTransformSpec() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    final TransformSpec transformSpec = new TransformSpec(\n        new SelectorDimFilter(Column.TIME_COLUMN_NAME, \"1\", null),\n        ImmutableList.of(\n            new ExpressionTransform(METRIC_FLOAT_NAME, METRIC_FLOAT_NAME + \" * 10\", ExprMacroTable.nil())\n        )\n    );\n    int skipped = 0;\n    try (final IngestSegmentFirehose firehose =\n             (IngestSegmentFirehose)\n                 factory.connect(transformSpec.decorate(rowParser), null)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        if (row == null) {\n          skipped++;\n          continue;\n        }\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME).longValue());\n        Assert.assertEquals(\n            METRIC_FLOAT_VALUE * 10,\n            row.getMetric(METRIC_FLOAT_NAME).floatValue(),\n            METRIC_FLOAT_VALUE * 0.0001\n        );\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals(90, skipped);\n    Assert.assertEquals((int) MAX_ROWS, (int) rowcount);\n  }\n","date":"2018-08-31 00:56:26","endLine":589,"groupId":"11944","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bb/fb25ffb5182911ebe4412d06eb2ec118c20f6e.src","preCode":"  public void testTransformSpec() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    final TransformSpec transformSpec = new TransformSpec(\n        new SelectorDimFilter(Column.TIME_COLUMN_NAME, \"1\", null),\n        ImmutableList.of(\n            new ExpressionTransform(METRIC_FLOAT_NAME, METRIC_FLOAT_NAME + \" * 10\", ExprMacroTable.nil())\n        )\n    );\n    int skipped = 0;\n    try (final IngestSegmentFirehose firehose =\n             (IngestSegmentFirehose)\n                 factory.connect(transformSpec.decorate(rowParser), null)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        if (row == null) {\n          skipped++;\n          continue;\n        }\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME).longValue());\n        Assert.assertEquals(\n            METRIC_FLOAT_VALUE * 10,\n            row.getMetric(METRIC_FLOAT_NAME).floatValue(),\n            METRIC_FLOAT_VALUE * 0.0001\n        );\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals(90, skipped);\n    Assert.assertEquals((int) MAX_ROWS, (int) rowcount);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/firehose/IngestSegmentFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":556,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-03 01:50:22","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void simpleFirehoseReadingTest() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    try (final IngestSegmentFirehose firehose =\n             (IngestSegmentFirehose)\n                 factory.connect(rowParser, null)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME));\n        Assert.assertEquals(METRIC_FLOAT_VALUE, row.getMetric(METRIC_FLOAT_NAME).floatValue(), METRIC_FLOAT_VALUE * 0.0001);\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals((int) MAX_SHARD_NUMBER * MAX_ROWS, (int) rowcount);\n  }\n","date":"2018-08-31 00:56:26","endLine":553,"groupId":"5406","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"simpleFirehoseReadingTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bb/fb25ffb5182911ebe4412d06eb2ec118c20f6e.src","preCode":"  public void simpleFirehoseReadingTest() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    try (final IngestSegmentFirehose firehose =\n             (IngestSegmentFirehose)\n                 factory.connect(rowParser, null)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME));\n        Assert.assertEquals(METRIC_FLOAT_VALUE, row.getMetric(METRIC_FLOAT_NAME).floatValue(), METRIC_FLOAT_VALUE * 0.0001);\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals((int) MAX_SHARD_NUMBER * MAX_ROWS, (int) rowcount);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/firehose/IngestSegmentFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":536,"status":"N"},{"authorDate":"2018-10-03 01:50:22","commitOrder":2,"curCode":"  public void testTransformSpec() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    final TransformSpec transformSpec = new TransformSpec(\n        new SelectorDimFilter(ColumnHolder.TIME_COLUMN_NAME, \"1\", null),\n        ImmutableList.of(\n            new ExpressionTransform(METRIC_FLOAT_NAME, METRIC_FLOAT_NAME + \" * 10\", ExprMacroTable.nil())\n        )\n    );\n    int skipped = 0;\n    try (final IngestSegmentFirehose firehose =\n             (IngestSegmentFirehose)\n                 factory.connect(transformSpec.decorate(rowParser), null)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        if (row == null) {\n          skipped++;\n          continue;\n        }\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME).longValue());\n        Assert.assertEquals(\n            METRIC_FLOAT_VALUE * 10,\n            row.getMetric(METRIC_FLOAT_NAME).floatValue(),\n            METRIC_FLOAT_VALUE * 0.0001\n        );\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals(90, skipped);\n    Assert.assertEquals((int) MAX_ROWS, (int) rowcount);\n  }\n","date":"2018-10-03 01:50:22","endLine":590,"groupId":"11944","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/03/660fead8fa2c6c93de42f64e6883cf6747e6a2.src","preCode":"  public void testTransformSpec() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    final TransformSpec transformSpec = new TransformSpec(\n        new SelectorDimFilter(Column.TIME_COLUMN_NAME, \"1\", null),\n        ImmutableList.of(\n            new ExpressionTransform(METRIC_FLOAT_NAME, METRIC_FLOAT_NAME + \" * 10\", ExprMacroTable.nil())\n        )\n    );\n    int skipped = 0;\n    try (final IngestSegmentFirehose firehose =\n             (IngestSegmentFirehose)\n                 factory.connect(transformSpec.decorate(rowParser), null)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        if (row == null) {\n          skipped++;\n          continue;\n        }\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME).longValue());\n        Assert.assertEquals(\n            METRIC_FLOAT_VALUE * 10,\n            row.getMetric(METRIC_FLOAT_NAME).floatValue(),\n            METRIC_FLOAT_VALUE * 0.0001\n        );\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals(90, skipped);\n    Assert.assertEquals((int) MAX_ROWS, (int) rowcount);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/firehose/IngestSegmentFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":557,"status":"M"}],"commitId":"3ae563263a23000560749071d262727d47296856","commitMessage":"@@@Renamed 'Generic Column' -> 'Numeric Column'; Fixed a few resource leaks in processing; misc refinements (#5957)\n\nThis PR accumulates many refactorings and small improvements that I did while preparing the next change set of https://github.com/druid-io/druid/projects/2. I finally decided to make them a separate PR to minimize the volume of the main PR.\n\nSome of the changes:\n - Renamed confusing \"Generic Column\" term to \"Numeric Column\" (what it actually implies) in many class names.\n - Generified `ComplexMetricExtractor`","date":"2018-10-03 01:50:22","modifiedFileCount":"776","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-02-24 09:02:56","codes":[{"authorDate":"2019-02-24 09:02:56","commitOrder":3,"curCode":"  public void simpleFirehoseReadingTest() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    try (final Firehose firehose = factory.connect(rowParser, null)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME));\n        Assert.assertEquals(\n            METRIC_FLOAT_VALUE,\n            row.getMetric(METRIC_FLOAT_NAME).floatValue(),\n            METRIC_FLOAT_VALUE * 0.0001\n        );\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals((int) MAX_SHARD_NUMBER * MAX_ROWS, (int) rowcount);\n  }\n","date":"2019-02-24 09:02:56","endLine":418,"groupId":"5406","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"simpleFirehoseReadingTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7f/44ad6a528e193f5ea779a89e9cd2a2aa25fa25.src","preCode":"  public void simpleFirehoseReadingTest() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    try (final IngestSegmentFirehose firehose =\n             (IngestSegmentFirehose)\n                 factory.connect(rowParser, null)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME));\n        Assert.assertEquals(METRIC_FLOAT_VALUE, row.getMetric(METRIC_FLOAT_NAME).floatValue(), METRIC_FLOAT_VALUE * 0.0001);\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals((int) MAX_SHARD_NUMBER * MAX_ROWS, (int) rowcount);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/firehose/IngestSegmentFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"M"},{"authorDate":"2019-02-24 09:02:56","commitOrder":3,"curCode":"  public void testTransformSpec() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    final TransformSpec transformSpec = new TransformSpec(\n        new SelectorDimFilter(ColumnHolder.TIME_COLUMN_NAME, \"1\", null),\n        ImmutableList.of(\n            new ExpressionTransform(METRIC_FLOAT_NAME, METRIC_FLOAT_NAME + \" * 10\", ExprMacroTable.nil())\n        )\n    );\n    int skipped = 0;\n    try (final Firehose firehose =\n             factory.connect(transformSpec.decorate(rowParser), null)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        if (row == null) {\n          skipped++;\n          continue;\n        }\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME).longValue());\n        Assert.assertEquals(\n            METRIC_FLOAT_VALUE * 10,\n            row.getMetric(METRIC_FLOAT_NAME).floatValue(),\n            METRIC_FLOAT_VALUE * 0.0001\n        );\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals(90, skipped);\n    Assert.assertEquals((int) MAX_ROWS, (int) rowcount);\n  }\n","date":"2019-02-24 09:02:56","endLine":453,"groupId":"8450","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7f/44ad6a528e193f5ea779a89e9cd2a2aa25fa25.src","preCode":"  public void testTransformSpec() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    final TransformSpec transformSpec = new TransformSpec(\n        new SelectorDimFilter(ColumnHolder.TIME_COLUMN_NAME, \"1\", null),\n        ImmutableList.of(\n            new ExpressionTransform(METRIC_FLOAT_NAME, METRIC_FLOAT_NAME + \" * 10\", ExprMacroTable.nil())\n        )\n    );\n    int skipped = 0;\n    try (final IngestSegmentFirehose firehose =\n             (IngestSegmentFirehose)\n                 factory.connect(transformSpec.decorate(rowParser), null)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        if (row == null) {\n          skipped++;\n          continue;\n        }\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME).longValue());\n        Assert.assertEquals(\n            METRIC_FLOAT_VALUE * 10,\n            row.getMetric(METRIC_FLOAT_NAME).floatValue(),\n            METRIC_FLOAT_VALUE * 0.0001\n        );\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals(90, skipped);\n    Assert.assertEquals((int) MAX_ROWS, (int) rowcount);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/firehose/IngestSegmentFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"}],"commitId":"1c2753ab9033ff0c785d6e80f5f7c07dc34c3889","commitMessage":"@@@ParallelIndexSubTask: support ingestSegment in delegating factories (#7089)\n\nIndexTask had special-cased code to properly send a TaskToolbox to a\nIngestSegmentFirehoseFactory that's nested inside a CombiningFirehoseFactory. \nbut ParallelIndexSubTask didn't.\n\nThis change refactors IngestSegmentFirehoseFactory so that it doesn't need a\nTaskToolbox; it instead gets a CoordinatorClient and a SegmentLoaderFactory\ndirectly injected into it.\n\nThis also refactors SegmentLoaderFactory so it doesn't depend on\nan injectable SegmentLoaderConfig.  since its only method always\nreplaces the preconfigured SegmentLoaderConfig anyway.\nThis makes it possible to use SegmentLoaderFactory without setting\ndruid.segmentCaches.locations to some dummy value.\n\nAnother goal of this PR is to make it possible for IngestSegmentFirehoseFactory\nto list data segments outside of connect() --- specifically.  to make it a\nFiniteFirehoseFactory which can query the coordinator in order to calculate its\nsplits. See #7048.\n\nThis also adds missing datasource name URL-encoding to an API used by\nCoordinatorBasedSegmentHandoffNotifier.","date":"2019-02-24 09:02:56","modifiedFileCount":"21","status":"M","submitter":"David Glasser"},{"authorTime":"2019-07-19 05:46:47","codes":[{"authorDate":"2019-07-19 05:46:47","commitOrder":4,"curCode":"  public void simpleFirehoseReadingTest() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    try (final Firehose firehose = factory.connect(rowParser, tmpDir)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME));\n        Assert.assertEquals(\n            METRIC_FLOAT_VALUE,\n            row.getMetric(METRIC_FLOAT_NAME).floatValue(),\n            METRIC_FLOAT_VALUE * 0.0001\n        );\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals((int) MAX_SHARD_NUMBER * MAX_ROWS, (int) rowcount);\n  }\n","date":"2019-07-19 05:46:47","endLine":440,"groupId":"5406","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"simpleFirehoseReadingTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/7274a5ade27d89638e2bb49b816acc076462aa.src","preCode":"  public void simpleFirehoseReadingTest() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    try (final Firehose firehose = factory.connect(rowParser, null)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME));\n        Assert.assertEquals(\n            METRIC_FLOAT_VALUE,\n            row.getMetric(METRIC_FLOAT_NAME).floatValue(),\n            METRIC_FLOAT_VALUE * 0.0001\n        );\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals((int) MAX_SHARD_NUMBER * MAX_ROWS, (int) rowcount);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/firehose/IngestSegmentFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"},{"authorDate":"2019-07-19 05:46:47","commitOrder":4,"curCode":"  public void testTransformSpec() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    final TransformSpec transformSpec = new TransformSpec(\n        new SelectorDimFilter(ColumnHolder.TIME_COLUMN_NAME, \"1\", null),\n        ImmutableList.of(\n            new ExpressionTransform(METRIC_FLOAT_NAME, METRIC_FLOAT_NAME + \" * 10\", ExprMacroTable.nil())\n        )\n    );\n    int skipped = 0;\n    try (final Firehose firehose =\n             factory.connect(transformSpec.decorate(rowParser), tmpDir)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        if (row == null) {\n          skipped++;\n          continue;\n        }\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME).longValue());\n        Assert.assertEquals(\n            METRIC_FLOAT_VALUE * 10,\n            row.getMetric(METRIC_FLOAT_NAME).floatValue(),\n            METRIC_FLOAT_VALUE * 0.0001\n        );\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals(90, skipped);\n    Assert.assertEquals((int) MAX_ROWS, (int) rowcount);\n  }\n","date":"2019-07-19 05:46:47","endLine":475,"groupId":"1612","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/7274a5ade27d89638e2bb49b816acc076462aa.src","preCode":"  public void testTransformSpec() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    final TransformSpec transformSpec = new TransformSpec(\n        new SelectorDimFilter(ColumnHolder.TIME_COLUMN_NAME, \"1\", null),\n        ImmutableList.of(\n            new ExpressionTransform(METRIC_FLOAT_NAME, METRIC_FLOAT_NAME + \" * 10\", ExprMacroTable.nil())\n        )\n    );\n    int skipped = 0;\n    try (final Firehose firehose =\n             factory.connect(transformSpec.decorate(rowParser), null)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        if (row == null) {\n          skipped++;\n          continue;\n        }\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME).longValue());\n        Assert.assertEquals(\n            METRIC_FLOAT_VALUE * 10,\n            row.getMetric(METRIC_FLOAT_NAME).floatValue(),\n            METRIC_FLOAT_VALUE * 0.0001\n        );\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals(90, skipped);\n    Assert.assertEquals((int) MAX_ROWS, (int) rowcount);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/firehose/IngestSegmentFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"M"}],"commitId":"c7eb7cd01837c48914ba284d08b6096b47c957b0","commitMessage":"@@@Add intermediary data server for shuffle (#8088)\n\n* Add intermediary data server for shuffle\n\n* javadoc\n\n* adjust timeout\n\n* resolved todo\n\n* fix test\n\n* style\n\n* address comments\n\n* rename to shuffleDataLocations\n\n* Address comments\n\n* bit adjustment StorageLocation\n\n* fix test\n\n* address comment & fix test\n\n* handle interrupted exception\n","date":"2019-07-19 05:46:47","modifiedFileCount":"29","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":5,"curCode":"  public void simpleFirehoseReadingTest() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), SEGMENT_SET.size());\n    Integer rowcount = 0;\n    try (final Firehose firehose = factory.connect(rowParser, TMP_DIR)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME));\n        Assert.assertEquals(\n            METRIC_FLOAT_VALUE,\n            row.getMetric(METRIC_FLOAT_NAME).floatValue(),\n            METRIC_FLOAT_VALUE * 0.0001\n        );\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals((int) MAX_SHARD_NUMBER * MAX_ROWS, (int) rowcount);\n  }\n","date":"2019-08-23 18:13:54","endLine":485,"groupId":"104642","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"simpleFirehoseReadingTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/55/754ffbdd2d9112a9ef5edb4641f220b2830a20.src","preCode":"  public void simpleFirehoseReadingTest() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    try (final Firehose firehose = factory.connect(rowParser, tmpDir)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME));\n        Assert.assertEquals(\n            METRIC_FLOAT_VALUE,\n            row.getMetric(METRIC_FLOAT_NAME).floatValue(),\n            METRIC_FLOAT_VALUE * 0.0001\n        );\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals((int) MAX_SHARD_NUMBER * MAX_ROWS, (int) rowcount);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/firehose/IngestSegmentFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":466,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":5,"curCode":"  public void testTransformSpec() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), SEGMENT_SET.size());\n    Integer rowcount = 0;\n    final TransformSpec transformSpec = new TransformSpec(\n        new SelectorDimFilter(ColumnHolder.TIME_COLUMN_NAME, \"1\", null),\n        ImmutableList.of(\n            new ExpressionTransform(METRIC_FLOAT_NAME, METRIC_FLOAT_NAME + \" * 10\", ExprMacroTable.nil())\n        )\n    );\n    int skipped = 0;\n    try (final Firehose firehose =\n             factory.connect(transformSpec.decorate(rowParser), TMP_DIR)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        if (row == null) {\n          skipped++;\n          continue;\n        }\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME).longValue());\n        Assert.assertEquals(\n            METRIC_FLOAT_VALUE * 10,\n            row.getMetric(METRIC_FLOAT_NAME).floatValue(),\n            METRIC_FLOAT_VALUE * 0.0001\n        );\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals(90, skipped);\n    Assert.assertEquals((int) MAX_ROWS, (int) rowcount);\n  }\n","date":"2019-08-23 18:13:54","endLine":520,"groupId":"104642","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/55/754ffbdd2d9112a9ef5edb4641f220b2830a20.src","preCode":"  public void testTransformSpec() throws IOException\n  {\n    Assert.assertEquals(MAX_SHARD_NUMBER.longValue(), segmentSet.size());\n    Integer rowcount = 0;\n    final TransformSpec transformSpec = new TransformSpec(\n        new SelectorDimFilter(ColumnHolder.TIME_COLUMN_NAME, \"1\", null),\n        ImmutableList.of(\n            new ExpressionTransform(METRIC_FLOAT_NAME, METRIC_FLOAT_NAME + \" * 10\", ExprMacroTable.nil())\n        )\n    );\n    int skipped = 0;\n    try (final Firehose firehose =\n             factory.connect(transformSpec.decorate(rowParser), tmpDir)) {\n      while (firehose.hasMore()) {\n        InputRow row = firehose.nextRow();\n        if (row == null) {\n          skipped++;\n          continue;\n        }\n        Assert.assertArrayEquals(new String[]{DIM_NAME}, row.getDimensions().toArray());\n        Assert.assertArrayEquals(new String[]{DIM_VALUE}, row.getDimension(DIM_NAME).toArray());\n        Assert.assertEquals(METRIC_LONG_VALUE.longValue(), row.getMetric(METRIC_LONG_NAME).longValue());\n        Assert.assertEquals(\n            METRIC_FLOAT_VALUE * 10,\n            row.getMetric(METRIC_FLOAT_NAME).floatValue(),\n            METRIC_FLOAT_VALUE * 0.0001\n        );\n        ++rowcount;\n      }\n    }\n    Assert.assertEquals(90, skipped);\n    Assert.assertEquals((int) MAX_ROWS, (int) rowcount);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/firehose/IngestSegmentFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
