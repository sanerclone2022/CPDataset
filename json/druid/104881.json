[{"authorTime":"2018-10-15 11:37:37","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testWithoutCacheAndFetch() throws Exception\n  {\n    createAndUpdateTable(TABLE_NAME_1);\n    final SqlFirehoseFactory factory =\n        new SqlFirehoseFactory(\n            SQLLIST1,\n            0L,\n            0L,\n            0L,\n            0L,\n            true,\n            derbyFirehoseConnector,\n            mapper\n        );\n\n    final List<Row> rows = new ArrayList<>();\n    final File firehoseTmpDir = createFirehoseTmpDir(\"testWithoutCacheAndFetch\");\n    try (Firehose firehose = factory.connect(parser, firehoseTmpDir)) {\n      while (firehose.hasMore()) {\n        rows.add(firehose.nextRow());\n      }\n    }\n\n    assertResult(rows, SQLLIST1);\n    assertNumRemainingCacheFiles(firehoseTmpDir, 0);\n    dropTable(TABLE_NAME_1);\n  }\n","date":"2018-08-31 00:56:26","endLine":226,"groupId":"13011","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithoutCacheAndFetch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/27/f19d02de564e08539c2e9938e5c7a9f9433a12.src","preCode":"  public void testWithoutCacheAndFetch() throws Exception\n  {\n    createAndUpdateTable(TABLE_NAME_1);\n    final SqlFirehoseFactory factory =\n        new SqlFirehoseFactory(\n            SQLLIST1,\n            0L,\n            0L,\n            0L,\n            0L,\n            true,\n            derbyFirehoseConnector,\n            mapper\n        );\n\n    final List<Row> rows = new ArrayList<>();\n    final File firehoseTmpDir = createFirehoseTmpDir(\"testWithoutCacheAndFetch\");\n    try (Firehose firehose = factory.connect(parser, firehoseTmpDir)) {\n      while (firehose.hasMore()) {\n        rows.add(firehose.nextRow());\n      }\n    }\n\n    assertResult(rows, SQLLIST1);\n    assertNumRemainingCacheFiles(firehoseTmpDir, 0);\n    dropTable(TABLE_NAME_1);\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/SqlFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"NB"},{"authorDate":"2018-10-15 11:37:37","commitOrder":2,"curCode":"  public void testWithoutCacheAndFetchAgainstConnectionReset() throws IOException\n  {\n    final TestPrefetchableTextFilesFirehoseFactory factory =\n        TestPrefetchableTextFilesFirehoseFactory.withConnectionResets(TEST_DIR, 0, 0, 2);\n\n    final List<Row> rows = new ArrayList<>();\n    final File firehoseTmpDir = createFirehoseTmpDir(\"testWithoutCacheAndFetch\");\n    try (Firehose firehose = factory.connect(parser, firehoseTmpDir)) {\n      while (firehose.hasMore()) {\n        rows.add(firehose.nextRow());\n      }\n    }\n\n    Assert.assertEquals(0, factory.getCacheManager().getTotalCachedBytes());\n    assertResult(rows);\n    assertNumRemainingCacheFiles(firehoseTmpDir, 0);\n  }\n","date":"2018-10-15 11:37:37","endLine":195,"groupId":"13011","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithoutCacheAndFetchAgainstConnectionReset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9c/3508e8e0dd0ede35261b6936b576f7e75cc2cc.src","preCode":"  public void testWithoutCacheAndFetchAgainstConnectionReset() throws IOException\n  {\n    final TestPrefetchableTextFilesFirehoseFactory factory =\n        TestPrefetchableTextFilesFirehoseFactory.withConnectionResets(TEST_DIR, 0, 0, 2);\n\n    final List<Row> rows = new ArrayList<>();\n    final File firehoseTmpDir = createFirehoseTmpDir(\"testWithoutCacheAndFetch\");\n    try (Firehose firehose = factory.connect(parser, firehoseTmpDir)) {\n      while (firehose.hasMore()) {\n        rows.add(firehose.nextRow());\n      }\n    }\n\n    Assert.assertEquals(0, factory.getCacheManager().getTotalCachedBytes());\n    assertResult(rows);\n    assertNumRemainingCacheFiles(firehoseTmpDir, 0);\n  }\n","realPath":"core/src/test/java/org/apache/druid/data/input/impl/prefetch/PrefetchableTextFilesFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"84598fba3b283cbfd6a5addd2602c7b12ba8c00c","commitMessage":"@@@combine druid-api.  druid-common.  java-util into druid-core (#6443)\n\n* combine druid-api.  druid-common.  java-util\n\n* spacing\n","date":"2018-10-15 11:37:37","modifiedFileCount":"0","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":3,"curCode":"  public void testWithoutCacheAndFetch() throws Exception\n  {\n    createAndUpdateTable(TABLE_NAME_1);\n    final SqlFirehoseFactory factory =\n        new SqlFirehoseFactory(\n            SQLLIST1,\n            0L,\n            0L,\n            0L,\n            0L,\n            true,\n            derbyFirehoseConnector,\n            mapper\n        );\n\n    final List<Row> rows = new ArrayList<>();\n    final File firehoseTmpDir = createFirehoseTmpDir(\"testWithoutCacheAndFetch\");\n    try (Firehose firehose = factory.connect(parser, firehoseTmpDir)) {\n      while (firehose.hasMore()) {\n        rows.add(firehose.nextRow());\n      }\n    }\n\n    assertResult(rows, SQLLIST1);\n    assertNumRemainingCacheFiles(firehoseTmpDir, 0);\n    dropTable(TABLE_NAME_1);\n  }\n","date":"2018-08-31 00:56:26","endLine":226,"groupId":"13011","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithoutCacheAndFetch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/27/f19d02de564e08539c2e9938e5c7a9f9433a12.src","preCode":"  public void testWithoutCacheAndFetch() throws Exception\n  {\n    createAndUpdateTable(TABLE_NAME_1);\n    final SqlFirehoseFactory factory =\n        new SqlFirehoseFactory(\n            SQLLIST1,\n            0L,\n            0L,\n            0L,\n            0L,\n            true,\n            derbyFirehoseConnector,\n            mapper\n        );\n\n    final List<Row> rows = new ArrayList<>();\n    final File firehoseTmpDir = createFirehoseTmpDir(\"testWithoutCacheAndFetch\");\n    try (Firehose firehose = factory.connect(parser, firehoseTmpDir)) {\n      while (firehose.hasMore()) {\n        rows.add(firehose.nextRow());\n      }\n    }\n\n    assertResult(rows, SQLLIST1);\n    assertNumRemainingCacheFiles(firehoseTmpDir, 0);\n    dropTable(TABLE_NAME_1);\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/SqlFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"N"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testWithoutCacheAndFetchAgainstConnectionReset() throws IOException\n  {\n    final TestPrefetchableTextFilesFirehoseFactory factory =\n        TestPrefetchableTextFilesFirehoseFactory.withConnectionResets(TEST_DIR, 0, 0, 2);\n\n    final List<Row> rows = new ArrayList<>();\n    final File firehoseTmpDir = createFirehoseTmpDir(\"testWithoutCacheAndFetch\");\n    try (Firehose firehose = factory.connect(PARSER, firehoseTmpDir)) {\n      while (firehose.hasMore()) {\n        rows.add(firehose.nextRow());\n      }\n    }\n\n    Assert.assertEquals(0, factory.getCacheManager().getTotalCachedBytes());\n    assertResult(rows);\n    assertNumRemainingCacheFiles(firehoseTmpDir, 0);\n  }\n","date":"2019-08-23 18:13:54","endLine":194,"groupId":"13011","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithoutCacheAndFetchAgainstConnectionReset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/15/64daca5350b9f0799a07f9f47d6b17b56e70b1.src","preCode":"  public void testWithoutCacheAndFetchAgainstConnectionReset() throws IOException\n  {\n    final TestPrefetchableTextFilesFirehoseFactory factory =\n        TestPrefetchableTextFilesFirehoseFactory.withConnectionResets(TEST_DIR, 0, 0, 2);\n\n    final List<Row> rows = new ArrayList<>();\n    final File firehoseTmpDir = createFirehoseTmpDir(\"testWithoutCacheAndFetch\");\n    try (Firehose firehose = factory.connect(parser, firehoseTmpDir)) {\n      while (firehose.hasMore()) {\n        rows.add(firehose.nextRow());\n      }\n    }\n\n    Assert.assertEquals(0, factory.getCacheManager().getTotalCachedBytes());\n    assertResult(rows);\n    assertNumRemainingCacheFiles(firehoseTmpDir, 0);\n  }\n","realPath":"core/src/test/java/org/apache/druid/data/input/impl/prefetch/PrefetchableTextFilesFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2020-06-10 03:55:20","commitOrder":4,"curCode":"  public void testWithoutCacheAndFetch() throws Exception\n  {\n    derbyConnector = derbyConnectorRule.getConnector();\n    SqlTestUtils testUtils = new SqlTestUtils(derbyConnector);\n    testUtils.createAndUpdateTable(TABLE_NAME_1, 10);\n    final SqlFirehoseFactory factory =\n        new SqlFirehoseFactory(\n            SQLLIST1,\n            0L,\n            0L,\n            0L,\n            0L,\n            true,\n            testUtils.getDerbyFirehoseConnector(),\n            mapper\n        );\n\n    final List<Row> rows = new ArrayList<>();\n    final File firehoseTmpDir = createFirehoseTmpDir(\"testWithoutCacheAndFetch\");\n    try (Firehose firehose = factory.connect(parser, firehoseTmpDir)) {\n      while (firehose.hasMore()) {\n        rows.add(firehose.nextRow());\n      }\n    }\n\n    assertResult(rows, SQLLIST1);\n    assertNumRemainingCacheFiles(firehoseTmpDir, 0);\n    testUtils.dropTable(TABLE_NAME_1);\n  }\n","date":"2020-06-10 03:55:20","endLine":169,"groupId":"104881","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithoutCacheAndFetch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/18/9aa4984aacd19dbc7deed3c15a017114e23744.src","preCode":"  public void testWithoutCacheAndFetch() throws Exception\n  {\n    createAndUpdateTable(TABLE_NAME_1);\n    final SqlFirehoseFactory factory =\n        new SqlFirehoseFactory(\n            SQLLIST1,\n            0L,\n            0L,\n            0L,\n            0L,\n            true,\n            derbyFirehoseConnector,\n            mapper\n        );\n\n    final List<Row> rows = new ArrayList<>();\n    final File firehoseTmpDir = createFirehoseTmpDir(\"testWithoutCacheAndFetch\");\n    try (Firehose firehose = factory.connect(parser, firehoseTmpDir)) {\n      while (firehose.hasMore()) {\n        rows.add(firehose.nextRow());\n      }\n    }\n\n    assertResult(rows, SQLLIST1);\n    assertNumRemainingCacheFiles(firehoseTmpDir, 0);\n    dropTable(TABLE_NAME_1);\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/SqlFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testWithoutCacheAndFetchAgainstConnectionReset() throws IOException\n  {\n    final TestPrefetchableTextFilesFirehoseFactory factory =\n        TestPrefetchableTextFilesFirehoseFactory.withConnectionResets(TEST_DIR, 0, 0, 2);\n\n    final List<Row> rows = new ArrayList<>();\n    final File firehoseTmpDir = createFirehoseTmpDir(\"testWithoutCacheAndFetch\");\n    try (Firehose firehose = factory.connect(PARSER, firehoseTmpDir)) {\n      while (firehose.hasMore()) {\n        rows.add(firehose.nextRow());\n      }\n    }\n\n    Assert.assertEquals(0, factory.getCacheManager().getTotalCachedBytes());\n    assertResult(rows);\n    assertNumRemainingCacheFiles(firehoseTmpDir, 0);\n  }\n","date":"2019-08-23 18:13:54","endLine":194,"groupId":"104881","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithoutCacheAndFetchAgainstConnectionReset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/15/64daca5350b9f0799a07f9f47d6b17b56e70b1.src","preCode":"  public void testWithoutCacheAndFetchAgainstConnectionReset() throws IOException\n  {\n    final TestPrefetchableTextFilesFirehoseFactory factory =\n        TestPrefetchableTextFilesFirehoseFactory.withConnectionResets(TEST_DIR, 0, 0, 2);\n\n    final List<Row> rows = new ArrayList<>();\n    final File firehoseTmpDir = createFirehoseTmpDir(\"testWithoutCacheAndFetch\");\n    try (Firehose firehose = factory.connect(PARSER, firehoseTmpDir)) {\n      while (firehose.hasMore()) {\n        rows.add(firehose.nextRow());\n      }\n    }\n\n    Assert.assertEquals(0, factory.getCacheManager().getTotalCachedBytes());\n    assertResult(rows);\n    assertNumRemainingCacheFiles(firehoseTmpDir, 0);\n  }\n","realPath":"core/src/test/java/org/apache/druid/data/input/impl/prefetch/PrefetchableTextFilesFirehoseFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"}],"commitId":"17cf8ea8f2cc6a4fe8e2c6e29e3b9f066a6ccc2b","commitMessage":"@@@Add Sql InputSource (#9449)\n\n* Add Sql InputSource\n\n* Add spelling\n\n* Use separate DruidModule\n\n* Change module name\n\n* Fix docs\n\n* Use sqltestutils for tests\n\n* Add additional tests\n\n* Fix inspection\n\n* Add module test\n\n* Fix md in docs\n\n* Remove annotation\n\nCo-authored-by: Atul Mohan <atulmohan@yahoo-inc.com>","date":"2020-06-10 03:55:20","modifiedFileCount":"9","status":"M","submitter":"Atul Mohan"}]
