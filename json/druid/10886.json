[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private Sequence<Result<TopNResultValue>> toQueryableTopNResults(\n      Iterable<String> segmentIds, Iterable<Interval> intervals, Iterable<Iterable<Result<TopNResultValue>>> results\n  )\n  {\n    return Sequences.simple(\n        FunctionalIterable\n            .create(segmentIds)\n            .trinaryTransform(\n                intervals,\n                results,\n                new TrinaryFn<String, Interval, Iterable<Result<TopNResultValue>>, Result<TopNResultValue>>()\n                {\n                  @Override\n                  @SuppressWarnings(\"unchecked\")\n                  public Result<TopNResultValue> apply(\n                      final String segmentId,\n                      final Interval interval,\n                      final Iterable<Result<TopNResultValue>> results\n                  )\n                  {\n                    return new Result(\n                        interval.getStart(),\n                        new BySegmentResultValueClass(\n                            Lists.newArrayList(results),\n                            segmentId,\n                            interval\n                        )\n                    );\n                  }\n                }\n            )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":2288,"groupId":"21986","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toQueryableTopNResults","params":"(Iterable<String>segmentIds@Iterable<Interval>intervals@Iterable<Iterable<Result<TopNResultValue>>>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4a/6dfd0a7ba50835713564aebc5ab8650ac4b7a1.src","preCode":"  private Sequence<Result<TopNResultValue>> toQueryableTopNResults(\n      Iterable<String> segmentIds, Iterable<Interval> intervals, Iterable<Iterable<Result<TopNResultValue>>> results\n  )\n  {\n    return Sequences.simple(\n        FunctionalIterable\n            .create(segmentIds)\n            .trinaryTransform(\n                intervals,\n                results,\n                new TrinaryFn<String, Interval, Iterable<Result<TopNResultValue>>, Result<TopNResultValue>>()\n                {\n                  @Override\n                  @SuppressWarnings(\"unchecked\")\n                  public Result<TopNResultValue> apply(\n                      final String segmentId,\n                      final Interval interval,\n                      final Iterable<Result<TopNResultValue>> results\n                  )\n                  {\n                    return new Result(\n                        interval.getStart(),\n                        new BySegmentResultValueClass(\n                            Lists.newArrayList(results),\n                            segmentId,\n                            interval\n                        )\n                    );\n                  }\n                }\n            )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/CachingClusteredClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2256,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private Sequence<Result<TimeBoundaryResultValue>> toQueryableTimeBoundaryResults(\n      Iterable<String> segmentIds,\n      Iterable<Interval> intervals,\n      Iterable<Iterable<Result<TimeBoundaryResultValue>>> results\n  )\n  {\n    return Sequences.simple(\n        FunctionalIterable\n            .create(segmentIds)\n            .trinaryTransform(\n                intervals,\n                results,\n                new TrinaryFn<String, Interval, Iterable<Result<TimeBoundaryResultValue>>, Result<TimeBoundaryResultValue>>()\n                {\n                  @Override\n                  @SuppressWarnings(\"unchecked\")\n                  public Result<TimeBoundaryResultValue> apply(\n                      final String segmentId,\n                      final Interval interval,\n                      final Iterable<Result<TimeBoundaryResultValue>> results\n                  )\n                  {\n                    return new Result(\n                        results.iterator().next().getTimestamp(),\n                        new BySegmentResultValueClass(\n                            Lists.newArrayList(results),\n                            segmentId,\n                            interval\n                        )\n                    );\n                  }\n                }\n            )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":2426,"groupId":"21986","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toQueryableTimeBoundaryResults","params":"(Iterable<String>segmentIds@Iterable<Interval>intervals@Iterable<Iterable<Result<TimeBoundaryResultValue>>>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4a/6dfd0a7ba50835713564aebc5ab8650ac4b7a1.src","preCode":"  private Sequence<Result<TimeBoundaryResultValue>> toQueryableTimeBoundaryResults(\n      Iterable<String> segmentIds,\n      Iterable<Interval> intervals,\n      Iterable<Iterable<Result<TimeBoundaryResultValue>>> results\n  )\n  {\n    return Sequences.simple(\n        FunctionalIterable\n            .create(segmentIds)\n            .trinaryTransform(\n                intervals,\n                results,\n                new TrinaryFn<String, Interval, Iterable<Result<TimeBoundaryResultValue>>, Result<TimeBoundaryResultValue>>()\n                {\n                  @Override\n                  @SuppressWarnings(\"unchecked\")\n                  public Result<TimeBoundaryResultValue> apply(\n                      final String segmentId,\n                      final Interval interval,\n                      final Iterable<Result<TimeBoundaryResultValue>> results\n                  )\n                  {\n                    return new Result(\n                        results.iterator().next().getTimestamp(),\n                        new BySegmentResultValueClass(\n                            Lists.newArrayList(results),\n                            segmentId,\n                            interval\n                        )\n                    );\n                  }\n                }\n            )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/CachingClusteredClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2392,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  private Sequence<Result<TopNResultValue>> toQueryableTopNResults(\n      Iterable<SegmentId> segmentIds,\n      Iterable<Interval> intervals,\n      Iterable<Iterable<Result<TopNResultValue>>> results\n  )\n  {\n    return Sequences.simple(\n        FunctionalIterable\n            .create(segmentIds)\n            .trinaryTransform(\n                intervals,\n                results,\n                new TrinaryFn<SegmentId, Interval, Iterable<Result<TopNResultValue>>, Result<TopNResultValue>>()\n                {\n                  @Override\n                  @SuppressWarnings(\"unchecked\")\n                  public Result<TopNResultValue> apply(\n                      final SegmentId segmentId,\n                      final Interval interval,\n                      final Iterable<Result<TopNResultValue>> results\n                  )\n                  {\n                    return new Result(\n                        interval.getStart(),\n                        new BySegmentResultValueClass(\n                            Lists.newArrayList(results),\n                            segmentId.toString(),\n                            interval\n                        )\n                    );\n                  }\n                }\n            )\n    );\n  }\n","date":"2019-01-22 03:11:10","endLine":2321,"groupId":"10886","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toQueryableTopNResults","params":"(Iterable<SegmentId>segmentIds@Iterable<Interval>intervals@Iterable<Iterable<Result<TopNResultValue>>>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2e/ff321d78f0b77d3a59870997b3301e4087300b.src","preCode":"  private Sequence<Result<TopNResultValue>> toQueryableTopNResults(\n      Iterable<String> segmentIds,\n      Iterable<Interval> intervals,\n      Iterable<Iterable<Result<TopNResultValue>>> results\n  )\n  {\n    return Sequences.simple(\n        FunctionalIterable\n            .create(segmentIds)\n            .trinaryTransform(\n                intervals,\n                results,\n                new TrinaryFn<String, Interval, Iterable<Result<TopNResultValue>>, Result<TopNResultValue>>()\n                {\n                  @Override\n                  @SuppressWarnings(\"unchecked\")\n                  public Result<TopNResultValue> apply(\n                      final String segmentId,\n                      final Interval interval,\n                      final Iterable<Result<TopNResultValue>> results\n                  )\n                  {\n                    return new Result(\n                        interval.getStart(),\n                        new BySegmentResultValueClass(\n                            Lists.newArrayList(results),\n                            segmentId,\n                            interval\n                        )\n                    );\n                  }\n                }\n            )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/CachingClusteredClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2287,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  private Sequence<Result<TimeBoundaryResultValue>> toQueryableTimeBoundaryResults(\n      Iterable<SegmentId> segmentIds,\n      Iterable<Interval> intervals,\n      Iterable<Iterable<Result<TimeBoundaryResultValue>>> results\n  )\n  {\n    return Sequences.simple(\n        FunctionalIterable\n            .create(segmentIds)\n            .trinaryTransform(\n                intervals,\n                results,\n                new TrinaryFn<SegmentId, Interval, Iterable<Result<TimeBoundaryResultValue>>, Result<TimeBoundaryResultValue>>()\n                {\n                  @Override\n                  @SuppressWarnings(\"unchecked\")\n                  public Result<TimeBoundaryResultValue> apply(\n                      final SegmentId segmentId,\n                      final Interval interval,\n                      final Iterable<Result<TimeBoundaryResultValue>> results\n                  )\n                  {\n                    return new Result(\n                        results.iterator().next().getTimestamp(),\n                        new BySegmentResultValueClass(\n                            Lists.newArrayList(results),\n                            segmentId.toString(),\n                            interval\n                        )\n                    );\n                  }\n                }\n            )\n    );\n  }\n","date":"2019-01-22 03:11:10","endLine":2461,"groupId":"10886","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toQueryableTimeBoundaryResults","params":"(Iterable<SegmentId>segmentIds@Iterable<Interval>intervals@Iterable<Iterable<Result<TimeBoundaryResultValue>>>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2e/ff321d78f0b77d3a59870997b3301e4087300b.src","preCode":"  private Sequence<Result<TimeBoundaryResultValue>> toQueryableTimeBoundaryResults(\n      Iterable<String> segmentIds,\n      Iterable<Interval> intervals,\n      Iterable<Iterable<Result<TimeBoundaryResultValue>>> results\n  )\n  {\n    return Sequences.simple(\n        FunctionalIterable\n            .create(segmentIds)\n            .trinaryTransform(\n                intervals,\n                results,\n                new TrinaryFn<String, Interval, Iterable<Result<TimeBoundaryResultValue>>, Result<TimeBoundaryResultValue>>()\n                {\n                  @Override\n                  @SuppressWarnings(\"unchecked\")\n                  public Result<TimeBoundaryResultValue> apply(\n                      final String segmentId,\n                      final Interval interval,\n                      final Iterable<Result<TimeBoundaryResultValue>> results\n                  )\n                  {\n                    return new Result(\n                        results.iterator().next().getTimestamp(),\n                        new BySegmentResultValueClass(\n                            Lists.newArrayList(results),\n                            segmentId,\n                            interval\n                        )\n                    );\n                  }\n                }\n            )\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/client/CachingClusteredClientTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2427,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"}]
