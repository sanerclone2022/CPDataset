[{"authorTime":"2019-04-11 09:16:38","codes":[{"authorDate":"2019-04-11 09:16:38","commitOrder":1,"curCode":"  public void testSerdeWithUpdatedDataSchemaAddedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema originalSchema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    TestModifiedDataSchema deserialized = jsonMapper.readValue(serialized, TestModifiedDataSchema.class);\n\n    Assert.assertEquals(null, deserialized.getExtra());\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","date":"2019-04-11 09:16:38","endLine":417,"groupId":"15746","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithUpdatedDataSchemaAddedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c0/59f29c38d1c8839d893ece31c4c0e0b2294232.src","preCode":"  public void testSerdeWithUpdatedDataSchemaAddedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema originalSchema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    TestModifiedDataSchema deserialized = jsonMapper.readValue(serialized, TestModifiedDataSchema.class);\n\n    Assert.assertEquals(null, deserialized.getExtra());\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"B"},{"authorDate":"2019-04-11 09:16:38","commitOrder":1,"curCode":"  public void testSerdeWithUpdatedDataSchemaRemovedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    TestModifiedDataSchema originalSchema = new TestModifiedDataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper,\n        \"some arbitrary string\"\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    DataSchema deserialized = jsonMapper.readValue(serialized, DataSchema.class);\n\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","date":"2019-04-11 09:16:38","endLine":456,"groupId":"15746","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithUpdatedDataSchemaRemovedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c0/59f29c38d1c8839d893ece31c4c0e0b2294232.src","preCode":"  public void testSerdeWithUpdatedDataSchemaRemovedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    TestModifiedDataSchema originalSchema = new TestModifiedDataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper,\n        \"some arbitrary string\"\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    DataSchema deserialized = jsonMapper.readValue(serialized, DataSchema.class);\n\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":420,"status":"B"}],"commitId":"2771ed50b0f07b0ee519da72ed9f4877466f8be4","commitMessage":"@@@Support Kafka supervisor adopting running tasks between versions  (#7212)\n\n* Recompute hash in isTaskCurrent() and added tests\n\n* Fixed checkstyle stuff\n\n* Fixed failing tests\n\n* Make TestableKafkaSupervisorWithCustomIsTaskCurrent static\n\n* Add doc\n\n* baseSequenceName change\n\n* Added comment\n\n* WIP\n\n* Fixed imports\n\n* Undid lambda change for diff sake\n\n* Cleanup\n\n* Added comment\n\n* Reinsert Kafka tests\n\n* Readded kinesis test\n\n* Readd bad partition assignment in kinesis supervisor test\n\n* Nit\n\n* Misnamed var\n","date":"2019-04-11 09:16:38","modifiedFileCount":"6","status":"B","submitter":"Justin Borromeo"},{"authorTime":"2019-11-16 01:22:09","codes":[{"authorDate":"2019-04-11 09:16:38","commitOrder":2,"curCode":"  public void testSerdeWithUpdatedDataSchemaAddedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema originalSchema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    TestModifiedDataSchema deserialized = jsonMapper.readValue(serialized, TestModifiedDataSchema.class);\n\n    Assert.assertEquals(null, deserialized.getExtra());\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","date":"2019-04-11 09:16:38","endLine":417,"groupId":"15746","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithUpdatedDataSchemaAddedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c0/59f29c38d1c8839d893ece31c4c0e0b2294232.src","preCode":"  public void testSerdeWithUpdatedDataSchemaAddedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema originalSchema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    TestModifiedDataSchema deserialized = jsonMapper.readValue(serialized, TestModifiedDataSchema.class);\n\n    Assert.assertEquals(null, deserialized.getExtra());\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"N"},{"authorDate":"2019-11-16 01:22:09","commitOrder":2,"curCode":"  public void testSerdeWithUpdatedDataSchemaRemovedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    TestModifiedDataSchema originalSchema = new TestModifiedDataSchema(\n        \"test\",\n        null,\n        null,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        parser,\n        jsonMapper,\n        \"some arbitrary string\"\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    DataSchema deserialized = jsonMapper.readValue(serialized, DataSchema.class);\n\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","date":"2019-11-16 01:22:09","endLine":495,"groupId":"15746","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithUpdatedDataSchemaRemovedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/29/842276bad34fc8c83a04c8d32e03533980c595.src","preCode":"  public void testSerdeWithUpdatedDataSchemaRemovedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    TestModifiedDataSchema originalSchema = new TestModifiedDataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper,\n        \"some arbitrary string\"\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    DataSchema deserialized = jsonMapper.readValue(serialized, DataSchema.class);\n\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":457,"status":"M"}],"commitId":"1611792855ad9def8b6f5b1375862d05d1acca0a","commitMessage":"@@@Add InputSource and InputFormat interfaces (#8823)\n\n* Add InputSource and InputFormat interfaces\n\n* revert orc dependency\n\n* fix dimension exclusions and failing unit tests\n\n* fix tests\n\n* fix test\n\n* fix test\n\n* fix firehose and inputSource for parallel indexing task\n\n* fix tc\n\n* fix tc: remove unused method\n\n* Formattable\n\n* add needsFormat(); renamed to ObjectSource; pass metricsName for reader\n\n* address comments\n\n* fix closing resource\n\n* fix checkstyle\n\n* fix tests\n\n* remove verify from csv\n\n* Revert \"remove verify from csv\"\n\nThis reverts commit 1ea7758489cc8c9d708bd691fd48e62085fd9455.\n\n* address comments\n\n* fix import order and javadoc\n\n* flatMap\n\n* sampleLine\n\n* Add IntermediateRowParsingReader\n\n* Address comments\n\n* move csv reader test\n\n* remove test for verify\n\n* adjust comments\n\n* Fix InputEntityIteratingReader\n\n* rename source -> entity\n\n* address comments\n","date":"2019-11-16 01:22:09","modifiedFileCount":"72","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-04-07 07:02:50","codes":[{"authorDate":"2020-04-07 07:02:50","commitOrder":3,"curCode":"  public void testSerdeWithUpdatedDataSchemaAddedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema originalSchema = new DataSchema(\n        VALID_DATASOURCE_CHARS_NAME,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    TestModifiedDataSchema deserialized = jsonMapper.readValue(serialized, TestModifiedDataSchema.class);\n\n    Assert.assertEquals(null, deserialized.getExtra());\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","date":"2020-04-07 07:02:50","endLine":500,"groupId":"15746","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithUpdatedDataSchemaAddedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ff/081c598b70dbd94e2ef113d2ef95dd4de2fd15.src","preCode":"  public void testSerdeWithUpdatedDataSchemaAddedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema originalSchema = new DataSchema(\n        \"test\",\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    TestModifiedDataSchema deserialized = jsonMapper.readValue(serialized, TestModifiedDataSchema.class);\n\n    Assert.assertEquals(null, deserialized.getExtra());\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":464,"status":"M"},{"authorDate":"2020-04-07 07:02:50","commitOrder":3,"curCode":"  public void testSerdeWithUpdatedDataSchemaRemovedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    TestModifiedDataSchema originalSchema = new TestModifiedDataSchema(\n        VALID_DATASOURCE_CHARS_NAME,\n        null,\n        null,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        parser,\n        jsonMapper,\n        \"some arbitrary string\"\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    DataSchema deserialized = jsonMapper.readValue(serialized, DataSchema.class);\n\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","date":"2020-04-07 07:02:50","endLine":541,"groupId":"15746","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithUpdatedDataSchemaRemovedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ff/081c598b70dbd94e2ef113d2ef95dd4de2fd15.src","preCode":"  public void testSerdeWithUpdatedDataSchemaRemovedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    TestModifiedDataSchema originalSchema = new TestModifiedDataSchema(\n        \"test\",\n        null,\n        null,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        parser,\n        jsonMapper,\n        \"some arbitrary string\"\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    DataSchema deserialized = jsonMapper.readValue(serialized, DataSchema.class);\n\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":503,"status":"M"}],"commitId":"7bf1ebb0b86f3b5af224cc4ae56868a4d703a061","commitMessage":"@@@Add tests for valid and invalid datasource names (#9614)\n\n* Add tests for valid and invalid datasource names\n\n* code review\n\n* clean up dependencies","date":"2020-04-07 07:02:50","modifiedFileCount":"1","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2020-04-08 00:47:18","codes":[{"authorDate":"2020-04-08 00:47:18","commitOrder":4,"curCode":"  public void testSerdeWithUpdatedDataSchemaAddedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema originalSchema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    TestModifiedDataSchema deserialized = jsonMapper.readValue(serialized, TestModifiedDataSchema.class);\n\n    Assert.assertEquals(null, deserialized.getExtra());\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","date":"2020-04-08 00:47:18","endLine":498,"groupId":"15746","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithUpdatedDataSchemaAddedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8c/e50d3817b90d84d8cb2ce65890e7a31ea5ac7f.src","preCode":"  public void testSerdeWithUpdatedDataSchemaAddedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema originalSchema = new DataSchema(\n        VALID_DATASOURCE_CHARS_NAME,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    TestModifiedDataSchema deserialized = jsonMapper.readValue(serialized, TestModifiedDataSchema.class);\n\n    Assert.assertEquals(null, deserialized.getExtra());\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"M"},{"authorDate":"2020-04-08 00:47:18","commitOrder":4,"curCode":"  public void testSerdeWithUpdatedDataSchemaRemovedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    TestModifiedDataSchema originalSchema = new TestModifiedDataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        null,\n        null,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        parser,\n        jsonMapper,\n        \"some arbitrary string\"\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    DataSchema deserialized = jsonMapper.readValue(serialized, DataSchema.class);\n\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","date":"2020-04-08 00:47:18","endLine":539,"groupId":"15746","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithUpdatedDataSchemaRemovedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8c/e50d3817b90d84d8cb2ce65890e7a31ea5ac7f.src","preCode":"  public void testSerdeWithUpdatedDataSchemaRemovedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    TestModifiedDataSchema originalSchema = new TestModifiedDataSchema(\n        VALID_DATASOURCE_CHARS_NAME,\n        null,\n        null,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        parser,\n        jsonMapper,\n        \"some arbitrary string\"\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    DataSchema deserialized = jsonMapper.readValue(serialized, DataSchema.class);\n\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":501,"status":"M"}],"commitId":"d267b1c414b9b55b129729692755273d2a35e304","commitMessage":"@@@check paths used for shuffle intermediary data manager get and delete (#9630)\n\n* check paths used for shuffle intermediary data manager get and delete\n\n* add test\n\n* newline\n\n* meh","date":"2020-04-08 00:47:18","modifiedFileCount":"10","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-05-09 12:53:39","codes":[{"authorDate":"2020-05-09 12:53:39","commitOrder":5,"curCode":"  public void testSerdeWithUpdatedDataSchemaAddedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema originalSchema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    TestModifiedDataSchema deserialized = jsonMapper.readValue(serialized, TestModifiedDataSchema.class);\n\n    Assert.assertEquals(null, deserialized.getExtra());\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","date":"2020-05-09 12:53:39","endLine":506,"groupId":"15746","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithUpdatedDataSchemaAddedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/116b4fe7481bd79f3d8221e1e7627d99cfec3a.src","preCode":"  public void testSerdeWithUpdatedDataSchemaAddedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema originalSchema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    TestModifiedDataSchema deserialized = jsonMapper.readValue(serialized, TestModifiedDataSchema.class);\n\n    Assert.assertEquals(null, deserialized.getExtra());\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":469,"status":"M"},{"authorDate":"2020-05-09 12:53:39","commitOrder":5,"curCode":"  public void testSerdeWithUpdatedDataSchemaRemovedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    TestModifiedDataSchema originalSchema = new TestModifiedDataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        null,\n        null,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        parser,\n        jsonMapper,\n        \"some arbitrary string\"\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    DataSchema deserialized = jsonMapper.readValue(serialized, DataSchema.class);\n\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","date":"2020-05-09 12:53:39","endLine":548,"groupId":"15746","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithUpdatedDataSchemaRemovedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/116b4fe7481bd79f3d8221e1e7627d99cfec3a.src","preCode":"  public void testSerdeWithUpdatedDataSchemaRemovedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    TestModifiedDataSchema originalSchema = new TestModifiedDataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        null,\n        null,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        parser,\n        jsonMapper,\n        \"some arbitrary string\"\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    DataSchema deserialized = jsonMapper.readValue(serialized, DataSchema.class);\n\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":509,"status":"M"}],"commitId":"28be107a1c18ef1fd9fd268c8b04e232efb63695","commitMessage":"@@@add flag to flattenSpec to keep null columns (#9814)\n\n* add flag to flattenSpec to keep null columns\n\n* remove changes to inputFormat interface\n\n* add comment\n\n* change comment message\n\n* update web console e2e test\n\n* move keepNullColmns to JSONParseSpec\n\n* fix merge conflicts\n\n* fix tests\n\n* set keepNullColumns to false by default\n\n* fix lgtm\n\n* change Boolean to boolean.  add keepNullColumns to hash.  add tests for keepKeepNullColumns false + true with no nuulul columns\n\n* Add equals verifier tests","date":"2020-05-09 12:53:39","modifiedFileCount":"41","status":"M","submitter":"mcbrewster"},{"authorTime":"2020-07-14 12:15:54","codes":[{"authorDate":"2020-07-14 12:15:54","commitOrder":6,"curCode":"  public void testSerdeWithUpdatedDataSchemaAddedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema originalSchema = new DataSchema(\n        IdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    TestModifiedDataSchema deserialized = jsonMapper.readValue(serialized, TestModifiedDataSchema.class);\n\n    Assert.assertEquals(null, deserialized.getExtra());\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","date":"2020-07-14 12:15:54","endLine":506,"groupId":"1092","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithUpdatedDataSchemaAddedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/13/bf27d2c1781d3ed6db3e3d17d12c760ca63d78.src","preCode":"  public void testSerdeWithUpdatedDataSchemaAddedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    DataSchema originalSchema = new DataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        parser,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        jsonMapper\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    TestModifiedDataSchema deserialized = jsonMapper.readValue(serialized, TestModifiedDataSchema.class);\n\n    Assert.assertEquals(null, deserialized.getExtra());\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":469,"status":"M"},{"authorDate":"2020-07-14 12:15:54","commitOrder":6,"curCode":"  public void testSerdeWithUpdatedDataSchemaRemovedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    TestModifiedDataSchema originalSchema = new TestModifiedDataSchema(\n        IdUtilsTest.VALID_ID_CHARS,\n        null,\n        null,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        parser,\n        jsonMapper,\n        \"some arbitrary string\"\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    DataSchema deserialized = jsonMapper.readValue(serialized, DataSchema.class);\n\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","date":"2020-07-14 12:15:54","endLine":548,"groupId":"1092","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithUpdatedDataSchemaRemovedField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/13/bf27d2c1781d3ed6db3e3d17d12c760ca63d78.src","preCode":"  public void testSerdeWithUpdatedDataSchemaRemovedField() throws IOException\n  {\n    Map<String, Object> parser = jsonMapper.convertValue(\n        new StringInputRowParser(\n            new JSONParseSpec(\n                new TimestampSpec(\"time\", \"auto\", null),\n                new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"dimB\", \"dimA\")), null, null),\n                null,\n                null,\n                null\n            ),\n            null\n        ), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    TestModifiedDataSchema originalSchema = new TestModifiedDataSchema(\n        TaskIdUtilsTest.VALID_ID_CHARS,\n        null,\n        null,\n        new AggregatorFactory[]{\n            new DoubleSumAggregatorFactory(\"metric1\", \"col1\"),\n            new DoubleSumAggregatorFactory(\"metric2\", \"col2\"),\n            },\n        new ArbitraryGranularitySpec(Granularities.DAY, ImmutableList.of(Intervals.of(\"2014/2015\"))),\n        null,\n        parser,\n        jsonMapper,\n        \"some arbitrary string\"\n    );\n\n    String serialized = jsonMapper.writeValueAsString(originalSchema);\n    DataSchema deserialized = jsonMapper.readValue(serialized, DataSchema.class);\n\n    Assert.assertEquals(originalSchema.getDataSource(), deserialized.getDataSource());\n    Assert.assertEquals(originalSchema.getGranularitySpec(), deserialized.getGranularitySpec());\n    Assert.assertEquals(originalSchema.getParser().getParseSpec(), deserialized.getParser().getParseSpec());\n    Assert.assertArrayEquals(originalSchema.getAggregators(), deserialized.getAggregators());\n    Assert.assertEquals(originalSchema.getTransformSpec(), deserialized.getTransformSpec());\n    Assert.assertEquals(originalSchema.getParserMap(), deserialized.getParserMap());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/indexing/DataSchemaTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":509,"status":"M"}],"commitId":"e6c9142129f1462feabefb4b13aa8a037fbe793f","commitMessage":"@@@Add validation for authenticator and authorizer name (#10106)\n\n* Add validation for authorizer name\n\n* fix deps\n\n* add javadocs\n\n* Do not use resource filters\n\n* Fix BasicAuthenticatorResource as well\n\n* Add integration tests\n\n* fix test\n\n* fix","date":"2020-07-14 12:15:54","modifiedFileCount":"16","status":"M","submitter":"Suneet Saldanha"}]
