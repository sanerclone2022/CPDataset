[{"authorTime":"2020-02-13 06:01:41","codes":[{"authorDate":"2020-01-21 03:51:54","commitOrder":2,"curCode":"  public void testFirstLatestAggregatorsSkipNulls() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    final DimFilter filter;\n    if (useDefault) {\n      filter = not(selector(\"dim1\", null, null));\n    } else {\n      filter = and(\n          not(selector(\"dim1\", null, null)),\n          not(selector(\"l1\", null, null)),\n          not(selector(\"d1\", null, null)),\n          not(selector(\"f1\", null, null))\n      );\n    }\n    testQuery(\n        \"SELECT EARLIEST(dim1, 32), LATEST(l1), LATEST(d1), LATEST(f1) \"\n        + \"FROM druid.numfoo \"\n        + \"WHERE dim1 IS NOT NULL AND l1 IS NOT NULL AND d1 IS NOT NULL AND f1 is NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(filter)\n                  .aggregators(\n                      aggregators(\n                          new StringFirstAggregatorFactory(\"a0\", \"dim1\", 32),\n                          new LongLastAggregatorFactory(\"a1\", \"l1\"),\n                          new DoubleLastAggregatorFactory(\"a2\", \"d1\"),\n                          new FloatLastAggregatorFactory(\"a3\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            \r\n            new Object[]{useDefault ? \"10.1\" : \"\", 0L, 0.0, 0.0f}\n        )\n    );\n  }\n","date":"2020-01-21 03:51:54","endLine":1786,"groupId":"19628","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFirstLatestAggregatorsSkipNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/d6ccd14905b03f29d530e6926d34b67ece734c.src","preCode":"  public void testFirstLatestAggregatorsSkipNulls() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    final DimFilter filter;\n    if (useDefault) {\n      filter = not(selector(\"dim1\", null, null));\n    } else {\n      filter = and(\n          not(selector(\"dim1\", null, null)),\n          not(selector(\"l1\", null, null)),\n          not(selector(\"d1\", null, null)),\n          not(selector(\"f1\", null, null))\n      );\n    }\n    testQuery(\n        \"SELECT EARLIEST(dim1, 32), LATEST(l1), LATEST(d1), LATEST(f1) \"\n        + \"FROM druid.numfoo \"\n        + \"WHERE dim1 IS NOT NULL AND l1 IS NOT NULL AND d1 IS NOT NULL AND f1 is NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(filter)\n                  .aggregators(\n                      aggregators(\n                          new StringFirstAggregatorFactory(\"a0\", \"dim1\", 32),\n                          new LongLastAggregatorFactory(\"a1\", \"l1\"),\n                          new DoubleLastAggregatorFactory(\"a2\", \"d1\"),\n                          new FloatLastAggregatorFactory(\"a3\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            \r\n            new Object[]{useDefault ? \"10.1\" : \"\", 0L, 0.0, 0.0f}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1744,"status":"NB"},{"authorDate":"2020-02-13 06:01:41","commitOrder":2,"curCode":"  public void testAnyAggregatorsSkipNullsWithFilter() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    final DimFilter filter;\n    if (useDefault) {\n      filter = not(selector(\"dim1\", null, null));\n    } else {\n      filter = and(\n          not(selector(\"dim1\", null, null)),\n          not(selector(\"l2\", null, null)),\n          not(selector(\"d2\", null, null)),\n          not(selector(\"f2\", null, null))\n      );\n    }\n    testQuery(\n        \"SELECT ANY_VALUE(dim1, 32), ANY_VALUE(l2), ANY_VALUE(d2), ANY_VALUE(f2) \"\n        + \"FROM druid.numfoo \"\n        + \"WHERE dim1 IS NOT NULL AND l2 IS NOT NULL AND d2 IS NOT NULL AND f2 is NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(filter)\n                  .aggregators(\n                      aggregators(\n                          new StringAnyAggregatorFactory(\"a0\", \"dim1\", 32),\n                          new LongAnyAggregatorFactory(\"a1\", \"l2\"),\n                          new DoubleAnyAggregatorFactory(\"a2\", \"d2\"),\n                          new FloatAnyAggregatorFactory(\"a3\", \"f2\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            \r\n            new Object[]{\"10.1\", 325323L, 1.7, 0.1f}\n        )\n    );\n  }\n","date":"2020-02-13 06:01:41","endLine":1862,"groupId":"15549","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAnyAggregatorsSkipNullsWithFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/dd06b3faaa4821d3759ff1a6fc9207d35e634f.src","preCode":"  public void testAnyAggregatorsSkipNullsWithFilter() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    final DimFilter filter;\n    if (useDefault) {\n      filter = not(selector(\"dim1\", null, null));\n    } else {\n      filter = and(\n          not(selector(\"dim1\", null, null)),\n          not(selector(\"l2\", null, null)),\n          not(selector(\"d2\", null, null)),\n          not(selector(\"f2\", null, null))\n      );\n    }\n    testQuery(\n        \"SELECT ANY_VALUE(dim1, 32), ANY_VALUE(l2), ANY_VALUE(d2), ANY_VALUE(f2) \"\n        + \"FROM druid.numfoo \"\n        + \"WHERE dim1 IS NOT NULL AND l2 IS NOT NULL AND d2 IS NOT NULL AND f2 is NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(filter)\n                  .aggregators(\n                      aggregators(\n                          new StringAnyAggregatorFactory(\"a0\", \"dim1\", 32),\n                          new LongAnyAggregatorFactory(\"a1\", \"l2\"),\n                          new DoubleAnyAggregatorFactory(\"a2\", \"d2\"),\n                          new FloatAnyAggregatorFactory(\"a3\", \"f2\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            \r\n            new Object[]{\"10.1\", 325323L, 1.7, 0.1f}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1820,"status":"B"}],"commitId":"c30579e47b2df3c8c86b782a015a5a989102f0fb","commitMessage":"@@@ANY Aggregator should not skip null values implementation (#9317)\n\n* ANY Aggregator should not skip null values implementation\n\n* add tests\n\n* add more tests\n\n* Update documentation\n\n* add more tests\n\n* address review comments\n\n* optimize StringAnyBufferAggregator\n\n* fix failing tests\n\n* address pr comments\n","date":"2020-02-13 06:01:41","modifiedFileCount":"15","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-09-15 10:44:58","codes":[{"authorDate":"2020-01-21 03:51:54","commitOrder":3,"curCode":"  public void testFirstLatestAggregatorsSkipNulls() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    final DimFilter filter;\n    if (useDefault) {\n      filter = not(selector(\"dim1\", null, null));\n    } else {\n      filter = and(\n          not(selector(\"dim1\", null, null)),\n          not(selector(\"l1\", null, null)),\n          not(selector(\"d1\", null, null)),\n          not(selector(\"f1\", null, null))\n      );\n    }\n    testQuery(\n        \"SELECT EARLIEST(dim1, 32), LATEST(l1), LATEST(d1), LATEST(f1) \"\n        + \"FROM druid.numfoo \"\n        + \"WHERE dim1 IS NOT NULL AND l1 IS NOT NULL AND d1 IS NOT NULL AND f1 is NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(filter)\n                  .aggregators(\n                      aggregators(\n                          new StringFirstAggregatorFactory(\"a0\", \"dim1\", 32),\n                          new LongLastAggregatorFactory(\"a1\", \"l1\"),\n                          new DoubleLastAggregatorFactory(\"a2\", \"d1\"),\n                          new FloatLastAggregatorFactory(\"a3\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            \r\n            new Object[]{useDefault ? \"10.1\" : \"\", 0L, 0.0, 0.0f}\n        )\n    );\n  }\n","date":"2020-01-21 03:51:54","endLine":1786,"groupId":"19628","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFirstLatestAggregatorsSkipNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/d6ccd14905b03f29d530e6926d34b67ece734c.src","preCode":"  public void testFirstLatestAggregatorsSkipNulls() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    final DimFilter filter;\n    if (useDefault) {\n      filter = not(selector(\"dim1\", null, null));\n    } else {\n      filter = and(\n          not(selector(\"dim1\", null, null)),\n          not(selector(\"l1\", null, null)),\n          not(selector(\"d1\", null, null)),\n          not(selector(\"f1\", null, null))\n      );\n    }\n    testQuery(\n        \"SELECT EARLIEST(dim1, 32), LATEST(l1), LATEST(d1), LATEST(f1) \"\n        + \"FROM druid.numfoo \"\n        + \"WHERE dim1 IS NOT NULL AND l1 IS NOT NULL AND d1 IS NOT NULL AND f1 is NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(filter)\n                  .aggregators(\n                      aggregators(\n                          new StringFirstAggregatorFactory(\"a0\", \"dim1\", 32),\n                          new LongLastAggregatorFactory(\"a1\", \"l1\"),\n                          new DoubleLastAggregatorFactory(\"a2\", \"d1\"),\n                          new FloatLastAggregatorFactory(\"a3\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            \r\n            new Object[]{useDefault ? \"10.1\" : \"\", 0L, 0.0, 0.0f}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1744,"status":"N"},{"authorDate":"2020-09-15 10:44:58","commitOrder":3,"curCode":"  public void testAnyAggregatorsSkipNullsWithFilter() throws Exception\n  {\n    final DimFilter filter;\n    if (useDefault) {\n      filter = not(selector(\"dim1\", null, null));\n    } else {\n      filter = and(\n          not(selector(\"dim1\", null, null)),\n          not(selector(\"l2\", null, null)),\n          not(selector(\"d2\", null, null)),\n          not(selector(\"f2\", null, null))\n      );\n    }\n    testQuery(\n        \"SELECT ANY_VALUE(dim1, 32), ANY_VALUE(l2), ANY_VALUE(d2), ANY_VALUE(f2) \"\n        + \"FROM druid.numfoo \"\n        + \"WHERE dim1 IS NOT NULL AND l2 IS NOT NULL AND d2 IS NOT NULL AND f2 is NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(filter)\n                  .aggregators(\n                      aggregators(\n                          new StringAnyAggregatorFactory(\"a0\", \"dim1\", 32),\n                          new LongAnyAggregatorFactory(\"a1\", \"l2\"),\n                          new DoubleAnyAggregatorFactory(\"a2\", \"d2\"),\n                          new FloatAnyAggregatorFactory(\"a3\", \"f2\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            \r\n            new Object[]{\"10.1\", 325323L, 1.7, 0.1f}\n        )\n    );\n  }\n","date":"2020-09-15 10:44:58","endLine":2471,"groupId":"15549","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAnyAggregatorsSkipNullsWithFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/eb/7fa4ceed3c7b804ab1ca49735882421e2e2569.src","preCode":"  public void testAnyAggregatorsSkipNullsWithFilter() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    final DimFilter filter;\n    if (useDefault) {\n      filter = not(selector(\"dim1\", null, null));\n    } else {\n      filter = and(\n          not(selector(\"dim1\", null, null)),\n          not(selector(\"l2\", null, null)),\n          not(selector(\"d2\", null, null)),\n          not(selector(\"f2\", null, null))\n      );\n    }\n    testQuery(\n        \"SELECT ANY_VALUE(dim1, 32), ANY_VALUE(l2), ANY_VALUE(d2), ANY_VALUE(f2) \"\n        + \"FROM druid.numfoo \"\n        + \"WHERE dim1 IS NOT NULL AND l2 IS NOT NULL AND d2 IS NOT NULL AND f2 is NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(filter)\n                  .aggregators(\n                      aggregators(\n                          new StringAnyAggregatorFactory(\"a0\", \"dim1\", 32),\n                          new LongAnyAggregatorFactory(\"a1\", \"l2\"),\n                          new DoubleAnyAggregatorFactory(\"a2\", \"d2\"),\n                          new FloatAnyAggregatorFactory(\"a3\", \"f2\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            \r\n            new Object[]{\"10.1\", 325323L, 1.7, 0.1f}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2432,"status":"M"}],"commitId":"f71ba6f2c202d3edc0cdf8efa2274d0e247ddca8","commitMessage":"@@@Vectorized ANY aggregators (#10338)\n\n* WIP vectorized ANY aggregators\n\n* tests\n\n* fix aggs\n\n* cleanup\n\n* code review + tests\n\n* docs\n\n* use NilVectorSelector when needed\n\n* fix spellcheck\n\n* dont instantiate vectors\n\n* cleanup","date":"2020-09-15 10:44:58","modifiedFileCount":"5","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2021-05-11 01:13:37","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":4,"curCode":"  public void testFirstLatestAggregatorsSkipNulls() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    final DimFilter filter;\n    if (useDefault) {\n      filter = not(selector(\"dim1\", null, null));\n    } else {\n      filter = and(\n          not(selector(\"dim1\", null, null)),\n          not(selector(\"l1\", null, null)),\n          not(selector(\"d1\", null, null)),\n          not(selector(\"f1\", null, null))\n      );\n    }\n    testQuery(\n        \"SELECT EARLIEST(dim1, 32), LATEST(l1), LATEST(d1), LATEST(f1) \"\n        + \"FROM druid.numfoo \"\n        + \"WHERE dim1 IS NOT NULL AND l1 IS NOT NULL AND d1 IS NOT NULL AND f1 is NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(filter)\n                  .aggregators(\n                      aggregators(\n                          new StringFirstAggregatorFactory(\"a0\", \"dim1\", 32),\n                          new LongLastAggregatorFactory(\"a1\", \"l1\"),\n                          new DoubleLastAggregatorFactory(\"a2\", \"d1\"),\n                          new FloatLastAggregatorFactory(\"a3\", \"f1\")\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            \r\n            new Object[]{useDefault ? \"10.1\" : \"\", 0L, 0.0, 0.0f}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":2686,"groupId":"101623","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFirstLatestAggregatorsSkipNulls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testFirstLatestAggregatorsSkipNulls() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    final DimFilter filter;\n    if (useDefault) {\n      filter = not(selector(\"dim1\", null, null));\n    } else {\n      filter = and(\n          not(selector(\"dim1\", null, null)),\n          not(selector(\"l1\", null, null)),\n          not(selector(\"d1\", null, null)),\n          not(selector(\"f1\", null, null))\n      );\n    }\n    testQuery(\n        \"SELECT EARLIEST(dim1, 32), LATEST(l1), LATEST(d1), LATEST(f1) \"\n        + \"FROM druid.numfoo \"\n        + \"WHERE dim1 IS NOT NULL AND l1 IS NOT NULL AND d1 IS NOT NULL AND f1 is NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(filter)\n                  .aggregators(\n                      aggregators(\n                          new StringFirstAggregatorFactory(\"a0\", \"dim1\", 32),\n                          new LongLastAggregatorFactory(\"a1\", \"l1\"),\n                          new DoubleLastAggregatorFactory(\"a2\", \"d1\"),\n                          new FloatLastAggregatorFactory(\"a3\", \"f1\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            \r\n            new Object[]{useDefault ? \"10.1\" : \"\", 0L, 0.0, 0.0f}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2644,"status":"M"},{"authorDate":"2021-05-11 01:13:37","commitOrder":4,"curCode":"  public void testAnyAggregatorsSkipNullsWithFilter() throws Exception\n  {\n    final DimFilter filter;\n    if (useDefault) {\n      filter = not(selector(\"dim1\", null, null));\n    } else {\n      filter = and(\n          not(selector(\"dim1\", null, null)),\n          not(selector(\"l2\", null, null)),\n          not(selector(\"d2\", null, null)),\n          not(selector(\"f2\", null, null))\n      );\n    }\n    testQuery(\n        \"SELECT ANY_VALUE(dim1, 32), ANY_VALUE(l2), ANY_VALUE(d2), ANY_VALUE(f2) \"\n        + \"FROM druid.numfoo \"\n        + \"WHERE dim1 IS NOT NULL AND l2 IS NOT NULL AND d2 IS NOT NULL AND f2 is NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(filter)\n                  .aggregators(\n                      aggregators(\n                          new StringAnyAggregatorFactory(\"a0\", \"dim1\", 32),\n                          new LongAnyAggregatorFactory(\"a1\", \"l2\"),\n                          new DoubleAnyAggregatorFactory(\"a2\", \"d2\"),\n                          new FloatAnyAggregatorFactory(\"a3\", \"f2\")\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            \r\n            new Object[]{\"10.1\", 325323L, 1.7, 0.1f}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":2773,"groupId":"101623","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAnyAggregatorsSkipNullsWithFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testAnyAggregatorsSkipNullsWithFilter() throws Exception\n  {\n    final DimFilter filter;\n    if (useDefault) {\n      filter = not(selector(\"dim1\", null, null));\n    } else {\n      filter = and(\n          not(selector(\"dim1\", null, null)),\n          not(selector(\"l2\", null, null)),\n          not(selector(\"d2\", null, null)),\n          not(selector(\"f2\", null, null))\n      );\n    }\n    testQuery(\n        \"SELECT ANY_VALUE(dim1, 32), ANY_VALUE(l2), ANY_VALUE(d2), ANY_VALUE(f2) \"\n        + \"FROM druid.numfoo \"\n        + \"WHERE dim1 IS NOT NULL AND l2 IS NOT NULL AND d2 IS NOT NULL AND f2 is NOT NULL\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .filters(filter)\n                  .aggregators(\n                      aggregators(\n                          new StringAnyAggregatorFactory(\"a0\", \"dim1\", 32),\n                          new LongAnyAggregatorFactory(\"a1\", \"l2\"),\n                          new DoubleAnyAggregatorFactory(\"a2\", \"d2\"),\n                          new FloatAnyAggregatorFactory(\"a3\", \"f2\")\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            \r\n            new Object[]{\"10.1\", 325323L, 1.7, 0.1f}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2734,"status":"M"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
