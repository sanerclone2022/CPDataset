[{"authorTime":"2019-11-16 01:22:09","codes":[{"authorDate":"2019-11-16 01:22:09","commitOrder":1,"curCode":"  public void testMultiValues() throws IOException\n  {\n    final ByteEntity source = writeData(\n        ImmutableList.of(\n            \"ts,name,score\",\n            \"2019-01-01T00:00:10Z,name_1,5|1\",\n            \"2019-01-01T00:00:20Z,name_2,10|2\",\n            \"2019-01-01T00:00:30Z,name_3,15|3\"\n        )\n    );\n    final CsvInputFormat format = new CsvInputFormat(ImmutableList.of(), \"|\", true, 0);\n    final InputEntityReader reader = format.createReader(INPUT_ROW_SCHEMA);\n    int numResults = 0;\n    try (CloseableIterator<InputRow> iterator = reader.read(source, null)) {\n      while (iterator.hasNext()) {\n        final InputRow row = iterator.next();\n        Assert.assertEquals(\n            DateTimes.of(StringUtils.format(\"2019-01-01T00:00:%02dZ\", (numResults + 1) * 10)),\n            row.getTimestamp()\n        );\n        Assert.assertEquals(\n            StringUtils.format(\"name_%d\", numResults + 1),\n            Iterables.getOnlyElement(row.getDimension(\"name\"))\n        );\n        Assert.assertEquals(\n            ImmutableList.of(Integer.toString((numResults + 1) * 5), Integer.toString(numResults + 1)),\n            row.getDimension(\"score\")\n        );\n        numResults++;\n      }\n      Assert.assertEquals(3, numResults);\n    }\n  }\n","date":"2019-11-16 01:22:09","endLine":144,"groupId":"4051","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c9/88b12002670448e3ea7409389a208ea8b7b7ae.src","preCode":"  public void testMultiValues() throws IOException\n  {\n    final ByteEntity source = writeData(\n        ImmutableList.of(\n            \"ts,name,score\",\n            \"2019-01-01T00:00:10Z,name_1,5|1\",\n            \"2019-01-01T00:00:20Z,name_2,10|2\",\n            \"2019-01-01T00:00:30Z,name_3,15|3\"\n        )\n    );\n    final CsvInputFormat format = new CsvInputFormat(ImmutableList.of(), \"|\", true, 0);\n    final InputEntityReader reader = format.createReader(INPUT_ROW_SCHEMA);\n    int numResults = 0;\n    try (CloseableIterator<InputRow> iterator = reader.read(source, null)) {\n      while (iterator.hasNext()) {\n        final InputRow row = iterator.next();\n        Assert.assertEquals(\n            DateTimes.of(StringUtils.format(\"2019-01-01T00:00:%02dZ\", (numResults + 1) * 10)),\n            row.getTimestamp()\n        );\n        Assert.assertEquals(\n            StringUtils.format(\"name_%d\", numResults + 1),\n            Iterables.getOnlyElement(row.getDimension(\"name\"))\n        );\n        Assert.assertEquals(\n            ImmutableList.of(Integer.toString((numResults + 1) * 5), Integer.toString(numResults + 1)),\n            row.getDimension(\"score\")\n        );\n        numResults++;\n      }\n      Assert.assertEquals(3, numResults);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/druid/data/input/impl/CsvReaderTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"B"},{"authorDate":"2019-11-16 01:22:09","commitOrder":1,"curCode":"  private void assertResult(ByteEntity source, CsvInputFormat format) throws IOException\n  {\n    final InputEntityReader reader = format.createReader(INPUT_ROW_SCHEMA);\n    int numResults = 0;\n    try (CloseableIterator<InputRow> iterator = reader.read(source, null)) {\n      while (iterator.hasNext()) {\n        final InputRow row = iterator.next();\n        Assert.assertEquals(\n            DateTimes.of(StringUtils.format(\"2019-01-01T00:00:%02dZ\", (numResults + 1) * 10)),\n            row.getTimestamp()\n        );\n        Assert.assertEquals(\n            StringUtils.format(\"name_%d\", numResults + 1),\n            Iterables.getOnlyElement(row.getDimension(\"name\"))\n        );\n        Assert.assertEquals(\n            Integer.toString((numResults + 1) * 5),\n            Iterables.getOnlyElement(row.getDimension(\"score\"))\n        );\n        numResults++;\n      }\n      Assert.assertEquals(3, numResults);\n    }\n  }\n","date":"2019-11-16 01:22:09","endLine":291,"groupId":"4051","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertResult","params":"(ByteEntitysource@CsvInputFormatformat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c9/88b12002670448e3ea7409389a208ea8b7b7ae.src","preCode":"  private void assertResult(ByteEntity source, CsvInputFormat format) throws IOException\n  {\n    final InputEntityReader reader = format.createReader(INPUT_ROW_SCHEMA);\n    int numResults = 0;\n    try (CloseableIterator<InputRow> iterator = reader.read(source, null)) {\n      while (iterator.hasNext()) {\n        final InputRow row = iterator.next();\n        Assert.assertEquals(\n            DateTimes.of(StringUtils.format(\"2019-01-01T00:00:%02dZ\", (numResults + 1) * 10)),\n            row.getTimestamp()\n        );\n        Assert.assertEquals(\n            StringUtils.format(\"name_%d\", numResults + 1),\n            Iterables.getOnlyElement(row.getDimension(\"name\"))\n        );\n        Assert.assertEquals(\n            Integer.toString((numResults + 1) * 5),\n            Iterables.getOnlyElement(row.getDimension(\"score\"))\n        );\n        numResults++;\n      }\n      Assert.assertEquals(3, numResults);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/druid/data/input/impl/CsvReaderTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"B"}],"commitId":"1611792855ad9def8b6f5b1375862d05d1acca0a","commitMessage":"@@@Add InputSource and InputFormat interfaces (#8823)\n\n* Add InputSource and InputFormat interfaces\n\n* revert orc dependency\n\n* fix dimension exclusions and failing unit tests\n\n* fix tests\n\n* fix test\n\n* fix test\n\n* fix firehose and inputSource for parallel indexing task\n\n* fix tc\n\n* fix tc: remove unused method\n\n* Formattable\n\n* add needsFormat(); renamed to ObjectSource; pass metricsName for reader\n\n* address comments\n\n* fix closing resource\n\n* fix checkstyle\n\n* fix tests\n\n* remove verify from csv\n\n* Revert \"remove verify from csv\"\n\nThis reverts commit 1ea7758489cc8c9d708bd691fd48e62085fd9455.\n\n* address comments\n\n* fix import order and javadoc\n\n* flatMap\n\n* sampleLine\n\n* Add IntermediateRowParsingReader\n\n* Address comments\n\n* move csv reader test\n\n* remove test for verify\n\n* adjust comments\n\n* Fix InputEntityIteratingReader\n\n* rename source -> entity\n\n* address comments\n","date":"2019-11-16 01:22:09","modifiedFileCount":"72","status":"B","submitter":"Jihoon Son"},{"authorTime":"2019-11-16 09:08:26","codes":[{"authorDate":"2019-11-16 09:08:26","commitOrder":2,"curCode":"  public void testMultiValues() throws IOException\n  {\n    final ByteEntity source = writeData(\n        ImmutableList.of(\n            \"ts,name,score\",\n            \"2019-01-01T00:00:10Z,name_1,5|1\",\n            \"2019-01-01T00:00:20Z,name_2,10|2\",\n            \"2019-01-01T00:00:30Z,name_3,15|3\"\n        )\n    );\n    final CsvInputFormat format = new CsvInputFormat(ImmutableList.of(), \"|\", true, 0);\n    final InputEntityReader reader = format.createReader(INPUT_ROW_SCHEMA, source, null);\n    int numResults = 0;\n    try (CloseableIterator<InputRow> iterator = reader.read()) {\n      while (iterator.hasNext()) {\n        final InputRow row = iterator.next();\n        Assert.assertEquals(\n            DateTimes.of(StringUtils.format(\"2019-01-01T00:00:%02dZ\", (numResults + 1) * 10)),\n            row.getTimestamp()\n        );\n        Assert.assertEquals(\n            StringUtils.format(\"name_%d\", numResults + 1),\n            Iterables.getOnlyElement(row.getDimension(\"name\"))\n        );\n        Assert.assertEquals(\n            ImmutableList.of(Integer.toString((numResults + 1) * 5), Integer.toString(numResults + 1)),\n            row.getDimension(\"score\")\n        );\n        numResults++;\n      }\n      Assert.assertEquals(3, numResults);\n    }\n  }\n","date":"2019-11-16 09:08:26","endLine":144,"groupId":"4051","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/65/3fcc4c114bd7caab549b8667b4279e21487718.src","preCode":"  public void testMultiValues() throws IOException\n  {\n    final ByteEntity source = writeData(\n        ImmutableList.of(\n            \"ts,name,score\",\n            \"2019-01-01T00:00:10Z,name_1,5|1\",\n            \"2019-01-01T00:00:20Z,name_2,10|2\",\n            \"2019-01-01T00:00:30Z,name_3,15|3\"\n        )\n    );\n    final CsvInputFormat format = new CsvInputFormat(ImmutableList.of(), \"|\", true, 0);\n    final InputEntityReader reader = format.createReader(INPUT_ROW_SCHEMA);\n    int numResults = 0;\n    try (CloseableIterator<InputRow> iterator = reader.read(source, null)) {\n      while (iterator.hasNext()) {\n        final InputRow row = iterator.next();\n        Assert.assertEquals(\n            DateTimes.of(StringUtils.format(\"2019-01-01T00:00:%02dZ\", (numResults + 1) * 10)),\n            row.getTimestamp()\n        );\n        Assert.assertEquals(\n            StringUtils.format(\"name_%d\", numResults + 1),\n            Iterables.getOnlyElement(row.getDimension(\"name\"))\n        );\n        Assert.assertEquals(\n            ImmutableList.of(Integer.toString((numResults + 1) * 5), Integer.toString(numResults + 1)),\n            row.getDimension(\"score\")\n        );\n        numResults++;\n      }\n      Assert.assertEquals(3, numResults);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/druid/data/input/impl/CsvReaderTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2019-11-16 09:08:26","commitOrder":2,"curCode":"  private void assertResult(ByteEntity source, CsvInputFormat format) throws IOException\n  {\n    final InputEntityReader reader = format.createReader(INPUT_ROW_SCHEMA, source, null);\n    int numResults = 0;\n    try (CloseableIterator<InputRow> iterator = reader.read()) {\n      while (iterator.hasNext()) {\n        final InputRow row = iterator.next();\n        Assert.assertEquals(\n            DateTimes.of(StringUtils.format(\"2019-01-01T00:00:%02dZ\", (numResults + 1) * 10)),\n            row.getTimestamp()\n        );\n        Assert.assertEquals(\n            StringUtils.format(\"name_%d\", numResults + 1),\n            Iterables.getOnlyElement(row.getDimension(\"name\"))\n        );\n        Assert.assertEquals(\n            Integer.toString((numResults + 1) * 5),\n            Iterables.getOnlyElement(row.getDimension(\"score\"))\n        );\n        numResults++;\n      }\n      Assert.assertEquals(3, numResults);\n    }\n  }\n","date":"2019-11-16 09:08:26","endLine":293,"groupId":"4051","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertResult","params":"(ByteEntitysource@CsvInputFormatformat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/65/3fcc4c114bd7caab549b8667b4279e21487718.src","preCode":"  private void assertResult(ByteEntity source, CsvInputFormat format) throws IOException\n  {\n    final InputEntityReader reader = format.createReader(INPUT_ROW_SCHEMA);\n    int numResults = 0;\n    try (CloseableIterator<InputRow> iterator = reader.read(source, null)) {\n      while (iterator.hasNext()) {\n        final InputRow row = iterator.next();\n        Assert.assertEquals(\n            DateTimes.of(StringUtils.format(\"2019-01-01T00:00:%02dZ\", (numResults + 1) * 10)),\n            row.getTimestamp()\n        );\n        Assert.assertEquals(\n            StringUtils.format(\"name_%d\", numResults + 1),\n            Iterables.getOnlyElement(row.getDimension(\"name\"))\n        );\n        Assert.assertEquals(\n            Integer.toString((numResults + 1) * 5),\n            Iterables.getOnlyElement(row.getDimension(\"score\"))\n        );\n        numResults++;\n      }\n      Assert.assertEquals(3, numResults);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/druid/data/input/impl/CsvReaderTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"}],"commitId":"7fa3182fe5891679a4b3601a67c997c8d19921ba","commitMessage":"@@@refactor InputFormat and InputEntityReader implementations (#8875)\n\n* refactor InputFormat and InputReader to supply InputEntity and temp dir to constructors instead of read/sample\n\n* fix style\n","date":"2019-11-16 09:08:26","modifiedFileCount":"12","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-11-16 09:08:26","codes":[{"authorDate":"2019-11-23 10:01:40","commitOrder":3,"curCode":"  public void testMultiValues() throws IOException\n  {\n    final ByteEntity source = writeData(\n        ImmutableList.of(\n            \"ts,name,score\",\n            \"2019-01-01T00:00:10Z,name_1,5|1\",\n            \"2019-01-01T00:00:20Z,name_2,10|2\",\n            \"2019-01-01T00:00:30Z,name_3,15|3\"\n        )\n    );\n    final CsvInputFormat format = new CsvInputFormat(ImmutableList.of(), \"|\", null, true, 0);\n    final InputEntityReader reader = format.createReader(INPUT_ROW_SCHEMA, source, null);\n    int numResults = 0;\n    try (CloseableIterator<InputRow> iterator = reader.read()) {\n      while (iterator.hasNext()) {\n        final InputRow row = iterator.next();\n        Assert.assertEquals(\n            DateTimes.of(StringUtils.format(\"2019-01-01T00:00:%02dZ\", (numResults + 1) * 10)),\n            row.getTimestamp()\n        );\n        Assert.assertEquals(\n            StringUtils.format(\"name_%d\", numResults + 1),\n            Iterables.getOnlyElement(row.getDimension(\"name\"))\n        );\n        Assert.assertEquals(\n            ImmutableList.of(Integer.toString((numResults + 1) * 5), Integer.toString(numResults + 1)),\n            row.getDimension(\"score\")\n        );\n        numResults++;\n      }\n      Assert.assertEquals(3, numResults);\n    }\n  }\n","date":"2019-11-23 10:01:40","endLine":152,"groupId":"104845","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMultiValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ec/942379f3b226cf95ccb19f3c35869764629731.src","preCode":"  public void testMultiValues() throws IOException\n  {\n    final ByteEntity source = writeData(\n        ImmutableList.of(\n            \"ts,name,score\",\n            \"2019-01-01T00:00:10Z,name_1,5|1\",\n            \"2019-01-01T00:00:20Z,name_2,10|2\",\n            \"2019-01-01T00:00:30Z,name_3,15|3\"\n        )\n    );\n    final CsvInputFormat format = new CsvInputFormat(ImmutableList.of(), \"|\", true, 0);\n    final InputEntityReader reader = format.createReader(INPUT_ROW_SCHEMA, source, null);\n    int numResults = 0;\n    try (CloseableIterator<InputRow> iterator = reader.read()) {\n      while (iterator.hasNext()) {\n        final InputRow row = iterator.next();\n        Assert.assertEquals(\n            DateTimes.of(StringUtils.format(\"2019-01-01T00:00:%02dZ\", (numResults + 1) * 10)),\n            row.getTimestamp()\n        );\n        Assert.assertEquals(\n            StringUtils.format(\"name_%d\", numResults + 1),\n            Iterables.getOnlyElement(row.getDimension(\"name\"))\n        );\n        Assert.assertEquals(\n            ImmutableList.of(Integer.toString((numResults + 1) * 5), Integer.toString(numResults + 1)),\n            row.getDimension(\"score\")\n        );\n        numResults++;\n      }\n      Assert.assertEquals(3, numResults);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/druid/data/input/impl/CsvReaderTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2019-11-16 09:08:26","commitOrder":3,"curCode":"  private void assertResult(ByteEntity source, CsvInputFormat format) throws IOException\n  {\n    final InputEntityReader reader = format.createReader(INPUT_ROW_SCHEMA, source, null);\n    int numResults = 0;\n    try (CloseableIterator<InputRow> iterator = reader.read()) {\n      while (iterator.hasNext()) {\n        final InputRow row = iterator.next();\n        Assert.assertEquals(\n            DateTimes.of(StringUtils.format(\"2019-01-01T00:00:%02dZ\", (numResults + 1) * 10)),\n            row.getTimestamp()\n        );\n        Assert.assertEquals(\n            StringUtils.format(\"name_%d\", numResults + 1),\n            Iterables.getOnlyElement(row.getDimension(\"name\"))\n        );\n        Assert.assertEquals(\n            Integer.toString((numResults + 1) * 5),\n            Iterables.getOnlyElement(row.getDimension(\"score\"))\n        );\n        numResults++;\n      }\n      Assert.assertEquals(3, numResults);\n    }\n  }\n","date":"2019-11-16 09:08:26","endLine":293,"groupId":"104845","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertResult","params":"(ByteEntitysource@CsvInputFormatformat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/65/3fcc4c114bd7caab549b8667b4279e21487718.src","preCode":"  private void assertResult(ByteEntity source, CsvInputFormat format) throws IOException\n  {\n    final InputEntityReader reader = format.createReader(INPUT_ROW_SCHEMA, source, null);\n    int numResults = 0;\n    try (CloseableIterator<InputRow> iterator = reader.read()) {\n      while (iterator.hasNext()) {\n        final InputRow row = iterator.next();\n        Assert.assertEquals(\n            DateTimes.of(StringUtils.format(\"2019-01-01T00:00:%02dZ\", (numResults + 1) * 10)),\n            row.getTimestamp()\n        );\n        Assert.assertEquals(\n            StringUtils.format(\"name_%d\", numResults + 1),\n            Iterables.getOnlyElement(row.getDimension(\"name\"))\n        );\n        Assert.assertEquals(\n            Integer.toString((numResults + 1) * 5),\n            Iterables.getOnlyElement(row.getDimension(\"score\"))\n        );\n        numResults++;\n      }\n      Assert.assertEquals(3, numResults);\n    }\n  }\n","realPath":"core/src/test/java/org/apache/druid/data/input/impl/CsvReaderTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"N"}],"commitId":"0514e5686e58e384a1b7b05ec0a89612040e65e5","commitMessage":"@@@add TsvInputFormat (#8915)\n\n* add TsvInputFormat\n\n* refactor code\n\n* fix grammar\n\n* use enum replace string literal\n\n* code refactor\n\n* code refactor\n\n* mark abstract for base class meant not to be instantiated\n\n* remove constructor for test\n","date":"2019-11-23 10:01:40","modifiedFileCount":"13","status":"M","submitter":"Rye"}]
