[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testGetTaskPayload() throws Exception\n  {\n    expectAuthorizationTokenCheck();\n    final NoopTask task = NoopTask.create(\"mydatasource\");\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"mytask\"))\n            .andReturn(Optional.of(task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"othertask\"))\n            .andReturn(Optional.absent());\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    final Response response1 = overlordResource.getTaskPayload(\"mytask\");\n    final TaskPayloadResponse taskPayloadResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"mytask\", task), taskPayloadResponse1);\n\n    final Response response2 = overlordResource.getTaskPayload(\"othertask\");\n    final TaskPayloadResponse taskPayloadResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"othertask\", null), taskPayloadResponse2);\n  }\n","date":"2018-08-31 00:56:26","endLine":859,"groupId":"16601","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetTaskPayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/85/302bda5feacbba536fcf95d27b4400d59ed525.src","preCode":"  public void testGetTaskPayload() throws Exception\n  {\n    expectAuthorizationTokenCheck();\n    final NoopTask task = NoopTask.create(\"mydatasource\");\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"mytask\"))\n            .andReturn(Optional.of(task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"othertask\"))\n            .andReturn(Optional.absent());\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    final Response response1 = overlordResource.getTaskPayload(\"mytask\");\n    final TaskPayloadResponse taskPayloadResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"mytask\", task), taskPayloadResponse1);\n\n    final Response response2 = overlordResource.getTaskPayload(\"othertask\");\n    final TaskPayloadResponse taskPayloadResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"othertask\", null), taskPayloadResponse2);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":834,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testGetTaskStatus() throws Exception\n  {\n    expectAuthorizationTokenCheck();\n    final Task task = NoopTask.create(\"mytask\", 0);\n    final TaskStatus status = TaskStatus.running(\"mytask\");\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"mytask\"))\n            .andReturn(new TaskInfo<>(task.getId(), DateTimes.of(\"2018-01-01\"), status, task.getDataSource(), task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"othertask\"))\n            .andReturn(null);\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks())\n        .andReturn(ImmutableList.of());\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    final Response response1 = overlordResource.getTaskStatus(\"mytask\");\n    final TaskStatusResponse taskStatusResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskStatusResponse.class\n    );\n    Assert.assertEquals(\n        new TaskStatusResponse(\n            \"mytask\",\n            new TaskStatusPlus(\n                \"mytask\",\n                \"noop\",\n                DateTimes.of(\"2018-01-01\"),\n                DateTimes.EPOCH,\n                TaskState.RUNNING,\n                RunnerTaskState.RUNNING,\n                -1L,\n                TaskLocation.unknown(),\n                task.getDataSource(),\n                null\n            )\n        ),\n        taskStatusResponse1\n    );\n\n    final Response response2 = overlordResource.getTaskStatus(\"othertask\");\n    final TaskStatusResponse taskStatusResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskStatusResponse.class\n    );\n    Assert.assertEquals(new TaskStatusResponse(\"othertask\", null), taskStatusResponse2);\n  }\n","date":"2018-08-31 00:56:26","endLine":909,"groupId":"13073","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTaskStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/85/302bda5feacbba536fcf95d27b4400d59ed525.src","preCode":"  public void testGetTaskStatus() throws Exception\n  {\n    expectAuthorizationTokenCheck();\n    final Task task = NoopTask.create(\"mytask\", 0);\n    final TaskStatus status = TaskStatus.running(\"mytask\");\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"mytask\"))\n            .andReturn(new TaskInfo<>(task.getId(), DateTimes.of(\"2018-01-01\"), status, task.getDataSource(), task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"othertask\"))\n            .andReturn(null);\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks())\n        .andReturn(ImmutableList.of());\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    final Response response1 = overlordResource.getTaskStatus(\"mytask\");\n    final TaskStatusResponse taskStatusResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskStatusResponse.class\n    );\n    Assert.assertEquals(\n        new TaskStatusResponse(\n            \"mytask\",\n            new TaskStatusPlus(\n                \"mytask\",\n                \"noop\",\n                DateTimes.of(\"2018-01-01\"),\n                DateTimes.EPOCH,\n                TaskState.RUNNING,\n                RunnerTaskState.RUNNING,\n                -1L,\n                TaskLocation.unknown(),\n                task.getDataSource(),\n                null\n            )\n        ),\n        taskStatusResponse1\n    );\n\n    final Response response2 = overlordResource.getTaskStatus(\"othertask\");\n    final TaskStatusResponse taskStatusResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskStatusResponse.class\n    );\n    Assert.assertEquals(new TaskStatusResponse(\"othertask\", null), taskStatusResponse2);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":862,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-02 06:33:24","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testGetTaskPayload() throws Exception\n  {\n    expectAuthorizationTokenCheck();\n    final NoopTask task = NoopTask.create(\"mydatasource\");\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"mytask\"))\n            .andReturn(Optional.of(task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"othertask\"))\n            .andReturn(Optional.absent());\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    final Response response1 = overlordResource.getTaskPayload(\"mytask\");\n    final TaskPayloadResponse taskPayloadResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"mytask\", task), taskPayloadResponse1);\n\n    final Response response2 = overlordResource.getTaskPayload(\"othertask\");\n    final TaskPayloadResponse taskPayloadResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"othertask\", null), taskPayloadResponse2);\n  }\n","date":"2018-08-31 00:56:26","endLine":859,"groupId":"16601","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetTaskPayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/85/302bda5feacbba536fcf95d27b4400d59ed525.src","preCode":"  public void testGetTaskPayload() throws Exception\n  {\n    expectAuthorizationTokenCheck();\n    final NoopTask task = NoopTask.create(\"mydatasource\");\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"mytask\"))\n            .andReturn(Optional.of(task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"othertask\"))\n            .andReturn(Optional.absent());\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    final Response response1 = overlordResource.getTaskPayload(\"mytask\");\n    final TaskPayloadResponse taskPayloadResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"mytask\", task), taskPayloadResponse1);\n\n    final Response response2 = overlordResource.getTaskPayload(\"othertask\");\n    final TaskPayloadResponse taskPayloadResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"othertask\", null), taskPayloadResponse2);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":834,"status":"N"},{"authorDate":"2018-10-02 06:33:24","commitOrder":2,"curCode":"  public void testGetTaskStatus() throws Exception\n  {\n    expectAuthorizationTokenCheck();\n    final Task task = NoopTask.create(\"mytask\", 0);\n    final TaskStatus status = TaskStatus.running(\"mytask\");\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"mytask\"))\n            .andReturn(new TaskInfo<>(task.getId(), DateTimes.of(\"2018-01-01\"), status, task.getDataSource(), task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"othertask\"))\n            .andReturn(null);\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks())\n        .andReturn(ImmutableList.of());\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    final Response response1 = overlordResource.getTaskStatus(\"mytask\");\n    final TaskStatusResponse taskStatusResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskStatusResponse.class\n    );\n    TaskStatusPlus tsp = taskStatusResponse1.getStatus();\n    Assert.assertEquals(tsp.getStatusCode(), tsp.getStatus());\n    Assert.assertEquals(\n        new TaskStatusResponse(\n            \"mytask\",\n            new TaskStatusPlus(\n                \"mytask\",\n                \"noop\",\n                DateTimes.of(\"2018-01-01\"),\n                DateTimes.EPOCH,\n                TaskState.RUNNING,\n                RunnerTaskState.RUNNING,\n                -1L,\n                TaskLocation.unknown(),\n                task.getDataSource(),\n                null\n            )\n        ),\n        taskStatusResponse1\n    );\n\n    final Response response2 = overlordResource.getTaskStatus(\"othertask\");\n    final TaskStatusResponse taskStatusResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskStatusResponse.class\n    );\n    Assert.assertEquals(new TaskStatusResponse(\"othertask\", null), taskStatusResponse2);\n  }\n","date":"2018-10-02 06:33:24","endLine":911,"groupId":"13073","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTaskStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/79/64c764069c84a5820296ab5d8dbcf6841bf168.src","preCode":"  public void testGetTaskStatus() throws Exception\n  {\n    expectAuthorizationTokenCheck();\n    final Task task = NoopTask.create(\"mytask\", 0);\n    final TaskStatus status = TaskStatus.running(\"mytask\");\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"mytask\"))\n            .andReturn(new TaskInfo<>(task.getId(), DateTimes.of(\"2018-01-01\"), status, task.getDataSource(), task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"othertask\"))\n            .andReturn(null);\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks())\n        .andReturn(ImmutableList.of());\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    final Response response1 = overlordResource.getTaskStatus(\"mytask\");\n    final TaskStatusResponse taskStatusResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskStatusResponse.class\n    );\n    Assert.assertEquals(\n        new TaskStatusResponse(\n            \"mytask\",\n            new TaskStatusPlus(\n                \"mytask\",\n                \"noop\",\n                DateTimes.of(\"2018-01-01\"),\n                DateTimes.EPOCH,\n                TaskState.RUNNING,\n                RunnerTaskState.RUNNING,\n                -1L,\n                TaskLocation.unknown(),\n                task.getDataSource(),\n                null\n            )\n        ),\n        taskStatusResponse1\n    );\n\n    final Response response2 = overlordResource.getTaskStatus(\"othertask\");\n    final TaskStatusResponse taskStatusResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskStatusResponse.class\n    );\n    Assert.assertEquals(new TaskStatusResponse(\"othertask\", null), taskStatusResponse2);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":862,"status":"M"}],"commitId":"42e5385e566a7bfb6e00c835b77eb7020d19d8ce","commitMessage":"@@@make 0.13 tasks API backwards compatible with 0.12  (#6333) (#6334)\n\n* Replace statusCode with status (#6333)\n\nAlso changed runnerStatusCode to runnerStatus to keep things consistent\n\n* Add unit test\n\n* Add status param to TaskStatusPlus\n\nRevert to statusCode and runnerStatusCode\n\n* Add additional status member to TaskStatusPlus\n\n* Change TaskResponseObject to match overlord's response object\n\n* Address PR comments\n\n* address comments\n\n* Add runtime exception after logging error\n\n* Remove (deprecated)status member variable from TaskStatusPlus\n\n* Minor change\n","date":"2018-10-02 06:33:24","modifiedFileCount":"11","status":"M","submitter":"Surekha"},{"authorTime":"2018-11-30 15:45:28","codes":[{"authorDate":"2018-11-30 15:45:28","commitOrder":3,"curCode":"  public void testGetTaskPayload() throws Exception\n  {\n    \r\n    \r\n    \r\n    \r\n    final NoopTask task = NoopTask.create(\"mydatasource\");\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"mytask\"))\n            .andReturn(Optional.of(task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"othertask\"))\n            .andReturn(Optional.absent());\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    final Response response1 = overlordResource.getTaskPayload(\"mytask\");\n    final TaskPayloadResponse taskPayloadResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"mytask\", task), taskPayloadResponse1);\n\n    final Response response2 = overlordResource.getTaskPayload(\"othertask\");\n    final TaskPayloadResponse taskPayloadResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"othertask\", null), taskPayloadResponse2);\n  }\n","date":"2018-11-30 15:45:28","endLine":862,"groupId":"16601","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetTaskPayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/52/955f09c2593b4a3f46c78f1b3900d4d6e3e2f2.src","preCode":"  public void testGetTaskPayload() throws Exception\n  {\n    expectAuthorizationTokenCheck();\n    final NoopTask task = NoopTask.create(\"mydatasource\");\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"mytask\"))\n            .andReturn(Optional.of(task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"othertask\"))\n            .andReturn(Optional.absent());\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    final Response response1 = overlordResource.getTaskPayload(\"mytask\");\n    final TaskPayloadResponse taskPayloadResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"mytask\", task), taskPayloadResponse1);\n\n    final Response response2 = overlordResource.getTaskPayload(\"othertask\");\n    final TaskPayloadResponse taskPayloadResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"othertask\", null), taskPayloadResponse2);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":834,"status":"M"},{"authorDate":"2018-11-30 15:45:28","commitOrder":3,"curCode":"  public void testGetTaskStatus() throws Exception\n  {\n    \r\n    \r\n    \r\n    \r\n    final Task task = NoopTask.create(\"mytask\", 0);\n    final TaskStatus status = TaskStatus.running(\"mytask\");\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"mytask\"))\n            .andReturn(new TaskInfo<>(task.getId(), DateTimes.of(\"2018-01-01\"), status, task.getDataSource(), task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"othertask\"))\n            .andReturn(null);\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks())\n        .andReturn(ImmutableList.of());\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    final Response response1 = overlordResource.getTaskStatus(\"mytask\");\n    final TaskStatusResponse taskStatusResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskStatusResponse.class\n    );\n    TaskStatusPlus tsp = taskStatusResponse1.getStatus();\n    Assert.assertEquals(tsp.getStatusCode(), tsp.getStatus());\n    Assert.assertEquals(\n        new TaskStatusResponse(\n            \"mytask\",\n            new TaskStatusPlus(\n                \"mytask\",\n                \"noop\",\n                DateTimes.of(\"2018-01-01\"),\n                DateTimes.EPOCH,\n                TaskState.RUNNING,\n                RunnerTaskState.RUNNING,\n                -1L,\n                TaskLocation.unknown(),\n                task.getDataSource(),\n                null\n            )\n        ),\n        taskStatusResponse1\n    );\n\n    final Response response2 = overlordResource.getTaskStatus(\"othertask\");\n    final TaskStatusResponse taskStatusResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskStatusResponse.class\n    );\n    Assert.assertEquals(new TaskStatusResponse(\"othertask\", null), taskStatusResponse2);\n  }\n","date":"2018-11-30 15:45:28","endLine":917,"groupId":"13073","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTaskStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/52/955f09c2593b4a3f46c78f1b3900d4d6e3e2f2.src","preCode":"  public void testGetTaskStatus() throws Exception\n  {\n    expectAuthorizationTokenCheck();\n    final Task task = NoopTask.create(\"mytask\", 0);\n    final TaskStatus status = TaskStatus.running(\"mytask\");\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"mytask\"))\n            .andReturn(new TaskInfo<>(task.getId(), DateTimes.of(\"2018-01-01\"), status, task.getDataSource(), task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"othertask\"))\n            .andReturn(null);\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks())\n        .andReturn(ImmutableList.of());\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    final Response response1 = overlordResource.getTaskStatus(\"mytask\");\n    final TaskStatusResponse taskStatusResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskStatusResponse.class\n    );\n    TaskStatusPlus tsp = taskStatusResponse1.getStatus();\n    Assert.assertEquals(tsp.getStatusCode(), tsp.getStatus());\n    Assert.assertEquals(\n        new TaskStatusResponse(\n            \"mytask\",\n            new TaskStatusPlus(\n                \"mytask\",\n                \"noop\",\n                DateTimes.of(\"2018-01-01\"),\n                DateTimes.EPOCH,\n                TaskState.RUNNING,\n                RunnerTaskState.RUNNING,\n                -1L,\n                TaskLocation.unknown(),\n                task.getDataSource(),\n                null\n            )\n        ),\n        taskStatusResponse1\n    );\n\n    final Response response2 = overlordResource.getTaskStatus(\"othertask\");\n    final TaskStatusResponse taskStatusResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskStatusResponse.class\n    );\n    Assert.assertEquals(new TaskStatusResponse(\"othertask\", null), taskStatusResponse2);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":865,"status":"M"}],"commitId":"d6539abd0a2d56d2160a3da43fe70738f825855b","commitMessage":"@@@Fix overlord api and console (#6686)\n\n* Fix overlord APIs and console\n\n* remove getRunningTasksByDataSource\n\n* add missing path to isApplicable\n","date":"2018-11-30 15:45:28","modifiedFileCount":"3","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-05-24 07:47:23","codes":[{"authorDate":"2019-05-24 07:47:23","commitOrder":4,"curCode":"  public void testGetTaskPayload() throws Exception\n  {\n    \r\n    \r\n    \r\n    \r\n    final NoopTask task = NoopTask.create(\"mydatasource\");\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"mytask\"))\n            .andReturn(Optional.of(task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"othertask\"))\n            .andReturn(Optional.absent());\n\n    EasyMock.replay(\n        taskRunner,\n        taskMaster,\n        taskStorageQueryAdapter,\n        indexerMetadataStorageAdapter,\n        req,\n        workerTaskRunnerQueryAdapter\n    );\n\n    final Response response1 = overlordResource.getTaskPayload(\"mytask\");\n    final TaskPayloadResponse taskPayloadResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"mytask\", task), taskPayloadResponse1);\n\n    final Response response2 = overlordResource.getTaskPayload(\"othertask\");\n    final TaskPayloadResponse taskPayloadResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"othertask\", null), taskPayloadResponse2);\n  }\n","date":"2019-05-24 07:47:23","endLine":990,"groupId":"23298","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetTaskPayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3a/58c0cf62785d8da71419c5f5a56e9f222a996b.src","preCode":"  public void testGetTaskPayload() throws Exception\n  {\n    \r\n    \r\n    \r\n    \r\n    final NoopTask task = NoopTask.create(\"mydatasource\");\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"mytask\"))\n            .andReturn(Optional.of(task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"othertask\"))\n            .andReturn(Optional.absent());\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    final Response response1 = overlordResource.getTaskPayload(\"mytask\");\n    final TaskPayloadResponse taskPayloadResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"mytask\", task), taskPayloadResponse1);\n\n    final Response response2 = overlordResource.getTaskPayload(\"othertask\");\n    final TaskPayloadResponse taskPayloadResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"othertask\", null), taskPayloadResponse2);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":955,"status":"M"},{"authorDate":"2019-05-24 07:47:23","commitOrder":4,"curCode":"  public void testGetTaskStatus() throws Exception\n  {\n    \r\n    \r\n    \r\n    \r\n    final Task task = NoopTask.create(\"mytask\", 0);\n    final TaskStatus status = TaskStatus.running(\"mytask\");\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"mytask\"))\n            .andReturn(new TaskInfo<>(task.getId(), DateTimes.of(\"2018-01-01\"), status, task.getDataSource(), task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"othertask\"))\n            .andReturn(null);\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks())\n        .andReturn(ImmutableList.of());\n\n    EasyMock.replay(\n        taskRunner,\n        taskMaster,\n        taskStorageQueryAdapter,\n        indexerMetadataStorageAdapter,\n        req,\n        workerTaskRunnerQueryAdapter\n    );\n\n    final Response response1 = overlordResource.getTaskStatus(\"mytask\");\n    final TaskStatusResponse taskStatusResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskStatusResponse.class\n    );\n    TaskStatusPlus tsp = taskStatusResponse1.getStatus();\n    Assert.assertEquals(tsp.getStatusCode(), tsp.getStatus());\n    Assert.assertEquals(\n        new TaskStatusResponse(\n            \"mytask\",\n            new TaskStatusPlus(\n                \"mytask\",\n                \"noop\",\n                DateTimes.of(\"2018-01-01\"),\n                DateTimes.EPOCH,\n                TaskState.RUNNING,\n                RunnerTaskState.RUNNING,\n                -1L,\n                TaskLocation.unknown(),\n                task.getDataSource(),\n                null\n            )\n        ),\n        taskStatusResponse1\n    );\n\n    final Response response2 = overlordResource.getTaskStatus(\"othertask\");\n    final TaskStatusResponse taskStatusResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskStatusResponse.class\n    );\n    Assert.assertEquals(new TaskStatusResponse(\"othertask\", null), taskStatusResponse2);\n  }\n","date":"2019-05-24 07:47:23","endLine":1052,"groupId":"17027","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTaskStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3a/58c0cf62785d8da71419c5f5a56e9f222a996b.src","preCode":"  public void testGetTaskStatus() throws Exception\n  {\n    \r\n    \r\n    \r\n    \r\n    final Task task = NoopTask.create(\"mytask\", 0);\n    final TaskStatus status = TaskStatus.running(\"mytask\");\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"mytask\"))\n            .andReturn(new TaskInfo<>(task.getId(), DateTimes.of(\"2018-01-01\"), status, task.getDataSource(), task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"othertask\"))\n            .andReturn(null);\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks())\n        .andReturn(ImmutableList.of());\n\n    EasyMock.replay(taskRunner, taskMaster, taskStorageQueryAdapter, indexerMetadataStorageAdapter, req);\n\n    final Response response1 = overlordResource.getTaskStatus(\"mytask\");\n    final TaskStatusResponse taskStatusResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskStatusResponse.class\n    );\n    TaskStatusPlus tsp = taskStatusResponse1.getStatus();\n    Assert.assertEquals(tsp.getStatusCode(), tsp.getStatus());\n    Assert.assertEquals(\n        new TaskStatusResponse(\n            \"mytask\",\n            new TaskStatusPlus(\n                \"mytask\",\n                \"noop\",\n                DateTimes.of(\"2018-01-01\"),\n                DateTimes.EPOCH,\n                TaskState.RUNNING,\n                RunnerTaskState.RUNNING,\n                -1L,\n                TaskLocation.unknown(),\n                task.getDataSource(),\n                null\n            )\n        ),\n        taskStatusResponse1\n    );\n\n    final Response response2 = overlordResource.getTaskStatus(\"othertask\");\n    final TaskStatusResponse taskStatusResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskStatusResponse.class\n    );\n    Assert.assertEquals(new TaskStatusResponse(\"othertask\", null), taskStatusResponse2);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":993,"status":"M"}],"commitId":"cbdac49ab393c68f8f17d6cdcc604897d8843f37","commitMessage":"@@@Web console - add enable/disable actions for middle manager workers (#7642)\n\n* Overlord console - add enable/disable button for remote workers.\n\n* Overlord console - add proxy for remote workers API.\n\n* WorkerResourceTest - revert newline change.\n\n* Remote worker proxy tests - remove empty line.\n\n* Refactor remote worker proxy for readability and security\n\n* Rename method in remote task runner tests for readability\n\n* Remove enable/disable button for remote workers from old web console\n\n* Add enable/disable actions for middle manager worker in new web console\n\n* Fix variable type\n\n* Add worker task runner query adapter\n\n* Fix web console tests: segments-view.  servers-view\n\n* Fix overlord resource tests\n","date":"2019-05-24 07:47:23","modifiedFileCount":"4","status":"M","submitter":"Bartosz ?ugowski"},{"authorTime":"2019-08-23 06:28:23","codes":[{"authorDate":"2019-05-24 07:47:23","commitOrder":5,"curCode":"  public void testGetTaskPayload() throws Exception\n  {\n    \r\n    \r\n    \r\n    \r\n    final NoopTask task = NoopTask.create(\"mydatasource\");\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"mytask\"))\n            .andReturn(Optional.of(task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"othertask\"))\n            .andReturn(Optional.absent());\n\n    EasyMock.replay(\n        taskRunner,\n        taskMaster,\n        taskStorageQueryAdapter,\n        indexerMetadataStorageAdapter,\n        req,\n        workerTaskRunnerQueryAdapter\n    );\n\n    final Response response1 = overlordResource.getTaskPayload(\"mytask\");\n    final TaskPayloadResponse taskPayloadResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"mytask\", task), taskPayloadResponse1);\n\n    final Response response2 = overlordResource.getTaskPayload(\"othertask\");\n    final TaskPayloadResponse taskPayloadResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"othertask\", null), taskPayloadResponse2);\n  }\n","date":"2019-05-24 07:47:23","endLine":990,"groupId":"104206","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetTaskPayload","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3a/58c0cf62785d8da71419c5f5a56e9f222a996b.src","preCode":"  public void testGetTaskPayload() throws Exception\n  {\n    \r\n    \r\n    \r\n    \r\n    final NoopTask task = NoopTask.create(\"mydatasource\");\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"mytask\"))\n            .andReturn(Optional.of(task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTask(\"othertask\"))\n            .andReturn(Optional.absent());\n\n    EasyMock.replay(\n        taskRunner,\n        taskMaster,\n        taskStorageQueryAdapter,\n        indexerMetadataStorageAdapter,\n        req,\n        workerTaskRunnerQueryAdapter\n    );\n\n    final Response response1 = overlordResource.getTaskPayload(\"mytask\");\n    final TaskPayloadResponse taskPayloadResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"mytask\", task), taskPayloadResponse1);\n\n    final Response response2 = overlordResource.getTaskPayload(\"othertask\");\n    final TaskPayloadResponse taskPayloadResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskPayloadResponse.class\n    );\n    Assert.assertEquals(new TaskPayloadResponse(\"othertask\", null), taskPayloadResponse2);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":955,"status":"N"},{"authorDate":"2019-08-23 06:28:23","commitOrder":5,"curCode":"  public void testGetTaskStatus() throws Exception\n  {\n    \r\n    \r\n    \r\n    \r\n    final Task task = NoopTask.create(\"mytask\", 0);\n    final TaskStatus status = TaskStatus.running(\"mytask\");\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"mytask\"))\n            .andReturn(new TaskInfo(\n                task.getId(),\n                DateTimes.of(\"2018-01-01\"),\n                status,\n                task.getDataSource(),\n                task\n            ));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"othertask\"))\n            .andReturn(null);\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks())\n        .andReturn(ImmutableList.of());\n\n    EasyMock.replay(\n        taskRunner,\n        taskMaster,\n        taskStorageQueryAdapter,\n        indexerMetadataStorageAdapter,\n        req,\n        workerTaskRunnerQueryAdapter\n    );\n\n    final Response response1 = overlordResource.getTaskStatus(\"mytask\");\n    final TaskStatusResponse taskStatusResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskStatusResponse.class\n    );\n    TaskStatusPlus tsp = taskStatusResponse1.getStatus();\n    Assert.assertEquals(tsp.getStatusCode(), tsp.getStatus());\n    Assert.assertEquals(\n        new TaskStatusResponse(\n            \"mytask\",\n            new TaskStatusPlus(\n                \"mytask\",\n                \"mytask\",\n                \"noop\",\n                DateTimes.of(\"2018-01-01\"),\n                DateTimes.EPOCH,\n                TaskState.RUNNING,\n                RunnerTaskState.RUNNING,\n                -1L,\n                TaskLocation.unknown(),\n                task.getDataSource(),\n                null\n            )\n        ),\n        taskStatusResponse1\n    );\n\n    final Response response2 = overlordResource.getTaskStatus(\"othertask\");\n    final TaskStatusResponse taskStatusResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskStatusResponse.class\n    );\n    Assert.assertEquals(new TaskStatusResponse(\"othertask\", null), taskStatusResponse2);\n  }\n","date":"2019-08-23 06:28:23","endLine":1060,"groupId":"104206","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetTaskStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a2/971cecb88833a57926f90ad51a71c9829a554f.src","preCode":"  public void testGetTaskStatus() throws Exception\n  {\n    \r\n    \r\n    \r\n    \r\n    final Task task = NoopTask.create(\"mytask\", 0);\n    final TaskStatus status = TaskStatus.running(\"mytask\");\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"mytask\"))\n            .andReturn(new TaskInfo<>(task.getId(), DateTimes.of(\"2018-01-01\"), status, task.getDataSource(), task));\n\n    EasyMock.expect(taskStorageQueryAdapter.getTaskInfo(\"othertask\"))\n            .andReturn(null);\n\n    EasyMock.<Collection<? extends TaskRunnerWorkItem>>expect(taskRunner.getKnownTasks())\n        .andReturn(ImmutableList.of());\n\n    EasyMock.replay(\n        taskRunner,\n        taskMaster,\n        taskStorageQueryAdapter,\n        indexerMetadataStorageAdapter,\n        req,\n        workerTaskRunnerQueryAdapter\n    );\n\n    final Response response1 = overlordResource.getTaskStatus(\"mytask\");\n    final TaskStatusResponse taskStatusResponse1 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response1.getEntity()),\n        TaskStatusResponse.class\n    );\n    TaskStatusPlus tsp = taskStatusResponse1.getStatus();\n    Assert.assertEquals(tsp.getStatusCode(), tsp.getStatus());\n    Assert.assertEquals(\n        new TaskStatusResponse(\n            \"mytask\",\n            new TaskStatusPlus(\n                \"mytask\",\n                \"noop\",\n                DateTimes.of(\"2018-01-01\"),\n                DateTimes.EPOCH,\n                TaskState.RUNNING,\n                RunnerTaskState.RUNNING,\n                -1L,\n                TaskLocation.unknown(),\n                task.getDataSource(),\n                null\n            )\n        ),\n        taskStatusResponse1\n    );\n\n    final Response response2 = overlordResource.getTaskStatus(\"othertask\");\n    final TaskStatusResponse taskStatusResponse2 = TestHelper.makeJsonMapper().readValue(\n        TestHelper.makeJsonMapper().writeValueAsString(response2.getEntity()),\n        TaskStatusResponse.class\n    );\n    Assert.assertEquals(new TaskStatusResponse(\"othertask\", null), taskStatusResponse2);\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/http/OverlordResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":994,"status":"M"}],"commitId":"cf2a2dd9174e975e180b18b5d4fc522a37ee4af5","commitMessage":"@@@Add group_id to the sys.tasks table (#8304)\n\n* Add group_id to overlord tasks API and sys.tasks table\n\n* adjust test\n\n* modify docs\n\n* Make groupId nullable\n\n* fix integration test\n\n* fix toString\n\n* Remove groupId from TaskInfo\n\n* Modify docs and tests\n\n* modify TaskMonitorTest\n","date":"2019-08-23 06:28:23","modifiedFileCount":"11","status":"M","submitter":"Surekha"}]
