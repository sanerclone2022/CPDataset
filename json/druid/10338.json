[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = Lists.newArrayList();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n      Map<String, DataSegment> segments = Maps.newHashMap();\n      for (int j = 0; j < maxSegments; j++) {\n        DataSegment segment = getSegment(j);\n        segments.put(segment.getIdentifier(), segment);\n      }\n\n      serverHolderList.add(\n          new ServerHolder(\n              new ImmutableDruidServer(\n                  new DruidServerMetadata(\"DruidServer_Name_\" + i, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n                  3000L,\n                  ImmutableMap.of(\"DUMMY\", EasyMock.createMock(ImmutableDruidDataSource.class)),\n                  ImmutableMap.copyOf(segments)\n              ),\n              fromPeon\n          ));\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    Map<String, DataSegment> segments = Maps.newHashMap();\n    for (int j = 0; j < (maxSegments - 2); j++) {\n      DataSegment segment = getSegment(j);\n      segments.put(segment.getIdentifier(), segment);\n      EasyMock.expect(druidServer.getSegment(segment.getIdentifier())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","date":"2018-08-31 00:56:26","endLine":96,"groupId":"12603","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupDummyCluster","params":"(intserverCount@intmaxSegments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8e/26a959a918d8464f0ed185917e118fd0d73c35.src","preCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = Lists.newArrayList();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n      Map<String, DataSegment> segments = Maps.newHashMap();\n      for (int j = 0; j < maxSegments; j++) {\n        DataSegment segment = getSegment(j);\n        segments.put(segment.getIdentifier(), segment);\n      }\n\n      serverHolderList.add(\n          new ServerHolder(\n              new ImmutableDruidServer(\n                  new DruidServerMetadata(\"DruidServer_Name_\" + i, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n                  3000L,\n                  ImmutableMap.of(\"DUMMY\", EasyMock.createMock(ImmutableDruidDataSource.class)),\n                  ImmutableMap.copyOf(segments)\n              ),\n              fromPeon\n          ));\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    Map<String, DataSegment> segments = Maps.newHashMap();\n    for (int j = 0; j < (maxSegments - 2); j++) {\n      DataSegment segment = getSegment(j);\n      segments.put(segment.getIdentifier(), segment);\n      EasyMock.expect(druidServer.getSegment(segment.getIdentifier())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CostBalancerStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = Lists.newArrayList();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n      Map<String, DataSegment> segments = Maps.newHashMap();\n      for (int j = 0; j < maxSegments; j++) {\n        DataSegment segment = getSegment(j);\n        segments.put(segment.getIdentifier(), segment);\n      }\n\n      serverHolderList.add(\n          new ServerHolder(\n              new ImmutableDruidServer(\n                  new DruidServerMetadata(\"DruidServer_Name_\" + i, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n                  3000L,\n                  ImmutableMap.of(\"DUMMY\", EasyMock.createMock(ImmutableDruidDataSource.class)),\n                  ImmutableMap.copyOf(segments)\n              ),\n              fromPeon\n          ));\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(100000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    Map<String, DataSegment> segments = Maps.newHashMap();\n    for (int j = 0; j < maxSegments; j++) {\n      DataSegment segment = getSegment(j);\n      segments.put(segment.getIdentifier(), segment);\n      EasyMock.expect(druidServer.getSegment(segment.getIdentifier())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","date":"2018-08-31 00:56:26","endLine":94,"groupId":"12603","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setupDummyCluster","params":"(intserverCount@intmaxSegments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/88/fe93a88ed6bf01a49a6a5ce8d9633ec20f0608.src","preCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = Lists.newArrayList();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n      Map<String, DataSegment> segments = Maps.newHashMap();\n      for (int j = 0; j < maxSegments; j++) {\n        DataSegment segment = getSegment(j);\n        segments.put(segment.getIdentifier(), segment);\n      }\n\n      serverHolderList.add(\n          new ServerHolder(\n              new ImmutableDruidServer(\n                  new DruidServerMetadata(\"DruidServer_Name_\" + i, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n                  3000L,\n                  ImmutableMap.of(\"DUMMY\", EasyMock.createMock(ImmutableDruidDataSource.class)),\n                  ImmutableMap.copyOf(segments)\n              ),\n              fromPeon\n          ));\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(100000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    Map<String, DataSegment> segments = Maps.newHashMap();\n    for (int j = 0; j < maxSegments; j++) {\n      DataSegment segment = getSegment(j);\n      segments.put(segment.getIdentifier(), segment);\n      EasyMock.expect(druidServer.getSegment(segment.getIdentifier())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DiskNormalizedCostBalancerStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = new ArrayList<>();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n      Map<String, DataSegment> segments = new HashMap<>();\n      for (int j = 0; j < maxSegments; j++) {\n        DataSegment segment = getSegment(j);\n        segments.put(segment.getIdentifier(), segment);\n      }\n\n      serverHolderList.add(\n          new ServerHolder(\n              new ImmutableDruidServer(\n                  new DruidServerMetadata(\"DruidServer_Name_\" + i, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n                  3000L,\n                  ImmutableMap.of(\"DUMMY\", EasyMock.createMock(ImmutableDruidDataSource.class)),\n                  ImmutableMap.copyOf(segments)\n              ),\n              fromPeon\n          ));\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    Map<String, DataSegment> segments = new HashMap<>();\n    for (int j = 0; j < (maxSegments - 2); j++) {\n      DataSegment segment = getSegment(j);\n      segments.put(segment.getIdentifier(), segment);\n      EasyMock.expect(druidServer.getSegment(segment.getIdentifier())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","date":"2018-10-29 20:02:43","endLine":96,"groupId":"3448","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupDummyCluster","params":"(intserverCount@intmaxSegments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f4/e71cb9d110cfa83aa1876f08dee9b055eb4b80.src","preCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = Lists.newArrayList();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n      Map<String, DataSegment> segments = Maps.newHashMap();\n      for (int j = 0; j < maxSegments; j++) {\n        DataSegment segment = getSegment(j);\n        segments.put(segment.getIdentifier(), segment);\n      }\n\n      serverHolderList.add(\n          new ServerHolder(\n              new ImmutableDruidServer(\n                  new DruidServerMetadata(\"DruidServer_Name_\" + i, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n                  3000L,\n                  ImmutableMap.of(\"DUMMY\", EasyMock.createMock(ImmutableDruidDataSource.class)),\n                  ImmutableMap.copyOf(segments)\n              ),\n              fromPeon\n          ));\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    Map<String, DataSegment> segments = Maps.newHashMap();\n    for (int j = 0; j < (maxSegments - 2); j++) {\n      DataSegment segment = getSegment(j);\n      segments.put(segment.getIdentifier(), segment);\n      EasyMock.expect(druidServer.getSegment(segment.getIdentifier())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CostBalancerStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = new ArrayList<>();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n      Map<String, DataSegment> segments = new HashMap<>();\n      for (int j = 0; j < maxSegments; j++) {\n        DataSegment segment = getSegment(j);\n        segments.put(segment.getIdentifier(), segment);\n      }\n\n      serverHolderList.add(\n          new ServerHolder(\n              new ImmutableDruidServer(\n                  new DruidServerMetadata(\"DruidServer_Name_\" + i, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n                  3000L,\n                  ImmutableMap.of(\"DUMMY\", EasyMock.createMock(ImmutableDruidDataSource.class)),\n                  ImmutableMap.copyOf(segments)\n              ),\n              fromPeon\n          ));\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(100000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    Map<String, DataSegment> segments = new HashMap<>();\n    for (int j = 0; j < maxSegments; j++) {\n      DataSegment segment = getSegment(j);\n      segments.put(segment.getIdentifier(), segment);\n      EasyMock.expect(druidServer.getSegment(segment.getIdentifier())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","date":"2018-10-29 20:02:43","endLine":94,"groupId":"3448","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setupDummyCluster","params":"(intserverCount@intmaxSegments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/03/855374ec1e3cdea3e3d6cbe21d4c12783694f8.src","preCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = Lists.newArrayList();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n      Map<String, DataSegment> segments = Maps.newHashMap();\n      for (int j = 0; j < maxSegments; j++) {\n        DataSegment segment = getSegment(j);\n        segments.put(segment.getIdentifier(), segment);\n      }\n\n      serverHolderList.add(\n          new ServerHolder(\n              new ImmutableDruidServer(\n                  new DruidServerMetadata(\"DruidServer_Name_\" + i, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n                  3000L,\n                  ImmutableMap.of(\"DUMMY\", EasyMock.createMock(ImmutableDruidDataSource.class)),\n                  ImmutableMap.copyOf(segments)\n              ),\n              fromPeon\n          ));\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(100000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    Map<String, DataSegment> segments = Maps.newHashMap();\n    for (int j = 0; j < maxSegments; j++) {\n      DataSegment segment = getSegment(j);\n      segments.put(segment.getIdentifier(), segment);\n      EasyMock.expect(druidServer.getSegment(segment.getIdentifier())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DiskNormalizedCostBalancerStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":3,"curCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = new ArrayList<>();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n\n      List<DataSegment> segments = IntStream\n          .range(0, maxSegments)\n          .mapToObj(j -> getSegment(j))\n          .collect(Collectors.toList());\n      ImmutableDruidDataSource dataSource = new ImmutableDruidDataSource(\"DUMMY\", Collections.emptyMap(), segments);\n\n      String serverName = \"DruidServer_Name_\" + i;\n      ServerHolder serverHolder = new ServerHolder(\n          new ImmutableDruidServer(\n              new DruidServerMetadata(serverName, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n              3000L,\n              ImmutableMap.of(\"DUMMY\", dataSource),\n              segments.size()\n          ),\n          fromPeon\n      );\n      serverHolderList.add(serverHolder);\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    Map<SegmentId, DataSegment> segments = new HashMap<>();\n    for (int j = 0; j < (maxSegments - 2); j++) {\n      DataSegment segment = getSegment(j);\n      segments.put(segment.getId(), segment);\n      EasyMock.expect(druidServer.getSegment(segment.getId())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getSegments()).andReturn(segments.values()).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","date":"2019-01-22 03:11:10","endLine":102,"groupId":"8412","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setupDummyCluster","params":"(intserverCount@intmaxSegments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8a/5cf43efe6dd9469ab7420ce57068838f5409e9.src","preCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = new ArrayList<>();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n      Map<String, DataSegment> segments = new HashMap<>();\n      for (int j = 0; j < maxSegments; j++) {\n        DataSegment segment = getSegment(j);\n        segments.put(segment.getIdentifier(), segment);\n      }\n\n      serverHolderList.add(\n          new ServerHolder(\n              new ImmutableDruidServer(\n                  new DruidServerMetadata(\"DruidServer_Name_\" + i, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n                  3000L,\n                  ImmutableMap.of(\"DUMMY\", EasyMock.createMock(ImmutableDruidDataSource.class)),\n                  ImmutableMap.copyOf(segments)\n              ),\n              fromPeon\n          ));\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    Map<String, DataSegment> segments = new HashMap<>();\n    for (int j = 0; j < (maxSegments - 2); j++) {\n      DataSegment segment = getSegment(j);\n      segments.put(segment.getIdentifier(), segment);\n      EasyMock.expect(druidServer.getSegment(segment.getIdentifier())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CostBalancerStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":3,"curCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = new ArrayList<>();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n\n      List<DataSegment> segments = IntStream\n          .range(0, maxSegments)\n          .mapToObj(j -> getSegment(j))\n          .collect(Collectors.toList());\n      ImmutableDruidDataSource dataSource = new ImmutableDruidDataSource(\"DUMMY\", Collections.emptyMap(), segments);\n\n      serverHolderList.add(\n          new ServerHolder(\n              new ImmutableDruidServer(\n                  new DruidServerMetadata(\"DruidServer_Name_\" + i, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n                  3000L,\n                  ImmutableMap.of(\"DUMMY\", dataSource),\n                  segments.size()\n              ),\n              fromPeon\n          ));\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(100000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    List<DataSegment> segments = new ArrayList<>();\n    for (int j = 0; j < maxSegments; j++) {\n      DataSegment segment = getSegment(j);\n      segments.add(segment);\n      EasyMock.expect(druidServer.getSegment(segment.getId())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","date":"2019-01-22 03:11:10","endLine":96,"groupId":"17296","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setupDummyCluster","params":"(intserverCount@intmaxSegments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fc/2a17ce9d604d0a93105c6f67f3b4c1fea030d3.src","preCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = new ArrayList<>();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n      Map<String, DataSegment> segments = new HashMap<>();\n      for (int j = 0; j < maxSegments; j++) {\n        DataSegment segment = getSegment(j);\n        segments.put(segment.getIdentifier(), segment);\n      }\n\n      serverHolderList.add(\n          new ServerHolder(\n              new ImmutableDruidServer(\n                  new DruidServerMetadata(\"DruidServer_Name_\" + i, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n                  3000L,\n                  ImmutableMap.of(\"DUMMY\", EasyMock.createMock(ImmutableDruidDataSource.class)),\n                  ImmutableMap.copyOf(segments)\n              ),\n              fromPeon\n          ));\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(100000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    Map<String, DataSegment> segments = new HashMap<>();\n    for (int j = 0; j < maxSegments; j++) {\n      DataSegment segment = getSegment(j);\n      segments.put(segment.getIdentifier(), segment);\n      EasyMock.expect(druidServer.getSegment(segment.getIdentifier())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DiskNormalizedCostBalancerStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-03-20 05:22:56","codes":[{"authorDate":"2019-03-20 05:22:56","commitOrder":4,"curCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = new ArrayList<>();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n\n      List<DataSegment> segments = IntStream\n          .range(0, maxSegments)\n          .mapToObj(j -> getSegment(j))\n          .collect(Collectors.toList());\n      ImmutableDruidDataSource dataSource = new ImmutableDruidDataSource(\"DUMMY\", Collections.emptyMap(), segments);\n\n      String serverName = \"DruidServer_Name_\" + i;\n      ServerHolder serverHolder = new ServerHolder(\n          new ImmutableDruidServer(\n              new DruidServerMetadata(serverName, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n              3000L,\n              ImmutableMap.of(\"DUMMY\", dataSource),\n              segments.size()\n          ),\n          fromPeon\n      );\n      serverHolderList.add(serverHolder);\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    Map<SegmentId, DataSegment> segments = new HashMap<>();\n    for (int j = 0; j < (maxSegments - 2); j++) {\n      DataSegment segment = getSegment(j);\n      segments.put(segment.getId(), segment);\n      EasyMock.expect(druidServer.getSegment(segment.getId())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getLazyAllSegments()).andReturn(segments.values()).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","date":"2019-03-20 05:22:56","endLine":102,"groupId":"8412","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setupDummyCluster","params":"(intserverCount@intmaxSegments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e6/aa17ebd1cab4f8f5ee24c142cc1bfec83aca43.src","preCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = new ArrayList<>();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n\n      List<DataSegment> segments = IntStream\n          .range(0, maxSegments)\n          .mapToObj(j -> getSegment(j))\n          .collect(Collectors.toList());\n      ImmutableDruidDataSource dataSource = new ImmutableDruidDataSource(\"DUMMY\", Collections.emptyMap(), segments);\n\n      String serverName = \"DruidServer_Name_\" + i;\n      ServerHolder serverHolder = new ServerHolder(\n          new ImmutableDruidServer(\n              new DruidServerMetadata(serverName, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n              3000L,\n              ImmutableMap.of(\"DUMMY\", dataSource),\n              segments.size()\n          ),\n          fromPeon\n      );\n      serverHolderList.add(serverHolder);\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    Map<SegmentId, DataSegment> segments = new HashMap<>();\n    for (int j = 0; j < (maxSegments - 2); j++) {\n      DataSegment segment = getSegment(j);\n      segments.put(segment.getId(), segment);\n      EasyMock.expect(druidServer.getSegment(segment.getId())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getSegments()).andReturn(segments.values()).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CostBalancerStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2019-03-20 05:22:56","commitOrder":4,"curCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = new ArrayList<>();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n\n      List<DataSegment> segments = IntStream\n          .range(0, maxSegments)\n          .mapToObj(j -> getSegment(j))\n          .collect(Collectors.toList());\n      ImmutableDruidDataSource dataSource = new ImmutableDruidDataSource(\"DUMMY\", Collections.emptyMap(), segments);\n\n      serverHolderList.add(\n          new ServerHolder(\n              new ImmutableDruidServer(\n                  new DruidServerMetadata(\"DruidServer_Name_\" + i, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n                  3000L,\n                  ImmutableMap.of(\"DUMMY\", dataSource),\n                  segments.size()\n              ),\n              fromPeon\n          ));\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(100000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    List<DataSegment> segments = new ArrayList<>();\n    for (int j = 0; j < maxSegments; j++) {\n      DataSegment segment = getSegment(j);\n      segments.add(segment);\n      EasyMock.expect(druidServer.getSegment(segment.getId())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getLazyAllSegments()).andReturn(segments).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","date":"2019-03-20 05:22:56","endLine":96,"groupId":"17296","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setupDummyCluster","params":"(intserverCount@intmaxSegments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0b/be46d9b85b6066e6a33ce9f01d022c2b0052c0.src","preCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = new ArrayList<>();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n\n      List<DataSegment> segments = IntStream\n          .range(0, maxSegments)\n          .mapToObj(j -> getSegment(j))\n          .collect(Collectors.toList());\n      ImmutableDruidDataSource dataSource = new ImmutableDruidDataSource(\"DUMMY\", Collections.emptyMap(), segments);\n\n      serverHolderList.add(\n          new ServerHolder(\n              new ImmutableDruidServer(\n                  new DruidServerMetadata(\"DruidServer_Name_\" + i, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n                  3000L,\n                  ImmutableMap.of(\"DUMMY\", dataSource),\n                  segments.size()\n              ),\n              fromPeon\n          ));\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(100000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    List<DataSegment> segments = new ArrayList<>();\n    for (int j = 0; j < maxSegments; j++) {\n      DataSegment segment = getSegment(j);\n      segments.add(segment);\n      EasyMock.expect(druidServer.getSegment(segment.getId())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DiskNormalizedCostBalancerStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"dfd27e00c0559e89a77ad8abbae03eeb382c2d09","commitMessage":"@@@Avoid many unnecessary materializations of collections of 'all segments in cluster' cardinality (#7185)\n\n* Avoid many  unnecessary materializations of collections of 'all segments in cluster' cardinality\n\n* Fix DruidCoordinatorTest; Renamed DruidCoordinator.getReplicationStatus() to computeUnderReplicationCountsPerDataSourcePerTier()\n\n* More Javadocs.  typos.  refactor DruidCoordinatorRuntimeParams.createAvailableSegmentsSet()\n\n* Style\n\n* typo\n\n* Disable StaticPseudoFunctionalStyleMethod inspection because of too much false positives\n\n* Fixes\n","date":"2019-03-20 05:22:56","modifiedFileCount":"45","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-07-17 22:18:48","codes":[{"authorDate":"2019-07-17 22:18:48","commitOrder":5,"curCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = new ArrayList<>();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n\n      List<DataSegment> segments = IntStream\n          .range(0, maxSegments)\n          .mapToObj(j -> getSegment(j))\n          .collect(Collectors.toList());\n      ImmutableDruidDataSource dataSource = new ImmutableDruidDataSource(\"DUMMY\", Collections.emptyMap(), segments);\n\n      String serverName = \"DruidServer_Name_\" + i;\n      ServerHolder serverHolder = new ServerHolder(\n          new ImmutableDruidServer(\n              new DruidServerMetadata(serverName, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n              3000L,\n              ImmutableMap.of(\"DUMMY\", dataSource),\n              segments.size()\n          ),\n          fromPeon\n      );\n      serverHolderList.add(serverHolder);\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    Map<SegmentId, DataSegment> segments = new HashMap<>();\n    for (int j = 0; j < (maxSegments - 2); j++) {\n      DataSegment segment = getSegment(j);\n      segments.put(segment.getId(), segment);\n      EasyMock.expect(druidServer.getSegment(segment.getId())).andReturn(segment).anyTimes();\n    }\n    ImmutableDruidServerTests.expectSegments(druidServer, segments.values());\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","date":"2019-07-17 22:18:48","endLine":103,"groupId":"10338","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setupDummyCluster","params":"(intserverCount@intmaxSegments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/30/74fb2c0fe1e3ecf903f7145f99e2a60282ada4.src","preCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = new ArrayList<>();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n\n      List<DataSegment> segments = IntStream\n          .range(0, maxSegments)\n          .mapToObj(j -> getSegment(j))\n          .collect(Collectors.toList());\n      ImmutableDruidDataSource dataSource = new ImmutableDruidDataSource(\"DUMMY\", Collections.emptyMap(), segments);\n\n      String serverName = \"DruidServer_Name_\" + i;\n      ServerHolder serverHolder = new ServerHolder(\n          new ImmutableDruidServer(\n              new DruidServerMetadata(serverName, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n              3000L,\n              ImmutableMap.of(\"DUMMY\", dataSource),\n              segments.size()\n          ),\n          fromPeon\n      );\n      serverHolderList.add(serverHolder);\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    Map<SegmentId, DataSegment> segments = new HashMap<>();\n    for (int j = 0; j < (maxSegments - 2); j++) {\n      DataSegment segment = getSegment(j);\n      segments.put(segment.getId(), segment);\n      EasyMock.expect(druidServer.getSegment(segment.getId())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getLazyAllSegments()).andReturn(segments.values()).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/CostBalancerStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2019-07-17 22:18:48","commitOrder":5,"curCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = new ArrayList<>();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n\n      List<DataSegment> segments = IntStream\n          .range(0, maxSegments)\n          .mapToObj(j -> getSegment(j))\n          .collect(Collectors.toList());\n      ImmutableDruidDataSource dataSource = new ImmutableDruidDataSource(\"DUMMY\", Collections.emptyMap(), segments);\n\n      serverHolderList.add(\n          new ServerHolder(\n              new ImmutableDruidServer(\n                  new DruidServerMetadata(\"DruidServer_Name_\" + i, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n                  3000L,\n                  ImmutableMap.of(\"DUMMY\", dataSource),\n                  segments.size()\n              ),\n              fromPeon\n          ));\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(100000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    List<DataSegment> segments = new ArrayList<>();\n    for (int j = 0; j < maxSegments; j++) {\n      DataSegment segment = getSegment(j);\n      segments.add(segment);\n      EasyMock.expect(druidServer.getSegment(segment.getId())).andReturn(segment).anyTimes();\n    }\n    ImmutableDruidServerTests.expectSegments(druidServer, segments);\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","date":"2019-07-17 22:18:48","endLine":97,"groupId":"10338","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setupDummyCluster","params":"(intserverCount@intmaxSegments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bd/2aa6eaf14adcc64102c03be67ea214d280af8b.src","preCode":"  public static List<ServerHolder> setupDummyCluster(int serverCount, int maxSegments)\n  {\n    List<ServerHolder> serverHolderList = new ArrayList<>();\n    \r\n    \r\n    for (int i = 0; i < serverCount; i++) {\n      LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n\n      List<DataSegment> segments = IntStream\n          .range(0, maxSegments)\n          .mapToObj(j -> getSegment(j))\n          .collect(Collectors.toList());\n      ImmutableDruidDataSource dataSource = new ImmutableDruidDataSource(\"DUMMY\", Collections.emptyMap(), segments);\n\n      serverHolderList.add(\n          new ServerHolder(\n              new ImmutableDruidServer(\n                  new DruidServerMetadata(\"DruidServer_Name_\" + i, \"localhost\", null, 10000000L, ServerType.HISTORICAL, \"hot\", 1),\n                  3000L,\n                  ImmutableMap.of(\"DUMMY\", dataSource),\n                  segments.size()\n              ),\n              fromPeon\n          ));\n    }\n\n    \r\n    LoadQueuePeonTester fromPeon = new LoadQueuePeonTester();\n    ImmutableDruidServer druidServer = EasyMock.createMock(ImmutableDruidServer.class);\n    EasyMock.expect(druidServer.getName()).andReturn(\"BEST_SERVER\").anyTimes();\n    EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();\n    EasyMock.expect(druidServer.getMaxSize()).andReturn(100000000L).anyTimes();\n\n    EasyMock.expect(druidServer.getSegment(EasyMock.anyObject())).andReturn(null).anyTimes();\n    List<DataSegment> segments = new ArrayList<>();\n    for (int j = 0; j < maxSegments; j++) {\n      DataSegment segment = getSegment(j);\n      segments.add(segment);\n      EasyMock.expect(druidServer.getSegment(segment.getId())).andReturn(segment).anyTimes();\n    }\n    EasyMock.expect(druidServer.getLazyAllSegments()).andReturn(segments).anyTimes();\n\n    EasyMock.replay(druidServer);\n    serverHolderList.add(new ServerHolder(druidServer, fromPeon));\n    return serverHolderList;\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DiskNormalizedCostBalancerStrategyTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"ceb969903f06a72d669bb55ab83223bddb5355ee","commitMessage":"@@@Refactor SQLMetadataSegmentManager; Change contract of REST met? (#7653)\n\n* Refactor SQLMetadataSegmentManager; Change contract of REST methods in DataSourcesResource\n\n* Style fixes\n\n* Unused imports\n\n* Fix tests\n\n* Fix style\n\n* Comments\n\n* Comment fix\n\n* Remove unresolvable Javadoc references; address comments\n\n* Add comments to ImmutableDruidDataSource\n\n* Merge with master\n\n* Fix bad web-console merge\n\n* Fixes in api-reference.md\n\n* Rename in DruidCoordinatorRuntimeParams\n\n* Fix compilation\n\n* Residual changes\n","date":"2019-07-17 22:18:48","modifiedFileCount":"77","status":"M","submitter":"Roman Leventov"}]
