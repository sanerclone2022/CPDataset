[{"authorTime":"2019-08-06 03:01:42","codes":[{"authorDate":"2019-08-06 03:01:42","commitOrder":1,"curCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[] {\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2019-08-06 03:01:42","endLine":211,"groupId":"1570","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testComputingSketchOnNumericValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ab/575c3b183eefd37924a7512157719d84418bbf.src","preCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[] {\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-contrib/tdigestsketch/src/test/java/org/apache/druid/query/aggregation/tdigestsketch/sql/TDigestSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"B"},{"authorDate":"2019-08-06 03:01:42","commitOrder":1,"curCode":"  public void testDefaultCompressionForTDigestGenerateSketchAgg() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1)\"\n                       + \"FROM foo\";\n\n    \r\n    sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", TDigestSketchAggregatorFactory.DEFAULT_COMPRESSION)\n              ))\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2019-08-06 03:01:42","endLine":237,"groupId":"1572","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultCompressionForTDigestGenerateSketchAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ab/575c3b183eefd37924a7512157719d84418bbf.src","preCode":"  public void testDefaultCompressionForTDigestGenerateSketchAgg() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1)\"\n                       + \"FROM foo\";\n\n    \r\n    sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", TDigestSketchAggregatorFactory.DEFAULT_COMPRESSION)\n              ))\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-contrib/tdigestsketch/src/test/java/org/apache/druid/query/aggregation/tdigestsketch/sql/TDigestSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"B"}],"commitId":"93cf9d4ad4d7aa092d2bc6c7d53a645f1e33c047","commitMessage":"@@@SQL support for t-digest based sketch aggregators (#8100)\n\n* SQL support for t-digest based sketch aggregators\n\n* Fix teamcity errors\n\n* Add missing dependencies\n\n* Remove unused dependency\n\n* Address code review comments\n\n* Add checks for compression param\n","date":"2019-08-06 03:01:42","modifiedFileCount":"8","status":"B","submitter":"Samarth Jain"},{"authorTime":"2020-02-20 05:09:20","codes":[{"authorDate":"2020-02-20 05:09:20","commitOrder":2,"curCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[] {\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2020-02-20 05:09:20","endLine":216,"groupId":"1570","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testComputingSketchOnNumericValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a7/4c3e7b275f17b5d76f043f0e80e8b1825eba3e.src","preCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[] {\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-contrib/tdigestsketch/src/test/java/org/apache/druid/query/aggregation/tdigestsketch/sql/TDigestSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2020-02-20 05:09:20","commitOrder":2,"curCode":"  public void testDefaultCompressionForTDigestGenerateSketchAgg() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1)\"\n                       + \"FROM foo\";\n\n    \r\n    sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", TDigestSketchAggregatorFactory.DEFAULT_COMPRESSION)\n              ))\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2020-02-20 05:09:20","endLine":247,"groupId":"1572","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultCompressionForTDigestGenerateSketchAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a7/4c3e7b275f17b5d76f043f0e80e8b1825eba3e.src","preCode":"  public void testDefaultCompressionForTDigestGenerateSketchAgg() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1)\"\n                       + \"FROM foo\";\n\n    \r\n    sqlLifecycle.runSimple(sql, QUERY_CONTEXT_DEFAULT, authenticationResult).toList();\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", TDigestSketchAggregatorFactory.DEFAULT_COMPRESSION)\n              ))\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-contrib/tdigestsketch/src/test/java/org/apache/druid/query/aggregation/tdigestsketch/sql/TDigestSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"b408a6d774e43e574bf8092584fae76d582cfd8f","commitMessage":"@@@sql support for dynamic parameters (#6974)\n\n* sql support for dynamic parameters\n\n* fixup\n\n* javadocs\n\n* fixup from merge\n\n* formatting\n\n* fixes\n\n* fix it\n\n* doc fix\n\n* remove druid fallback self-join parameterized test\n\n* unused imports\n\n* ignore test for now\n\n* fix imports\n\n* fixup\n\n* fix merge\n\n* merge fixup\n\n* fix test that cannot vectorize\n\n* fixup and more better\n\n* dependency thingo\n\n* fix docs\n\n* tweaks\n\n* fix docs\n\n* spelling\n\n* unused imports after merge\n\n* review stuffs\n\n* add comment\n\n* add ignore text\n\n* review stuffs\n","date":"2020-02-20 05:09:20","modifiedFileCount":"32","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-04-13 13:21:24","codes":[{"authorDate":"2021-04-13 13:21:24","commitOrder":3,"curCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        TIMESERIES_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[]{\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(TIMESERIES_CONTEXT_DEFAULT)\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2021-04-13 13:21:24","endLine":186,"groupId":"1570","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testComputingSketchOnNumericValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ec/17e7ecbed42ba44d33c2a8ec14369d92ca1e6e.src","preCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[]{\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-contrib/tdigestsketch/src/test/java/org/apache/druid/query/aggregation/tdigestsketch/sql/TDigestSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2021-04-13 13:21:24","commitOrder":3,"curCode":"  public void testDefaultCompressionForTDigestGenerateSketchAgg() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1)\"\n                       + \"FROM foo\";\n\n    \r\n    sqlLifecycle.runSimple(\n        sql,\n        TIMESERIES_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", TDigestSketchAggregatorFactory.DEFAULT_COMPRESSION)\n              ))\n              .context(TIMESERIES_CONTEXT_DEFAULT)\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","date":"2021-04-13 13:21:24","endLine":257,"groupId":"1572","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultCompressionForTDigestGenerateSketchAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ec/17e7ecbed42ba44d33c2a8ec14369d92ca1e6e.src","preCode":"  public void testDefaultCompressionForTDigestGenerateSketchAgg() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = sqlLifecycleFactory.factorize();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1)\"\n                       + \"FROM foo\";\n\n    \r\n    sqlLifecycle.runSimple(\n        sql,\n        QUERY_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        authenticationResult\n    ).toList();\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", TDigestSketchAggregatorFactory.DEFAULT_COMPRESSION)\n              ))\n              .context(ImmutableMap.of(\"skipEmptyBuckets\", true, PlannerContext.CTX_SQL_QUERY_ID, \"dummy\"))\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-contrib/tdigestsketch/src/test/java/org/apache/druid/query/aggregation/tdigestsketch/sql/TDigestSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"25db8787b3d7eac87aa3be8e32d48d0e823298af","commitMessage":"@@@Fix CAST being ignored when aggregating on strings after cast (#11083)\n\n* Fix CAST being ignored when aggregating on strings after cast\n\n* fix checkstyle and dependency\n\n* unused import","date":"2021-04-13 13:21:24","modifiedFileCount":"21","status":"M","submitter":"Jihoon Son"},{"authorTime":"2021-05-11 01:13:37","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":4,"curCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT\\n\"\n        + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n        + \"FROM foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                  .granularity(Granularities.ALL)\n                  .aggregators(ImmutableList.of(\n                      new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n                  ))\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new String[]{\n                \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n            }\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":141,"groupId":"103482","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testComputingSketchOnNumericValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c1/737f90327487aa5d2949ab2294563a6773ba14.src","preCode":"  public void testComputingSketchOnNumericValues() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1, 200)\"\n                       + \"FROM foo\";\n\n    \r\n    final List<Object[]> results = sqlLifecycle.runSimple(\n        sql,\n        TIMESERIES_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n    final List<String[]> expectedResults = ImmutableList.of(\n        new String[]{\n            \"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAaQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"\n        }\n    );\n\n    Assert.assertEquals(expectedResults.size(), results.size());\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", 200)\n              ))\n              .context(TIMESERIES_CONTEXT_DEFAULT)\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-contrib/tdigestsketch/src/test/java/org/apache/druid/query/aggregation/tdigestsketch/sql/TDigestSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2021-05-11 01:13:37","commitOrder":4,"curCode":"  public void testDefaultCompressionForTDigestGenerateSketchAgg() throws Exception\n  {\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT\\n\"\n        + \"TDIGEST_GENERATE_SKETCH(m1)\"\n        + \"FROM foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n                  .granularity(Granularities.ALL)\n                  .aggregators(ImmutableList.of(\n                      new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", TDigestSketchAggregatorFactory.DEFAULT_COMPRESSION)\n                  ))\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\\\"AAAAAT/wAAAAAAAAQBgAAAAAAABAWQAAAAAAAAAAAAY/8AAAAAAAAD/wAAAAAAAAP/AAAAAAAABAAAAAAAAAAD/wAAAAAAAAQAgAAAAAAAA/8AAAAAAAAEAQAAAAAAAAP/AAAAAAAABAFAAAAAAAAD/wAAAAAAAAQBgAAAAAAAA=\\\"\"}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":207,"groupId":"103482","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testDefaultCompressionForTDigestGenerateSketchAgg","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c1/737f90327487aa5d2949ab2294563a6773ba14.src","preCode":"  public void testDefaultCompressionForTDigestGenerateSketchAgg() throws Exception\n  {\n    SqlLifecycle sqlLifecycle = getSqlLifecycle();\n    final String sql = \"SELECT\\n\"\n                       + \"TDIGEST_GENERATE_SKETCH(m1)\"\n                       + \"FROM foo\";\n\n    \r\n    sqlLifecycle.runSimple(\n        sql,\n        TIMESERIES_CONTEXT_DEFAULT,\n        DEFAULT_PARAMETERS,\n        AUTH_RESULT\n    ).toList();\n\n    \r\n    Assert.assertEquals(\n        Druids.newTimeseriesQueryBuilder()\n              .dataSource(CalciteTests.DATASOURCE1)\n              .intervals(new MultipleIntervalSegmentSpec(ImmutableList.of(Filtration.eternity())))\n              .granularity(Granularities.ALL)\n              .aggregators(ImmutableList.of(\n                  new TDigestSketchAggregatorFactory(\"a0:agg\", \"m1\", TDigestSketchAggregatorFactory.DEFAULT_COMPRESSION)\n              ))\n              .context(TIMESERIES_CONTEXT_DEFAULT)\n              .build(),\n        Iterables.getOnlyElement(queryLogHook.getRecordedQueries())\n    );\n  }\n","realPath":"extensions-contrib/tdigestsketch/src/test/java/org/apache/druid/query/aggregation/tdigestsketch/sql/TDigestSketchSqlAggregatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
