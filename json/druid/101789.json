[{"authorTime":"2021-01-14 04:55:24","codes":[{"authorDate":"2020-03-10 08:48:29","commitOrder":3,"curCode":"  public void testGroupByCube() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY CUBE (dim2, gran)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"\", null, 3L},\n            new Object[]{\"a\", null, 2L},\n            new Object[]{\"abc\", null, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L},\n            new Object[]{NULL_STRING, null, 6L}\n        )\n    );\n  }\n","date":"2020-03-10 08:48:29","endLine":9869,"groupId":"19229","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByCube","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/76/cd55b72e7df3dc0e964e31bd267448f02f3a1f.src","preCode":"  public void testGroupByCube() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY CUBE (dim2, gran)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"\", null, 3L},\n            new Object[]{\"a\", null, 2L},\n            new Object[]{\"abc\", null, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L},\n            new Object[]{NULL_STRING, null, 6L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":9811,"status":"NB"},{"authorDate":"2021-01-14 04:55:24","commitOrder":3,"curCode":"  public void testGroupingSetsWithLimit() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () ) LIMIT 100\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        ).setLimitSpec(\n                new DefaultLimitSpec(\n                    ImmutableList.of(),\n                    100)\n            )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"\", null, 3L},\n            new Object[]{\"a\", null, 2L},\n            new Object[]{\"abc\", null, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L},\n            new Object[]{NULL_STRING, null, 6L}\n        )\n    );\n  }\n","date":"2021-01-14 04:55:24","endLine":16347,"groupId":"10733","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupingSetsWithLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c6/50caf7ceb6b1a2ebb9534bb0a0af9d3c71cc9b.src","preCode":"  public void testGroupingSetsWithLimit() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () ) LIMIT 100\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        ).setLimitSpec(\n                new DefaultLimitSpec(\n                    ImmutableList.of(),\n                    100)\n            )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"\", null, 3L},\n            new Object[]{\"a\", null, 2L},\n            new Object[]{\"abc\", null, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L},\n            new Object[]{NULL_STRING, null, 6L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":16285,"status":"B"}],"commitId":"8c3c9b40601942d78d2213098d095db578acda3b","commitMessage":"@@@fix limited queries with subtotals (#10743)\n\n* i put my thing down.  flip it and reverse it\n\n* oops","date":"2021-01-14 04:55:24","modifiedFileCount":"4","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-07-12 01:22:47","codes":[{"authorDate":"2021-07-12 01:22:47","commitOrder":4,"curCode":"  public void testGroupByCube() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY CUBE (dim2, gran)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(withTimestampResultContext(QUERY_CONTEXT_DEFAULT, \"d1\", 1, Granularities.MONTH))\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"\", null, 3L},\n            new Object[]{\"a\", null, 2L},\n            new Object[]{\"abc\", null, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L},\n            new Object[]{NULL_STRING, null, 6L}\n        )\n    );\n  }\n","date":"2021-07-12 01:22:47","endLine":13783,"groupId":"101789","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByCube","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/77/2d91e626aa3be9648b2dea37c462ae341a18dc.src","preCode":"  public void testGroupByCube() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY CUBE (dim2, gran)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"\", null, 3L},\n            new Object[]{\"a\", null, 2L},\n            new Object[]{\"abc\", null, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L},\n            new Object[]{NULL_STRING, null, 6L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":13725,"status":"M"},{"authorDate":"2021-07-12 01:22:47","commitOrder":4,"curCode":"  public void testGroupingSetsWithLimit() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () ) LIMIT 100\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(),\n                                100\n                            )\n                        )\n                        .setContext(withTimestampResultContext(QUERY_CONTEXT_DEFAULT, \"d1\", 1, Granularities.MONTH))\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"\", null, 3L},\n            new Object[]{\"a\", null, 2L},\n            new Object[]{\"abc\", null, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L},\n            new Object[]{NULL_STRING, null, 6L}\n        )\n    );\n  }\n","date":"2021-07-12 01:22:47","endLine":17309,"groupId":"101789","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGroupingSetsWithLimit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/77/2d91e626aa3be9648b2dea37c462ae341a18dc.src","preCode":"  public void testGroupingSetsWithLimit() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT dim2, gran, SUM(cnt)\\n\"\n        + \"FROM (SELECT FLOOR(__time TO MONTH) AS gran, COALESCE(dim2, '') dim2, cnt FROM druid.foo) AS x\\n\"\n        + \"GROUP BY GROUPING SETS ( (dim2, gran), (dim2), (gran), () ) LIMIT 100\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\n                                \"v0\",\n                                \"case_searched(notnull(\\\"dim2\\\"),\\\"dim2\\\",'')\",\n                                ValueType.STRING\n                            ),\n                            expressionVirtualColumn(\n                                \"v1\",\n                                \"timestamp_floor(\\\"__time\\\",'P1M',null,'UTC')\",\n                                ValueType.LONG\n                            )\n                        )\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"v0\", \"d0\"),\n                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.LONG)\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new LongSumAggregatorFactory(\"a0\", \"cnt\")))\n                        .setSubtotalsSpec(\n                            ImmutableList.of(\n                                ImmutableList.of(\"d0\", \"d1\"),\n                                ImmutableList.of(\"d0\"),\n                                ImmutableList.of(\"d1\"),\n                                ImmutableList.of()\n                            )\n                        )\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(),\n                                100\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\", timestamp(\"2000-01-01\"), 2L},\n            new Object[]{\"\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2000-01-01\"), 1L},\n            new Object[]{\"a\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"abc\", timestamp(\"2001-01-01\"), 1L},\n            new Object[]{\"\", null, 3L},\n            new Object[]{\"a\", null, 2L},\n            new Object[]{\"abc\", null, 1L},\n            new Object[]{NULL_STRING, timestamp(\"2000-01-01\"), 3L},\n            new Object[]{NULL_STRING, timestamp(\"2001-01-01\"), 3L},\n            new Object[]{NULL_STRING, null, 6L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":17245,"status":"M"}],"commitId":"e39ff44481703499394feac82d467e6999d05d47","commitMessage":"@@@improve groupBy query granularity translation with 2x query performance improve when issued from sql layer (#11379)\n\n* improve groupBy query granularity translation when issued from sql layer\n\n* fix style\n\n* use virtual column to determine timestampResult granularity\n\n* dont' apply postaggregators on compute nodes\n\n* relocate constants\n\n* fix order by correctness issue\n\n* fix ut\n\n* use more easier understanding code in DefaultLimitSpec\n\n* address comment\n\n* rollback use virtual column to determine timestampResult granularity\n\n* fix style\n\n* fix style\n\n* address the comment\n\n* add more detail document to explain the tradeoff\n\n* address the comment\n\n* address the comment","date":"2021-07-12 01:22:47","modifiedFileCount":"7","status":"M","submitter":"kaijianding"}]
