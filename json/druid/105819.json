[{"authorTime":"2020-03-11 11:39:01","codes":[{"authorDate":"2020-03-11 11:39:01","commitOrder":1,"curCode":"  public void test_getColumnCapabilities_long()\n  {\n    final RowBasedStorageAdapter<Integer> adapter = createIntAdapter(0, 1, 2);\n\n    final ColumnCapabilities capabilities = adapter.getColumnCapabilities(ValueType.LONG.name());\n    Assert.assertEquals(ValueType.LONG, capabilities.getType());\n    Assert.assertFalse(capabilities.hasMultipleValues());\n    Assert.assertTrue(capabilities.isComplete());\n  }\n","date":"2020-03-11 11:39:01","endLine":353,"groupId":"8511","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"test_getColumnCapabilities_long","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/07/086c42f4b29d5a6c2ad558c4ad17900e34ff16.src","preCode":"  public void test_getColumnCapabilities_long()\n  {\n    final RowBasedStorageAdapter<Integer> adapter = createIntAdapter(0, 1, 2);\n\n    final ColumnCapabilities capabilities = adapter.getColumnCapabilities(ValueType.LONG.name());\n    Assert.assertEquals(ValueType.LONG, capabilities.getType());\n    Assert.assertFalse(capabilities.hasMultipleValues());\n    Assert.assertTrue(capabilities.isComplete());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/RowBasedStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"B"},{"authorDate":"2020-03-11 11:39:01","commitOrder":1,"curCode":"  public void test_getColumnCapabilities_string()\n  {\n    final RowBasedStorageAdapter<Integer> adapter = createIntAdapter(0, 1, 2);\n\n    final ColumnCapabilities capabilities = adapter.getColumnCapabilities(ValueType.STRING.name());\n    Assert.assertEquals(ValueType.STRING, capabilities.getType());\n\n    \r\n    \r\n    \r\n    Assert.assertTrue(capabilities.hasMultipleValues());\n    Assert.assertFalse(capabilities.isComplete());\n  }\n","date":"2020-03-11 11:39:01","endLine":368,"groupId":"8511","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"test_getColumnCapabilities_string","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/07/086c42f4b29d5a6c2ad558c4ad17900e34ff16.src","preCode":"  public void test_getColumnCapabilities_string()\n  {\n    final RowBasedStorageAdapter<Integer> adapter = createIntAdapter(0, 1, 2);\n\n    final ColumnCapabilities capabilities = adapter.getColumnCapabilities(ValueType.STRING.name());\n    Assert.assertEquals(ValueType.STRING, capabilities.getType());\n\n    \r\n    \r\n    \r\n    Assert.assertTrue(capabilities.hasMultipleValues());\n    Assert.assertFalse(capabilities.isComplete());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/RowBasedStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"B"}],"commitId":"4f085896c6aa8821e2425f6e223d318a157a9807","commitMessage":"@@@Ability to directly query row-based datasources. (#9502)\n\n* Ability to directly query row-based datasources.\n\nIncludes:\n\n- Foundational classes RowBasedSegment.  RowBasedStorageAdapter. \n  RowBasedCursor provide a queryable interface on top of a\n  RowBasedColumnSelectorFactory.\n- Add LookupSegment: A RowBasedSegment that is built on lookup data.\n- Improve capability reporting in RowBasedColumnSelectorFactory.\n\n* Fix import.\n\n* Remove unthrown IOException.","date":"2020-03-11 11:39:01","modifiedFileCount":"3","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-03-23 07:43:55","codes":[{"authorDate":"2020-03-11 11:39:01","commitOrder":2,"curCode":"  public void test_getColumnCapabilities_long()\n  {\n    final RowBasedStorageAdapter<Integer> adapter = createIntAdapter(0, 1, 2);\n\n    final ColumnCapabilities capabilities = adapter.getColumnCapabilities(ValueType.LONG.name());\n    Assert.assertEquals(ValueType.LONG, capabilities.getType());\n    Assert.assertFalse(capabilities.hasMultipleValues());\n    Assert.assertTrue(capabilities.isComplete());\n  }\n","date":"2020-03-11 11:39:01","endLine":353,"groupId":"8511","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"test_getColumnCapabilities_long","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/07/086c42f4b29d5a6c2ad558c4ad17900e34ff16.src","preCode":"  public void test_getColumnCapabilities_long()\n  {\n    final RowBasedStorageAdapter<Integer> adapter = createIntAdapter(0, 1, 2);\n\n    final ColumnCapabilities capabilities = adapter.getColumnCapabilities(ValueType.LONG.name());\n    Assert.assertEquals(ValueType.LONG, capabilities.getType());\n    Assert.assertFalse(capabilities.hasMultipleValues());\n    Assert.assertTrue(capabilities.isComplete());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/RowBasedStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"N"},{"authorDate":"2020-03-23 07:43:55","commitOrder":2,"curCode":"  public void test_getColumnCapabilities_string()\n  {\n    final RowBasedStorageAdapter<Integer> adapter = createIntAdapter(0, 1, 2);\n\n    final ColumnCapabilities capabilities = adapter.getColumnCapabilities(ValueType.STRING.name());\n    Assert.assertEquals(ValueType.STRING, capabilities.getType());\n\n    \r\n    \r\n    \r\n    Assert.assertFalse(capabilities.hasMultipleValues());\n    Assert.assertFalse(capabilities.isComplete());\n  }\n","date":"2020-03-23 07:43:55","endLine":374,"groupId":"8511","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"test_getColumnCapabilities_string","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a4/fc2f254b78f679c78df2df00819a09aa4a69a5.src","preCode":"  public void test_getColumnCapabilities_string()\n  {\n    final RowBasedStorageAdapter<Integer> adapter = createIntAdapter(0, 1, 2);\n\n    final ColumnCapabilities capabilities = adapter.getColumnCapabilities(ValueType.STRING.name());\n    Assert.assertEquals(ValueType.STRING, capabilities.getType());\n\n    \r\n    \r\n    \r\n    Assert.assertTrue(capabilities.hasMultipleValues());\n    Assert.assertFalse(capabilities.isComplete());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/RowBasedStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"M"}],"commitId":"54c9325256c33622bc8d198dc0252a157f68f196","commitMessage":"@@@SQL support for joins on subqueries. (#9545)\n\n* SQL support for joins on subqueries.\n\nChanges to SQL module:\n\n- DruidJoinRule: Allow joins on subqueries (left/right are no longer\n  required to be scans or mappings).\n- DruidJoinRel: Add cost estimation code for joins on subqueries.\n- DruidSemiJoinRule.  DruidSemiJoinRel: Removed.  since DruidJoinRule can\n  handle this case now.\n- DruidRel: Remove Nullable annotation from toDruidQuery.  because\n  it is no longer needed (it was used by DruidSemiJoinRel).\n- Update Rules constants to reflect new rules available in our current\n  version of Calcite. Some of these are useful for optimizing joins on\n  subqueries.\n- Rework cost estimation to be in terms of cost per row.  and place all\n  relevant constants in CostEstimates.\n\nOther changes:\n\n- RowBasedColumnSelectorFactory: Don't set hasMultipleValues. The lack\n  of isComplete is enough to let callers know that columns might have\n  multiple values.  and explicitly setting it to true causes\n  ExpressionSelectors to think it definitely has multiple values.  and\n  treat the inputs as arrays. This behavior interfered with some of the\n  new tests that involved queries on lookups.\n- QueryContexts: Add maxSubqueryRows parameter.  and use it in druid-sql\n  tests.\n\n* Fixes for tests.\n\n* Adjustments.","date":"2020-03-23 07:43:55","modifiedFileCount":"24","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-06-05 14:52:37","codes":[{"authorDate":"2020-06-05 14:52:37","commitOrder":3,"curCode":"  public void test_getColumnCapabilities_long()\n  {\n    final RowBasedStorageAdapter<Integer> adapter = createIntAdapter(0, 1, 2);\n\n    final ColumnCapabilities capabilities = adapter.getColumnCapabilities(ValueType.LONG.name());\n    Assert.assertEquals(ValueType.LONG, capabilities.getType());\n    Assert.assertFalse(capabilities.hasMultipleValues().isMaybeTrue());\n  }\n","date":"2020-06-05 14:52:37","endLine":356,"groupId":"105819","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"test_getColumnCapabilities_long","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/65/2a59033fabda724ccac946b990c48e405b8282.src","preCode":"  public void test_getColumnCapabilities_long()\n  {\n    final RowBasedStorageAdapter<Integer> adapter = createIntAdapter(0, 1, 2);\n\n    final ColumnCapabilities capabilities = adapter.getColumnCapabilities(ValueType.LONG.name());\n    Assert.assertEquals(ValueType.LONG, capabilities.getType());\n    Assert.assertFalse(capabilities.hasMultipleValues());\n    Assert.assertTrue(capabilities.isComplete());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/RowBasedStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"},{"authorDate":"2020-06-05 14:52:37","commitOrder":3,"curCode":"  public void test_getColumnCapabilities_string()\n  {\n    final RowBasedStorageAdapter<Integer> adapter = createIntAdapter(0, 1, 2);\n\n    final ColumnCapabilities capabilities = adapter.getColumnCapabilities(ValueType.STRING.name());\n    Assert.assertEquals(ValueType.STRING, capabilities.getType());\n\n    \r\n    \r\n    \r\n    Assert.assertTrue(capabilities.hasMultipleValues().isUnknown());\n  }\n","date":"2020-06-05 14:52:37","endLine":370,"groupId":"105819","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"test_getColumnCapabilities_string","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/65/2a59033fabda724ccac946b990c48e405b8282.src","preCode":"  public void test_getColumnCapabilities_string()\n  {\n    final RowBasedStorageAdapter<Integer> adapter = createIntAdapter(0, 1, 2);\n\n    final ColumnCapabilities capabilities = adapter.getColumnCapabilities(ValueType.STRING.name());\n    Assert.assertEquals(ValueType.STRING, capabilities.getType());\n\n    \r\n    \r\n    \r\n    Assert.assertFalse(capabilities.hasMultipleValues());\n    Assert.assertFalse(capabilities.isComplete());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/RowBasedStorageAdapterTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"M"}],"commitId":"77dd5b06ae8fd7c81474cb03c0fc399cdf21646a","commitMessage":"@@@ColumnCapabilities.hasMultipleValues refactor (#9731)\n\n* transition ColumnCapabilities.hasMultipleValues to Capable enum.  remove ColumnCapabilities.isComplete\n\n* remove artifical.  always multi-value capabilities from IncrementalIndexStorageAdapter and fix up fallout from that.  fix ColumnCapabilities merge in index merger\n\n* fix typo\n\n* remove unused method\n\n* review stuffs.  revert IncrementalIndexStorageAdapater capabilities change.  plumb lame workaround to SegmentAnalyzer\n\n* more comment\n\n* use volatile booleans\n\n* fix line length\n\n* correctly handle missing columns for vector processors\n\n* return ColumnCapabilities.Capable for BitmapIndexSelector.hasMultipleValues.  fix vector processor selection for complex\n\n* false on non-existent","date":"2020-06-05 14:52:37","modifiedFileCount":"41","status":"M","submitter":"Clint Wylie"}]
