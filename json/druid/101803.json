[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testProjectAfterSort() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim2, count(*) cnt from druid.foo group by dim1, dim2 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            DIMS(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                                new DefaultDimensionSpec(\"dim2\", \"d1\")\n                            )\n                        )\n                        .setAggregatorSpecs(AGGS(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                Collections.singletonList(\n                                    new OrderByColumnSpec(\"a0\", Direction.ASCENDING, StringComparators.NUMERIC)\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":7041,"groupId":"10974","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectAfterSort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testProjectAfterSort() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim2, count(*) cnt from druid.foo group by dim1, dim2 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            DIMS(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                                new DefaultDimensionSpec(\"dim2\", \"d1\")\n                            )\n                        )\n                        .setAggregatorSpecs(AGGS(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                Collections.singletonList(\n                                    new OrderByColumnSpec(\"a0\", Direction.ASCENDING, StringComparators.NUMERIC)\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7005,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testProjectAfterSort3() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim1, count(*) cnt from druid.foo group by dim1, dim1 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            DIMS(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\")\n                            )\n                        )\n                        .setAggregatorSpecs(AGGS(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                Collections.singletonList(\n                                    new OrderByColumnSpec(\"a0\", Direction.ASCENDING, StringComparators.NUMERIC)\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":7124,"groupId":"7654","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testProjectAfterSort3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testProjectAfterSort3() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim1, count(*) cnt from druid.foo group by dim1, dim1 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            DIMS(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\")\n                            )\n                        )\n                        .setAggregatorSpecs(AGGS(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                Collections.singletonList(\n                                    new OrderByColumnSpec(\"a0\", Direction.ASCENDING, StringComparators.NUMERIC)\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7089,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testProjectAfterSort() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim2, count(*) cnt from druid.foo group by dim1, dim2 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            dimensionSpec(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                                new DefaultDimensionSpec(\"dim2\", \"d1\")\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                Collections.singletonList(\n                                    new OrderByColumnSpec(\"a0\", Direction.ASCENDING, StringComparators.NUMERIC)\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":7013,"groupId":"23278","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectAfterSort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testProjectAfterSort() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim2, count(*) cnt from druid.foo group by dim1, dim2 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            DIMS(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                                new DefaultDimensionSpec(\"dim2\", \"d1\")\n                            )\n                        )\n                        .setAggregatorSpecs(AGGS(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                Collections.singletonList(\n                                    new OrderByColumnSpec(\"a0\", Direction.ASCENDING, StringComparators.NUMERIC)\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6977,"status":"M"},{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testProjectAfterSort3() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim1, count(*) cnt from druid.foo group by dim1, dim1 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            dimensionSpec(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\")\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                Collections.singletonList(\n                                    new OrderByColumnSpec(\"a0\", Direction.ASCENDING, StringComparators.NUMERIC)\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":7096,"groupId":"23277","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testProjectAfterSort3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testProjectAfterSort3() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim1, count(*) cnt from druid.foo group by dim1, dim1 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            DIMS(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\")\n                            )\n                        )\n                        .setAggregatorSpecs(AGGS(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                Collections.singletonList(\n                                    new OrderByColumnSpec(\"a0\", Direction.ASCENDING, StringComparators.NUMERIC)\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7061,"status":"M"}],"commitId":"8b803cbc22b15799fd0526de8d6d0eea155ad733","commitMessage":"@@@Added checkstyle for \"Methods starting with Capital Letters\"  (#7118)\n\n* Added checkstyle for \"Methods starting with Capital Letters\" and changed the method names violating this.\n\n* Un-abbreviate the method names in the calcite tests\n\n* Fixed checkstyle errors\n\n* Changed asserts position in the code\n","date":"2019-02-24 12:10:31","modifiedFileCount":"24","status":"M","submitter":"Himanshu Pandey"},{"authorTime":"2019-03-12 02:37:58","codes":[{"authorDate":"2019-03-12 02:37:58","commitOrder":3,"curCode":"  public void testProjectAfterSort() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim2, count(*) cnt from druid.foo group by dim1, dim2 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                                new DefaultDimensionSpec(\"dim2\", \"d1\")\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                Collections.singletonList(\n                                    new OrderByColumnSpec(\"a0\", Direction.ASCENDING, StringComparators.NUMERIC)\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":7037,"groupId":"23278","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectAfterSort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testProjectAfterSort() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim2, count(*) cnt from druid.foo group by dim1, dim2 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            dimensionSpec(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                                new DefaultDimensionSpec(\"dim2\", \"d1\")\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                Collections.singletonList(\n                                    new OrderByColumnSpec(\"a0\", Direction.ASCENDING, StringComparators.NUMERIC)\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7001,"status":"M"},{"authorDate":"2019-03-12 02:37:58","commitOrder":3,"curCode":"  public void testProjectAfterSort3() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim1, count(*) cnt from druid.foo group by dim1, dim1 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\")\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                Collections.singletonList(\n                                    new OrderByColumnSpec(\"a0\", Direction.ASCENDING, StringComparators.NUMERIC)\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":7120,"groupId":"23277","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testProjectAfterSort3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testProjectAfterSort3() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim1, count(*) cnt from druid.foo group by dim1, dim1 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            dimensionSpec(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\")\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                Collections.singletonList(\n                                    new OrderByColumnSpec(\"a0\", Direction.ASCENDING, StringComparators.NUMERIC)\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7085,"status":"M"}],"commitId":"d7ba19d477732578fc310831ed28365b36332752","commitMessage":"@@@sql.  filters.  and virtual columns  (#6902)\n\n* refactor sql planning to re-use expression virtual columns when possible when constructing a DruidQuery.  allowing virtual columns to be defined in filter expressions.  and making resulting native druid queries more concise. also minor refactor of built-in sql aggregators to maximize code re-use\n\n* fix it\n\n* fix it in the right place\n\n* fixup for base64 stuff\n\n* fixup tests\n\n* fix merge conflict on import order\n\n* fixup\n\n* fix imports\n\n* fix tests\n\n* review comments\n\n* refactor\n\n* re-arrange\n\n* better javadoc\n\n* fixup merge\n\n* fixup tests\n\n* fix accidental changes\n","date":"2019-03-12 02:37:58","modifiedFileCount":"33","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-03-12 02:37:58","codes":[{"authorDate":"2019-11-21 13:22:55","commitOrder":4,"curCode":"  public void testProjectAfterSort() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim2, count(*) cnt from druid.foo group by dim1, dim2 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                                new DefaultDimensionSpec(\"dim2\", \"d1\")\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","date":"2019-11-21 13:22:55","endLine":7557,"groupId":"101803","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testProjectAfterSort","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0c/1b9f96fa11ec662c356302a70109857954053c.src","preCode":"  public void testProjectAfterSort() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim2, count(*) cnt from druid.foo group by dim1, dim2 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\"),\n                                new DefaultDimensionSpec(\"dim2\", \"d1\")\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                Collections.singletonList(\n                                    new OrderByColumnSpec(\"a0\", Direction.ASCENDING, StringComparators.NUMERIC)\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7530,"status":"M"},{"authorDate":"2019-03-12 02:37:58","commitOrder":4,"curCode":"  public void testProjectAfterSort3() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim1, count(*) cnt from druid.foo group by dim1, dim1 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\")\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                Collections.singletonList(\n                                    new OrderByColumnSpec(\"a0\", Direction.ASCENDING, StringComparators.NUMERIC)\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":7120,"groupId":"101803","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testProjectAfterSort3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testProjectAfterSort3() throws Exception\n  {\n    testQuery(\n        \"select dim1 from (select dim1, dim1, count(*) cnt from druid.foo group by dim1, dim1 order by cnt)\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(\n                            dimensions(\n                                new DefaultDimensionSpec(\"dim1\", \"d0\")\n                            )\n                        )\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                Collections.singletonList(\n                                    new OrderByColumnSpec(\"a0\", Direction.ASCENDING, StringComparators.NUMERIC)\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{\"\"},\n            new Object[]{\"1\"},\n            new Object[]{\"10.1\"},\n            new Object[]{\"2\"},\n            new Object[]{\"abc\"},\n            new Object[]{\"def\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":7085,"status":"N"}],"commitId":"dc6178d1f2332fe03e18576713ad517c87d4d031","commitMessage":"@@@Upgrade Calcite to 1.21 (#8566)\n\n* Upgrade Calcite to 1.21\n\n* Checkstyle.  test fix'\n\n* Exclude calcite yaml deps.  update license.yaml\n\n* Add method for exception chain handling\n\n* Checkstyle\n\n* PR comments.  Add outer limit context flag\n\n* Revert project settings change\n\n* Update subquery test comment\n\n* Checkstyle fix\n\n* Fix test in sql compat mode\n\n* Fix test\n\n* Fix dependency analysis\n\n* Address PR comments\n\n* Checkstyle\n\n* Adjust testSelectStarFromSelectSingleColumnWithLimitDescending\n","date":"2019-11-21 13:22:55","modifiedFileCount":"10","status":"M","submitter":"Jonathan Wei"}]
