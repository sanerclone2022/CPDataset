[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"\"),\n                Pair.of(\"TABLE_NAME\", \"foo2\"),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":389,"groupId":"8814","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDatabaseMetaDataTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8f/a788c34b6f2611483de86ee589999bdb12a2af.src","preCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"\"),\n                Pair.of(\"TABLE_NAME\", \"foo2\"),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":366,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":421,"groupId":"10798","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatabaseMetaDataTablesAsSuperuser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8f/a788c34b6f2611483de86ee589999bdb12a2af.src","preCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-11-14 06:32:40","codes":[{"authorDate":"2018-11-14 06:32:40","commitOrder":2,"curCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo2\"),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2018-11-14 06:32:40","endLine":391,"groupId":"7944","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDatabaseMetaDataTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0d/82a2f061a54d804de7e629853e7c40cbfb2bb3.src","preCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"\"),\n                Pair.of(\"TABLE_NAME\", \"foo2\"),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"M"},{"authorDate":"2018-11-14 06:32:40","commitOrder":2,"curCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2018-11-14 06:32:40","endLine":423,"groupId":"14654","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatabaseMetaDataTablesAsSuperuser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0d/82a2f061a54d804de7e629853e7c40cbfb2bb3.src","preCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"M"}],"commitId":"80173b5d2904233ce93e0d5693f8b5024faab8f5","commitMessage":"@@@SQL: Set INFORMATION_SCHEMA catalog name to \"druid\". (#6595)\n\n* SQL: Set INFORMATION_SCHEMA catalog name to \"druid\".\n\nSome third party tools ignore catalogs with empty names. So using\nthe name \"druid\" for the catalog makes integration easier.\n\n* Update tests.\n","date":"2018-11-14 06:32:40","modifiedFileCount":"2","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-01-24 14:36:52","codes":[{"authorDate":"2019-01-24 14:36:52","commitOrder":3,"curCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2019-01-24 14:36:52","endLine":413,"groupId":"14656","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDatabaseMetaDataTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c1/c43b5ad1ea9054abc3704eaae2616df95fd0b3.src","preCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo\"),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", \"foo2\"),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"},{"authorDate":"2019-01-24 14:36:52","commitOrder":3,"curCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2019-01-24 14:36:52","endLine":451,"groupId":"14654","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatabaseMetaDataTablesAsSuperuser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c1/c43b5ad1ea9054abc3704eaae2616df95fd0b3.src","preCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":416,"status":"M"}],"commitId":"66f64cd8bdf3a742d3d6a812b7560a9ffc0c28b8","commitMessage":"@@@fix long/float/double dimension filtering for columns with nulls (#6906)\n\n* fix long. float.  double dimension filtering when sql compatible null handling is enabled and the column has null values\n\n* revert unintended change\n\n* fix tests\n","date":"2019-01-24 14:36:52","modifiedFileCount":"6","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":4,"curCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":413,"groupId":"14656","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDatabaseMetaDataTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/5632d5ded865ca8d161debd750d87c00a32910.src","preCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"},{"authorDate":"2019-02-24 12:10:31","commitOrder":4,"curCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":451,"groupId":"14654","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatabaseMetaDataTablesAsSuperuser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/5632d5ded865ca8d161debd750d87c00a32910.src","preCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            ROW(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":416,"status":"M"}],"commitId":"8b803cbc22b15799fd0526de8d6d0eea155ad733","commitMessage":"@@@Added checkstyle for \"Methods starting with Capital Letters\"  (#7118)\n\n* Added checkstyle for \"Methods starting with Capital Letters\" and changed the method names violating this.\n\n* Un-abbreviate the method names in the calcite tests\n\n* Fixed checkstyle errors\n\n* Changed asserts position in the code\n","date":"2019-02-24 12:10:31","modifiedFileCount":"24","status":"M","submitter":"Himanshu Pandey"},{"authorTime":"2019-07-20 11:38:32","codes":[{"authorDate":"2019-07-20 11:38:32","commitOrder":5,"curCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2019-07-20 11:38:32","endLine":419,"groupId":"3957","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDatabaseMetaDataTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6f/a51b924447acf6a1fea1d18ff625e32ba90cee.src","preCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"M"},{"authorDate":"2019-07-20 11:38:32","commitOrder":5,"curCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2019-07-20 11:38:32","endLine":464,"groupId":"3679","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatabaseMetaDataTablesAsSuperuser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6f/a51b924447acf6a1fea1d18ff625e32ba90cee.src","preCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"M"}],"commitId":"ea4bad783691da2b8530eb8ad3daf6a0ad2d0a37","commitMessage":"@@@Druid SQL EXTRACT time function - adding support for additional Time Units (#8068)\n\n* 1. Added TimestampExtractExprMacro.Unit for MILLISECOND 2. expr eval for MILLISECOND 3. Added a test case to test extracting millisecond from expression. #7935\n\n* 1. Adding DATASOURCE4 in tests. 2. Adding test TimeExtractWithMilliseconds\n\n* Fixing testInformationSchemaTables test\n\n* Fixing failing tests in DruidAvaticaHandlerTest\n\n* Adding cannotVectorize() call before the test\n\n* Extract time function - Adding support for MICROSECOND.  ISODOW.  ISOYEAR and CENTURY time units.  documentation changes.\n\n* Adding MILLISECOND in test case\n\n* Adding support DECADE and MILLENNIUM.  updating test case and documentation\n\n* Fixing expression eval for DECADE and MILLENIUM\n","date":"2019-07-20 11:38:32","modifiedFileCount":"5","status":"M","submitter":"Sashidhar Thallam"},{"authorTime":"2019-12-16 17:38:24","codes":[{"authorDate":"2019-12-16 17:38:24","commitOrder":6,"curCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE5),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2019-12-16 17:38:24","endLine":426,"groupId":"3957","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDatabaseMetaDataTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/19/5e523325d7cdfdf569b7e9bbab75faf7b86b3c.src","preCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"M"},{"authorDate":"2019-12-16 17:38:24","commitOrder":6,"curCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE5),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2019-12-16 17:38:24","endLine":477,"groupId":"3679","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatabaseMetaDataTablesAsSuperuser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/19/5e523325d7cdfdf569b7e9bbab75faf7b86b3c.src","preCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"M"}],"commitId":"bc16ff5e7cbbe980d17dd106ac0324e057890739","commitMessage":"@@@sql auto limit wrapping fix (#9043)\n\n* sql auto limit wrapping fix\n\n* fix tests and style\n\n* remove setImportance\n","date":"2019-12-16 17:38:24","modifiedFileCount":"4","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-06-18 11:01:31","codes":[{"authorDate":"2020-06-18 11:01:31","commitOrder":7,"curCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE5),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOME_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOMEXDATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2020-06-18 11:01:31","endLine":436,"groupId":"3957","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDatabaseMetaDataTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6b/836b83ea4d5ac93b82e30f448f996731f1d56c.src","preCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE5),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"M"},{"authorDate":"2020-06-18 11:01:31","commitOrder":7,"curCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE5),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOME_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOMEXDATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2020-06-18 11:01:31","endLine":498,"groupId":"3679","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatabaseMetaDataTablesAsSuperuser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6b/836b83ea4d5ac93b82e30f448f996731f1d56c.src","preCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE5),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":439,"status":"M"}],"commitId":"3527458f85f2cfcdffbfa4278a0c439cc3c100c4","commitMessage":"@@@Druid Avatica - Handle escaping of search characters correctly (#10040)\n\nFix Avatica based metadata queries by appending ESCAPE '\\' clause to the LIKE expressions","date":"2020-06-18 11:01:31","modifiedFileCount":"4","status":"M","submitter":"Samarth Jain"},{"authorTime":"2020-06-20 02:35:18","codes":[{"authorDate":"2020-06-20 02:35:18","commitOrder":8,"curCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.BROADCAST_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE5),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOME_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOMEXDATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2020-06-20 02:35:18","endLine":442,"groupId":"3957","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testDatabaseMetaDataTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3f/43f76c1757fb11876a95278e0c4cd3e469f5e1.src","preCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE5),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOME_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOMEXDATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"M"},{"authorDate":"2020-06-20 02:35:18","commitOrder":8,"curCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.BROADCAST_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE5),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOME_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOMEXDATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2020-06-20 02:35:18","endLine":510,"groupId":"3679","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatabaseMetaDataTablesAsSuperuser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3f/43f76c1757fb11876a95278e0c4cd3e469f5e1.src","preCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE5),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOME_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOMEXDATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"M"}],"commitId":"c2f5d453f87d0863fba532e9ff4f3e7369db12e3","commitMessage":"@@@fix topn on string columns with non-sorted or non-unique dictionaries (#10053)\n\n* fix topn on string columns with non-sorted or non-unique dictionaries\n\n* fix metadata tests\n\n* refactor.  clarify comments and code.  fix ci failures","date":"2020-06-20 02:35:18","modifiedFileCount":"9","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-04-07 15:52:19","codes":[{"authorDate":"2021-04-07 15:52:19","commitOrder":9,"curCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.BROADCAST_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE5),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOME_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOMEXDATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.USERVISITDATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2021-04-07 15:52:19","endLine":442,"groupId":"101525","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testDatabaseMetaDataTables","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/66/6fa1530316695b5c8403897799408dc28c3832.src","preCode":"  public void testDatabaseMetaDataTables() throws Exception\n  {\n    final DatabaseMetaData metaData = client.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.BROADCAST_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE5),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOME_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOMEXDATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"M"},{"authorDate":"2021-04-07 15:52:19","commitOrder":9,"curCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.BROADCAST_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE5),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOME_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOMEXDATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.USERVISITDATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","date":"2021-04-07 15:52:19","endLine":516,"groupId":"101525","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testDatabaseMetaDataTablesAsSuperuser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/66/6fa1530316695b5c8403897799408dc28c3832.src","preCode":"  public void testDatabaseMetaDataTablesAsSuperuser() throws Exception\n  {\n    final DatabaseMetaData metaData = superuserClient.getMetaData();\n    Assert.assertEquals(\n        ImmutableList.of(\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.BROADCAST_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE1),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE2),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE4),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.FORBIDDEN_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE5),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.DATASOURCE3),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOME_DATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            ),\n            row(\n                Pair.of(\"TABLE_CAT\", \"druid\"),\n                Pair.of(\"TABLE_NAME\", CalciteTests.SOMEXDATASOURCE),\n                Pair.of(\"TABLE_SCHEM\", \"druid\"),\n                Pair.of(\"TABLE_TYPE\", \"TABLE\")\n            )\n        ),\n        getRows(\n            metaData.getTables(null, \"druid\", \"%\", null),\n            ImmutableSet.of(\"TABLE_CAT\", \"TABLE_NAME\", \"TABLE_SCHEM\", \"TABLE_TYPE\")\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"M"}],"commitId":"0df0bff44b0bbf3b6655bb0cffc384f58e69ac1f","commitMessage":"@@@Enable multiple distinct aggregators in same query (#11014)\n\n* Enable multiple distinct count\n\n* Add more tests\n\n* fix sql test\n\n* docs fix\n\n* Address nits","date":"2021-04-07 15:52:19","modifiedFileCount":"11","status":"M","submitter":"Abhishek Agarwal"}]
