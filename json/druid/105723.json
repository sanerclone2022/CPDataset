[{"authorTime":"2020-06-02 07:36:32","codes":[{"authorDate":"2020-08-21 05:12:39","commitOrder":2,"curCode":"  public void testSegmentizer() throws IOException, SegmentLoadingException\n  {\n    final ObjectMapper mapper = new DefaultObjectMapper();\n    mapper.registerModule(new SegmentizerModule());\n    final IndexIO indexIO = new IndexIO(mapper, () -> 0);\n    mapper.setInjectableValues(\n        new InjectableValues.Std()\n            .addValue(ExprMacroTable.class.getName(), TestExprMacroTable.INSTANCE)\n            .addValue(ObjectMapper.class.getName(), mapper)\n            .addValue(IndexIO.class, indexIO)\n            .addValue(DataSegment.PruneSpecsHolder.class, DataSegment.PruneSpecsHolder.DEFAULT)\n    );\n\n    IndexMerger indexMerger = new IndexMergerV9(mapper, indexIO, OffHeapMemorySegmentWriteOutMediumFactory.instance());\n\n    SegmentizerFactory expectedFactory = new BroadcastJoinableMMappedQueryableSegmentizerFactory(\n        indexIO,\n        KEY_COLUMNS\n    );\n    Interval testInterval = Intervals.of(\"2011-01-12T00:00:00.000Z/2011-05-01T00:00:00.000Z\");\n    IncrementalIndex data = TestIndex.makeRealtimeIndex(\"druid.sample.numeric.tsv\");\n\n    List<String> columnNames = data.getColumnNames();\n    File segment = new File(temporaryFolder.newFolder(), \"segment\");\n    File persistedSegmentRoot = indexMerger.persist(\n        data,\n        testInterval,\n        segment,\n        new IndexSpec(\n            null,\n            null,\n            null,\n            null,\n            expectedFactory\n        ),\n        null\n    );\n\n    File factoryJson = new File(persistedSegmentRoot, \"factory.json\");\n    Assert.assertTrue(factoryJson.exists());\n    SegmentizerFactory factory = mapper.readValue(factoryJson, SegmentizerFactory.class);\n    Assert.assertTrue(factory instanceof BroadcastJoinableMMappedQueryableSegmentizerFactory);\n    Assert.assertEquals(expectedFactory, factory);\n\n    \r\n    final DataSegment dataSegment = new DataSegment(\n        TABLE_NAME,\n        testInterval,\n        DateTimes.nowUtc().toString(),\n        ImmutableMap.of(),\n        columnNames,\n        ImmutableList.of(),\n        null,\n        null,\n        persistedSegmentRoot.getTotalSpace()\n    );\n    final Segment loaded = factory.factorize(dataSegment, persistedSegmentRoot, false);\n\n    final BroadcastSegmentIndexedTable table = (BroadcastSegmentIndexedTable) loaded.as(IndexedTable.class);\n    Assert.assertNotNull(table);\n  }\n","date":"2020-08-21 05:12:39","endLine":126,"groupId":"7269","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSegmentizer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ab/4c45339cdcfd8fb60e4eba265d1019c254574b.src","preCode":"  public void testSegmentizer() throws IOException, SegmentLoadingException\n  {\n    final ObjectMapper mapper = new DefaultObjectMapper();\n    mapper.registerModule(new SegmentizerModule());\n    final IndexIO indexIO = new IndexIO(mapper, () -> 0);\n    mapper.setInjectableValues(\n        new InjectableValues.Std()\n            .addValue(ExprMacroTable.class.getName(), TestExprMacroTable.INSTANCE)\n            .addValue(ObjectMapper.class.getName(), mapper)\n            .addValue(IndexIO.class, indexIO)\n            .addValue(DataSegment.PruneSpecsHolder.class, DataSegment.PruneSpecsHolder.DEFAULT)\n    );\n\n    IndexMerger indexMerger = new IndexMergerV9(mapper, indexIO, OffHeapMemorySegmentWriteOutMediumFactory.instance());\n\n    SegmentizerFactory expectedFactory = new BroadcastJoinableMMappedQueryableSegmentizerFactory(\n        indexIO,\n        KEY_COLUMNS\n    );\n    Interval testInterval = Intervals.of(\"2011-01-12T00:00:00.000Z/2011-05-01T00:00:00.000Z\");\n    IncrementalIndex data = TestIndex.makeRealtimeIndex(\"druid.sample.numeric.tsv\");\n\n    List<String> columnNames = data.getColumnNames();\n    File segment = new File(temporaryFolder.newFolder(), \"segment\");\n    File persistedSegmentRoot = indexMerger.persist(\n        data,\n        testInterval,\n        segment,\n        new IndexSpec(\n            null,\n            null,\n            null,\n            null,\n            expectedFactory\n        ),\n        null\n    );\n\n    File factoryJson = new File(persistedSegmentRoot, \"factory.json\");\n    Assert.assertTrue(factoryJson.exists());\n    SegmentizerFactory factory = mapper.readValue(factoryJson, SegmentizerFactory.class);\n    Assert.assertTrue(factory instanceof BroadcastJoinableMMappedQueryableSegmentizerFactory);\n    Assert.assertEquals(expectedFactory, factory);\n\n    \r\n    final DataSegment dataSegment = new DataSegment(\n        TABLE_NAME,\n        testInterval,\n        DateTimes.nowUtc().toString(),\n        ImmutableMap.of(),\n        columnNames,\n        ImmutableList.of(),\n        null,\n        null,\n        persistedSegmentRoot.getTotalSpace()\n    );\n    final Segment loaded = factory.factorize(dataSegment, persistedSegmentRoot, false);\n\n    final BroadcastSegmentIndexedTable table = (BroadcastSegmentIndexedTable) loaded.as(IndexedTable.class);\n    Assert.assertNotNull(table);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/loading/BroadcastJoinableMMappedQueryableSegmentizerFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"},{"authorDate":"2020-06-02 07:36:32","commitOrder":2,"curCode":"  public void testDefaultSegmentizerPersist() throws IOException\n  {\n    IncrementalIndex data = TestIndex.makeRealtimeIndex(\"druid.sample.numeric.tsv\");\n    File segment = new File(temporaryFolder.newFolder(), \"segment\");\n    File persisted = INDEX_MERGER.persist(\n        data,\n        Intervals.of(\"2011-01-12T00:00:00.000Z/2011-05-01T00:00:00.000Z\"),\n        segment,\n        new IndexSpec(\n            null,\n            null,\n            null,\n            null,\n            null\n        ),\n        null\n    );\n\n    File factoryJson = new File(persisted, \"factory.json\");\n    Assert.assertTrue(factoryJson.exists());\n    SegmentizerFactory factory = JSON_MAPPER.readValue(factoryJson, SegmentizerFactory.class);\n    Assert.assertTrue(factory instanceof MMappedQueryableSegmentizerFactory);\n  }\n","date":"2020-06-02 07:36:32","endLine":99,"groupId":"4829","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultSegmentizerPersist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8b/4a8d3f5313403a18eb41ad57823b2e575fb823.src","preCode":"  public void testDefaultSegmentizerPersist() throws IOException\n  {\n    IncrementalIndex data = TestIndex.makeRealtimeIndex(\"druid.sample.numeric.tsv\");\n    File segment = new File(temporaryFolder.newFolder(), \"segment\");\n    File persisted = INDEX_MERGER.persist(\n        data,\n        Intervals.of(\"2011-01-12T00:00:00.000Z/2011-05-01T00:00:00.000Z\"),\n        segment,\n        new IndexSpec(\n            null,\n            null,\n            null,\n            null,\n            null\n        ),\n        null\n    );\n\n    File factoryJson = new File(persisted, \"factory.json\");\n    Assert.assertTrue(factoryJson.exists());\n    SegmentizerFactory factory = JSON_MAPPER.readValue(factoryJson, SegmentizerFactory.class);\n    Assert.assertTrue(factory instanceof MMappedQueryableSegmentizerFactory);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/CustomSegmentizerFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"NB"}],"commitId":"7620b0c54e31ed466adf149b2b7fbd815c4c70ce","commitMessage":"@@@Segment backed broadcast join IndexedTable (#10224)\n\n* Segment backed broadcast join IndexedTable\n\n* fix comments\n\n* fix tests\n\n* sharing is caring\n\n* fix test\n\n* i hope this doesnt fix it\n\n* filter by schema to maybe fix test\n\n* changes\n\n* close join stuffs so it does not leak.  allow table to directly make selector factory\n\n* oops\n\n* update comment\n\n* review stuffs\n\n* better check","date":"2020-08-21 05:12:39","modifiedFileCount":"35","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-06-02 07:36:32","codes":[{"authorDate":"2021-01-17 11:53:30","commitOrder":3,"curCode":"  public void testSegmentizer() throws IOException, SegmentLoadingException\n  {\n    final ObjectMapper mapper = new DefaultObjectMapper();\n    mapper.registerModule(new SegmentizerModule());\n    final IndexIO indexIO = new IndexIO(mapper, () -> 0);\n    mapper.setInjectableValues(\n        new InjectableValues.Std()\n            .addValue(ExprMacroTable.class.getName(), TestExprMacroTable.INSTANCE)\n            .addValue(ObjectMapper.class.getName(), mapper)\n            .addValue(IndexIO.class, indexIO)\n            .addValue(DataSegment.PruneSpecsHolder.class, DataSegment.PruneSpecsHolder.DEFAULT)\n    );\n\n    IndexMerger indexMerger = new IndexMergerV9(mapper, indexIO, OffHeapMemorySegmentWriteOutMediumFactory.instance());\n\n    SegmentizerFactory expectedFactory = new BroadcastJoinableMMappedQueryableSegmentizerFactory(\n        indexIO,\n        KEY_COLUMNS\n    );\n    Interval testInterval = Intervals.of(\"2011-01-12T00:00:00.000Z/2011-05-01T00:00:00.000Z\");\n    IncrementalIndex data = TestIndex.makeRealtimeIndex(\"druid.sample.numeric.tsv\");\n\n    List<String> columnNames = data.getColumnNames();\n    File segment = new File(temporaryFolder.newFolder(), \"segment\");\n    File persistedSegmentRoot = indexMerger.persist(\n        data,\n        testInterval,\n        segment,\n        new IndexSpec(\n            null,\n            null,\n            null,\n            null,\n            expectedFactory\n        ),\n        null\n    );\n\n    File factoryJson = new File(persistedSegmentRoot, \"factory.json\");\n    Assert.assertTrue(factoryJson.exists());\n    SegmentizerFactory factory = mapper.readValue(factoryJson, SegmentizerFactory.class);\n    Assert.assertTrue(factory instanceof BroadcastJoinableMMappedQueryableSegmentizerFactory);\n    Assert.assertEquals(expectedFactory, factory);\n\n    \r\n    final DataSegment dataSegment = new DataSegment(\n        TABLE_NAME,\n        testInterval,\n        DateTimes.nowUtc().toString(),\n        ImmutableMap.of(),\n        columnNames,\n        ImmutableList.of(),\n        null,\n        null,\n        persistedSegmentRoot.getTotalSpace()\n    );\n    final Segment loaded = factory.factorize(dataSegment, persistedSegmentRoot, false, SegmentLazyLoadFailCallback.NOOP);\n\n    final BroadcastSegmentIndexedTable table = (BroadcastSegmentIndexedTable) loaded.as(IndexedTable.class);\n    Assert.assertNotNull(table);\n  }\n","date":"2021-01-17 11:53:30","endLine":127,"groupId":"105723","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testSegmentizer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0e/8ac933a6ce46b2014b10f9231b5edc91c6bfd9.src","preCode":"  public void testSegmentizer() throws IOException, SegmentLoadingException\n  {\n    final ObjectMapper mapper = new DefaultObjectMapper();\n    mapper.registerModule(new SegmentizerModule());\n    final IndexIO indexIO = new IndexIO(mapper, () -> 0);\n    mapper.setInjectableValues(\n        new InjectableValues.Std()\n            .addValue(ExprMacroTable.class.getName(), TestExprMacroTable.INSTANCE)\n            .addValue(ObjectMapper.class.getName(), mapper)\n            .addValue(IndexIO.class, indexIO)\n            .addValue(DataSegment.PruneSpecsHolder.class, DataSegment.PruneSpecsHolder.DEFAULT)\n    );\n\n    IndexMerger indexMerger = new IndexMergerV9(mapper, indexIO, OffHeapMemorySegmentWriteOutMediumFactory.instance());\n\n    SegmentizerFactory expectedFactory = new BroadcastJoinableMMappedQueryableSegmentizerFactory(\n        indexIO,\n        KEY_COLUMNS\n    );\n    Interval testInterval = Intervals.of(\"2011-01-12T00:00:00.000Z/2011-05-01T00:00:00.000Z\");\n    IncrementalIndex data = TestIndex.makeRealtimeIndex(\"druid.sample.numeric.tsv\");\n\n    List<String> columnNames = data.getColumnNames();\n    File segment = new File(temporaryFolder.newFolder(), \"segment\");\n    File persistedSegmentRoot = indexMerger.persist(\n        data,\n        testInterval,\n        segment,\n        new IndexSpec(\n            null,\n            null,\n            null,\n            null,\n            expectedFactory\n        ),\n        null\n    );\n\n    File factoryJson = new File(persistedSegmentRoot, \"factory.json\");\n    Assert.assertTrue(factoryJson.exists());\n    SegmentizerFactory factory = mapper.readValue(factoryJson, SegmentizerFactory.class);\n    Assert.assertTrue(factory instanceof BroadcastJoinableMMappedQueryableSegmentizerFactory);\n    Assert.assertEquals(expectedFactory, factory);\n\n    \r\n    final DataSegment dataSegment = new DataSegment(\n        TABLE_NAME,\n        testInterval,\n        DateTimes.nowUtc().toString(),\n        ImmutableMap.of(),\n        columnNames,\n        ImmutableList.of(),\n        null,\n        null,\n        persistedSegmentRoot.getTotalSpace()\n    );\n    final Segment loaded = factory.factorize(dataSegment, persistedSegmentRoot, false);\n\n    final BroadcastSegmentIndexedTable table = (BroadcastSegmentIndexedTable) loaded.as(IndexedTable.class);\n    Assert.assertNotNull(table);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/loading/BroadcastJoinableMMappedQueryableSegmentizerFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-06-02 07:36:32","commitOrder":3,"curCode":"  public void testDefaultSegmentizerPersist() throws IOException\n  {\n    IncrementalIndex data = TestIndex.makeRealtimeIndex(\"druid.sample.numeric.tsv\");\n    File segment = new File(temporaryFolder.newFolder(), \"segment\");\n    File persisted = INDEX_MERGER.persist(\n        data,\n        Intervals.of(\"2011-01-12T00:00:00.000Z/2011-05-01T00:00:00.000Z\"),\n        segment,\n        new IndexSpec(\n            null,\n            null,\n            null,\n            null,\n            null\n        ),\n        null\n    );\n\n    File factoryJson = new File(persisted, \"factory.json\");\n    Assert.assertTrue(factoryJson.exists());\n    SegmentizerFactory factory = JSON_MAPPER.readValue(factoryJson, SegmentizerFactory.class);\n    Assert.assertTrue(factory instanceof MMappedQueryableSegmentizerFactory);\n  }\n","date":"2020-06-02 07:36:32","endLine":99,"groupId":"105723","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultSegmentizerPersist","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8b/4a8d3f5313403a18eb41ad57823b2e575fb823.src","preCode":"  public void testDefaultSegmentizerPersist() throws IOException\n  {\n    IncrementalIndex data = TestIndex.makeRealtimeIndex(\"druid.sample.numeric.tsv\");\n    File segment = new File(temporaryFolder.newFolder(), \"segment\");\n    File persisted = INDEX_MERGER.persist(\n        data,\n        Intervals.of(\"2011-01-12T00:00:00.000Z/2011-05-01T00:00:00.000Z\"),\n        segment,\n        new IndexSpec(\n            null,\n            null,\n            null,\n            null,\n            null\n        ),\n        null\n    );\n\n    File factoryJson = new File(persisted, \"factory.json\");\n    Assert.assertTrue(factoryJson.exists());\n    SegmentizerFactory factory = JSON_MAPPER.readValue(factoryJson, SegmentizerFactory.class);\n    Assert.assertTrue(factory instanceof MMappedQueryableSegmentizerFactory);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/CustomSegmentizerFactoryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"2590ad4f67fab99760eb4562d84b34e8aa55f6c1","commitMessage":"@@@Historical unloads damaged segments automatically when lazy on start. (#10688)\n\n* ready to test\n\n* tested on dev cluster\n\n* tested\n\n* code review\n\n* add UTs\n\n* add UTs\n\n* ut passed\n\n* ut passed\n\n* opti imports\n\n* done\n\n* done\n\n* fix checkstyle\n\n* modify uts\n\n* modify logs\n\n* changing the package of SegmentLazyLoadFailCallback.java to org.apache.druid.segment\n\n* merge from master\n\n* modify import orders\n\n* merge from master\n\n* merge from master\n\n* modify logs\n\n* modify docs\n\n* modify logs to rerun ci\n\n* modify logs to rerun ci\n\n* modify logs to rerun ci\n\n* modify logs to rerun ci\n\n* modify logs to rerun ci\n\n* modify logs to rerun ci\n\n* modify logs to rerun ci\n\n* modify logs to rerun ci\n\nCo-authored-by: yuezhang <yuezhang@freewheel.tv>","date":"2021-01-17 11:53:30","modifiedFileCount":"20","status":"M","submitter":"zhangyue19921010"}]
