[{"authorTime":"2020-04-17 13:12:20","codes":[{"authorDate":"2020-04-17 13:12:20","commitOrder":5,"curCode":"  public void test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    );\n    Filter originalFilter = new SelectorFilter(\"page\", \"Peremptory norm\");\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        originalFilter,\n        false,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new SelectorFilter(\"page\", \"Peremptory norm\"),\n        ImmutableList.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"New South Wales\", \"Australia\"}\n        )\n    );\n  }\n","date":"2020-04-17 13:12:20","endLine":1513,"groupId":"21313","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ae/97b7ea33bc223c0f235299d57ec05fccf430a8.src","preCode":"  public void test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    );\n    Filter originalFilter = new SelectorFilter(\"page\", \"Peremptory norm\");\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        originalFilter,\n        false,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new SelectorFilter(\"page\", \"Peremptory norm\"),\n        ImmutableList.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"New South Wales\", \"Australia\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1464,"status":"MB"},{"authorDate":"2020-04-17 13:12:20","commitOrder":5,"curCode":"  public void test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    );\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n            new SelectorFilter(\"rtc.countryName\", \"United States\"),\n            new OrFilter(\n                ImmutableList.of(\n                    new SelectorFilter(\"page\", \"DirecTV\"),\n                    new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                )\n            ),\n            new BoundFilter(new BoundDimFilter(\n                \"namespace\",\n                \"Main\",\n                \"Main\",\n                false,\n                false,\n                null,\n                null,\n                null\n            ))\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        originalFilter,\n        true,\n        false,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n                new BoundFilter(new BoundDimFilter(\n                    \"namespace\",\n                    \"Main\",\n                    \"Main\",\n                    false,\n                    false,\n                    null,\n                    null,\n                    null\n                ))\n            )\n        ),\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"rtc.countryName\", \"United States\"),\n                new OrFilter(\n                    ImmutableList.of(\n                        new SelectorFilter(\"page\", \"DirecTV\"),\n                        new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                    )\n                )\n            )\n        ),\n        ImmutableList.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"President of India\", \"California\", \"United States\"},\n            new Object[]{\"Otjiwarongo Airport\", \"California\", \"United States\"},\n            new Object[]{\"DirecTV\", \"North Carolina\", \"United States\"},\n            new Object[]{\"Carlo Curti\", \"California\", \"United States\"},\n            new Object[]{\"Old Anatolian Turkish\", \"Virginia\", \"United States\"}\n        )\n    );\n  }\n","date":"2020-04-17 13:12:20","endLine":1613,"groupId":"14370","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ae/97b7ea33bc223c0f235299d57ec05fccf430a8.src","preCode":"  public void test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    );\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n            new SelectorFilter(\"rtc.countryName\", \"United States\"),\n            new OrFilter(\n                ImmutableList.of(\n                    new SelectorFilter(\"page\", \"DirecTV\"),\n                    new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                )\n            ),\n            new BoundFilter(new BoundDimFilter(\n                \"namespace\",\n                \"Main\",\n                \"Main\",\n                false,\n                false,\n                null,\n                null,\n                null\n            ))\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        originalFilter,\n        true,\n        false,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n                new BoundFilter(new BoundDimFilter(\n                    \"namespace\",\n                    \"Main\",\n                    \"Main\",\n                    false,\n                    false,\n                    null,\n                    null,\n                    null\n                ))\n            )\n        ),\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"rtc.countryName\", \"United States\"),\n                new OrFilter(\n                    ImmutableList.of(\n                        new SelectorFilter(\"page\", \"DirecTV\"),\n                        new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                    )\n                )\n            )\n        ),\n        ImmutableList.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"President of India\", \"California\", \"United States\"},\n            new Object[]{\"Otjiwarongo Airport\", \"California\", \"United States\"},\n            new Object[]{\"DirecTV\", \"North Carolina\", \"United States\"},\n            new Object[]{\"Carlo Curti\", \"California\", \"United States\"},\n            new Object[]{\"Old Anatolian Turkish\", \"Virginia\", \"United States\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1516,"status":"MB"}],"commitId":"e677c62484bf02379ff8cb7855de1e3e43a4b4b1","commitMessage":"@@@document useFilterCNF query context parameter (#9647)\n\n* document useFilterCNF query context parameter\n\n* move context key to QueryContexts\n\n* Update .spelling","date":"2020-04-17 13:12:20","modifiedFileCount":"7","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-05-09 14:45:35","codes":[{"authorDate":"2020-05-09 14:45:35","commitOrder":6,"curCode":"  public void test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    );\n    Filter originalFilter = new SelectorFilter(\"page\", \"Peremptory norm\");\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        originalFilter,\n        false,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new SelectorFilter(\"page\", \"Peremptory norm\"),\n        ImmutableSet.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"New South Wales\", \"Australia\"}\n        )\n    );\n  }\n","date":"2020-05-09 14:45:35","endLine":2024,"groupId":"21313","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/3b35937891c8ecc8e93ccba7c7ac9803bcb8dd.src","preCode":"  public void test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    );\n    Filter originalFilter = new SelectorFilter(\"page\", \"Peremptory norm\");\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        originalFilter,\n        false,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new SelectorFilter(\"page\", \"Peremptory norm\"),\n        ImmutableList.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"New South Wales\", \"Australia\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1975,"status":"M"},{"authorDate":"2020-05-09 14:45:35","commitOrder":6,"curCode":"  public void test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    );\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n            new SelectorFilter(\"rtc.countryName\", \"United States\"),\n            new OrFilter(\n                ImmutableList.of(\n                    new SelectorFilter(\"page\", \"DirecTV\"),\n                    new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                )\n            ),\n            new BoundFilter(new BoundDimFilter(\n                \"namespace\",\n                \"Main\",\n                \"Main\",\n                false,\n                false,\n                null,\n                null,\n                null\n            ))\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        originalFilter,\n        true,\n        false,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n                new BoundFilter(new BoundDimFilter(\n                    \"namespace\",\n                    \"Main\",\n                    \"Main\",\n                    false,\n                    false,\n                    null,\n                    null,\n                    null\n                ))\n            )\n        ),\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"rtc.countryName\", \"United States\"),\n                new OrFilter(\n                    ImmutableList.of(\n                        new SelectorFilter(\"page\", \"DirecTV\"),\n                        new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                    )\n                )\n            )\n        ),\n        ImmutableSet.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"President of India\", \"California\", \"United States\"},\n            new Object[]{\"Otjiwarongo Airport\", \"California\", \"United States\"},\n            new Object[]{\"DirecTV\", \"North Carolina\", \"United States\"},\n            new Object[]{\"Carlo Curti\", \"California\", \"United States\"},\n            new Object[]{\"Old Anatolian Turkish\", \"Virginia\", \"United States\"}\n        )\n    );\n  }\n","date":"2020-05-09 14:45:35","endLine":2124,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/3b35937891c8ecc8e93ccba7c7ac9803bcb8dd.src","preCode":"  public void test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    );\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n            new SelectorFilter(\"rtc.countryName\", \"United States\"),\n            new OrFilter(\n                ImmutableList.of(\n                    new SelectorFilter(\"page\", \"DirecTV\"),\n                    new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                )\n            ),\n            new BoundFilter(new BoundDimFilter(\n                \"namespace\",\n                \"Main\",\n                \"Main\",\n                false,\n                false,\n                null,\n                null,\n                null\n            ))\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        originalFilter,\n        true,\n        false,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n                new BoundFilter(new BoundDimFilter(\n                    \"namespace\",\n                    \"Main\",\n                    \"Main\",\n                    false,\n                    false,\n                    null,\n                    null,\n                    null\n                ))\n            )\n        ),\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"rtc.countryName\", \"United States\"),\n                new OrFilter(\n                    ImmutableList.of(\n                        new SelectorFilter(\"page\", \"DirecTV\"),\n                        new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                    )\n                )\n            )\n        ),\n        ImmutableList.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"President of India\", \"California\", \"United States\"},\n            new Object[]{\"Otjiwarongo Airport\", \"California\", \"United States\"},\n            new Object[]{\"DirecTV\", \"North Carolina\", \"United States\"},\n            new Object[]{\"Carlo Curti\", \"California\", \"United States\"},\n            new Object[]{\"Old Anatolian Turkish\", \"Virginia\", \"United States\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2027,"status":"M"}],"commitId":"16d293d6e0d81963af3b3d468efd658317d91052","commitMessage":"@@@Directly rewrite filters on RHS join columns into LHS equivalents (#9818)\n\n* Directly rewrite filters on RHS join columns into LHS equivalents\n\n* PR comments\n\n* Fix inspection\n\n* Revert unnecessary ExprMacroTable change\n\n* Fix build after merge\n\n* Address PR comments","date":"2020-05-09 14:45:35","modifiedFileCount":"30","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2020-05-30 06:03:35","codes":[{"authorDate":"2020-05-30 06:03:35","commitOrder":7,"curCode":"  public void test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown()\n  {\n    JoinableClauses joinableClauses = JoinableClauses.fromList(ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    ));\n    Filter originalFilter = new SelectorFilter(\"page\", \"Peremptory norm\");\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        originalFilter,\n        false,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses.getJoinableClauses(),\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new SelectorFilter(\"page\", \"Peremptory norm\"),\n        ImmutableSet.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"New South Wales\", \"Australia\"}\n        )\n    );\n  }\n","date":"2020-05-30 06:03:35","endLine":2025,"groupId":"14368","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/e480be54edc4791e0aebd5a773b21c5ef10af4.src","preCode":"  public void test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    );\n    Filter originalFilter = new SelectorFilter(\"page\", \"Peremptory norm\");\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        originalFilter,\n        false,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new SelectorFilter(\"page\", \"Peremptory norm\"),\n        ImmutableSet.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"New South Wales\", \"Australia\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1976,"status":"M"},{"authorDate":"2020-05-30 06:03:35","commitOrder":7,"curCode":"  public void test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite()\n  {\n    JoinableClauses joinableClauses = JoinableClauses.fromList(ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    ));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n            new SelectorFilter(\"rtc.countryName\", \"United States\"),\n            new OrFilter(\n                ImmutableList.of(\n                    new SelectorFilter(\"page\", \"DirecTV\"),\n                    new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                )\n            ),\n            new BoundFilter(new BoundDimFilter(\n                \"namespace\",\n                \"Main\",\n                \"Main\",\n                false,\n                false,\n                null,\n                null,\n                null\n            ))\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        originalFilter,\n        true,\n        false,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses.getJoinableClauses(),\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n                new BoundFilter(new BoundDimFilter(\n                    \"namespace\",\n                    \"Main\",\n                    \"Main\",\n                    false,\n                    false,\n                    null,\n                    null,\n                    null\n                ))\n            )\n        ),\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"rtc.countryName\", \"United States\"),\n                new OrFilter(\n                    ImmutableList.of(\n                        new SelectorFilter(\"page\", \"DirecTV\"),\n                        new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                    )\n                )\n            )\n        ),\n        ImmutableSet.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"President of India\", \"California\", \"United States\"},\n            new Object[]{\"Otjiwarongo Airport\", \"California\", \"United States\"},\n            new Object[]{\"DirecTV\", \"North Carolina\", \"United States\"},\n            new Object[]{\"Carlo Curti\", \"California\", \"United States\"},\n            new Object[]{\"Old Anatolian Turkish\", \"Virginia\", \"United States\"}\n        )\n    );\n  }\n","date":"2020-05-30 06:03:35","endLine":2125,"groupId":"14370","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/e480be54edc4791e0aebd5a773b21c5ef10af4.src","preCode":"  public void test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite()\n  {\n    List<JoinableClause> joinableClauses = ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    );\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n            new SelectorFilter(\"rtc.countryName\", \"United States\"),\n            new OrFilter(\n                ImmutableList.of(\n                    new SelectorFilter(\"page\", \"DirecTV\"),\n                    new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                )\n            ),\n            new BoundFilter(new BoundDimFilter(\n                \"namespace\",\n                \"Main\",\n                \"Main\",\n                false,\n                false,\n                null,\n                null,\n                null\n            ))\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        originalFilter,\n        true,\n        false,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses,\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n                new BoundFilter(new BoundDimFilter(\n                    \"namespace\",\n                    \"Main\",\n                    \"Main\",\n                    false,\n                    false,\n                    null,\n                    null,\n                    null\n                ))\n            )\n        ),\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"rtc.countryName\", \"United States\"),\n                new OrFilter(\n                    ImmutableList.of(\n                        new SelectorFilter(\"page\", \"DirecTV\"),\n                        new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                    )\n                )\n            )\n        ),\n        ImmutableSet.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"President of India\", \"California\", \"United States\"},\n            new Object[]{\"Otjiwarongo Airport\", \"California\", \"United States\"},\n            new Object[]{\"DirecTV\", \"North Carolina\", \"United States\"},\n            new Object[]{\"Carlo Curti\", \"California\", \"United States\"},\n            new Object[]{\"Old Anatolian Turkish\", \"Virginia\", \"United States\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2028,"status":"M"}],"commitId":"9c40bebc02dfd13e1bd58f2f45fd24424e4530a4","commitMessage":"@@@Refactor JoinFilterAnalyzer - part 2 (#9929)\n\n* Refactor JoinFilterAnalyzer\n\nThis patch attempts to make it easier to follow the join filter analysis code\nwith the hope of making it easier to add rewrite optimizations in the future.\n\nTo keep the patch small and easy to review.  this is the first of at least 2\npatches that are planned.\n\nThis patch adds a builder to the Pre-Analysis.  so that it is easier to\ninstantiate the preAnalysis. It also moves some of the filter normalization\ncode out to Fitlers with associated tests.\n\n* fix tests\n\n* Refactor JoinFilterAnalyzer - part 2\n\nThis change introduces the following components:\n * RhsRewriteCandidates - a wrapper for a list of candidates and associated\n     functions to operate on the set of candidates.\n * JoinableClauses - a wrapper for the list of JoinableClause that represent\n     a join condition and the associated functions to operate on the clauses.\n * Equiconditions - a wrapper representing the equiconditions that are used\n     in the join condition.\n\nAnd associated test changes.\n\nThis refactoring surfaced 2 bugs:\n - Missing equals and hashcode implementation for RhsRewriteCandidate.  thus\n   allowing potential duplicates in the rhs rewrite candidates\n - Missing Filter#supportsRequiredColumnRewrite check in\n   analyzeJoinFilterClause.  which could result in UnsupportedOperationException\n   being thrown by the filter\n\n* fix compile error\n\n* remove unused class","date":"2020-05-30 06:03:35","modifiedFileCount":"10","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2020-06-19 12:32:29","codes":[{"authorDate":"2020-06-19 12:32:29","commitOrder":8,"curCode":"  public void test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown()\n  {\n    JoinableClauses joinableClauses = JoinableClauses.fromList(ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    ));\n    Filter originalFilter = new SelectorFilter(\"page\", \"Peremptory norm\");\n\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = new JoinFilterPreAnalysisGroup(\n        new JoinFilterRewriteConfig(\n            false,\n            true,\n            true,\n            QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n        ),\n        true\n    );\n    joinFilterPreAnalysisGroup.computeJoinFilterPreAnalysisIfAbsent(\n        originalFilter,\n        joinableClauses.getJoinableClauses(),\n        VirtualColumns.EMPTY\n    );\n\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses.getJoinableClauses(),\n        joinFilterPreAnalysisGroup\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"New South Wales\", \"Australia\"}\n        )\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new SelectorFilter(\"page\", \"Peremptory norm\"),\n        ImmutableSet.of()\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = joinFilterPreAnalysisGroup.getPreAnalysisForSingleLevelMode();\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","date":"2020-06-19 12:32:29","endLine":2166,"groupId":"7806","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/89/3e0542b8ceeadecc91f82ca360b687e72b148e.src","preCode":"  public void test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown()\n  {\n    JoinableClauses joinableClauses = JoinableClauses.fromList(ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    ));\n    Filter originalFilter = new SelectorFilter(\"page\", \"Peremptory norm\");\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        originalFilter,\n        false,\n        true,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses.getJoinableClauses(),\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new SelectorFilter(\"page\", \"Peremptory norm\"),\n        ImmutableSet.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"New South Wales\", \"Australia\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2109,"status":"M"},{"authorDate":"2020-06-19 12:32:29","commitOrder":8,"curCode":"  public void test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite()\n  {\n    JoinableClauses joinableClauses = JoinableClauses.fromList(ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    ));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n            new SelectorFilter(\"rtc.countryName\", \"United States\"),\n            new OrFilter(\n                ImmutableList.of(\n                    new SelectorFilter(\"page\", \"DirecTV\"),\n                    new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                )\n            ),\n            new BoundFilter(new BoundDimFilter(\n                \"namespace\",\n                \"Main\",\n                \"Main\",\n                false,\n                false,\n                null,\n                null,\n                null\n            ))\n        )\n    );\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = new JoinFilterPreAnalysisGroup(\n        new JoinFilterRewriteConfig(\n            true,\n            false,\n            true,\n            QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n        ),\n        true\n    );\n    joinFilterPreAnalysisGroup.computeJoinFilterPreAnalysisIfAbsent(\n        originalFilter,\n        joinableClauses.getJoinableClauses(),\n        VirtualColumns.EMPTY\n    );\n\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses.getJoinableClauses(),\n        joinFilterPreAnalysisGroup\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"President of India\", \"California\", \"United States\"},\n            new Object[]{\"Otjiwarongo Airport\", \"California\", \"United States\"},\n            new Object[]{\"DirecTV\", \"North Carolina\", \"United States\"},\n            new Object[]{\"Carlo Curti\", \"California\", \"United States\"},\n            new Object[]{\"Old Anatolian Turkish\", \"Virginia\", \"United States\"}\n        )\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n                new BoundFilter(new BoundDimFilter(\n                    \"namespace\",\n                    \"Main\",\n                    \"Main\",\n                    false,\n                    false,\n                    null,\n                    null,\n                    null\n                ))\n            )\n        ),\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"rtc.countryName\", \"United States\"),\n                new OrFilter(\n                    ImmutableList.of(\n                        new SelectorFilter(\"page\", \"DirecTV\"),\n                        new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                    )\n                )\n            )\n        ),\n        ImmutableSet.of()\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = joinFilterPreAnalysisGroup.getPreAnalysisForSingleLevelMode();\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","date":"2020-06-19 12:32:29","endLine":2274,"groupId":"7806","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/89/3e0542b8ceeadecc91f82ca360b687e72b148e.src","preCode":"  public void test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite()\n  {\n    JoinableClauses joinableClauses = JoinableClauses.fromList(ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    ));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n            new SelectorFilter(\"rtc.countryName\", \"United States\"),\n            new OrFilter(\n                ImmutableList.of(\n                    new SelectorFilter(\"page\", \"DirecTV\"),\n                    new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                )\n            ),\n            new BoundFilter(new BoundDimFilter(\n                \"namespace\",\n                \"Main\",\n                \"Main\",\n                false,\n                false,\n                null,\n                null,\n                null\n            ))\n        )\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        joinableClauses,\n        VirtualColumns.EMPTY,\n        originalFilter,\n        true,\n        false,\n        true,\n        QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n    );\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses.getJoinableClauses(),\n        joinFilterPreAnalysis\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n                new BoundFilter(new BoundDimFilter(\n                    \"namespace\",\n                    \"Main\",\n                    \"Main\",\n                    false,\n                    false,\n                    null,\n                    null,\n                    null\n                ))\n            )\n        ),\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"rtc.countryName\", \"United States\"),\n                new OrFilter(\n                    ImmutableList.of(\n                        new SelectorFilter(\"page\", \"DirecTV\"),\n                        new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                    )\n                )\n            )\n        ),\n        ImmutableSet.of()\n    );\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"President of India\", \"California\", \"United States\"},\n            new Object[]{\"Otjiwarongo Airport\", \"California\", \"United States\"},\n            new Object[]{\"DirecTV\", \"North Carolina\", \"United States\"},\n            new Object[]{\"Carlo Curti\", \"California\", \"United States\"},\n            new Object[]{\"Old Anatolian Turkish\", \"Virginia\", \"United States\"}\n        )\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2169,"status":"M"}],"commitId":"37e150c0755c0efba609601b1122cd6bc8a271fb","commitMessage":"@@@Fix join filter rewrites with nested queries (#10015)\n\n* Fix join filter rewrites with nested queries\n\n* Fix test.  inspection.  coverage\n\n* Remove clauses from group key\n\n* Fix import order\n\nCo-authored-by: Gian Merlino <gianmerlino@gmail.com>","date":"2020-06-19 12:32:29","modifiedFileCount":"20","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2020-07-01 10:14:22","codes":[{"authorDate":"2020-07-01 10:14:22","commitOrder":9,"curCode":"  public void test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown()\n  {\n    JoinableClauses joinableClauses = JoinableClauses.fromList(ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    ));\n    Filter originalFilter = new SelectorFilter(\"page\", \"Peremptory norm\");\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        new JoinFilterPreAnalysisKey(\n            new JoinFilterRewriteConfig(\n                false,\n                true,\n                true,\n                QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n            ),\n            joinableClauses.getJoinableClauses(),\n            VirtualColumns.EMPTY,\n            originalFilter\n        )\n    );\n\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses.getJoinableClauses(),\n        joinFilterPreAnalysis\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"New South Wales\", \"Australia\"}\n        )\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new SelectorFilter(\"page\", \"Peremptory norm\"),\n        ImmutableSet.of()\n    );\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","date":"2020-07-01 10:14:22","endLine":2134,"groupId":"7806","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ed/7e7c7759887a1bbaadcc28b4d41944a1e6078b.src","preCode":"  public void test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown()\n  {\n    JoinableClauses joinableClauses = JoinableClauses.fromList(ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    ));\n    Filter originalFilter = new SelectorFilter(\"page\", \"Peremptory norm\");\n\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = new JoinFilterPreAnalysisGroup(\n        new JoinFilterRewriteConfig(\n            false,\n            true,\n            true,\n            QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n        ),\n        true\n    );\n    joinFilterPreAnalysisGroup.computeJoinFilterPreAnalysisIfAbsent(\n        originalFilter,\n        joinableClauses.getJoinableClauses(),\n        VirtualColumns.EMPTY\n    );\n\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses.getJoinableClauses(),\n        joinFilterPreAnalysisGroup\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"New South Wales\", \"Australia\"}\n        )\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new SelectorFilter(\"page\", \"Peremptory norm\"),\n        ImmutableSet.of()\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = joinFilterPreAnalysisGroup.getPreAnalysisForSingleLevelMode();\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2079,"status":"M"},{"authorDate":"2020-07-01 10:14:22","commitOrder":9,"curCode":"  public void test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite()\n  {\n    JoinableClauses joinableClauses = JoinableClauses.fromList(ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    ));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n            new SelectorFilter(\"rtc.countryName\", \"United States\"),\n            new OrFilter(\n                ImmutableList.of(\n                    new SelectorFilter(\"page\", \"DirecTV\"),\n                    new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                )\n            ),\n            new BoundFilter(new BoundDimFilter(\n                \"namespace\",\n                \"Main\",\n                \"Main\",\n                false,\n                false,\n                null,\n                null,\n                null\n            ))\n        )\n    );\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        new JoinFilterPreAnalysisKey(\n            new JoinFilterRewriteConfig(\n                true,\n                false,\n                true,\n                QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n            ),\n            joinableClauses.getJoinableClauses(),\n            VirtualColumns.EMPTY,\n            originalFilter\n        )\n    );\n\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses.getJoinableClauses(),\n        joinFilterPreAnalysis\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"President of India\", \"California\", \"United States\"},\n            new Object[]{\"Otjiwarongo Airport\", \"California\", \"United States\"},\n            new Object[]{\"DirecTV\", \"North Carolina\", \"United States\"},\n            new Object[]{\"Carlo Curti\", \"California\", \"United States\"},\n            new Object[]{\"Old Anatolian Turkish\", \"Virginia\", \"United States\"}\n        )\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n                new BoundFilter(new BoundDimFilter(\n                    \"namespace\",\n                    \"Main\",\n                    \"Main\",\n                    false,\n                    false,\n                    null,\n                    null,\n                    null\n                ))\n            )\n        ),\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"rtc.countryName\", \"United States\"),\n                new OrFilter(\n                    ImmutableList.of(\n                        new SelectorFilter(\"page\", \"DirecTV\"),\n                        new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                    )\n                )\n            )\n        ),\n        ImmutableSet.of()\n    );\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","date":"2020-07-01 10:14:22","endLine":2241,"groupId":"7806","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ed/7e7c7759887a1bbaadcc28b4d41944a1e6078b.src","preCode":"  public void test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite()\n  {\n    JoinableClauses joinableClauses = JoinableClauses.fromList(ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    ));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n            new SelectorFilter(\"rtc.countryName\", \"United States\"),\n            new OrFilter(\n                ImmutableList.of(\n                    new SelectorFilter(\"page\", \"DirecTV\"),\n                    new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                )\n            ),\n            new BoundFilter(new BoundDimFilter(\n                \"namespace\",\n                \"Main\",\n                \"Main\",\n                false,\n                false,\n                null,\n                null,\n                null\n            ))\n        )\n    );\n    JoinFilterPreAnalysisGroup joinFilterPreAnalysisGroup = new JoinFilterPreAnalysisGroup(\n        new JoinFilterRewriteConfig(\n            true,\n            false,\n            true,\n            QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n        ),\n        true\n    );\n    joinFilterPreAnalysisGroup.computeJoinFilterPreAnalysisIfAbsent(\n        originalFilter,\n        joinableClauses.getJoinableClauses(),\n        VirtualColumns.EMPTY\n    );\n\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses.getJoinableClauses(),\n        joinFilterPreAnalysisGroup\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"President of India\", \"California\", \"United States\"},\n            new Object[]{\"Otjiwarongo Airport\", \"California\", \"United States\"},\n            new Object[]{\"DirecTV\", \"North Carolina\", \"United States\"},\n            new Object[]{\"Carlo Curti\", \"California\", \"United States\"},\n            new Object[]{\"Old Anatolian Turkish\", \"Virginia\", \"United States\"}\n        )\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n                new BoundFilter(new BoundDimFilter(\n                    \"namespace\",\n                    \"Main\",\n                    \"Main\",\n                    false,\n                    false,\n                    null,\n                    null,\n                    null\n                ))\n            )\n        ),\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"rtc.countryName\", \"United States\"),\n                new OrFilter(\n                    ImmutableList.of(\n                        new SelectorFilter(\"page\", \"DirecTV\"),\n                        new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                    )\n                )\n            )\n        ),\n        ImmutableSet.of()\n    );\n    JoinFilterPreAnalysis joinFilterPreAnalysis = joinFilterPreAnalysisGroup.getPreAnalysisForSingleLevelMode();\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2137,"status":"M"}],"commitId":"5faa897a342096b2ac88587ad62e6e15022b01dd","commitMessage":"@@@Join filter pre-analysis simplifications and sanity checks. (#10104)\n\n* Join filter pre-analysis simplifications and sanity checks.\n\n- At pre-analysis time.  only compute pre-analysis for the innermost\n  root query.  since this is the one that will run on the join that involves\n  the base datasource. Previously.  pre-analyses were computed for multiple\n  levels of the query.  some of which were unnecessary.\n- Remove JoinFilterPreAnalysisGroup and join query level gathering code. \n  since they existed to support precomputation of multiple pre-analyses.\n- Embed JoinFilterPreAnalysisKey into JoinFilterPreAnalysis and use it to\n  sanity check?at processing time that the correct pre-analysis was done.\n\nTangentially related changes:\n\n- Remove prioritizeAndLaneQuery functionality from LocalQuerySegmentWalker.\n  The computed priority and lanes were not being used.\n- Add \"getBaseQuery\" method to DataSourceAnalysis to support identification\n  of the proper subquery for filter pre-analysis.\n\n* Fix compilation errors.\n\n* Adjust tests.","date":"2020-07-01 10:14:22","modifiedFileCount":"20","status":"M","submitter":"Gian Merlino"},{"authorTime":"2021-04-15 01:49:27","codes":[{"authorDate":"2021-04-15 01:49:27","commitOrder":10,"curCode":"  public void test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown()\n  {\n    JoinableClauses joinableClauses = JoinableClauses.fromList(ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    ));\n    Filter originalFilter = new SelectorFilter(\"page\", \"Peremptory norm\");\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        new JoinFilterPreAnalysisKey(\n            new JoinFilterRewriteConfig(\n                false,\n                true,\n                true,\n                QueryContexts.DEFAULT_ENABLE_REWRITE_JOIN_TO_FILTER,\n                QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n            ),\n            joinableClauses.getJoinableClauses(),\n            VirtualColumns.EMPTY,\n            originalFilter\n        )\n    );\n\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses.getJoinableClauses(),\n        joinFilterPreAnalysis\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"New South Wales\", \"Australia\"}\n        )\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new SelectorFilter(\"page\", \"Peremptory norm\"),\n        ImmutableSet.of()\n    );\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","date":"2021-04-15 01:49:27","endLine":2137,"groupId":"106061","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/69/4edde1e9defb22346a29f15b0e890762686e42.src","preCode":"  public void test_filterPushDown_factToRegionToCountryLeftFilterOnPageDisablePushDown()\n  {\n    JoinableClauses joinableClauses = JoinableClauses.fromList(ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    ));\n    Filter originalFilter = new SelectorFilter(\"page\", \"Peremptory norm\");\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        new JoinFilterPreAnalysisKey(\n            new JoinFilterRewriteConfig(\n                false,\n                true,\n                true,\n                QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n            ),\n            joinableClauses.getJoinableClauses(),\n            VirtualColumns.EMPTY,\n            originalFilter\n        )\n    );\n\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses.getJoinableClauses(),\n        joinFilterPreAnalysis\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"Peremptory norm\", \"New South Wales\", \"Australia\"}\n        )\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        null,\n        new SelectorFilter(\"page\", \"Peremptory norm\"),\n        ImmutableSet.of()\n    );\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2081,"status":"M"},{"authorDate":"2021-04-15 01:49:27","commitOrder":10,"curCode":"  public void test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite()\n  {\n    JoinableClauses joinableClauses = JoinableClauses.fromList(ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    ));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n            new SelectorFilter(\"rtc.countryName\", \"United States\"),\n            new OrFilter(\n                ImmutableList.of(\n                    new SelectorFilter(\"page\", \"DirecTV\"),\n                    new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                )\n            ),\n            new BoundFilter(new BoundDimFilter(\n                \"namespace\",\n                \"Main\",\n                \"Main\",\n                false,\n                false,\n                null,\n                null,\n                null\n            ))\n        )\n    );\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        new JoinFilterPreAnalysisKey(\n            new JoinFilterRewriteConfig(\n                true,\n                false,\n                true,\n                QueryContexts.DEFAULT_ENABLE_REWRITE_JOIN_TO_FILTER,\n                QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n            ),\n            joinableClauses.getJoinableClauses(),\n            VirtualColumns.EMPTY,\n            originalFilter\n        )\n    );\n\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses.getJoinableClauses(),\n        joinFilterPreAnalysis\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"President of India\", \"California\", \"United States\"},\n            new Object[]{\"Otjiwarongo Airport\", \"California\", \"United States\"},\n            new Object[]{\"DirecTV\", \"North Carolina\", \"United States\"},\n            new Object[]{\"Carlo Curti\", \"California\", \"United States\"},\n            new Object[]{\"Old Anatolian Turkish\", \"Virginia\", \"United States\"}\n        )\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n                new BoundFilter(new BoundDimFilter(\n                    \"namespace\",\n                    \"Main\",\n                    \"Main\",\n                    false,\n                    false,\n                    null,\n                    null,\n                    null\n                ))\n            )\n        ),\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"rtc.countryName\", \"United States\"),\n                new OrFilter(\n                    ImmutableList.of(\n                        new SelectorFilter(\"page\", \"DirecTV\"),\n                        new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                    )\n                )\n            )\n        ),\n        ImmutableSet.of()\n    );\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","date":"2021-04-15 01:49:27","endLine":2245,"groupId":"106061","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/69/4edde1e9defb22346a29f15b0e890762686e42.src","preCode":"  public void test_filterPushDown_factToRegionToCountryLeftEnablePushDownDisableRewrite()\n  {\n    JoinableClauses joinableClauses = JoinableClauses.fromList(ImmutableList.of(\n        factToRegion(JoinType.LEFT),\n        regionToCountry(JoinType.LEFT)\n    ));\n    Filter originalFilter = new AndFilter(\n        ImmutableList.of(\n            new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n            new SelectorFilter(\"rtc.countryName\", \"United States\"),\n            new OrFilter(\n                ImmutableList.of(\n                    new SelectorFilter(\"page\", \"DirecTV\"),\n                    new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                )\n            ),\n            new BoundFilter(new BoundDimFilter(\n                \"namespace\",\n                \"Main\",\n                \"Main\",\n                false,\n                false,\n                null,\n                null,\n                null\n            ))\n        )\n    );\n\n    JoinFilterPreAnalysis joinFilterPreAnalysis = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n        new JoinFilterPreAnalysisKey(\n            new JoinFilterRewriteConfig(\n                true,\n                false,\n                true,\n                QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE\n            ),\n            joinableClauses.getJoinableClauses(),\n            VirtualColumns.EMPTY,\n            originalFilter\n        )\n    );\n\n    HashJoinSegmentStorageAdapter adapter = new HashJoinSegmentStorageAdapter(\n        factSegment.asStorageAdapter(),\n        joinableClauses.getJoinableClauses(),\n        joinFilterPreAnalysis\n    );\n\n    JoinTestHelper.verifyCursors(\n        adapter.makeCursors(\n            originalFilter,\n            Intervals.ETERNITY,\n            VirtualColumns.EMPTY,\n            Granularities.ALL,\n            false,\n            null\n        ),\n        ImmutableList.of(\n            \"page\",\n            FACT_TO_REGION_PREFIX + \"regionName\",\n            REGION_TO_COUNTRY_PREFIX + \"countryName\"\n        ),\n        ImmutableList.of(\n            new Object[]{\"President of India\", \"California\", \"United States\"},\n            new Object[]{\"Otjiwarongo Airport\", \"California\", \"United States\"},\n            new Object[]{\"DirecTV\", \"North Carolina\", \"United States\"},\n            new Object[]{\"Carlo Curti\", \"California\", \"United States\"},\n            new Object[]{\"Old Anatolian Turkish\", \"Virginia\", \"United States\"}\n        )\n    );\n\n    JoinFilterSplit expectedFilterSplit = new JoinFilterSplit(\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"channel\", \"#en.wikipedia\"),\n                new BoundFilter(new BoundDimFilter(\n                    \"namespace\",\n                    \"Main\",\n                    \"Main\",\n                    false,\n                    false,\n                    null,\n                    null,\n                    null\n                ))\n            )\n        ),\n        new AndFilter(\n            ImmutableList.of(\n                new SelectorFilter(\"rtc.countryName\", \"United States\"),\n                new OrFilter(\n                    ImmutableList.of(\n                        new SelectorFilter(\"page\", \"DirecTV\"),\n                        new SelectorFilter(\"rtc.countryIsoCode\", \"US\")\n                    )\n                )\n            )\n        ),\n        ImmutableSet.of()\n    );\n\n    JoinFilterSplit actualFilterSplit = JoinFilterAnalyzer.splitFilter(joinFilterPreAnalysis);\n    Assert.assertEquals(expectedFilterSplit, actualFilterSplit);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/join/JoinFilterAnalyzerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2140,"status":"M"}],"commitId":"202c78c8f32bd3ec5e70e021b1494d878f38d678","commitMessage":"@@@Enable rewriting certain inner joins as filters. (#11068)\n\n* Enable rewriting certain inner joins as filters.\n\nThe main logic for doing the rewrite is in JoinableFactoryWrapper's\nsegmentMapFn method. The requirements are:\n\n- It must be an inner equi-join.\n- The right-hand columns referenced by the condition must not contain any\n  duplicate values. (If they did.  the inner join would not be guaranteed\n  to return at most one row for each left-hand-side row.)\n- No columns from the right-hand side can be used by anything other than\n  the join condition itself.\n\nHashJoinSegmentStorageAdapter is also modified to pass through to\nthe base adapter (even allowing vectorization!) in the case where 100%\nof join clauses could be rewritten as filters.\n\nIn support of this goal:\n\n- Add Query getRequiredColumns() method to help us figure out whether\n  the right-hand side of a join datasource is being used or not.\n- Add JoinConditionAnalysis getRequiredColumns() method to help us\n  figure out if the right-hand side of a join is being used by later\n  join clauses acting on the same base.\n- Add Joinable getNonNullColumnValuesIfAllUnique method to enable\n  retrieving the set of values that will form the \"in\" filter.\n- Add LookupExtractor canGetKeySet() and keySet() methods to support\n  LookupJoinable in its efforts to implement the new Joinable method.\n- Add \"enableRewriteJoinToFilter\" feature flag to\n  JoinFilterRewriteConfig. The default is disabled.\n\n* Test improvements.\n\n* Test fixes.\n\n* Avoid slow size() call.\n\n* Remove invalid test.\n\n* Fix style.\n\n* Fix mistaken default.\n\n* Small fixes.\n\n* Fix logic error.","date":"2021-04-15 01:49:27","modifiedFileCount":"38","status":"M","submitter":"Gian Merlino"}]
