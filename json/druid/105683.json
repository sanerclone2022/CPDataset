[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testLongSelector()\n  {\n    final BaseLongColumnValueSelector selector = XPLUSY.makeColumnValueSelector(\"expr\", COLUMN_SELECTOR_FACTORY);\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0L, selector.getLong());\n    } else {\n      Assert.assertTrue(selector.isNull());\n    }\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(4L, selector.getLong());\n    } else {\n      \r\n      Assert.assertTrue(selector.isNull());\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(5L, selector.getLong());\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(5L, selector.getLong());\n  }\n","date":"2018-08-31 00:56:26","endLine":164,"groupId":"9824","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLongSelector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/37/b6e5f86b6d9a3f57d9a68a18b7fa3036c76611.src","preCode":"  public void testLongSelector()\n  {\n    final BaseLongColumnValueSelector selector = XPLUSY.makeColumnValueSelector(\"expr\", COLUMN_SELECTOR_FACTORY);\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0L, selector.getLong());\n    } else {\n      Assert.assertTrue(selector.isNull());\n    }\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(4L, selector.getLong());\n    } else {\n      \r\n      Assert.assertTrue(selector.isNull());\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(5L, selector.getLong());\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(5L, selector.getLong());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testLongSelectorWithConstantNullArithmetic()\n  {\n    final BaseLongColumnValueSelector selector =\n        CONSTANT_NULL_ARITHMETIC.makeColumnValueSelector(\"expr\", COLUMN_SELECTOR_FACTORY);\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(2L, selector.getLong());\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":371,"groupId":"23043","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongSelectorWithConstantNullArithmetic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/37/b6e5f86b6d9a3f57d9a68a18b7fa3036c76611.src","preCode":"  public void testLongSelectorWithConstantNullArithmetic()\n  {\n    final BaseLongColumnValueSelector selector =\n        CONSTANT_NULL_ARITHMETIC.makeColumnValueSelector(\"expr\", COLUMN_SELECTOR_FACTORY);\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(2L, selector.getLong());\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-11-16 14:13:32","commitOrder":2,"curCode":"  public void testLongSelector()\n  {\n    final BaseLongColumnValueSelector selector = X_PLUS_Y.makeColumnValueSelector(\"expr\", COLUMN_SELECTOR_FACTORY);\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0L, selector.getLong());\n    } else {\n      Assert.assertTrue(selector.isNull());\n    }\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(4L, selector.getLong());\n    } else {\n      \r\n      Assert.assertTrue(selector.isNull());\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(5L, selector.getLong());\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(5L, selector.getLong());\n  }\n","date":"2018-11-16 14:13:32","endLine":170,"groupId":"105683","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLongSelector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/38/2de0bd4c897e7519185dec4b0ab48c9971a701.src","preCode":"  public void testLongSelector()\n  {\n    final BaseLongColumnValueSelector selector = XPLUSY.makeColumnValueSelector(\"expr\", COLUMN_SELECTOR_FACTORY);\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(0L, selector.getLong());\n    } else {\n      Assert.assertTrue(selector.isNull());\n    }\n\n    CURRENT_ROW.set(ROW1);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(4L, selector.getLong());\n    } else {\n      \r\n      Assert.assertTrue(selector.isNull());\n    }\n\n    CURRENT_ROW.set(ROW2);\n    Assert.assertEquals(5L, selector.getLong());\n\n    CURRENT_ROW.set(ROW3);\n    Assert.assertEquals(5L, selector.getLong());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testLongSelectorWithConstantNullArithmetic()\n  {\n    final BaseLongColumnValueSelector selector =\n        CONSTANT_NULL_ARITHMETIC.makeColumnValueSelector(\"expr\", COLUMN_SELECTOR_FACTORY);\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(2L, selector.getLong());\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":371,"groupId":"105683","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLongSelectorWithConstantNullArithmetic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/37/b6e5f86b6d9a3f57d9a68a18b7fa3036c76611.src","preCode":"  public void testLongSelectorWithConstantNullArithmetic()\n  {\n    final BaseLongColumnValueSelector selector =\n        CONSTANT_NULL_ARITHMETIC.makeColumnValueSelector(\"expr\", COLUMN_SELECTOR_FACTORY);\n\n    CURRENT_ROW.set(ROW0);\n    if (NullHandling.replaceWithDefault()) {\n      Assert.assertEquals(2L, selector.getLong());\n      Assert.assertFalse(selector.isNull());\n    } else {\n      Assert.assertTrue(selector.isNull());\n    }\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/virtual/ExpressionVirtualColumnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"N"}],"commitId":"fe69da0d95a361708923fbe5b82ded0d461aa495","commitMessage":"@@@Expressions: Fix improper supplier reuse with missing columns. (#6600)\n\n* Expressions: Fix improper supplier reuse with missing columns.\n\nExpressionSelectors has an optimization that skips building a Map\nwhen there is only one input supplier. However.  this optimization\nshould not be used in the case where the is one input supplier but\nmore than one input identifier (which can happen when only one\ninput identifier corresponds to an actual column).\n\nFixes #6556.\n\n* Add underscores to statics.\n","date":"2018-11-16 14:13:32","modifiedFileCount":"2","status":"M","submitter":"Gian Merlino"}]
