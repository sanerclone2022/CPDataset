[{"authorTime":"2020-01-17 06:40:32","codes":[{"authorDate":"2019-11-09 08:29:25","commitOrder":2,"curCode":"  public void testEarliestAggregators() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"EARLIEST(cnt), EARLIEST(m1), EARLIEST(dim1, 10), \"\n        + \"EARLIEST(cnt + 1), EARLIEST(m1 + 1), EARLIEST(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongFirstAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatFirstAggregatorFactory(\"a1\", \"m1\"),\n                          new StringFirstAggregatorFactory(\"a2\", \"dim1\", 10),\n                          new LongFirstAggregatorFactory(\"a3\", \"v0\"),\n                          new FloatFirstAggregatorFactory(\"a4\", \"v1\"),\n                          new StringFirstAggregatorFactory(\"a5\", \"v2\", 10)\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 1.0f, NullHandling.sqlCompatible() ? \"\" : \"10.1\", 2L, 2.0f, \"1\"}\n        )\n    );\n  }\n","date":"2019-11-09 08:29:25","endLine":937,"groupId":"17263","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEarliestAggregators","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/25/1272b31959dcff0860a0ce572af7306e16a711.src","preCode":"  public void testEarliestAggregators() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"EARLIEST(cnt), EARLIEST(m1), EARLIEST(dim1, 10), \"\n        + \"EARLIEST(cnt + 1), EARLIEST(m1 + 1), EARLIEST(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongFirstAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatFirstAggregatorFactory(\"a1\", \"m1\"),\n                          new StringFirstAggregatorFactory(\"a2\", \"dim1\", 10),\n                          new LongFirstAggregatorFactory(\"a3\", \"v0\"),\n                          new FloatFirstAggregatorFactory(\"a4\", \"v1\"),\n                          new StringFirstAggregatorFactory(\"a5\", \"v2\", 10)\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 1.0f, NullHandling.sqlCompatible() ? \"\" : \"10.1\", 2L, 2.0f, \"1\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":900,"status":"NB"},{"authorDate":"2020-01-17 06:40:32","commitOrder":2,"curCode":"  public void testAnyAggregator() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"ANY_VALUE(cnt), ANY_VALUE(m1), ANY_VALUE(m2), ANY_VALUE(dim1, 10), \"\n        + \"ANY_VALUE(cnt + 1), ANY_VALUE(m1 + 1), ANY_VALUE(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongAnyAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatAnyAggregatorFactory(\"a1\", \"m1\"),\n                          new DoubleAnyAggregatorFactory(\"a2\", \"m2\"),\n                          new StringAnyAggregatorFactory(\"a3\", \"dim1\", 10),\n                          new LongAnyAggregatorFactory(\"a4\", \"v0\"),\n                          new FloatAnyAggregatorFactory(\"a5\", \"v1\"),\n                          new StringAnyAggregatorFactory(\"a6\", \"v2\", 10)\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"\", 2L, 2.0f, \"1\"}) : ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"10.1\", 2L, 2.0f, \"1\"})\n    );\n  }\n","date":"2020-01-17 06:40:32","endLine":1342,"groupId":"17263","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAnyAggregator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/89/9ffa2897512cf59d731da308cefd6cccdb7837.src","preCode":"  public void testAnyAggregator() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"ANY_VALUE(cnt), ANY_VALUE(m1), ANY_VALUE(m2), ANY_VALUE(dim1, 10), \"\n        + \"ANY_VALUE(cnt + 1), ANY_VALUE(m1 + 1), ANY_VALUE(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongAnyAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatAnyAggregatorFactory(\"a1\", \"m1\"),\n                          new DoubleAnyAggregatorFactory(\"a2\", \"m2\"),\n                          new StringAnyAggregatorFactory(\"a3\", \"dim1\", 10),\n                          new LongAnyAggregatorFactory(\"a4\", \"v0\"),\n                          new FloatAnyAggregatorFactory(\"a5\", \"v1\"),\n                          new StringAnyAggregatorFactory(\"a6\", \"v2\", 10)\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"\", 2L, 2.0f, \"1\"}) : ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"10.1\", 2L, 2.0f, \"1\"})\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1306,"status":"B"}],"commitId":"42359c93dd53f16e52ed79dcd8b63829f4bf2f7b","commitMessage":"@@@Implement ANY aggregator (#9187)\n\n* Implement ANY aggregator\n\n* Add copyright headers\n\n* Add unit tests\n\n* fix BufferAggregator\n\n* Fix bug in BufferAggregator\n\n* hook up the SQL command\n\n* add check for buffer aggregator\n\n* Address comment\n\n* address comments\n\n* add docs\n\n* Address comments\n\n* add more tests for numeric columns that have null values when run in sql compatible null mode\n\n* fix checkstyle errors\n\n* fix failing tests\n\n* fix failing tests\n","date":"2020-01-17 06:40:32","modifiedFileCount":"9","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2020-01-17 06:40:32","codes":[{"authorDate":"2020-01-21 03:51:54","commitOrder":3,"curCode":"  public void testEarliestAggregators() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"EARLIEST(cnt), EARLIEST(m1), EARLIEST(dim1, 10), \"\n        + \"EARLIEST(cnt + 1), EARLIEST(m1 + 1), EARLIEST(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongFirstAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatFirstAggregatorFactory(\"a1\", \"m1\"),\n                          new StringFirstAggregatorFactory(\"a2\", \"dim1\", 10),\n                          new LongFirstAggregatorFactory(\"a3\", \"v0\"),\n                          new FloatFirstAggregatorFactory(\"a4\", \"v1\"),\n                          new StringFirstAggregatorFactory(\"a5\", \"v2\", 10)\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 1.0f, \"\", 2L, 2.0f, \"1\"}\n        )\n    );\n  }\n","date":"2020-01-21 03:51:54","endLine":1264,"groupId":"17263","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEarliestAggregators","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/d6ccd14905b03f29d530e6926d34b67ece734c.src","preCode":"  public void testEarliestAggregators() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"EARLIEST(cnt), EARLIEST(m1), EARLIEST(dim1, 10), \"\n        + \"EARLIEST(cnt + 1), EARLIEST(m1 + 1), EARLIEST(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongFirstAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatFirstAggregatorFactory(\"a1\", \"m1\"),\n                          new StringFirstAggregatorFactory(\"a2\", \"dim1\", 10),\n                          new LongFirstAggregatorFactory(\"a3\", \"v0\"),\n                          new FloatFirstAggregatorFactory(\"a4\", \"v1\"),\n                          new StringFirstAggregatorFactory(\"a5\", \"v2\", 10)\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 1.0f, NullHandling.sqlCompatible() ? \"\" : \"10.1\", 2L, 2.0f, \"1\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1227,"status":"M"},{"authorDate":"2020-01-17 06:40:32","commitOrder":3,"curCode":"  public void testAnyAggregator() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"ANY_VALUE(cnt), ANY_VALUE(m1), ANY_VALUE(m2), ANY_VALUE(dim1, 10), \"\n        + \"ANY_VALUE(cnt + 1), ANY_VALUE(m1 + 1), ANY_VALUE(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongAnyAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatAnyAggregatorFactory(\"a1\", \"m1\"),\n                          new DoubleAnyAggregatorFactory(\"a2\", \"m2\"),\n                          new StringAnyAggregatorFactory(\"a3\", \"dim1\", 10),\n                          new LongAnyAggregatorFactory(\"a4\", \"v0\"),\n                          new FloatAnyAggregatorFactory(\"a5\", \"v1\"),\n                          new StringAnyAggregatorFactory(\"a6\", \"v2\", 10)\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"\", 2L, 2.0f, \"1\"}) : ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"10.1\", 2L, 2.0f, \"1\"})\n    );\n  }\n","date":"2020-01-17 06:40:32","endLine":1342,"groupId":"17263","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAnyAggregator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/89/9ffa2897512cf59d731da308cefd6cccdb7837.src","preCode":"  public void testAnyAggregator() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"ANY_VALUE(cnt), ANY_VALUE(m1), ANY_VALUE(m2), ANY_VALUE(dim1, 10), \"\n        + \"ANY_VALUE(cnt + 1), ANY_VALUE(m1 + 1), ANY_VALUE(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongAnyAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatAnyAggregatorFactory(\"a1\", \"m1\"),\n                          new DoubleAnyAggregatorFactory(\"a2\", \"m2\"),\n                          new StringAnyAggregatorFactory(\"a3\", \"dim1\", 10),\n                          new LongAnyAggregatorFactory(\"a4\", \"v0\"),\n                          new FloatAnyAggregatorFactory(\"a5\", \"v1\"),\n                          new StringAnyAggregatorFactory(\"a6\", \"v2\", 10)\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"\", 2L, 2.0f, \"1\"}) : ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"10.1\", 2L, 2.0f, \"1\"})\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1306,"status":"N"}],"commitId":"8011211a0ca26ae6fd221e3dfcaf64119609c120","commitMessage":"@@@first/last aggregators and nulls (#9161)\n\n* null handling for numeric first/last aggregators.  refactor to not extend nullable numeric agg since they are complex typed aggs\n\n* initially null or not based on config\n\n* review stuff.  make string first/last consistent with null handling of numeric columns.  more tests\n\n* docs\n\n* handle nil selectors.  revert to primitive first/last types so groupby v1 works...\n","date":"2020-01-21 03:51:54","modifiedFileCount":"34","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-02-13 06:01:41","codes":[{"authorDate":"2020-01-21 03:51:54","commitOrder":4,"curCode":"  public void testEarliestAggregators() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"EARLIEST(cnt), EARLIEST(m1), EARLIEST(dim1, 10), \"\n        + \"EARLIEST(cnt + 1), EARLIEST(m1 + 1), EARLIEST(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongFirstAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatFirstAggregatorFactory(\"a1\", \"m1\"),\n                          new StringFirstAggregatorFactory(\"a2\", \"dim1\", 10),\n                          new LongFirstAggregatorFactory(\"a3\", \"v0\"),\n                          new FloatFirstAggregatorFactory(\"a4\", \"v1\"),\n                          new StringFirstAggregatorFactory(\"a5\", \"v2\", 10)\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 1.0f, \"\", 2L, 2.0f, \"1\"}\n        )\n    );\n  }\n","date":"2020-01-21 03:51:54","endLine":1264,"groupId":"17263","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEarliestAggregators","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/57/d6ccd14905b03f29d530e6926d34b67ece734c.src","preCode":"  public void testEarliestAggregators() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"EARLIEST(cnt), EARLIEST(m1), EARLIEST(dim1, 10), \"\n        + \"EARLIEST(cnt + 1), EARLIEST(m1 + 1), EARLIEST(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongFirstAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatFirstAggregatorFactory(\"a1\", \"m1\"),\n                          new StringFirstAggregatorFactory(\"a2\", \"dim1\", 10),\n                          new LongFirstAggregatorFactory(\"a3\", \"v0\"),\n                          new FloatFirstAggregatorFactory(\"a4\", \"v1\"),\n                          new StringFirstAggregatorFactory(\"a5\", \"v2\", 10)\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 1.0f, \"\", 2L, 2.0f, \"1\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1227,"status":"N"},{"authorDate":"2020-02-13 06:01:41","commitOrder":4,"curCode":"  public void testAnyAggregator() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"ANY_VALUE(cnt), ANY_VALUE(m1), ANY_VALUE(m2), ANY_VALUE(dim1, 10), \"\n        + \"ANY_VALUE(cnt + 1), ANY_VALUE(m1 + 1), ANY_VALUE(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongAnyAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatAnyAggregatorFactory(\"a1\", \"m1\"),\n                          new DoubleAnyAggregatorFactory(\"a2\", \"m2\"),\n                          new StringAnyAggregatorFactory(\"a3\", \"dim1\", 10),\n                          new LongAnyAggregatorFactory(\"a4\", \"v0\"),\n                          new FloatAnyAggregatorFactory(\"a5\", \"v1\"),\n                          new StringAnyAggregatorFactory(\"a6\", \"v2\", 10)\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"\", 2L, 2.0f, \"1\"}) : ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"\", 2L, 2.0f, \"1\"})\n    );\n  }\n","date":"2020-02-13 06:01:41","endLine":1344,"groupId":"17263","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAnyAggregator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/39/dd06b3faaa4821d3759ff1a6fc9207d35e634f.src","preCode":"  public void testAnyAggregator() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"ANY_VALUE(cnt), ANY_VALUE(m1), ANY_VALUE(m2), ANY_VALUE(dim1, 10), \"\n        + \"ANY_VALUE(cnt + 1), ANY_VALUE(m1 + 1), ANY_VALUE(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongAnyAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatAnyAggregatorFactory(\"a1\", \"m1\"),\n                          new DoubleAnyAggregatorFactory(\"a2\", \"m2\"),\n                          new StringAnyAggregatorFactory(\"a3\", \"dim1\", 10),\n                          new LongAnyAggregatorFactory(\"a4\", \"v0\"),\n                          new FloatAnyAggregatorFactory(\"a5\", \"v1\"),\n                          new StringAnyAggregatorFactory(\"a6\", \"v2\", 10)\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"\", 2L, 2.0f, \"1\"}) : ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"10.1\", 2L, 2.0f, \"1\"})\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1308,"status":"M"}],"commitId":"c30579e47b2df3c8c86b782a015a5a989102f0fb","commitMessage":"@@@ANY Aggregator should not skip null values implementation (#9317)\n\n* ANY Aggregator should not skip null values implementation\n\n* add tests\n\n* add more tests\n\n* Update documentation\n\n* add more tests\n\n* address review comments\n\n* optimize StringAnyBufferAggregator\n\n* fix failing tests\n\n* address pr comments\n","date":"2020-02-13 06:01:41","modifiedFileCount":"15","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-05-11 01:13:37","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":5,"curCode":"  public void testEarliestAggregators() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"EARLIEST(cnt), EARLIEST(m1), EARLIEST(dim1, 10), \"\n        + \"EARLIEST(cnt + 1), EARLIEST(m1 + 1), EARLIEST(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongFirstAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatFirstAggregatorFactory(\"a1\", \"m1\"),\n                          new StringFirstAggregatorFactory(\"a2\", \"dim1\", 10),\n                          new LongFirstAggregatorFactory(\"a3\", \"v0\"),\n                          new FloatFirstAggregatorFactory(\"a4\", \"v1\"),\n                          new StringFirstAggregatorFactory(\"a5\", \"v2\", 10)\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 1.0f, \"\", 2L, 2.0f, \"1\"}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":2169,"groupId":"101600","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testEarliestAggregators","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testEarliestAggregators() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"EARLIEST(cnt), EARLIEST(m1), EARLIEST(dim1, 10), \"\n        + \"EARLIEST(cnt + 1), EARLIEST(m1 + 1), EARLIEST(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongFirstAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatFirstAggregatorFactory(\"a1\", \"m1\"),\n                          new StringFirstAggregatorFactory(\"a2\", \"dim1\", 10),\n                          new LongFirstAggregatorFactory(\"a3\", \"v0\"),\n                          new FloatFirstAggregatorFactory(\"a4\", \"v1\"),\n                          new StringFirstAggregatorFactory(\"a5\", \"v2\", 10)\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 1.0f, \"\", 2L, 2.0f, \"1\"}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2132,"status":"M"},{"authorDate":"2021-05-11 01:13:37","commitOrder":5,"curCode":"  public void testAnyAggregator() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"ANY_VALUE(cnt), ANY_VALUE(m1), ANY_VALUE(m2), ANY_VALUE(dim1, 10), \"\n        + \"ANY_VALUE(cnt + 1), ANY_VALUE(m1 + 1), ANY_VALUE(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongAnyAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatAnyAggregatorFactory(\"a1\", \"m1\"),\n                          new DoubleAnyAggregatorFactory(\"a2\", \"m2\"),\n                          new StringAnyAggregatorFactory(\"a3\", \"dim1\", 10),\n                          new LongAnyAggregatorFactory(\"a4\", \"v0\"),\n                          new FloatAnyAggregatorFactory(\"a5\", \"v1\"),\n                          new StringAnyAggregatorFactory(\"a6\", \"v2\", 10)\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"\", 2L, 2.0f, \"1\"}) : ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"\", 2L, 2.0f, \"1\"})\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":2249,"groupId":"101600","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAnyAggregator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testAnyAggregator() throws Exception\n  {\n    \r\n    skipVectorize();\n\n    testQuery(\n        \"SELECT \"\n        + \"ANY_VALUE(cnt), ANY_VALUE(m1), ANY_VALUE(m2), ANY_VALUE(dim1, 10), \"\n        + \"ANY_VALUE(cnt + 1), ANY_VALUE(m1 + 1), ANY_VALUE(dim1 || CAST(cnt AS VARCHAR), 10) \"\n        + \"FROM druid.foo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .virtualColumns(\n                      expressionVirtualColumn(\"v0\", \"(\\\"cnt\\\" + 1)\", ValueType.LONG),\n                      expressionVirtualColumn(\"v1\", \"(\\\"m1\\\" + 1)\", ValueType.FLOAT),\n                      expressionVirtualColumn(\"v2\", \"concat(\\\"dim1\\\",CAST(\\\"cnt\\\", 'STRING'))\", ValueType.STRING)\n                  )\n                  .aggregators(\n                      aggregators(\n                          new LongAnyAggregatorFactory(\"a0\", \"cnt\"),\n                          new FloatAnyAggregatorFactory(\"a1\", \"m1\"),\n                          new DoubleAnyAggregatorFactory(\"a2\", \"m2\"),\n                          new StringAnyAggregatorFactory(\"a3\", \"dim1\", 10),\n                          new LongAnyAggregatorFactory(\"a4\", \"v0\"),\n                          new FloatAnyAggregatorFactory(\"a5\", \"v1\"),\n                          new StringAnyAggregatorFactory(\"a6\", \"v2\", 10)\n                      )\n                  )\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        NullHandling.sqlCompatible() ? ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"\", 2L, 2.0f, \"1\"}) : ImmutableList.of(new Object[]{1L, 1.0f, 1.0, \"\", 2L, 2.0f, \"1\"})\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2213,"status":"M"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
