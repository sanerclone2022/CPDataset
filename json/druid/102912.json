[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testWithFixedAWSKeys()\n  {\n    AWSCredentialsConfig config = EasyMock.createMock(AWSCredentialsConfig.class);\n    EasyMock.expect(config.getAccessKey()).andReturn(new DefaultPasswordProvider(\"accessKeySample\")).atLeastOnce();\n    EasyMock.expect(config.getSecretKey()).andReturn(new DefaultPasswordProvider(\"secretKeySample\")).atLeastOnce();\n    EasyMock.replay(config);\n\n    AWSCredentialsProvider provider = awsModule.getAWSCredentialsProvider(config);\n    AWSCredentials credentials = provider.getCredentials();\n    assertEquals(credentials.getAWSAccessKeyId(), \"accessKeySample\");\n    assertEquals(credentials.getAWSSecretKey(), \"secretKeySample\");\n\n    \r\n    s3Module.getAmazonS3Client(\n        provider,\n        new AWSProxyConfig(),\n        new AWSEndpointConfig(),\n        new AWSClientConfig(),\n        new S3StorageConfig(new NoopServerSideEncryption())\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":74,"groupId":"6119","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithFixedAWSKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/27/534a498c696cbcdc70ad18c1024b6795943c48.src","preCode":"  public void testWithFixedAWSKeys()\n  {\n    AWSCredentialsConfig config = EasyMock.createMock(AWSCredentialsConfig.class);\n    EasyMock.expect(config.getAccessKey()).andReturn(new DefaultPasswordProvider(\"accessKeySample\")).atLeastOnce();\n    EasyMock.expect(config.getSecretKey()).andReturn(new DefaultPasswordProvider(\"secretKeySample\")).atLeastOnce();\n    EasyMock.replay(config);\n\n    AWSCredentialsProvider provider = awsModule.getAWSCredentialsProvider(config);\n    AWSCredentials credentials = provider.getCredentials();\n    assertEquals(credentials.getAWSAccessKeyId(), \"accessKeySample\");\n    assertEquals(credentials.getAWSSecretKey(), \"secretKeySample\");\n\n    \r\n    s3Module.getAmazonS3Client(\n        provider,\n        new AWSProxyConfig(),\n        new AWSEndpointConfig(),\n        new AWSClientConfig(),\n        new S3StorageConfig(new NoopServerSideEncryption())\n    );\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/TestAWSCredentialsProvider.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testWithFileSessionCredentials() throws IOException\n  {\n    AWSCredentialsConfig config = EasyMock.createMock(AWSCredentialsConfig.class);\n    EasyMock.expect(config.getAccessKey()).andReturn(new DefaultPasswordProvider(\"\"));\n    EasyMock.expect(config.getSecretKey()).andReturn(new DefaultPasswordProvider(\"\"));\n    File file = folder.newFile();\n    try (BufferedWriter out = Files.newWriter(file, StandardCharsets.UTF_8)) {\n      out.write(\"sessionToken=sessionTokenSample\\nsecretKey=secretKeySample\\naccessKey=accessKeySample\\n\");\n    }\n    EasyMock.expect(config.getFileSessionCredentials()).andReturn(file.getAbsolutePath()).atLeastOnce();\n    EasyMock.replay(config);\n\n    AWSCredentialsProvider provider = awsModule.getAWSCredentialsProvider(config);\n    AWSCredentials credentials = provider.getCredentials();\n    assertTrue(credentials instanceof AWSSessionCredentials);\n    AWSSessionCredentials sessionCredentials = (AWSSessionCredentials) credentials;\n    assertEquals(sessionCredentials.getAWSAccessKeyId(), \"accessKeySample\");\n    assertEquals(sessionCredentials.getAWSSecretKey(), \"secretKeySample\");\n    assertEquals(sessionCredentials.getSessionToken(), \"sessionTokenSample\");\n\n    \r\n    s3Module.getAmazonS3Client(\n        provider,\n        new AWSProxyConfig(),\n        new AWSEndpointConfig(),\n        new AWSClientConfig(),\n        new S3StorageConfig(new NoopServerSideEncryption())\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":105,"groupId":"17747","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithFileSessionCredentials","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/27/534a498c696cbcdc70ad18c1024b6795943c48.src","preCode":"  public void testWithFileSessionCredentials() throws IOException\n  {\n    AWSCredentialsConfig config = EasyMock.createMock(AWSCredentialsConfig.class);\n    EasyMock.expect(config.getAccessKey()).andReturn(new DefaultPasswordProvider(\"\"));\n    EasyMock.expect(config.getSecretKey()).andReturn(new DefaultPasswordProvider(\"\"));\n    File file = folder.newFile();\n    try (BufferedWriter out = Files.newWriter(file, StandardCharsets.UTF_8)) {\n      out.write(\"sessionToken=sessionTokenSample\\nsecretKey=secretKeySample\\naccessKey=accessKeySample\\n\");\n    }\n    EasyMock.expect(config.getFileSessionCredentials()).andReturn(file.getAbsolutePath()).atLeastOnce();\n    EasyMock.replay(config);\n\n    AWSCredentialsProvider provider = awsModule.getAWSCredentialsProvider(config);\n    AWSCredentials credentials = provider.getCredentials();\n    assertTrue(credentials instanceof AWSSessionCredentials);\n    AWSSessionCredentials sessionCredentials = (AWSSessionCredentials) credentials;\n    assertEquals(sessionCredentials.getAWSAccessKeyId(), \"accessKeySample\");\n    assertEquals(sessionCredentials.getAWSSecretKey(), \"secretKeySample\");\n    assertEquals(sessionCredentials.getSessionToken(), \"sessionTokenSample\");\n\n    \r\n    s3Module.getAmazonS3Client(\n        provider,\n        new AWSProxyConfig(),\n        new AWSEndpointConfig(),\n        new AWSClientConfig(),\n        new S3StorageConfig(new NoopServerSideEncryption())\n    );\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/TestAWSCredentialsProvider.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-07-07 00:33:12","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void testWithFixedAWSKeys()\n  {\n    AWSCredentialsConfig config = EasyMock.createMock(AWSCredentialsConfig.class);\n    EasyMock.expect(config.getAccessKey()).andReturn(new DefaultPasswordProvider(\"accessKeySample\")).atLeastOnce();\n    EasyMock.expect(config.getSecretKey()).andReturn(new DefaultPasswordProvider(\"secretKeySample\")).atLeastOnce();\n    EasyMock.replay(config);\n\n    AWSCredentialsProvider provider = awsModule.getAWSCredentialsProvider(config);\n    AWSCredentials credentials = provider.getCredentials();\n    Assert.assertEquals(\"accessKeySample\", credentials.getAWSAccessKeyId());\n    Assert.assertEquals(\"secretKeySample\", credentials.getAWSSecretKey());\n\n    \r\n    s3Module.getAmazonS3Client(\n        provider,\n        new AWSProxyConfig(),\n        new AWSEndpointConfig(),\n        new AWSClientConfig(),\n        new S3StorageConfig(new NoopServerSideEncryption())\n    );\n  }\n","date":"2019-07-07 00:33:12","endLine":72,"groupId":"6119","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithFixedAWSKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7f/8e2671573dee9ed849906e5deacec0c35b8745.src","preCode":"  public void testWithFixedAWSKeys()\n  {\n    AWSCredentialsConfig config = EasyMock.createMock(AWSCredentialsConfig.class);\n    EasyMock.expect(config.getAccessKey()).andReturn(new DefaultPasswordProvider(\"accessKeySample\")).atLeastOnce();\n    EasyMock.expect(config.getSecretKey()).andReturn(new DefaultPasswordProvider(\"secretKeySample\")).atLeastOnce();\n    EasyMock.replay(config);\n\n    AWSCredentialsProvider provider = awsModule.getAWSCredentialsProvider(config);\n    AWSCredentials credentials = provider.getCredentials();\n    assertEquals(credentials.getAWSAccessKeyId(), \"accessKeySample\");\n    assertEquals(credentials.getAWSSecretKey(), \"secretKeySample\");\n\n    \r\n    s3Module.getAmazonS3Client(\n        provider,\n        new AWSProxyConfig(),\n        new AWSEndpointConfig(),\n        new AWSClientConfig(),\n        new S3StorageConfig(new NoopServerSideEncryption())\n    );\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/TestAWSCredentialsProvider.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2019-07-07 00:33:12","commitOrder":2,"curCode":"  public void testWithFileSessionCredentials() throws IOException\n  {\n    AWSCredentialsConfig config = EasyMock.createMock(AWSCredentialsConfig.class);\n    EasyMock.expect(config.getAccessKey()).andReturn(new DefaultPasswordProvider(\"\"));\n    EasyMock.expect(config.getSecretKey()).andReturn(new DefaultPasswordProvider(\"\"));\n    File file = folder.newFile();\n    try (BufferedWriter out = Files.newWriter(file, StandardCharsets.UTF_8)) {\n      out.write(\"sessionToken=sessionTokenSample\\nsecretKey=secretKeySample\\naccessKey=accessKeySample\\n\");\n    }\n    EasyMock.expect(config.getFileSessionCredentials()).andReturn(file.getAbsolutePath()).atLeastOnce();\n    EasyMock.replay(config);\n\n    AWSCredentialsProvider provider = awsModule.getAWSCredentialsProvider(config);\n    AWSCredentials credentials = provider.getCredentials();\n    Assert.assertTrue(credentials instanceof AWSSessionCredentials);\n    AWSSessionCredentials sessionCredentials = (AWSSessionCredentials) credentials;\n    Assert.assertEquals(\"accessKeySample\", sessionCredentials.getAWSAccessKeyId());\n    Assert.assertEquals(\"secretKeySample\", sessionCredentials.getAWSSecretKey());\n    Assert.assertEquals(\"sessionTokenSample\", sessionCredentials.getSessionToken());\n\n    \r\n    s3Module.getAmazonS3Client(\n        provider,\n        new AWSProxyConfig(),\n        new AWSEndpointConfig(),\n        new AWSClientConfig(),\n        new S3StorageConfig(new NoopServerSideEncryption())\n    );\n  }\n","date":"2019-07-07 00:33:12","endLine":103,"groupId":"8158","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithFileSessionCredentials","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7f/8e2671573dee9ed849906e5deacec0c35b8745.src","preCode":"  public void testWithFileSessionCredentials() throws IOException\n  {\n    AWSCredentialsConfig config = EasyMock.createMock(AWSCredentialsConfig.class);\n    EasyMock.expect(config.getAccessKey()).andReturn(new DefaultPasswordProvider(\"\"));\n    EasyMock.expect(config.getSecretKey()).andReturn(new DefaultPasswordProvider(\"\"));\n    File file = folder.newFile();\n    try (BufferedWriter out = Files.newWriter(file, StandardCharsets.UTF_8)) {\n      out.write(\"sessionToken=sessionTokenSample\\nsecretKey=secretKeySample\\naccessKey=accessKeySample\\n\");\n    }\n    EasyMock.expect(config.getFileSessionCredentials()).andReturn(file.getAbsolutePath()).atLeastOnce();\n    EasyMock.replay(config);\n\n    AWSCredentialsProvider provider = awsModule.getAWSCredentialsProvider(config);\n    AWSCredentials credentials = provider.getCredentials();\n    assertTrue(credentials instanceof AWSSessionCredentials);\n    AWSSessionCredentials sessionCredentials = (AWSSessionCredentials) credentials;\n    assertEquals(sessionCredentials.getAWSAccessKeyId(), \"accessKeySample\");\n    assertEquals(sessionCredentials.getAWSSecretKey(), \"secretKeySample\");\n    assertEquals(sessionCredentials.getSessionToken(), \"sessionTokenSample\");\n\n    \r\n    s3Module.getAmazonS3Client(\n        provider,\n        new AWSProxyConfig(),\n        new AWSEndpointConfig(),\n        new AWSClientConfig(),\n        new S3StorageConfig(new NoopServerSideEncryption())\n    );\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/TestAWSCredentialsProvider.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2020-02-26 12:59:53","codes":[{"authorDate":"2020-02-26 12:59:53","commitOrder":3,"curCode":"  public void testWithFixedAWSKeys()\n  {\n    AWSCredentialsConfig config = EasyMock.createMock(AWSCredentialsConfig.class);\n    EasyMock.expect(config.getAccessKey()).andReturn(new DefaultPasswordProvider(\"accessKeySample\")).atLeastOnce();\n    EasyMock.expect(config.getSecretKey()).andReturn(new DefaultPasswordProvider(\"secretKeySample\")).atLeastOnce();\n    EasyMock.replay(config);\n\n    AWSCredentialsProvider provider = awsModule.getAWSCredentialsProvider(config);\n    AWSCredentials credentials = provider.getCredentials();\n    Assert.assertEquals(\"accessKeySample\", credentials.getAWSAccessKeyId());\n    Assert.assertEquals(\"secretKeySample\", credentials.getAWSSecretKey());\n\n    \r\n    ServerSideEncryptingAmazonS3.Builder amazonS3ClientBuilder = s3Module.getServerSideEncryptingAmazonS3Builder(\n        provider,\n        new AWSProxyConfig(),\n        new AWSEndpointConfig(),\n        new AWSClientConfig(),\n        new S3StorageConfig(new NoopServerSideEncryption())\n    );\n\n    s3Module.getAmazonS3Client(\n        amazonS3ClientBuilder\n    );\n  }\n","date":"2020-02-26 12:59:53","endLine":76,"groupId":"102912","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testWithFixedAWSKeys","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/36/85fc6fa19b93fb6c8a59ccebdd3b8cedc878b1.src","preCode":"  public void testWithFixedAWSKeys()\n  {\n    AWSCredentialsConfig config = EasyMock.createMock(AWSCredentialsConfig.class);\n    EasyMock.expect(config.getAccessKey()).andReturn(new DefaultPasswordProvider(\"accessKeySample\")).atLeastOnce();\n    EasyMock.expect(config.getSecretKey()).andReturn(new DefaultPasswordProvider(\"secretKeySample\")).atLeastOnce();\n    EasyMock.replay(config);\n\n    AWSCredentialsProvider provider = awsModule.getAWSCredentialsProvider(config);\n    AWSCredentials credentials = provider.getCredentials();\n    Assert.assertEquals(\"accessKeySample\", credentials.getAWSAccessKeyId());\n    Assert.assertEquals(\"secretKeySample\", credentials.getAWSSecretKey());\n\n    \r\n    s3Module.getAmazonS3Client(\n        provider,\n        new AWSProxyConfig(),\n        new AWSEndpointConfig(),\n        new AWSClientConfig(),\n        new S3StorageConfig(new NoopServerSideEncryption())\n    );\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/TestAWSCredentialsProvider.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2020-02-26 12:59:53","commitOrder":3,"curCode":"  public void testWithFileSessionCredentials() throws IOException\n  {\n    AWSCredentialsConfig config = EasyMock.createMock(AWSCredentialsConfig.class);\n    EasyMock.expect(config.getAccessKey()).andReturn(new DefaultPasswordProvider(\"\"));\n    EasyMock.expect(config.getSecretKey()).andReturn(new DefaultPasswordProvider(\"\"));\n    File file = folder.newFile();\n    try (BufferedWriter out = Files.newWriter(file, StandardCharsets.UTF_8)) {\n      out.write(\"sessionToken=sessionTokenSample\\nsecretKey=secretKeySample\\naccessKey=accessKeySample\\n\");\n    }\n    EasyMock.expect(config.getFileSessionCredentials()).andReturn(file.getAbsolutePath()).atLeastOnce();\n    EasyMock.replay(config);\n\n    AWSCredentialsProvider provider = awsModule.getAWSCredentialsProvider(config);\n    AWSCredentials credentials = provider.getCredentials();\n    Assert.assertTrue(credentials instanceof AWSSessionCredentials);\n    AWSSessionCredentials sessionCredentials = (AWSSessionCredentials) credentials;\n    Assert.assertEquals(\"accessKeySample\", sessionCredentials.getAWSAccessKeyId());\n    Assert.assertEquals(\"secretKeySample\", sessionCredentials.getAWSSecretKey());\n    Assert.assertEquals(\"sessionTokenSample\", sessionCredentials.getSessionToken());\n\n    \r\n    ServerSideEncryptingAmazonS3.Builder amazonS3ClientBuilder = s3Module.getServerSideEncryptingAmazonS3Builder(\n        provider,\n        new AWSProxyConfig(),\n        new AWSEndpointConfig(),\n        new AWSClientConfig(),\n        new S3StorageConfig(new NoopServerSideEncryption())\n    );\n\n    s3Module.getAmazonS3Client(\n        amazonS3ClientBuilder\n    );\n  }\n","date":"2020-02-26 12:59:53","endLine":111,"groupId":"102912","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testWithFileSessionCredentials","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/36/85fc6fa19b93fb6c8a59ccebdd3b8cedc878b1.src","preCode":"  public void testWithFileSessionCredentials() throws IOException\n  {\n    AWSCredentialsConfig config = EasyMock.createMock(AWSCredentialsConfig.class);\n    EasyMock.expect(config.getAccessKey()).andReturn(new DefaultPasswordProvider(\"\"));\n    EasyMock.expect(config.getSecretKey()).andReturn(new DefaultPasswordProvider(\"\"));\n    File file = folder.newFile();\n    try (BufferedWriter out = Files.newWriter(file, StandardCharsets.UTF_8)) {\n      out.write(\"sessionToken=sessionTokenSample\\nsecretKey=secretKeySample\\naccessKey=accessKeySample\\n\");\n    }\n    EasyMock.expect(config.getFileSessionCredentials()).andReturn(file.getAbsolutePath()).atLeastOnce();\n    EasyMock.replay(config);\n\n    AWSCredentialsProvider provider = awsModule.getAWSCredentialsProvider(config);\n    AWSCredentials credentials = provider.getCredentials();\n    Assert.assertTrue(credentials instanceof AWSSessionCredentials);\n    AWSSessionCredentials sessionCredentials = (AWSSessionCredentials) credentials;\n    Assert.assertEquals(\"accessKeySample\", sessionCredentials.getAWSAccessKeyId());\n    Assert.assertEquals(\"secretKeySample\", sessionCredentials.getAWSSecretKey());\n    Assert.assertEquals(\"sessionTokenSample\", sessionCredentials.getSessionToken());\n\n    \r\n    s3Module.getAmazonS3Client(\n        provider,\n        new AWSProxyConfig(),\n        new AWSEndpointConfig(),\n        new AWSClientConfig(),\n        new S3StorageConfig(new NoopServerSideEncryption())\n    );\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/TestAWSCredentialsProvider.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"92fb83726b0275cb936fbed21a183c81b55df419","commitMessage":"@@@Add support for optional aws credentials for s3 for ingestion (#9375)\n\n* Add support for optional cloud (aws.  gcs.  etc.) credentials for s3 for ingestion\n\n* Add support for optional cloud (aws.  gcs.  etc.) credentials for s3 for ingestion\n\n* Add support for optional cloud (aws.  gcs.  etc.) credentials for s3 for ingestion\n\n* fix build failure\n\n* fix failing build\n\n* fix failing build\n\n* Code cleanup\n\n* fix failing test\n\n* Removed CloudConfigProperties and make specific class for each cloudInputSource\n\n* Removed CloudConfigProperties and make specific class for each cloudInputSource\n\n* pass s3ConfigProperties for split\n\n* lazy init s3client\n\n* update docs\n\n* fix docs check\n\n* address comments\n\n* add ServerSideEncryptingAmazonS3.Builder\n\n* fix failing checkstyle\n\n* fix typo\n\n* wrap the ServerSideEncryptingAmazonS3.Builder in a provider\n\n* added java docs for S3InputSource constructor\n\n* added java docs for S3InputSource constructor\n\n* remove wrap the ServerSideEncryptingAmazonS3.Builder in a provider\n","date":"2020-02-26 12:59:53","modifiedFileCount":"5","status":"M","submitter":"Maytas Monsereenusorn"}]
