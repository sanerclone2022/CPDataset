[{"authorTime":"2019-10-19 05:59:44","codes":[{"authorDate":"2019-07-20 04:52:14","commitOrder":3,"curCode":"  private static boolean postAggregatorDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType columnValueType = aggregateRowSignature.getColumnType(expression.getDirectColumn());\n    if (columnValueType == ValueType.COMPLEX) {\n      return true;\n    }\n\n    \r\n    final ExprType toExprType = Expressions.exprTypeForValueType(columnValueType);\n    final ExprType fromExprType = Expressions.exprTypeForValueType(\n        Calcites.getValueTypeForSqlTypeName(rexNode.getType().getSqlTypeName())\n    );\n\n    return toExprType.equals(fromExprType);\n  }\n","date":"2019-07-20 04:52:14","endLine":210,"groupId":"9163","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"postAggregatorDirectColumnIsOk","params":"(finalRowSignatureaggregateRowSignature@finalDruidExpressionexpression@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/962ac91c1a7d31f93cf8b759af7d1763005827.src","preCode":"  private static boolean postAggregatorDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType columnValueType = aggregateRowSignature.getColumnType(expression.getDirectColumn());\n    if (columnValueType == ValueType.COMPLEX) {\n      return true;\n    }\n\n    \r\n    final ExprType toExprType = Expressions.exprTypeForValueType(columnValueType);\n    final ExprType fromExprType = Expressions.exprTypeForValueType(\n        Calcites.getValueTypeForSqlTypeName(rexNode.getType().getSqlTypeName())\n    );\n\n    return toExprType.equals(fromExprType);\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/rel/Projection.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"NB"},{"authorDate":"2019-10-19 05:59:44","commitOrder":3,"curCode":"  private static boolean postAggregatorComplexDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType toValueType = aggregateRowSignature.getColumnType(expression.getDirectColumn());\n    final ValueType fromValueType = Calcites.getValueTypeForSqlTypeName(rexNode.getType().getSqlTypeName());\n\n    return toValueType == ValueType.COMPLEX && fromValueType == ValueType.COMPLEX;\n  }\n","date":"2019-10-19 05:59:44","endLine":339,"groupId":"16900","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"postAggregatorComplexDirectColumnIsOk","params":"(finalRowSignatureaggregateRowSignature@finalDruidExpressionexpression@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/41/b2f4112e735cdc089a0804a85ed3cb9646c1dd.src","preCode":"  private static boolean postAggregatorComplexDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType toValueType = aggregateRowSignature.getColumnType(expression.getDirectColumn());\n    final ValueType fromValueType = Calcites.getValueTypeForSqlTypeName(rexNode.getType().getSqlTypeName());\n\n    return toValueType == ValueType.COMPLEX && fromValueType == ValueType.COMPLEX;\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/rel/Projection.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"B"}],"commitId":"d88075237af1aca8ed22316b41860d14e4f0b6e4","commitMessage":"@@@Add initial SQL support for non-expression sketch postaggs (#8487)\n\n* Add initial SQL support for non-expression sketch postaggs\n\n* Checkstyle.  spotbugs\n\n* checkstyle\n\n* imports\n\n* Update SQL docs\n\n* Checkstyle\n\n* Fix theta sketch operator docs\n\n* PR comments\n\n* Checkstyle fixes\n\n* Add missing entries for HLL sketch module\n\n* PR comments.  add round param to HLL estimate operator.  fix optional HLL param\n","date":"2019-10-19 05:59:44","modifiedFileCount":"16","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2020-03-13 02:06:44","codes":[{"authorDate":"2020-03-13 02:06:44","commitOrder":4,"curCode":"  private static boolean postAggregatorDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType columnValueType =\n        aggregateRowSignature.getColumnType(expression.getDirectColumn())\n                             .orElseThrow(\n                                 () -> new ISE(\"Encountered null type for column[%s]\", expression.getDirectColumn())\n                             );\n\n    if (columnValueType == ValueType.COMPLEX) {\n      return true;\n    }\n\n    \r\n    final ExprType toExprType = Expressions.exprTypeForValueType(columnValueType);\n    final ExprType fromExprType = Expressions.exprTypeForValueType(\n        Calcites.getValueTypeForSqlTypeName(rexNode.getType().getSqlTypeName())\n    );\n\n    return toExprType.equals(fromExprType);\n  }\n","date":"2020-03-13 02:06:44","endLine":319,"groupId":"4645","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"postAggregatorDirectColumnIsOk","params":"(finalRowSignatureaggregateRowSignature@finalDruidExpressionexpression@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/44/a4705d08281196a46600fa0e28319c602360da.src","preCode":"  private static boolean postAggregatorDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType columnValueType = aggregateRowSignature.getColumnType(expression.getDirectColumn());\n    if (columnValueType == ValueType.COMPLEX) {\n      return true;\n    }\n\n    \r\n    final ExprType toExprType = Expressions.exprTypeForValueType(columnValueType);\n    final ExprType fromExprType = Expressions.exprTypeForValueType(\n        Calcites.getValueTypeForSqlTypeName(rexNode.getType().getSqlTypeName())\n    );\n\n    return toExprType.equals(fromExprType);\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/rel/Projection.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"},{"authorDate":"2020-03-13 02:06:44","commitOrder":4,"curCode":"  private static boolean postAggregatorComplexDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType toValueType =\n        aggregateRowSignature.getColumnType(expression.getDirectColumn())\n                             .orElseThrow(\n                                 () -> new ISE(\"Encountered null type for column[%s]\", expression.getDirectColumn())\n                             );\n\n    final ValueType fromValueType = Calcites.getValueTypeForSqlTypeName(rexNode.getType().getSqlTypeName());\n\n    return toValueType == ValueType.COMPLEX && fromValueType == ValueType.COMPLEX;\n  }\n","date":"2020-03-13 02:06:44","endLine":351,"groupId":"22332","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"postAggregatorComplexDirectColumnIsOk","params":"(finalRowSignatureaggregateRowSignature@finalDruidExpressionexpression@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/44/a4705d08281196a46600fa0e28319c602360da.src","preCode":"  private static boolean postAggregatorComplexDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType toValueType = aggregateRowSignature.getColumnType(expression.getDirectColumn());\n    final ValueType fromValueType = Calcites.getValueTypeForSqlTypeName(rexNode.getType().getSqlTypeName());\n\n    return toValueType == ValueType.COMPLEX && fromValueType == ValueType.COMPLEX;\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/rel/Projection.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"}],"commitId":"ff59d2e78bd3949e46858bc2f9882db9a7d2a186","commitMessage":"@@@Move RowSignature from druid-sql to druid-processing and make use of it. (#9508)\n\n* Move RowSignature from druid-sql to druid-processing and make use of it.\n\n1) Moved (most of) RowSignature from sql to processing. Left behind the SQL-specific\n   stuff in a RowSignatures utility class. It also picked up some new convenience\n   methods along the way.\n2) There were a lot of places in the code where Map<String.  ValueType> was used to\n   associate columns with type info. These are now all replaced with RowSignature.\n3) QueryToolChest's resultArrayFields method is replaced with resultArraySignature. \n   and it now provides type info.\n\n* Fix up extensions.\n\n* Various fixes","date":"2020-03-13 02:06:44","modifiedFileCount":"166","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-08-27 01:53:44","codes":[{"authorDate":"2020-08-27 01:53:44","commitOrder":5,"curCode":"  private static boolean postAggregatorDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType columnValueType =\n        aggregateRowSignature.getColumnType(expression.getDirectColumn())\n                             .orElseThrow(\n                                 () -> new ISE(\"Encountered null type for column[%s]\", expression.getDirectColumn())\n                             );\n\n    if (columnValueType == ValueType.COMPLEX) {\n      return true;\n    }\n\n    \r\n    final ExprType toExprType = Expressions.exprTypeForValueType(columnValueType);\n    final ExprType fromExprType = Expressions.exprTypeForValueType(\n        Calcites.getValueTypeForRelDataType(rexNode.getType())\n    );\n\n    return toExprType.equals(fromExprType);\n  }\n","date":"2020-08-27 01:53:44","endLine":325,"groupId":"4645","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"postAggregatorDirectColumnIsOk","params":"(finalRowSignatureaggregateRowSignature@finalDruidExpressionexpression@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d3/53a4ae116cb054117a65f6f3114ad18c1c07d4.src","preCode":"  private static boolean postAggregatorDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType columnValueType =\n        aggregateRowSignature.getColumnType(expression.getDirectColumn())\n                             .orElseThrow(\n                                 () -> new ISE(\"Encountered null type for column[%s]\", expression.getDirectColumn())\n                             );\n\n    if (columnValueType == ValueType.COMPLEX) {\n      return true;\n    }\n\n    \r\n    final ExprType toExprType = Expressions.exprTypeForValueType(columnValueType);\n    final ExprType fromExprType = Expressions.exprTypeForValueType(\n        Calcites.getValueTypeForSqlTypeName(rexNode.getType().getSqlTypeName())\n    );\n\n    return toExprType.equals(fromExprType);\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/rel/Projection.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2020-08-27 01:53:44","commitOrder":5,"curCode":"  private static boolean postAggregatorComplexDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType toValueType =\n        aggregateRowSignature.getColumnType(expression.getDirectColumn())\n                             .orElseThrow(\n                                 () -> new ISE(\"Encountered null type for column[%s]\", expression.getDirectColumn())\n                             );\n\n    final ValueType fromValueType = Calcites.getValueTypeForRelDataType(rexNode.getType());\n\n    return toValueType == ValueType.COMPLEX && fromValueType == ValueType.COMPLEX;\n  }\n","date":"2020-08-27 01:53:44","endLine":357,"groupId":"4647","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"postAggregatorComplexDirectColumnIsOk","params":"(finalRowSignatureaggregateRowSignature@finalDruidExpressionexpression@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d3/53a4ae116cb054117a65f6f3114ad18c1c07d4.src","preCode":"  private static boolean postAggregatorComplexDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType toValueType =\n        aggregateRowSignature.getColumnType(expression.getDirectColumn())\n                             .orElseThrow(\n                                 () -> new ISE(\"Encountered null type for column[%s]\", expression.getDirectColumn())\n                             );\n\n    final ValueType fromValueType = Calcites.getValueTypeForSqlTypeName(rexNode.getType().getSqlTypeName());\n\n    return toValueType == ValueType.COMPLEX && fromValueType == ValueType.COMPLEX;\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/rel/Projection.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"M"}],"commitId":"ab606610089f7bb9b4b1b68ac488764f394723fd","commitMessage":"@@@refactor internal type system (#9638)\n\n* better type tracking: add typed postaggs.  finalized types for agg factories\n\n* more javadoc\n\n* adjustments\n\n* transition to getTypeName to be used exclusively for complex types\n\n* remove unused fn\n\n* adjust\n\n* more better\n\n* rename getTypeName to getComplexTypeName\n\n* setup expression post agg for type inference existing\n\n* more javadocs\n\n* fixup\n\n* oops\n\n* more test\n\n* more test\n\n* more comments/javadoc\n\n* nulls\n\n* explicitly handle only numeric and complex aggregators for incremental index\n\n* checkstyle\n\n* more tests\n\n* adjust\n\n* more tests to showcase difference in behavior\n\n* timeseries longsum array","date":"2020-08-27 01:53:44","modifiedFileCount":"176","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-08-27 01:53:44","codes":[{"authorDate":"2020-09-15 09:18:56","commitOrder":6,"curCode":"  private static boolean postAggregatorDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType columnValueType =\n        aggregateRowSignature.getColumnType(expression.getDirectColumn())\n                             .orElseThrow(\n                                 () -> new ISE(\"Encountered null type for column[%s]\", expression.getDirectColumn())\n                             );\n\n    if (columnValueType == ValueType.COMPLEX) {\n      return true;\n    }\n\n    \r\n    final ExprType toExprType = ExprType.fromValueType(columnValueType);\n    final ExprType fromExprType = ExprType.fromValueType(\n        Calcites.getValueTypeForRelDataType(rexNode.getType())\n    );\n\n    return toExprType.equals(fromExprType);\n  }\n","date":"2020-09-15 09:18:56","endLine":325,"groupId":"4645","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"postAggregatorDirectColumnIsOk","params":"(finalRowSignatureaggregateRowSignature@finalDruidExpressionexpression@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/02/cc3ce2aae38cc48642f2960f73e2132ffc190c.src","preCode":"  private static boolean postAggregatorDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType columnValueType =\n        aggregateRowSignature.getColumnType(expression.getDirectColumn())\n                             .orElseThrow(\n                                 () -> new ISE(\"Encountered null type for column[%s]\", expression.getDirectColumn())\n                             );\n\n    if (columnValueType == ValueType.COMPLEX) {\n      return true;\n    }\n\n    \r\n    final ExprType toExprType = Expressions.exprTypeForValueType(columnValueType);\n    final ExprType fromExprType = Expressions.exprTypeForValueType(\n        Calcites.getValueTypeForRelDataType(rexNode.getType())\n    );\n\n    return toExprType.equals(fromExprType);\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/rel/Projection.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2020-08-27 01:53:44","commitOrder":6,"curCode":"  private static boolean postAggregatorComplexDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType toValueType =\n        aggregateRowSignature.getColumnType(expression.getDirectColumn())\n                             .orElseThrow(\n                                 () -> new ISE(\"Encountered null type for column[%s]\", expression.getDirectColumn())\n                             );\n\n    final ValueType fromValueType = Calcites.getValueTypeForRelDataType(rexNode.getType());\n\n    return toValueType == ValueType.COMPLEX && fromValueType == ValueType.COMPLEX;\n  }\n","date":"2020-08-27 01:53:44","endLine":357,"groupId":"4647","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"postAggregatorComplexDirectColumnIsOk","params":"(finalRowSignatureaggregateRowSignature@finalDruidExpressionexpression@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d3/53a4ae116cb054117a65f6f3114ad18c1c07d4.src","preCode":"  private static boolean postAggregatorComplexDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType toValueType =\n        aggregateRowSignature.getColumnType(expression.getDirectColumn())\n                             .orElseThrow(\n                                 () -> new ISE(\"Encountered null type for column[%s]\", expression.getDirectColumn())\n                             );\n\n    final ValueType fromValueType = Calcites.getValueTypeForRelDataType(rexNode.getType());\n\n    return toValueType == ValueType.COMPLEX && fromValueType == ValueType.COMPLEX;\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/rel/Projection.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"N"}],"commitId":"184b202411ffe6d04037e6b670985a58c3bf53e5","commitMessage":"@@@add computed Expr output types (#10370)\n\n* push down ValueType to ExprType conversion.  tidy up\n\n* determine expr output type for given input types\n\n* revert unintended name change\n\n* add nullable\n\n* tidy up\n\n* fixup\n\n* more better\n\n* fix signatures\n\n* naming things is hard\n\n* fix inspection\n\n* javadoc\n\n* make default implementation of Expr.getOutputType that returns null\n\n* rename method\n\n* more test\n\n* add output for contains expr macro.  split operation and function auto conversion","date":"2020-09-15 09:18:56","modifiedFileCount":"39","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-08-27 01:53:44","codes":[{"authorDate":"2020-09-24 04:56:38","commitOrder":7,"curCode":"  private static boolean postAggregatorDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType columnValueType =\n        aggregateRowSignature.getColumnType(expression.getDirectColumn())\n                             .orElseThrow(\n                                 () -> new ISE(\"Encountered null type for column[%s]\", expression.getDirectColumn())\n                             );\n\n    if (columnValueType == ValueType.COMPLEX) {\n      return true;\n    }\n\n    \r\n    final ExprType toExprType = ExprType.fromValueTypeStrict(columnValueType);\n    final ExprType fromExprType = ExprType.fromValueTypeStrict(\n        Calcites.getValueTypeForRelDataType(rexNode.getType())\n    );\n\n    return toExprType.equals(fromExprType);\n  }\n","date":"2020-09-24 04:56:38","endLine":325,"groupId":"102101","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"postAggregatorDirectColumnIsOk","params":"(finalRowSignatureaggregateRowSignature@finalDruidExpressionexpression@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/63/1b338f6816f2e11c50f263b13f46aca0031eab.src","preCode":"  private static boolean postAggregatorDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType columnValueType =\n        aggregateRowSignature.getColumnType(expression.getDirectColumn())\n                             .orElseThrow(\n                                 () -> new ISE(\"Encountered null type for column[%s]\", expression.getDirectColumn())\n                             );\n\n    if (columnValueType == ValueType.COMPLEX) {\n      return true;\n    }\n\n    \r\n    final ExprType toExprType = ExprType.fromValueType(columnValueType);\n    final ExprType fromExprType = ExprType.fromValueType(\n        Calcites.getValueTypeForRelDataType(rexNode.getType())\n    );\n\n    return toExprType.equals(fromExprType);\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/rel/Projection.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2020-08-27 01:53:44","commitOrder":7,"curCode":"  private static boolean postAggregatorComplexDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType toValueType =\n        aggregateRowSignature.getColumnType(expression.getDirectColumn())\n                             .orElseThrow(\n                                 () -> new ISE(\"Encountered null type for column[%s]\", expression.getDirectColumn())\n                             );\n\n    final ValueType fromValueType = Calcites.getValueTypeForRelDataType(rexNode.getType());\n\n    return toValueType == ValueType.COMPLEX && fromValueType == ValueType.COMPLEX;\n  }\n","date":"2020-08-27 01:53:44","endLine":357,"groupId":"102101","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"postAggregatorComplexDirectColumnIsOk","params":"(finalRowSignatureaggregateRowSignature@finalDruidExpressionexpression@finalRexNoderexNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d3/53a4ae116cb054117a65f6f3114ad18c1c07d4.src","preCode":"  private static boolean postAggregatorComplexDirectColumnIsOk(\n      final RowSignature aggregateRowSignature,\n      final DruidExpression expression,\n      final RexNode rexNode\n  )\n  {\n    if (!expression.isDirectColumnAccess()) {\n      return false;\n    }\n\n    \r\n    final ValueType toValueType =\n        aggregateRowSignature.getColumnType(expression.getDirectColumn())\n                             .orElseThrow(\n                                 () -> new ISE(\"Encountered null type for column[%s]\", expression.getDirectColumn())\n                             );\n\n    final ValueType fromValueType = Calcites.getValueTypeForRelDataType(rexNode.getType());\n\n    return toValueType == ValueType.COMPLEX && fromValueType == ValueType.COMPLEX;\n  }\n","realPath":"sql/src/main/java/org/apache/druid/sql/calcite/rel/Projection.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"N"}],"commitId":"19c4b1664086539a3bb495eb402616cf8b6f2a77","commitMessage":"@@@vectorized expressions and expression virtual columns (#10401)\n\n* vectorized expression virtual columns\n\n* cleanup\n\n* fixes\n\n* preserve float if explicitly specified\n\n* oops\n\n* null handling fixes.  more tests\n\n* what is an expression planner?\n\n* better names\n\n* remove unused method.  add pi\n\n* move vector processor builders into static methods\n\n* reduce boilerplate\n\n* oops\n\n* more naming adjustments\n\n* changes\n\n* nullable\n\n* missing hex\n\n* more","date":"2020-09-24 04:56:38","modifiedFileCount":"56","status":"M","submitter":"Clint Wylie"}]
