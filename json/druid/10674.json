[{"authorTime":"2020-03-19 06:06:45","codes":[{"authorDate":"2020-03-19 06:06:45","commitOrder":1,"curCode":"  public void testJoinOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setDimFilter(new SelectorDimFilter(\"s\", \"y\", null))\n                    .build();\n\n    final GroupByQuery query =\n        GroupByQuery.builder()\n                    .setDataSource(\n                        JoinDataSource.create(\n                            new TableDataSource(FOO),\n                            new QueryDataSource(subquery),\n                            \"j.\",\n                            \"\\\"j.s\\\" == \\\"s\\\"\",\n                            JoinType.INNER,\n                            ExprMacroTable.nil()\n                        )\n                    )\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Intervals.ONLY_ETERNITY)\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                    .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                    .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            query.getDataSource().getChildren().get(0),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{\"y\", \"y\", 1L})\n    );\n  }\n","date":"2020-03-19 06:06:45","endLine":354,"groupId":"20082","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinOnGroupByOnTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/22/15dcb162ae18a4db421c0b7c175b9052f4c9a3.src","preCode":"  public void testJoinOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setDimFilter(new SelectorDimFilter(\"s\", \"y\", null))\n                    .build();\n\n    final GroupByQuery query =\n        GroupByQuery.builder()\n                    .setDataSource(\n                        JoinDataSource.create(\n                            new TableDataSource(FOO),\n                            new QueryDataSource(subquery),\n                            \"j.\",\n                            \"\\\"j.s\\\" == \\\"s\\\"\",\n                            JoinType.INNER,\n                            ExprMacroTable.nil()\n                        )\n                    )\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Intervals.ONLY_ETERNITY)\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                    .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                    .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            query.getDataSource().getChildren().get(0),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{\"y\", \"y\", 1L})\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"B"},{"authorDate":"2020-03-19 06:06:45","commitOrder":1,"curCode":"  public void testJoinOnTableErrorCantInlineTable()\n  {\n    final GroupByQuery query =\n        GroupByQuery.builder()\n                    .setDataSource(\n                        JoinDataSource.create(\n                            new TableDataSource(FOO),\n                            new TableDataSource(BAR),\n                            \"j.\",\n                            \"\\\"j.s\\\" == \\\"s\\\"\",\n                            JoinType.INNER,\n                            ExprMacroTable.nil()\n                        )\n                    )\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Intervals.ONLY_ETERNITY)\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                    .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                    .build();\n\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\"Cannot handle subquery structure for dataSource\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2020-03-19 06:06:45","endLine":381,"groupId":"20082","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinOnTableErrorCantInlineTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/22/15dcb162ae18a4db421c0b7c175b9052f4c9a3.src","preCode":"  public void testJoinOnTableErrorCantInlineTable()\n  {\n    final GroupByQuery query =\n        GroupByQuery.builder()\n                    .setDataSource(\n                        JoinDataSource.create(\n                            new TableDataSource(FOO),\n                            new TableDataSource(BAR),\n                            \"j.\",\n                            \"\\\"j.s\\\" == \\\"s\\\"\",\n                            JoinType.INNER,\n                            ExprMacroTable.nil()\n                        )\n                    )\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Intervals.ONLY_ETERNITY)\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                    .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                    .build();\n\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\"Cannot handle subquery structure for dataSource\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"B"}],"commitId":"1ef25a438fd9456f40f2adb36549eeaf86fef4f2","commitMessage":"@@@Broker: Add ability to inline subqueries. (#9533)\n\n* Broker: Add ability to inline subqueries.\n\nThe main changes:\n\n- ClientQuerySegmentWalker: Add ability to inline queries.\n- Query: Add \"getSubQueryId\" and \"withSubQueryId\" methods.\n- QueryMetrics: Add \"subQueryId\" dimension.\n- ServerConfig: Add new \"maxSubqueryRows\" parameter.  which is used by\n  ClientQuerySegmentWalker to limit how many rows can be inlined per\n  query.\n- IndexedTableJoinMatcher: Allow creating keys on top of unknown types. \n  by assuming they are strings. This is useful because not all types are\n  known for fields in query results.\n- InlineDataSource: Store RowSignature rather than component parts. Add\n  more zealous \"equals\" and \"hashCode\" methods to ease testing.\n- Moved QuerySegmentWalker test code from CalciteTests and\n  SpecificSegmentsQueryWalker in druid-sql to QueryStackTests in\n  druid-server. Use this to spin up a new ClientQuerySegmentWalkerTest.\n\n* Adjustments from CI.\n\n* Fix integration test.","date":"2020-03-19 06:06:45","modifiedFileCount":"46","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-03-19 06:06:45","codes":[{"authorDate":"2020-03-31 02:58:16","commitOrder":2,"curCode":"  public void testJoinOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setDimFilter(new SelectorDimFilter(\"s\", \"y\", null))\n                    .build();\n\n    final GroupByQuery query =\n        GroupByQuery.builder()\n                    .setDataSource(\n                        JoinDataSource.create(\n                            new TableDataSource(FOO),\n                            new QueryDataSource(subquery),\n                            \"j.\",\n                            \"\\\"j.s\\\" == \\\"s\\\"\",\n                            JoinType.INNER,\n                            ExprMacroTable.nil()\n                        )\n                    )\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Intervals.ONLY_ETERNITY)\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                    .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                    .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            query.getDataSource().getChildren().get(0),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{\"y\", \"y\", 1L})\n    );\n\n    \r\n    \r\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(2, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","date":"2020-03-31 02:58:16","endLine":400,"groupId":"20082","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinOnGroupByOnTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c9/8c7768decd9c3468d713a374f74f497bb2f70c.src","preCode":"  public void testJoinOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setDimFilter(new SelectorDimFilter(\"s\", \"y\", null))\n                    .build();\n\n    final GroupByQuery query =\n        GroupByQuery.builder()\n                    .setDataSource(\n                        JoinDataSource.create(\n                            new TableDataSource(FOO),\n                            new QueryDataSource(subquery),\n                            \"j.\",\n                            \"\\\"j.s\\\" == \\\"s\\\"\",\n                            JoinType.INNER,\n                            ExprMacroTable.nil()\n                        )\n                    )\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Intervals.ONLY_ETERNITY)\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                    .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                    .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            query.getDataSource().getChildren().get(0),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{\"y\", \"y\", 1L})\n    );\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"M"},{"authorDate":"2020-03-19 06:06:45","commitOrder":2,"curCode":"  public void testJoinOnTableErrorCantInlineTable()\n  {\n    final GroupByQuery query =\n        GroupByQuery.builder()\n                    .setDataSource(\n                        JoinDataSource.create(\n                            new TableDataSource(FOO),\n                            new TableDataSource(BAR),\n                            \"j.\",\n                            \"\\\"j.s\\\" == \\\"s\\\"\",\n                            JoinType.INNER,\n                            ExprMacroTable.nil()\n                        )\n                    )\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Intervals.ONLY_ETERNITY)\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                    .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                    .build();\n\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\"Cannot handle subquery structure for dataSource\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2020-03-19 06:06:45","endLine":381,"groupId":"20082","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinOnTableErrorCantInlineTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/22/15dcb162ae18a4db421c0b7c175b9052f4c9a3.src","preCode":"  public void testJoinOnTableErrorCantInlineTable()\n  {\n    final GroupByQuery query =\n        GroupByQuery.builder()\n                    .setDataSource(\n                        JoinDataSource.create(\n                            new TableDataSource(FOO),\n                            new TableDataSource(BAR),\n                            \"j.\",\n                            \"\\\"j.s\\\" == \\\"s\\\"\",\n                            JoinType.INNER,\n                            ExprMacroTable.nil()\n                        )\n                    )\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Intervals.ONLY_ETERNITY)\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                    .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                    .build();\n\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\"Cannot handle subquery structure for dataSource\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"N"}],"commitId":"fa5da6693ca4dbb614c6398e50e34b772298f5ae","commitMessage":"@@@add lane enforcement for joinish queries (#9563)\n\n* add lane enforcement for joinish queries\n\n* oops\n\n* style\n\n* review stuffs","date":"2020-03-31 02:58:16","modifiedFileCount":"13","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-07-02 05:02:21","codes":[{"authorDate":"2020-07-02 05:02:21","commitOrder":3,"curCode":"  public void testJoinOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setDimFilter(new SelectorDimFilter(\"s\", \"y\", null))\n                    .build();\n\n    final GroupByQuery query =\n        (GroupByQuery) GroupByQuery.builder()\n                                   .setDataSource(\n                                       JoinDataSource.create(\n                                           new TableDataSource(FOO),\n                                           new QueryDataSource(subquery),\n                                           \"j.\",\n                                           \"\\\"j.s\\\" == \\\"s\\\"\",\n                                           JoinType.INNER,\n                                           ExprMacroTable.nil()\n                                       )\n                                   )\n                                   .setGranularity(Granularities.ALL)\n                                   .setInterval(Intervals.ONLY_ETERNITY)\n                                   .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                                   .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                                   .build()\n                                   .withId(UUID.randomUUID().toString());\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            query.getDataSource().getChildren().get(0),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{\"y\", \"y\", 1L})\n    );\n\n    \r\n    \r\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(2, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","date":"2020-07-02 05:02:21","endLine":468,"groupId":"21156","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinOnGroupByOnTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/e75008d93c8fc7b3635e3a9860a830f48fb950.src","preCode":"  public void testJoinOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setDimFilter(new SelectorDimFilter(\"s\", \"y\", null))\n                    .build();\n\n    final GroupByQuery query =\n        GroupByQuery.builder()\n                    .setDataSource(\n                        JoinDataSource.create(\n                            new TableDataSource(FOO),\n                            new QueryDataSource(subquery),\n                            \"j.\",\n                            \"\\\"j.s\\\" == \\\"s\\\"\",\n                            JoinType.INNER,\n                            ExprMacroTable.nil()\n                        )\n                    )\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Intervals.ONLY_ETERNITY)\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                    .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                    .build();\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            query.getDataSource().getChildren().get(0),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{\"y\", \"y\", 1L})\n    );\n\n    \r\n    \r\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(2, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"},{"authorDate":"2020-07-02 05:02:21","commitOrder":3,"curCode":"  public void testJoinOnTableErrorCantInlineTable()\n  {\n    final GroupByQuery query =\n        (GroupByQuery) GroupByQuery.builder()\n                                   .setDataSource(\n                                       JoinDataSource.create(\n                                           new TableDataSource(FOO),\n                                           new TableDataSource(BAR),\n                                           \"j.\",\n                                           \"\\\"j.s\\\" == \\\"s\\\"\",\n                                           JoinType.INNER,\n                                           ExprMacroTable.nil()\n                                       )\n                                   )\n                                   .setGranularity(Granularities.ALL)\n                                   .setInterval(Intervals.ONLY_ETERNITY)\n                                   .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                                   .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                                   .build()\n                                   .withId(UUID.randomUUID().toString());\n\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\"Cannot handle subquery structure for dataSource\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2020-07-02 05:02:21","endLine":607,"groupId":"20082","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinOnTableErrorCantInlineTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/e75008d93c8fc7b3635e3a9860a830f48fb950.src","preCode":"  public void testJoinOnTableErrorCantInlineTable()\n  {\n    final GroupByQuery query =\n        GroupByQuery.builder()\n                    .setDataSource(\n                        JoinDataSource.create(\n                            new TableDataSource(FOO),\n                            new TableDataSource(BAR),\n                            \"j.\",\n                            \"\\\"j.s\\\" == \\\"s\\\"\",\n                            JoinType.INNER,\n                            ExprMacroTable.nil()\n                        )\n                    )\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Intervals.ONLY_ETERNITY)\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                    .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                    .build();\n\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\"Cannot handle subquery structure for dataSource\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":582,"status":"M"}],"commitId":"657f8ee80fa86779cf26a01072814b1530277aa7","commitMessage":"@@@Fix RetryQueryRunner to actually do the job (#10082)\n\n* Fix RetryQueryRunner to actually do the job\n\n* more javadoc\n\n* fix test and checkstyle\n\n* don't combine for testing\n\n* address comments\n\n* fix unit tests\n\n* always initialize response context in cachingClusteredClient\n\n* fix subquery\n\n* address comments\n\n* fix test\n\n* query id for builders\n\n* make queryId optional in the builders and ClusterQueryResult\n\n* fix test\n\n* suppress tests and unused methods\n\n* exclude groupBy builder\n\n* fix jacoco exclusion\n\n* add tests for builders\n\n* address comments\n\n* don't truncate","date":"2020-07-02 05:02:21","modifiedFileCount":"33","status":"M","submitter":"Jihoon Son"},{"authorTime":"2021-03-10 05:07:34","codes":[{"authorDate":"2021-03-10 05:07:34","commitOrder":4,"curCode":"  public void testJoinOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setDimFilter(new SelectorDimFilter(\"s\", \"y\", null))\n                    .build();\n\n    final GroupByQuery query =\n        (GroupByQuery) GroupByQuery.builder()\n                                   .setDataSource(\n                                       JoinDataSource.create(\n                                           new TableDataSource(FOO),\n                                           new QueryDataSource(subquery),\n                                           \"j.\",\n                                           \"\\\"j.s\\\" == \\\"s\\\"\",\n                                           JoinType.INNER,\n                                           null,\n                                           ExprMacroTable.nil()\n                                       )\n                                   )\n                                   .setGranularity(Granularities.ALL)\n                                   .setInterval(Intervals.ONLY_ETERNITY)\n                                   .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                                   .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                                   .build()\n                                   .withId(UUID.randomUUID().toString());\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            query.getDataSource().getChildren().get(0),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{\"y\", \"y\", 1L})\n    );\n\n    \r\n    \r\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(2, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","date":"2021-03-10 05:07:34","endLine":540,"groupId":"10674","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testJoinOnGroupByOnTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7c/47377b9ce0f76da025b921e0a53be1ef463eda.src","preCode":"  public void testJoinOnGroupByOnTable()\n  {\n    final GroupByQuery subquery =\n        GroupByQuery.builder()\n                    .setDataSource(FOO)\n                    .setGranularity(Granularities.ALL)\n                    .setInterval(Collections.singletonList(INTERVAL))\n                    .setDimensions(DefaultDimensionSpec.of(\"s\"))\n                    .setDimFilter(new SelectorDimFilter(\"s\", \"y\", null))\n                    .build();\n\n    final GroupByQuery query =\n        (GroupByQuery) GroupByQuery.builder()\n                                   .setDataSource(\n                                       JoinDataSource.create(\n                                           new TableDataSource(FOO),\n                                           new QueryDataSource(subquery),\n                                           \"j.\",\n                                           \"\\\"j.s\\\" == \\\"s\\\"\",\n                                           JoinType.INNER,\n                                           ExprMacroTable.nil()\n                                       )\n                                   )\n                                   .setGranularity(Granularities.ALL)\n                                   .setInterval(Intervals.ONLY_ETERNITY)\n                                   .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                                   .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                                   .build()\n                                   .withId(UUID.randomUUID().toString());\n\n    testQuery(\n        query,\n        ImmutableList.of(\n            ExpectedQuery.cluster(subquery),\n            ExpectedQuery.cluster(\n                query.withDataSource(\n                    query.getDataSource().withChildren(\n                        ImmutableList.of(\n                            query.getDataSource().getChildren().get(0),\n                            InlineDataSource.fromIterable(\n                                ImmutableList.of(new Object[]{\"y\"}),\n                                RowSignature.builder().add(\"s\", ValueType.STRING).build()\n                            )\n                        )\n                    )\n                )\n            )\n        ),\n        ImmutableList.of(new Object[]{\"y\", \"y\", 1L})\n    );\n\n    \r\n    \r\n    Assert.assertEquals(2, scheduler.getTotalRun().get());\n    Assert.assertEquals(2, scheduler.getTotalPrioritizedAndLaned().get());\n    Assert.assertEquals(2, scheduler.getTotalAcquired().get());\n    Assert.assertEquals(2, scheduler.getTotalReleased().get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":482,"status":"M"},{"authorDate":"2021-03-10 05:07:34","commitOrder":4,"curCode":"  public void testJoinOnTableErrorCantInlineTable()\n  {\n    final GroupByQuery query =\n        (GroupByQuery) GroupByQuery.builder()\n                                   .setDataSource(\n                                       JoinDataSource.create(\n                                           new TableDataSource(FOO),\n                                           new TableDataSource(BAR),\n                                           \"j.\",\n                                           \"\\\"j.s\\\" == \\\"s\\\"\",\n                                           JoinType.INNER,\n                                           null,\n                                           ExprMacroTable.nil()\n                                       )\n                                   )\n                                   .setGranularity(Granularities.ALL)\n                                   .setInterval(Intervals.ONLY_ETERNITY)\n                                   .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                                   .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                                   .build()\n                                   .withId(UUID.randomUUID().toString());\n\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\"Cannot handle subquery structure for dataSource\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","date":"2021-03-10 05:07:34","endLine":770,"groupId":"10674","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testJoinOnTableErrorCantInlineTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7c/47377b9ce0f76da025b921e0a53be1ef463eda.src","preCode":"  public void testJoinOnTableErrorCantInlineTable()\n  {\n    final GroupByQuery query =\n        (GroupByQuery) GroupByQuery.builder()\n                                   .setDataSource(\n                                       JoinDataSource.create(\n                                           new TableDataSource(FOO),\n                                           new TableDataSource(BAR),\n                                           \"j.\",\n                                           \"\\\"j.s\\\" == \\\"s\\\"\",\n                                           JoinType.INNER,\n                                           ExprMacroTable.nil()\n                                       )\n                                   )\n                                   .setGranularity(Granularities.ALL)\n                                   .setInterval(Intervals.ONLY_ETERNITY)\n                                   .setDimensions(DefaultDimensionSpec.of(\"s\"), DefaultDimensionSpec.of(\"j.s\"))\n                                   .setAggregatorSpecs(new CountAggregatorFactory(\"cnt\"))\n                                   .build()\n                                   .withId(UUID.randomUUID().toString());\n\n    expectedException.expect(IllegalStateException.class);\n    expectedException.expectMessage(\"Cannot handle subquery structure for dataSource\");\n\n    testQuery(query, ImmutableList.of(), ImmutableList.of());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/ClientQuerySegmentWalkerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":744,"status":"M"}],"commitId":"c66951a59e2963369bbb447dba51ea7651a1cdb1","commitMessage":"@@@Add flag in SQL to disable left base filter optimization for joins (#10947)\n\n* Add flag to disable left base filter\n\n* code coverage\n\n* Draft\n\n* Review comments\n\n* code coverage\n\n* add docs\n\n* Add old tests","date":"2021-03-10 05:07:34","modifiedFileCount":"13","status":"M","submitter":"Abhishek Agarwal"}]
