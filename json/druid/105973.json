[{"authorTime":"2020-05-29 13:32:09","codes":[{"authorDate":"2020-04-09 12:31:17","commitOrder":2,"curCode":"  public void testPushDownNotLeafNot()\n  {\n    final Filter filter = FilterTestUtils.and(\n        FilterTestUtils.selector(\"col1\", \"1\"),\n        FilterTestUtils.selector(\"col2\", \"2\"),\n        FilterTestUtils.not(FilterTestUtils.selector(\"col3\", \"3\"))\n    );\n    final Filter pushedDown = HiveCnfHelper.pushDownNot(filter);\n    assertFilter(filter, filter, pushedDown);\n  }\n","date":"2020-04-09 12:31:17","endLine":75,"groupId":"14523","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPushDownNotLeafNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/57e9309164072cd34a6e94dc1339daacf0a746.src","preCode":"  public void testPushDownNotLeafNot()\n  {\n    final Filter filter = FilterTestUtils.and(\n        FilterTestUtils.selector(\"col1\", \"1\"),\n        FilterTestUtils.selector(\"col2\", \"2\"),\n        FilterTestUtils.not(FilterTestUtils.selector(\"col3\", \"3\"))\n    );\n    final Filter pushedDown = HiveCnfHelper.pushDownNot(filter);\n    assertFilter(filter, filter, pushedDown);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/FilterCnfConversionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"NB"},{"authorDate":"2020-05-29 13:32:09","commitOrder":2,"curCode":"  public void testToNormalizedOrClausesNonAndFilterShouldReturnSingleton()\n  {\n    Filter filter = FilterTestUtils.or(\n        FilterTestUtils.selector(\"col1\", \"val1\"),\n        FilterTestUtils.selector(\"col2\", \"val2\")\n    );\n    Set<Filter> expected = Collections.singleton(filter);\n    Set<Filter> normalizedOrClauses = Filters.toNormalizedOrClauses(filter);\n    Assert.assertEquals(expected, normalizedOrClauses);\n  }\n","date":"2020-05-29 13:32:09","endLine":519,"groupId":"12059","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testToNormalizedOrClausesNonAndFilterShouldReturnSingleton","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c1/2c012b5e05b338984fbc535ca99d5e5984586c.src","preCode":"  public void testToNormalizedOrClausesNonAndFilterShouldReturnSingleton()\n  {\n    Filter filter = FilterTestUtils.or(\n        FilterTestUtils.selector(\"col1\", \"val1\"),\n        FilterTestUtils.selector(\"col2\", \"val2\")\n    );\n    Set<Filter> expected = Collections.singleton(filter);\n    Set<Filter> normalizedOrClauses = Filters.toNormalizedOrClauses(filter);\n    Assert.assertEquals(expected, normalizedOrClauses);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/FilterCnfConversionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"B"}],"commitId":"faef31a0afd599c674790a2ab8d6835c92eb03f7","commitMessage":"@@@Refactor JoinFilterAnalyzer (#9921)\n\n* Refactor JoinFilterAnalyzer\n\nThis patch attempts to make it easier to follow the join filter analysis code\nwith the hope of making it easier to add rewrite optimizations in the future.\n\nTo keep the patch small and easy to review.  this is the first of at least 2\npatches that are planned.\n\nThis patch adds a builder to the Pre-Analysis.  so that it is easier to\ninstantiate the preAnalysis. It also moves some of the filter normalization\ncode out to Fitlers with associated tests.\n\n* fix tests","date":"2020-05-29 13:32:09","modifiedFileCount":"4","status":"M","submitter":"Suneet Saldanha"},{"authorTime":"2021-01-21 00:59:20","codes":[{"authorDate":"2020-04-09 12:31:17","commitOrder":3,"curCode":"  public void testPushDownNotLeafNot()\n  {\n    final Filter filter = FilterTestUtils.and(\n        FilterTestUtils.selector(\"col1\", \"1\"),\n        FilterTestUtils.selector(\"col2\", \"2\"),\n        FilterTestUtils.not(FilterTestUtils.selector(\"col3\", \"3\"))\n    );\n    final Filter pushedDown = HiveCnfHelper.pushDownNot(filter);\n    assertFilter(filter, filter, pushedDown);\n  }\n","date":"2020-04-09 12:31:17","endLine":75,"groupId":"105973","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPushDownNotLeafNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/57e9309164072cd34a6e94dc1339daacf0a746.src","preCode":"  public void testPushDownNotLeafNot()\n  {\n    final Filter filter = FilterTestUtils.and(\n        FilterTestUtils.selector(\"col1\", \"1\"),\n        FilterTestUtils.selector(\"col2\", \"2\"),\n        FilterTestUtils.not(FilterTestUtils.selector(\"col3\", \"3\"))\n    );\n    final Filter pushedDown = HiveCnfHelper.pushDownNot(filter);\n    assertFilter(filter, filter, pushedDown);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/FilterCnfConversionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2021-01-21 00:59:20","commitOrder":3,"curCode":"  public void testToNormalizedOrClausesNonAndFilterShouldReturnSingleton()\n  {\n    Filter filter = FilterTestUtils.or(\n        FilterTestUtils.selector(\"col1\", \"val1\"),\n        FilterTestUtils.selector(\"col2\", \"val2\")\n    );\n    List<Filter> expected = Collections.singletonList(filter);\n    List<Filter> normalizedOrClauses = Filters.toNormalizedOrClauses(filter);\n    Assert.assertEquals(expected, normalizedOrClauses);\n  }\n","date":"2021-01-21 00:59:20","endLine":519,"groupId":"105973","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testToNormalizedOrClausesNonAndFilterShouldReturnSingleton","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e9/b5304b25db107f9ccfdbafac03dd50d35908e5.src","preCode":"  public void testToNormalizedOrClausesNonAndFilterShouldReturnSingleton()\n  {\n    Filter filter = FilterTestUtils.or(\n        FilterTestUtils.selector(\"col1\", \"val1\"),\n        FilterTestUtils.selector(\"col2\", \"val2\")\n    );\n    Set<Filter> expected = Collections.singleton(filter);\n    Set<Filter> normalizedOrClauses = Filters.toNormalizedOrClauses(filter);\n    Assert.assertEquals(expected, normalizedOrClauses);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/filter/FilterCnfConversionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"M"}],"commitId":"8b808c48799b04b53e763fd49c766e1e6a26d1cb","commitMessage":"@@@Retain order of AND.  OR filter children. (#10758)\n\n* Retain order of AND.  OR filter children.\n\nIf we retain the order.  it enables short-circuiting. People can put a\nmore selective filter earlier in the list and lower the chance that\nlater filters will need to be evaluated.\n\nShort-circuiting was working before #9608.  which switched to unordered\nsets to solve a different problem. This patch tries to solve that\nproblem a different way.\n\nThis patch moves filter simplification logic from \"optimize\" to\n\"toFilter\".  because that allows the code to be shared with Filters.and\nand Filters.or. The simplification has become more complicated and so\nit's useful to share it.\n\nThis patch also removes code from CalciteCnfHelper that is no longer\nnecessary because Filters.and and Filters.or are now doing the work.\n\n* Fixes for inspections.\n\n* Fix tests.\n\n* Back to a Set.","date":"2021-01-21 00:59:20","modifiedFileCount":"15","status":"M","submitter":"Gian Merlino"}]
