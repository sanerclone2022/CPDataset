[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testGrowing()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final Grouper<Integer> grouper = makeGrouper(columnSelectorFactory, 10000, 2);\n    final int expectedMaxSize = NullHandling.replaceWithDefault() ? 219 : 210;\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    \r\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 11L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    final List<Grouper.Entry<Integer>> expected = Lists.newArrayList();\n    for (int i = 0; i < expectedMaxSize; i++) {\n      expected.add(new Grouper.Entry<>(i, new Object[]{21L, 2L}));\n    }\n\n    Assert.assertEquals(expected, Lists.newArrayList(grouper.iterator(true)));\n  }\n","date":"2018-08-31 00:56:26","endLine":136,"groupId":"12997","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGrowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/53/a74c75ea8ab04397645fe48b666f8732a4bf2f.src","preCode":"  public void testGrowing()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final Grouper<Integer> grouper = makeGrouper(columnSelectorFactory, 10000, 2);\n    final int expectedMaxSize = NullHandling.replaceWithDefault() ? 219 : 210;\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    \r\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 11L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    final List<Grouper.Entry<Integer>> expected = Lists.newArrayList();\n    for (int i = 0; i < expectedMaxSize; i++) {\n      expected.add(new Grouper.Entry<>(i, new Object[]{21L, 2L}));\n    }\n\n    Assert.assertEquals(expected, Lists.newArrayList(grouper.iterator(true)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/epinephelinae/BufferHashGrouperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testNoGrowing()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final Grouper<Integer> grouper = makeGrouper(columnSelectorFactory, 10000, Integer.MAX_VALUE);\n    final int expectedMaxSize = NullHandling.replaceWithDefault() ? 267 : 258;\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    \r\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 11L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    final List<Grouper.Entry<Integer>> expected = Lists.newArrayList();\n    for (int i = 0; i < expectedMaxSize; i++) {\n      expected.add(new Grouper.Entry<>(i, new Object[]{21L, 2L}));\n    }\n\n    Assert.assertEquals(expected, Lists.newArrayList(grouper.iterator(true)));\n  }\n","date":"2018-08-31 00:56:26","endLine":192,"groupId":"12997","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoGrowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/53/a74c75ea8ab04397645fe48b666f8732a4bf2f.src","preCode":"  public void testNoGrowing()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final Grouper<Integer> grouper = makeGrouper(columnSelectorFactory, 10000, Integer.MAX_VALUE);\n    final int expectedMaxSize = NullHandling.replaceWithDefault() ? 267 : 258;\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    \r\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 11L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    final List<Grouper.Entry<Integer>> expected = Lists.newArrayList();\n    for (int i = 0; i < expectedMaxSize; i++) {\n      expected.add(new Grouper.Entry<>(i, new Object[]{21L, 2L}));\n    }\n\n    Assert.assertEquals(expected, Lists.newArrayList(grouper.iterator(true)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/epinephelinae/BufferHashGrouperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testGrowing()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final Grouper<Integer> grouper = makeGrouper(columnSelectorFactory, 10000, 2);\n    final int expectedMaxSize = NullHandling.replaceWithDefault() ? 219 : 210;\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    \r\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 11L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    final List<Grouper.Entry<Integer>> expected = new ArrayList<>();\n    for (int i = 0; i < expectedMaxSize; i++) {\n      expected.add(new Grouper.Entry<>(i, new Object[]{21L, 2L}));\n    }\n\n    Assert.assertEquals(expected, Lists.newArrayList(grouper.iterator(true)));\n  }\n","date":"2018-10-29 20:02:43","endLine":137,"groupId":"12997","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGrowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c2/8657a1c555e466e097c3912e4ea31008b1c8ff.src","preCode":"  public void testGrowing()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final Grouper<Integer> grouper = makeGrouper(columnSelectorFactory, 10000, 2);\n    final int expectedMaxSize = NullHandling.replaceWithDefault() ? 219 : 210;\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    \r\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 11L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    final List<Grouper.Entry<Integer>> expected = Lists.newArrayList();\n    for (int i = 0; i < expectedMaxSize; i++) {\n      expected.add(new Grouper.Entry<>(i, new Object[]{21L, 2L}));\n    }\n\n    Assert.assertEquals(expected, Lists.newArrayList(grouper.iterator(true)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/epinephelinae/BufferHashGrouperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testNoGrowing()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final Grouper<Integer> grouper = makeGrouper(columnSelectorFactory, 10000, Integer.MAX_VALUE);\n    final int expectedMaxSize = NullHandling.replaceWithDefault() ? 267 : 258;\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    \r\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 11L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    final List<Grouper.Entry<Integer>> expected = new ArrayList<>();\n    for (int i = 0; i < expectedMaxSize; i++) {\n      expected.add(new Grouper.Entry<>(i, new Object[]{21L, 2L}));\n    }\n\n    Assert.assertEquals(expected, Lists.newArrayList(grouper.iterator(true)));\n  }\n","date":"2018-10-29 20:02:43","endLine":193,"groupId":"12997","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoGrowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c2/8657a1c555e466e097c3912e4ea31008b1c8ff.src","preCode":"  public void testNoGrowing()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final Grouper<Integer> grouper = makeGrouper(columnSelectorFactory, 10000, Integer.MAX_VALUE);\n    final int expectedMaxSize = NullHandling.replaceWithDefault() ? 267 : 258;\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    \r\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 11L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    final List<Grouper.Entry<Integer>> expected = Lists.newArrayList();\n    for (int i = 0; i < expectedMaxSize; i++) {\n      expected.add(new Grouper.Entry<>(i, new Object[]{21L, 2L}));\n    }\n\n    Assert.assertEquals(expected, Lists.newArrayList(grouper.iterator(true)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/epinephelinae/BufferHashGrouperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2018-12-07 12:05:27","codes":[{"authorDate":"2018-12-07 12:05:27","commitOrder":3,"curCode":"  public void testGrowing()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final Grouper<Integer> grouper = makeGrouper(columnSelectorFactory, 10000, 2, 0.75f);\n    final int expectedMaxSize = NullHandling.replaceWithDefault() ? 219 : 210;\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    \r\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 11L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    final List<Grouper.Entry<Integer>> expected = new ArrayList<>();\n    for (int i = 0; i < expectedMaxSize; i++) {\n      expected.add(new Grouper.Entry<>(i, new Object[]{21L, 2L}));\n    }\n\n    Assert.assertEquals(expected, Lists.newArrayList(grouper.iterator(true)));\n  }\n","date":"2018-12-07 12:05:27","endLine":129,"groupId":"106549","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGrowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/64/b270d0f4d3b34db8fd4b6eb1949abd21a1b544.src","preCode":"  public void testGrowing()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final Grouper<Integer> grouper = makeGrouper(columnSelectorFactory, 10000, 2);\n    final int expectedMaxSize = NullHandling.replaceWithDefault() ? 219 : 210;\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    \r\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 11L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    final List<Grouper.Entry<Integer>> expected = new ArrayList<>();\n    for (int i = 0; i < expectedMaxSize; i++) {\n      expected.add(new Grouper.Entry<>(i, new Object[]{21L, 2L}));\n    }\n\n    Assert.assertEquals(expected, Lists.newArrayList(grouper.iterator(true)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/epinephelinae/BufferHashGrouperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2018-12-07 12:05:27","commitOrder":3,"curCode":"  public void testNoGrowing()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final Grouper<Integer> grouper = makeGrouper(columnSelectorFactory, 10000, Integer.MAX_VALUE, 0.75f);\n    final int expectedMaxSize = NullHandling.replaceWithDefault() ? 267 : 258;\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    \r\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 11L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    final List<Grouper.Entry<Integer>> expected = new ArrayList<>();\n    for (int i = 0; i < expectedMaxSize; i++) {\n      expected.add(new Grouper.Entry<>(i, new Object[]{21L, 2L}));\n    }\n\n    Assert.assertEquals(expected, Lists.newArrayList(grouper.iterator(true)));\n  }\n","date":"2018-12-07 12:05:27","endLine":176,"groupId":"106549","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNoGrowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/64/b270d0f4d3b34db8fd4b6eb1949abd21a1b544.src","preCode":"  public void testNoGrowing()\n  {\n    final TestColumnSelectorFactory columnSelectorFactory = GrouperTestUtil.newColumnSelectorFactory();\n    final Grouper<Integer> grouper = makeGrouper(columnSelectorFactory, 10000, Integer.MAX_VALUE);\n    final int expectedMaxSize = NullHandling.replaceWithDefault() ? 267 : 258;\n\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 10L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    \r\n    columnSelectorFactory.setRow(new MapBasedRow(0, ImmutableMap.of(\"value\", 11L)));\n    for (int i = 0; i < expectedMaxSize; i++) {\n      Assert.assertTrue(String.valueOf(i), grouper.aggregate(i).isOk());\n    }\n    Assert.assertFalse(grouper.aggregate(expectedMaxSize).isOk());\n\n    final List<Grouper.Entry<Integer>> expected = new ArrayList<>();\n    for (int i = 0; i < expectedMaxSize; i++) {\n      expected.add(new Grouper.Entry<>(i, new Object[]{21L, 2L}));\n    }\n\n    Assert.assertEquals(expected, Lists.newArrayList(grouper.iterator(true)));\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/groupby/epinephelinae/BufferHashGrouperTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"d525e5b18e800d9fa59d8b80dc6487142f32ad75","commitMessage":"@@@Fix travis timeout in BufferHashGrouperTest (#6713)\n\n* Fix travis timeout in BufferHashGrouperTest\n\n* adjust buffer size\n\n* adjust bufferSize and loadFactor\n\n* increase memory\n\n* add debug code\n\n* cat error\n\n* after script\n\n* print logs\n\n* print per 2 min\n\n* use direct mem\n\n* clean up\n","date":"2018-12-07 12:05:27","modifiedFileCount":"1","status":"M","submitter":"Jihoon Son"}]
