[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSelectStar() throws Exception\n  {\n    String nullValue = NullHandling.replaceWithDefault() ? \"\" : null;\n    testQuery(\n        \"SELECT * FROM druid.foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", 1f, 1.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2000-01-02\"), 1L, \"10.1\", nullValue, 2f, 2.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", 3f, 3.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", 4f, 4.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", 5f, 5.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", nullValue, 6f, 6.0, HLLCV1.class.getName()}\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":612,"groupId":"17119","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectStar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testSelectStar() throws Exception\n  {\n    String nullValue = NullHandling.replaceWithDefault() ? \"\" : null;\n    testQuery(\n        \"SELECT * FROM druid.foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", 1f, 1.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2000-01-02\"), 1L, \"10.1\", nullValue, 2f, 2.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", 3f, 3.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", 4f, 4.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", 5f, 5.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", nullValue, 6f, 6.0, HLLCV1.class.getName()}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":589,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    String nullValue = NullHandling.replaceWithDefault() ? \"\" : null;\n    testQuery(\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        ImmutableList.of(\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(FIRST_PAGING_SPEC)\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build(),\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(\n                      new PagingSpec(\n                          ImmutableMap.of(\"foo_1970-01-01T00:00:00.000Z_2001-01-03T00:00:00.001Z_1\", 5),\n                          1000,\n                          true\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", 1f, 1.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2000-01-02\"), 1L, \"10.1\", nullValue, 2f, 2.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", 3f, 3.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", 4f, 4.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", 5f, 5.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", nullValue, 6f, 6.0, HLLCV1.class.getName()}\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":802,"groupId":"17119","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectStarWithoutLimitTimeAscending","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    String nullValue = NullHandling.replaceWithDefault() ? \"\" : null;\n    testQuery(\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        ImmutableList.of(\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(FIRST_PAGING_SPEC)\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build(),\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(\n                      new PagingSpec(\n                          ImmutableMap.of(\"foo_1970-01-01T00:00:00.000Z_2001-01-03T00:00:00.001Z_1\", 5),\n                          1000,\n                          true\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", 1f, 1.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2000-01-02\"), 1L, \"10.1\", nullValue, 2f, 2.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", 3f, 3.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", 4f, 4.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", 5f, 5.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", nullValue, 6f, 6.0, HLLCV1.class.getName()}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":760,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-03 01:50:22","codes":[{"authorDate":"2018-10-03 01:50:22","commitOrder":2,"curCode":"  public void testSelectStar() throws Exception\n  {\n    String nullValue = NullHandling.replaceWithDefault() ? \"\" : null;\n    String hyperLogLogCollectorClassName = VersionOneHyperLogLogCollector.class.getName();\n    testQuery(\n        \"SELECT * FROM druid.foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", 1f, 1.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2000-01-02\"), 1L, \"10.1\", nullValue, 2f, 2.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", 3f, 3.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", 4f, 4.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", 5f, 5.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", nullValue, 6f, 6.0, hyperLogLogCollectorClassName}\n        )\n    );\n  }\n","date":"2018-10-03 01:50:22","endLine":638,"groupId":"4523","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectStar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/30/e8670173b9dc2e1ddae86bfb86147d2ae92037.src","preCode":"  public void testSelectStar() throws Exception\n  {\n    String nullValue = NullHandling.replaceWithDefault() ? \"\" : null;\n    testQuery(\n        \"SELECT * FROM druid.foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", 1f, 1.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2000-01-02\"), 1L, \"10.1\", nullValue, 2f, 2.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", 3f, 3.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", 4f, 4.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", 5f, 5.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", nullValue, 6f, 6.0, HLLCV1.class.getName()}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":614,"status":"M"},{"authorDate":"2018-10-03 01:50:22","commitOrder":2,"curCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    String nullValue = NullHandling.replaceWithDefault() ? \"\" : null;\n    testQuery(\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        ImmutableList.of(\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(FIRST_PAGING_SPEC)\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build(),\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(\n                      new PagingSpec(\n                          ImmutableMap.of(\"foo_1970-01-01T00:00:00.000Z_2001-01-03T00:00:00.001Z_1\", 5),\n                          1000,\n                          true\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", 1f, 1.0, VersionOneHyperLogLogCollector.class.getName()},\n            new Object[]{T(\"2000-01-02\"), 1L, \"10.1\", nullValue, 2f, 2.0, VersionOneHyperLogLogCollector.class.getName()},\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", 3f, 3.0, VersionOneHyperLogLogCollector.class.getName()},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", 4f, 4.0, VersionOneHyperLogLogCollector.class.getName()},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", 5f, 5.0, VersionOneHyperLogLogCollector.class.getName()},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", nullValue, 6f, 6.0, VersionOneHyperLogLogCollector.class.getName()}\n        )\n    );\n  }\n","date":"2018-10-03 01:50:22","endLine":828,"groupId":"17119","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectStarWithoutLimitTimeAscending","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/30/e8670173b9dc2e1ddae86bfb86147d2ae92037.src","preCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    String nullValue = NullHandling.replaceWithDefault() ? \"\" : null;\n    testQuery(\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        ImmutableList.of(\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(FIRST_PAGING_SPEC)\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build(),\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(\n                      new PagingSpec(\n                          ImmutableMap.of(\"foo_1970-01-01T00:00:00.000Z_2001-01-03T00:00:00.001Z_1\", 5),\n                          1000,\n                          true\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", 1f, 1.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2000-01-02\"), 1L, \"10.1\", nullValue, 2f, 2.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", 3f, 3.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", 4f, 4.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", 5f, 5.0, HLLCV1.class.getName()},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", nullValue, 6f, 6.0, HLLCV1.class.getName()}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":786,"status":"M"}],"commitId":"3ae563263a23000560749071d262727d47296856","commitMessage":"@@@Renamed 'Generic Column' -> 'Numeric Column'; Fixed a few resource leaks in processing; misc refinements (#5957)\n\nThis PR accumulates many refactorings and small improvements that I did while preparing the next change set of https://github.com/druid-io/druid/projects/2. I finally decided to make them a separate PR to minimize the volume of the main PR.\n\nSome of the changes:\n - Renamed confusing \"Generic Column\" term to \"Numeric Column\" (what it actually implies) in many class names.\n - Generified `ComplexMetricExtractor`","date":"2018-10-03 01:50:22","modifiedFileCount":"776","status":"M","submitter":"Roman Leventov"},{"authorTime":"2018-10-16 05:01:21","codes":[{"authorDate":"2018-10-16 05:01:21","commitOrder":3,"curCode":"  public void testSelectStar() throws Exception\n  {\n    String hyperLogLogCollectorClassName = HLLC_STRING;\n    testQuery(\n        \"SELECT * FROM druid.foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, hyperLogLogCollectorClassName},\n            new Object[]{\n                T(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, hyperLogLogCollectorClassName\n            },\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, hyperLogLogCollectorClassName}\n        )\n    );\n  }\n","date":"2018-10-16 05:01:21","endLine":652,"groupId":"3012","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectStar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/43/16ec0560839cf10739fc335fdc3753a365af3a.src","preCode":"  public void testSelectStar() throws Exception\n  {\n    String nullValue = NullHandling.replaceWithDefault() ? \"\" : null;\n    String hyperLogLogCollectorClassName = VersionOneHyperLogLogCollector.class.getName();\n    testQuery(\n        \"SELECT * FROM druid.foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", 1f, 1.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2000-01-02\"), 1L, \"10.1\", nullValue, 2f, 2.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", 3f, 3.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", 4f, 4.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", 5f, 5.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", nullValue, 6f, 6.0, hyperLogLogCollectorClassName}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":627,"status":"M"},{"authorDate":"2018-10-16 05:01:21","commitOrder":3,"curCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    testQuery(\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        ImmutableList.of(\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(FIRST_PAGING_SPEC)\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build(),\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(\n                      new PagingSpec(\n                          ImmutableMap.of(\"foo_1970-01-01T00:00:00.000Z_2001-01-03T00:00:00.001Z_1\", 5),\n                          1000,\n                          true\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, HLLC_STRING},\n            new Object[]{T(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, HLLC_STRING},\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, HLLC_STRING},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, HLLC_STRING},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, HLLC_STRING},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, HLLC_STRING}\n        )\n    );\n  }\n","date":"2018-10-16 05:01:21","endLine":836,"groupId":"7383","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectStarWithoutLimitTimeAscending","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/43/16ec0560839cf10739fc335fdc3753a365af3a.src","preCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    String nullValue = NullHandling.replaceWithDefault() ? \"\" : null;\n    testQuery(\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        ImmutableList.of(\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(FIRST_PAGING_SPEC)\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build(),\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(\n                      new PagingSpec(\n                          ImmutableMap.of(\"foo_1970-01-01T00:00:00.000Z_2001-01-03T00:00:00.001Z_1\", 5),\n                          1000,\n                          true\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", 1f, 1.0, VersionOneHyperLogLogCollector.class.getName()},\n            new Object[]{T(\"2000-01-02\"), 1L, \"10.1\", nullValue, 2f, 2.0, VersionOneHyperLogLogCollector.class.getName()},\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", 3f, 3.0, VersionOneHyperLogLogCollector.class.getName()},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", 4f, 4.0, VersionOneHyperLogLogCollector.class.getName()},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", 5f, 5.0, VersionOneHyperLogLogCollector.class.getName()},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", nullValue, 6f, 6.0, VersionOneHyperLogLogCollector.class.getName()}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":795,"status":"M"}],"commitId":"f537c0069a724c55161168ed8c7fc1e1d4b52293","commitMessage":"@@@SQL: Support for selecting multi-value dimensions. (#6462)\n\n* SQL: Support for selecting multi-value dimensions.\n\nFixes #4637. Doesn't completely address everything mentioned in #4638. \nbut at least fixes one issue on the way there.\n\n* Fix null cases in tests.\n","date":"2018-10-16 05:01:21","modifiedFileCount":"6","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-02-02 05:54:46","codes":[{"authorDate":"2019-02-02 05:54:46","commitOrder":4,"curCode":"  public void testSelectStar() throws Exception\n  {\n    String hyperLogLogCollectorClassName = HLLC_STRING;\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, hyperLogLogCollectorClassName},\n            new Object[]{\n                T(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, hyperLogLogCollectorClassName\n            },\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, hyperLogLogCollectorClassName}\n        )\n    );\n  }\n","date":"2019-02-02 05:54:46","endLine":449,"groupId":"3012","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectStar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b8/9ae45a1d47533517769b79f7278a70743b028f.src","preCode":"  public void testSelectStar() throws Exception\n  {\n    String hyperLogLogCollectorClassName = HLLC_STRING;\n    testQuery(\n        \"SELECT * FROM druid.foo\",\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, hyperLogLogCollectorClassName},\n            new Object[]{\n                T(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, hyperLogLogCollectorClassName\n            },\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, hyperLogLogCollectorClassName}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"},{"authorDate":"2019-02-02 05:54:46","commitOrder":4,"curCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(FIRST_PAGING_SPEC)\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build(),\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(\n                      new PagingSpec(\n                          ImmutableMap.of(\"foo_1970-01-01T00:00:00.000Z_2001-01-03T00:00:00.001Z_1\", 5),\n                          1000,\n                          true\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, HLLC_STRING},\n            new Object[]{T(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, HLLC_STRING},\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, HLLC_STRING},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, HLLC_STRING},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, HLLC_STRING},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, HLLC_STRING}\n        )\n    );\n  }\n","date":"2019-02-02 05:54:46","endLine":642,"groupId":"7383","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectStarWithoutLimitTimeAscending","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b8/9ae45a1d47533517769b79f7278a70743b028f.src","preCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    testQuery(\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        ImmutableList.of(\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(FIRST_PAGING_SPEC)\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build(),\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(\n                      new PagingSpec(\n                          ImmutableMap.of(\"foo_1970-01-01T00:00:00.000Z_2001-01-03T00:00:00.001Z_1\", 5),\n                          1000,\n                          true\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, HLLC_STRING},\n            new Object[]{T(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, HLLC_STRING},\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, HLLC_STRING},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, HLLC_STRING},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, HLLC_STRING},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, HLLC_STRING}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":598,"status":"M"}],"commitId":"7a5827e12eb65eef80e08fe86ef76604019d6af8","commitMessage":"@@@bloom filter sql aggregator (#6950)\n\n* adds sql aggregator for bloom filter.  adds complex value serde for sql results\n\n* fix tests\n\n* checkstyle\n\n* fix copy-paste\n","date":"2019-02-02 05:54:46","modifiedFileCount":"7","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":5,"curCode":"  public void testSelectStar() throws Exception\n  {\n    String hyperLogLogCollectorClassName = HLLC_STRING;\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{t(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, hyperLogLogCollectorClassName},\n            new Object[]{\n                t(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, hyperLogLogCollectorClassName\n            },\n            new Object[]{t(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, hyperLogLogCollectorClassName},\n            new Object[]{t(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, hyperLogLogCollectorClassName},\n            new Object[]{t(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, hyperLogLogCollectorClassName},\n            new Object[]{t(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, hyperLogLogCollectorClassName}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":449,"groupId":"3012","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectStar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testSelectStar() throws Exception\n  {\n    String hyperLogLogCollectorClassName = HLLC_STRING;\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(QSS(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, hyperLogLogCollectorClassName},\n            new Object[]{\n                T(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, hyperLogLogCollectorClassName\n            },\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, hyperLogLogCollectorClassName},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, hyperLogLogCollectorClassName}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"},{"authorDate":"2019-02-24 12:10:31","commitOrder":5,"curCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(FIRST_PAGING_SPEC)\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build(),\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(\n                      new PagingSpec(\n                          ImmutableMap.of(\"foo_1970-01-01T00:00:00.000Z_2001-01-03T00:00:00.001Z_1\", 5),\n                          1000,\n                          true\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{t(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, HLLC_STRING},\n            new Object[]{t(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, HLLC_STRING},\n            new Object[]{t(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, HLLC_STRING},\n            new Object[]{t(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, HLLC_STRING},\n            new Object[]{t(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, HLLC_STRING},\n            new Object[]{t(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, HLLC_STRING}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":642,"groupId":"3012","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectStarWithoutLimitTimeAscending","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(FIRST_PAGING_SPEC)\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build(),\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(\n                      new PagingSpec(\n                          ImmutableMap.of(\"foo_1970-01-01T00:00:00.000Z_2001-01-03T00:00:00.001Z_1\", 5),\n                          1000,\n                          true\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{T(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, HLLC_STRING},\n            new Object[]{T(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, HLLC_STRING},\n            new Object[]{T(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, HLLC_STRING},\n            new Object[]{T(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, HLLC_STRING},\n            new Object[]{T(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, HLLC_STRING},\n            new Object[]{T(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, HLLC_STRING}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":598,"status":"M"}],"commitId":"8b803cbc22b15799fd0526de8d6d0eea155ad733","commitMessage":"@@@Added checkstyle for \"Methods starting with Capital Letters\"  (#7118)\n\n* Added checkstyle for \"Methods starting with Capital Letters\" and changed the method names violating this.\n\n* Un-abbreviate the method names in the calcite tests\n\n* Fixed checkstyle errors\n\n* Changed asserts position in the code\n","date":"2019-02-24 12:10:31","modifiedFileCount":"24","status":"M","submitter":"Himanshu Pandey"},{"authorTime":"2019-03-12 02:37:58","codes":[{"authorDate":"2019-03-12 02:37:58","commitOrder":6,"curCode":"  public void testSelectStar() throws Exception\n  {\n    String hyperLogLogCollectorClassName = HLLC_STRING;\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, hyperLogLogCollectorClassName},\n            new Object[]{\n                timestamp(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, hyperLogLogCollectorClassName\n            },\n            new Object[]{timestamp(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, hyperLogLogCollectorClassName}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":449,"groupId":"3012","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectStar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testSelectStar() throws Exception\n  {\n    String hyperLogLogCollectorClassName = HLLC_STRING;\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{t(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, hyperLogLogCollectorClassName},\n            new Object[]{\n                t(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, hyperLogLogCollectorClassName\n            },\n            new Object[]{t(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, hyperLogLogCollectorClassName},\n            new Object[]{t(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, hyperLogLogCollectorClassName},\n            new Object[]{t(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, hyperLogLogCollectorClassName},\n            new Object[]{t(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, hyperLogLogCollectorClassName}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"},{"authorDate":"2019-03-12 02:37:58","commitOrder":6,"curCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(FIRST_PAGING_SPEC)\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build(),\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(\n                      new PagingSpec(\n                          ImmutableMap.of(\"foo_1970-01-01T00:00:00.000Z_2001-01-03T00:00:00.001Z_1\", 5),\n                          1000,\n                          true\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, HLLC_STRING}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":642,"groupId":"9263","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectStarWithoutLimitTimeAscending","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(FIRST_PAGING_SPEC)\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build(),\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(\n                      new PagingSpec(\n                          ImmutableMap.of(\"foo_1970-01-01T00:00:00.000Z_2001-01-03T00:00:00.001Z_1\", 5),\n                          1000,\n                          true\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{t(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, HLLC_STRING},\n            new Object[]{t(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, HLLC_STRING},\n            new Object[]{t(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, HLLC_STRING},\n            new Object[]{t(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, HLLC_STRING},\n            new Object[]{t(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, HLLC_STRING},\n            new Object[]{t(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, HLLC_STRING}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":598,"status":"M"}],"commitId":"d7ba19d477732578fc310831ed28365b36332752","commitMessage":"@@@sql.  filters.  and virtual columns  (#6902)\n\n* refactor sql planning to re-use expression virtual columns when possible when constructing a DruidQuery.  allowing virtual columns to be defined in filter expressions.  and making resulting native druid queries more concise. also minor refactor of built-in sql aggregators to maximize code re-use\n\n* fix it\n\n* fix it in the right place\n\n* fixup for base64 stuff\n\n* fixup tests\n\n* fix merge conflict on import order\n\n* fixup\n\n* fix imports\n\n* fix tests\n\n* review comments\n\n* refactor\n\n* re-arrange\n\n* better javadoc\n\n* fixup merge\n\n* fixup tests\n\n* fix accidental changes\n","date":"2019-03-12 02:37:58","modifiedFileCount":"33","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-03-12 02:37:58","codes":[{"authorDate":"2019-03-29 05:37:09","commitOrder":7,"curCode":"  public void testSelectStar() throws Exception\n  {\n    String hyperLogLogCollectorClassName = HLLC_STRING;\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, hyperLogLogCollectorClassName},\n            new Object[]{\n                timestamp(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, hyperLogLogCollectorClassName\n            },\n            new Object[]{timestamp(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, hyperLogLogCollectorClassName}\n        )\n    );\n  }\n","date":"2019-03-29 05:37:09","endLine":449,"groupId":"3012","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectStar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/7887cc5b629c34eac2672f4aae9bc27d95fa4b.src","preCode":"  public void testSelectStar() throws Exception\n  {\n    String hyperLogLogCollectorClassName = HLLC_STRING;\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, hyperLogLogCollectorClassName},\n            new Object[]{\n                timestamp(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, hyperLogLogCollectorClassName\n            },\n            new Object[]{timestamp(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, hyperLogLogCollectorClassName}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"},{"authorDate":"2019-03-12 02:37:58","commitOrder":7,"curCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(FIRST_PAGING_SPEC)\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build(),\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(\n                      new PagingSpec(\n                          ImmutableMap.of(\"foo_1970-01-01T00:00:00.000Z_2001-01-03T00:00:00.001Z_1\", 5),\n                          1000,\n                          true\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, HLLC_STRING}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":642,"groupId":"9263","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectStarWithoutLimitTimeAscending","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(FIRST_PAGING_SPEC)\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build(),\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(\n                      new PagingSpec(\n                          ImmutableMap.of(\"foo_1970-01-01T00:00:00.000Z_2001-01-03T00:00:00.001Z_1\", 5),\n                          1000,\n                          true\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, HLLC_STRING}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":598,"status":"N"}],"commitId":"ad7862c58ac7f05cb28108543c017e2b186d1031","commitMessage":"@@@Time Ordering On Scans (#7133)\n\n* Moved Scan Builder to Druids class and started on Scan Benchmark setup\n\n* Need to form queries\n\n* It runs.\n\n* Stuff for time-ordered scan query\n\n* Move ScanResultValue timestamp comparator to a separate class for testing\n\n* Licensing stuff\n\n* Change benchmark\n\n* Remove todos\n\n* Added TimestampComparator tests\n\n* Change number of benchmark iterations\n\n* Added time ordering to the scan benchmark\n\n* Changed benchmark params\n\n* More param changes\n\n* Benchmark param change\n\n* Made Jon's changes and removed TODOs\n\n* Broke some long lines into two lines\n\n* nit\n\n* Decrease segment size for less memory usage\n\n* Wrote tests for heapsort scan result values and fixed bug where iterator\nwasn't returning elements in correct order\n\n* Wrote more tests for scan result value sort\n\n* Committing a param change to kick teamcity\n\n* Fixed codestyle and forbidden API errors\n\n* .\n\n* Improved conciseness\n\n* nit\n\n* Created an error message for when someone tries to time order a result\nset > threshold limit\n\n* Set to spaces over tabs\n\n* Fixing tests WIP\n\n* Fixed failing calcite tests\n\n* Kicking travis with change to benchmark param\n\n* added all query types to scan benchmark\n\n* Fixed benchmark queries\n\n* Renamed sort function\n\n* Added javadoc on ScanResultValueTimestampComparator\n\n* Unused import\n\n* Added more javadoc\n\n* improved doc\n\n* Removed unused import to satisfy PMD check\n\n* Small changes\n\n* Changes based on Gian's comments\n\n* Fixed failing test due to null resultFormat\n\n* Added config and get # of segments\n\n* Set up time ordering strategy decision tree\n\n* Refactor and pQueue works\n\n* Cleanup\n\n* Ordering is correct on n-way merge -> still need to batch events into\nScanResultValues\n\n* WIP\n\n* Sequence stuff is so dirty :(\n\n* Fixed bug introduced by replacing deque with list\n\n* Wrote docs\n\n* Multi-historical setup works\n\n* WIP\n\n* Change so batching only occurs on broker for time-ordered scans\n\nRestricted batching to broker for time-ordered queries and adjusted\ntests\n\nFormatting\n\nCleanup\n\n* Fixed mistakes in merge\n\n* Fixed failing tests\n\n* Reset config\n\n* Wrote tests and added Javadoc\n\n* Nit-change on javadoc\n\n* Checkstyle fix\n\n* Improved test and appeased TeamCity\n\n* Sorry.  checkstyle\n\n* Applied Jon's recommended changes\n\n* Checkstyle fix\n\n* Optimization\n\n* Fixed tests\n\n* Updated error message\n\n* Added error message for UOE\n\n* Renaming\n\n* Finish rename\n\n* Smarter limiting for pQueue method\n\n* Optimized n-way merge strategy\n\n* Rename segment limit -> segment partitions limit\n\n* Added a bit of docs\n\n* More comments\n\n* Fix checkstyle and test\n\n* Nit comment\n\n* Fixed failing tests -> allow usage of all types of segment spec\n\n* Fixed failing tests -> allow usage of all types of segment spec\n\n* Revert \"Fixed failing tests -> allow usage of all types of segment spec\"\n\nThis reverts commit ec470288c7b725f5310bcf69d1db9f85ff509c8d.\n\n* Revert \"Merge branch '6088-Time-Ordering-On-Scans-N-Way-Merge' of github.com:justinborromeo/incubator-druid into 6088-Time-Ordering-On-Scans-N-Way-Merge\"\n\nThis reverts commit 57033f36df6e3ef887e5f0399ad74bb091306de8.  reversing\nchanges made to 8f01d8dd16f40d10c60519ca0ec0d2e6b2dde941.\n\n* Check type of segment spec before using for time ordering\n\n* Fix bug in numRowsScanned\n\n* Fix bug messing up count of rows\n\n* Fix docs and flipped boolean in ScanQueryLimitRowIterator\n\n* Refactor n-way merge\n\n* Added test for n-way merge\n\n* Refixed regression\n\n* Checkstyle and doc update\n\n* Modified sequence limit to accept longs and added test for long limits\n\n* doc fix\n\n* Implemented Clint's recommendations\n","date":"2019-03-29 05:37:09","modifiedFileCount":"23","status":"M","submitter":"Justin Borromeo"},{"authorTime":"2019-04-03 06:46:01","codes":[{"authorDate":"2019-03-29 05:37:09","commitOrder":8,"curCode":"  public void testSelectStar() throws Exception\n  {\n    String hyperLogLogCollectorClassName = HLLC_STRING;\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, hyperLogLogCollectorClassName},\n            new Object[]{\n                timestamp(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, hyperLogLogCollectorClassName\n            },\n            new Object[]{timestamp(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, hyperLogLogCollectorClassName}\n        )\n    );\n  }\n","date":"2019-03-29 05:37:09","endLine":449,"groupId":"3012","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectStar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/7887cc5b629c34eac2672f4aae9bc27d95fa4b.src","preCode":"  public void testSelectStar() throws Exception\n  {\n    String hyperLogLogCollectorClassName = HLLC_STRING;\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, hyperLogLogCollectorClassName},\n            new Object[]{\n                timestamp(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, hyperLogLogCollectorClassName\n            },\n            new Object[]{timestamp(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, hyperLogLogCollectorClassName}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"N"},{"authorDate":"2019-04-03 06:46:01","commitOrder":8,"curCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                .limit(Long.MAX_VALUE)\n                .order(ScanQuery.Order.ASCENDING)\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, HLLC_STRING}\n        )\n    );\n  }\n","date":"2019-04-03 06:46:01","endLine":633,"groupId":"9630","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectStarWithoutLimitTimeAscending","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ef/d65d9176e2886ef04fa7a32d456a18b1fb2c09.src","preCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(FIRST_PAGING_SPEC)\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build(),\n            Druids.newSelectQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .dimensions(ImmutableList.of(\"dummy\"))\n                  .metrics(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                  .descending(false)\n                  .pagingSpec(\n                      new PagingSpec(\n                          ImmutableMap.of(\"foo_1970-01-01T00:00:00.000Z_2001-01-03T00:00:00.001Z_1\", 5),\n                          1000,\n                          true\n                      )\n                  )\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, HLLC_STRING}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"M"}],"commitId":"4584b5e13903c3ffb76865690231d882f70a6c4b","commitMessage":"@@@SQL support for time-ordered scan (#7373)\n\n* Squashed commit of the following:\n\ncommit 287a367f4170e7d0b3010d57788ea993688b9335\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Mar 27 20:03:41 2019 -0700\n\n    Implemented Clint's recommendations\n\ncommit 07503ea5c00892bf904c0e16e7062fadabcb7830\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Mar 27 17:49:09 2019 -0700\n\n    doc fix\n\ncommit 231a72e7d9c0f4bb2b3272134cf53fc8db8f0e73\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Mar 27 17:38:20 2019 -0700\n\n    Modified sequence limit to accept longs and added test for long limits\n\ncommit 1df50de32137961d949c1aaa4e4791f6edfb3d77\nMerge: 480e932fd c7fea6ac8\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Mar 26 15:23:01 2019 -0700\n\n    Merge branch 'master' into 6088-Time-Ordering-On-Scans-N-Way-Merge\n\ncommit 480e932fdf02ef85ba81181deb865d9977dfed24\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Mar 26 14:58:04 2019 -0700\n\n    Checkstyle and doc update\n\ncommit 487f31fcf63a5e1fa9e802212b62206aec47fe25\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Mar 26 14:39:25 2019 -0700\n\n    Refixed regression\n\ncommit fb858efbb75218bb80b8c77effb2456554aa57b2\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Mar 26 13:14:48 2019 -0700\n\n    Added test for n-way merge\n\ncommit 376e8bf90610d43d2c7b278bf64525cab80267c5\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Mar 26 11:42:54 2019 -0700\n\n    Refactor n-way merge\n\ncommit 8a6bb1127c1814470424da2e9d6bfdd55e726199\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Mar 25 17:17:41 2019 -0700\n\n    Fix docs and flipped boolean in ScanQueryLimitRowIterator\n\ncommit 35692680fc7aba21c498a92307ef082a581cb23a\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Mar 25 16:15:49 2019 -0700\n\n    Fix bug messing up count of rows\n\ncommit 219af478c8ec243700973e616c5be556a83422e2\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Mar 25 15:57:55 2019 -0700\n\n    Fix bug in numRowsScanned\n\ncommit da4fc664031debae1dc3b4a0190125e979564aac\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Mar 25 15:19:45 2019 -0700\n\n    Check type of segment spec before using for time ordering\n\ncommit b822fc73dfba7f69c7e960bb95b31cab8d27ef25\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Mar 25 13:19:02 2019 -0700\n\n    Revert \"Merge branch '6088-Time-Ordering-On-Scans-N-Way-Merge' of github.com:justinborromeo/incubator-druid into 6088-Time-Ordering-On-Scans-N-Way-Merge\"\n\n    This reverts commit 57033f36df6e3ef887e5f0399ad74bb091306de8.  reversing\n    changes made to 8f01d8dd16f40d10c60519ca0ec0d2e6b2dde941.\n\ncommit 57033f36df6e3ef887e5f0399ad74bb091306de8\nMerge: 8f01d8dd1 86d9730fc\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Mar 25 13:13:52 2019 -0700\n\n    Merge branch '6088-Time-Ordering-On-Scans-N-Way-Merge' of github.com:justinborromeo/incubator-druid into 6088-Time-Ordering-On-Scans-N-Way-Merge\n\ncommit 8f01d8dd16f40d10c60519ca0ec0d2e6b2dde941\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Mar 25 13:13:32 2019 -0700\n\n    Revert \"Fixed failing tests -> allow usage of all types of segment spec\"\n\n    This reverts commit ec470288c7b725f5310bcf69d1db9f85ff509c8d.\n\ncommit ec470288c7b725f5310bcf69d1db9f85ff509c8d\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Mar 25 11:01:35 2019 -0700\n\n    Fixed failing tests -> allow usage of all types of segment spec\n\ncommit 86d9730fc9f241b3010b123a45b1fc38a206a9af\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Mar 25 11:01:35 2019 -0700\n\n    Fixed failing tests -> allow usage of all types of segment spec\n\ncommit 8b3b6b51ed0d3bc3c937620d5b92096998e32080\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Mar 22 16:01:56 2019 -0700\n\n    Nit comment\n\ncommit a87d02127c72aa5e307af94b12b6be25150349be\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Mar 22 15:54:42 2019 -0700\n\n    Fix checkstyle and test\n\ncommit 62dcedacdeeed570134e8b5185633b207e91a547\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Mar 22 15:30:41 2019 -0700\n\n    More comments\n\ncommit 1b46b58aeccf13adc516a1d94054a98efc32184c\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Mar 22 15:19:52 2019 -0700\n\n    Added a bit of docs\n\ncommit 49472162b7fc0879159866c3736e192fc88837a4\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Mar 22 10:27:41 2019 -0700\n\n    Rename segment limit -> segment partitions limit\n\ncommit 43d490cc3ae697d0a61159ed6ae06906006cdf31\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Thu Mar 21 13:16:58 2019 -0700\n\n    Optimized n-way merge strategy\n\ncommit 42f5246b8d0c1879c2dc45334966bf52f543ea74\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Mar 20 17:40:19 2019 -0700\n\n    Smarter limiting for pQueue method\n\ncommit 4823dab895770a87356fe2ae4e9858bb4ba03fc3\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Mar 20 16:05:53 2019 -0700\n\n    Finish rename\n\ncommit 2528a5614267c48714abdb30fd7a2ccdb61b802d\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Mar 18 14:00:50 2019 -0700\n\n    Renaming\n\ncommit 7bfa77d3c177be42d0db0b0bc3c19f9ef536ffeb\nMerge: a032c46ee 7e49d4739\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Mar 12 16:57:45 2019 -0700\n\n    Merge branch 'Update-Query-Interrupted-Exception' into 6088-Time-Ordering-On-Scans-N-Way-Merge\n\ncommit 7e49d47391d17b411b0620794e503592d8f37481\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Mar 12 16:51:25 2019 -0700\n\n    Added error message for UOE\n\ncommit a032c46ee09cd80b78f25d0da51f5179774aa75f\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Mar 12 16:47:17 2019 -0700\n\n    Updated error message\n\ncommit 57b568265488066c046f225c1982dba85e8a64ba\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Mar 12 12:44:02 2019 -0700\n\n    Fixed tests\n\ncommit 45e95bb1f40d50ab3a0a745d2b5fca34c3f53a82\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Mar 12 11:09:08 2019 -0700\n\n    Optimization\n\ncommit cce917ab846198706ec8177a91869f9aa43e0525\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Mar 8 14:11:07 2019 -0800\n\n    Checkstyle fix\n\ncommit 73f4038068f2e30cb3487cc175730f3b97c5c8d2\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Thu Mar 7 18:40:00 2019 -0800\n\n    Applied Jon's recommended changes\n\ncommit fb966def8335e6808f0fe5d2d6a122dcd28f2355\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Thu Mar 7 11:03:01 2019 -0800\n\n    Sorry.  checkstyle\n\ncommit 6dc53b311c568e29a6937fdd5f17a5623d14533f\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Mar 6 10:34:13 2019 -0800\n\n    Improved test and appeased TeamCity\n\ncommit 35c96d355726cf5d238435655fecbfe19ea8ddb6\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Mar 4 16:00:44 2019 -0800\n\n    Checkstyle fix\n\ncommit 2d1978d5713187561a534c08eba51e383df66ce7\nMerge: 83ec3fe1f 3398d3982\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Mar 4 15:24:49 2019 -0800\n\n    Merge branch 'master' into 6088-Time-Ordering-On-Scans-N-Way-Merge\n\ncommit 83ec3fe1f13c384aca52ceef0ba03b300b03d8d9\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Mar 1 13:40:22 2019 -0800\n\n    Nit-change on javadoc\n\ncommit 47c970b5f476e5bfe5e03aa798f314f59aeb67db\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Mar 1 13:38:29 2019 -0800\n\n    Wrote tests and added Javadoc\n\ncommit 5ff59f5ca6c8058c04e500662b3691a4910aa842\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Thu Feb 28 15:58:20 2019 -0800\n\n    Reset config\n\ncommit 806166f9777cccae5e10eabbb256c5e33b0e13f7\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Thu Feb 28 15:49:07 2019 -0800\n\n    Fixed failing tests\n\ncommit de83b11a1bb24a0ae964240d9cb1ed17ea4a6c26\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Feb 26 16:40:48 2019 -0800\n\n    Fixed mistakes in merge\n\ncommit 5bd0e1a32cec1a0e4dadd74dd530d13341ab7349\nMerge: 18cce9a64 9fa649b3b\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Feb 26 16:39:16 2019 -0800\n\n    Merge branch 'master' into 6088-Time-Ordering-On-Scans-N-Way-Merge\n\ncommit 18cce9a646139a57004ef4eccef8077c9775e992\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Feb 26 13:16:44 2019 -0800\n\n    Change so batching only occurs on broker for time-ordered scans\n\n    Restricted batching to broker for time-ordered queries and adjusted\n    tests\n\n    Formatting\n\n    Cleanup\n\ncommit 451e2b43652020d6acb8b8db113fb34db0f50517\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Feb 26 11:14:27 2019 -0800\n\n    WIP\n\ncommit 69b24bd851d721592324bcbeec1c4229ad9ff462\nMerge: 763c43df7 417b9f2fe\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Feb 22 18:13:26 2019 -0800\n\n    Merge branch 'master' into 6088-Time-Ordering-On-Scans-N-Way-Merge\n\ncommit 763c43df7e99d4ab000f038a7c1b9ef98b479138\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Feb 22 18:07:06 2019 -0800\n\n    Multi-historical setup works\n\ncommit 06a5218917bca0716b98c32c07415a7271711431\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Feb 22 16:59:57 2019 -0800\n\n    Wrote docs\n\ncommit 3b923dac9cc82475795ee2f7691e6f96249560aa\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Feb 22 14:03:22 2019 -0800\n\n    Fixed bug introduced by replacing deque with list\n\ncommit 023538d83117086647c69d5030f2e8cb3e039558\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Feb 22 13:30:08 2019 -0800\n\n    Sequence stuff is so dirty :(\n\ncommit e1fc2955d361676eb6721ad31defd96d47fab999\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Feb 22 10:39:59 2019 -0800\n\n    WIP\n\ncommit f57ff253fa659cbb5aa09b7c9bf03d8e7670b865\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Thu Feb 21 18:22:06 2019 -0800\n\n    Ordering is correct on n-way merge -> still need to batch events into\n    ScanResultValues\n\ncommit 1813a5472c791509ba903f734b40b6102079876a\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Thu Feb 21 17:06:18 2019 -0800\n\n    Cleanup\n\ncommit f83e99655d11247f44018e0e5d36bd6eac1fb2a6\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Thu Feb 21 16:56:36 2019 -0800\n\n    Refactor and pQueue works\n\ncommit b13ff624a92a7e740eb1f74aa40c7a72165b9708\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Thu Feb 21 15:13:33 2019 -0800\n\n    Set up time ordering strategy decision tree\n\ncommit fba6b022f0395cc297e3b3726f817c986f97010b\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Thu Feb 21 15:08:27 2019 -0800\n\n    Added config and get # of segments\n\ncommit c9142e721c7ed824a54de7a160230cd959bb906d\nMerge: cd489a020 554b0142c\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 20 10:12:50 2019 -0800\n\n    Merge branch 'master' into 6088-Time-Ordering-On-Scans-V2\n\ncommit cd489a0208b0cfc475a34440caa1c1e99d22a281\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 20 00:16:48 2019 -0800\n\n    Fixed failing test due to null resultFormat\n\ncommit 7baeade8328776244e72a3cb5f2efb59111cf58b\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Feb 19 17:52:06 2019 -0800\n\n    Changes based on Gian's comments\n\ncommit 35150fe1a63c5143f564c4435461929e619a0de2\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Feb 15 15:57:53 2019 -0800\n\n    Small changes\n\ncommit 4e69276d57de4a9042b927efa5a864411aedacb4\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Feb 11 12:09:54 2019 -0800\n\n    Removed unused import to satisfy PMD check\n\ncommit ecb0f483a9525ffc2844cb01a0daafe6bc4d2161\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Feb 11 10:37:11 2019 -0800\n\n    improved doc\n\ncommit f0eddee66598095a767a1570516c5af59e58e2f6\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Feb 11 10:18:45 2019 -0800\n\n    Added more javadoc\n\ncommit 5f92dd7325aeff0b2e3f87003263e083ba2b427d\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Feb 11 10:05:58 2019 -0800\n\n    Unused import\n\ncommit 93e1636287f45d38c80f275e4644c0b3222c65e7\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Feb 11 10:03:14 2019 -0800\n\n    Added javadoc on ScanResultValueTimestampComparator\n\ncommit 134041c47965a8a199862ca33ef2119e29f67287\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Feb 8 13:13:54 2019 -0800\n\n    Renamed sort function\n\ncommit 2e3577cd3d7b43e140d36aad944536f49287fbfa\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Thu Feb 7 13:01:25 2019 -0800\n\n    Fixed benchmark queries\n\ncommit d3b335af42602a771063bd8a63c89acf5c715938\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Thu Feb 7 11:08:07 2019 -0800\n\n    added all query types to scan benchmark\n\ncommit ab00eade9f0b8e8642da40905214653c04cba4d4\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Thu Feb 7 09:42:48 2019 -0800\n\n    Kicking travis with change to benchmark param\n\ncommit b432beaf84de5b363454fd8058ff653a097c713d\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 6 17:45:59 2019 -0800\n\n    Fixed failing calcite tests\n\ncommit b2c8c77ad4ee5a9a273ee7a7870fb2d9b0ec9dd4\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 6 17:39:48 2019 -0800\n\n    Fixing tests WIP\n\ncommit 85e72a614ef49736d1142ce82d26b533b609c911\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 6 15:42:02 2019 -0800\n\n    Set to spaces over tabs\n\ncommit 7e872a8ebcea0d3a141addd122dd9f8b6629ead6\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 6 15:36:24 2019 -0800\n\n    Created an error message for when someone tries to time order a result\n    set > threshold limit\n\ncommit e8a4b490443b1efe6c70f964b1757bf17a64e9f6\nMerge: 305876a43 8e3a58f72\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 6 15:05:11 2019 -0800\n\n    Merge branch 'master' into 6088-Time-Ordering-On-Scans-V2\n\ncommit 305876a4346c292296db623c1fcea688a29c0bb8\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 6 15:02:02 2019 -0800\n\n    nit\n\ncommit 8212a21cafc2ed4002607362f0661f4b5f6bef9d\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 6 14:40:35 2019 -0800\n\n    Improved conciseness\n\ncommit 10b5e0ca93a529d1b0e018c11fafc9c63071b8cd\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 6 13:42:12 2019 -0800\n\n    .\n\ncommit dfe4aa9681d04b8a31dcc1486e0447f29f6eb7bd\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 6 13:41:18 2019 -0800\n\n    Fixed codestyle and forbidden API errors\n\ncommit 148939e88bfff021356bb532e4246e4c8e8ac333\nMerge: 4f51024b3 5edbe2ae1\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 6 13:26:17 2019 -0800\n\n    Merge branch '6088-Create-Scan-Benchmark' into 6088-Time-Ordering-On-Scans-V2\n\ncommit 5edbe2ae12648b527e3e97b516127bf4b65196a3\nMerge: 60b7684db 315ccb76b\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 6 13:18:55 2019 -0800\n\n    Merge github.com:apache/incubator-druid into 6088-Create-Scan-Benchmark\n\ncommit 60b7684db725387b4d843385d9c61d50f2ed6744\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 6 13:02:13 2019 -0800\n\n    Committing a param change to kick teamcity\n\ncommit 4f51024b318bf744eddb9d2f9638f7590872cf14\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 6 12:08:12 2019 -0800\n\n    Wrote more tests for scan result value sort\n\ncommit 8b7d5f50818b00730965a55b1bf8ed27860bd6a4\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Wed Feb 6 11:55:09 2019 -0800\n\n    Wrote tests for heapsort scan result values and fixed bug where iterator\n    wasn't returning elements in correct order\n\ncommit b6d4df3864e3910fa406dcc83f6644f45f496c5f\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Feb 5 16:45:20 2019 -0800\n\n    Decrease segment size for less memory usage\n\ncommit d1a1793f36d4c9c910f84318f2bbbd355533c977\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Feb 5 12:40:26 2019 -0800\n\n    nit\n\ncommit 7deb06f6df47c55469a77a92622509ce88150ad5\nMerge: b7d3a4900 86c5eee13\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Feb 5 10:53:38 2019 -0800\n\n    Merge branch '6088-Create-Scan-Benchmark' into 6088-Time-Ordering-On-Scans-V2\n\ncommit 86c5eee13b6ce18b33c723cd0c4e464eaf41f010\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Feb 5 10:31:27 2019 -0800\n\n    Broke some long lines into two lines\n\ncommit b7d3a4900afb2b56b5e2667c2d37fa4872c67219\nMerge: 796083f2b 8bc5eaa90\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Feb 5 10:23:32 2019 -0800\n\n    Merge branch 'master' into 6088-Time-Ordering-On-Scans-V2\n\ncommit 737a83321d74cd0b1f7b4ca800509c36056d08ff\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Tue Feb 5 10:15:32 2019 -0800\n\n    Made Jon's changes and removed TODOs\n\ncommit 796083f2bb188421f68858111bb39c988cb2f71c\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Feb 4 15:37:42 2019 -0800\n\n    Benchmark param change\n\ncommit 20c36644dbbf46df1a9209a635e661c01aeec627\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Feb 4 15:36:35 2019 -0800\n\n    More param changes\n\ncommit 9e6e71616bdcd9a7eea56e4bc1ef869c08bcf83c\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Feb 4 15:31:21 2019 -0800\n\n    Changed benchmark params\n\ncommit 01b25ed11293f472dac78d4f793f2941c3b22a18\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Feb 4 14:36:18 2019 -0800\n\n    Added time ordering to the scan benchmark\n\ncommit 432acaf08575c451ea02e8ec8d6318678dcf20cb\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Feb 4 12:03:14 2019 -0800\n\n    Change number of benchmark iterations\n\ncommit 12e51a272124c7a75628fe5b2f65ddc00e34ba27\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Feb 4 12:02:13 2019 -0800\n\n    Added TimestampComparator tests\n\ncommit e66339cd76cdb7f08a291e8488e3415518f3df63\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Feb 4 10:56:41 2019 -0800\n\n    Remove todos\n\ncommit ad731a362b465e9b4ca0c9ad7050fc6555606d52\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Feb 4 10:55:56 2019 -0800\n\n    Change benchmark\n\ncommit 989bd2d50e2419a715426b8fe903398d20429ff5\nMerge: 7b5847139 26930f8d2\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Mon Feb 4 10:46:38 2019 -0800\n\n    Merge branch '6088-Create-Scan-Benchmark' into 6088-Time-Ordering-On-Scans-V2\n\ncommit 7b584713946b538d15da591e306ca4c0a7a378e3\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Sat Feb 2 03:48:18 2019 -0800\n\n    Licensing stuff\n\ncommit 79e8319383eddbb49ecb4c1785dcd3eed14a0634\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Feb 1 18:22:58 2019 -0800\n\n    Move ScanResultValue timestamp comparator to a separate class for testing\n\ncommit 7a6080f636ab2ead5ff85a29ea6b9cc04d93b353\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Feb 1 18:00:58 2019 -0800\n\n    Stuff for time-ordered scan query\n\ncommit 26930f8d2021d1d62322c54e0ec35e260137ab1d\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Feb 1 16:38:49 2019 -0800\n\n    It runs.\n\ncommit dd4ec1ac9c1194144e3ec98b811adc59598c8d8c\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Feb 1 15:12:17 2019 -0800\n\n    Need to form queries\n\ncommit dba6e492a067b9bb4f77f3db4b19c340f85ef54f\nMerge: 10e57d5f9 7d4cc2873\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Feb 1 14:13:39 2019 -0800\n\n    Merge branch 'master' into 6088-Create-Scan-Benchmark\n\ncommit 10e57d5f9ed003e032c82240045125002903a5bb\nAuthor: Justin Borromeo <jborrome@edu.uwaterloo.ca>\nDate:   Fri Feb 1 14:04:13 2019 -0800\n\n    Moved Scan Builder to Druids class and started on Scan Benchmark setup\n\n* Changed SQL planning to use scan over select\n\n* Fixed some bugs\n\n* Removed unused imports\n\n* Updated calcite query test and test segment walker\n\n* Fixed formatting recommendations\n","date":"2019-04-03 06:46:01","modifiedFileCount":"3","status":"M","submitter":"Justin Borromeo"},{"authorTime":"2020-02-01 15:51:16","codes":[{"authorDate":"2020-02-01 15:51:16","commitOrder":9,"curCode":"  public void testSelectStar() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-02\"), 1L, \"10.1\", NULL_STRING, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_STRING, 5f, 5.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-03\"), 1L, \"abc\", NULL_STRING, NULL_STRING, 6f, 6.0, HLLC_STRING}\n        )\n    );\n  }\n","date":"2020-02-01 15:51:16","endLine":520,"groupId":"101576","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectStar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/33/01b87f076650932db93ab0d17d4c328cc75ab1.src","preCode":"  public void testSelectStar() throws Exception\n  {\n    String hyperLogLogCollectorClassName = HLLC_STRING;\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\")\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, hyperLogLogCollectorClassName},\n            new Object[]{\n                timestamp(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, hyperLogLogCollectorClassName\n            },\n            new Object[]{timestamp(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, hyperLogLogCollectorClassName},\n            new Object[]{timestamp(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, hyperLogLogCollectorClassName},\n            new Object[]{\n                timestamp(\"2001-01-03\"),\n                1L,\n                \"abc\",\n                NULL_VALUE,\n                NULL_VALUE,\n                6f,\n                6.0,\n                hyperLogLogCollectorClassName\n            }\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":495,"status":"M"},{"authorDate":"2020-02-01 15:51:16","commitOrder":9,"curCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                .limit(Long.MAX_VALUE)\n                .order(ScanQuery.Order.ASCENDING)\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-02\"), 1L, \"10.1\", NULL_STRING, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_STRING, 5f, 5.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-03\"), 1L, \"abc\", NULL_STRING, NULL_STRING, 6f, 6.0, HLLC_STRING}\n        )\n    );\n  }\n","date":"2020-02-01 15:51:16","endLine":722,"groupId":"101576","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectStarWithoutLimitTimeAscending","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/33/01b87f076650932db93ab0d17d4c328cc75ab1.src","preCode":"  public void testSelectStarWithoutLimitTimeAscending() throws Exception\n  {\n    testQuery(\n        PLANNER_CONFIG_DEFAULT_NO_COMPLEX_SERDE,\n        QUERY_CONTEXT_DEFAULT,\n        \"SELECT * FROM druid.foo ORDER BY __time\",\n        CalciteTests.REGULAR_USER_AUTH_RESULT,\n        ImmutableList.of(\n            newScanQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE1)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .columns(ImmutableList.of(\"__time\", \"cnt\", \"dim1\", \"dim2\", \"dim3\", \"m1\", \"m2\", \"unique_dim1\"))\n                .limit(Long.MAX_VALUE)\n                .order(ScanQuery.Order.ASCENDING)\n                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{timestamp(\"2000-01-01\"), 1L, \"\", \"a\", \"[\\\"a\\\",\\\"b\\\"]\", 1f, 1.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-02\"), 1L, \"10.1\", NULL_VALUE, \"[\\\"b\\\",\\\"c\\\"]\", 2f, 2.0, HLLC_STRING},\n            new Object[]{timestamp(\"2000-01-03\"), 1L, \"2\", \"\", \"d\", 3f, 3.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-01\"), 1L, \"1\", \"a\", \"\", 4f, 4.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-02\"), 1L, \"def\", \"abc\", NULL_VALUE, 5f, 5.0, HLLC_STRING},\n            new Object[]{timestamp(\"2001-01-03\"), 1L, \"abc\", NULL_VALUE, NULL_VALUE, 6f, 6.0, HLLC_STRING}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":695,"status":"M"}],"commitId":"b411443d228c14de746311e09db28b437c2746a5","commitMessage":"@@@SQL join support for lookups. (#9294)\n\n* SQL join support for lookups.\n\n1) Add LookupSchema to SQL.  so lookups show up in the catalog.\n2) Add join-related rels and rules to SQL.  allowing joins to be planned into\n   native Druid queries.\n\n* Add two missing LookupSchema calls in tests.\n\n* Fix tests.\n\n* Fix typo.\n","date":"2020-02-01 15:51:16","modifiedFileCount":"30","status":"M","submitter":"Gian Merlino"}]
