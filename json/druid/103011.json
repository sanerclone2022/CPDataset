[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testCreateDeleteUser()\n  {\n    Response response = resource.createUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n    BasicAuthenticatorUser expectedUser = new BasicAuthenticatorUser(\"druid\", null);\n    Assert.assertEquals(expectedUser, response.getEntity());\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","date":"2018-08-31 00:56:26","endLine":229,"groupId":"19902","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateDeleteUser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/72/f1c2fba3d375f4859b87ead491caaa898ddc21.src","preCode":"  public void testCreateDeleteUser()\n  {\n    Response response = resource.createUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n    BasicAuthenticatorUser expectedUser = new BasicAuthenticatorUser(\"druid\", null);\n    Assert.assertEquals(expectedUser, response.getEntity());\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authentication/CoordinatorBasicAuthenticatorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testCreateDeleteUser()\n  {\n    Response response = resource.createUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHORIZER_NAME, \"druid\", null);\n    Assert.assertEquals(200, response.getStatus());\n\n    BasicAuthorizerUser expectedUser = new BasicAuthorizerUser(\n        \"druid\",\n        ImmutableSet.of()\n    );\n    Assert.assertEquals(expectedUser, response.getEntity());\n\n    response = resource.deleteUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.deleteUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.getUser(req, AUTHORIZER_NAME, \"druid\", null);\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","date":"2018-08-31 00:56:26","endLine":265,"groupId":"19902","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateDeleteUser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ef/10dcc30deeb27a9629568861cc08914e898b5e.src","preCode":"  public void testCreateDeleteUser()\n  {\n    Response response = resource.createUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHORIZER_NAME, \"druid\", null);\n    Assert.assertEquals(200, response.getStatus());\n\n    BasicAuthorizerUser expectedUser = new BasicAuthorizerUser(\n        \"druid\",\n        ImmutableSet.of()\n    );\n    Assert.assertEquals(expectedUser, response.getEntity());\n\n    response = resource.deleteUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.deleteUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.getUser(req, AUTHORIZER_NAME, \"druid\", null);\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-05-16 03:59:32","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testCreateDeleteUser()\n  {\n    Response response = resource.createUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n    BasicAuthenticatorUser expectedUser = new BasicAuthenticatorUser(\"druid\", null);\n    Assert.assertEquals(expectedUser, response.getEntity());\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","date":"2018-08-31 00:56:26","endLine":229,"groupId":"19902","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateDeleteUser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/72/f1c2fba3d375f4859b87ead491caaa898ddc21.src","preCode":"  public void testCreateDeleteUser()\n  {\n    Response response = resource.createUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n    BasicAuthenticatorUser expectedUser = new BasicAuthenticatorUser(\"druid\", null);\n    Assert.assertEquals(expectedUser, response.getEntity());\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authentication/CoordinatorBasicAuthenticatorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"N"},{"authorDate":"2019-05-16 03:59:32","commitOrder":2,"curCode":"  public void testCreateDeleteUser()\n  {\n    Response response = resource.createUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHORIZER_NAME, \"druid\", null, null);\n    Assert.assertEquals(200, response.getStatus());\n\n    BasicAuthorizerUser expectedUser = new BasicAuthorizerUser(\n        \"druid\",\n        ImmutableSet.of()\n    );\n    Assert.assertEquals(expectedUser, response.getEntity());\n\n    response = resource.deleteUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.deleteUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.getUser(req, AUTHORIZER_NAME, \"druid\", null, null);\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","date":"2019-05-16 03:59:32","endLine":267,"groupId":"19902","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateDeleteUser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/15/6273c531621f0a8fc2e7afc48512a9e8707756.src","preCode":"  public void testCreateDeleteUser()\n  {\n    Response response = resource.createUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHORIZER_NAME, \"druid\", null);\n    Assert.assertEquals(200, response.getStatus());\n\n    BasicAuthorizerUser expectedUser = new BasicAuthorizerUser(\n        \"druid\",\n        ImmutableSet.of()\n    );\n    Assert.assertEquals(expectedUser, response.getEntity());\n\n    response = resource.deleteUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.deleteUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.getUser(req, AUTHORIZER_NAME, \"druid\", null);\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"}],"commitId":"e874da7cea6db590e88ff847b47dfc2ad878baad","commitMessage":"@@@Add simpler permissions option to BasicAuthorizer GET APIs (#7635)\n\n* Add simpler permissions option to BasicAuthorizer GET APIs\n\n* Adjust log message\n\nCo-Authored-By: Himanshu <g.himanshu@gmail.com>\n\n* Adjust log message\n\nCo-Authored-By: Himanshu <g.himanshu@gmail.com>\n","date":"2019-05-16 03:59:32","modifiedFileCount":"7","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2019-05-16 03:59:32","codes":[{"authorDate":"2019-10-09 08:08:27","commitOrder":3,"curCode":"  public void testCreateDeleteUser()\n  {\n    Response response = resource.createUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n    BasicAuthenticatorUser expectedUser = new BasicAuthenticatorUser(\"druid\", null);\n    Assert.assertEquals(expectedUser, response.getEntity());\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getCachedSerializedUserMap(req, AUTHENTICATOR_NAME);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertTrue(response.getEntity() instanceof byte[]);\n    Map<String, BasicAuthenticatorUser> cachedUserMap = BasicAuthUtils.deserializeAuthenticatorUserMap(objectMapper, (byte[]) response.getEntity());\n    Assert.assertNotNull(cachedUserMap);\n    Assert.assertNull(cachedUserMap.get(\"druid\"));\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","date":"2019-10-09 08:08:27","endLine":305,"groupId":"103011","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateDeleteUser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cc/e1b2402c7a62af49d416098533744a8eb0ad32.src","preCode":"  public void testCreateDeleteUser()\n  {\n    Response response = resource.createUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n    BasicAuthenticatorUser expectedUser = new BasicAuthenticatorUser(\"druid\", null);\n    Assert.assertEquals(expectedUser, response.getEntity());\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.deleteUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.getUser(req, AUTHENTICATOR_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authentication/CoordinatorBasicAuthenticatorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"},{"authorDate":"2019-05-16 03:59:32","commitOrder":3,"curCode":"  public void testCreateDeleteUser()\n  {\n    Response response = resource.createUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHORIZER_NAME, \"druid\", null, null);\n    Assert.assertEquals(200, response.getStatus());\n\n    BasicAuthorizerUser expectedUser = new BasicAuthorizerUser(\n        \"druid\",\n        ImmutableSet.of()\n    );\n    Assert.assertEquals(expectedUser, response.getEntity());\n\n    response = resource.deleteUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.deleteUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.getUser(req, AUTHORIZER_NAME, \"druid\", null, null);\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","date":"2019-05-16 03:59:32","endLine":267,"groupId":"103011","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateDeleteUser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/15/6273c531621f0a8fc2e7afc48512a9e8707756.src","preCode":"  public void testCreateDeleteUser()\n  {\n    Response response = resource.createUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.getUser(req, AUTHORIZER_NAME, \"druid\", null, null);\n    Assert.assertEquals(200, response.getStatus());\n\n    BasicAuthorizerUser expectedUser = new BasicAuthorizerUser(\n        \"druid\",\n        ImmutableSet.of()\n    );\n    Assert.assertEquals(expectedUser, response.getEntity());\n\n    response = resource.deleteUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(200, response.getStatus());\n\n    response = resource.deleteUser(req, AUTHORIZER_NAME, \"druid\");\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n\n    response = resource.getUser(req, AUTHORIZER_NAME, \"druid\", null, null);\n    Assert.assertEquals(400, response.getStatus());\n    Assert.assertEquals(errorMapWithMsg(\"User [druid] does not exist.\"), response.getEntity());\n  }\n","realPath":"extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/authorization/CoordinatorBasicAuthorizerResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"N"}],"commitId":"18758f52283696ba12ab0763260909b7ca734f1e","commitMessage":"@@@Support LDAP authentication/authorization (#6972)\n\n* Support LDAP authentication/authorization\n\n* fixed integration-tests\n\n* fixed Travis CI build errors related to druid-security module\n\n* fixed failing test\n\n* fixed failing test header\n\n* added comments.  force build\n\n* fixes for strict compilation spotbugs checks\n\n* removed authenticator rolling credential update feature\n\n* removed escalator rolling credential update feature\n\n* fixed teamcity inspection deprecated API usage error\n\n* fixed checkstyle execution error.  removed unused import\n\n* removed cached config as part of removing authenticator rolling credential update feature\n\n* removed config bundle entity as part of removing authenticator rolling credential update feature\n\n* refactored ldao configuration\n\n* added support for SSLContext configuration and TLSCertificateChecker\n\n* removed check to return authentication failure when user has no group assigned.  will be checked and handled by the authorizer\n\n* Separate out authorizer checks between metadata-backed store user and LDAP user/groups\n\n* refactored BasicSecuritySSLSocketFactory usage to fix strict compilation spotbugs checks\n\n* fixes build issue\n\n* final review comments updates\n\n* final review comments updates\n\n* fixed LGTM and spellcheck alerts\n\n* Fixed Avatica auth failure error message check\n\n* Updated metadata credentials validator exception message string.  replaced DB with metadata store\n","date":"2019-10-09 08:08:27","modifiedFileCount":"44","status":"M","submitter":"Mohammad J. Khan"}]
