[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2019-06-16 08:55:50","commitOrder":2,"curCode":"  public void testSimpleDeleteTier()\n  {\n    final String author = \"some author\";\n    final String comment = \"some comment\";\n    final String ip = \"127.0.0.1\";\n\n    final HttpServletRequest request = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(request.getRemoteAddr()).andReturn(ip).once();\n\n    final Capture<AuditInfo> auditInfoCapture = Capture.newInstance();\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(\n        LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.deleteTier(\n        EasyMock.eq(LOOKUP_TIER),\n        EasyMock.capture(auditInfoCapture)\n    )).andReturn(true).once();\n\n    EasyMock.replay(lookupCoordinatorManager, request);\n\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.deleteTier(\n        LOOKUP_TIER,\n        author,\n        comment,\n        request\n    );\n\n    Assert.assertEquals(202, response.getStatus());\n    Assert.assertTrue(auditInfoCapture.hasCaptured());\n    final AuditInfo auditInfo = auditInfoCapture.getValue();\n    Assert.assertEquals(author, auditInfo.getAuthor());\n    Assert.assertEquals(comment, auditInfo.getComment());\n    Assert.assertEquals(ip, auditInfo.getIp());\n\n    EasyMock.verify(lookupCoordinatorManager, request);\n  }\n","date":"2019-06-16 08:55:50","endLine":329,"groupId":"10469","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleDeleteTier","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d1/e673d650202653092c8d9c70be1fc51dbf7cb2.src","preCode":"  public void testSimpleDeleteTier()\n  {\n    final String author = \"some author\";\n    final String comment = \"some comment\";\n    final String ip = \"127.0.0.1\";\n\n    final HttpServletRequest request = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(request.getRemoteAddr()).andReturn(ip).once();\n\n    final Capture<AuditInfo> auditInfoCapture = Capture.newInstance();\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(\n        LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.deleteTier(\n        EasyMock.eq(LOOKUP_TIER),\n        EasyMock.capture(auditInfoCapture)\n    )).andReturn(true).once();\n\n    EasyMock.replay(lookupCoordinatorManager, request);\n\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.deleteTier(\n        LOOKUP_TIER,\n        author,\n        comment,\n        request\n    );\n\n    Assert.assertEquals(202, response.getStatus());\n    Assert.assertTrue(auditInfoCapture.hasCaptured());\n    final AuditInfo auditInfo = auditInfoCapture.getValue();\n    Assert.assertEquals(author, auditInfo.getAuthor());\n    Assert.assertEquals(comment, auditInfo.getComment());\n    Assert.assertEquals(ip, auditInfo.getIp());\n\n    EasyMock.verify(lookupCoordinatorManager, request);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/LookupCoordinatorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testSimpleDelete()\n  {\n    final String author = \"some author\";\n    final String comment = \"some comment\";\n    final String ip = \"127.0.0.1\";\n\n    final HttpServletRequest request = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(request.getRemoteAddr()).andReturn(ip).once();\n\n    final Capture<AuditInfo> auditInfoCapture = Capture.newInstance();\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(\n        LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.deleteLookup(\n        EasyMock.eq(LOOKUP_TIER),\n        EasyMock.eq(LOOKUP_NAME),\n        EasyMock.capture(auditInfoCapture)\n    )).andReturn(true).once();\n\n    EasyMock.replay(lookupCoordinatorManager, request);\n\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.deleteLookup(\n        LOOKUP_TIER,\n        LOOKUP_NAME,\n        author,\n        comment,\n        request\n    );\n\n    Assert.assertEquals(202, response.getStatus());\n    Assert.assertTrue(auditInfoCapture.hasCaptured());\n    final AuditInfo auditInfo = auditInfoCapture.getValue();\n    Assert.assertEquals(author, auditInfo.getAuthor());\n    Assert.assertEquals(comment, auditInfo.getComment());\n    Assert.assertEquals(ip, auditInfo.getIp());\n\n    EasyMock.verify(lookupCoordinatorManager, request);\n  }\n","date":"2018-08-31 00:56:26","endLine":329,"groupId":"5577","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2e/0819c048046e34c2442951d1b3bcc3f2a387fa.src","preCode":"  public void testSimpleDelete()\n  {\n    final String author = \"some author\";\n    final String comment = \"some comment\";\n    final String ip = \"127.0.0.1\";\n\n    final HttpServletRequest request = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(request.getRemoteAddr()).andReturn(ip).once();\n\n    final Capture<AuditInfo> auditInfoCapture = Capture.newInstance();\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(\n        LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.deleteLookup(\n        EasyMock.eq(LOOKUP_TIER),\n        EasyMock.eq(LOOKUP_NAME),\n        EasyMock.capture(auditInfoCapture)\n    )).andReturn(true).once();\n\n    EasyMock.replay(lookupCoordinatorManager, request);\n\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.deleteLookup(\n        LOOKUP_TIER,\n        LOOKUP_NAME,\n        author,\n        comment,\n        request\n    );\n\n    Assert.assertEquals(202, response.getStatus());\n    Assert.assertTrue(auditInfoCapture.hasCaptured());\n    final AuditInfo auditInfo = auditInfoCapture.getValue();\n    Assert.assertEquals(author, auditInfo.getAuthor());\n    Assert.assertEquals(comment, auditInfo.getComment());\n    Assert.assertEquals(ip, auditInfo.getIp());\n\n    EasyMock.verify(lookupCoordinatorManager, request);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/LookupCoordinatorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"NB"}],"commitId":"b3328b2785884a4677338d97a116ef1fdb54459f","commitMessage":"@@@endpoint to delete lookup tier and remove tier on last lookup deletion (#7852)\n\n","date":"2019-06-16 08:55:50","modifiedFileCount":"4","status":"M","submitter":"Himanshu"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testSimpleDeleteTier()\n  {\n    final String author = \"some author\";\n    final String comment = \"some comment\";\n    final String ip = \"127.0.0.1\";\n\n    final HttpServletRequest request = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(request.getRemoteAddr()).andReturn(ip).once();\n\n    final Capture<AuditInfo> auditInfoCapture = Capture.newInstance();\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(\n        LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.deleteTier(\n        EasyMock.eq(LOOKUP_TIER),\n        EasyMock.capture(auditInfoCapture)\n    )).andReturn(true).once();\n\n    EasyMock.replay(lookupCoordinatorManager, request);\n\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        MAPPER,\n        MAPPER\n    );\n    final Response response = lookupCoordinatorResource.deleteTier(\n        LOOKUP_TIER,\n        author,\n        comment,\n        request\n    );\n\n    Assert.assertEquals(202, response.getStatus());\n    Assert.assertTrue(auditInfoCapture.hasCaptured());\n    final AuditInfo auditInfo = auditInfoCapture.getValue();\n    Assert.assertEquals(author, auditInfo.getAuthor());\n    Assert.assertEquals(comment, auditInfo.getComment());\n    Assert.assertEquals(ip, auditInfo.getIp());\n\n    EasyMock.verify(lookupCoordinatorManager, request);\n  }\n","date":"2019-08-23 18:13:54","endLine":329,"groupId":"10597","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleDeleteTier","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8c/5a7b91c9130f8afbe71a71bb6ce52983a3cdd6.src","preCode":"  public void testSimpleDeleteTier()\n  {\n    final String author = \"some author\";\n    final String comment = \"some comment\";\n    final String ip = \"127.0.0.1\";\n\n    final HttpServletRequest request = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(request.getRemoteAddr()).andReturn(ip).once();\n\n    final Capture<AuditInfo> auditInfoCapture = Capture.newInstance();\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(\n        LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.deleteTier(\n        EasyMock.eq(LOOKUP_TIER),\n        EasyMock.capture(auditInfoCapture)\n    )).andReturn(true).once();\n\n    EasyMock.replay(lookupCoordinatorManager, request);\n\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.deleteTier(\n        LOOKUP_TIER,\n        author,\n        comment,\n        request\n    );\n\n    Assert.assertEquals(202, response.getStatus());\n    Assert.assertTrue(auditInfoCapture.hasCaptured());\n    final AuditInfo auditInfo = auditInfoCapture.getValue();\n    Assert.assertEquals(author, auditInfo.getAuthor());\n    Assert.assertEquals(comment, auditInfo.getComment());\n    Assert.assertEquals(ip, auditInfo.getIp());\n\n    EasyMock.verify(lookupCoordinatorManager, request);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/LookupCoordinatorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testSimpleDelete()\n  {\n    final String author = \"some author\";\n    final String comment = \"some comment\";\n    final String ip = \"127.0.0.1\";\n\n    final HttpServletRequest request = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(request.getRemoteAddr()).andReturn(ip).once();\n\n    final Capture<AuditInfo> auditInfoCapture = Capture.newInstance();\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(\n        LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.deleteLookup(\n        EasyMock.eq(LOOKUP_TIER),\n        EasyMock.eq(LOOKUP_NAME),\n        EasyMock.capture(auditInfoCapture)\n    )).andReturn(true).once();\n\n    EasyMock.replay(lookupCoordinatorManager, request);\n\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        MAPPER,\n        MAPPER\n    );\n    final Response response = lookupCoordinatorResource.deleteLookup(\n        LOOKUP_TIER,\n        LOOKUP_NAME,\n        author,\n        comment,\n        request\n    );\n\n    Assert.assertEquals(202, response.getStatus());\n    Assert.assertTrue(auditInfoCapture.hasCaptured());\n    final AuditInfo auditInfo = auditInfoCapture.getValue();\n    Assert.assertEquals(author, auditInfo.getAuthor());\n    Assert.assertEquals(comment, auditInfo.getComment());\n    Assert.assertEquals(ip, auditInfo.getIp());\n\n    EasyMock.verify(lookupCoordinatorManager, request);\n  }\n","date":"2019-08-23 18:13:54","endLine":373,"groupId":"10597","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8c/5a7b91c9130f8afbe71a71bb6ce52983a3cdd6.src","preCode":"  public void testSimpleDelete()\n  {\n    final String author = \"some author\";\n    final String comment = \"some comment\";\n    final String ip = \"127.0.0.1\";\n\n    final HttpServletRequest request = EasyMock.createStrictMock(HttpServletRequest.class);\n    EasyMock.expect(request.getRemoteAddr()).andReturn(ip).once();\n\n    final Capture<AuditInfo> auditInfoCapture = Capture.newInstance();\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(\n        LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.deleteLookup(\n        EasyMock.eq(LOOKUP_TIER),\n        EasyMock.eq(LOOKUP_NAME),\n        EasyMock.capture(auditInfoCapture)\n    )).andReturn(true).once();\n\n    EasyMock.replay(lookupCoordinatorManager, request);\n\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.deleteLookup(\n        LOOKUP_TIER,\n        LOOKUP_NAME,\n        author,\n        comment,\n        request\n    );\n\n    Assert.assertEquals(202, response.getStatus());\n    Assert.assertTrue(auditInfoCapture.hasCaptured());\n    final AuditInfo auditInfo = auditInfoCapture.getValue();\n    Assert.assertEquals(author, auditInfo.getAuthor());\n    Assert.assertEquals(comment, auditInfo.getComment());\n    Assert.assertEquals(ip, auditInfo.getIp());\n\n    EasyMock.verify(lookupCoordinatorManager, request);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/LookupCoordinatorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
