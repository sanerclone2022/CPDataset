[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testBlacklistZKWorkers() throws Exception\n  {\n    Period timeoutPeriod = Period.millis(1000);\n    makeWorker();\n\n    RemoteTaskRunnerConfig rtrConfig = new TestRemoteTaskRunnerConfig(timeoutPeriod);\n    rtrConfig.setMaxPercentageBlacklistWorkers(100);\n\n    makeRemoteTaskRunner(rtrConfig);\n\n    TestRealtimeTask task1 = new TestRealtimeTask(\n        \"realtime1\",\n        new TaskResource(\"realtime1\", 1),\n        \"foo\",\n        TaskStatus.success(\"realtime1\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture1 = remoteTaskRunner.run(task1);\n    Assert.assertTrue(taskAnnounced(task1.getId()));\n    mockWorkerRunningTask(task1);\n    mockWorkerCompleteFailedTask(task1);\n    Assert.assertTrue(taskFuture1.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isFailure());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        1,\n        remoteTaskRunner.findWorkerRunningTask(task1.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    TestRealtimeTask task2 = new TestRealtimeTask(\n        \"realtime2\",\n        new TaskResource(\"realtime2\", 1),\n        \"foo\",\n        TaskStatus.running(\"realtime2\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture2 = remoteTaskRunner.run(task2);\n    Assert.assertTrue(taskAnnounced(task2.getId()));\n    mockWorkerRunningTask(task2);\n    mockWorkerCompleteFailedTask(task2);\n    Assert.assertTrue(taskFuture2.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isFailure());\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        2,\n        remoteTaskRunner.findWorkerRunningTask(task2.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    ((RemoteTaskRunnerTestUtils.TestableRemoteTaskRunner) remoteTaskRunner)\n        .setCurrentTimeMillis(System.currentTimeMillis());\n    remoteTaskRunner.checkBlackListedNodes();\n\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n\n    ((RemoteTaskRunnerTestUtils.TestableRemoteTaskRunner) remoteTaskRunner)\n        .setCurrentTimeMillis(System.currentTimeMillis() + 2 * timeoutPeriod.toStandardDuration().getMillis());\n    remoteTaskRunner.checkBlackListedNodes();\n\n    \r\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        0,\n        remoteTaskRunner.findWorkerRunningTask(task2.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    TestRealtimeTask task3 = new TestRealtimeTask(\n        \"realtime3\",\n        new TaskResource(\"realtime3\", 1),\n        \"foo\",\n        TaskStatus.running(\"realtime3\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture3 = remoteTaskRunner.run(task3);\n    Assert.assertTrue(taskAnnounced(task3.getId()));\n    mockWorkerRunningTask(task3);\n    mockWorkerCompleteSuccessfulTask(task3);\n    Assert.assertTrue(taskFuture3.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isSuccess());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        0,\n        remoteTaskRunner.findWorkerRunningTask(task3.getId()).getContinuouslyFailedTasksCount()\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":764,"groupId":"15508","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlacklistZKWorkers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/92/0d401ee5a40638f258d57962b56fffc87f3f23.src","preCode":"  public void testBlacklistZKWorkers() throws Exception\n  {\n    Period timeoutPeriod = Period.millis(1000);\n    makeWorker();\n\n    RemoteTaskRunnerConfig rtrConfig = new TestRemoteTaskRunnerConfig(timeoutPeriod);\n    rtrConfig.setMaxPercentageBlacklistWorkers(100);\n\n    makeRemoteTaskRunner(rtrConfig);\n\n    TestRealtimeTask task1 = new TestRealtimeTask(\n        \"realtime1\",\n        new TaskResource(\"realtime1\", 1),\n        \"foo\",\n        TaskStatus.success(\"realtime1\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture1 = remoteTaskRunner.run(task1);\n    Assert.assertTrue(taskAnnounced(task1.getId()));\n    mockWorkerRunningTask(task1);\n    mockWorkerCompleteFailedTask(task1);\n    Assert.assertTrue(taskFuture1.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isFailure());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        1,\n        remoteTaskRunner.findWorkerRunningTask(task1.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    TestRealtimeTask task2 = new TestRealtimeTask(\n        \"realtime2\",\n        new TaskResource(\"realtime2\", 1),\n        \"foo\",\n        TaskStatus.running(\"realtime2\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture2 = remoteTaskRunner.run(task2);\n    Assert.assertTrue(taskAnnounced(task2.getId()));\n    mockWorkerRunningTask(task2);\n    mockWorkerCompleteFailedTask(task2);\n    Assert.assertTrue(taskFuture2.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isFailure());\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        2,\n        remoteTaskRunner.findWorkerRunningTask(task2.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    ((RemoteTaskRunnerTestUtils.TestableRemoteTaskRunner) remoteTaskRunner)\n        .setCurrentTimeMillis(System.currentTimeMillis());\n    remoteTaskRunner.checkBlackListedNodes();\n\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n\n    ((RemoteTaskRunnerTestUtils.TestableRemoteTaskRunner) remoteTaskRunner)\n        .setCurrentTimeMillis(System.currentTimeMillis() + 2 * timeoutPeriod.toStandardDuration().getMillis());\n    remoteTaskRunner.checkBlackListedNodes();\n\n    \r\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        0,\n        remoteTaskRunner.findWorkerRunningTask(task2.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    TestRealtimeTask task3 = new TestRealtimeTask(\n        \"realtime3\",\n        new TaskResource(\"realtime3\", 1),\n        \"foo\",\n        TaskStatus.running(\"realtime3\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture3 = remoteTaskRunner.run(task3);\n    Assert.assertTrue(taskAnnounced(task3.getId()));\n    mockWorkerRunningTask(task3);\n    mockWorkerCompleteSuccessfulTask(task3);\n    Assert.assertTrue(taskFuture3.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isSuccess());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        0,\n        remoteTaskRunner.findWorkerRunningTask(task3.getId()).getContinuouslyFailedTasksCount()\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/RemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":684,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSuccessfulTaskOnBlacklistedWorker() throws Exception\n  {\n    Period timeoutPeriod = Period.millis(1000);\n    makeWorker();\n\n    RemoteTaskRunnerConfig rtrConfig = new TestRemoteTaskRunnerConfig(timeoutPeriod);\n    rtrConfig.setMaxPercentageBlacklistWorkers(100);\n\n    makeRemoteTaskRunner(rtrConfig);\n\n    TestRealtimeTask task1 = new TestRealtimeTask(\n        \"realtime1\", new TaskResource(\"realtime1\", 1), \"foo\", TaskStatus.success(\"realtime1\"), jsonMapper\n    );\n    TestRealtimeTask task2 = new TestRealtimeTask(\n        \"realtime2\", new TaskResource(\"realtime2\", 1), \"foo\", TaskStatus.success(\"realtime2\"), jsonMapper\n    );\n    TestRealtimeTask task3 = new TestRealtimeTask(\n        \"realtime3\", new TaskResource(\"realtime3\", 1), \"foo\", TaskStatus.success(\"realtime3\"), jsonMapper\n    );\n\n    Future<TaskStatus> taskFuture1 = remoteTaskRunner.run(task1);\n    Assert.assertTrue(taskAnnounced(task1.getId()));\n    mockWorkerRunningTask(task1);\n    mockWorkerCompleteFailedTask(task1);\n    Assert.assertTrue(taskFuture1.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isFailure());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n\n    Future<TaskStatus> taskFuture2 = remoteTaskRunner.run(task2);\n    Assert.assertTrue(taskAnnounced(task2.getId()));\n    mockWorkerRunningTask(task2);\n\n    Future<TaskStatus> taskFuture3 = remoteTaskRunner.run(task3);\n    Assert.assertTrue(taskAnnounced(task3.getId()));\n    mockWorkerRunningTask(task3);\n    mockWorkerCompleteFailedTask(task3);\n    Assert.assertTrue(taskFuture3.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isFailure());\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n\n    mockWorkerCompleteSuccessfulTask(task2);\n    Assert.assertTrue(taskFuture2.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isSuccess());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n  }\n","date":"2018-08-31 00:56:26","endLine":914,"groupId":"17209","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSuccessfulTaskOnBlacklistedWorker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/92/0d401ee5a40638f258d57962b56fffc87f3f23.src","preCode":"  public void testSuccessfulTaskOnBlacklistedWorker() throws Exception\n  {\n    Period timeoutPeriod = Period.millis(1000);\n    makeWorker();\n\n    RemoteTaskRunnerConfig rtrConfig = new TestRemoteTaskRunnerConfig(timeoutPeriod);\n    rtrConfig.setMaxPercentageBlacklistWorkers(100);\n\n    makeRemoteTaskRunner(rtrConfig);\n\n    TestRealtimeTask task1 = new TestRealtimeTask(\n        \"realtime1\", new TaskResource(\"realtime1\", 1), \"foo\", TaskStatus.success(\"realtime1\"), jsonMapper\n    );\n    TestRealtimeTask task2 = new TestRealtimeTask(\n        \"realtime2\", new TaskResource(\"realtime2\", 1), \"foo\", TaskStatus.success(\"realtime2\"), jsonMapper\n    );\n    TestRealtimeTask task3 = new TestRealtimeTask(\n        \"realtime3\", new TaskResource(\"realtime3\", 1), \"foo\", TaskStatus.success(\"realtime3\"), jsonMapper\n    );\n\n    Future<TaskStatus> taskFuture1 = remoteTaskRunner.run(task1);\n    Assert.assertTrue(taskAnnounced(task1.getId()));\n    mockWorkerRunningTask(task1);\n    mockWorkerCompleteFailedTask(task1);\n    Assert.assertTrue(taskFuture1.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isFailure());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n\n    Future<TaskStatus> taskFuture2 = remoteTaskRunner.run(task2);\n    Assert.assertTrue(taskAnnounced(task2.getId()));\n    mockWorkerRunningTask(task2);\n\n    Future<TaskStatus> taskFuture3 = remoteTaskRunner.run(task3);\n    Assert.assertTrue(taskAnnounced(task3.getId()));\n    mockWorkerRunningTask(task3);\n    mockWorkerCompleteFailedTask(task3);\n    Assert.assertTrue(taskFuture3.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isFailure());\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n\n    mockWorkerCompleteSuccessfulTask(task2);\n    Assert.assertTrue(taskFuture2.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isSuccess());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/RemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":873,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-03 01:50:22","codes":[{"authorDate":"2018-10-03 01:50:22","commitOrder":2,"curCode":"  public void testBlacklistZKWorkers() throws Exception\n  {\n    Period timeoutPeriod = Period.millis(1000);\n    makeWorker();\n\n    RemoteTaskRunnerConfig rtrConfig = new TestRemoteTaskRunnerConfig(timeoutPeriod);\n    rtrConfig.setMaxPercentageBlacklistWorkers(100);\n\n    makeRemoteTaskRunner(rtrConfig);\n\n    TestRealtimeTask task1 = new TestRealtimeTask(\n        \"realtime1\",\n        new TaskResource(\"realtime1\", 1),\n        \"foo\",\n        TaskStatus.success(\"realtime1\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture1 = remoteTaskRunner.run(task1);\n    Assert.assertTrue(taskAnnounced(task1.getId()));\n    mockWorkerRunningTask(task1);\n    mockWorkerCompleteFailedTask(task1);\n    Assert.assertTrue(taskFuture1.get().isFailure());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        1,\n        remoteTaskRunner.findWorkerRunningTask(task1.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    TestRealtimeTask task2 = new TestRealtimeTask(\n        \"realtime2\",\n        new TaskResource(\"realtime2\", 1),\n        \"foo\",\n        TaskStatus.running(\"realtime2\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture2 = remoteTaskRunner.run(task2);\n    Assert.assertTrue(taskAnnounced(task2.getId()));\n    mockWorkerRunningTask(task2);\n    mockWorkerCompleteFailedTask(task2);\n    Assert.assertTrue(taskFuture2.get().isFailure());\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        2,\n        remoteTaskRunner.findWorkerRunningTask(task2.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    ((RemoteTaskRunnerTestUtils.TestableRemoteTaskRunner) remoteTaskRunner)\n        .setCurrentTimeMillis(System.currentTimeMillis());\n    remoteTaskRunner.checkBlackListedNodes();\n\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n\n    ((RemoteTaskRunnerTestUtils.TestableRemoteTaskRunner) remoteTaskRunner)\n        .setCurrentTimeMillis(System.currentTimeMillis() + 2 * timeoutPeriod.toStandardDuration().getMillis());\n    remoteTaskRunner.checkBlackListedNodes();\n\n    \r\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        0,\n        remoteTaskRunner.findWorkerRunningTask(task2.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    TestRealtimeTask task3 = new TestRealtimeTask(\n        \"realtime3\",\n        new TaskResource(\"realtime3\", 1),\n        \"foo\",\n        TaskStatus.running(\"realtime3\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture3 = remoteTaskRunner.run(task3);\n    Assert.assertTrue(taskAnnounced(task3.getId()));\n    mockWorkerRunningTask(task3);\n    mockWorkerCompleteSuccessfulTask(task3);\n    Assert.assertTrue(taskFuture3.get().isSuccess());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        0,\n        remoteTaskRunner.findWorkerRunningTask(task3.getId()).getContinuouslyFailedTasksCount()\n    );\n  }\n","date":"2018-10-03 01:50:22","endLine":769,"groupId":"15508","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlacklistZKWorkers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cb/b381dbd4887066dca9b3a8ce202d4f92dd939f.src","preCode":"  public void testBlacklistZKWorkers() throws Exception\n  {\n    Period timeoutPeriod = Period.millis(1000);\n    makeWorker();\n\n    RemoteTaskRunnerConfig rtrConfig = new TestRemoteTaskRunnerConfig(timeoutPeriod);\n    rtrConfig.setMaxPercentageBlacklistWorkers(100);\n\n    makeRemoteTaskRunner(rtrConfig);\n\n    TestRealtimeTask task1 = new TestRealtimeTask(\n        \"realtime1\",\n        new TaskResource(\"realtime1\", 1),\n        \"foo\",\n        TaskStatus.success(\"realtime1\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture1 = remoteTaskRunner.run(task1);\n    Assert.assertTrue(taskAnnounced(task1.getId()));\n    mockWorkerRunningTask(task1);\n    mockWorkerCompleteFailedTask(task1);\n    Assert.assertTrue(taskFuture1.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isFailure());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        1,\n        remoteTaskRunner.findWorkerRunningTask(task1.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    TestRealtimeTask task2 = new TestRealtimeTask(\n        \"realtime2\",\n        new TaskResource(\"realtime2\", 1),\n        \"foo\",\n        TaskStatus.running(\"realtime2\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture2 = remoteTaskRunner.run(task2);\n    Assert.assertTrue(taskAnnounced(task2.getId()));\n    mockWorkerRunningTask(task2);\n    mockWorkerCompleteFailedTask(task2);\n    Assert.assertTrue(taskFuture2.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isFailure());\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        2,\n        remoteTaskRunner.findWorkerRunningTask(task2.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    ((RemoteTaskRunnerTestUtils.TestableRemoteTaskRunner) remoteTaskRunner)\n        .setCurrentTimeMillis(System.currentTimeMillis());\n    remoteTaskRunner.checkBlackListedNodes();\n\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n\n    ((RemoteTaskRunnerTestUtils.TestableRemoteTaskRunner) remoteTaskRunner)\n        .setCurrentTimeMillis(System.currentTimeMillis() + 2 * timeoutPeriod.toStandardDuration().getMillis());\n    remoteTaskRunner.checkBlackListedNodes();\n\n    \r\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        0,\n        remoteTaskRunner.findWorkerRunningTask(task2.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    TestRealtimeTask task3 = new TestRealtimeTask(\n        \"realtime3\",\n        new TaskResource(\"realtime3\", 1),\n        \"foo\",\n        TaskStatus.running(\"realtime3\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture3 = remoteTaskRunner.run(task3);\n    Assert.assertTrue(taskAnnounced(task3.getId()));\n    mockWorkerRunningTask(task3);\n    mockWorkerCompleteSuccessfulTask(task3);\n    Assert.assertTrue(taskFuture3.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isSuccess());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        0,\n        remoteTaskRunner.findWorkerRunningTask(task3.getId()).getContinuouslyFailedTasksCount()\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/RemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":689,"status":"M"},{"authorDate":"2018-10-03 01:50:22","commitOrder":2,"curCode":"  public void testSuccessfulTaskOnBlacklistedWorker() throws Exception\n  {\n    Period timeoutPeriod = Period.millis(1000);\n    makeWorker();\n\n    RemoteTaskRunnerConfig rtrConfig = new TestRemoteTaskRunnerConfig(timeoutPeriod);\n    rtrConfig.setMaxPercentageBlacklistWorkers(100);\n\n    makeRemoteTaskRunner(rtrConfig);\n\n    TestRealtimeTask task1 = new TestRealtimeTask(\n        \"realtime1\", new TaskResource(\"realtime1\", 1), \"foo\", TaskStatus.success(\"realtime1\"), jsonMapper\n    );\n    TestRealtimeTask task2 = new TestRealtimeTask(\n        \"realtime2\", new TaskResource(\"realtime2\", 1), \"foo\", TaskStatus.success(\"realtime2\"), jsonMapper\n    );\n    TestRealtimeTask task3 = new TestRealtimeTask(\n        \"realtime3\", new TaskResource(\"realtime3\", 1), \"foo\", TaskStatus.success(\"realtime3\"), jsonMapper\n    );\n\n    Future<TaskStatus> taskFuture1 = remoteTaskRunner.run(task1);\n    Assert.assertTrue(taskAnnounced(task1.getId()));\n    mockWorkerRunningTask(task1);\n    mockWorkerCompleteFailedTask(task1);\n    Assert.assertTrue(taskFuture1.get().isFailure());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n\n    Future<TaskStatus> taskFuture2 = remoteTaskRunner.run(task2);\n    Assert.assertTrue(taskAnnounced(task2.getId()));\n    mockWorkerRunningTask(task2);\n\n    Future<TaskStatus> taskFuture3 = remoteTaskRunner.run(task3);\n    Assert.assertTrue(taskAnnounced(task3.getId()));\n    mockWorkerRunningTask(task3);\n    mockWorkerCompleteFailedTask(task3);\n    Assert.assertTrue(taskFuture3.get().isFailure());\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n\n    mockWorkerCompleteSuccessfulTask(task2);\n    Assert.assertTrue(taskFuture2.get().isSuccess());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n  }\n","date":"2018-10-03 01:50:22","endLine":919,"groupId":"8482","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSuccessfulTaskOnBlacklistedWorker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cb/b381dbd4887066dca9b3a8ce202d4f92dd939f.src","preCode":"  public void testSuccessfulTaskOnBlacklistedWorker() throws Exception\n  {\n    Period timeoutPeriod = Period.millis(1000);\n    makeWorker();\n\n    RemoteTaskRunnerConfig rtrConfig = new TestRemoteTaskRunnerConfig(timeoutPeriod);\n    rtrConfig.setMaxPercentageBlacklistWorkers(100);\n\n    makeRemoteTaskRunner(rtrConfig);\n\n    TestRealtimeTask task1 = new TestRealtimeTask(\n        \"realtime1\", new TaskResource(\"realtime1\", 1), \"foo\", TaskStatus.success(\"realtime1\"), jsonMapper\n    );\n    TestRealtimeTask task2 = new TestRealtimeTask(\n        \"realtime2\", new TaskResource(\"realtime2\", 1), \"foo\", TaskStatus.success(\"realtime2\"), jsonMapper\n    );\n    TestRealtimeTask task3 = new TestRealtimeTask(\n        \"realtime3\", new TaskResource(\"realtime3\", 1), \"foo\", TaskStatus.success(\"realtime3\"), jsonMapper\n    );\n\n    Future<TaskStatus> taskFuture1 = remoteTaskRunner.run(task1);\n    Assert.assertTrue(taskAnnounced(task1.getId()));\n    mockWorkerRunningTask(task1);\n    mockWorkerCompleteFailedTask(task1);\n    Assert.assertTrue(taskFuture1.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isFailure());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n\n    Future<TaskStatus> taskFuture2 = remoteTaskRunner.run(task2);\n    Assert.assertTrue(taskAnnounced(task2.getId()));\n    mockWorkerRunningTask(task2);\n\n    Future<TaskStatus> taskFuture3 = remoteTaskRunner.run(task3);\n    Assert.assertTrue(taskAnnounced(task3.getId()));\n    mockWorkerRunningTask(task3);\n    mockWorkerCompleteFailedTask(task3);\n    Assert.assertTrue(taskFuture3.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isFailure());\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n\n    mockWorkerCompleteSuccessfulTask(task2);\n    Assert.assertTrue(taskFuture2.get(TIMEOUT_SECONDS, TimeUnit.SECONDS).isSuccess());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/RemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":878,"status":"M"}],"commitId":"3ae563263a23000560749071d262727d47296856","commitMessage":"@@@Renamed 'Generic Column' -> 'Numeric Column'; Fixed a few resource leaks in processing; misc refinements (#5957)\n\nThis PR accumulates many refactorings and small improvements that I did while preparing the next change set of https://github.com/druid-io/druid/projects/2. I finally decided to make them a separate PR to minimize the volume of the main PR.\n\nSome of the changes:\n - Renamed confusing \"Generic Column\" term to \"Numeric Column\" (what it actually implies) in many class names.\n - Generified `ComplexMetricExtractor`","date":"2018-10-03 01:50:22","modifiedFileCount":"776","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-09-29 14:50:38","codes":[{"authorDate":"2018-10-03 01:50:22","commitOrder":3,"curCode":"  public void testBlacklistZKWorkers() throws Exception\n  {\n    Period timeoutPeriod = Period.millis(1000);\n    makeWorker();\n\n    RemoteTaskRunnerConfig rtrConfig = new TestRemoteTaskRunnerConfig(timeoutPeriod);\n    rtrConfig.setMaxPercentageBlacklistWorkers(100);\n\n    makeRemoteTaskRunner(rtrConfig);\n\n    TestRealtimeTask task1 = new TestRealtimeTask(\n        \"realtime1\",\n        new TaskResource(\"realtime1\", 1),\n        \"foo\",\n        TaskStatus.success(\"realtime1\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture1 = remoteTaskRunner.run(task1);\n    Assert.assertTrue(taskAnnounced(task1.getId()));\n    mockWorkerRunningTask(task1);\n    mockWorkerCompleteFailedTask(task1);\n    Assert.assertTrue(taskFuture1.get().isFailure());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        1,\n        remoteTaskRunner.findWorkerRunningTask(task1.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    TestRealtimeTask task2 = new TestRealtimeTask(\n        \"realtime2\",\n        new TaskResource(\"realtime2\", 1),\n        \"foo\",\n        TaskStatus.running(\"realtime2\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture2 = remoteTaskRunner.run(task2);\n    Assert.assertTrue(taskAnnounced(task2.getId()));\n    mockWorkerRunningTask(task2);\n    mockWorkerCompleteFailedTask(task2);\n    Assert.assertTrue(taskFuture2.get().isFailure());\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        2,\n        remoteTaskRunner.findWorkerRunningTask(task2.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    ((RemoteTaskRunnerTestUtils.TestableRemoteTaskRunner) remoteTaskRunner)\n        .setCurrentTimeMillis(System.currentTimeMillis());\n    remoteTaskRunner.checkBlackListedNodes();\n\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n\n    ((RemoteTaskRunnerTestUtils.TestableRemoteTaskRunner) remoteTaskRunner)\n        .setCurrentTimeMillis(System.currentTimeMillis() + 2 * timeoutPeriod.toStandardDuration().getMillis());\n    remoteTaskRunner.checkBlackListedNodes();\n\n    \r\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        0,\n        remoteTaskRunner.findWorkerRunningTask(task2.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    TestRealtimeTask task3 = new TestRealtimeTask(\n        \"realtime3\",\n        new TaskResource(\"realtime3\", 1),\n        \"foo\",\n        TaskStatus.running(\"realtime3\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture3 = remoteTaskRunner.run(task3);\n    Assert.assertTrue(taskAnnounced(task3.getId()));\n    mockWorkerRunningTask(task3);\n    mockWorkerCompleteSuccessfulTask(task3);\n    Assert.assertTrue(taskFuture3.get().isSuccess());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        0,\n        remoteTaskRunner.findWorkerRunningTask(task3.getId()).getContinuouslyFailedTasksCount()\n    );\n  }\n","date":"2018-10-03 01:50:22","endLine":769,"groupId":"104307","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBlacklistZKWorkers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cb/b381dbd4887066dca9b3a8ce202d4f92dd939f.src","preCode":"  public void testBlacklistZKWorkers() throws Exception\n  {\n    Period timeoutPeriod = Period.millis(1000);\n    makeWorker();\n\n    RemoteTaskRunnerConfig rtrConfig = new TestRemoteTaskRunnerConfig(timeoutPeriod);\n    rtrConfig.setMaxPercentageBlacklistWorkers(100);\n\n    makeRemoteTaskRunner(rtrConfig);\n\n    TestRealtimeTask task1 = new TestRealtimeTask(\n        \"realtime1\",\n        new TaskResource(\"realtime1\", 1),\n        \"foo\",\n        TaskStatus.success(\"realtime1\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture1 = remoteTaskRunner.run(task1);\n    Assert.assertTrue(taskAnnounced(task1.getId()));\n    mockWorkerRunningTask(task1);\n    mockWorkerCompleteFailedTask(task1);\n    Assert.assertTrue(taskFuture1.get().isFailure());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        1,\n        remoteTaskRunner.findWorkerRunningTask(task1.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    TestRealtimeTask task2 = new TestRealtimeTask(\n        \"realtime2\",\n        new TaskResource(\"realtime2\", 1),\n        \"foo\",\n        TaskStatus.running(\"realtime2\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture2 = remoteTaskRunner.run(task2);\n    Assert.assertTrue(taskAnnounced(task2.getId()));\n    mockWorkerRunningTask(task2);\n    mockWorkerCompleteFailedTask(task2);\n    Assert.assertTrue(taskFuture2.get().isFailure());\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        2,\n        remoteTaskRunner.findWorkerRunningTask(task2.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    ((RemoteTaskRunnerTestUtils.TestableRemoteTaskRunner) remoteTaskRunner)\n        .setCurrentTimeMillis(System.currentTimeMillis());\n    remoteTaskRunner.checkBlackListedNodes();\n\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n\n    ((RemoteTaskRunnerTestUtils.TestableRemoteTaskRunner) remoteTaskRunner)\n        .setCurrentTimeMillis(System.currentTimeMillis() + 2 * timeoutPeriod.toStandardDuration().getMillis());\n    remoteTaskRunner.checkBlackListedNodes();\n\n    \r\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        0,\n        remoteTaskRunner.findWorkerRunningTask(task2.getId()).getContinuouslyFailedTasksCount()\n    );\n\n    TestRealtimeTask task3 = new TestRealtimeTask(\n        \"realtime3\",\n        new TaskResource(\"realtime3\", 1),\n        \"foo\",\n        TaskStatus.running(\"realtime3\"),\n        jsonMapper\n    );\n    Future<TaskStatus> taskFuture3 = remoteTaskRunner.run(task3);\n    Assert.assertTrue(taskAnnounced(task3.getId()));\n    mockWorkerRunningTask(task3);\n    mockWorkerCompleteSuccessfulTask(task3);\n    Assert.assertTrue(taskFuture3.get().isSuccess());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(\n        0,\n        remoteTaskRunner.findWorkerRunningTask(task3.getId()).getContinuouslyFailedTasksCount()\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/RemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":689,"status":"N"},{"authorDate":"2020-09-29 14:50:38","commitOrder":3,"curCode":"  public void testSuccessfulTaskOnBlacklistedWorker() throws Exception\n  {\n    Period timeoutPeriod = Period.millis(1000);\n    makeWorker();\n\n    RemoteTaskRunnerConfig rtrConfig = new TestRemoteTaskRunnerConfig(timeoutPeriod);\n    rtrConfig.setMaxPercentageBlacklistWorkers(100);\n\n    makeRemoteTaskRunner(rtrConfig);\n\n    TestRealtimeTask task1 = new TestRealtimeTask(\n        \"realtime1\", new TaskResource(\"realtime1\", 1), \"foo\", TaskStatus.success(\"realtime1\"), jsonMapper\n    );\n    TestRealtimeTask task2 = new TestRealtimeTask(\n        \"realtime2\", new TaskResource(\"realtime2\", 1), \"foo\", TaskStatus.success(\"realtime2\"), jsonMapper\n    );\n    TestRealtimeTask task3 = new TestRealtimeTask(\n        \"realtime3\", new TaskResource(\"realtime3\", 1), \"foo\", TaskStatus.success(\"realtime3\"), jsonMapper\n    );\n\n    Future<TaskStatus> taskFuture1 = remoteTaskRunner.run(task1);\n    Assert.assertTrue(taskAnnounced(task1.getId()));\n    mockWorkerRunningTask(task1);\n    mockWorkerCompleteFailedTask(task1);\n    Assert.assertTrue(taskFuture1.get().isFailure());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(0, remoteTaskRunner.getBlacklistedTaskSlotCount());\n\n    Future<TaskStatus> taskFuture2 = remoteTaskRunner.run(task2);\n    Assert.assertTrue(taskAnnounced(task2.getId()));\n    mockWorkerRunningTask(task2);\n    Assert.assertEquals(0, remoteTaskRunner.getBlacklistedTaskSlotCount());\n\n    Future<TaskStatus> taskFuture3 = remoteTaskRunner.run(task3);\n    Assert.assertTrue(taskAnnounced(task3.getId()));\n    mockWorkerRunningTask(task3);\n    mockWorkerCompleteFailedTask(task3);\n    Assert.assertTrue(taskFuture3.get().isFailure());\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(3, remoteTaskRunner.getBlacklistedTaskSlotCount());\n\n    mockWorkerCompleteSuccessfulTask(task2);\n    Assert.assertTrue(taskFuture2.get().isSuccess());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n    Assert.assertEquals(0, remoteTaskRunner.getBlacklistedTaskSlotCount());\n  }\n","date":"2020-09-29 14:50:38","endLine":972,"groupId":"104307","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSuccessfulTaskOnBlacklistedWorker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e7/bf0226ba19e0a93515e815bf0b3fceacc5404c.src","preCode":"  public void testSuccessfulTaskOnBlacklistedWorker() throws Exception\n  {\n    Period timeoutPeriod = Period.millis(1000);\n    makeWorker();\n\n    RemoteTaskRunnerConfig rtrConfig = new TestRemoteTaskRunnerConfig(timeoutPeriod);\n    rtrConfig.setMaxPercentageBlacklistWorkers(100);\n\n    makeRemoteTaskRunner(rtrConfig);\n\n    TestRealtimeTask task1 = new TestRealtimeTask(\n        \"realtime1\", new TaskResource(\"realtime1\", 1), \"foo\", TaskStatus.success(\"realtime1\"), jsonMapper\n    );\n    TestRealtimeTask task2 = new TestRealtimeTask(\n        \"realtime2\", new TaskResource(\"realtime2\", 1), \"foo\", TaskStatus.success(\"realtime2\"), jsonMapper\n    );\n    TestRealtimeTask task3 = new TestRealtimeTask(\n        \"realtime3\", new TaskResource(\"realtime3\", 1), \"foo\", TaskStatus.success(\"realtime3\"), jsonMapper\n    );\n\n    Future<TaskStatus> taskFuture1 = remoteTaskRunner.run(task1);\n    Assert.assertTrue(taskAnnounced(task1.getId()));\n    mockWorkerRunningTask(task1);\n    mockWorkerCompleteFailedTask(task1);\n    Assert.assertTrue(taskFuture1.get().isFailure());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n\n    Future<TaskStatus> taskFuture2 = remoteTaskRunner.run(task2);\n    Assert.assertTrue(taskAnnounced(task2.getId()));\n    mockWorkerRunningTask(task2);\n\n    Future<TaskStatus> taskFuture3 = remoteTaskRunner.run(task3);\n    Assert.assertTrue(taskAnnounced(task3.getId()));\n    mockWorkerRunningTask(task3);\n    mockWorkerCompleteFailedTask(task3);\n    Assert.assertTrue(taskFuture3.get().isFailure());\n    Assert.assertEquals(1, remoteTaskRunner.getBlackListedWorkers().size());\n\n    mockWorkerCompleteSuccessfulTask(task2);\n    Assert.assertTrue(taskFuture2.get().isSuccess());\n    Assert.assertEquals(0, remoteTaskRunner.getBlackListedWorkers().size());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/RemoteTaskRunnerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":927,"status":"M"}],"commitId":"8168e14e9224c9459efda07b038269815975cf50","commitMessage":"@@@Adding task slot count metrics to Druid Overlord (#10379)\n\n* Adding more worker metrics to Druid Overlord\n\n* Changing the nomenclature from worker to peon as that represents the metrics that we want to monitor better\n\n* Few more instance of worker usage replaced with peon\n\n* Modifying the peon idle count logic to only use eligible workers available capacity\n\n* Changing the naming to task slot count instead of peon\n\n* Adding some unit test coverage for the new test runner apis\n\n* Addressing Review Comments\n\n* Modifying the TaskSlotCountStatsProvider apis so that overlords which are not leader do not emit these metrics\n\n* Fixing the spelling issue in the docs\n\n* Setting the annotation Nullable on the TaskSlotCountStatsProvider methods","date":"2020-09-29 14:50:38","modifiedFileCount":"14","status":"M","submitter":"Mainak Ghosh"}]
