[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void configure(Binder binder)\n  {\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentManager.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentManagerProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataRuleManager.class))\n            .addBinding(type)\n            .to(SQLMetadataRuleManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataRuleManagerProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataRuleManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentPublisher.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentPublisher.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentPublisherProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentPublisherProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(IndexerMetadataStorageCoordinator.class))\n            .addBinding(type)\n            .to(IndexerSQLMetadataStorageCoordinator.class)\n            .in(ManageLifecycle.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataStorageUpdaterJobHandler.class))\n            .addBinding(type)\n            .to(SQLMetadataStorageUpdaterJobHandler.class)\n            .in(LazySingleton.class);\n\n    JsonConfigProvider.bind(binder, \"druid.audit.manager\", SQLAuditManagerConfig.class);\n\n    PolyBind.optionBinder(binder, Key.get(AuditManager.class))\n            .addBinding(type)\n            .to(SQLAuditManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(AuditManagerProvider.class))\n            .addBinding(type)\n            .to(SQLAuditManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSupervisorManager.class))\n            .addBinding(type)\n            .to(SQLMetadataSupervisorManager.class)\n            .in(LazySingleton.class);\n  }\n","date":"2018-08-31 00:56:26","endLine":149,"groupId":"4469","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(Binderbinder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/95/5ab6bb4be48570248906db8309b9ddb2d72916.src","preCode":"  public void configure(Binder binder)\n  {\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentManager.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentManagerProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataRuleManager.class))\n            .addBinding(type)\n            .to(SQLMetadataRuleManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataRuleManagerProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataRuleManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentPublisher.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentPublisher.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentPublisherProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentPublisherProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(IndexerMetadataStorageCoordinator.class))\n            .addBinding(type)\n            .to(IndexerSQLMetadataStorageCoordinator.class)\n            .in(ManageLifecycle.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataStorageUpdaterJobHandler.class))\n            .addBinding(type)\n            .to(SQLMetadataStorageUpdaterJobHandler.class)\n            .in(LazySingleton.class);\n\n    JsonConfigProvider.bind(binder, \"druid.audit.manager\", SQLAuditManagerConfig.class);\n\n    PolyBind.optionBinder(binder, Key.get(AuditManager.class))\n            .addBinding(type)\n            .to(SQLAuditManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(AuditManagerProvider.class))\n            .addBinding(type)\n            .to(SQLAuditManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSupervisorManager.class))\n            .addBinding(type)\n            .to(SQLMetadataSupervisorManager.class)\n            .in(LazySingleton.class);\n  }\n","realPath":"server/src/main/java/org/apache/druid/guice/SQLMetadataStorageDruidModule.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private static void bindDeepStorageLocal(Binder binder)\n  {\n    MapBinder.newMapBinder(binder, String.class, SearchableVersionedDataFinder.class)\n             .addBinding(LocalFileTimestampVersionFinder.URI_SCHEME)\n             .to(LocalFileTimestampVersionFinder.class)\n             .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(DataSegmentKiller.class))\n            .addBinding(SCHEME)\n            .to(LocalDataSegmentKiller.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(DataSegmentPusher.class))\n            .addBinding(SCHEME)\n            .to(LocalDataSegmentPusher.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(DataSegmentFinder.class))\n            .addBinding(SCHEME)\n            .to(LocalDataSegmentFinder.class)\n            .in(LazySingleton.class);\n\n    JsonConfigProvider.bind(binder, \"druid.storage\", LocalDataSegmentPusherConfig.class);\n  }\n","date":"2018-08-31 00:56:26","endLine":91,"groupId":"3085","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"bindDeepStorageLocal","params":"(Binderbinder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/db/1ed09dd92a354d4ff8059cc88abb12a417791a.src","preCode":"  private static void bindDeepStorageLocal(Binder binder)\n  {\n    MapBinder.newMapBinder(binder, String.class, SearchableVersionedDataFinder.class)\n             .addBinding(LocalFileTimestampVersionFinder.URI_SCHEME)\n             .to(LocalFileTimestampVersionFinder.class)\n             .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(DataSegmentKiller.class))\n            .addBinding(SCHEME)\n            .to(LocalDataSegmentKiller.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(DataSegmentPusher.class))\n            .addBinding(SCHEME)\n            .to(LocalDataSegmentPusher.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(DataSegmentFinder.class))\n            .addBinding(SCHEME)\n            .to(LocalDataSegmentFinder.class)\n            .in(LazySingleton.class);\n\n    JsonConfigProvider.bind(binder, \"druid.storage\", LocalDataSegmentPusherConfig.class);\n  }\n","realPath":"server/src/main/java/org/apache/druid/guice/LocalDataStorageDruidModule.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-02-21 07:10:29","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void configure(Binder binder)\n  {\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentManager.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentManagerProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataRuleManager.class))\n            .addBinding(type)\n            .to(SQLMetadataRuleManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataRuleManagerProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataRuleManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentPublisher.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentPublisher.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentPublisherProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentPublisherProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(IndexerMetadataStorageCoordinator.class))\n            .addBinding(type)\n            .to(IndexerSQLMetadataStorageCoordinator.class)\n            .in(ManageLifecycle.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataStorageUpdaterJobHandler.class))\n            .addBinding(type)\n            .to(SQLMetadataStorageUpdaterJobHandler.class)\n            .in(LazySingleton.class);\n\n    JsonConfigProvider.bind(binder, \"druid.audit.manager\", SQLAuditManagerConfig.class);\n\n    PolyBind.optionBinder(binder, Key.get(AuditManager.class))\n            .addBinding(type)\n            .to(SQLAuditManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(AuditManagerProvider.class))\n            .addBinding(type)\n            .to(SQLAuditManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSupervisorManager.class))\n            .addBinding(type)\n            .to(SQLMetadataSupervisorManager.class)\n            .in(LazySingleton.class);\n  }\n","date":"2018-08-31 00:56:26","endLine":149,"groupId":"4469","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(Binderbinder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/95/5ab6bb4be48570248906db8309b9ddb2d72916.src","preCode":"  public void configure(Binder binder)\n  {\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentManager.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentManagerProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataRuleManager.class))\n            .addBinding(type)\n            .to(SQLMetadataRuleManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataRuleManagerProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataRuleManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentPublisher.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentPublisher.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentPublisherProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentPublisherProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(IndexerMetadataStorageCoordinator.class))\n            .addBinding(type)\n            .to(IndexerSQLMetadataStorageCoordinator.class)\n            .in(ManageLifecycle.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataStorageUpdaterJobHandler.class))\n            .addBinding(type)\n            .to(SQLMetadataStorageUpdaterJobHandler.class)\n            .in(LazySingleton.class);\n\n    JsonConfigProvider.bind(binder, \"druid.audit.manager\", SQLAuditManagerConfig.class);\n\n    PolyBind.optionBinder(binder, Key.get(AuditManager.class))\n            .addBinding(type)\n            .to(SQLAuditManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(AuditManagerProvider.class))\n            .addBinding(type)\n            .to(SQLAuditManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSupervisorManager.class))\n            .addBinding(type)\n            .to(SQLMetadataSupervisorManager.class)\n            .in(LazySingleton.class);\n  }\n","realPath":"server/src/main/java/org/apache/druid/guice/SQLMetadataStorageDruidModule.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"N"},{"authorDate":"2019-02-21 07:10:29","commitOrder":2,"curCode":"  private static void bindDeepStorageLocal(Binder binder)\n  {\n    MapBinder.newMapBinder(binder, String.class, SearchableVersionedDataFinder.class)\n             .addBinding(LocalFileTimestampVersionFinder.URI_SCHEME)\n             .to(LocalFileTimestampVersionFinder.class)\n             .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(DataSegmentKiller.class))\n            .addBinding(SCHEME)\n            .to(LocalDataSegmentKiller.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(DataSegmentPusher.class))\n            .addBinding(SCHEME)\n            .to(LocalDataSegmentPusher.class)\n            .in(LazySingleton.class);\n\n    JsonConfigProvider.bind(binder, \"druid.storage\", LocalDataSegmentPusherConfig.class);\n  }\n","date":"2019-02-21 07:10:29","endLine":88,"groupId":"3085","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"bindDeepStorageLocal","params":"(Binderbinder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/99/e38e3bc712a7108721124ab73c995c02614389.src","preCode":"  private static void bindDeepStorageLocal(Binder binder)\n  {\n    MapBinder.newMapBinder(binder, String.class, SearchableVersionedDataFinder.class)\n             .addBinding(LocalFileTimestampVersionFinder.URI_SCHEME)\n             .to(LocalFileTimestampVersionFinder.class)\n             .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(DataSegmentKiller.class))\n            .addBinding(SCHEME)\n            .to(LocalDataSegmentKiller.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(DataSegmentPusher.class))\n            .addBinding(SCHEME)\n            .to(LocalDataSegmentPusher.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(DataSegmentFinder.class))\n            .addBinding(SCHEME)\n            .to(LocalDataSegmentFinder.class)\n            .in(LazySingleton.class);\n\n    JsonConfigProvider.bind(binder, \"druid.storage\", LocalDataSegmentPusherConfig.class);\n  }\n","realPath":"server/src/main/java/org/apache/druid/guice/LocalDataStorageDruidModule.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"4e2b0852012ab4aed20189878a202e3fe590710b","commitMessage":"@@@Remove DataSegmentFinder.  InsertSegmentToDb.  and descriptor.json file in deep storage (#6911)\n\n* Remove DataSegmentFinder.  InsertSegmentToDb.  and descriptor.json file\n\n* delete descriptor.file when killing segments\n\n* fix test\n\n* Add doc for ha\n\n* improve warning\n","date":"2019-02-21 07:10:29","modifiedFileCount":"37","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-02-21 07:10:29","codes":[{"authorDate":"2020-01-28 03:24:29","commitOrder":3,"curCode":"  public void configure(Binder binder)\n  {\n    PolyBind.optionBinder(binder, Key.get(SegmentsMetadataManager.class))\n            .addBinding(type)\n            .to(SqlSegmentsMetadataManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(SegmentsMetadataManagerProvider.class))\n            .addBinding(type)\n            .to(SqlSegmentsMetadataManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataRuleManager.class))\n            .addBinding(type)\n            .to(SQLMetadataRuleManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataRuleManagerProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataRuleManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentPublisher.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentPublisher.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentPublisherProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentPublisherProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(IndexerMetadataStorageCoordinator.class))\n            .addBinding(type)\n            .to(IndexerSQLMetadataStorageCoordinator.class)\n            .in(ManageLifecycle.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataStorageUpdaterJobHandler.class))\n            .addBinding(type)\n            .to(SQLMetadataStorageUpdaterJobHandler.class)\n            .in(LazySingleton.class);\n\n    JsonConfigProvider.bind(binder, \"druid.audit.manager\", SQLAuditManagerConfig.class);\n\n    PolyBind.optionBinder(binder, Key.get(AuditManager.class))\n            .addBinding(type)\n            .to(SQLAuditManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(AuditManagerProvider.class))\n            .addBinding(type)\n            .to(SQLAuditManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSupervisorManager.class))\n            .addBinding(type)\n            .to(SQLMetadataSupervisorManager.class)\n            .in(LazySingleton.class);\n  }\n","date":"2020-01-28 03:24:29","endLine":149,"groupId":"101274","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"configure","params":"(Binderbinder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6b/fe1e25eedc8f4c31c212c765e27df5bea93ef9.src","preCode":"  public void configure(Binder binder)\n  {\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentManager.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentManagerProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataRuleManager.class))\n            .addBinding(type)\n            .to(SQLMetadataRuleManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataRuleManagerProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataRuleManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentPublisher.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentPublisher.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSegmentPublisherProvider.class))\n            .addBinding(type)\n            .to(SQLMetadataSegmentPublisherProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(IndexerMetadataStorageCoordinator.class))\n            .addBinding(type)\n            .to(IndexerSQLMetadataStorageCoordinator.class)\n            .in(ManageLifecycle.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataStorageUpdaterJobHandler.class))\n            .addBinding(type)\n            .to(SQLMetadataStorageUpdaterJobHandler.class)\n            .in(LazySingleton.class);\n\n    JsonConfigProvider.bind(binder, \"druid.audit.manager\", SQLAuditManagerConfig.class);\n\n    PolyBind.optionBinder(binder, Key.get(AuditManager.class))\n            .addBinding(type)\n            .to(SQLAuditManager.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(AuditManagerProvider.class))\n            .addBinding(type)\n            .to(SQLAuditManagerProvider.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(MetadataSupervisorManager.class))\n            .addBinding(type)\n            .to(SQLMetadataSupervisorManager.class)\n            .in(LazySingleton.class);\n  }\n","realPath":"server/src/main/java/org/apache/druid/guice/SQLMetadataStorageDruidModule.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2019-02-21 07:10:29","commitOrder":3,"curCode":"  private static void bindDeepStorageLocal(Binder binder)\n  {\n    MapBinder.newMapBinder(binder, String.class, SearchableVersionedDataFinder.class)\n             .addBinding(LocalFileTimestampVersionFinder.URI_SCHEME)\n             .to(LocalFileTimestampVersionFinder.class)\n             .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(DataSegmentKiller.class))\n            .addBinding(SCHEME)\n            .to(LocalDataSegmentKiller.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(DataSegmentPusher.class))\n            .addBinding(SCHEME)\n            .to(LocalDataSegmentPusher.class)\n            .in(LazySingleton.class);\n\n    JsonConfigProvider.bind(binder, \"druid.storage\", LocalDataSegmentPusherConfig.class);\n  }\n","date":"2019-02-21 07:10:29","endLine":88,"groupId":"101274","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"bindDeepStorageLocal","params":"(Binderbinder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/99/e38e3bc712a7108721124ab73c995c02614389.src","preCode":"  private static void bindDeepStorageLocal(Binder binder)\n  {\n    MapBinder.newMapBinder(binder, String.class, SearchableVersionedDataFinder.class)\n             .addBinding(LocalFileTimestampVersionFinder.URI_SCHEME)\n             .to(LocalFileTimestampVersionFinder.class)\n             .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(DataSegmentKiller.class))\n            .addBinding(SCHEME)\n            .to(LocalDataSegmentKiller.class)\n            .in(LazySingleton.class);\n\n    PolyBind.optionBinder(binder, Key.get(DataSegmentPusher.class))\n            .addBinding(SCHEME)\n            .to(LocalDataSegmentPusher.class)\n            .in(LazySingleton.class);\n\n    JsonConfigProvider.bind(binder, \"druid.storage\", LocalDataSegmentPusherConfig.class);\n  }\n","realPath":"server/src/main/java/org/apache/druid/guice/LocalDataStorageDruidModule.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"}],"commitId":"b9186f8f9ff2ff52aceda42bc5f24ffd47a7d17e","commitMessage":"@@@Reconcile terminology and method naming to 'used/unused segments'; Rename MetadataSegmentManager to MetadataSegmentsManager (#7306)\n\n* Reconcile terminology and method naming to 'used/unused segments'; Don't use terms 'enable/disable data source'; Rename MetadataSegmentManager to MetadataSegments; Make REST API methods which mark segments as used/unused to return server error instead of an empty response in case of error\n\n* Fix brace\n\n* Import order\n\n* Rename withKillDataSourceWhitelist to withSpecificDataSourcesToKill\n\n* Fix tests\n\n* Fix tests by adding proper methods without interval parameters to IndexerMetadataStorageCoordinator instead of hacking with Intervals.ETERNITY\n\n* More aligned names of DruidCoordinatorHelpers.  rename several CoordinatorDynamicConfig parameters\n\n* Rename ClientCompactTaskQuery to ClientCompactionTaskQuery for consistency with CompactionTask; ClientCompactQueryTuningConfig to ClientCompactionTaskQueryTuningConfig\n\n* More variable and method renames\n\n* Rename MetadataSegments to SegmentsMetadata\n\n* Javadoc update\n\n* Simplify SegmentsMetadata.getUnusedSegmentIntervals().  more javadocs\n\n* Update Javadoc of VersionedIntervalTimeline.iterateAllObjects()\n\n* Reorder imports\n\n* Rename SegmentsMetadata.tryMark... methods to mark... and make them to return boolean and the numbers of segments changed and relay exceptions to callers\n\n* Complete merge\n\n* Add CollectionUtils.newTreeSet(); Refactor DruidCoordinatorRuntimeParams creation in tests\n\n* Remove MetadataSegmentManager\n\n* Rename millisLagSinceCoordinatorBecomesLeaderBeforeCanMarkAsUnusedOvershadowedSegments to leadingTimeMillisBeforeCanMarkAsUnusedOvershadowedSegments\n\n* Fix tests.  refactor DruidCluster creation in tests into DruidClusterBuilder\n\n* Fix inspections\n\n* Fix SQLMetadataSegmentManagerEmptyTest and rename it to SqlSegmentsMetadataEmptyTest\n\n* Rename SegmentsAndMetadata to SegmentsAndCommitMetadata to reduce the similarity with SegmentsMetadata; Rename some methods\n\n* Rename DruidCoordinatorHelper to CoordinatorDuty.  refactor DruidCoordinator\n\n* Unused import\n\n* Optimize imports\n\n* Rename IndexerSQLMetadataStorageCoordinator.getDataSourceMetadata() to retrieveDataSourceMetadata()\n\n* Unused import\n\n* Update terminology in datasource-view.tsx\n\n* Fix label in datasource-view.spec.tsx.snap\n\n* Fix lint errors in datasource-view.tsx\n\n* Doc improvements\n\n* Another attempt to please TSLint\n\n* Another attempt to please TSLint\n\n* Style fixes\n\n* Fix IndexerSQLMetadataStorageCoordinator.createUsedSegmentsSqlQueryForIntervals() (wrong merge)\n\n* Try to fix docs build issue\n\n* Javadoc and spelling fixes\n\n* Rename SegmentsMetadata to SegmentsMetadataManager.  address other comments\n\n* Address more comments\n","date":"2020-01-28 03:24:29","modifiedFileCount":"127","status":"M","submitter":"Roman Leventov"}]
