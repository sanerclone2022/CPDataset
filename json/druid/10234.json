[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSimpleAnnounce() throws IOException\n  {\n    coordinator.announceHistoricalSegments(SEGMENTS);\n    for (DataSegment segment : SEGMENTS) {\n      Assert.assertArrayEquals(\n          mapper.writeValueAsString(segment).getBytes(\"UTF-8\"),\n          derbyConnector.lookup(\n              derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\n              \"id\",\n              \"payload\",\n              segment.getIdentifier()\n          )\n      );\n    }\n\n    Assert.assertEquals(\n        ImmutableList.of(defaultSegment.getIdentifier(), defaultSegment2.getIdentifier()),\n        getUsedIdentifiers()\n    );\n\n    \r\n    Assert.assertEquals(0, metadataUpdateCounter.get());\n  }\n","date":"2018-08-31 00:56:26","endLine":273,"groupId":"15623","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleAnnounce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/3105ebceab4724c2e7154daff80973b47eece1.src","preCode":"  public void testSimpleAnnounce() throws IOException\n  {\n    coordinator.announceHistoricalSegments(SEGMENTS);\n    for (DataSegment segment : SEGMENTS) {\n      Assert.assertArrayEquals(\n          mapper.writeValueAsString(segment).getBytes(\"UTF-8\"),\n          derbyConnector.lookup(\n              derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\n              \"id\",\n              \"payload\",\n              segment.getIdentifier()\n          )\n      );\n    }\n\n    Assert.assertEquals(\n        ImmutableList.of(defaultSegment.getIdentifier(), defaultSegment2.getIdentifier()),\n        getUsedIdentifiers()\n    );\n\n    \r\n    Assert.assertEquals(0, metadataUpdateCounter.get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/metadata/IndexerSQLMetadataStorageCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  private void additionalNumberedShardTest(Set<DataSegment> segments) throws IOException\n  {\n    coordinator.announceHistoricalSegments(segments);\n\n    for (DataSegment segment : segments) {\n      Assert.assertArrayEquals(\n          mapper.writeValueAsString(segment).getBytes(\"UTF-8\"),\n          derbyConnector.lookup(\n              derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\n              \"id\",\n              \"payload\",\n              segment.getIdentifier()\n          )\n      );\n    }\n\n    Assert.assertEquals(\n        segments.stream().map(DataSegment::getIdentifier).collect(Collectors.toList()),\n        getUsedIdentifiers()\n    );\n\n    \r\n    Assert.assertEquals(0, metadataUpdateCounter.get());\n  }\n","date":"2018-08-31 00:56:26","endLine":837,"groupId":"21401","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"additionalNumberedShardTest","params":"(Set<DataSegment>segments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/3105ebceab4724c2e7154daff80973b47eece1.src","preCode":"  private void additionalNumberedShardTest(Set<DataSegment> segments) throws IOException\n  {\n    coordinator.announceHistoricalSegments(segments);\n\n    for (DataSegment segment : segments) {\n      Assert.assertArrayEquals(\n          mapper.writeValueAsString(segment).getBytes(\"UTF-8\"),\n          derbyConnector.lookup(\n              derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\n              \"id\",\n              \"payload\",\n              segment.getIdentifier()\n          )\n      );\n    }\n\n    Assert.assertEquals(\n        segments.stream().map(DataSegment::getIdentifier).collect(Collectors.toList()),\n        getUsedIdentifiers()\n    );\n\n    \r\n    Assert.assertEquals(0, metadataUpdateCounter.get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/metadata/IndexerSQLMetadataStorageCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":814,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-01-22 03:11:10","codes":[{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  public void testSimpleAnnounce() throws IOException\n  {\n    coordinator.announceHistoricalSegments(SEGMENTS);\n    for (DataSegment segment : SEGMENTS) {\n      Assert.assertArrayEquals(\n          mapper.writeValueAsString(segment).getBytes(StandardCharsets.UTF_8),\n          derbyConnector.lookup(\n              derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\n              \"id\",\n              \"payload\",\n              segment.getId().toString()\n          )\n      );\n    }\n\n    Assert.assertEquals(\n        ImmutableList.of(defaultSegment.getId().toString(), defaultSegment2.getId().toString()),\n        getUsedSegmentIds()\n    );\n\n    \r\n    Assert.assertEquals(0, metadataUpdateCounter.get());\n  }\n","date":"2019-01-22 03:11:10","endLine":274,"groupId":"21487","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleAnnounce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/09/b6f56f4778f43375453e0345c95bf7392002cf.src","preCode":"  public void testSimpleAnnounce() throws IOException\n  {\n    coordinator.announceHistoricalSegments(SEGMENTS);\n    for (DataSegment segment : SEGMENTS) {\n      Assert.assertArrayEquals(\n          mapper.writeValueAsString(segment).getBytes(\"UTF-8\"),\n          derbyConnector.lookup(\n              derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\n              \"id\",\n              \"payload\",\n              segment.getIdentifier()\n          )\n      );\n    }\n\n    Assert.assertEquals(\n        ImmutableList.of(defaultSegment.getIdentifier(), defaultSegment2.getIdentifier()),\n        getUsedIdentifiers()\n    );\n\n    \r\n    Assert.assertEquals(0, metadataUpdateCounter.get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/metadata/IndexerSQLMetadataStorageCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2019-01-22 03:11:10","commitOrder":2,"curCode":"  private void additionalNumberedShardTest(Set<DataSegment> segments) throws IOException\n  {\n    coordinator.announceHistoricalSegments(segments);\n\n    for (DataSegment segment : segments) {\n      Assert.assertArrayEquals(\n          mapper.writeValueAsString(segment).getBytes(StandardCharsets.UTF_8),\n          derbyConnector.lookup(\n              derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\n              \"id\",\n              \"payload\",\n              segment.getId().toString()\n          )\n      );\n    }\n\n    Assert.assertEquals(\n        segments.stream().map(segment -> segment.getId().toString()).collect(Collectors.toList()),\n        getUsedSegmentIds()\n    );\n\n    \r\n    Assert.assertEquals(0, metadataUpdateCounter.get());\n  }\n","date":"2019-01-22 03:11:10","endLine":838,"groupId":"2024","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"additionalNumberedShardTest","params":"(Set<DataSegment>segments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/09/b6f56f4778f43375453e0345c95bf7392002cf.src","preCode":"  private void additionalNumberedShardTest(Set<DataSegment> segments) throws IOException\n  {\n    coordinator.announceHistoricalSegments(segments);\n\n    for (DataSegment segment : segments) {\n      Assert.assertArrayEquals(\n          mapper.writeValueAsString(segment).getBytes(\"UTF-8\"),\n          derbyConnector.lookup(\n              derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\n              \"id\",\n              \"payload\",\n              segment.getIdentifier()\n          )\n      );\n    }\n\n    Assert.assertEquals(\n        segments.stream().map(DataSegment::getIdentifier).collect(Collectors.toList()),\n        getUsedIdentifiers()\n    );\n\n    \r\n    Assert.assertEquals(0, metadataUpdateCounter.get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/metadata/IndexerSQLMetadataStorageCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":815,"status":"M"}],"commitId":"8eae26fd4e7572060d112864dd3d5f6a865b9c89","commitMessage":"@@@Introduce SegmentId class (#6370)\n\n* Introduce SegmentId class\n\n* tmp\n\n* Fix SelectQueryRunnerTest\n\n* Fix indentation\n\n* Fixes\n\n* Remove Comparators.inverse() tests\n\n* Refinements\n\n* Fix tests\n\n* Fix more tests\n\n* Remove duplicate DataSegmentTest.  fixes #6064\n\n* SegmentDescriptor doc\n\n* Fix SQLMetadataStorageUpdaterJobHandler\n\n* Fix DataSegment deserialization for ignoring id\n\n* Add comments\n\n* More comments\n\n* Address more comments\n\n* Fix compilation\n\n* Restore segment2 in SystemSchemaTest according to a comment\n\n* Fix style\n\n* fix testServerSegmentsTable\n\n* Fix compilation\n\n* Add comments about why SegmentId and SegmentIdWithShardSpec are separate classes\n\n* Fix SystemSchemaTest\n\n* Fix style\n\n* Compare SegmentDescriptor with SegmentId in Javadoc and comments rather than with DataSegment\n\n* Remove a link.  see https://youtrack.jetbrains.com/issue/IDEA-205164\n\n* Fix compilation\n","date":"2019-01-22 03:11:10","modifiedFileCount":"308","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-01-28 03:24:29","codes":[{"authorDate":"2020-01-28 03:24:29","commitOrder":3,"curCode":"  public void testSimpleAnnounce() throws IOException\n  {\n    coordinator.announceHistoricalSegments(SEGMENTS);\n    for (DataSegment segment : SEGMENTS) {\n      Assert.assertArrayEquals(\n          mapper.writeValueAsString(segment).getBytes(StandardCharsets.UTF_8),\n          derbyConnector.lookup(\n              derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\n              \"id\",\n              \"payload\",\n              segment.getId().toString()\n          )\n      );\n    }\n\n    Assert.assertEquals(\n        ImmutableList.of(defaultSegment.getId().toString(), defaultSegment2.getId().toString()),\n        retrieveUsedSegmentIds()\n    );\n\n    \r\n    Assert.assertEquals(0, metadataUpdateCounter.get());\n  }\n","date":"2020-01-28 03:24:29","endLine":286,"groupId":"10234","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleAnnounce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/90/aeb9b72a62849f5591c25a30f058a33bb8462d.src","preCode":"  public void testSimpleAnnounce() throws IOException\n  {\n    coordinator.announceHistoricalSegments(SEGMENTS);\n    for (DataSegment segment : SEGMENTS) {\n      Assert.assertArrayEquals(\n          mapper.writeValueAsString(segment).getBytes(StandardCharsets.UTF_8),\n          derbyConnector.lookup(\n              derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\n              \"id\",\n              \"payload\",\n              segment.getId().toString()\n          )\n      );\n    }\n\n    Assert.assertEquals(\n        ImmutableList.of(defaultSegment.getId().toString(), defaultSegment2.getId().toString()),\n        getUsedSegmentIds()\n    );\n\n    \r\n    Assert.assertEquals(0, metadataUpdateCounter.get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/metadata/IndexerSQLMetadataStorageCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"},{"authorDate":"2020-01-28 03:24:29","commitOrder":3,"curCode":"  private void additionalNumberedShardTest(Set<DataSegment> segments) throws IOException\n  {\n    coordinator.announceHistoricalSegments(segments);\n\n    for (DataSegment segment : segments) {\n      Assert.assertArrayEquals(\n          mapper.writeValueAsString(segment).getBytes(StandardCharsets.UTF_8),\n          derbyConnector.lookup(\n              derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\n              \"id\",\n              \"payload\",\n              segment.getId().toString()\n          )\n      );\n    }\n\n    Assert.assertEquals(\n        segments.stream().map(segment -> segment.getId().toString()).collect(Collectors.toList()),\n        retrieveUsedSegmentIds()\n    );\n\n    \r\n    Assert.assertEquals(0, metadataUpdateCounter.get());\n  }\n","date":"2020-01-28 03:24:29","endLine":851,"groupId":"10234","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"additionalNumberedShardTest","params":"(Set<DataSegment>segments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/90/aeb9b72a62849f5591c25a30f058a33bb8462d.src","preCode":"  private void additionalNumberedShardTest(Set<DataSegment> segments) throws IOException\n  {\n    coordinator.announceHistoricalSegments(segments);\n\n    for (DataSegment segment : segments) {\n      Assert.assertArrayEquals(\n          mapper.writeValueAsString(segment).getBytes(StandardCharsets.UTF_8),\n          derbyConnector.lookup(\n              derbyConnectorRule.metadataTablesConfigSupplier().get().getSegmentsTable(),\n              \"id\",\n              \"payload\",\n              segment.getId().toString()\n          )\n      );\n    }\n\n    Assert.assertEquals(\n        segments.stream().map(segment -> segment.getId().toString()).collect(Collectors.toList()),\n        getUsedSegmentIds()\n    );\n\n    \r\n    Assert.assertEquals(0, metadataUpdateCounter.get());\n  }\n","realPath":"server/src/test/java/org/apache/druid/metadata/IndexerSQLMetadataStorageCoordinatorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":828,"status":"M"}],"commitId":"b9186f8f9ff2ff52aceda42bc5f24ffd47a7d17e","commitMessage":"@@@Reconcile terminology and method naming to 'used/unused segments'; Rename MetadataSegmentManager to MetadataSegmentsManager (#7306)\n\n* Reconcile terminology and method naming to 'used/unused segments'; Don't use terms 'enable/disable data source'; Rename MetadataSegmentManager to MetadataSegments; Make REST API methods which mark segments as used/unused to return server error instead of an empty response in case of error\n\n* Fix brace\n\n* Import order\n\n* Rename withKillDataSourceWhitelist to withSpecificDataSourcesToKill\n\n* Fix tests\n\n* Fix tests by adding proper methods without interval parameters to IndexerMetadataStorageCoordinator instead of hacking with Intervals.ETERNITY\n\n* More aligned names of DruidCoordinatorHelpers.  rename several CoordinatorDynamicConfig parameters\n\n* Rename ClientCompactTaskQuery to ClientCompactionTaskQuery for consistency with CompactionTask; ClientCompactQueryTuningConfig to ClientCompactionTaskQueryTuningConfig\n\n* More variable and method renames\n\n* Rename MetadataSegments to SegmentsMetadata\n\n* Javadoc update\n\n* Simplify SegmentsMetadata.getUnusedSegmentIntervals().  more javadocs\n\n* Update Javadoc of VersionedIntervalTimeline.iterateAllObjects()\n\n* Reorder imports\n\n* Rename SegmentsMetadata.tryMark... methods to mark... and make them to return boolean and the numbers of segments changed and relay exceptions to callers\n\n* Complete merge\n\n* Add CollectionUtils.newTreeSet(); Refactor DruidCoordinatorRuntimeParams creation in tests\n\n* Remove MetadataSegmentManager\n\n* Rename millisLagSinceCoordinatorBecomesLeaderBeforeCanMarkAsUnusedOvershadowedSegments to leadingTimeMillisBeforeCanMarkAsUnusedOvershadowedSegments\n\n* Fix tests.  refactor DruidCluster creation in tests into DruidClusterBuilder\n\n* Fix inspections\n\n* Fix SQLMetadataSegmentManagerEmptyTest and rename it to SqlSegmentsMetadataEmptyTest\n\n* Rename SegmentsAndMetadata to SegmentsAndCommitMetadata to reduce the similarity with SegmentsMetadata; Rename some methods\n\n* Rename DruidCoordinatorHelper to CoordinatorDuty.  refactor DruidCoordinator\n\n* Unused import\n\n* Optimize imports\n\n* Rename IndexerSQLMetadataStorageCoordinator.getDataSourceMetadata() to retrieveDataSourceMetadata()\n\n* Unused import\n\n* Update terminology in datasource-view.tsx\n\n* Fix label in datasource-view.spec.tsx.snap\n\n* Fix lint errors in datasource-view.tsx\n\n* Doc improvements\n\n* Another attempt to please TSLint\n\n* Another attempt to please TSLint\n\n* Style fixes\n\n* Fix IndexerSQLMetadataStorageCoordinator.createUsedSegmentsSqlQueryForIntervals() (wrong merge)\n\n* Try to fix docs build issue\n\n* Javadoc and spelling fixes\n\n* Rename SegmentsMetadata to SegmentsMetadataManager.  address other comments\n\n* Address more comments\n","date":"2020-01-28 03:24:29","modifiedFileCount":"127","status":"M","submitter":"Roman Leventov"}]
