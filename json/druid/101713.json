[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testFilterOnCurrentTimestampWithIntervalArithmetic() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo\\n\"\n        + \"WHERE\\n\"\n        + \"  __time >= CURRENT_TIMESTAMP + INTERVAL '01:02' HOUR TO MINUTE\\n\"\n        + \"  AND __time < TIMESTAMP '2003-02-02 01:00:00' - INTERVAL '1 1' DAY TO HOUR - INTERVAL '1-1' YEAR TO MONTH\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Intervals.of(\"2000-01-01T01:02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(AGGS(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":5420,"groupId":"11174","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterOnCurrentTimestampWithIntervalArithmetic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testFilterOnCurrentTimestampWithIntervalArithmetic() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo\\n\"\n        + \"WHERE\\n\"\n        + \"  __time >= CURRENT_TIMESTAMP + INTERVAL '01:02' HOUR TO MINUTE\\n\"\n        + \"  AND __time < TIMESTAMP '2003-02-02 01:00:00' - INTERVAL '1 1' DAY TO HOUR - INTERVAL '1-1' YEAR TO MONTH\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Intervals.of(\"2000-01-01T01:02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(AGGS(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":5400,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testFilterOnCurrentTimestampOnView() throws Exception\n  {\n    testQuery(\n        \"SELECT * FROM bview\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Intervals.of(\"2000-01-02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(AGGS(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":5479,"groupId":"11174","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterOnCurrentTimestampOnView","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testFilterOnCurrentTimestampOnView() throws Exception\n  {\n    testQuery(\n        \"SELECT * FROM bview\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Intervals.of(\"2000-01-02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(AGGS(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":5462,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testFilterOnCurrentTimestampWithIntervalArithmetic() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo\\n\"\n        + \"WHERE\\n\"\n        + \"  __time >= CURRENT_TIMESTAMP + INTERVAL '01:02' HOUR TO MINUTE\\n\"\n        + \"  AND __time < TIMESTAMP '2003-02-02 01:00:00' - INTERVAL '1 1' DAY TO HOUR - INTERVAL '1-1' YEAR TO MONTH\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Intervals.of(\"2000-01-01T01:02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":5280,"groupId":"3260","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterOnCurrentTimestampWithIntervalArithmetic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testFilterOnCurrentTimestampWithIntervalArithmetic() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo\\n\"\n        + \"WHERE\\n\"\n        + \"  __time >= CURRENT_TIMESTAMP + INTERVAL '01:02' HOUR TO MINUTE\\n\"\n        + \"  AND __time < TIMESTAMP '2003-02-02 01:00:00' - INTERVAL '1 1' DAY TO HOUR - INTERVAL '1-1' YEAR TO MONTH\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Intervals.of(\"2000-01-01T01:02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(AGGS(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":5260,"status":"M"},{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testFilterOnCurrentTimestampOnView() throws Exception\n  {\n    testQuery(\n        \"SELECT * FROM bview\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Intervals.of(\"2000-01-02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":5339,"groupId":"3260","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterOnCurrentTimestampOnView","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testFilterOnCurrentTimestampOnView() throws Exception\n  {\n    testQuery(\n        \"SELECT * FROM bview\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(QSS(Intervals.of(\"2000-01-02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(AGGS(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":5322,"status":"M"}],"commitId":"8b803cbc22b15799fd0526de8d6d0eea155ad733","commitMessage":"@@@Added checkstyle for \"Methods starting with Capital Letters\"  (#7118)\n\n* Added checkstyle for \"Methods starting with Capital Letters\" and changed the method names violating this.\n\n* Un-abbreviate the method names in the calcite tests\n\n* Fixed checkstyle errors\n\n* Changed asserts position in the code\n","date":"2019-02-24 12:10:31","modifiedFileCount":"24","status":"M","submitter":"Himanshu Pandey"},{"authorTime":"2021-02-06 04:56:55","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":3,"curCode":"  public void testFilterOnCurrentTimestampWithIntervalArithmetic() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo\\n\"\n        + \"WHERE\\n\"\n        + \"  __time >= CURRENT_TIMESTAMP + INTERVAL '01:02' HOUR TO MINUTE\\n\"\n        + \"  AND __time < TIMESTAMP '2003-02-02 01:00:00' - INTERVAL '1 1' DAY TO HOUR - INTERVAL '1-1' YEAR TO MONTH\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Intervals.of(\"2000-01-01T01:02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":5280,"groupId":"3260","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterOnCurrentTimestampWithIntervalArithmetic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testFilterOnCurrentTimestampWithIntervalArithmetic() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo\\n\"\n        + \"WHERE\\n\"\n        + \"  __time >= CURRENT_TIMESTAMP + INTERVAL '01:02' HOUR TO MINUTE\\n\"\n        + \"  AND __time < TIMESTAMP '2003-02-02 01:00:00' - INTERVAL '1 1' DAY TO HOUR - INTERVAL '1-1' YEAR TO MONTH\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Intervals.of(\"2000-01-01T01:02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":5260,"status":"N"},{"authorDate":"2021-02-06 04:56:55","commitOrder":3,"curCode":"  public void testFilterOnCurrentTimestampOnView() throws Exception\n  {\n    testQuery(\n        \"SELECT * FROM view.bview\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Intervals.of(\"2000-01-02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","date":"2021-02-06 04:56:55","endLine":9053,"groupId":"3260","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterOnCurrentTimestampOnView","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f4/a941b6de0c38e747fd6a1e77570d64e04db2c2.src","preCode":"  public void testFilterOnCurrentTimestampOnView() throws Exception\n  {\n    testQuery(\n        \"SELECT * FROM bview\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Intervals.of(\"2000-01-02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":9036,"status":"M"}],"commitId":"fe30f4b4144b782075db2c7e068f2bd9565a6cfd","commitMessage":"@@@refactor sql lifecycle.  druid planner.  views.  and view permissions (#10812)\n\n* before i leaped i should've seen.  the view from halfway down\n\n* fixes\n\n* fixes.  more test\n\n* rename\n\n* fix style\n\n* further refactoring\n\n* review stuffs\n\n* rename\n\n* more javadoc and comments","date":"2021-02-06 04:56:55","modifiedFileCount":"29","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-05-11 01:13:37","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":4,"curCode":"  public void testFilterOnCurrentTimestampWithIntervalArithmetic() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo\\n\"\n        + \"WHERE\\n\"\n        + \"  __time >= CURRENT_TIMESTAMP + INTERVAL '01:02' HOUR TO MINUTE\\n\"\n        + \"  AND __time < TIMESTAMP '2003-02-02 01:00:00' - INTERVAL '1 1' DAY TO HOUR - INTERVAL '1-1' YEAR TO MONTH\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Intervals.of(\"2000-01-01T01:02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":9569,"groupId":"101713","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilterOnCurrentTimestampWithIntervalArithmetic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testFilterOnCurrentTimestampWithIntervalArithmetic() throws Exception\n  {\n    testQuery(\n        \"SELECT COUNT(*) FROM druid.foo\\n\"\n        + \"WHERE\\n\"\n        + \"  __time >= CURRENT_TIMESTAMP + INTERVAL '01:02' HOUR TO MINUTE\\n\"\n        + \"  AND __time < TIMESTAMP '2003-02-02 01:00:00' - INTERVAL '1 1' DAY TO HOUR - INTERVAL '1-1' YEAR TO MONTH\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Intervals.of(\"2000-01-01T01:02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":9549,"status":"M"},{"authorDate":"2021-05-11 01:13:37","commitOrder":4,"curCode":"  public void testFilterOnCurrentTimestampOnView() throws Exception\n  {\n    testQuery(\n        \"SELECT * FROM view.bview\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Intervals.of(\"2000-01-02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":9657,"groupId":"101713","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterOnCurrentTimestampOnView","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testFilterOnCurrentTimestampOnView() throws Exception\n  {\n    testQuery(\n        \"SELECT * FROM view.bview\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE1)\n                  .intervals(querySegmentSpec(Intervals.of(\"2000-01-02/2002\")))\n                  .granularity(Granularities.ALL)\n                  .aggregators(aggregators(new CountAggregatorFactory(\"a0\")))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{5L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":9640,"status":"M"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
