[{"authorTime":"2019-07-12 12:43:46","codes":[{"authorDate":"2019-07-12 12:43:46","commitOrder":1,"curCode":"  public void testNextRowWithRawParseable()\n  {\n    final String data = PARSEABLE;\n    InlineFirehose target = create(data);\n    InputRowPlusRaw rowPlusRaw = target.nextRowWithRaw();\n\n    InputRow row = rowPlusRaw.getInputRow();\n    assertRowValue(VALUE_0, row);\n\n    byte[] raw = rowPlusRaw.getRaw();\n    assertRawValue(data, raw);\n\n    Assert.assertNull(rowPlusRaw.getParseException());\n  }\n","date":"2019-07-12 12:43:46","endLine":129,"groupId":"20492","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNextRowWithRawParseable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5e/3568bf2407026a461cb91510dd395bc969f28f.src","preCode":"  public void testNextRowWithRawParseable()\n  {\n    final String data = PARSEABLE;\n    InlineFirehose target = create(data);\n    InputRowPlusRaw rowPlusRaw = target.nextRowWithRaw();\n\n    InputRow row = rowPlusRaw.getInputRow();\n    assertRowValue(VALUE_0, row);\n\n    byte[] raw = rowPlusRaw.getRaw();\n    assertRawValue(data, raw);\n\n    Assert.assertNull(rowPlusRaw.getParseException());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/InlineFirehoseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2019-07-12 12:43:46","commitOrder":1,"curCode":"  public void testNextRowWithRawNotParseable()\n  {\n    final String data = NOT_PARSEABLE;\n    InlineFirehose target = create(data);\n    InputRowPlusRaw rowPlusRaw = target.nextRowWithRaw();\n\n    InputRow row = rowPlusRaw.getInputRow();\n    Assert.assertNull(row);\n\n    byte[] raw = rowPlusRaw.getRaw();\n    assertRawValue(data, raw);\n\n    Assert.assertNotNull(rowPlusRaw.getParseException());\n  }\n","date":"2019-07-12 12:43:46","endLine":145,"groupId":"20492","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNextRowWithRawNotParseable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5e/3568bf2407026a461cb91510dd395bc969f28f.src","preCode":"  public void testNextRowWithRawNotParseable()\n  {\n    final String data = NOT_PARSEABLE;\n    InlineFirehose target = create(data);\n    InputRowPlusRaw rowPlusRaw = target.nextRowWithRaw();\n\n    InputRow row = rowPlusRaw.getInputRow();\n    Assert.assertNull(row);\n\n    byte[] raw = rowPlusRaw.getRaw();\n    assertRawValue(data, raw);\n\n    Assert.assertNotNull(rowPlusRaw.getParseException());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/InlineFirehoseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"B"}],"commitId":"da3d141dd2c335590223e4dea1db2f307fa70851","commitMessage":"@@@Add inline firehose (#8056)\n\n* Add inline firehose\n\nTo allow users to quickly parsing and schema.  add a firehose that reads\ndata that is inlined in its spec.\n\n* Address review comments\n\n* Remove suppression of sonar warnings\n","date":"2019-07-12 12:43:46","modifiedFileCount":"1","status":"B","submitter":"Chi Cao Minh"},{"authorTime":"2019-11-16 01:22:09","codes":[{"authorDate":"2019-11-16 01:22:09","commitOrder":2,"curCode":"  public void testNextRowWithRawParseable()\n  {\n    final String data = PARSEABLE;\n    InlineFirehose target = create(data);\n    InputRowListPlusJson rowPlusRaw = target.nextRowWithRaw();\n\n    InputRow row = rowPlusRaw.getInputRow();\n    assertRowValue(VALUE_0, row);\n\n    byte[] raw = rowPlusRaw.getRaw();\n    assertRawValue(data, raw);\n\n    Assert.assertNull(rowPlusRaw.getParseException());\n  }\n","date":"2019-11-16 01:22:09","endLine":128,"groupId":"20492","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNextRowWithRawParseable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/61566aa060559719048cd03de0f32a763e88b3.src","preCode":"  public void testNextRowWithRawParseable()\n  {\n    final String data = PARSEABLE;\n    InlineFirehose target = create(data);\n    InputRowPlusRaw rowPlusRaw = target.nextRowWithRaw();\n\n    InputRow row = rowPlusRaw.getInputRow();\n    assertRowValue(VALUE_0, row);\n\n    byte[] raw = rowPlusRaw.getRaw();\n    assertRawValue(data, raw);\n\n    Assert.assertNull(rowPlusRaw.getParseException());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/InlineFirehoseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2019-11-16 01:22:09","commitOrder":2,"curCode":"  public void testNextRowWithRawNotParseable()\n  {\n    final String data = NOT_PARSEABLE;\n    InlineFirehose target = create(data);\n    InputRowListPlusJson rowPlusRaw = target.nextRowWithRaw();\n\n    InputRow row = rowPlusRaw.getInputRow();\n    Assert.assertNull(row);\n\n    byte[] raw = rowPlusRaw.getRaw();\n    assertRawValue(data, raw);\n\n    Assert.assertNotNull(rowPlusRaw.getParseException());\n  }\n","date":"2019-11-16 01:22:09","endLine":144,"groupId":"20492","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNextRowWithRawNotParseable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/61566aa060559719048cd03de0f32a763e88b3.src","preCode":"  public void testNextRowWithRawNotParseable()\n  {\n    final String data = NOT_PARSEABLE;\n    InlineFirehose target = create(data);\n    InputRowPlusRaw rowPlusRaw = target.nextRowWithRaw();\n\n    InputRow row = rowPlusRaw.getInputRow();\n    Assert.assertNull(row);\n\n    byte[] raw = rowPlusRaw.getRaw();\n    assertRawValue(data, raw);\n\n    Assert.assertNotNull(rowPlusRaw.getParseException());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/InlineFirehoseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"1611792855ad9def8b6f5b1375862d05d1acca0a","commitMessage":"@@@Add InputSource and InputFormat interfaces (#8823)\n\n* Add InputSource and InputFormat interfaces\n\n* revert orc dependency\n\n* fix dimension exclusions and failing unit tests\n\n* fix tests\n\n* fix test\n\n* fix test\n\n* fix firehose and inputSource for parallel indexing task\n\n* fix tc\n\n* fix tc: remove unused method\n\n* Formattable\n\n* add needsFormat(); renamed to ObjectSource; pass metricsName for reader\n\n* address comments\n\n* fix closing resource\n\n* fix checkstyle\n\n* fix tests\n\n* remove verify from csv\n\n* Revert \"remove verify from csv\"\n\nThis reverts commit 1ea7758489cc8c9d708bd691fd48e62085fd9455.\n\n* address comments\n\n* fix import order and javadoc\n\n* flatMap\n\n* sampleLine\n\n* Add IntermediateRowParsingReader\n\n* Address comments\n\n* move csv reader test\n\n* remove test for verify\n\n* adjust comments\n\n* Fix InputEntityIteratingReader\n\n* rename source -> entity\n\n* address comments\n","date":"2019-11-16 01:22:09","modifiedFileCount":"72","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-11-21 06:51:25","codes":[{"authorDate":"2019-11-21 06:51:25","commitOrder":3,"curCode":"  public void testNextRowWithRawParseable()\n  {\n    final String data = PARSEABLE;\n    InlineFirehose target = create(data);\n    InputRowListPlusRawValues rowPlusRaw = target.nextRowWithRaw();\n\n    InputRow row = Iterables.getOnlyElement(rowPlusRaw.getInputRows());\n    assertRowValue(VALUE_0, row);\n\n    Map<String, Object> raw = rowPlusRaw.getRawValues();\n    Map<String, Object> expected = new HashMap<>();\n    expected.put(\"timestamp\", TIMESTAMP_0);\n    expected.put(\"value\", VALUE_0);\n    Assert.assertEquals(expected, raw);\n\n    Assert.assertNull(rowPlusRaw.getParseException());\n  }\n","date":"2019-11-21 06:51:25","endLine":134,"groupId":"10189","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNextRowWithRawParseable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2a/717c566829cd4fee4171e625b3edca72b30971.src","preCode":"  public void testNextRowWithRawParseable()\n  {\n    final String data = PARSEABLE;\n    InlineFirehose target = create(data);\n    InputRowListPlusJson rowPlusRaw = target.nextRowWithRaw();\n\n    InputRow row = rowPlusRaw.getInputRow();\n    assertRowValue(VALUE_0, row);\n\n    byte[] raw = rowPlusRaw.getRaw();\n    assertRawValue(data, raw);\n\n    Assert.assertNull(rowPlusRaw.getParseException());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/InlineFirehoseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2019-11-21 06:51:25","commitOrder":3,"curCode":"  public void testNextRowWithRawNotParseable()\n  {\n    final String data = NOT_PARSEABLE;\n    InlineFirehose target = create(data);\n    InputRowListPlusRawValues rowPlusRaw = target.nextRowWithRaw();\n\n    Assert.assertNull(rowPlusRaw.getInputRows());\n\n    Map<String, Object> raw = rowPlusRaw.getRawValues();\n    Map<String, Object> expected = new HashMap<>();\n    expected.put(\"timestamp\", VALUE_0);\n    expected.put(\"value\", TIMESTAMP_0);\n    Assert.assertEquals(expected, raw);\n\n\n    Assert.assertNotNull(rowPlusRaw.getParseException());\n  }\n","date":"2019-11-21 06:51:25","endLine":153,"groupId":"10189","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNextRowWithRawNotParseable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2a/717c566829cd4fee4171e625b3edca72b30971.src","preCode":"  public void testNextRowWithRawNotParseable()\n  {\n    final String data = NOT_PARSEABLE;\n    InlineFirehose target = create(data);\n    InputRowListPlusJson rowPlusRaw = target.nextRowWithRaw();\n\n    InputRow row = rowPlusRaw.getInputRow();\n    Assert.assertNull(row);\n\n    byte[] raw = rowPlusRaw.getRaw();\n    assertRawValue(data, raw);\n\n    Assert.assertNotNull(rowPlusRaw.getParseException());\n  }\n","realPath":"server/src/test/java/org/apache/druid/segment/realtime/firehose/InlineFirehoseTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"ac6d703814ccb5b258c586b63e0bc33d669e0f57","commitMessage":"@@@Support inputFormat and inputSource for sampler (#8901)\n\n* Support inputFormat and inputSource for sampler\n\n* Cleanup javadocs and names\n\n* fix style\n\n* fix timed shutoff input source reader\n\n* fix timed shutoff input source reader again\n\n* tidy up timed shutoff reader\n\n* unused imports\n\n* fix tc\n","date":"2019-11-21 06:51:25","modifiedFileCount":"66","status":"M","submitter":"Jihoon Son"}]
