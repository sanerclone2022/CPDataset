[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testV1Serialization() throws Exception\n  {\n    ObjectMapper mapper = new DefaultObjectMapper();\n\n    final Interval interval = Intervals.of(\"2011-10-01/2011-10-02\");\n    final ImmutableMap<String, Object> loadSpec = ImmutableMap.of(\"something\", \"or_other\");\n\n    DataSegment segment = new DataSegment(\n        \"something\",\n        interval,\n        \"1\",\n        loadSpec,\n        Arrays.asList(\"dim1\", \"dim2\"),\n        Arrays.asList(\"met1\", \"met2\"),\n        NoneShardSpec.instance(),\n        IndexIO.CURRENT_VERSION_ID,\n        1\n    );\n\n    final SegmentChangeRequestLoad segmentDrop = new SegmentChangeRequestLoad(segment);\n\n    Map<String, Object> objectMap = mapper.readValue(\n        mapper.writeValueAsString(segmentDrop), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    Assert.assertEquals(11, objectMap.size());\n    Assert.assertEquals(\"load\", objectMap.get(\"action\"));\n    Assert.assertEquals(\"something\", objectMap.get(\"dataSource\"));\n    Assert.assertEquals(interval.toString(), objectMap.get(\"interval\"));\n    Assert.assertEquals(\"1\", objectMap.get(\"version\"));\n    Assert.assertEquals(loadSpec, objectMap.get(\"loadSpec\"));\n    Assert.assertEquals(\"dim1,dim2\", objectMap.get(\"dimensions\"));\n    Assert.assertEquals(\"met1,met2\", objectMap.get(\"metrics\"));\n    Assert.assertEquals(ImmutableMap.of(\"type\", \"none\"), objectMap.get(\"shardSpec\"));\n    Assert.assertEquals(IndexIO.CURRENT_VERSION_ID, objectMap.get(\"binaryVersion\"));\n    Assert.assertEquals(1, objectMap.get(\"size\"));\n  }\n","date":"2018-08-31 00:56:26","endLine":78,"groupId":"7177","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testV1Serialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/44/61fc0f3017454f2ed2204f0d2ee64270f4b776.src","preCode":"  public void testV1Serialization() throws Exception\n  {\n    ObjectMapper mapper = new DefaultObjectMapper();\n\n    final Interval interval = Intervals.of(\"2011-10-01/2011-10-02\");\n    final ImmutableMap<String, Object> loadSpec = ImmutableMap.of(\"something\", \"or_other\");\n\n    DataSegment segment = new DataSegment(\n        \"something\",\n        interval,\n        \"1\",\n        loadSpec,\n        Arrays.asList(\"dim1\", \"dim2\"),\n        Arrays.asList(\"met1\", \"met2\"),\n        NoneShardSpec.instance(),\n        IndexIO.CURRENT_VERSION_ID,\n        1\n    );\n\n    final SegmentChangeRequestLoad segmentDrop = new SegmentChangeRequestLoad(segment);\n\n    Map<String, Object> objectMap = mapper.readValue(\n        mapper.writeValueAsString(segmentDrop), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    Assert.assertEquals(11, objectMap.size());\n    Assert.assertEquals(\"load\", objectMap.get(\"action\"));\n    Assert.assertEquals(\"something\", objectMap.get(\"dataSource\"));\n    Assert.assertEquals(interval.toString(), objectMap.get(\"interval\"));\n    Assert.assertEquals(\"1\", objectMap.get(\"version\"));\n    Assert.assertEquals(loadSpec, objectMap.get(\"loadSpec\"));\n    Assert.assertEquals(\"dim1,dim2\", objectMap.get(\"dimensions\"));\n    Assert.assertEquals(\"met1,met2\", objectMap.get(\"metrics\"));\n    Assert.assertEquals(ImmutableMap.of(\"type\", \"none\"), objectMap.get(\"shardSpec\"));\n    Assert.assertEquals(IndexIO.CURRENT_VERSION_ID, objectMap.get(\"binaryVersion\"));\n    Assert.assertEquals(1, objectMap.get(\"size\"));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentChangeRequestLoadTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testV1Serialization() throws Exception\n  {\n    ObjectMapper mapper = new DefaultObjectMapper();\n\n    final Interval interval = Intervals.of(\"2011-10-01/2011-10-02\");\n    final ImmutableMap<String, Object> loadSpec = ImmutableMap.of(\"something\", \"or_other\");\n\n    DataSegment segment = new DataSegment(\n        \"something\",\n        interval,\n        \"1\",\n        loadSpec,\n        Arrays.asList(\"dim1\", \"dim2\"),\n        Arrays.asList(\"met1\", \"met2\"),\n        NoneShardSpec.instance(),\n        IndexIO.CURRENT_VERSION_ID,\n        1\n    );\n\n    final SegmentChangeRequestDrop segmentDrop = new SegmentChangeRequestDrop(segment);\n\n    Map<String, Object> objectMap = mapper.readValue(\n        mapper.writeValueAsString(segmentDrop), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    Assert.assertEquals(11, objectMap.size());\n    Assert.assertEquals(\"drop\", objectMap.get(\"action\"));\n    Assert.assertEquals(\"something\", objectMap.get(\"dataSource\"));\n    Assert.assertEquals(interval.toString(), objectMap.get(\"interval\"));\n    Assert.assertEquals(\"1\", objectMap.get(\"version\"));\n    Assert.assertEquals(loadSpec, objectMap.get(\"loadSpec\"));\n    Assert.assertEquals(\"dim1,dim2\", objectMap.get(\"dimensions\"));\n    Assert.assertEquals(\"met1,met2\", objectMap.get(\"metrics\"));\n    Assert.assertEquals(ImmutableMap.of(\"type\", \"none\"), objectMap.get(\"shardSpec\"));\n    Assert.assertEquals(IndexIO.CURRENT_VERSION_ID, objectMap.get(\"binaryVersion\"));\n    Assert.assertEquals(1, objectMap.get(\"size\"));\n  }\n","date":"2018-08-31 00:56:26","endLine":78,"groupId":"7177","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testV1Serialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c8/ad82422e753a2ac5aed516dcd09e456291978c.src","preCode":"  public void testV1Serialization() throws Exception\n  {\n    ObjectMapper mapper = new DefaultObjectMapper();\n\n    final Interval interval = Intervals.of(\"2011-10-01/2011-10-02\");\n    final ImmutableMap<String, Object> loadSpec = ImmutableMap.of(\"something\", \"or_other\");\n\n    DataSegment segment = new DataSegment(\n        \"something\",\n        interval,\n        \"1\",\n        loadSpec,\n        Arrays.asList(\"dim1\", \"dim2\"),\n        Arrays.asList(\"met1\", \"met2\"),\n        NoneShardSpec.instance(),\n        IndexIO.CURRENT_VERSION_ID,\n        1\n    );\n\n    final SegmentChangeRequestDrop segmentDrop = new SegmentChangeRequestDrop(segment);\n\n    Map<String, Object> objectMap = mapper.readValue(\n        mapper.writeValueAsString(segmentDrop), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    Assert.assertEquals(11, objectMap.size());\n    Assert.assertEquals(\"drop\", objectMap.get(\"action\"));\n    Assert.assertEquals(\"something\", objectMap.get(\"dataSource\"));\n    Assert.assertEquals(interval.toString(), objectMap.get(\"interval\"));\n    Assert.assertEquals(\"1\", objectMap.get(\"version\"));\n    Assert.assertEquals(loadSpec, objectMap.get(\"loadSpec\"));\n    Assert.assertEquals(\"dim1,dim2\", objectMap.get(\"dimensions\"));\n    Assert.assertEquals(\"met1,met2\", objectMap.get(\"metrics\"));\n    Assert.assertEquals(ImmutableMap.of(\"type\", \"none\"), objectMap.get(\"shardSpec\"));\n    Assert.assertEquals(IndexIO.CURRENT_VERSION_ID, objectMap.get(\"binaryVersion\"));\n    Assert.assertEquals(1, objectMap.get(\"size\"));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentChangeRequestDropTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-10-16 13:57:42","codes":[{"authorDate":"2019-10-16 13:57:42","commitOrder":2,"curCode":"  public void testV1Serialization() throws Exception\n  {\n    ObjectMapper mapper = new DefaultObjectMapper();\n\n    final Interval interval = Intervals.of(\"2011-10-01/2011-10-02\");\n    final ImmutableMap<String, Object> loadSpec = ImmutableMap.of(\"something\", \"or_other\");\n\n    DataSegment segment = new DataSegment(\n        \"something\",\n        interval,\n        \"1\",\n        loadSpec,\n        Arrays.asList(\"dim1\", \"dim2\"),\n        Arrays.asList(\"met1\", \"met2\"),\n        NoneShardSpec.instance(),\n        IndexIO.CURRENT_VERSION_ID,\n        1\n    );\n\n    final SegmentChangeRequestLoad segmentDrop = new SegmentChangeRequestLoad(segment);\n\n    Map<String, Object> objectMap = mapper.readValue(\n        mapper.writeValueAsString(segmentDrop), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    Assert.assertEquals(12, objectMap.size());\n    Assert.assertEquals(\"load\", objectMap.get(\"action\"));\n    Assert.assertEquals(\"something\", objectMap.get(\"dataSource\"));\n    Assert.assertEquals(interval.toString(), objectMap.get(\"interval\"));\n    Assert.assertEquals(\"1\", objectMap.get(\"version\"));\n    Assert.assertEquals(loadSpec, objectMap.get(\"loadSpec\"));\n    Assert.assertEquals(\"dim1,dim2\", objectMap.get(\"dimensions\"));\n    Assert.assertEquals(\"met1,met2\", objectMap.get(\"metrics\"));\n    Assert.assertEquals(ImmutableMap.of(\"type\", \"none\"), objectMap.get(\"shardSpec\"));\n    Assert.assertEquals(IndexIO.CURRENT_VERSION_ID, objectMap.get(\"binaryVersion\"));\n    Assert.assertEquals(1, objectMap.get(\"size\"));\n  }\n","date":"2019-10-16 13:57:42","endLine":78,"groupId":"7177","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testV1Serialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5f/80d8366468007de2aee1e1cd0093cf4b1ff769.src","preCode":"  public void testV1Serialization() throws Exception\n  {\n    ObjectMapper mapper = new DefaultObjectMapper();\n\n    final Interval interval = Intervals.of(\"2011-10-01/2011-10-02\");\n    final ImmutableMap<String, Object> loadSpec = ImmutableMap.of(\"something\", \"or_other\");\n\n    DataSegment segment = new DataSegment(\n        \"something\",\n        interval,\n        \"1\",\n        loadSpec,\n        Arrays.asList(\"dim1\", \"dim2\"),\n        Arrays.asList(\"met1\", \"met2\"),\n        NoneShardSpec.instance(),\n        IndexIO.CURRENT_VERSION_ID,\n        1\n    );\n\n    final SegmentChangeRequestLoad segmentDrop = new SegmentChangeRequestLoad(segment);\n\n    Map<String, Object> objectMap = mapper.readValue(\n        mapper.writeValueAsString(segmentDrop), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    Assert.assertEquals(11, objectMap.size());\n    Assert.assertEquals(\"load\", objectMap.get(\"action\"));\n    Assert.assertEquals(\"something\", objectMap.get(\"dataSource\"));\n    Assert.assertEquals(interval.toString(), objectMap.get(\"interval\"));\n    Assert.assertEquals(\"1\", objectMap.get(\"version\"));\n    Assert.assertEquals(loadSpec, objectMap.get(\"loadSpec\"));\n    Assert.assertEquals(\"dim1,dim2\", objectMap.get(\"dimensions\"));\n    Assert.assertEquals(\"met1,met2\", objectMap.get(\"metrics\"));\n    Assert.assertEquals(ImmutableMap.of(\"type\", \"none\"), objectMap.get(\"shardSpec\"));\n    Assert.assertEquals(IndexIO.CURRENT_VERSION_ID, objectMap.get(\"binaryVersion\"));\n    Assert.assertEquals(1, objectMap.get(\"size\"));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentChangeRequestLoadTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2019-10-16 13:57:42","commitOrder":2,"curCode":"  public void testV1Serialization() throws Exception\n  {\n    ObjectMapper mapper = new DefaultObjectMapper();\n\n    final Interval interval = Intervals.of(\"2011-10-01/2011-10-02\");\n    final ImmutableMap<String, Object> loadSpec = ImmutableMap.of(\"something\", \"or_other\");\n\n    DataSegment segment = new DataSegment(\n        \"something\",\n        interval,\n        \"1\",\n        loadSpec,\n        Arrays.asList(\"dim1\", \"dim2\"),\n        Arrays.asList(\"met1\", \"met2\"),\n        NoneShardSpec.instance(),\n        IndexIO.CURRENT_VERSION_ID,\n        1\n    );\n\n    final SegmentChangeRequestDrop segmentDrop = new SegmentChangeRequestDrop(segment);\n\n    Map<String, Object> objectMap = mapper.readValue(\n        mapper.writeValueAsString(segmentDrop),\n        JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    Assert.assertEquals(12, objectMap.size());\n    Assert.assertEquals(\"drop\", objectMap.get(\"action\"));\n    Assert.assertEquals(\"something\", objectMap.get(\"dataSource\"));\n    Assert.assertEquals(interval.toString(), objectMap.get(\"interval\"));\n    Assert.assertEquals(\"1\", objectMap.get(\"version\"));\n    Assert.assertEquals(loadSpec, objectMap.get(\"loadSpec\"));\n    Assert.assertEquals(\"dim1,dim2\", objectMap.get(\"dimensions\"));\n    Assert.assertEquals(\"met1,met2\", objectMap.get(\"metrics\"));\n    Assert.assertEquals(ImmutableMap.of(\"type\", \"none\"), objectMap.get(\"shardSpec\"));\n    Assert.assertEquals(IndexIO.CURRENT_VERSION_ID, objectMap.get(\"binaryVersion\"));\n    Assert.assertEquals(1, objectMap.get(\"size\"));\n  }\n","date":"2019-10-16 13:57:42","endLine":79,"groupId":"7177","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testV1Serialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/85/c8838b3c636dd86e150c3ce85280a7a0473be0.src","preCode":"  public void testV1Serialization() throws Exception\n  {\n    ObjectMapper mapper = new DefaultObjectMapper();\n\n    final Interval interval = Intervals.of(\"2011-10-01/2011-10-02\");\n    final ImmutableMap<String, Object> loadSpec = ImmutableMap.of(\"something\", \"or_other\");\n\n    DataSegment segment = new DataSegment(\n        \"something\",\n        interval,\n        \"1\",\n        loadSpec,\n        Arrays.asList(\"dim1\", \"dim2\"),\n        Arrays.asList(\"met1\", \"met2\"),\n        NoneShardSpec.instance(),\n        IndexIO.CURRENT_VERSION_ID,\n        1\n    );\n\n    final SegmentChangeRequestDrop segmentDrop = new SegmentChangeRequestDrop(segment);\n\n    Map<String, Object> objectMap = mapper.readValue(\n        mapper.writeValueAsString(segmentDrop),\n        JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    Assert.assertEquals(11, objectMap.size());\n    Assert.assertEquals(\"drop\", objectMap.get(\"action\"));\n    Assert.assertEquals(\"something\", objectMap.get(\"dataSource\"));\n    Assert.assertEquals(interval.toString(), objectMap.get(\"interval\"));\n    Assert.assertEquals(\"1\", objectMap.get(\"version\"));\n    Assert.assertEquals(loadSpec, objectMap.get(\"loadSpec\"));\n    Assert.assertEquals(\"dim1,dim2\", objectMap.get(\"dimensions\"));\n    Assert.assertEquals(\"met1,met2\", objectMap.get(\"metrics\"));\n    Assert.assertEquals(ImmutableMap.of(\"type\", \"none\"), objectMap.get(\"shardSpec\"));\n    Assert.assertEquals(IndexIO.CURRENT_VERSION_ID, objectMap.get(\"binaryVersion\"));\n    Assert.assertEquals(1, objectMap.get(\"size\"));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentChangeRequestDropTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"4046c86d62192c812cea87188dd17e745fb83b04","commitMessage":"@@@Stateful auto compaction (#8573)\n\n* Stateful auto compaction\n\n* javaodc\n\n* add removed test back\n\n* fix test\n\n* adding indexSpec to compactionState\n\n* fix build\n\n* add lastCompactionState\n\n* address comments\n\n* extract CompactionState\n\n* fix doc\n\n* fix build and test\n\n* Add a task context to store compaction state; add javadoc\n\n* fix it test\n","date":"2019-10-16 13:57:42","modifiedFileCount":"69","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-11-20 05:57:58","codes":[{"authorDate":"2019-11-20 05:57:58","commitOrder":3,"curCode":"  public void testV1Serialization() throws Exception\n  {\n    ObjectMapper mapper = new DefaultObjectMapper();\n\n    final Interval interval = Intervals.of(\"2011-10-01/2011-10-02\");\n    final ImmutableMap<String, Object> loadSpec = ImmutableMap.of(\"something\", \"or_other\");\n\n    DataSegment segment = new DataSegment(\n        \"something\",\n        interval,\n        \"1\",\n        loadSpec,\n        Arrays.asList(\"dim1\", \"dim2\"),\n        Arrays.asList(\"met1\", \"met2\"),\n        NoneShardSpec.instance(),\n        IndexIO.CURRENT_VERSION_ID,\n        1\n    );\n\n    final SegmentChangeRequestLoad segmentDrop = new SegmentChangeRequestLoad(segment);\n\n    Map<String, Object> objectMap = mapper.readValue(\n        mapper.writeValueAsString(segmentDrop), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    Assert.assertEquals(11, objectMap.size());\n    Assert.assertEquals(\"load\", objectMap.get(\"action\"));\n    Assert.assertEquals(\"something\", objectMap.get(\"dataSource\"));\n    Assert.assertEquals(interval.toString(), objectMap.get(\"interval\"));\n    Assert.assertEquals(\"1\", objectMap.get(\"version\"));\n    Assert.assertEquals(loadSpec, objectMap.get(\"loadSpec\"));\n    Assert.assertEquals(\"dim1,dim2\", objectMap.get(\"dimensions\"));\n    Assert.assertEquals(\"met1,met2\", objectMap.get(\"metrics\"));\n    Assert.assertEquals(ImmutableMap.of(\"type\", \"none\"), objectMap.get(\"shardSpec\"));\n    Assert.assertEquals(IndexIO.CURRENT_VERSION_ID, objectMap.get(\"binaryVersion\"));\n    Assert.assertEquals(1, objectMap.get(\"size\"));\n  }\n","date":"2019-11-20 05:57:58","endLine":78,"groupId":"10692","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testV1Serialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d1/65e3480f5263bc5e5b6d891b565eb4d465fdd1.src","preCode":"  public void testV1Serialization() throws Exception\n  {\n    ObjectMapper mapper = new DefaultObjectMapper();\n\n    final Interval interval = Intervals.of(\"2011-10-01/2011-10-02\");\n    final ImmutableMap<String, Object> loadSpec = ImmutableMap.of(\"something\", \"or_other\");\n\n    DataSegment segment = new DataSegment(\n        \"something\",\n        interval,\n        \"1\",\n        loadSpec,\n        Arrays.asList(\"dim1\", \"dim2\"),\n        Arrays.asList(\"met1\", \"met2\"),\n        NoneShardSpec.instance(),\n        IndexIO.CURRENT_VERSION_ID,\n        1\n    );\n\n    final SegmentChangeRequestLoad segmentDrop = new SegmentChangeRequestLoad(segment);\n\n    Map<String, Object> objectMap = mapper.readValue(\n        mapper.writeValueAsString(segmentDrop), JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    Assert.assertEquals(12, objectMap.size());\n    Assert.assertEquals(\"load\", objectMap.get(\"action\"));\n    Assert.assertEquals(\"something\", objectMap.get(\"dataSource\"));\n    Assert.assertEquals(interval.toString(), objectMap.get(\"interval\"));\n    Assert.assertEquals(\"1\", objectMap.get(\"version\"));\n    Assert.assertEquals(loadSpec, objectMap.get(\"loadSpec\"));\n    Assert.assertEquals(\"dim1,dim2\", objectMap.get(\"dimensions\"));\n    Assert.assertEquals(\"met1,met2\", objectMap.get(\"metrics\"));\n    Assert.assertEquals(ImmutableMap.of(\"type\", \"none\"), objectMap.get(\"shardSpec\"));\n    Assert.assertEquals(IndexIO.CURRENT_VERSION_ID, objectMap.get(\"binaryVersion\"));\n    Assert.assertEquals(1, objectMap.get(\"size\"));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentChangeRequestLoadTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2019-11-20 05:57:58","commitOrder":3,"curCode":"  public void testV1Serialization() throws Exception\n  {\n    ObjectMapper mapper = new DefaultObjectMapper();\n\n    final Interval interval = Intervals.of(\"2011-10-01/2011-10-02\");\n    final ImmutableMap<String, Object> loadSpec = ImmutableMap.of(\"something\", \"or_other\");\n\n    DataSegment segment = new DataSegment(\n        \"something\",\n        interval,\n        \"1\",\n        loadSpec,\n        Arrays.asList(\"dim1\", \"dim2\"),\n        Arrays.asList(\"met1\", \"met2\"),\n        NoneShardSpec.instance(),\n        IndexIO.CURRENT_VERSION_ID,\n        1\n    );\n\n    final SegmentChangeRequestDrop segmentDrop = new SegmentChangeRequestDrop(segment);\n\n    Map<String, Object> objectMap = mapper.readValue(\n        mapper.writeValueAsString(segmentDrop),\n        JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    Assert.assertEquals(11, objectMap.size());\n    Assert.assertEquals(\"drop\", objectMap.get(\"action\"));\n    Assert.assertEquals(\"something\", objectMap.get(\"dataSource\"));\n    Assert.assertEquals(interval.toString(), objectMap.get(\"interval\"));\n    Assert.assertEquals(\"1\", objectMap.get(\"version\"));\n    Assert.assertEquals(loadSpec, objectMap.get(\"loadSpec\"));\n    Assert.assertEquals(\"dim1,dim2\", objectMap.get(\"dimensions\"));\n    Assert.assertEquals(\"met1,met2\", objectMap.get(\"metrics\"));\n    Assert.assertEquals(ImmutableMap.of(\"type\", \"none\"), objectMap.get(\"shardSpec\"));\n    Assert.assertEquals(IndexIO.CURRENT_VERSION_ID, objectMap.get(\"binaryVersion\"));\n    Assert.assertEquals(1, objectMap.get(\"size\"));\n  }\n","date":"2019-11-20 05:57:58","endLine":79,"groupId":"10692","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testV1Serialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fb/1cd69a144a5163407cab49cd261a7024db4a1d.src","preCode":"  public void testV1Serialization() throws Exception\n  {\n    ObjectMapper mapper = new DefaultObjectMapper();\n\n    final Interval interval = Intervals.of(\"2011-10-01/2011-10-02\");\n    final ImmutableMap<String, Object> loadSpec = ImmutableMap.of(\"something\", \"or_other\");\n\n    DataSegment segment = new DataSegment(\n        \"something\",\n        interval,\n        \"1\",\n        loadSpec,\n        Arrays.asList(\"dim1\", \"dim2\"),\n        Arrays.asList(\"met1\", \"met2\"),\n        NoneShardSpec.instance(),\n        IndexIO.CURRENT_VERSION_ID,\n        1\n    );\n\n    final SegmentChangeRequestDrop segmentDrop = new SegmentChangeRequestDrop(segment);\n\n    Map<String, Object> objectMap = mapper.readValue(\n        mapper.writeValueAsString(segmentDrop),\n        JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n    );\n\n    Assert.assertEquals(12, objectMap.size());\n    Assert.assertEquals(\"drop\", objectMap.get(\"action\"));\n    Assert.assertEquals(\"something\", objectMap.get(\"dataSource\"));\n    Assert.assertEquals(interval.toString(), objectMap.get(\"interval\"));\n    Assert.assertEquals(\"1\", objectMap.get(\"version\"));\n    Assert.assertEquals(loadSpec, objectMap.get(\"loadSpec\"));\n    Assert.assertEquals(\"dim1,dim2\", objectMap.get(\"dimensions\"));\n    Assert.assertEquals(\"met1,met2\", objectMap.get(\"metrics\"));\n    Assert.assertEquals(ImmutableMap.of(\"type\", \"none\"), objectMap.get(\"shardSpec\"));\n    Assert.assertEquals(IndexIO.CURRENT_VERSION_ID, objectMap.get(\"binaryVersion\"));\n    Assert.assertEquals(1, objectMap.get(\"size\"));\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordination/SegmentChangeRequestDropTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"c44452f0c1b051b03343d8bb479828f01461d68f","commitMessage":"@@@Tidy up lifecycle.  query.  and ingestion logging. (#8889)\n\n* Tidy up lifecycle.  query.  and ingestion logging.\n\nThe goal of this patch is to improve the clarity and usefulness of\nDruid's logging for cluster operators. For more information.  see\nhttps://twitter.com/cowtowncoder/status/1195469299814555648.\n\nConcretely.  this patch does the following:\n\n- Changes a lot of INFO logs to DEBUG.  and DEBUG to TRACE.  with the\n  goal of reducing redundancy and improving clarity by avoiding\n  showing rarely-useful log messages. This includes most \"starting\"\n  and \"stopping\" messages.  and most messages related to individual\n  columns.\n- Adds new log4j2 templates that show operators how to enabled DEBUG\n  logging for certain important packages.\n- Eliminate stack traces for query errors.  unless log level is DEBUG\n  or more. This is useful because query errors often indicate user\n  error rather than system error.  but dumping stack trace often gave\n  operators the impression that there was a system failure.\n- Adds task id to Appenderator.  AppenderatorDriver thread names. In\n  the default log4j2 configuration.  this will put them in log lines\n  as well. It's very useful if a user is using the Indexer.  where\n  multiple tasks run in the same JVM.\n- More consistent terminology when it comes to \"sequences\" (sets of\n  segments that are handed-off together by Kafka ingestion) and\n  \"offsets\" (cursors in partitions). These terms had been confused in\n  some log messages due to the fact that Kinesis calls offsets\n  \"sequence numbers\".\n- Replaces some ugly toString calls with either the JSONification or\n  something more operator-accessible (like a URL or segment identifier. \n  instead of JSON object representing the same).\n\n* Adjustments.\n\n* Adjust integration test.\n","date":"2019-11-20 05:57:58","modifiedFileCount":"101","status":"M","submitter":"Gian Merlino"}]
