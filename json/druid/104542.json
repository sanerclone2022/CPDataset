[{"authorTime":"2021-02-12 19:03:20","codes":[{"authorDate":"2021-03-03 03:23:52","commitOrder":7,"curCode":"  public void testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .granularitySpec(new ClientCompactionTaskGranularitySpec(null, null))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","date":"2021-03-03 03:23:52","endLine":765,"groupId":"1002","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/95/f0aaf16c738625235a79dcd2e058222d681b19.src","preCode":"  public void testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .granularitySpec(new ClientCompactionTaskGranularitySpec(null, null))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":724,"status":"B"},{"authorDate":"2021-02-12 19:03:20","commitOrder":7,"curCode":"  public void testRunRegularIndexTaskWithIngestSegmentFirehose() throws Exception\n  {\n    runIndexTask();\n\n    IndexTask indexTask = new IndexTask(\n        null,\n        null,\n        new IndexTask.IndexIngestionSpec(\n            new DataSchema(\n                \"test\",\n                getObjectMapper().convertValue(\n                    new StringInputRowParser(\n                        DEFAULT_PARSE_SPEC,\n                        null\n                    ),\n                    Map.class\n                ),\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"val\", \"val\")\n                },\n                new UniformGranularitySpec(\n                    Granularities.HOUR,\n                    Granularities.MINUTE,\n                    null\n                ),\n                null,\n                getObjectMapper()\n            ),\n            new IndexTask.IndexIOConfig(\n                new IngestSegmentFirehoseFactory(\n                    DATA_SOURCE,\n                    Intervals.of(\"2014-01-01/2014-01-02\"),\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    getIndexIO(),\n                    coordinatorClient,\n                    segmentLoaderFactory,\n                    RETRY_POLICY_FACTORY\n                ),\n                false\n            ),\n            IndexTaskTest.createTuningConfig(5000000, null, null, Long.MAX_VALUE, null, false, true)\n        ),\n        null\n    );\n\n    \r\n    indexTask.addToContext(Tasks.STORE_COMPACTION_STATE_KEY, true);\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(indexTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of()),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","date":"2021-02-12 19:03:20","endLine":835,"groupId":"347","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunRegularIndexTaskWithIngestSegmentFirehose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bd/1f8193417da8de9a1df24dcc6cc87448fa70ad.src","preCode":"  public void testRunRegularIndexTaskWithIngestSegmentFirehose() throws Exception\n  {\n    runIndexTask();\n\n    IndexTask indexTask = new IndexTask(\n        null,\n        null,\n        new IndexTask.IndexIngestionSpec(\n            new DataSchema(\n                \"test\",\n                getObjectMapper().convertValue(\n                    new StringInputRowParser(\n                        DEFAULT_PARSE_SPEC,\n                        null\n                    ),\n                    Map.class\n                ),\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"val\", \"val\")\n                },\n                new UniformGranularitySpec(\n                    Granularities.HOUR,\n                    Granularities.MINUTE,\n                    null\n                ),\n                null,\n                getObjectMapper()\n            ),\n            new IndexTask.IndexIOConfig(\n                new IngestSegmentFirehoseFactory(\n                    DATA_SOURCE,\n                    Intervals.of(\"2014-01-01/2014-01-02\"),\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    getIndexIO(),\n                    coordinatorClient,\n                    segmentLoaderFactory,\n                    RETRY_POLICY_FACTORY\n                ),\n                false\n            ),\n            IndexTaskTest.createTuningConfig(5000000, null, null, Long.MAX_VALUE, null, false, true)\n        ),\n        null\n    );\n\n    \r\n    indexTask.addToContext(Tasks.STORE_COMPACTION_STATE_KEY, true);\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(indexTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of()),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":758,"status":"NB"}],"commitId":"b7b0ee83627dd7887392e8f9d6fb5cb29465c28c","commitMessage":"@@@Add query granularity to compaction task (#10900)\n\n* add query granularity to compaction task\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix test\n\n* fix test\n\n* add tests\n\n* fix test\n\n* fix test\n\n* cleanup\n\n* rename class\n\n* fix test\n\n* fix test\n\n* add test\n\n* fix test","date":"2021-03-03 03:23:52","modifiedFileCount":"15","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-04-02 03:29:36","codes":[{"authorDate":"2021-03-03 03:23:52","commitOrder":8,"curCode":"  public void testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .granularitySpec(new ClientCompactionTaskGranularitySpec(null, null))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","date":"2021-03-03 03:23:52","endLine":765,"groupId":"1002","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/95/f0aaf16c738625235a79dcd2e058222d681b19.src","preCode":"  public void testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .granularitySpec(new ClientCompactionTaskGranularitySpec(null, null))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":724,"status":"N"},{"authorDate":"2021-04-02 03:29:36","commitOrder":8,"curCode":"  public void testRunRegularIndexTaskWithIngestSegmentFirehose() throws Exception\n  {\n    runIndexTask();\n\n    IndexTask indexTask = new IndexTask(\n        null,\n        null,\n        new IndexTask.IndexIngestionSpec(\n            new DataSchema(\n                \"test\",\n                getObjectMapper().convertValue(\n                    new StringInputRowParser(\n                        DEFAULT_PARSE_SPEC,\n                        null\n                    ),\n                    Map.class\n                ),\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"val\", \"val\")\n                },\n                new UniformGranularitySpec(\n                    Granularities.HOUR,\n                    Granularities.MINUTE,\n                    null\n                ),\n                null,\n                getObjectMapper()\n            ),\n            new IndexTask.IndexIOConfig(\n                new IngestSegmentFirehoseFactory(\n                    DATA_SOURCE,\n                    Intervals.of(\"2014-01-01/2014-01-02\"),\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    getIndexIO(),\n                    coordinatorClient,\n                    segmentLoaderFactory,\n                    RETRY_POLICY_FACTORY\n                ),\n                false,\n                false\n            ),\n            IndexTaskTest.createTuningConfig(5000000, null, null, Long.MAX_VALUE, null, false, true)\n        ),\n        null\n    );\n\n    \r\n    indexTask.addToContext(Tasks.STORE_COMPACTION_STATE_KEY, true);\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(indexTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of()),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","date":"2021-04-02 03:29:36","endLine":1118,"groupId":"1002","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunRegularIndexTaskWithIngestSegmentFirehose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5e/adc388db0fe75139a0f090c512cc468d184578.src","preCode":"  public void testRunRegularIndexTaskWithIngestSegmentFirehose() throws Exception\n  {\n    runIndexTask();\n\n    IndexTask indexTask = new IndexTask(\n        null,\n        null,\n        new IndexTask.IndexIngestionSpec(\n            new DataSchema(\n                \"test\",\n                getObjectMapper().convertValue(\n                    new StringInputRowParser(\n                        DEFAULT_PARSE_SPEC,\n                        null\n                    ),\n                    Map.class\n                ),\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"val\", \"val\")\n                },\n                new UniformGranularitySpec(\n                    Granularities.HOUR,\n                    Granularities.MINUTE,\n                    null\n                ),\n                null,\n                getObjectMapper()\n            ),\n            new IndexTask.IndexIOConfig(\n                new IngestSegmentFirehoseFactory(\n                    DATA_SOURCE,\n                    Intervals.of(\"2014-01-01/2014-01-02\"),\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    getIndexIO(),\n                    coordinatorClient,\n                    segmentLoaderFactory,\n                    RETRY_POLICY_FACTORY\n                ),\n                false\n            ),\n            IndexTaskTest.createTuningConfig(5000000, null, null, Long.MAX_VALUE, null, false, true)\n        ),\n        null\n    );\n\n    \r\n    indexTask.addToContext(Tasks.STORE_COMPACTION_STATE_KEY, true);\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(indexTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of()),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1040,"status":"M"}],"commitId":"d7f529336463dad273a742808b49d524bdc4ae11","commitMessage":"@@@Add an option for ingestion task to drop (mark unused) all existing segments that are contained by interval in the ingestionSpec (#11025)\n\n* Auto-Compaction can run indefinitely when segmentGranularity is changed from coarser to finer.\n\n* Add option to drop segments after ingestion\n\n* fix checkstyle\n\n* add tests\n\n* add tests\n\n* add tests\n\n* fix test\n\n* add tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add docs\n\n* fix docs\n\n* address comments\n\n* address comments\n\n* fix spelling","date":"2021-04-02 03:29:36","modifiedFileCount":"44","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-07-21 02:44:19","codes":[{"authorDate":"2021-07-21 02:44:19","commitOrder":9,"curCode":"  public void testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentCacheManagerFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .granularitySpec(new ClientCompactionTaskGranularitySpec(null, null))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","date":"2021-07-21 02:44:19","endLine":769,"groupId":"104542","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b6/098ea9854c6e2a2db0c789a1b7ff67c3239486.src","preCode":"  public void testWithGranularitySpecNullQueryGranularityAndNullSegmentGranularity() throws Exception\n  {\n    runIndexTask();\n\n    final Builder builder = new Builder(\n        DATA_SOURCE,\n        segmentLoaderFactory,\n        RETRY_POLICY_FACTORY\n    );\n\n    final CompactionTask compactionTask1 = builder\n        .interval(Intervals.of(\"2014-01-01/2014-01-02\"))\n        .granularitySpec(new ClientCompactionTaskGranularitySpec(null, null))\n        .build();\n\n    Pair<TaskStatus, List<DataSegment>> resultPair = runTask(compactionTask1);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    List<DataSegment> segments = resultPair.rhs;\n\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of(Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1))),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":728,"status":"M"},{"authorDate":"2021-07-21 02:44:19","commitOrder":9,"curCode":"  public void testRunRegularIndexTaskWithIngestSegmentFirehose() throws Exception\n  {\n    runIndexTask();\n\n    IndexTask indexTask = new IndexTask(\n        null,\n        null,\n        new IndexTask.IndexIngestionSpec(\n            new DataSchema(\n                \"test\",\n                getObjectMapper().convertValue(\n                    new StringInputRowParser(\n                        DEFAULT_PARSE_SPEC,\n                        null\n                    ),\n                    Map.class\n                ),\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"val\", \"val\")\n                },\n                new UniformGranularitySpec(\n                    Granularities.HOUR,\n                    Granularities.MINUTE,\n                    null\n                ),\n                null,\n                getObjectMapper()\n            ),\n            new IndexTask.IndexIOConfig(\n                new IngestSegmentFirehoseFactory(\n                    DATA_SOURCE,\n                    Intervals.of(\"2014-01-01/2014-01-02\"),\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    getIndexIO(),\n                    coordinatorClient,\n                    segmentCacheManagerFactory,\n                    RETRY_POLICY_FACTORY\n                ),\n                false,\n                false\n            ),\n            IndexTaskTest.createTuningConfig(5000000, null, null, Long.MAX_VALUE, null, false, true)\n        ),\n        null\n    );\n\n    \r\n    indexTask.addToContext(Tasks.STORE_COMPACTION_STATE_KEY, true);\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(indexTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of()),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","date":"2021-07-21 02:44:19","endLine":1196,"groupId":"104542","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunRegularIndexTaskWithIngestSegmentFirehose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b6/098ea9854c6e2a2db0c789a1b7ff67c3239486.src","preCode":"  public void testRunRegularIndexTaskWithIngestSegmentFirehose() throws Exception\n  {\n    runIndexTask();\n\n    IndexTask indexTask = new IndexTask(\n        null,\n        null,\n        new IndexTask.IndexIngestionSpec(\n            new DataSchema(\n                \"test\",\n                getObjectMapper().convertValue(\n                    new StringInputRowParser(\n                        DEFAULT_PARSE_SPEC,\n                        null\n                    ),\n                    Map.class\n                ),\n                new AggregatorFactory[]{\n                    new LongSumAggregatorFactory(\"val\", \"val\")\n                },\n                new UniformGranularitySpec(\n                    Granularities.HOUR,\n                    Granularities.MINUTE,\n                    null\n                ),\n                null,\n                getObjectMapper()\n            ),\n            new IndexTask.IndexIOConfig(\n                new IngestSegmentFirehoseFactory(\n                    DATA_SOURCE,\n                    Intervals.of(\"2014-01-01/2014-01-02\"),\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    getIndexIO(),\n                    coordinatorClient,\n                    segmentLoaderFactory,\n                    RETRY_POLICY_FACTORY\n                ),\n                false,\n                false\n            ),\n            IndexTaskTest.createTuningConfig(5000000, null, null, Long.MAX_VALUE, null, false, true)\n        ),\n        null\n    );\n\n    \r\n    indexTask.addToContext(Tasks.STORE_COMPACTION_STATE_KEY, true);\n\n    final Pair<TaskStatus, List<DataSegment>> resultPair = runTask(indexTask);\n\n    Assert.assertTrue(resultPair.lhs.isSuccess());\n\n    final List<DataSegment> segments = resultPair.rhs;\n    Assert.assertEquals(3, segments.size());\n\n    for (int i = 0; i < 3; i++) {\n      Assert.assertEquals(\n          Intervals.of(\"2014-01-01T0%d:00:00/2014-01-01T0%d:00:00\", i, i + 1),\n          segments.get(i).getInterval()\n      );\n      Assert.assertEquals(\n          getDefaultCompactionState(Granularities.HOUR, Granularities.MINUTE, ImmutableList.of()),\n          segments.get(i).getLastCompactionState()\n      );\n      if (lockGranularity == LockGranularity.SEGMENT) {\n        Assert.assertEquals(\n            new NumberedOverwriteShardSpec(32768, 0, 2, (short) 1, (short) 1),\n            segments.get(i).getShardSpec()\n        );\n      } else {\n        Assert.assertEquals(new NumberedShardSpec(0, 1), segments.get(i).getShardSpec());\n      }\n    }\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskRunTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1118,"status":"M"}],"commitId":"94c1671eaf7b050972602fdedcb1971cdbde692d","commitMessage":"@@@Split SegmentLoader into SegmentLoader and SegmentCacheManager (#11466)\n\nThis PR splits current SegmentLoader into SegmentLoader and SegmentCacheManager.\n\nSegmentLoader - this class is responsible for building the segment object but does not expose any methods for downloading.  cache space management.  etc. Default implementation delegates the download operations to SegmentCacheManager and only contains the logic for building segments once downloaded. . This class will be used in SegmentManager to construct Segment objects.\n\nSegmentCacheManager - this class manages the segment cache on the local disk. It fetches the segment files to the local disk.  can clean up the cache.  and in the future.  support reserve and release on cache space. [See https://github.com/Make SegmentLoader extensible and customizable #11398]. This class will be used in ingestion tasks such as compaction.  re-indexing where segment files need to be downloaded locally.","date":"2021-07-21 02:44:19","modifiedFileCount":"41","status":"M","submitter":"Abhishek Agarwal"}]
