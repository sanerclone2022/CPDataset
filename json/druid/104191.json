[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSpecGetHistory()\n  {\n    List<VersionedSupervisorSpec> versions1 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource1\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions2 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource2\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        )\n    );\n    Map<String, List<VersionedSupervisorSpec>> history = Maps.newHashMap();\n    history.put(\"id1\", versions1);\n    history.put(\"id2\", versions2);\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager)).times(3);\n    EasyMock.expect(supervisorManager.getSupervisorHistory()).andReturn(history).times(3);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetHistory(request, \"id1\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions1, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id2\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions2, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id3\");\n\n    Assert.assertEquals(404, response.getStatus());\n\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.absent());\n    replayAll();\n\n    response = supervisorResource.specGetHistory(request, \"id1\");\n    verifyAll();\n\n    Assert.assertEquals(503, response.getStatus());\n  }\n","date":"2018-08-31 00:56:26","endLine":585,"groupId":"17304","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpecGetHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a3/434bc451810fc622d065708464a71fe90b9ca1.src","preCode":"  public void testSpecGetHistory()\n  {\n    List<VersionedSupervisorSpec> versions1 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource1\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions2 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource2\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        )\n    );\n    Map<String, List<VersionedSupervisorSpec>> history = Maps.newHashMap();\n    history.put(\"id1\", versions1);\n    history.put(\"id2\", versions2);\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager)).times(3);\n    EasyMock.expect(supervisorManager.getSupervisorHistory()).andReturn(history).times(3);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetHistory(request, \"id1\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions1, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id2\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions2, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id3\");\n\n    Assert.assertEquals(404, response.getStatus());\n\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.absent());\n    replayAll();\n\n    response = supervisorResource.specGetHistory(request, \"id1\");\n    verifyAll();\n\n    Assert.assertEquals(503, response.getStatus());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":517,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSpecGetHistoryWithAuthFailure() throws Exception\n  {\n    List<VersionedSupervisorSpec> versions1 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions2 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource2\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions3 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, null),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, null),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n            \"v2\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n            \"tombstone\"\n        )\n    );\n    Map<String, List<VersionedSupervisorSpec>> history = Maps.newHashMap();\n    history.put(\"id1\", versions1);\n    history.put(\"id2\", versions2);\n    history.put(\"id3\", versions3);\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager)).times(4);\n    EasyMock.expect(supervisorManager.getSupervisorHistory()).andReturn(history).times(4);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"notdruid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetHistory(request, \"id1\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions1, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id2\");\n\n    \r\n    Assert.assertEquals(404, response.getStatus());\n\n    response = supervisorResource.specGetHistory(request, \"id3\");\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new VersionedSupervisorSpec(\n                new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n                \"v1\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, null),\n                \"tombstone\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, null),\n                \"tombstone\"\n            ),\n            new VersionedSupervisorSpec(\n                new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n                \"v2\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n                \"tombstone\"\n            )\n        ),\n        response.getEntity()\n    );\n\n    response = supervisorResource.specGetHistory(request, \"id4\");\n    Assert.assertEquals(404, response.getStatus());\n\n\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.absent());\n    replayAll();\n\n    response = supervisorResource.specGetHistory(request, \"id1\");\n    verifyAll();\n\n    Assert.assertEquals(503, response.getStatus());\n  }\n","date":"2018-08-31 00:56:26","endLine":711,"groupId":"9016","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpecGetHistoryWithAuthFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a3/434bc451810fc622d065708464a71fe90b9ca1.src","preCode":"  public void testSpecGetHistoryWithAuthFailure() throws Exception\n  {\n    List<VersionedSupervisorSpec> versions1 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions2 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource2\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions3 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, null),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, null),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n            \"v2\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n            \"tombstone\"\n        )\n    );\n    Map<String, List<VersionedSupervisorSpec>> history = Maps.newHashMap();\n    history.put(\"id1\", versions1);\n    history.put(\"id2\", versions2);\n    history.put(\"id3\", versions3);\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager)).times(4);\n    EasyMock.expect(supervisorManager.getSupervisorHistory()).andReturn(history).times(4);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"notdruid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetHistory(request, \"id1\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions1, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id2\");\n\n    \r\n    Assert.assertEquals(404, response.getStatus());\n\n    response = supervisorResource.specGetHistory(request, \"id3\");\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new VersionedSupervisorSpec(\n                new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n                \"v1\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, null),\n                \"tombstone\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, null),\n                \"tombstone\"\n            ),\n            new VersionedSupervisorSpec(\n                new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n                \"v2\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n                \"tombstone\"\n            )\n        ),\n        response.getEntity()\n    );\n\n    response = supervisorResource.specGetHistory(request, \"id4\");\n    Assert.assertEquals(404, response.getStatus());\n\n\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.absent());\n    replayAll();\n\n    response = supervisorResource.specGetHistory(request, \"id1\");\n    verifyAll();\n\n    Assert.assertEquals(503, response.getStatus());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":588,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testSpecGetHistory()\n  {\n    List<VersionedSupervisorSpec> versions1 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource1\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions2 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource2\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        )\n    );\n    Map<String, List<VersionedSupervisorSpec>> history = new HashMap<>();\n    history.put(\"id1\", versions1);\n    history.put(\"id2\", versions2);\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager)).times(3);\n    EasyMock.expect(supervisorManager.getSupervisorHistory()).andReturn(history).times(3);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetHistory(request, \"id1\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions1, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id2\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions2, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id3\");\n\n    Assert.assertEquals(404, response.getStatus());\n\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.absent());\n    replayAll();\n\n    response = supervisorResource.specGetHistory(request, \"id1\");\n    verifyAll();\n\n    Assert.assertEquals(503, response.getStatus());\n  }\n","date":"2018-10-29 20:02:43","endLine":741,"groupId":"17304","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpecGetHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/52/2307edd4d2c8290ffbd56743c5bf778820d340.src","preCode":"  public void testSpecGetHistory()\n  {\n    List<VersionedSupervisorSpec> versions1 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource1\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions2 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource2\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        )\n    );\n    Map<String, List<VersionedSupervisorSpec>> history = Maps.newHashMap();\n    history.put(\"id1\", versions1);\n    history.put(\"id2\", versions2);\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager)).times(3);\n    EasyMock.expect(supervisorManager.getSupervisorHistory()).andReturn(history).times(3);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetHistory(request, \"id1\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions1, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id2\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions2, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id3\");\n\n    Assert.assertEquals(404, response.getStatus());\n\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.absent());\n    replayAll();\n\n    response = supervisorResource.specGetHistory(request, \"id1\");\n    verifyAll();\n\n    Assert.assertEquals(503, response.getStatus());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":673,"status":"M"},{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testSpecGetHistoryWithAuthFailure() throws Exception\n  {\n    List<VersionedSupervisorSpec> versions1 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions2 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource2\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions3 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, null),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, null),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n            \"v2\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n            \"tombstone\"\n        )\n    );\n    Map<String, List<VersionedSupervisorSpec>> history = new HashMap<>();\n    history.put(\"id1\", versions1);\n    history.put(\"id2\", versions2);\n    history.put(\"id3\", versions3);\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager)).times(4);\n    EasyMock.expect(supervisorManager.getSupervisorHistory()).andReturn(history).times(4);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"notdruid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetHistory(request, \"id1\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions1, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id2\");\n\n    \r\n    Assert.assertEquals(404, response.getStatus());\n\n    response = supervisorResource.specGetHistory(request, \"id3\");\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new VersionedSupervisorSpec(\n                new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n                \"v1\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, null),\n                \"tombstone\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, null),\n                \"tombstone\"\n            ),\n            new VersionedSupervisorSpec(\n                new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n                \"v2\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n                \"tombstone\"\n            )\n        ),\n        response.getEntity()\n    );\n\n    response = supervisorResource.specGetHistory(request, \"id4\");\n    Assert.assertEquals(404, response.getStatus());\n\n\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.absent());\n    replayAll();\n\n    response = supervisorResource.specGetHistory(request, \"id1\");\n    verifyAll();\n\n    Assert.assertEquals(503, response.getStatus());\n  }\n","date":"2018-10-29 20:02:43","endLine":867,"groupId":"21469","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpecGetHistoryWithAuthFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/52/2307edd4d2c8290ffbd56743c5bf778820d340.src","preCode":"  public void testSpecGetHistoryWithAuthFailure() throws Exception\n  {\n    List<VersionedSupervisorSpec> versions1 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions2 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource2\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions3 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, null),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, null),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n            \"v2\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n            \"tombstone\"\n        )\n    );\n    Map<String, List<VersionedSupervisorSpec>> history = Maps.newHashMap();\n    history.put(\"id1\", versions1);\n    history.put(\"id2\", versions2);\n    history.put(\"id3\", versions3);\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager)).times(4);\n    EasyMock.expect(supervisorManager.getSupervisorHistory()).andReturn(history).times(4);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"notdruid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetHistory(request, \"id1\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions1, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id2\");\n\n    \r\n    Assert.assertEquals(404, response.getStatus());\n\n    response = supervisorResource.specGetHistory(request, \"id3\");\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new VersionedSupervisorSpec(\n                new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n                \"v1\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, null),\n                \"tombstone\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, null),\n                \"tombstone\"\n            ),\n            new VersionedSupervisorSpec(\n                new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n                \"v2\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n                \"tombstone\"\n            )\n        ),\n        response.getEntity()\n    );\n\n    response = supervisorResource.specGetHistory(request, \"id4\");\n    Assert.assertEquals(404, response.getStatus());\n\n\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.absent());\n    replayAll();\n\n    response = supervisorResource.specGetHistory(request, \"id1\");\n    verifyAll();\n\n    Assert.assertEquals(503, response.getStatus());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":744,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2019-03-26 08:11:01","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":3,"curCode":"  public void testSpecGetHistory()\n  {\n    List<VersionedSupervisorSpec> versions1 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource1\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions2 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource2\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        )\n    );\n    Map<String, List<VersionedSupervisorSpec>> history = new HashMap<>();\n    history.put(\"id1\", versions1);\n    history.put(\"id2\", versions2);\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager)).times(3);\n    EasyMock.expect(supervisorManager.getSupervisorHistory()).andReturn(history).times(3);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetHistory(request, \"id1\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions1, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id2\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions2, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id3\");\n\n    Assert.assertEquals(404, response.getStatus());\n\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.absent());\n    replayAll();\n\n    response = supervisorResource.specGetHistory(request, \"id1\");\n    verifyAll();\n\n    Assert.assertEquals(503, response.getStatus());\n  }\n","date":"2018-10-29 20:02:43","endLine":741,"groupId":"104191","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpecGetHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/52/2307edd4d2c8290ffbd56743c5bf778820d340.src","preCode":"  public void testSpecGetHistory()\n  {\n    List<VersionedSupervisorSpec> versions1 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource1\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions2 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource2\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        )\n    );\n    Map<String, List<VersionedSupervisorSpec>> history = new HashMap<>();\n    history.put(\"id1\", versions1);\n    history.put(\"id2\", versions2);\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager)).times(3);\n    EasyMock.expect(supervisorManager.getSupervisorHistory()).andReturn(history).times(3);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetHistory(request, \"id1\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions1, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id2\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions2, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id3\");\n\n    Assert.assertEquals(404, response.getStatus());\n\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.absent());\n    replayAll();\n\n    response = supervisorResource.specGetHistory(request, \"id1\");\n    verifyAll();\n\n    Assert.assertEquals(503, response.getStatus());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":673,"status":"N"},{"authorDate":"2019-03-26 08:11:01","commitOrder":3,"curCode":"  public void testSpecGetHistoryWithAuthFailure()\n  {\n    List<VersionedSupervisorSpec> versions1 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions2 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource2\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions3 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, null),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, null),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n            \"v2\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n            \"tombstone\"\n        )\n    );\n    Map<String, List<VersionedSupervisorSpec>> history = new HashMap<>();\n    history.put(\"id1\", versions1);\n    history.put(\"id2\", versions2);\n    history.put(\"id3\", versions3);\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager)).times(4);\n    EasyMock.expect(supervisorManager.getSupervisorHistory()).andReturn(history).times(4);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"notdruid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetHistory(request, \"id1\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions1, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id2\");\n\n    \r\n    Assert.assertEquals(404, response.getStatus());\n\n    response = supervisorResource.specGetHistory(request, \"id3\");\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new VersionedSupervisorSpec(\n                new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n                \"v1\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, null),\n                \"tombstone\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, null),\n                \"tombstone\"\n            ),\n            new VersionedSupervisorSpec(\n                new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n                \"v2\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n                \"tombstone\"\n            )\n        ),\n        response.getEntity()\n    );\n\n    response = supervisorResource.specGetHistory(request, \"id4\");\n    Assert.assertEquals(404, response.getStatus());\n\n\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.absent());\n    replayAll();\n\n    response = supervisorResource.specGetHistory(request, \"id1\");\n    verifyAll();\n\n    Assert.assertEquals(503, response.getStatus());\n  }\n","date":"2019-03-26 08:11:01","endLine":867,"groupId":"104191","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpecGetHistoryWithAuthFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3b/31dec993237dbf277cf5499dfc512136632175.src","preCode":"  public void testSpecGetHistoryWithAuthFailure() throws Exception\n  {\n    List<VersionedSupervisorSpec> versions1 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id1\", null, Collections.singletonList(\"datasource1\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions2 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource2\")),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id2\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        )\n    );\n    List<VersionedSupervisorSpec> versions3 = ImmutableList.of(\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n            \"v1\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, null),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource2\")),\n            \"v2\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, null),\n            \"tombstone\"\n        ),\n        new VersionedSupervisorSpec(\n            new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n            \"v2\"\n        ),\n        new VersionedSupervisorSpec(\n            new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n            \"tombstone\"\n        )\n    );\n    Map<String, List<VersionedSupervisorSpec>> history = new HashMap<>();\n    history.put(\"id1\", versions1);\n    history.put(\"id2\", versions2);\n    history.put(\"id3\", versions3);\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager)).times(4);\n    EasyMock.expect(supervisorManager.getSupervisorHistory()).andReturn(history).times(4);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"notdruid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetHistory(request, \"id1\");\n\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(versions1, response.getEntity());\n\n    response = supervisorResource.specGetHistory(request, \"id2\");\n\n    \r\n    Assert.assertEquals(404, response.getStatus());\n\n    response = supervisorResource.specGetHistory(request, \"id3\");\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(\n        ImmutableList.of(\n            new VersionedSupervisorSpec(\n                new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n                \"v1\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, null),\n                \"tombstone\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, null),\n                \"tombstone\"\n            ),\n            new VersionedSupervisorSpec(\n                new TestSupervisorSpec(\"id3\", null, Collections.singletonList(\"datasource3\")),\n                \"v2\"\n            ),\n            new VersionedSupervisorSpec(\n                new NoopSupervisorSpec(null, Collections.singletonList(\"datasource3\")),\n                \"tombstone\"\n            )\n        ),\n        response.getEntity()\n    );\n\n    response = supervisorResource.specGetHistory(request, \"id4\");\n    Assert.assertEquals(404, response.getStatus());\n\n\n    resetAll();\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.absent());\n    replayAll();\n\n    response = supervisorResource.specGetHistory(request, \"id1\");\n    verifyAll();\n\n    Assert.assertEquals(503, response.getStatus());\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":744,"status":"M"}],"commitId":"bca40dcdaf3177b95d01187f413e1c0c6865964b","commitMessage":"@@@Fix some IntelliJ inspections (#7273)\n\nPrepare TeamCity for IntelliJ 2018.3.1 upgrade. Mostly removed redundant exceptions declarations in `throws` clauses.","date":"2019-03-26 08:11:01","modifiedFileCount":"26","status":"M","submitter":"Roman Leventov"}]
