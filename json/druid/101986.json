[{"authorTime":"2020-02-01 15:51:16","codes":[{"authorDate":"2020-02-01 15:51:16","commitOrder":1,"curCode":"  public void test_canHandleCondition_leftEqRightFn()\n  {\n    Assert.assertFalse(\n        DruidJoinRule.canHandleCondition(\n            rexBuilder.makeCall(\n                SqlStdOperatorTable.EQUALS,\n                rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 0),\n                rexBuilder.makeCall(\n                    SqlStdOperatorTable.CONCAT,\n                    rexBuilder.makeLiteral(\"foo\"),\n                    rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 1)\n                )\n            ),\n            leftType\n        )\n    );\n  }\n","date":"2020-02-01 15:51:16","endLine":111,"groupId":"18714","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"test_canHandleCondition_leftEqRightFn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/dd/706ffdbef72a00d7d566db6d6e64a60a004487.src","preCode":"  public void test_canHandleCondition_leftEqRightFn()\n  {\n    Assert.assertFalse(\n        DruidJoinRule.canHandleCondition(\n            rexBuilder.makeCall(\n                SqlStdOperatorTable.EQUALS,\n                rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 0),\n                rexBuilder.makeCall(\n                    SqlStdOperatorTable.CONCAT,\n                    rexBuilder.makeLiteral(\"foo\"),\n                    rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 1)\n                )\n            ),\n            leftType\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/rule/DruidJoinRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2020-02-01 15:51:16","commitOrder":1,"curCode":"  public void test_canHandleCondition_rightEqRight()\n  {\n    Assert.assertFalse(\n        DruidJoinRule.canHandleCondition(\n            rexBuilder.makeCall(\n                SqlStdOperatorTable.EQUALS,\n                rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 1),\n                rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 1)\n            ),\n            leftType\n        )\n    );\n  }\n","date":"2020-02-01 15:51:16","endLine":141,"groupId":"18714","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"test_canHandleCondition_rightEqRight","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/dd/706ffdbef72a00d7d566db6d6e64a60a004487.src","preCode":"  public void test_canHandleCondition_rightEqRight()\n  {\n    Assert.assertFalse(\n        DruidJoinRule.canHandleCondition(\n            rexBuilder.makeCall(\n                SqlStdOperatorTable.EQUALS,\n                rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 1),\n                rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 1)\n            ),\n            leftType\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/rule/DruidJoinRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"B"}],"commitId":"b411443d228c14de746311e09db28b437c2746a5","commitMessage":"@@@SQL join support for lookups. (#9294)\n\n* SQL join support for lookups.\n\n1) Add LookupSchema to SQL.  so lookups show up in the catalog.\n2) Add join-related rels and rules to SQL.  allowing joins to be planned into\n   native Druid queries.\n\n* Add two missing LookupSchema calls in tests.\n\n* Fix tests.\n\n* Fix typo.\n","date":"2020-02-01 15:51:16","modifiedFileCount":"30","status":"B","submitter":"Gian Merlino"},{"authorTime":"2021-07-23 23:27:19","codes":[{"authorDate":"2021-07-23 23:27:19","commitOrder":2,"curCode":"  public void test_canHandleCondition_leftEqRightFn()\n  {\n    Assert.assertFalse(\n        DruidJoinRule.canHandleCondition(\n            rexBuilder.makeCall(\n                SqlStdOperatorTable.EQUALS,\n                rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 0),\n                rexBuilder.makeCall(\n                    SqlStdOperatorTable.CONCAT,\n                    rexBuilder.makeLiteral(\"foo\"),\n                    rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 1)\n                )\n            ),\n            leftType,\n            null\n        )\n    );\n  }\n","date":"2021-07-23 23:27:19","endLine":114,"groupId":"101986","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"test_canHandleCondition_leftEqRightFn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/c6ba7b42dcf51ce2776e741c5384a440e78d65.src","preCode":"  public void test_canHandleCondition_leftEqRightFn()\n  {\n    Assert.assertFalse(\n        DruidJoinRule.canHandleCondition(\n            rexBuilder.makeCall(\n                SqlStdOperatorTable.EQUALS,\n                rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 0),\n                rexBuilder.makeCall(\n                    SqlStdOperatorTable.CONCAT,\n                    rexBuilder.makeLiteral(\"foo\"),\n                    rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 1)\n                )\n            ),\n            leftType\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/rule/DruidJoinRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2021-07-23 23:27:19","commitOrder":2,"curCode":"  public void test_canHandleCondition_rightEqRight()\n  {\n    Assert.assertFalse(\n        DruidJoinRule.canHandleCondition(\n            rexBuilder.makeCall(\n                SqlStdOperatorTable.EQUALS,\n                rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 1),\n                rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 1)\n            ),\n            leftType,\n            null\n        )\n    );\n  }\n","date":"2021-07-23 23:27:19","endLine":146,"groupId":"101986","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"test_canHandleCondition_rightEqRight","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/c6ba7b42dcf51ce2776e741c5384a440e78d65.src","preCode":"  public void test_canHandleCondition_rightEqRight()\n  {\n    Assert.assertFalse(\n        DruidJoinRule.canHandleCondition(\n            rexBuilder.makeCall(\n                SqlStdOperatorTable.EQUALS,\n                rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 1),\n                rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.VARCHAR), 1)\n            ),\n            leftType\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/rule/DruidJoinRuleTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"c98e7c3aa3d1b883f76f0edaafe29cf426fb119d","commitMessage":"@@@Fix left join SQL queries with IS NOT NULL filter (#11434)\n\nThis PR fixes the incorrect results for query : \n\nSELECT dim1.  l1.k FROM foo LEFT JOIN (select k || '' as k from lookup.lookyloo group by 1) l1 ON foo.dim1 = l1.k WHERE l1.k IS NOT NULL (in CalciteQueryTests)\nIn the current code.  the WHERE clause gets removed from the top of the left join and is pushed to the table foo\nleading to incorrect results.\nThe fix for such a situation is done by :\n\nConverting such left joins into inner joins (since logically the mentioned left join query is equivalent to an inner join) using Calcite while maintaining that the druid execution layer can execute such inner joins.\nPreferring converted inner joins over original left joins in our cost model","date":"2021-07-23 23:27:19","modifiedFileCount":"7","status":"M","submitter":"Rohan Garg"}]
