[{"authorTime":"2020-09-15 09:18:56","codes":[{"authorDate":"2020-09-15 09:18:56","commitOrder":1,"curCode":"  public void testConditionalFunctions()\n  {\n    assertOutputType(\"if(y, 'foo', 'bar')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"if(y,2,3)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"if(y,2,3.0)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\n        \"case_simple(x,'baz','is baz','foo','is foo','is other')\",\n        inputTypes,\n        ExprType.STRING\n    );\n    assertOutputType(\n        \"case_simple(y,2,2,3,3,4)\",\n        inputTypes,\n        ExprType.LONG\n    );\n    assertOutputType(\n        \"case_simple(z,2.0,2.0,3.0,3.0,4.0)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n\n    assertOutputType(\n        \"case_searched(x=='baz','is baz',x=='foo','is foo','is other')\",\n        inputTypes,\n        ExprType.STRING\n    );\n    assertOutputType(\n        \"case_searched(y==1,1,y==2,2,0)\",\n        inputTypes,\n        ExprType.LONG\n    );\n    assertOutputType(\n        \"case_searched(z==1.0,1.0,z==2.0,2.0,0.0)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n\n    assertOutputType(\"nvl(x, 'foo')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"nvl(y, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"nvl(z, 2.0)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"isnull(x)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"isnull(y)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"isnull(z)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"notnull(x)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"notnull(y)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"notnull(z)\", inputTypes, ExprType.LONG);\n  }\n","date":"2020-09-15 09:18:56","endLine":222,"groupId":"22293","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConditionalFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/977d3b9ac2c44da0a5624edc5f1e6071f47f89.src","preCode":"  public void testConditionalFunctions()\n  {\n    assertOutputType(\"if(y, 'foo', 'bar')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"if(y,2,3)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"if(y,2,3.0)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\n        \"case_simple(x,'baz','is baz','foo','is foo','is other')\",\n        inputTypes,\n        ExprType.STRING\n    );\n    assertOutputType(\n        \"case_simple(y,2,2,3,3,4)\",\n        inputTypes,\n        ExprType.LONG\n    );\n    assertOutputType(\n        \"case_simple(z,2.0,2.0,3.0,3.0,4.0)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n\n    assertOutputType(\n        \"case_searched(x=='baz','is baz',x=='foo','is foo','is other')\",\n        inputTypes,\n        ExprType.STRING\n    );\n    assertOutputType(\n        \"case_searched(y==1,1,y==2,2,0)\",\n        inputTypes,\n        ExprType.LONG\n    );\n    assertOutputType(\n        \"case_searched(z==1.0,1.0,z==2.0,2.0,0.0)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n\n    assertOutputType(\"nvl(x, 'foo')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"nvl(y, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"nvl(z, 2.0)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"isnull(x)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"isnull(y)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"isnull(z)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"notnull(x)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"notnull(y)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"notnull(z)\", inputTypes, ExprType.LONG);\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/OutputTypeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"B"},{"authorDate":"2020-09-15 09:18:56","commitOrder":1,"curCode":"  public void testReduceFunctions()\n  {\n    assertOutputType(\"greatest('B', x, 'A')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"greatest(y, 0)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"greatest(34.0, z, 5.0, 767.0)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"least('B', x, 'A')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"least(y, 0)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"least(34.0, z, 5.0, 767.0)\", inputTypes, ExprType.DOUBLE);\n  }\n","date":"2020-09-15 09:18:56","endLine":324,"groupId":"22293","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/977d3b9ac2c44da0a5624edc5f1e6071f47f89.src","preCode":"  public void testReduceFunctions()\n  {\n    assertOutputType(\"greatest('B', x, 'A')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"greatest(y, 0)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"greatest(34.0, z, 5.0, 767.0)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"least('B', x, 'A')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"least(y, 0)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"least(34.0, z, 5.0, 767.0)\", inputTypes, ExprType.DOUBLE);\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/OutputTypeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"B"}],"commitId":"184b202411ffe6d04037e6b670985a58c3bf53e5","commitMessage":"@@@add computed Expr output types (#10370)\n\n* push down ValueType to ExprType conversion.  tidy up\n\n* determine expr output type for given input types\n\n* revert unintended name change\n\n* add nullable\n\n* tidy up\n\n* fixup\n\n* more better\n\n* fix signatures\n\n* naming things is hard\n\n* fix inspection\n\n* javadoc\n\n* make default implementation of Expr.getOutputType that returns null\n\n* rename method\n\n* more test\n\n* add output for contains expr macro.  split operation and function auto conversion","date":"2020-09-15 09:18:56","modifiedFileCount":"39","status":"B","submitter":"Clint Wylie"},{"authorTime":"2020-09-15 09:18:56","codes":[{"authorDate":"2020-10-04 06:30:34","commitOrder":2,"curCode":"  public void testConditionalFunctions()\n  {\n    assertOutputType(\"if(y, 'foo', 'bar')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"if(y,2,3)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"if(y,2,3.0)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\n        \"case_simple(x,'baz','is baz','foo','is foo','is other')\",\n        inputTypes,\n        ExprType.STRING\n    );\n    assertOutputType(\n        \"case_simple(y,2,2,3,3,4)\",\n        inputTypes,\n        ExprType.LONG\n    );\n    assertOutputType(\n        \"case_simple(z,2.0,2.0,3.0,3.0,4.0)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n\n    assertOutputType(\n        \"case_simple(y,2,2,3,3.0,4)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n    assertOutputType(\n        \"case_simple(z,2.0,2.0,3.0,3.0,null)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n\n    assertOutputType(\n        \"case_searched(x=='baz','is baz',x=='foo','is foo','is other')\",\n        inputTypes,\n        ExprType.STRING\n    );\n    assertOutputType(\n        \"case_searched(y==1,1,y==2,2,0)\",\n        inputTypes,\n        ExprType.LONG\n    );\n    assertOutputType(\n        \"case_searched(z==1.0,1.0,z==2.0,2.0,0.0)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n    assertOutputType(\n        \"case_searched(y==1,1,y==2,2.0,0)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n    assertOutputType(\n        \"case_searched(z==1.0,1,z==2.0,2,null)\",\n        inputTypes,\n        ExprType.LONG\n    );\n    assertOutputType(\n        \"case_searched(z==1.0,1.0,z==2.0,2.0,null)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n\n    assertOutputType(\"nvl(x, 'foo')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"nvl(y, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"nvl(y, 1.1)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"nvl(z, 2.0)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"nvl(y, 2.0)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"isnull(x)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"isnull(y)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"isnull(z)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"notnull(x)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"notnull(y)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"notnull(z)\", inputTypes, ExprType.LONG);\n  }\n","date":"2020-10-04 06:30:34","endLine":250,"groupId":"22293","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConditionalFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/44/1a42162852400ef376bb21f69f9f487b08a732.src","preCode":"  public void testConditionalFunctions()\n  {\n    assertOutputType(\"if(y, 'foo', 'bar')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"if(y,2,3)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"if(y,2,3.0)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\n        \"case_simple(x,'baz','is baz','foo','is foo','is other')\",\n        inputTypes,\n        ExprType.STRING\n    );\n    assertOutputType(\n        \"case_simple(y,2,2,3,3,4)\",\n        inputTypes,\n        ExprType.LONG\n    );\n    assertOutputType(\n        \"case_simple(z,2.0,2.0,3.0,3.0,4.0)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n\n    assertOutputType(\n        \"case_searched(x=='baz','is baz',x=='foo','is foo','is other')\",\n        inputTypes,\n        ExprType.STRING\n    );\n    assertOutputType(\n        \"case_searched(y==1,1,y==2,2,0)\",\n        inputTypes,\n        ExprType.LONG\n    );\n    assertOutputType(\n        \"case_searched(z==1.0,1.0,z==2.0,2.0,0.0)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n\n    assertOutputType(\"nvl(x, 'foo')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"nvl(y, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"nvl(z, 2.0)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"isnull(x)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"isnull(y)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"isnull(z)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"notnull(x)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"notnull(y)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"notnull(z)\", inputTypes, ExprType.LONG);\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/OutputTypeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2020-09-15 09:18:56","commitOrder":2,"curCode":"  public void testReduceFunctions()\n  {\n    assertOutputType(\"greatest('B', x, 'A')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"greatest(y, 0)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"greatest(34.0, z, 5.0, 767.0)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"least('B', x, 'A')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"least(y, 0)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"least(34.0, z, 5.0, 767.0)\", inputTypes, ExprType.DOUBLE);\n  }\n","date":"2020-09-15 09:18:56","endLine":324,"groupId":"22293","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReduceFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/977d3b9ac2c44da0a5624edc5f1e6071f47f89.src","preCode":"  public void testReduceFunctions()\n  {\n    assertOutputType(\"greatest('B', x, 'A')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"greatest(y, 0)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"greatest(34.0, z, 5.0, 767.0)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"least('B', x, 'A')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"least(y, 0)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"least(34.0, z, 5.0, 767.0)\", inputTypes, ExprType.DOUBLE);\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/OutputTypeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"N"}],"commitId":"9ec5c08e2a3c1210fefc78e26fbafe75702c7c2f","commitMessage":"@@@fix array types from escaping into wider query engine (#10460)\n\n* fix array types from escaping into wider query engine\n\n* oops\n\n* adjust\n\n* fix lgtm","date":"2020-10-04 06:30:34","modifiedFileCount":"13","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-10-27 10:55:24","codes":[{"authorDate":"2020-10-27 10:55:24","commitOrder":3,"curCode":"  public void testConditionalFunctions()\n  {\n    assertOutputType(\"if(y, 'foo', 'bar')\", inspector, ExprType.STRING);\n    assertOutputType(\"if(y,2,3)\", inspector, ExprType.LONG);\n    assertOutputType(\"if(y,2,3.0)\", inspector, ExprType.DOUBLE);\n\n    assertOutputType(\n        \"case_simple(x,'baz','is baz','foo','is foo','is other')\",\n        inspector,\n        ExprType.STRING\n    );\n    assertOutputType(\n        \"case_simple(y,2,2,3,3,4)\",\n        inspector,\n        ExprType.LONG\n    );\n    assertOutputType(\n        \"case_simple(z,2.0,2.0,3.0,3.0,4.0)\",\n        inspector,\n        ExprType.DOUBLE\n    );\n\n    assertOutputType(\n        \"case_simple(y,2,2,3,3.0,4)\",\n        inspector,\n        ExprType.DOUBLE\n    );\n    assertOutputType(\n        \"case_simple(z,2.0,2.0,3.0,3.0,null)\",\n        inspector,\n        ExprType.DOUBLE\n    );\n\n    assertOutputType(\n        \"case_searched(x=='baz','is baz',x=='foo','is foo','is other')\",\n        inspector,\n        ExprType.STRING\n    );\n    assertOutputType(\n        \"case_searched(y==1,1,y==2,2,0)\",\n        inspector,\n        ExprType.LONG\n    );\n    assertOutputType(\n        \"case_searched(z==1.0,1.0,z==2.0,2.0,0.0)\",\n        inspector,\n        ExprType.DOUBLE\n    );\n    assertOutputType(\n        \"case_searched(y==1,1,y==2,2.0,0)\",\n        inspector,\n        ExprType.DOUBLE\n    );\n    assertOutputType(\n        \"case_searched(z==1.0,1,z==2.0,2,null)\",\n        inspector,\n        ExprType.LONG\n    );\n    assertOutputType(\n        \"case_searched(z==1.0,1.0,z==2.0,2.0,null)\",\n        inspector,\n        ExprType.DOUBLE\n    );\n\n    assertOutputType(\"nvl(x, 'foo')\", inspector, ExprType.STRING);\n    assertOutputType(\"nvl(y, 1)\", inspector, ExprType.LONG);\n    assertOutputType(\"nvl(y, 1.1)\", inspector, ExprType.DOUBLE);\n    assertOutputType(\"nvl(z, 2.0)\", inspector, ExprType.DOUBLE);\n    assertOutputType(\"nvl(y, 2.0)\", inspector, ExprType.DOUBLE);\n    assertOutputType(\"isnull(x)\", inspector, ExprType.LONG);\n    assertOutputType(\"isnull(y)\", inspector, ExprType.LONG);\n    assertOutputType(\"isnull(z)\", inspector, ExprType.LONG);\n    assertOutputType(\"notnull(x)\", inspector, ExprType.LONG);\n    assertOutputType(\"notnull(y)\", inspector, ExprType.LONG);\n    assertOutputType(\"notnull(z)\", inspector, ExprType.LONG);\n  }\n","date":"2020-10-27 10:55:24","endLine":250,"groupId":"104936","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testConditionalFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0c/8ea1b71fab3c26f20af7cff75ee27cd0398819.src","preCode":"  public void testConditionalFunctions()\n  {\n    assertOutputType(\"if(y, 'foo', 'bar')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"if(y,2,3)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"if(y,2,3.0)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\n        \"case_simple(x,'baz','is baz','foo','is foo','is other')\",\n        inputTypes,\n        ExprType.STRING\n    );\n    assertOutputType(\n        \"case_simple(y,2,2,3,3,4)\",\n        inputTypes,\n        ExprType.LONG\n    );\n    assertOutputType(\n        \"case_simple(z,2.0,2.0,3.0,3.0,4.0)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n\n    assertOutputType(\n        \"case_simple(y,2,2,3,3.0,4)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n    assertOutputType(\n        \"case_simple(z,2.0,2.0,3.0,3.0,null)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n\n    assertOutputType(\n        \"case_searched(x=='baz','is baz',x=='foo','is foo','is other')\",\n        inputTypes,\n        ExprType.STRING\n    );\n    assertOutputType(\n        \"case_searched(y==1,1,y==2,2,0)\",\n        inputTypes,\n        ExprType.LONG\n    );\n    assertOutputType(\n        \"case_searched(z==1.0,1.0,z==2.0,2.0,0.0)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n    assertOutputType(\n        \"case_searched(y==1,1,y==2,2.0,0)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n    assertOutputType(\n        \"case_searched(z==1.0,1,z==2.0,2,null)\",\n        inputTypes,\n        ExprType.LONG\n    );\n    assertOutputType(\n        \"case_searched(z==1.0,1.0,z==2.0,2.0,null)\",\n        inputTypes,\n        ExprType.DOUBLE\n    );\n\n    assertOutputType(\"nvl(x, 'foo')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"nvl(y, 1)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"nvl(y, 1.1)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"nvl(z, 2.0)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"nvl(y, 2.0)\", inputTypes, ExprType.DOUBLE);\n    assertOutputType(\"isnull(x)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"isnull(y)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"isnull(z)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"notnull(x)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"notnull(y)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"notnull(z)\", inputTypes, ExprType.LONG);\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/OutputTypeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2020-10-27 10:55:24","commitOrder":3,"curCode":"  public void testReduceFunctions()\n  {\n    assertOutputType(\"greatest('B', x, 'A')\", inspector, ExprType.STRING);\n    assertOutputType(\"greatest(y, 0)\", inspector, ExprType.LONG);\n    assertOutputType(\"greatest(34.0, z, 5.0, 767.0)\", inspector, ExprType.DOUBLE);\n\n    assertOutputType(\"least('B', x, 'A')\", inspector, ExprType.STRING);\n    assertOutputType(\"least(y, 0)\", inspector, ExprType.LONG);\n    assertOutputType(\"least(34.0, z, 5.0, 767.0)\", inspector, ExprType.DOUBLE);\n  }\n","date":"2020-10-27 10:55:24","endLine":352,"groupId":"104936","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testReduceFunctions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0c/8ea1b71fab3c26f20af7cff75ee27cd0398819.src","preCode":"  public void testReduceFunctions()\n  {\n    assertOutputType(\"greatest('B', x, 'A')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"greatest(y, 0)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"greatest(34.0, z, 5.0, 767.0)\", inputTypes, ExprType.DOUBLE);\n\n    assertOutputType(\"least('B', x, 'A')\", inputTypes, ExprType.STRING);\n    assertOutputType(\"least(y, 0)\", inputTypes, ExprType.LONG);\n    assertOutputType(\"least(34.0, z, 5.0, 767.0)\", inputTypes, ExprType.DOUBLE);\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/OutputTypeTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"M"}],"commitId":"d0821de8540686eb64a9b3e22fe4a637b58920ef","commitMessage":"@@@support for vectorizing expressions with non-existent inputs.  more consistent type handling for non-vectorized expressions (#10499)\n\n* support for vectorizing expressions with non-existent inputs.  more consistent type handling for non-vectorized expressions\n\n* inspector\n\n* changes\n\n* more test\n\n* clean","date":"2020-10-27 10:55:24","modifiedFileCount":"56","status":"M","submitter":"Clint Wylie"}]
