[{"authorTime":"2019-08-14 06:55:14","codes":[{"authorDate":"2019-08-14 06:55:14","commitOrder":1,"curCode":"  public void testGroupBy() throws Exception\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(\"test\")\n        .setGranularity(Granularities.ALL)\n        .setInterval(\"1970/2050\")\n        .setAggregatorSpecs(\n            new DoubleSumAggregatorFactory(\"singleDoubleSum\", singleValue),\n            new DoubleSumAggregatorFactory(\"multiDoubleSum\", multiValue),\n            new DoubleMaxAggregatorFactory(\"singleDoubleMax\", singleValue),\n            new DoubleMaxAggregatorFactory(\"multiDoubleMax\", multiValue),\n            new DoubleMinAggregatorFactory(\"singleDoubleMin\", singleValue),\n            new DoubleMinAggregatorFactory(\"multiDoubleMin\", multiValue),\n            new LongSumAggregatorFactory(\"count\", \"count\")\n        )\n        .build();\n\n    Sequence<ResultRow> seq = aggregationTestHelper.runQueryOnSegmentsObjs(segments, query);\n    Row result = Iterables.getOnlyElement(seq.toList()).toMapBasedRow(query);\n\n    Assert.assertEquals(numRows, result.getMetric(\"count\").longValue());\n    Assert.assertEquals(singleValueSum, result.getMetric(\"singleDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueSum, result.getMetric(\"multiDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMax, result.getMetric(\"singleDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMax, result.getMetric(\"multiDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMin, result.getMetric(\"singleDoubleMin\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMin, result.getMetric(\"multiDoubleMin\").doubleValue(), 0.0001d);\n  }\n","date":"2019-08-14 06:55:14","endLine":169,"groupId":"4895","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/69/c1390179c4e479aaca09e5d288c4546b183a7c.src","preCode":"  public void testGroupBy() throws Exception\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(\"test\")\n        .setGranularity(Granularities.ALL)\n        .setInterval(\"1970/2050\")\n        .setAggregatorSpecs(\n            new DoubleSumAggregatorFactory(\"singleDoubleSum\", singleValue),\n            new DoubleSumAggregatorFactory(\"multiDoubleSum\", multiValue),\n            new DoubleMaxAggregatorFactory(\"singleDoubleMax\", singleValue),\n            new DoubleMaxAggregatorFactory(\"multiDoubleMax\", multiValue),\n            new DoubleMinAggregatorFactory(\"singleDoubleMin\", singleValue),\n            new DoubleMinAggregatorFactory(\"multiDoubleMin\", multiValue),\n            new LongSumAggregatorFactory(\"count\", \"count\")\n        )\n        .build();\n\n    Sequence<ResultRow> seq = aggregationTestHelper.runQueryOnSegmentsObjs(segments, query);\n    Row result = Iterables.getOnlyElement(seq.toList()).toMapBasedRow(query);\n\n    Assert.assertEquals(numRows, result.getMetric(\"count\").longValue());\n    Assert.assertEquals(singleValueSum, result.getMetric(\"singleDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueSum, result.getMetric(\"multiDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMax, result.getMetric(\"singleDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMax, result.getMetric(\"multiDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMin, result.getMetric(\"singleDoubleMin\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMin, result.getMetric(\"multiDoubleMin\").doubleValue(), 0.0001d);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/StringColumnAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"},{"authorDate":"2019-08-14 06:55:14","commitOrder":1,"curCode":"  public void testTimeseries() throws Exception\n  {\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(\"test\")\n                                  .granularity(Granularities.ALL)\n                                  .intervals(\"1970/2050\")\n                                  .aggregators(\n                                      new DoubleSumAggregatorFactory(\"singleDoubleSum\", singleValue),\n                                      new DoubleSumAggregatorFactory(\"multiDoubleSum\", multiValue),\n                                      new DoubleMaxAggregatorFactory(\"singleDoubleMax\", singleValue),\n                                      new DoubleMaxAggregatorFactory(\"multiDoubleMax\", multiValue),\n                                      new DoubleMinAggregatorFactory(\"singleDoubleMin\", singleValue),\n                                      new DoubleMinAggregatorFactory(\"multiDoubleMin\", multiValue),\n                                      new LongSumAggregatorFactory(\"count\", \"count\")\n                                  )\n                                  .build();\n\n    Sequence seq = AggregationTestHelper.createTimeseriesQueryAggregationTestHelper(Collections.EMPTY_LIST, tempFolder)\n                                        .runQueryOnSegmentsObjs(segments, query);\n    TimeseriesResultValue result = ((Result<TimeseriesResultValue>) Iterables.getOnlyElement(seq.toList())).getValue();\n\n    Assert.assertEquals(numRows, result.getLongMetric(\"count\").longValue());\n    Assert.assertEquals(singleValueSum, result.getDoubleMetric(\"singleDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueSum, result.getDoubleMetric(\"multiDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMax, result.getDoubleMetric(\"singleDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMax, result.getDoubleMetric(\"multiDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMin, result.getDoubleMetric(\"singleDoubleMin\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMin, result.getDoubleMetric(\"multiDoubleMin\").doubleValue(), 0.0001d);\n  }\n","date":"2019-08-14 06:55:14","endLine":200,"groupId":"4895","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeseries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/69/c1390179c4e479aaca09e5d288c4546b183a7c.src","preCode":"  public void testTimeseries() throws Exception\n  {\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(\"test\")\n                                  .granularity(Granularities.ALL)\n                                  .intervals(\"1970/2050\")\n                                  .aggregators(\n                                      new DoubleSumAggregatorFactory(\"singleDoubleSum\", singleValue),\n                                      new DoubleSumAggregatorFactory(\"multiDoubleSum\", multiValue),\n                                      new DoubleMaxAggregatorFactory(\"singleDoubleMax\", singleValue),\n                                      new DoubleMaxAggregatorFactory(\"multiDoubleMax\", multiValue),\n                                      new DoubleMinAggregatorFactory(\"singleDoubleMin\", singleValue),\n                                      new DoubleMinAggregatorFactory(\"multiDoubleMin\", multiValue),\n                                      new LongSumAggregatorFactory(\"count\", \"count\")\n                                  )\n                                  .build();\n\n    Sequence seq = AggregationTestHelper.createTimeseriesQueryAggregationTestHelper(Collections.EMPTY_LIST, tempFolder)\n                                        .runQueryOnSegmentsObjs(segments, query);\n    TimeseriesResultValue result = ((Result<TimeseriesResultValue>) Iterables.getOnlyElement(seq.toList())).getValue();\n\n    Assert.assertEquals(numRows, result.getLongMetric(\"count\").longValue());\n    Assert.assertEquals(singleValueSum, result.getDoubleMetric(\"singleDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueSum, result.getDoubleMetric(\"multiDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMax, result.getDoubleMetric(\"singleDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMax, result.getDoubleMetric(\"multiDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMin, result.getDoubleMetric(\"singleDoubleMin\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMin, result.getDoubleMetric(\"multiDoubleMin\").doubleValue(), 0.0001d);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/StringColumnAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"B"}],"commitId":"176da53996220776979f4ef7672ca4d31acb00b6","commitMessage":"@@@make double sum/min/max agg work on string columns (#8243)\n\n* make double sum/min/max agg work on string columns\n\n* style and compilation fixes\n\n* fix tests\n\n* address review comments\n\n* add comment on SimpleDoubleAggregatorFactory\n\n* make checkstyle happy\n","date":"2019-08-14 06:55:14","modifiedFileCount":"10","status":"B","submitter":"Himanshu"},{"authorTime":"2019-08-28 07:10:59","codes":[{"authorDate":"2019-08-28 07:10:59","commitOrder":2,"curCode":"  public void testGroupBy()\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(\"test\")\n        .setGranularity(Granularities.ALL)\n        .setInterval(\"1970/2050\")\n        .setAggregatorSpecs(\n            new DoubleSumAggregatorFactory(\"singleDoubleSum\", singleValue),\n            new DoubleSumAggregatorFactory(\"multiDoubleSum\", multiValue),\n            new DoubleMaxAggregatorFactory(\"singleDoubleMax\", singleValue),\n            new DoubleMaxAggregatorFactory(\"multiDoubleMax\", multiValue),\n            new DoubleMinAggregatorFactory(\"singleDoubleMin\", singleValue),\n            new DoubleMinAggregatorFactory(\"multiDoubleMin\", multiValue),\n\n            new FloatSumAggregatorFactory(\"singleFloatSum\", singleValue),\n            new FloatSumAggregatorFactory(\"multiFloatSum\", multiValue),\n            new FloatMaxAggregatorFactory(\"singleFloatMax\", singleValue),\n            new FloatMaxAggregatorFactory(\"multiFloatMax\", multiValue),\n            new FloatMinAggregatorFactory(\"singleFloatMin\", singleValue),\n            new FloatMinAggregatorFactory(\"multiFloatMin\", multiValue),\n\n            new LongSumAggregatorFactory(\"singleLongSum\", singleValue),\n            new LongSumAggregatorFactory(\"multiLongSum\", multiValue),\n            new LongMaxAggregatorFactory(\"singleLongMax\", singleValue),\n            new LongMaxAggregatorFactory(\"multiLongMax\", multiValue),\n            new LongMinAggregatorFactory(\"singleLongMin\", singleValue),\n            new LongMinAggregatorFactory(\"multiLongMin\", multiValue),\n\n            new LongSumAggregatorFactory(\"count\", \"count\")\n        )\n        .build();\n\n    Sequence<ResultRow> seq = aggregationTestHelper.runQueryOnSegmentsObjs(segments, query);\n    Row result = Iterables.getOnlyElement(seq.toList()).toMapBasedRow(query);\n\n    Assert.assertEquals(numRows, result.getMetric(\"count\").longValue());\n    \n    Assert.assertEquals(singleValueSum, result.getMetric(\"singleDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueSum, result.getMetric(\"multiDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMax, result.getMetric(\"singleDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMax, result.getMetric(\"multiDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMin, result.getMetric(\"singleDoubleMin\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMin, result.getMetric(\"multiDoubleMin\").doubleValue(), 0.0001d);\n\n    Assert.assertEquals(singleValueSum, result.getMetric(\"singleFloatSum\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueSum, result.getMetric(\"multiFloatSum\").floatValue(), 0.0001f);\n    Assert.assertEquals(singleValueMax, result.getMetric(\"singleFloatMax\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueMax, result.getMetric(\"multiFloatMax\").floatValue(), 0.0001f);\n    Assert.assertEquals(singleValueMin, result.getMetric(\"singleFloatMin\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueMin, result.getMetric(\"multiFloatMin\").floatValue(), 0.0001f);\n\n    Assert.assertEquals((long) singleValueSum, result.getMetric(\"singleLongSum\").longValue());\n    Assert.assertEquals((long) multiValueSum, result.getMetric(\"multiLongSum\").longValue());\n    Assert.assertEquals((long) singleValueMax, result.getMetric(\"singleLongMax\").longValue());\n    Assert.assertEquals((long) multiValueMax, result.getMetric(\"multiLongMax\").longValue());\n    Assert.assertEquals((long) singleValueMin, result.getMetric(\"singleLongMin\").longValue());\n    Assert.assertEquals((long) multiValueMin, result.getMetric(\"multiLongMin\").longValue());\n  }\n","date":"2019-08-28 07:10:59","endLine":199,"groupId":"4895","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1b/821b370822e09e2d99c6ce06ba522e6a35f62f.src","preCode":"  public void testGroupBy() throws Exception\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(\"test\")\n        .setGranularity(Granularities.ALL)\n        .setInterval(\"1970/2050\")\n        .setAggregatorSpecs(\n            new DoubleSumAggregatorFactory(\"singleDoubleSum\", singleValue),\n            new DoubleSumAggregatorFactory(\"multiDoubleSum\", multiValue),\n            new DoubleMaxAggregatorFactory(\"singleDoubleMax\", singleValue),\n            new DoubleMaxAggregatorFactory(\"multiDoubleMax\", multiValue),\n            new DoubleMinAggregatorFactory(\"singleDoubleMin\", singleValue),\n            new DoubleMinAggregatorFactory(\"multiDoubleMin\", multiValue),\n            new LongSumAggregatorFactory(\"count\", \"count\")\n        )\n        .build();\n\n    Sequence<ResultRow> seq = aggregationTestHelper.runQueryOnSegmentsObjs(segments, query);\n    Row result = Iterables.getOnlyElement(seq.toList()).toMapBasedRow(query);\n\n    Assert.assertEquals(numRows, result.getMetric(\"count\").longValue());\n    Assert.assertEquals(singleValueSum, result.getMetric(\"singleDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueSum, result.getMetric(\"multiDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMax, result.getMetric(\"singleDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMax, result.getMetric(\"multiDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMin, result.getMetric(\"singleDoubleMin\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMin, result.getMetric(\"multiDoubleMin\").doubleValue(), 0.0001d);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/StringColumnAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2019-08-28 07:10:59","commitOrder":2,"curCode":"  public void testTimeseries()\n  {\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(\"test\")\n                                  .granularity(Granularities.ALL)\n                                  .intervals(\"1970/2050\")\n                                  .aggregators(\n                                      new DoubleSumAggregatorFactory(\"singleDoubleSum\", singleValue),\n                                      new DoubleSumAggregatorFactory(\"multiDoubleSum\", multiValue),\n                                      new DoubleMaxAggregatorFactory(\"singleDoubleMax\", singleValue),\n                                      new DoubleMaxAggregatorFactory(\"multiDoubleMax\", multiValue),\n                                      new DoubleMinAggregatorFactory(\"singleDoubleMin\", singleValue),\n                                      new DoubleMinAggregatorFactory(\"multiDoubleMin\", multiValue),\n\n                                      new FloatSumAggregatorFactory(\"singleFloatSum\", singleValue),\n                                      new FloatSumAggregatorFactory(\"multiFloatSum\", multiValue),\n                                      new FloatMaxAggregatorFactory(\"singleFloatMax\", singleValue),\n                                      new FloatMaxAggregatorFactory(\"multiFloatMax\", multiValue),\n                                      new FloatMinAggregatorFactory(\"singleFloatMin\", singleValue),\n                                      new FloatMinAggregatorFactory(\"multiFloatMin\", multiValue),\n\n                                      new LongSumAggregatorFactory(\"singleLongSum\", singleValue),\n                                      new LongSumAggregatorFactory(\"multiLongSum\", multiValue),\n                                      new LongMaxAggregatorFactory(\"singleLongMax\", singleValue),\n                                      new LongMaxAggregatorFactory(\"multiLongMax\", multiValue),\n                                      new LongMinAggregatorFactory(\"singleLongMin\", singleValue),\n                                      new LongMinAggregatorFactory(\"multiLongMin\", multiValue),\n                                      \n                                      new LongSumAggregatorFactory(\"count\", \"count\")\n                                  )\n                                  .build();\n\n    Sequence seq = AggregationTestHelper.createTimeseriesQueryAggregationTestHelper(Collections.EMPTY_LIST, tempFolder)\n                                        .runQueryOnSegmentsObjs(segments, query);\n    TimeseriesResultValue result = ((Result<TimeseriesResultValue>) Iterables.getOnlyElement(seq.toList())).getValue();\n\n    Assert.assertEquals(numRows, result.getLongMetric(\"count\").longValue());\n    Assert.assertEquals(singleValueSum, result.getDoubleMetric(\"singleDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueSum, result.getDoubleMetric(\"multiDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMax, result.getDoubleMetric(\"singleDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMax, result.getDoubleMetric(\"multiDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMin, result.getDoubleMetric(\"singleDoubleMin\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMin, result.getDoubleMetric(\"multiDoubleMin\").doubleValue(), 0.0001d);\n\n    Assert.assertEquals(singleValueSum, result.getFloatMetric(\"singleFloatSum\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueSum, result.getFloatMetric(\"multiFloatSum\").floatValue(), 0.0001f);\n    Assert.assertEquals(singleValueMax, result.getFloatMetric(\"singleFloatMax\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueMax, result.getFloatMetric(\"multiFloatMax\").floatValue(), 0.0001f);\n    Assert.assertEquals(singleValueMin, result.getFloatMetric(\"singleFloatMin\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueMin, result.getFloatMetric(\"multiFloatMin\").floatValue(), 0.0001f);\n\n    Assert.assertEquals((long) singleValueSum, result.getLongMetric(\"singleLongSum\").longValue());\n    Assert.assertEquals((long) multiValueSum, result.getLongMetric(\"multiLongSum\").longValue());\n    Assert.assertEquals((long) singleValueMax, result.getLongMetric(\"singleLongMax\").longValue());\n    Assert.assertEquals((long) multiValueMax, result.getLongMetric(\"multiLongMax\").longValue());\n    Assert.assertEquals((long) singleValueMin, result.getLongMetric(\"singleLongMin\").longValue());\n    Assert.assertEquals((long) multiValueMin, result.getLongMetric(\"multiLongMin\").longValue());\n  }\n","date":"2019-08-28 07:10:59","endLine":259,"groupId":"4895","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTimeseries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1b/821b370822e09e2d99c6ce06ba522e6a35f62f.src","preCode":"  public void testTimeseries() throws Exception\n  {\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(\"test\")\n                                  .granularity(Granularities.ALL)\n                                  .intervals(\"1970/2050\")\n                                  .aggregators(\n                                      new DoubleSumAggregatorFactory(\"singleDoubleSum\", singleValue),\n                                      new DoubleSumAggregatorFactory(\"multiDoubleSum\", multiValue),\n                                      new DoubleMaxAggregatorFactory(\"singleDoubleMax\", singleValue),\n                                      new DoubleMaxAggregatorFactory(\"multiDoubleMax\", multiValue),\n                                      new DoubleMinAggregatorFactory(\"singleDoubleMin\", singleValue),\n                                      new DoubleMinAggregatorFactory(\"multiDoubleMin\", multiValue),\n                                      new LongSumAggregatorFactory(\"count\", \"count\")\n                                  )\n                                  .build();\n\n    Sequence seq = AggregationTestHelper.createTimeseriesQueryAggregationTestHelper(Collections.EMPTY_LIST, tempFolder)\n                                        .runQueryOnSegmentsObjs(segments, query);\n    TimeseriesResultValue result = ((Result<TimeseriesResultValue>) Iterables.getOnlyElement(seq.toList())).getValue();\n\n    Assert.assertEquals(numRows, result.getLongMetric(\"count\").longValue());\n    Assert.assertEquals(singleValueSum, result.getDoubleMetric(\"singleDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueSum, result.getDoubleMetric(\"multiDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMax, result.getDoubleMetric(\"singleDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMax, result.getDoubleMetric(\"multiDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMin, result.getDoubleMetric(\"singleDoubleMin\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMin, result.getDoubleMetric(\"multiDoubleMin\").doubleValue(), 0.0001d);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/StringColumnAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"}],"commitId":"5c3db41c2b9786dcb0dfa28dabdc1bd49ceeb1eb","commitMessage":"@@@string column handling for long/float min/max/sum aggregators (#8319)\n\n* string column handling for long min/max/sum aggregators\n\n* add apache license to new files\n\n* use 'L' as suffix for long literal instead of 'l'\n\n* return null in ParallelCombiner.SettableColumnSelectorFactory.getColumnCapabilities(String) as is required by contract of ColumnSelectorFactory interface\n\n* fix more tests\n","date":"2019-08-28 07:10:59","modifiedFileCount":"16","status":"M","submitter":"Himanshu"},{"authorTime":"2020-06-19 00:47:07","codes":[{"authorDate":"2019-08-28 07:10:59","commitOrder":3,"curCode":"  public void testGroupBy()\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(\"test\")\n        .setGranularity(Granularities.ALL)\n        .setInterval(\"1970/2050\")\n        .setAggregatorSpecs(\n            new DoubleSumAggregatorFactory(\"singleDoubleSum\", singleValue),\n            new DoubleSumAggregatorFactory(\"multiDoubleSum\", multiValue),\n            new DoubleMaxAggregatorFactory(\"singleDoubleMax\", singleValue),\n            new DoubleMaxAggregatorFactory(\"multiDoubleMax\", multiValue),\n            new DoubleMinAggregatorFactory(\"singleDoubleMin\", singleValue),\n            new DoubleMinAggregatorFactory(\"multiDoubleMin\", multiValue),\n\n            new FloatSumAggregatorFactory(\"singleFloatSum\", singleValue),\n            new FloatSumAggregatorFactory(\"multiFloatSum\", multiValue),\n            new FloatMaxAggregatorFactory(\"singleFloatMax\", singleValue),\n            new FloatMaxAggregatorFactory(\"multiFloatMax\", multiValue),\n            new FloatMinAggregatorFactory(\"singleFloatMin\", singleValue),\n            new FloatMinAggregatorFactory(\"multiFloatMin\", multiValue),\n\n            new LongSumAggregatorFactory(\"singleLongSum\", singleValue),\n            new LongSumAggregatorFactory(\"multiLongSum\", multiValue),\n            new LongMaxAggregatorFactory(\"singleLongMax\", singleValue),\n            new LongMaxAggregatorFactory(\"multiLongMax\", multiValue),\n            new LongMinAggregatorFactory(\"singleLongMin\", singleValue),\n            new LongMinAggregatorFactory(\"multiLongMin\", multiValue),\n\n            new LongSumAggregatorFactory(\"count\", \"count\")\n        )\n        .build();\n\n    Sequence<ResultRow> seq = aggregationTestHelper.runQueryOnSegmentsObjs(segments, query);\n    Row result = Iterables.getOnlyElement(seq.toList()).toMapBasedRow(query);\n\n    Assert.assertEquals(numRows, result.getMetric(\"count\").longValue());\n    \n    Assert.assertEquals(singleValueSum, result.getMetric(\"singleDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueSum, result.getMetric(\"multiDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMax, result.getMetric(\"singleDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMax, result.getMetric(\"multiDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMin, result.getMetric(\"singleDoubleMin\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMin, result.getMetric(\"multiDoubleMin\").doubleValue(), 0.0001d);\n\n    Assert.assertEquals(singleValueSum, result.getMetric(\"singleFloatSum\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueSum, result.getMetric(\"multiFloatSum\").floatValue(), 0.0001f);\n    Assert.assertEquals(singleValueMax, result.getMetric(\"singleFloatMax\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueMax, result.getMetric(\"multiFloatMax\").floatValue(), 0.0001f);\n    Assert.assertEquals(singleValueMin, result.getMetric(\"singleFloatMin\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueMin, result.getMetric(\"multiFloatMin\").floatValue(), 0.0001f);\n\n    Assert.assertEquals((long) singleValueSum, result.getMetric(\"singleLongSum\").longValue());\n    Assert.assertEquals((long) multiValueSum, result.getMetric(\"multiLongSum\").longValue());\n    Assert.assertEquals((long) singleValueMax, result.getMetric(\"singleLongMax\").longValue());\n    Assert.assertEquals((long) multiValueMax, result.getMetric(\"multiLongMax\").longValue());\n    Assert.assertEquals((long) singleValueMin, result.getMetric(\"singleLongMin\").longValue());\n    Assert.assertEquals((long) multiValueMin, result.getMetric(\"multiLongMin\").longValue());\n  }\n","date":"2019-08-28 07:10:59","endLine":199,"groupId":"106973","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupBy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1b/821b370822e09e2d99c6ce06ba522e6a35f62f.src","preCode":"  public void testGroupBy()\n  {\n    GroupByQuery query = new GroupByQuery.Builder()\n        .setDataSource(\"test\")\n        .setGranularity(Granularities.ALL)\n        .setInterval(\"1970/2050\")\n        .setAggregatorSpecs(\n            new DoubleSumAggregatorFactory(\"singleDoubleSum\", singleValue),\n            new DoubleSumAggregatorFactory(\"multiDoubleSum\", multiValue),\n            new DoubleMaxAggregatorFactory(\"singleDoubleMax\", singleValue),\n            new DoubleMaxAggregatorFactory(\"multiDoubleMax\", multiValue),\n            new DoubleMinAggregatorFactory(\"singleDoubleMin\", singleValue),\n            new DoubleMinAggregatorFactory(\"multiDoubleMin\", multiValue),\n\n            new FloatSumAggregatorFactory(\"singleFloatSum\", singleValue),\n            new FloatSumAggregatorFactory(\"multiFloatSum\", multiValue),\n            new FloatMaxAggregatorFactory(\"singleFloatMax\", singleValue),\n            new FloatMaxAggregatorFactory(\"multiFloatMax\", multiValue),\n            new FloatMinAggregatorFactory(\"singleFloatMin\", singleValue),\n            new FloatMinAggregatorFactory(\"multiFloatMin\", multiValue),\n\n            new LongSumAggregatorFactory(\"singleLongSum\", singleValue),\n            new LongSumAggregatorFactory(\"multiLongSum\", multiValue),\n            new LongMaxAggregatorFactory(\"singleLongMax\", singleValue),\n            new LongMaxAggregatorFactory(\"multiLongMax\", multiValue),\n            new LongMinAggregatorFactory(\"singleLongMin\", singleValue),\n            new LongMinAggregatorFactory(\"multiLongMin\", multiValue),\n\n            new LongSumAggregatorFactory(\"count\", \"count\")\n        )\n        .build();\n\n    Sequence<ResultRow> seq = aggregationTestHelper.runQueryOnSegmentsObjs(segments, query);\n    Row result = Iterables.getOnlyElement(seq.toList()).toMapBasedRow(query);\n\n    Assert.assertEquals(numRows, result.getMetric(\"count\").longValue());\n    \n    Assert.assertEquals(singleValueSum, result.getMetric(\"singleDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueSum, result.getMetric(\"multiDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMax, result.getMetric(\"singleDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMax, result.getMetric(\"multiDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMin, result.getMetric(\"singleDoubleMin\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMin, result.getMetric(\"multiDoubleMin\").doubleValue(), 0.0001d);\n\n    Assert.assertEquals(singleValueSum, result.getMetric(\"singleFloatSum\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueSum, result.getMetric(\"multiFloatSum\").floatValue(), 0.0001f);\n    Assert.assertEquals(singleValueMax, result.getMetric(\"singleFloatMax\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueMax, result.getMetric(\"multiFloatMax\").floatValue(), 0.0001f);\n    Assert.assertEquals(singleValueMin, result.getMetric(\"singleFloatMin\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueMin, result.getMetric(\"multiFloatMin\").floatValue(), 0.0001f);\n\n    Assert.assertEquals((long) singleValueSum, result.getMetric(\"singleLongSum\").longValue());\n    Assert.assertEquals((long) multiValueSum, result.getMetric(\"multiLongSum\").longValue());\n    Assert.assertEquals((long) singleValueMax, result.getMetric(\"singleLongMax\").longValue());\n    Assert.assertEquals((long) multiValueMax, result.getMetric(\"multiLongMax\").longValue());\n    Assert.assertEquals((long) singleValueMin, result.getMetric(\"singleLongMin\").longValue());\n    Assert.assertEquals((long) multiValueMin, result.getMetric(\"multiLongMin\").longValue());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/StringColumnAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"N"},{"authorDate":"2020-06-19 00:47:07","commitOrder":3,"curCode":"  public void testTimeseries()\n  {\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(\"test\")\n                                  .granularity(Granularities.ALL)\n                                  .intervals(\"1970/2050\")\n                                  .aggregators(\n                                      new DoubleSumAggregatorFactory(\"singleDoubleSum\", singleValue),\n                                      new DoubleSumAggregatorFactory(\"multiDoubleSum\", multiValue),\n                                      new DoubleMaxAggregatorFactory(\"singleDoubleMax\", singleValue),\n                                      new DoubleMaxAggregatorFactory(\"multiDoubleMax\", multiValue),\n                                      new DoubleMinAggregatorFactory(\"singleDoubleMin\", singleValue),\n                                      new DoubleMinAggregatorFactory(\"multiDoubleMin\", multiValue),\n\n                                      new FloatSumAggregatorFactory(\"singleFloatSum\", singleValue),\n                                      new FloatSumAggregatorFactory(\"multiFloatSum\", multiValue),\n                                      new FloatMaxAggregatorFactory(\"singleFloatMax\", singleValue),\n                                      new FloatMaxAggregatorFactory(\"multiFloatMax\", multiValue),\n                                      new FloatMinAggregatorFactory(\"singleFloatMin\", singleValue),\n                                      new FloatMinAggregatorFactory(\"multiFloatMin\", multiValue),\n\n                                      new LongSumAggregatorFactory(\"singleLongSum\", singleValue),\n                                      new LongSumAggregatorFactory(\"multiLongSum\", multiValue),\n                                      new LongMaxAggregatorFactory(\"singleLongMax\", singleValue),\n                                      new LongMaxAggregatorFactory(\"multiLongMax\", multiValue),\n                                      new LongMinAggregatorFactory(\"singleLongMin\", singleValue),\n                                      new LongMinAggregatorFactory(\"multiLongMin\", multiValue),\n                                      \n                                      new LongSumAggregatorFactory(\"count\", \"count\")\n                                  )\n                                  .build();\n\n    Sequence seq = AggregationTestHelper.createTimeseriesQueryAggregationTestHelper(Collections.emptyList(), tempFolder)\n                                        .runQueryOnSegmentsObjs(segments, query);\n    TimeseriesResultValue result = ((Result<TimeseriesResultValue>) Iterables.getOnlyElement(seq.toList())).getValue();\n\n    Assert.assertEquals(numRows, result.getLongMetric(\"count\").longValue());\n    Assert.assertEquals(singleValueSum, result.getDoubleMetric(\"singleDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueSum, result.getDoubleMetric(\"multiDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMax, result.getDoubleMetric(\"singleDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMax, result.getDoubleMetric(\"multiDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMin, result.getDoubleMetric(\"singleDoubleMin\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMin, result.getDoubleMetric(\"multiDoubleMin\").doubleValue(), 0.0001d);\n\n    Assert.assertEquals(singleValueSum, result.getFloatMetric(\"singleFloatSum\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueSum, result.getFloatMetric(\"multiFloatSum\").floatValue(), 0.0001f);\n    Assert.assertEquals(singleValueMax, result.getFloatMetric(\"singleFloatMax\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueMax, result.getFloatMetric(\"multiFloatMax\").floatValue(), 0.0001f);\n    Assert.assertEquals(singleValueMin, result.getFloatMetric(\"singleFloatMin\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueMin, result.getFloatMetric(\"multiFloatMin\").floatValue(), 0.0001f);\n\n    Assert.assertEquals((long) singleValueSum, result.getLongMetric(\"singleLongSum\").longValue());\n    Assert.assertEquals((long) multiValueSum, result.getLongMetric(\"multiLongSum\").longValue());\n    Assert.assertEquals((long) singleValueMax, result.getLongMetric(\"singleLongMax\").longValue());\n    Assert.assertEquals((long) multiValueMax, result.getLongMetric(\"multiLongMax\").longValue());\n    Assert.assertEquals((long) singleValueMin, result.getLongMetric(\"singleLongMin\").longValue());\n    Assert.assertEquals((long) multiValueMin, result.getLongMetric(\"multiLongMin\").longValue());\n  }\n","date":"2020-06-19 00:47:07","endLine":259,"groupId":"106973","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testTimeseries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/30/419b04740fa3ef9852a79b58f3fa3214150658.src","preCode":"  public void testTimeseries()\n  {\n    TimeseriesQuery query = Druids.newTimeseriesQueryBuilder()\n                                  .dataSource(\"test\")\n                                  .granularity(Granularities.ALL)\n                                  .intervals(\"1970/2050\")\n                                  .aggregators(\n                                      new DoubleSumAggregatorFactory(\"singleDoubleSum\", singleValue),\n                                      new DoubleSumAggregatorFactory(\"multiDoubleSum\", multiValue),\n                                      new DoubleMaxAggregatorFactory(\"singleDoubleMax\", singleValue),\n                                      new DoubleMaxAggregatorFactory(\"multiDoubleMax\", multiValue),\n                                      new DoubleMinAggregatorFactory(\"singleDoubleMin\", singleValue),\n                                      new DoubleMinAggregatorFactory(\"multiDoubleMin\", multiValue),\n\n                                      new FloatSumAggregatorFactory(\"singleFloatSum\", singleValue),\n                                      new FloatSumAggregatorFactory(\"multiFloatSum\", multiValue),\n                                      new FloatMaxAggregatorFactory(\"singleFloatMax\", singleValue),\n                                      new FloatMaxAggregatorFactory(\"multiFloatMax\", multiValue),\n                                      new FloatMinAggregatorFactory(\"singleFloatMin\", singleValue),\n                                      new FloatMinAggregatorFactory(\"multiFloatMin\", multiValue),\n\n                                      new LongSumAggregatorFactory(\"singleLongSum\", singleValue),\n                                      new LongSumAggregatorFactory(\"multiLongSum\", multiValue),\n                                      new LongMaxAggregatorFactory(\"singleLongMax\", singleValue),\n                                      new LongMaxAggregatorFactory(\"multiLongMax\", multiValue),\n                                      new LongMinAggregatorFactory(\"singleLongMin\", singleValue),\n                                      new LongMinAggregatorFactory(\"multiLongMin\", multiValue),\n                                      \n                                      new LongSumAggregatorFactory(\"count\", \"count\")\n                                  )\n                                  .build();\n\n    Sequence seq = AggregationTestHelper.createTimeseriesQueryAggregationTestHelper(Collections.EMPTY_LIST, tempFolder)\n                                        .runQueryOnSegmentsObjs(segments, query);\n    TimeseriesResultValue result = ((Result<TimeseriesResultValue>) Iterables.getOnlyElement(seq.toList())).getValue();\n\n    Assert.assertEquals(numRows, result.getLongMetric(\"count\").longValue());\n    Assert.assertEquals(singleValueSum, result.getDoubleMetric(\"singleDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueSum, result.getDoubleMetric(\"multiDoubleSum\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMax, result.getDoubleMetric(\"singleDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMax, result.getDoubleMetric(\"multiDoubleMax\").doubleValue(), 0.0001d);\n    Assert.assertEquals(singleValueMin, result.getDoubleMetric(\"singleDoubleMin\").doubleValue(), 0.0001d);\n    Assert.assertEquals(multiValueMin, result.getDoubleMetric(\"multiDoubleMin\").doubleValue(), 0.0001d);\n\n    Assert.assertEquals(singleValueSum, result.getFloatMetric(\"singleFloatSum\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueSum, result.getFloatMetric(\"multiFloatSum\").floatValue(), 0.0001f);\n    Assert.assertEquals(singleValueMax, result.getFloatMetric(\"singleFloatMax\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueMax, result.getFloatMetric(\"multiFloatMax\").floatValue(), 0.0001f);\n    Assert.assertEquals(singleValueMin, result.getFloatMetric(\"singleFloatMin\").floatValue(), 0.0001f);\n    Assert.assertEquals(multiValueMin, result.getFloatMetric(\"multiFloatMin\").floatValue(), 0.0001f);\n\n    Assert.assertEquals((long) singleValueSum, result.getLongMetric(\"singleLongSum\").longValue());\n    Assert.assertEquals((long) multiValueSum, result.getLongMetric(\"multiLongSum\").longValue());\n    Assert.assertEquals((long) singleValueMax, result.getLongMetric(\"singleLongMax\").longValue());\n    Assert.assertEquals((long) multiValueMax, result.getLongMetric(\"multiLongMax\").longValue());\n    Assert.assertEquals((long) singleValueMin, result.getLongMetric(\"singleLongMin\").longValue());\n    Assert.assertEquals((long) multiValueMin, result.getLongMetric(\"multiLongMin\").longValue());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/StringColumnAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"}],"commitId":"2c384b61ff47f858a0adb6f8b389c84f2acc84d1","commitMessage":"@@@IntelliJ inspection and checkstyle rule for \"Collection.EMPTY_* field accesses replaceable with Collections.empty*()\" (#9690)\n\n* IntelliJ inspection and checkstyle rule for \"Collection.EMPTY_* field accesses replaceable with Collections.empty*()\"\n\n* Reverted checkstyle rule\n\n* Added tests to pass CI\n\n* Codestyle","date":"2020-06-19 00:47:07","modifiedFileCount":"33","status":"M","submitter":"Aleksey Plekhanov"}]
