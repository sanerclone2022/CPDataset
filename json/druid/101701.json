[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(AGGS(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":1026,"groupId":"21177","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByAndOrderByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(AGGS(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":996,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            EXPRESSION_VIRTUAL_COLUMN(\"d0:v\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(EXPRESSION_FILTER(\"((floor((\\\"m1\\\" / 2)) * 2) > -1)\"))\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"d0:v\", \"d0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(AGGS(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":2896,"groupId":"21177","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionFilteringAndGrouping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d7/379ded006b366f1ea8ef06ae925a08ff61040e.src","preCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            EXPRESSION_VIRTUAL_COLUMN(\"d0:v\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(EXPRESSION_FILTER(\"((floor((\\\"m1\\\" / 2)) * 2) > -1)\"))\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"d0:v\", \"d0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(AGGS(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2853,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-02-24 12:10:31","codes":[{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensionSpec(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":865,"groupId":"14883","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByAndOrderByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(AGGS(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":835,"status":"M"},{"authorDate":"2019-02-24 12:10:31","commitOrder":2,"curCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expression_Virtual_Column(\"d0:v\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(expressionFilter(\"((floor((\\\"m1\\\" / 2)) * 2) > -1)\"))\n                        .setDimensions(dimensionSpec(new DefaultDimensionSpec(\"d0:v\", \"d0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","date":"2019-02-24 12:10:31","endLine":2748,"groupId":"18163","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionFilteringAndGrouping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/6030fb8d73521776662c2a97e0f873c4ad7d0f.src","preCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(QSS(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            EXPRESSION_VIRTUAL_COLUMN(\"d0:v\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(EXPRESSION_FILTER(\"((floor((\\\"m1\\\" / 2)) * 2) > -1)\"))\n                        .setDimensions(DIMS(new DefaultDimensionSpec(\"d0:v\", \"d0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(AGGS(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2705,"status":"M"}],"commitId":"8b803cbc22b15799fd0526de8d6d0eea155ad733","commitMessage":"@@@Added checkstyle for \"Methods starting with Capital Letters\"  (#7118)\n\n* Added checkstyle for \"Methods starting with Capital Letters\" and changed the method names violating this.\n\n* Un-abbreviate the method names in the calcite tests\n\n* Fixed checkstyle errors\n\n* Changed asserts position in the code\n","date":"2019-02-24 12:10:31","modifiedFileCount":"24","status":"M","submitter":"Himanshu Pandey"},{"authorTime":"2019-03-12 02:37:58","codes":[{"authorDate":"2019-03-12 02:37:58","commitOrder":3,"curCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":865,"groupId":"1323","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByAndOrderByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensionSpec(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":835,"status":"M"},{"authorDate":"2019-03-12 02:37:58","commitOrder":3,"curCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\"v0\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(bound(\"v0\", \"-1\", null, true, false, null, StringComparators.NUMERIC))\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"v0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"v0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":2757,"groupId":"4991","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionFilteringAndGrouping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expression_Virtual_Column(\"d0:v\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(expressionFilter(\"((floor((\\\"m1\\\" / 2)) * 2) > -1)\"))\n                        .setDimensions(dimensionSpec(new DefaultDimensionSpec(\"d0:v\", \"d0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2714,"status":"M"}],"commitId":"d7ba19d477732578fc310831ed28365b36332752","commitMessage":"@@@sql.  filters.  and virtual columns  (#6902)\n\n* refactor sql planning to re-use expression virtual columns when possible when constructing a DruidQuery.  allowing virtual columns to be defined in filter expressions.  and making resulting native druid queries more concise. also minor refactor of built-in sql aggregators to maximize code re-use\n\n* fix it\n\n* fix it in the right place\n\n* fixup for base64 stuff\n\n* fixup tests\n\n* fix merge conflict on import order\n\n* fixup\n\n* fix imports\n\n* fix tests\n\n* review comments\n\n* refactor\n\n* re-arrange\n\n* better javadoc\n\n* fixup merge\n\n* fixup tests\n\n* fix accidental changes\n","date":"2019-03-12 02:37:58","modifiedFileCount":"33","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-07-13 03:54:07","codes":[{"authorDate":"2019-03-12 02:37:58","commitOrder":4,"curCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":865,"groupId":"1323","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByAndOrderByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":835,"status":"N"},{"authorDate":"2019-07-13 03:54:07","commitOrder":4,"curCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\"v0\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(bound(\"v0\", \"-1\", null, true, false, null, StringComparators.NUMERIC))\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"v0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"v0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","date":"2019-07-13 03:54:07","endLine":2925,"groupId":"4991","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionFilteringAndGrouping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/00/9c8ec103bf43a4fe3c4756281f89540f662955.src","preCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\"v0\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(bound(\"v0\", \"-1\", null, true, false, null, StringComparators.NUMERIC))\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"v0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"v0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2879,"status":"M"}],"commitId":"ffa25b78321a56b210a8ad5b6c9ca61b3b737153","commitMessage":"@@@Query vectorization. (#6794)\n\n* Benchmarks: New SqlBenchmark.  add caching & vectorization to some others.\n\n- Introduce a new SqlBenchmark geared towards benchmarking a wide\n  variety of SQL queries. Rename the old SqlBenchmark to\n  SqlVsNativeBenchmark.\n- Add (optional) caching to SegmentGenerator to enable easier\n  benchmarking of larger segments.\n- Add vectorization to FilteredAggregatorBenchmark and GroupByBenchmark.\n\n* Query vectorization.\n\nThis patch includes vectorized timeseries and groupBy engines.  as well\nas some analogs of your favorite Druid classes:\n\n- VectorCursor is like Cursor. (It comes from StorageAdapter.makeVectorCursor.)\n- VectorColumnSelectorFactory is like ColumnSelectorFactory.  and it has\n  methods to create analogs of the column selectors you know and love.\n- VectorOffset and ReadableVectorOffset are like Offset and ReadableOffset.\n- VectorAggregator is like BufferAggregator.\n- VectorValueMatcher is like ValueMatcher.\n\nThere are some noticeable differences between vectorized and regular\nexecution:\n\n- Unlike regular cursors.  vector cursors do not understand time\n  granularity. They expect query engines to handle this on their own. \n  which a new VectorCursorGranularizer class helps with. This is to\n  avoid too much batch-splitting and to respect the fact that vector\n  selectors are somewhat more heavyweight than regular selectors.\n- Unlike FilteredOffset.  FilteredVectorOffset does not leverage indexes\n  for filters that might partially support them (like an OR of one\n  filter that supports indexing and another that doesn't). I'm not sure\n  that this behavior is desirable anyway (it is potentially too eager)\n  but.  at any rate.  it'd be better to harmonize it between the two\n  classes. Potentially they should both do some different thing that\n  is smarter than what either of them is doing right now.\n- When vector cursors are created by QueryableIndexCursorSequenceBuilder. \n  they use a morphing binary-then-linear search to find their start and\n  end rows.  rather than linear search.\n\nLimitations in this patch are:\n\n- Only timeseries and groupBy have vectorized engines.\n- GroupBy doesn't handle multi-value dimensions yet.\n- Vector cursors cannot handle virtual columns or descending order.\n- Only some filters have vectorized matchers: \"selector\".  \"bound\".  \"in\". \n  \"like\".  \"regex\".  \"search\".  \"and\".  \"or\".  and \"not\".\n- Only some aggregators have vectorized implementations: \"count\". \n  \"doubleSum\".  \"floatSum\".  \"longSum\".  \"hyperUnique\".  and \"filtered\".\n- Dimension specs other than \"default\" don't work yet (no extraction\n  functions or filtered dimension specs).\n\nCurrently.  the testing strategy includes adding vectorization-enabled\ntests to TimeseriesQueryRunnerTest.  GroupByQueryRunnerTest. \nGroupByTimeseriesQueryRunnerTest.  CalciteQueryTest.  and all of the\nfiltering tests that extend BaseFilterTest. In all of those classes. \nthere are some test cases that don't support vectorization. They are\nmarked by special function calls like \"cannotVectorize\" or \"skipVectorize\"\nthat tell the test harness to either expect an exception or to skip the\ntest case.\n\nTesting should be expanded in the future -- a project in and of itself.\n\nRelated to #3011.\n\n* WIP\n\n* Adjustments for unused things.\n\n* Adjust javadocs.\n\n* DimensionDictionarySelector adjustments.\n\n* Add \"clone\" to BatchIteratorAdapter.\n\n* ValueMatcher javadocs.\n\n* Fix benchmark.\n\n* Fixups post-merge.\n\n* Expect exception on testGroupByWithStringVirtualColumn for IncrementalIndex.\n\n* BloomDimFilterSqlTest: Tag two non-vectorizable tests.\n\n* Minor adjustments.\n\n* Update surefire.  bump up Xmx in Travis.\n\n* Some more adjustments.\n\n* Javadoc adjustments\n\n* AggregatorAdapters adjustments.\n\n* Additional comments.\n\n* Remove switching search.\n\n* Only missiles.\n","date":"2019-07-13 03:54:07","modifiedFileCount":"143","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-03-10 08:48:29","codes":[{"authorDate":"2019-03-12 02:37:58","commitOrder":5,"curCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","date":"2019-03-12 02:37:58","endLine":865,"groupId":"1323","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByAndOrderByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/8c276266e32af9fa10564200b9d46f4c640c4f.src","preCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":835,"status":"N"},{"authorDate":"2020-03-10 08:48:29","commitOrder":5,"curCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\"v0\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(bound(\"v0\", \"-1\", null, true, false, null, StringComparators.NUMERIC))\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","date":"2020-03-10 08:48:29","endLine":4644,"groupId":"4991","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionFilteringAndGrouping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/76/cd55b72e7df3dc0e964e31bd267448f02f3a1f.src","preCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\"v0\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(bound(\"v0\", \"-1\", null, true, false, null, StringComparators.NUMERIC))\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"v0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"v0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4598,"status":"M"}],"commitId":"f8b1f2f7f3fe6d49cbb5f19bfe6196a5b716b3ef","commitMessage":"@@@fix issue when distinct grouping dimensions are optimized into the same virtual column expression (#9429)\n\n* fix issue when distinct grouping dimensions are optimized into the same virtual column expression\n\n* fix tests\n\n* more better\n\n* fixes","date":"2020-03-10 08:48:29","modifiedFileCount":"8","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-08-22 05:11:54","codes":[{"authorDate":"2020-08-22 05:11:54","commitOrder":6,"curCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            DefaultLimitSpec\n                                .builder()\n                                .orderBy(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                )\n                                .build()\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","date":"2020-08-22 05:11:54","endLine":2988,"groupId":"12380","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByAndOrderByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/05/ea116bfede6e23d9f83cf78e54979557d181b2.src","preCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2958,"status":"M"},{"authorDate":"2020-08-22 05:11:54","commitOrder":6,"curCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\"v0\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(bound(\"v0\", \"-1\", null, true, false, null, StringComparators.NUMERIC))\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            DefaultLimitSpec\n                                .builder()\n                                .orderBy(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                )\n                                .build()\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","date":"2020-08-22 05:11:54","endLine":5484,"groupId":"4991","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionFilteringAndGrouping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/05/ea116bfede6e23d9f83cf78e54979557d181b2.src","preCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\"v0\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(bound(\"v0\", \"-1\", null, true, false, null, StringComparators.NUMERIC))\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            new DefaultLimitSpec(\n                                ImmutableList.of(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                ),\n                                Integer.MAX_VALUE\n                            )\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":5438,"status":"M"}],"commitId":"0910d22f487ab2ac603708d51a16da0d8bf942dc","commitMessage":"@@@Add SQL \"OFFSET\" clause. (#10279)\n\n* Add SQL \"OFFSET\" clause.\n\nUnder the hood.  this uses the new offset features from #10233 (Scan)\nand #10235 (GroupBy). Since Timeseries and TopN queries do not currently\nhave an offset feature.  SQL planning will switch from one of those to\nScan or GroupBy if users add an OFFSET.\n\nIncludes a refactoring to harmonize offset and limit planning using an\nOffsetLimit wrapper class. This is useful because it ensures that the\nvarious places that need to deal with offset and limit collapsing all\nbehave the same way.  using its \"andThen\" method.\n\n* Fix test and add another test.","date":"2020-08-22 05:11:54","modifiedFileCount":"6","status":"M","submitter":"Gian Merlino"},{"authorTime":"2020-09-27 14:30:14","codes":[{"authorDate":"2020-08-22 05:11:54","commitOrder":7,"curCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            DefaultLimitSpec\n                                .builder()\n                                .orderBy(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                )\n                                .build()\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","date":"2020-08-22 05:11:54","endLine":2988,"groupId":"12380","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByAndOrderByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/05/ea116bfede6e23d9f83cf78e54979557d181b2.src","preCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            DefaultLimitSpec\n                                .builder()\n                                .orderBy(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                )\n                                .build()\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2958,"status":"N"},{"authorDate":"2020-09-27 14:30:14","commitOrder":7,"curCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    \r\n    if (NullHandling.sqlCompatible()) {\n      cannotVectorize();\n    }\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\"v0\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(bound(\"v0\", \"-1\", null, true, false, null, StringComparators.NUMERIC))\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            DefaultLimitSpec\n                                .builder()\n                                .orderBy(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                )\n                                .build()\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","date":"2020-09-27 14:30:14","endLine":5891,"groupId":"4991","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionFilteringAndGrouping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d1/c75ee8ce557df7b4daffc18ee4621b7c680636.src","preCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    \r\n    cannotVectorize();\n\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\"v0\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(bound(\"v0\", \"-1\", null, true, false, null, StringComparators.NUMERIC))\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            DefaultLimitSpec\n                                .builder()\n                                .orderBy(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                )\n                                .build()\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":5844,"status":"M"}],"commitId":"3d700a5e31eaea131f1152e90b6c78a572edd7fc","commitMessage":"@@@vectorize remaining math expressions (#10429)\n\n* vectorize remaining math expressions\n\n* fixes\n\n* remove cannotVectorize() where no longer true\n\n* disable vectorized groupby for numeric columns with nulls\n\n* fixes","date":"2020-09-27 14:30:14","modifiedFileCount":"11","status":"M","submitter":"Clint Wylie"},{"authorTime":"2020-10-06 12:53:53","codes":[{"authorDate":"2020-08-22 05:11:54","commitOrder":8,"curCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            DefaultLimitSpec\n                                .builder()\n                                .orderBy(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                )\n                                .build()\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","date":"2020-08-22 05:11:54","endLine":2988,"groupId":"101701","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testGroupByAndOrderByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/05/ea116bfede6e23d9f83cf78e54979557d181b2.src","preCode":"  public void testGroupByAndOrderByAlias() throws Exception\n  {\n    testQuery(\n        \"SELECT cnt AS theCnt, COUNT(*) FROM druid.foo GROUP BY theCnt ORDER BY theCnt ASC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"cnt\", \"d0\", ValueType.LONG)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            DefaultLimitSpec\n                                .builder()\n                                .orderBy(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.ASCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                )\n                                .build()\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1L, 6L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2958,"status":"N"},{"authorDate":"2020-10-06 12:53:53","commitOrder":8,"curCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\"v0\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(bound(\"v0\", \"-1\", null, true, false, null, StringComparators.NUMERIC))\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            DefaultLimitSpec\n                                .builder()\n                                .orderBy(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                )\n                                .build()\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","date":"2020-10-06 12:53:53","endLine":5887,"groupId":"101701","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpressionFilteringAndGrouping","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5e/116c7aaa6c7df786e0a506c24d8a38ba8e9365.src","preCode":"  public void testExpressionFilteringAndGrouping() throws Exception\n  {\n    \r\n    if (NullHandling.sqlCompatible()) {\n      cannotVectorize();\n    }\n    testQuery(\n        \"SELECT\\n\"\n        + \"  FLOOR(m1 / 2) * 2,\\n\"\n        + \"  COUNT(*)\\n\"\n        + \"FROM druid.foo\\n\"\n        + \"WHERE FLOOR(m1 / 2) * 2 > -1\\n\"\n        + \"GROUP BY FLOOR(m1 / 2) * 2\\n\"\n        + \"ORDER BY 1 DESC\",\n        ImmutableList.of(\n            GroupByQuery.builder()\n                        .setDataSource(CalciteTests.DATASOURCE1)\n                        .setInterval(querySegmentSpec(Filtration.eternity()))\n                        .setGranularity(Granularities.ALL)\n                        .setVirtualColumns(\n                            expressionVirtualColumn(\"v0\", \"(floor((\\\"m1\\\" / 2)) * 2)\", ValueType.FLOAT)\n                        )\n                        .setDimFilter(bound(\"v0\", \"-1\", null, true, false, null, StringComparators.NUMERIC))\n                        .setDimensions(dimensions(new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.FLOAT)))\n                        .setAggregatorSpecs(aggregators(new CountAggregatorFactory(\"a0\")))\n                        .setLimitSpec(\n                            DefaultLimitSpec\n                                .builder()\n                                .orderBy(\n                                    new OrderByColumnSpec(\n                                        \"d0\",\n                                        OrderByColumnSpec.Direction.DESCENDING,\n                                        StringComparators.NUMERIC\n                                    )\n                                )\n                                .build()\n                        )\n                        .setContext(QUERY_CONTEXT_DEFAULT)\n                        .build()\n        ),\n        ImmutableList.of(\n            new Object[]{6.0f, 1L},\n            new Object[]{4.0f, 2L},\n            new Object[]{2.0f, 2L},\n            new Object[]{0.0f, 1L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":5844,"status":"M"}],"commitId":"207ef310f221f105e534914cdcb3650748a23c71","commitMessage":"@@@vectorized group by support for nullable numeric columns (#10441)\n\n* vectorized group by support for numeric null columns\n\n* revert unintended change\n\n* adjust\n\n* review stuffs","date":"2020-10-06 12:53:53","modifiedFileCount":"10","status":"M","submitter":"Clint Wylie"}]
