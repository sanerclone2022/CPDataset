[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testPathExtraction()\n  {\n    String regex = \"/([^/]+)/\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = Sets.newLinkedHashSet();\n\n    for (String path : paths) {\n      extracted.add(extractionFn.apply(path));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"druid\", \"dash\"));\n    Assert.assertEquals(expected, extracted);\n  }\n","date":"2018-08-31 00:56:26","endLine":69,"groupId":"7532","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPathExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/96/95a933fa3bc995998d3866240f5e646de5fdd6.src","preCode":"  public void testPathExtraction()\n  {\n    String regex = \"/([^/]+)/\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = Sets.newLinkedHashSet();\n\n    for (String path : paths) {\n      extracted.add(extractionFn.apply(path));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"druid\", \"dash\"));\n    Assert.assertEquals(expected, extracted);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/RegexDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testDeeperPathExtraction()\n  {\n    String regex = \"^/([^/]+/[^/]+)(/|$)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = Sets.newLinkedHashSet();\n\n    for (String path : paths) {\n      extracted.add(extractionFn.apply(path));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(\n        ImmutableList.of(\n            \"druid/prod\", \"druid/demo\",\n            \"dash/aloe\", \"dash/baloo\"\n        )\n    );\n    Assert.assertEquals(expected, extracted);\n  }\n","date":"2018-08-31 00:56:26","endLine":89,"groupId":"7532","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeeperPathExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/96/95a933fa3bc995998d3866240f5e646de5fdd6.src","preCode":"  public void testDeeperPathExtraction()\n  {\n    String regex = \"^/([^/]+/[^/]+)(/|$)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = Sets.newLinkedHashSet();\n\n    for (String path : paths) {\n      extracted.add(extractionFn.apply(path));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(\n        ImmutableList.of(\n            \"druid/prod\", \"druid/demo\",\n            \"dash/aloe\", \"dash/baloo\"\n        )\n    );\n    Assert.assertEquals(expected, extracted);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/RegexDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testPathExtraction()\n  {\n    String regex = \"/([^/]+)/\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = new LinkedHashSet<>();\n\n    for (String path : paths) {\n      extracted.add(extractionFn.apply(path));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"druid\", \"dash\"));\n    Assert.assertEquals(expected, extracted);\n  }\n","date":"2018-10-29 20:02:43","endLine":70,"groupId":"7532","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPathExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/757983f53cf24e11186f24769302611686d11c.src","preCode":"  public void testPathExtraction()\n  {\n    String regex = \"/([^/]+)/\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = Sets.newLinkedHashSet();\n\n    for (String path : paths) {\n      extracted.add(extractionFn.apply(path));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"druid\", \"dash\"));\n    Assert.assertEquals(expected, extracted);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/RegexDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testDeeperPathExtraction()\n  {\n    String regex = \"^/([^/]+/[^/]+)(/|$)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = new LinkedHashSet<>();\n\n    for (String path : paths) {\n      extracted.add(extractionFn.apply(path));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(\n        ImmutableList.of(\n            \"druid/prod\", \"druid/demo\",\n            \"dash/aloe\", \"dash/baloo\"\n        )\n    );\n    Assert.assertEquals(expected, extracted);\n  }\n","date":"2018-10-29 20:02:43","endLine":90,"groupId":"7532","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeeperPathExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/757983f53cf24e11186f24769302611686d11c.src","preCode":"  public void testDeeperPathExtraction()\n  {\n    String regex = \"^/([^/]+/[^/]+)(/|$)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = Sets.newLinkedHashSet();\n\n    for (String path : paths) {\n      extracted.add(extractionFn.apply(path));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(\n        ImmutableList.of(\n            \"druid/prod\", \"druid/demo\",\n            \"dash/aloe\", \"dash/baloo\"\n        )\n    );\n    Assert.assertEquals(expected, extracted);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/RegexDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testPathExtraction()\n  {\n    String regex = \"/([^/]+)/\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = new LinkedHashSet<>();\n\n    for (String path : PATHS) {\n      extracted.add(extractionFn.apply(path));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"druid\", \"dash\"));\n    Assert.assertEquals(expected, extracted);\n  }\n","date":"2019-08-23 18:13:54","endLine":70,"groupId":"106726","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testPathExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/2dcc001be426c5c8191d8557c63de368b1eb40.src","preCode":"  public void testPathExtraction()\n  {\n    String regex = \"/([^/]+)/\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = new LinkedHashSet<>();\n\n    for (String path : paths) {\n      extracted.add(extractionFn.apply(path));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"druid\", \"dash\"));\n    Assert.assertEquals(expected, extracted);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/RegexDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testDeeperPathExtraction()\n  {\n    String regex = \"^/([^/]+/[^/]+)(/|$)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = new LinkedHashSet<>();\n\n    for (String path : PATHS) {\n      extracted.add(extractionFn.apply(path));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(\n        ImmutableList.of(\n            \"druid/prod\", \"druid/demo\",\n            \"dash/aloe\", \"dash/baloo\"\n        )\n    );\n    Assert.assertEquals(expected, extracted);\n  }\n","date":"2019-08-23 18:13:54","endLine":90,"groupId":"106726","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testDeeperPathExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/2dcc001be426c5c8191d8557c63de368b1eb40.src","preCode":"  public void testDeeperPathExtraction()\n  {\n    String regex = \"^/([^/]+/[^/]+)(/|$)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = new LinkedHashSet<>();\n\n    for (String path : paths) {\n      extracted.add(extractionFn.apply(path));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(\n        ImmutableList.of(\n            \"druid/prod\", \"druid/demo\",\n            \"dash/aloe\", \"dash/baloo\"\n        )\n    );\n    Assert.assertEquals(expected, extracted);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/RegexDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
