[{"authorTime":"2019-11-14 02:53:47","codes":[{"authorDate":"2019-11-14 02:53:47","commitOrder":1,"curCode":"  private static void assertVectorOffsetCanReset(\n      VectorValueSelector selector,\n      ImmutableBitmap bitmap,\n      NoFilterVectorOffset readAllVectors\n  )\n  {\n    boolean encounteredNull = false;\n    boolean nullVector[];\n\n    \r\n    while (!readAllVectors.isDone()) {\n      nullVector = selector.getNullVector();\n      for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n        Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n        encounteredNull |= nullVector[i];\n      }\n      readAllVectors.advance();\n    }\n    \r\n    readAllVectors.reset();\n    Assert.assertTrue(encounteredNull);\n    encounteredNull = false;\n    while (!readAllVectors.isDone()) {\n      nullVector = selector.getNullVector();\n      for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n        Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n        encounteredNull |= nullVector[i];\n      }\n      readAllVectors.advance();\n    }\n    Assert.assertTrue(encounteredNull);\n    readAllVectors.reset();\n  }\n","date":"2019-11-14 02:53:46","endLine":222,"groupId":"23513","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertVectorOffsetCanReset","params":"(VectorValueSelectorselector@ImmutableBitmapbitmap@NoFilterVectorOffsetreadAllVectors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/09/66b05c9b14abc5d88ec710926427ec8b8c504d.src","preCode":"  private static void assertVectorOffsetCanReset(\n      VectorValueSelector selector,\n      ImmutableBitmap bitmap,\n      NoFilterVectorOffset readAllVectors\n  )\n  {\n    boolean encounteredNull = false;\n    boolean nullVector[];\n\n    \r\n    while (!readAllVectors.isDone()) {\n      nullVector = selector.getNullVector();\n      for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n        Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n        encounteredNull |= nullVector[i];\n      }\n      readAllVectors.advance();\n    }\n    \r\n    readAllVectors.reset();\n    Assert.assertTrue(encounteredNull);\n    encounteredNull = false;\n    while (!readAllVectors.isDone()) {\n      nullVector = selector.getNullVector();\n      for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n        Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n        encounteredNull |= nullVector[i];\n      }\n      readAllVectors.advance();\n    }\n    Assert.assertTrue(encounteredNull);\n    readAllVectors.reset();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/NumericNullColumnSelectorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"},{"authorDate":"2019-11-14 02:53:47","commitOrder":1,"curCode":"  public static void assertVectorChillWhenOffsetsOverlap(\n      VectorValueSelector selector,\n      ImmutableBitmap bitmap,\n      NoFilterOffsetThatCanBeMangledToTestOverlapping readAllVectors\n  )\n  {\n    boolean encounteredNull = false;\n    boolean nullVector[];\n\n    \r\n    readAllVectors.mangleOffset(0);\n    nullVector = selector.getNullVector();\n    for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n      Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n      encounteredNull |= nullVector[i];\n    }\n    Assert.assertTrue(encounteredNull);\n    \r\n    readAllVectors.mangleOffset(1);\n\n    nullVector = selector.getNullVector();\n    for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n      Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n      encounteredNull |= nullVector[i];\n    }\n    readAllVectors.reset();\n\n    Assert.assertTrue(encounteredNull);\n  }\n","date":"2019-11-14 02:53:46","endLine":252,"groupId":"23514","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertVectorChillWhenOffsetsOverlap","params":"(VectorValueSelectorselector@ImmutableBitmapbitmap@NoFilterOffsetThatCanBeMangledToTestOverlappingreadAllVectors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/09/66b05c9b14abc5d88ec710926427ec8b8c504d.src","preCode":"  public static void assertVectorChillWhenOffsetsOverlap(\n      VectorValueSelector selector,\n      ImmutableBitmap bitmap,\n      NoFilterOffsetThatCanBeMangledToTestOverlapping readAllVectors\n  )\n  {\n    boolean encounteredNull = false;\n    boolean nullVector[];\n\n    \r\n    readAllVectors.mangleOffset(0);\n    nullVector = selector.getNullVector();\n    for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n      Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n      encounteredNull |= nullVector[i];\n    }\n    Assert.assertTrue(encounteredNull);\n    \r\n    readAllVectors.mangleOffset(1);\n\n    nullVector = selector.getNullVector();\n    for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n      Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n      encounteredNull |= nullVector[i];\n    }\n    readAllVectors.reset();\n\n    Assert.assertTrue(encounteredNull);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/NumericNullColumnSelectorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"B"}],"commitId":"9ed9a80b9d4b74df37523b3bca4ed23f0730fd93","commitMessage":"@@@optimize numeric column null value checking for low filter selectivity (more rows) (#8822)\n\n* use peekable iterator for numeric column selector null checking instead of bitmap.get for those sweet sweet nanoseconds\n\n* remove unused method\n\n* slight optimization i think\n\n* remove clone from wrappers since we do not use and is confusing\n\n* fixes and tests\n\n* int instead of Integer\n\n* fix it\n\n* fixes.  more tests\n\n* fix\n","date":"2019-11-14 02:53:46","modifiedFileCount":"13","status":"B","submitter":"Clint Wylie"},{"authorTime":"2020-02-11 06:25:26","codes":[{"authorDate":"2020-02-11 06:25:26","commitOrder":2,"curCode":"  private static void assertVectorOffsetCanReset(\n      VectorValueSelector selector,\n      ImmutableBitmap bitmap,\n      NoFilterVectorOffset readAllVectors\n  )\n  {\n    boolean encounteredNull = false;\n    boolean[] nullVector;\n\n    \r\n    while (!readAllVectors.isDone()) {\n      nullVector = selector.getNullVector();\n      for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n        Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n        encounteredNull |= nullVector[i];\n      }\n      readAllVectors.advance();\n    }\n    \r\n    readAllVectors.reset();\n    Assert.assertTrue(encounteredNull);\n    encounteredNull = false;\n    while (!readAllVectors.isDone()) {\n      nullVector = selector.getNullVector();\n      for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n        Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n        encounteredNull |= nullVector[i];\n      }\n      readAllVectors.advance();\n    }\n    Assert.assertTrue(encounteredNull);\n    readAllVectors.reset();\n  }\n","date":"2020-02-11 06:25:26","endLine":222,"groupId":"105643","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertVectorOffsetCanReset","params":"(VectorValueSelectorselector@ImmutableBitmapbitmap@NoFilterVectorOffsetreadAllVectors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/d494bc2033e1aff2b71459687967dcd358c153.src","preCode":"  private static void assertVectorOffsetCanReset(\n      VectorValueSelector selector,\n      ImmutableBitmap bitmap,\n      NoFilterVectorOffset readAllVectors\n  )\n  {\n    boolean encounteredNull = false;\n    boolean nullVector[];\n\n    \r\n    while (!readAllVectors.isDone()) {\n      nullVector = selector.getNullVector();\n      for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n        Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n        encounteredNull |= nullVector[i];\n      }\n      readAllVectors.advance();\n    }\n    \r\n    readAllVectors.reset();\n    Assert.assertTrue(encounteredNull);\n    encounteredNull = false;\n    while (!readAllVectors.isDone()) {\n      nullVector = selector.getNullVector();\n      for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n        Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n        encounteredNull |= nullVector[i];\n      }\n      readAllVectors.advance();\n    }\n    Assert.assertTrue(encounteredNull);\n    readAllVectors.reset();\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/NumericNullColumnSelectorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"},{"authorDate":"2020-02-11 06:25:26","commitOrder":2,"curCode":"  public static void assertVectorChillWhenOffsetsOverlap(\n      VectorValueSelector selector,\n      ImmutableBitmap bitmap,\n      NoFilterOffsetThatCanBeMangledToTestOverlapping readAllVectors\n  )\n  {\n    boolean encounteredNull = false;\n    boolean[] nullVector;\n\n    \r\n    readAllVectors.mangleOffset(0);\n    nullVector = selector.getNullVector();\n    for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n      Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n      encounteredNull |= nullVector[i];\n    }\n    Assert.assertTrue(encounteredNull);\n    \r\n    readAllVectors.mangleOffset(1);\n\n    nullVector = selector.getNullVector();\n    for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n      Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n      encounteredNull |= nullVector[i];\n    }\n    readAllVectors.reset();\n\n    Assert.assertTrue(encounteredNull);\n  }\n","date":"2020-02-11 06:25:26","endLine":252,"groupId":"105643","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertVectorChillWhenOffsetsOverlap","params":"(VectorValueSelectorselector@ImmutableBitmapbitmap@NoFilterOffsetThatCanBeMangledToTestOverlappingreadAllVectors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/d494bc2033e1aff2b71459687967dcd358c153.src","preCode":"  public static void assertVectorChillWhenOffsetsOverlap(\n      VectorValueSelector selector,\n      ImmutableBitmap bitmap,\n      NoFilterOffsetThatCanBeMangledToTestOverlapping readAllVectors\n  )\n  {\n    boolean encounteredNull = false;\n    boolean nullVector[];\n\n    \r\n    readAllVectors.mangleOffset(0);\n    nullVector = selector.getNullVector();\n    for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n      Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n      encounteredNull |= nullVector[i];\n    }\n    Assert.assertTrue(encounteredNull);\n    \r\n    readAllVectors.mangleOffset(1);\n\n    nullVector = selector.getNullVector();\n    for (int i = readAllVectors.getStartOffset(); i < readAllVectors.getCurrentVectorSize(); i++) {\n      Assert.assertEquals(bitmap.get(readAllVectors.getStartOffset() + i), nullVector[i]);\n      encounteredNull |= nullVector[i];\n    }\n    readAllVectors.reset();\n\n    Assert.assertTrue(encounteredNull);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/NumericNullColumnSelectorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"}],"commitId":"51d786493531bdb3240afb6367e8fe8001bfb9ec","commitMessage":"@@@Codestyle - use java style array declaration (#9338)\n\n* Codestyle - use java style array declaration\n\nReplaced C-style array declarations with java style declarations and marked\nthe intelliJ inspection as an error\n\n* cleanup test code\n","date":"2020-02-11 06:25:26","modifiedFileCount":"18","status":"M","submitter":"Suneet Saldanha"}]
