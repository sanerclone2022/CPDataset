[{"authorTime":"2020-08-11 06:18:55","codes":[{"authorDate":"2020-08-11 06:18:55","commitOrder":2,"curCode":"  public void testSimpleLongAggregations() throws Exception\n  {\n    testQuery(\n        \"SELECT  MIN(l1), MIN(cnt), MAX(l1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .aggregators(aggregators(\n                                new LongMinAggregatorFactory(\"a0\", \"l1\"),\n                                new LongMinAggregatorFactory(\"a1\", \"cnt\"),\n                                new LongMaxAggregatorFactory(\"a2\", \"l1\")\n                            ))\n                .context(TIMESERIES_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{0L, 1L, 325323L}\n        )\n    );\n  }\n","date":"2020-08-11 06:18:55","endLine":4820,"groupId":"16631","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleLongAggregations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/94/09f818693a35f2f3a96203cfca0c9d0498ad8d.src","preCode":"  public void testSimpleLongAggregations() throws Exception\n  {\n    testQuery(\n        \"SELECT  MIN(l1), MIN(cnt), MAX(l1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .aggregators(aggregators(\n                                new LongMinAggregatorFactory(\"a0\", \"l1\"),\n                                new LongMinAggregatorFactory(\"a1\", \"cnt\"),\n                                new LongMaxAggregatorFactory(\"a2\", \"l1\")\n                            ))\n                .context(TIMESERIES_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{0L, 1L, 325323L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4799,"status":"MB"},{"authorDate":"2020-08-11 06:18:55","commitOrder":2,"curCode":"  public void testSimpleFloatAggregations() throws Exception\n  {\n    testQuery(\n        \"SELECT  MIN(m1), MAX(m1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(aggregators(\n                      new FloatMinAggregatorFactory(\"a0\", \"m1\"),\n                      new FloatMaxAggregatorFactory(\"a1\", \"m1\")\n                  ))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1.0f, 6.0f}\n        )\n    );\n  }\n","date":"2020-08-11 06:18:55","endLine":4866,"groupId":"15727","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleFloatAggregations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/94/09f818693a35f2f3a96203cfca0c9d0498ad8d.src","preCode":"  public void testSimpleFloatAggregations() throws Exception\n  {\n    testQuery(\n        \"SELECT  MIN(m1), MAX(m1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(aggregators(\n                      new FloatMinAggregatorFactory(\"a0\", \"m1\"),\n                      new FloatMaxAggregatorFactory(\"a1\", \"m1\")\n                  ))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1.0f, 6.0f}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":4846,"status":"B"}],"commitId":"dc16abae34ca9f4159f692ee866a122f70de9cdf","commitMessage":"@@@Vectorization support for long.  double.  float min & max aggregators. (#10260)\n\n* LongMaxVectorAggregator support and test case.\n\n* DoubleMinVectorAggregator and test cases.\n\n* DoubleMaxVectorAggregator and unit test.\n\n* FloatMinVectorAggregator and FloatMaxVectorAggregator.\n\n* Documentation update to include the other vector aggregators.\n\n* Bug fix.\n\n* checkstyle formatting fixes.\n\n* CalciteQueryTest cases update.\n\n* Separate test classes for FloatMaxAggregation and FloatMniAggregation.\n\n* remove the cannotVectorize for float max/min aggregator in test.\n\n* Tests in GroupByQueryRunner.  GroupByTimeseriesQueryRunner and TimeseriesQueryRunner.","date":"2020-08-11 06:18:55","modifiedFileCount":"13","status":"M","submitter":"Abhishek Radhakrishnan"},{"authorTime":"2021-05-11 01:13:37","codes":[{"authorDate":"2021-05-11 01:13:37","commitOrder":3,"curCode":"  public void testSimpleLongAggregations() throws Exception\n  {\n    testQuery(\n        \"SELECT  MIN(l1), MIN(cnt), MAX(l1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .aggregators(aggregators(\n                                new LongMinAggregatorFactory(\"a0\", \"l1\"),\n                                new LongMinAggregatorFactory(\"a1\", \"cnt\"),\n                                new LongMaxAggregatorFactory(\"a2\", \"l1\")\n                            ))\n                .context(QUERY_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{0L, 1L, 325323L}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":6029,"groupId":"101621","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleLongAggregations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testSimpleLongAggregations() throws Exception\n  {\n    testQuery(\n        \"SELECT  MIN(l1), MIN(cnt), MAX(l1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                .dataSource(CalciteTests.DATASOURCE3)\n                .intervals(querySegmentSpec(Filtration.eternity()))\n                .granularity(Granularities.ALL)\n                .aggregators(aggregators(\n                                new LongMinAggregatorFactory(\"a0\", \"l1\"),\n                                new LongMinAggregatorFactory(\"a1\", \"cnt\"),\n                                new LongMaxAggregatorFactory(\"a2\", \"l1\")\n                            ))\n                .context(TIMESERIES_CONTEXT_DEFAULT)\n                .build()\n        ),\n        ImmutableList.of(\n            new Object[]{0L, 1L, 325323L}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6008,"status":"M"},{"authorDate":"2021-05-11 01:13:37","commitOrder":3,"curCode":"  public void testSimpleFloatAggregations() throws Exception\n  {\n    testQuery(\n        \"SELECT  MIN(m1), MAX(m1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(aggregators(\n                      new FloatMinAggregatorFactory(\"a0\", \"m1\"),\n                      new FloatMaxAggregatorFactory(\"a1\", \"m1\")\n                  ))\n                  .context(QUERY_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1.0f, 6.0f}\n        )\n    );\n  }\n","date":"2021-05-11 01:13:37","endLine":6075,"groupId":"101621","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleFloatAggregations","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1e/fd99b05ebe6da94fffaa752ce8de0e97ef485f.src","preCode":"  public void testSimpleFloatAggregations() throws Exception\n  {\n    testQuery(\n        \"SELECT  MIN(m1), MAX(m1) FROM druid.numfoo\",\n        ImmutableList.of(\n            Druids.newTimeseriesQueryBuilder()\n                  .dataSource(CalciteTests.DATASOURCE3)\n                  .intervals(querySegmentSpec(Filtration.eternity()))\n                  .granularity(Granularities.ALL)\n                  .aggregators(aggregators(\n                      new FloatMinAggregatorFactory(\"a0\", \"m1\"),\n                      new FloatMaxAggregatorFactory(\"a1\", \"m1\")\n                  ))\n                  .context(TIMESERIES_CONTEXT_DEFAULT)\n                  .build()\n        ),\n        ImmutableList.of(\n            new Object[]{1.0f, 6.0f}\n        )\n    );\n  }\n","realPath":"sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":6055,"status":"M"}],"commitId":"691d7a1d548909951468005348a603380f4d6d74","commitMessage":"@@@SQL timeseries no longer skip empty buckets with all granularity (#11188)\n\n* SQL timeseries no longer skip empty buckets with all granularity\n\n* add comment.  fix tests\n\n* the ol switcheroo\n\n* revert unintended change\n\n* docs and more tests\n\n* style\n\n* make checkstyle happy\n\n* docs fixes and more tests\n\n* add docs.  tests for array_agg\n\n* fixes\n\n* oops\n\n* doc stuffs\n\n* fix compile.  match doc style","date":"2021-05-11 01:13:37","modifiedFileCount":"16","status":"M","submitter":"Clint Wylie"}]
