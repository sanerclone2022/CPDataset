[{"authorTime":"2021-02-12 19:03:20","codes":[{"authorDate":"2021-02-12 19:03:20","commitOrder":7,"curCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        30,\n        new Period(3600),\n        null,\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","date":"2021-02-12 19:03:20","endLine":103,"groupId":"18284","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithMaxRowsPerSegment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/01/cfabb2c40b11e08a1e1125dc3ce8d242fdd829.src","preCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        30,\n        new Period(3600),\n        null,\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"MB"},{"authorDate":"2021-02-12 19:03:20","commitOrder":7,"curCode":"  public void testSerdeGranularitySpec() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        new Period(3600),\n        null,\n        new UniformGranularitySpec(Granularities.HOUR, null, null),\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n    Assert.assertEquals(config.getGranularitySpec(), fromJson.getGranularitySpec());\n  }\n","date":"2021-02-12 19:03:20","endLine":255,"groupId":"18284","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeGranularitySpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/01/cfabb2c40b11e08a1e1125dc3ce8d242fdd829.src","preCode":"  public void testSerdeGranularitySpec() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        new Period(3600),\n        null,\n        new UniformGranularitySpec(Granularities.HOUR, null, null),\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n    Assert.assertEquals(config.getGranularitySpec(), fromJson.getGranularitySpec());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"B"}],"commitId":"6541178c21839530a42af4b4675a9bc680bffca6","commitMessage":"@@@Support segmentGranularity for auto-compaction (#10843)\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* resolve conflict\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* fix tests\n\n* fix more tests\n\n* fix checkstyle\n\n* add unit tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add unit tests\n\n* add integration tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix failing tests\n\n* address comments\n\n* address comments\n\n* fix tests\n\n* fix tests\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test","date":"2021-02-12 19:03:20","modifiedFileCount":"32","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-03-03 03:23:52","codes":[{"authorDate":"2021-02-12 19:03:20","commitOrder":8,"curCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        30,\n        new Period(3600),\n        null,\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","date":"2021-02-12 19:03:20","endLine":103,"groupId":"18284","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeWithMaxRowsPerSegment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/01/cfabb2c40b11e08a1e1125dc3ce8d242fdd829.src","preCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        30,\n        new Period(3600),\n        null,\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"N"},{"authorDate":"2021-03-03 03:23:52","commitOrder":8,"curCode":"  public void testSerdeGranularitySpec() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        new Period(3600),\n        null,\n        new UserCompactionTaskGranularityConfig(Granularities.HOUR, null),\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n    Assert.assertEquals(config.getGranularitySpec(), fromJson.getGranularitySpec());\n  }\n","date":"2021-03-03 03:23:52","endLine":251,"groupId":"18284","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeGranularitySpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ef/e04e37ccbb380ba7ec5d45a132c30344e19cca.src","preCode":"  public void testSerdeGranularitySpec() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        new Period(3600),\n        null,\n        new UniformGranularitySpec(Granularities.HOUR, null, null),\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n    Assert.assertEquals(config.getGranularitySpec(), fromJson.getGranularitySpec());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"b7b0ee83627dd7887392e8f9d6fb5cb29465c28c","commitMessage":"@@@Add query granularity to compaction task (#10900)\n\n* add query granularity to compaction task\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix test\n\n* fix test\n\n* add tests\n\n* fix test\n\n* fix test\n\n* cleanup\n\n* rename class\n\n* fix test\n\n* fix test\n\n* add test\n\n* fix test","date":"2021-03-03 03:23:52","modifiedFileCount":"15","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-04-09 15:12:28","codes":[{"authorDate":"2021-04-09 15:12:28","commitOrder":9,"curCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        30,\n        new Period(3600),\n        null,\n        null,\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","date":"2021-04-09 15:12:28","endLine":101,"groupId":"10356","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testSerdeWithMaxRowsPerSegment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c7/98d29e1ea9141f79391f5bbdb1f13b179a0d19.src","preCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        30,\n        new Period(3600),\n        null,\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-04-09 15:12:28","commitOrder":9,"curCode":"  public void testSerdeGranularitySpec() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        new Period(3600),\n        null,\n        new UserCompactionTaskGranularityConfig(Granularities.HOUR, null),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n    Assert.assertEquals(config.getGranularitySpec(), fromJson.getGranularitySpec());\n  }\n","date":"2021-04-09 15:12:28","endLine":256,"groupId":"10356","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testSerdeGranularitySpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c7/98d29e1ea9141f79391f5bbdb1f13b179a0d19.src","preCode":"  public void testSerdeGranularitySpec() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        new Period(3600),\n        null,\n        new UserCompactionTaskGranularityConfig(Granularities.HOUR, null),\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n    Assert.assertEquals(config.getGranularitySpec(), fromJson.getGranularitySpec());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"}],"commitId":"4576152e4a0213d17048a330e7089aa9d89f3972","commitMessage":"@@@Make dropExisting flag for Compaction configurable and add warning documentations (#11070)\n\n* Make dropExisting flag for Compaction configurable\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix test\n\n* add tests\n\n* fix spelling\n\n* fix docs\n\n* add IT\n\n* fix test\n\n* fix doc\n\n* fix doc","date":"2021-04-09 15:12:28","modifiedFileCount":"20","status":"M","submitter":"Maytas Monsereenusorn"}]
