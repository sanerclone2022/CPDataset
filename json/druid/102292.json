[{"authorTime":"2018-12-22 03:49:24","codes":[{"authorDate":"2018-12-22 03:49:24","commitOrder":2,"curCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    expect(supervisorRecordSupplier.getPartitionIds(anyObject())).andReturn(Collections.emptySet()).anyTimes();\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata KinesisDataSourceMetadata = new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(\n        stream,\n        ImmutableMap.of(\n            shardId1,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,\n            shardId0,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER\n        )\n    ));\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(\n        stream,\n        ImmutableMap.of(\n            shardId0,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER\n        )\n    ));\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(\n        stream,\n        ImmutableMap.of(\n            shardId1,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER\n        )\n    ));\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE))\n            .andReturn(KinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertTrue(npe.getCause() == null);\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","date":"2018-12-22 03:49:24","endLine":2442,"groupId":"12566","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/0b9247d792032ba5dba7aad3d99eb263413dcd.src","preCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    expect(supervisorRecordSupplier.getPartitionIds(anyObject())).andReturn(Collections.emptySet()).anyTimes();\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata KinesisDataSourceMetadata = new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(\n        stream,\n        ImmutableMap.of(\n            shardId1,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,\n            shardId0,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER\n        )\n    ));\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(\n        stream,\n        ImmutableMap.of(\n            shardId0,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER\n        )\n    ));\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(\n        stream,\n        ImmutableMap.of(\n            shardId1,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER\n        )\n    ));\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE))\n            .andReturn(KinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertTrue(npe.getCause() == null);\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2377,"status":"B"},{"authorDate":"2018-12-22 03:49:24","commitOrder":2,"curCode":"  public void testResetNoDataSourceMetadata() throws Exception\n  {\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false);\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(1, 1000L, 2, 1000L)\n    ));\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(null);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","date":"2018-12-22 03:49:24","endLine":1964,"groupId":"3690","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetNoDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/7b9d1742dec9346159f08cf020ea57960091eb.src","preCode":"  public void testResetNoDataSourceMetadata() throws Exception\n  {\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false);\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(1, 1000L, 2, 1000L)\n    ));\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(null);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1938,"status":"MB"}],"commitId":"7c7997e8a1183a7bffad731ca94e8b4c381e8665","commitMessage":"@@@Add Kinesis Indexing Service to core Druid (#6431)\n\n* created seekablestream classes\n\n* created seekablestreamsupervisor class\n\n* first attempt to integrate kafa indexing service to use SeekableStream\n\n* seekablestream bug fixes\n\n* kafkarecordsupplier\n\n* integrated kafka indexing service with seekablestream\n\n* implemented resume/suspend and refactored some package names\n\n* moved kinesis indexing service into core druid extensions\n\n* merged some changes from kafka supervisor race condition\n\n* integrated kinesis-indexing-service with seekablestream\n\n* unite tests for kinesis-indexing-service\n\n* various bug fixes for kinesis-indexing-service\n\n* refactored kinesisindexingtask\n\n* finished up more kinesis unit tests\n\n* more bug fixes for kinesis-indexing-service\n\n* finsihed refactoring kinesis unit tests\n\n* removed KinesisParititons and KafkaPartitions to use SeekableStreamPartitions\n\n* kinesis-indexing-service code cleanup and docs\n\n* merge #6291\n\nmerge #6337\n\nmerge #6383\n\n* added more docs and reordered methods\n\n* fixd kinesis tests after merging master and added docs in seekablestream\n\n* fix various things from pr comment\n\n* improve recordsupplier and add unit tests\n\n* migrated to aws-java-sdk-kinesis\n\n* merge changes from master\n\n* fix pom files and forbiddenapi checks\n\n* checkpoint JavaType bug fix\n\n* fix pom and stuff\n\n* disable checkpointing in kinesis\n\n* fix kinesis sequence number null in closed shard\n\n* merge changes from master\n\n* fixes for kinesis tasks\n\n* capitalized <partitionType.  sequenceType>\n\n* removed abstract class loggers\n\n* conform to guava api restrictions\n\n* add docker for travis other modules test\n\n* address comments\n\n* improve RecordSupplier to supply records in batch\n\n* fix strict compile issue\n\n* add test scope for localstack dependency\n\n* kinesis indexing task refactoring\n\n* comments\n\n* github comments\n\n* minor fix\n\n* removed unneeded readme\n\n* fix deserialization bug\n\n* fix various bugs\n\n* KinesisRecordSupplier unable to catch up to earliest position in stream bug fix\n\n* minor changes to kinesis\n\n* implement deaggregate for kinesis\n\n* Merge remote-tracking branch 'upstream/master' into seekablestream\n\n* fix kinesis offset discrepancy with kafka\n\n* kinesis record supplier disable getPosition\n\n* pr comments\n\n* mock for kinesis tests and remove docker dependency for unit tests\n\n* PR comments\n\n* avg lag in kafkasupervisor #6587\n\n* refacotred SequenceMetadata in taskRunners\n\n* small fix\n\n* more small fix\n\n* recordsupplier resource leak\n\n* revert .travis.yml formatting\n\n* fix style\n\n* kinesis docs\n\n* doc part2\n\n* more docs\n\n* comments\n\n* comments*2\n\n* revert string replace changes\n\n* comments\n\n* teamcity\n\n* comments part 1\n\n* comments part 2\n\n* comments part 3\n\n* merge #6754\n\n* fix injection binding\n\n* comments\n\n* KinesisRegion refactor\n\n* comments part idk lol\n\n* can't think of a commit msg anymore\n\n* remove possiblyResetDataSourceMetadata() for IncrementalPublishingTaskRunner\n\n* commmmmmmmmmments\n\n* extra error handling in KinesisRecordSupplier getRecords\n\n* comments\n\n* quickfix\n\n* typo\n\n* oof\n","date":"2018-12-22 03:49:24","modifiedFileCount":"22","status":"M","submitter":"Joshua Sun"},{"authorTime":"2019-02-19 03:50:08","codes":[{"authorDate":"2018-12-22 03:49:24","commitOrder":3,"curCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    expect(supervisorRecordSupplier.getPartitionIds(anyObject())).andReturn(Collections.emptySet()).anyTimes();\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata KinesisDataSourceMetadata = new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(\n        stream,\n        ImmutableMap.of(\n            shardId1,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,\n            shardId0,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER\n        )\n    ));\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(\n        stream,\n        ImmutableMap.of(\n            shardId0,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER\n        )\n    ));\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(\n        stream,\n        ImmutableMap.of(\n            shardId1,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER\n        )\n    ));\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE))\n            .andReturn(KinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertTrue(npe.getCause() == null);\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","date":"2018-12-22 03:49:24","endLine":2442,"groupId":"12566","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/0b9247d792032ba5dba7aad3d99eb263413dcd.src","preCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    expect(supervisorRecordSupplier.getPartitionIds(anyObject())).andReturn(Collections.emptySet()).anyTimes();\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata KinesisDataSourceMetadata = new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(\n        stream,\n        ImmutableMap.of(\n            shardId1,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,\n            shardId0,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER\n        )\n    ));\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(\n        stream,\n        ImmutableMap.of(\n            shardId0,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER\n        )\n    ));\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(\n        stream,\n        ImmutableMap.of(\n            shardId1,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER\n        )\n    ));\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE))\n            .andReturn(KinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertTrue(npe.getCause() == null);\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2377,"status":"N"},{"authorDate":"2019-02-19 03:50:08","commitOrder":3,"curCode":"  public void testResetNoDataSourceMetadata() throws Exception\n  {\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null);\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(1, 1000L, 2, 1000L)\n    ));\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(null);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","date":"2019-02-19 03:50:08","endLine":1962,"groupId":"3690","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetNoDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f2/db280c51eb85380271ce661d1c415120afa0e0.src","preCode":"  public void testResetNoDataSourceMetadata() throws Exception\n  {\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null, false);\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(1, 1000L, 2, 1000L)\n    ));\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(null);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1936,"status":"M"}],"commitId":"80a2ef7be46c4fc807ac2a74507b8ba8b6a44049","commitMessage":"@@@Support kafka transactional topics (#5404) (#6496)\n\n* Support kafka transactional topics\n\n* update kafka to version 2.0.0\n* Remove the skipOffsetGaps option since it's not used anymore\n* Adjust kafka consumer to use transactional semantics\n* Update tests\n\n* Remove unused import from test\n\n* Fix compilation\n\n* Invoke transaction api to fix a unit test\n\n* temporary modification of travis.yml for debugging\n\n* another attempt to get travis tasklogs\n\n* update kafka to 2.0.1 at all places\n\n* Remove druid-kafka-eight dependency from integration-tests.  remove the kafka firehose test and deprecate kafka-eight classes\n\n* Add deprecated in docs for kafka-eight and kafka-simple extensions\n\n* Remove skipOffsetGaps and code changes for transaction support\n\n* Fix indentation\n\n* remove skipOffsetGaps from kinesis\n\n* Add transaction api to KafkaRecordSupplierTest\n\n* Fix indent\n\n* Fix test\n\n* update kafka version to 2.1.0\n","date":"2019-02-19 03:50:08","modifiedFileCount":"25","status":"M","submitter":"Surekha"},{"authorTime":"2019-03-22 04:12:22","codes":[{"authorDate":"2019-03-22 04:12:22","commitOrder":4,"curCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    expect(supervisorRecordSupplier.getPartitionIds(anyObject())).andReturn(Collections.emptySet()).anyTimes();\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata kinesisDataSourceMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,\n                shardId0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE))\n            .andReturn(kinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertTrue(npe.getCause() == null);\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","date":"2019-03-22 04:12:22","endLine":2389,"groupId":"12566","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/73/c1d4692faa8ddf7a287f9d0e8ae6fa0cf17ed9.src","preCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    expect(supervisorRecordSupplier.getPartitionIds(anyObject())).andReturn(Collections.emptySet()).anyTimes();\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata KinesisDataSourceMetadata = new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(\n        stream,\n        ImmutableMap.of(\n            shardId1,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER,\n            shardId0,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER\n        )\n    ));\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(\n        stream,\n        ImmutableMap.of(\n            shardId0,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER\n        )\n    ));\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(new SeekableStreamPartitions<>(\n        stream,\n        ImmutableMap.of(\n            shardId1,\n            SeekableStreamPartitions.NO_END_SEQUENCE_NUMBER\n        )\n    ));\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE))\n            .andReturn(KinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertTrue(npe.getCause() == null);\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2315,"status":"M"},{"authorDate":"2019-03-22 04:12:22","commitOrder":4,"curCode":"  public void testResetNoDataSourceMetadata() throws Exception\n  {\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null);\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            topic,\n            ImmutableMap.of(1, 1000L, 2, 1000L),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(null);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","date":"2019-03-22 04:12:22","endLine":2034,"groupId":"3690","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetNoDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b3/0b75ee7886fa6f4c326a81770066d6778e2033.src","preCode":"  public void testResetNoDataSourceMetadata() throws Exception\n  {\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null);\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(new SeekableStreamPartitions<>(\n        topic,\n        ImmutableMap.of(1, 1000L, 2, 1000L)\n    ));\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(null);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2005,"status":"M"}],"commitId":"0c5dcf5586e33607849e397209f3eb0b10661f1e","commitMessage":"@@@Fix exclusivity for start offset in kinesis indexing service & check exclusivity properly in IndexerSQLMetadataStorageCoordinator (#7291)\n\n* Fix exclusivity for start offset in kinesis indexing service\n\n* some adjustment\n\n* Fix SeekableStreamDataSourceMetadata\n\n* Add missing javadocs\n\n* Add missing comments and unit test\n\n* fix SeekableStreamStartSequenceNumbers.plus and add comments\n\n* remove extra exclusivePartitions in KafkaIOConfig and fix downgrade issue\n\n* Add javadocs\n\n* fix compilation\n\n* fix test\n\n* remove unused variable\n","date":"2019-03-22 04:12:22","modifiedFileCount":"30","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-04-11 09:16:38","codes":[{"authorDate":"2019-04-11 09:16:38","commitOrder":5,"curCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    expect(supervisorRecordSupplier.getPartitionIds(anyObject())).andReturn(Collections.emptySet()).anyTimes();\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata kinesisDataSourceMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,\n                shardId0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE))\n            .andReturn(kinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertTrue(npe.getCause() == null);\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","date":"2019-04-11 09:16:38","endLine":2352,"groupId":"12566","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/cc/5ae9ee07047b669b97e252120bd5debf26d19a.src","preCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    expect(supervisorRecordSupplier.getPartitionIds(anyObject())).andReturn(Collections.emptySet()).anyTimes();\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata kinesisDataSourceMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,\n                shardId0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE))\n            .andReturn(kinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertTrue(npe.getCause() == null);\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2278,"status":"M"},{"authorDate":"2019-04-11 09:16:38","commitOrder":5,"curCode":"  public void testResetNoDataSourceMetadata() throws Exception\n  {\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            topic,\n            ImmutableMap.of(1, 1000L, 2, 1000L),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(null);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","date":"2019-04-11 09:16:38","endLine":2002,"groupId":"3690","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetNoDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b6/e7b3406771642225b6ce082b4b2bc68e735a67.src","preCode":"  public void testResetNoDataSourceMetadata() throws Exception\n  {\n    supervisor = getSupervisor(1, 1, true, \"PT1H\", null, null);\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            topic,\n            ImmutableMap.of(1, 1000L, 2, 1000L),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(null);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1973,"status":"M"}],"commitId":"2771ed50b0f07b0ee519da72ed9f4877466f8be4","commitMessage":"@@@Support Kafka supervisor adopting running tasks between versions  (#7212)\n\n* Recompute hash in isTaskCurrent() and added tests\n\n* Fixed checkstyle stuff\n\n* Fixed failing tests\n\n* Make TestableKafkaSupervisorWithCustomIsTaskCurrent static\n\n* Add doc\n\n* baseSequenceName change\n\n* Added comment\n\n* WIP\n\n* Fixed imports\n\n* Undid lambda change for diff sake\n\n* Cleanup\n\n* Added comment\n\n* Reinsert Kafka tests\n\n* Readded kinesis test\n\n* Readd bad partition assignment in kinesis supervisor test\n\n* Nit\n\n* Misnamed var\n","date":"2019-04-11 09:16:38","modifiedFileCount":"6","status":"M","submitter":"Justin Borromeo"},{"authorTime":"2019-07-07 00:33:12","codes":[{"authorDate":"2019-07-07 00:33:12","commitOrder":6,"curCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(EasyMock.anyObject()))\n            .andReturn(Collections.emptySet())\n            .anyTimes();\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata kinesisDataSourceMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,\n                shardId0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE))\n            .andReturn(kinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertNull(npe.getCause());\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","date":"2019-07-07 00:33:12","endLine":2424,"groupId":"12566","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9b/6f893412902c4152e8ff5a98baf1dd63bc8c15.src","preCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    expect(supervisorRecordSupplier.getPartitionIds(anyObject())).andReturn(Collections.emptySet()).anyTimes();\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata kinesisDataSourceMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,\n                shardId0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE))\n            .andReturn(kinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertTrue(npe.getCause() == null);\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2348,"status":"M"},{"authorDate":"2019-07-07 00:33:12","commitOrder":6,"curCode":"  public void testResetNoDataSourceMetadata()\n  {\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            topic,\n            ImmutableMap.of(1, 1000L, 2, 1000L),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(null);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","date":"2019-07-07 00:33:12","endLine":2006,"groupId":"17675","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetNoDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/f5639cd0e0e7c6a18b14f694e3cf2c6cb73dec.src","preCode":"  public void testResetNoDataSourceMetadata() throws Exception\n  {\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(anyObject(TaskRunnerListener.class), anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            topic,\n            ImmutableMap.of(1, 1000L, 2, 1000L),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(null);\n    replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1977,"status":"M"}],"commitId":"1166bbcb75d432817715fdd429737f86730b5591","commitMessage":"@@@Remove static imports from tests (#8036)\n\nMake static imports forbidden in tests and remove all occurrences to be\nconsistent with the non-test code.\n\nAlso.  various changes to files affected by above:\n- Reformat to adhere to druid style guide\n- Fix various IntelliJ warnings\n- Fix various SonarLint warnings (e.g..  the expected/actual args to\n  Assert.assertEquals() were flipped)","date":"2019-07-07 00:33:12","modifiedFileCount":"98","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2019-07-07 00:33:12","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":7,"curCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(EasyMock.anyObject()))\n            .andReturn(Collections.emptySet())\n            .anyTimes();\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata kinesisDataSourceMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,\n                SHARD_ID0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE))\n            .andReturn(kinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertNull(npe.getCause());\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","date":"2019-08-23 18:13:54","endLine":2423,"groupId":"12566","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4d/2513120f718fcfeaffff03deb7b887ec9db72c.src","preCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(EasyMock.anyObject()))\n            .andReturn(Collections.emptySet())\n            .anyTimes();\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata kinesisDataSourceMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,\n                shardId0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            stream,\n            ImmutableMap.of(\n                shardId1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE))\n            .andReturn(kinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertNull(npe.getCause());\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2347,"status":"M"},{"authorDate":"2019-07-07 00:33:12","commitOrder":7,"curCode":"  public void testResetNoDataSourceMetadata()\n  {\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            topic,\n            ImmutableMap.of(1, 1000L, 2, 1000L),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(null);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","date":"2019-07-07 00:33:12","endLine":2006,"groupId":"17675","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetNoDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/f5639cd0e0e7c6a18b14f694e3cf2c6cb73dec.src","preCode":"  public void testResetNoDataSourceMetadata()\n  {\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            topic,\n            ImmutableMap.of(1, 1000L, 2, 1000L),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(null);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1977,"status":"N"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"},{"authorTime":"2019-09-27 07:15:24","codes":[{"authorDate":"2019-09-27 07:15:24","commitOrder":8,"curCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(EasyMock.anyObject()))\n            .andReturn(Collections.emptySet())\n            .anyTimes();\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata kinesisDataSourceMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,\n                SHARD_ID0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE))\n            .andReturn(kinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertNull(npe.getCause());\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","date":"2019-09-27 07:15:24","endLine":2408,"groupId":"12566","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a9/c182bed796859937f9e962860053e662ecf784.src","preCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(EasyMock.anyObject()))\n            .andReturn(Collections.emptySet())\n            .anyTimes();\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata kinesisDataSourceMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,\n                SHARD_ID0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE))\n            .andReturn(kinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertNull(npe.getCause());\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2332,"status":"M"},{"authorDate":"2019-09-27 07:15:24","commitOrder":8,"curCode":"  public void testResetNoDataSourceMetadata()\n  {\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            topic,\n            ImmutableMap.of(1, 1000L, 2, 1000L),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(null);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","date":"2019-09-27 07:15:24","endLine":2029,"groupId":"10579","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetNoDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/75/9182feac2928302ae8f3579d872a1883a232c5.src","preCode":"  public void testResetNoDataSourceMetadata()\n  {\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            topic,\n            ImmutableMap.of(1, 1000L, 2, 1000L),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(null);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2000,"status":"M"}],"commitId":"7f2b6577ef19f18523e8353336ad496e8dc4a270","commitMessage":"@@@get active task by datasource when supervisor discover tasks (#8450)\n\n* get active task by datasource when supervisor discover tasks\n\n* fix ut\n\n* fix ut\n\n* fix ut\n\n* remove unnecessary condition check\n\n* fix ut\n\n* remove stream in hot loop\n","date":"2019-09-27 07:15:24","modifiedFileCount":"7","status":"M","submitter":"elloooooo"},{"authorTime":"2020-01-28 03:24:29","codes":[{"authorDate":"2020-01-28 03:24:29","commitOrder":9,"curCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(EasyMock.anyObject()))\n            .andReturn(Collections.emptySet())\n            .anyTimes();\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata kinesisDataSourceMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,\n                SHARD_ID0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE))\n            .andReturn(kinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertNull(npe.getCause());\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","date":"2020-01-28 03:24:29","endLine":2406,"groupId":"12566","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ad/267e8a1eaa52ef1a024b696bf027db057d33b6.src","preCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(EasyMock.anyObject()))\n            .andReturn(Collections.emptySet())\n            .anyTimes();\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata kinesisDataSourceMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,\n                SHARD_ID0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE))\n            .andReturn(kinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertNull(npe.getCause());\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2330,"status":"M"},{"authorDate":"2020-01-28 03:24:29","commitOrder":9,"curCode":"  public void testResetNoDataSourceMetadata()\n  {\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            topic,\n            ImmutableMap.of(1, 1000L, 2, 1000L),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(null);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","date":"2020-01-28 03:24:29","endLine":2149,"groupId":"10579","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetNoDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0b/29b65a628bb6f0503d980831a84ce2d009150d.src","preCode":"  public void testResetNoDataSourceMetadata()\n  {\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            topic,\n            ImmutableMap.of(1, 1000L, 2, 1000L),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    EasyMock.expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(null);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2120,"status":"M"}],"commitId":"b9186f8f9ff2ff52aceda42bc5f24ffd47a7d17e","commitMessage":"@@@Reconcile terminology and method naming to 'used/unused segments'; Rename MetadataSegmentManager to MetadataSegmentsManager (#7306)\n\n* Reconcile terminology and method naming to 'used/unused segments'; Don't use terms 'enable/disable data source'; Rename MetadataSegmentManager to MetadataSegments; Make REST API methods which mark segments as used/unused to return server error instead of an empty response in case of error\n\n* Fix brace\n\n* Import order\n\n* Rename withKillDataSourceWhitelist to withSpecificDataSourcesToKill\n\n* Fix tests\n\n* Fix tests by adding proper methods without interval parameters to IndexerMetadataStorageCoordinator instead of hacking with Intervals.ETERNITY\n\n* More aligned names of DruidCoordinatorHelpers.  rename several CoordinatorDynamicConfig parameters\n\n* Rename ClientCompactTaskQuery to ClientCompactionTaskQuery for consistency with CompactionTask; ClientCompactQueryTuningConfig to ClientCompactionTaskQueryTuningConfig\n\n* More variable and method renames\n\n* Rename MetadataSegments to SegmentsMetadata\n\n* Javadoc update\n\n* Simplify SegmentsMetadata.getUnusedSegmentIntervals().  more javadocs\n\n* Update Javadoc of VersionedIntervalTimeline.iterateAllObjects()\n\n* Reorder imports\n\n* Rename SegmentsMetadata.tryMark... methods to mark... and make them to return boolean and the numbers of segments changed and relay exceptions to callers\n\n* Complete merge\n\n* Add CollectionUtils.newTreeSet(); Refactor DruidCoordinatorRuntimeParams creation in tests\n\n* Remove MetadataSegmentManager\n\n* Rename millisLagSinceCoordinatorBecomesLeaderBeforeCanMarkAsUnusedOvershadowedSegments to leadingTimeMillisBeforeCanMarkAsUnusedOvershadowedSegments\n\n* Fix tests.  refactor DruidCluster creation in tests into DruidClusterBuilder\n\n* Fix inspections\n\n* Fix SQLMetadataSegmentManagerEmptyTest and rename it to SqlSegmentsMetadataEmptyTest\n\n* Rename SegmentsAndMetadata to SegmentsAndCommitMetadata to reduce the similarity with SegmentsMetadata; Rename some methods\n\n* Rename DruidCoordinatorHelper to CoordinatorDuty.  refactor DruidCoordinator\n\n* Unused import\n\n* Optimize imports\n\n* Rename IndexerSQLMetadataStorageCoordinator.getDataSourceMetadata() to retrieveDataSourceMetadata()\n\n* Unused import\n\n* Update terminology in datasource-view.tsx\n\n* Fix label in datasource-view.spec.tsx.snap\n\n* Fix lint errors in datasource-view.tsx\n\n* Doc improvements\n\n* Another attempt to please TSLint\n\n* Another attempt to please TSLint\n\n* Style fixes\n\n* Fix IndexerSQLMetadataStorageCoordinator.createUsedSegmentsSqlQueryForIntervals() (wrong merge)\n\n* Try to fix docs build issue\n\n* Javadoc and spelling fixes\n\n* Rename SegmentsMetadata to SegmentsMetadataManager.  address other comments\n\n* Address more comments\n","date":"2020-01-28 03:24:29","modifiedFileCount":"127","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-06-19 00:47:07","codes":[{"authorDate":"2020-06-19 00:47:07","commitOrder":10,"curCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(EasyMock.anyObject()))\n            .andReturn(Collections.emptySet())\n            .anyTimes();\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.emptyList()).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata kinesisDataSourceMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,\n                SHARD_ID0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE))\n            .andReturn(kinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertNull(npe.getCause());\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","date":"2020-06-19 00:47:07","endLine":2481,"groupId":"102292","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testResetDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6b/d309c8b7d36589c3bce8ef8067d38a0e5f58d2.src","preCode":"  public void testResetDataSourceMetadata() throws Exception\n  {\n    EasyMock.expect(supervisorRecordSupplier.getPartitionIds(EasyMock.anyObject()))\n            .andReturn(Collections.emptySet())\n            .anyTimes();\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    Capture<String> captureDataSource = EasyMock.newCapture();\n    Capture<DataSourceMetadata> captureDataSourceMetadata = EasyMock.newCapture();\n\n    KinesisDataSourceMetadata kinesisDataSourceMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER,\n                SHARD_ID0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata resetMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID0,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    KinesisDataSourceMetadata expectedMetadata = new KinesisDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            STREAM,\n            ImmutableMap.of(\n                SHARD_ID1,\n                KinesisSequenceNumber.NO_END_SEQUENCE_NUMBER\n            ),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE))\n            .andReturn(kinesisDataSourceMetadata);\n    EasyMock.expect(indexerMetadataStorageCoordinator.resetDataSourceMetadata(\n        EasyMock.capture(captureDataSource),\n        EasyMock.capture(captureDataSourceMetadata)\n    )).andReturn(true);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    try {\n      supervisor.resetInternal(resetMetadata);\n    }\n    catch (NullPointerException npe) {\n      \r\n      \r\n      Assert.assertNull(npe.getCause());\n    }\n    verifyAll();\n\n    Assert.assertEquals(captureDataSource.getValue(), DATASOURCE);\n    Assert.assertEquals(captureDataSourceMetadata.getValue(), expectedMetadata);\n  }\n","realPath":"extensions-core/kinesis-indexing-service/src/test/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2405,"status":"M"},{"authorDate":"2020-06-19 00:47:07","commitOrder":10,"curCode":"  public void testResetNoDataSourceMetadata()\n  {\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.emptyList()).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            topic,\n            ImmutableMap.of(1, 1000L, 2, 1000L),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(null);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","date":"2020-06-19 00:47:07","endLine":2140,"groupId":"102292","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testResetNoDataSourceMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9d/8635dd39a96f9b339addcce86eff768ca2769e.src","preCode":"  public void testResetNoDataSourceMetadata()\n  {\n    supervisor = getTestableSupervisor(1, 1, true, \"PT1H\", null, null);\n    EasyMock.expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();\n    EasyMock.expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();\n    EasyMock.expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();\n    EasyMock.expect(taskStorage.getActiveTasksByDatasource(DATASOURCE)).andReturn(ImmutableList.of()).anyTimes();\n    taskRunner.registerListener(EasyMock.anyObject(TaskRunnerListener.class), EasyMock.anyObject(Executor.class));\n    replayAll();\n\n    supervisor.start();\n    supervisor.runInternal();\n    verifyAll();\n\n    KafkaDataSourceMetadata resetMetadata = new KafkaDataSourceMetadata(\n        new SeekableStreamStartSequenceNumbers<>(\n            topic,\n            ImmutableMap.of(1, 1000L, 2, 1000L),\n            ImmutableSet.of()\n        )\n    );\n\n    EasyMock.reset(indexerMetadataStorageCoordinator);\n    \r\n    EasyMock.expect(indexerMetadataStorageCoordinator.retrieveDataSourceMetadata(DATASOURCE)).andReturn(null);\n    EasyMock.replay(indexerMetadataStorageCoordinator);\n\n    supervisor.resetInternal(resetMetadata);\n    verifyAll();\n  }\n","realPath":"extensions-core/kafka-indexing-service/src/test/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":2111,"status":"M"}],"commitId":"2c384b61ff47f858a0adb6f8b389c84f2acc84d1","commitMessage":"@@@IntelliJ inspection and checkstyle rule for \"Collection.EMPTY_* field accesses replaceable with Collections.empty*()\" (#9690)\n\n* IntelliJ inspection and checkstyle rule for \"Collection.EMPTY_* field accesses replaceable with Collections.empty*()\"\n\n* Reverted checkstyle rule\n\n* Added tests to pass CI\n\n* Codestyle","date":"2020-06-19 00:47:07","modifiedFileCount":"33","status":"M","submitter":"Aleksey Plekhanov"}]
