[{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-12-22 03:49:24","commitOrder":2,"curCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        savedParseExceptions\n    );\n    if (buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n    return unparseableEventsMap;\n  }\n","date":"2018-12-22 03:49:24","endLine":1007,"groupId":"1493","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getTaskCompletionUnparseableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/5de9d8db68df5435f80b11833293705b78db34.src","preCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        savedParseExceptions\n    );\n    if (buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n    return unparseableEventsMap;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/SeekableStreamIndexTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"B"},{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        savedParseExceptions);\n    if (buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n    return unparseableEventsMap;\n  }\n","date":"2018-10-29 20:02:43","endLine":543,"groupId":"1493","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getTaskCompletionUnparseableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1d/cf92b4b85259d48a09a734d294ae15f3a77175.src","preCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        savedParseExceptions);\n    if (buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n    return unparseableEventsMap;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/AppenderatorDriverRealtimeIndexTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":534,"status":"NB"}],"commitId":"7c7997e8a1183a7bffad731ca94e8b4c381e8665","commitMessage":"@@@Add Kinesis Indexing Service to core Druid (#6431)\n\n* created seekablestream classes\n\n* created seekablestreamsupervisor class\n\n* first attempt to integrate kafa indexing service to use SeekableStream\n\n* seekablestream bug fixes\n\n* kafkarecordsupplier\n\n* integrated kafka indexing service with seekablestream\n\n* implemented resume/suspend and refactored some package names\n\n* moved kinesis indexing service into core druid extensions\n\n* merged some changes from kafka supervisor race condition\n\n* integrated kinesis-indexing-service with seekablestream\n\n* unite tests for kinesis-indexing-service\n\n* various bug fixes for kinesis-indexing-service\n\n* refactored kinesisindexingtask\n\n* finished up more kinesis unit tests\n\n* more bug fixes for kinesis-indexing-service\n\n* finsihed refactoring kinesis unit tests\n\n* removed KinesisParititons and KafkaPartitions to use SeekableStreamPartitions\n\n* kinesis-indexing-service code cleanup and docs\n\n* merge #6291\n\nmerge #6337\n\nmerge #6383\n\n* added more docs and reordered methods\n\n* fixd kinesis tests after merging master and added docs in seekablestream\n\n* fix various things from pr comment\n\n* improve recordsupplier and add unit tests\n\n* migrated to aws-java-sdk-kinesis\n\n* merge changes from master\n\n* fix pom files and forbiddenapi checks\n\n* checkpoint JavaType bug fix\n\n* fix pom and stuff\n\n* disable checkpointing in kinesis\n\n* fix kinesis sequence number null in closed shard\n\n* merge changes from master\n\n* fixes for kinesis tasks\n\n* capitalized <partitionType.  sequenceType>\n\n* removed abstract class loggers\n\n* conform to guava api restrictions\n\n* add docker for travis other modules test\n\n* address comments\n\n* improve RecordSupplier to supply records in batch\n\n* fix strict compile issue\n\n* add test scope for localstack dependency\n\n* kinesis indexing task refactoring\n\n* comments\n\n* github comments\n\n* minor fix\n\n* removed unneeded readme\n\n* fix deserialization bug\n\n* fix various bugs\n\n* KinesisRecordSupplier unable to catch up to earliest position in stream bug fix\n\n* minor changes to kinesis\n\n* implement deaggregate for kinesis\n\n* Merge remote-tracking branch 'upstream/master' into seekablestream\n\n* fix kinesis offset discrepancy with kafka\n\n* kinesis record supplier disable getPosition\n\n* pr comments\n\n* mock for kinesis tests and remove docker dependency for unit tests\n\n* PR comments\n\n* avg lag in kafkasupervisor #6587\n\n* refacotred SequenceMetadata in taskRunners\n\n* small fix\n\n* more small fix\n\n* recordsupplier resource leak\n\n* revert .travis.yml formatting\n\n* fix style\n\n* kinesis docs\n\n* doc part2\n\n* more docs\n\n* comments\n\n* comments*2\n\n* revert string replace changes\n\n* comments\n\n* teamcity\n\n* comments part 1\n\n* comments part 2\n\n* comments part 3\n\n* merge #6754\n\n* fix injection binding\n\n* comments\n\n* KinesisRegion refactor\n\n* comments part idk lol\n\n* can't think of a commit msg anymore\n\n* remove possiblyResetDataSourceMetadata() for IncrementalPublishingTaskRunner\n\n* commmmmmmmmmments\n\n* extra error handling in KinesisRecordSupplier getRecords\n\n* comments\n\n* quickfix\n\n* typo\n\n* oof\n","date":"2018-12-22 03:49:24","modifiedFileCount":"22","status":"M","submitter":"Joshua Sun"},{"authorTime":"2020-09-12 07:31:10","codes":[{"authorDate":"2020-09-12 07:31:10","commitOrder":3,"curCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        parseExceptionHandler.getSavedParseExceptions()\n    );\n    if (buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n    return unparseableEventsMap;\n  }\n","date":"2020-09-12 07:31:10","endLine":1077,"groupId":"104655","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getTaskCompletionUnparseableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2a/2bf2d7f05f5b44bac83d777bb6cf6d1435fd98.src","preCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        savedParseExceptions\n    );\n    if (buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n    return unparseableEventsMap;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/SeekableStreamIndexTaskRunner.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1067,"status":"M"},{"authorDate":"2020-09-12 07:31:10","commitOrder":3,"curCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        parseExceptionHandler.getSavedParseExceptions()\n    );\n    if (buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n    return unparseableEventsMap;\n  }\n","date":"2020-09-12 07:31:10","endLine":603,"groupId":"104655","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getTaskCompletionUnparseableEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/06/4d2caa33502379bc0ed6a593728d18244b2dad.src","preCode":"  private Map<String, Object> getTaskCompletionUnparseableEvents()\n  {\n    Map<String, Object> unparseableEventsMap = new HashMap<>();\n    List<String> buildSegmentsParseExceptionMessages = IndexTaskUtils.getMessagesFromSavedParseExceptions(\n        savedParseExceptions);\n    if (buildSegmentsParseExceptionMessages != null) {\n      unparseableEventsMap.put(RowIngestionMeters.BUILD_SEGMENTS, buildSegmentsParseExceptionMessages);\n    }\n    return unparseableEventsMap;\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/AppenderatorDriverRealtimeIndexTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"}],"commitId":"8f14ac814e1fdf11878a5ba9bdba58fb745b4c8f","commitMessage":"@@@More structured way to handle parse exceptions (#10336)\n\n* More structured way to handle parse exceptions\n\n* checkstyle; add more tests\n\n* forbidden api; test\n\n* address comment; new test\n\n* address review comments\n\n* javadoc for parseException; remove redundant parseException in streaming ingestion\n\n* fix tests\n\n* unnecessary catch\n\n* unused imports\n\n* appenderator test\n\n* unused import","date":"2020-09-12 07:31:10","modifiedFileCount":"116","status":"M","submitter":"Jihoon Son"}]
