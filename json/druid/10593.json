[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testSimpleGetLookup()\n  {\n    final LookupExtractorFactoryMapContainer container = new LookupExtractorFactoryMapContainer(\n        \"v0\",\n        new HashMap<String, Object>()\n    );\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(\n        LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.getLookup(EasyMock.eq(LOOKUP_TIER), EasyMock.eq(LOOKUP_NAME)))\n            .andReturn(container)\n            .once();\n    EasyMock.replay(lookupCoordinatorManager);\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.getSpecificLookup(LOOKUP_TIER, LOOKUP_NAME);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(container, response.getEntity());\n    EasyMock.verify(lookupCoordinatorManager);\n  }\n","date":"2018-08-31 00:56:26","endLine":210,"groupId":"8854","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleGetLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2e/0819c048046e34c2442951d1b3bcc3f2a387fa.src","preCode":"  public void testSimpleGetLookup()\n  {\n    final LookupExtractorFactoryMapContainer container = new LookupExtractorFactoryMapContainer(\n        \"v0\",\n        new HashMap<String, Object>()\n    );\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(\n        LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.getLookup(EasyMock.eq(LOOKUP_TIER), EasyMock.eq(LOOKUP_NAME)))\n            .andReturn(container)\n            .once();\n    EasyMock.replay(lookupCoordinatorManager);\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.getSpecificLookup(LOOKUP_TIER, LOOKUP_NAME);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(container, response.getEntity());\n    EasyMock.verify(lookupCoordinatorManager);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/LookupCoordinatorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testExceptionalGetTier()\n  {\n    final String tier = \"some tier\";\n    final String errMsg = \"some error\";\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.getKnownLookups()).andThrow(new RuntimeException(errMsg)).once();\n    EasyMock.replay(lookupCoordinatorManager);\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.getSpecificTier(tier, false);\n    Assert.assertEquals(500, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"error\", errMsg), response.getEntity());\n    EasyMock.verify(lookupCoordinatorManager);\n  }\n","date":"2018-08-31 00:56:26","endLine":863,"groupId":"5583","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionalGetTier","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2e/0819c048046e34c2442951d1b3bcc3f2a387fa.src","preCode":"  public void testExceptionalGetTier()\n  {\n    final String tier = \"some tier\";\n    final String errMsg = \"some error\";\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.getKnownLookups()).andThrow(new RuntimeException(errMsg)).once();\n    EasyMock.replay(lookupCoordinatorManager);\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.getSpecificTier(tier, false);\n    Assert.assertEquals(500, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"error\", errMsg), response.getEntity());\n    EasyMock.verify(lookupCoordinatorManager);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/LookupCoordinatorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":847,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2019-05-15 04:30:51","commitOrder":2,"curCode":"  public void testSimpleGetLookup()\n  {\n    final LookupExtractorFactoryMapContainer container = new LookupExtractorFactoryMapContainer(\n        \"v0\",\n        new HashMap<>()\n    );\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(\n        LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.getLookup(EasyMock.eq(LOOKUP_TIER), EasyMock.eq(LOOKUP_NAME)))\n            .andReturn(container)\n            .once();\n    EasyMock.replay(lookupCoordinatorManager);\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.getSpecificLookup(LOOKUP_TIER, LOOKUP_NAME);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(container, response.getEntity());\n    EasyMock.verify(lookupCoordinatorManager);\n  }\n","date":"2019-05-15 04:30:51","endLine":212,"groupId":"8854","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleGetLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fb/6e22d7205c77da8ea68c66ad1e9efb7a3fb823.src","preCode":"  public void testSimpleGetLookup()\n  {\n    final LookupExtractorFactoryMapContainer container = new LookupExtractorFactoryMapContainer(\n        \"v0\",\n        new HashMap<String, Object>()\n    );\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(\n        LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.getLookup(EasyMock.eq(LOOKUP_TIER), EasyMock.eq(LOOKUP_NAME)))\n            .andReturn(container)\n            .once();\n    EasyMock.replay(lookupCoordinatorManager);\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.getSpecificLookup(LOOKUP_TIER, LOOKUP_NAME);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(container, response.getEntity());\n    EasyMock.verify(lookupCoordinatorManager);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/LookupCoordinatorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2018-08-31 00:56:26","commitOrder":2,"curCode":"  public void testExceptionalGetTier()\n  {\n    final String tier = \"some tier\";\n    final String errMsg = \"some error\";\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.getKnownLookups()).andThrow(new RuntimeException(errMsg)).once();\n    EasyMock.replay(lookupCoordinatorManager);\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.getSpecificTier(tier, false);\n    Assert.assertEquals(500, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"error\", errMsg), response.getEntity());\n    EasyMock.verify(lookupCoordinatorManager);\n  }\n","date":"2018-08-31 00:56:26","endLine":863,"groupId":"5583","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionalGetTier","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2e/0819c048046e34c2442951d1b3bcc3f2a387fa.src","preCode":"  public void testExceptionalGetTier()\n  {\n    final String tier = \"some tier\";\n    final String errMsg = \"some error\";\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.getKnownLookups()).andThrow(new RuntimeException(errMsg)).once();\n    EasyMock.replay(lookupCoordinatorManager);\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.getSpecificTier(tier, false);\n    Assert.assertEquals(500, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"error\", errMsg), response.getEntity());\n    EasyMock.verify(lookupCoordinatorManager);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/LookupCoordinatorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":847,"status":"N"}],"commitId":"b87c8f03141da4ff8f1e29f904d640094b471491","commitMessage":"@@@fix lookup editor to use lookup tiers instead of historical tiers (#7647)\n\n* fix lookup editor to use lookup tiers instead of historical tiers\n\n* use default tier if empty response.  fix if configured lookups is null\n\n* fixes\n\n* fix typo\n","date":"2019-05-15 04:30:51","modifiedFileCount":"2","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testSimpleGetLookup()\n  {\n    final LookupExtractorFactoryMapContainer container = new LookupExtractorFactoryMapContainer(\n        \"v0\",\n        new HashMap<>()\n    );\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(\n        LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.getLookup(EasyMock.eq(LOOKUP_TIER), EasyMock.eq(LOOKUP_NAME)))\n            .andReturn(container)\n            .once();\n    EasyMock.replay(lookupCoordinatorManager);\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        MAPPER,\n        MAPPER\n    );\n    final Response response = lookupCoordinatorResource.getSpecificLookup(LOOKUP_TIER, LOOKUP_NAME);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(container, response.getEntity());\n    EasyMock.verify(lookupCoordinatorManager);\n  }\n","date":"2019-08-23 18:13:54","endLine":212,"groupId":"10593","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleGetLookup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8c/5a7b91c9130f8afbe71a71bb6ce52983a3cdd6.src","preCode":"  public void testSimpleGetLookup()\n  {\n    final LookupExtractorFactoryMapContainer container = new LookupExtractorFactoryMapContainer(\n        \"v0\",\n        new HashMap<>()\n    );\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(\n        LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.getLookup(EasyMock.eq(LOOKUP_TIER), EasyMock.eq(LOOKUP_NAME)))\n            .andReturn(container)\n            .once();\n    EasyMock.replay(lookupCoordinatorManager);\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.getSpecificLookup(LOOKUP_TIER, LOOKUP_NAME);\n    Assert.assertEquals(200, response.getStatus());\n    Assert.assertEquals(container, response.getEntity());\n    EasyMock.verify(lookupCoordinatorManager);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/LookupCoordinatorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testExceptionalGetTier()\n  {\n    final String tier = \"some tier\";\n    final String errMsg = \"some error\";\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.getKnownLookups()).andThrow(new RuntimeException(errMsg)).once();\n    EasyMock.replay(lookupCoordinatorManager);\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        MAPPER,\n        MAPPER\n    );\n    final Response response = lookupCoordinatorResource.getSpecificTier(tier, false);\n    Assert.assertEquals(500, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"error\", errMsg), response.getEntity());\n    EasyMock.verify(lookupCoordinatorManager);\n  }\n","date":"2019-08-23 18:13:54","endLine":907,"groupId":"10593","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExceptionalGetTier","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8c/5a7b91c9130f8afbe71a71bb6ce52983a3cdd6.src","preCode":"  public void testExceptionalGetTier()\n  {\n    final String tier = \"some tier\";\n    final String errMsg = \"some error\";\n    final LookupCoordinatorManager lookupCoordinatorManager = EasyMock.createStrictMock(LookupCoordinatorManager.class);\n    EasyMock.expect(lookupCoordinatorManager.getKnownLookups()).andThrow(new RuntimeException(errMsg)).once();\n    EasyMock.replay(lookupCoordinatorManager);\n    final LookupCoordinatorResource lookupCoordinatorResource = new LookupCoordinatorResource(\n        lookupCoordinatorManager,\n        mapper,\n        mapper\n    );\n    final Response response = lookupCoordinatorResource.getSpecificTier(tier, false);\n    Assert.assertEquals(500, response.getStatus());\n    Assert.assertEquals(ImmutableMap.of(\"error\", errMsg), response.getEntity());\n    EasyMock.verify(lookupCoordinatorManager);\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/http/LookupCoordinatorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":891,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
