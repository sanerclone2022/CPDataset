[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testMove() throws Exception\n  {\n    MockAmazonS3Client mockS3Client = new MockAmazonS3Client();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n\n    mockS3Client.putObject(\n        \"main\",\n        \"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"\n    );\n    mockS3Client.putObject(\n        \"main\",\n        \"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"\n    );\n\n    DataSegment movedSegment = mover.move(\n        sourceSegment,\n        ImmutableMap.of(\"baseKey\", \"targetBaseKey\", \"bucket\", \"archive\")\n    );\n\n    Map<String, Object> targetLoadSpec = movedSegment.getLoadSpec();\n    Assert.assertEquals(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\", MapUtils.getString(targetLoadSpec, \"key\"));\n    Assert.assertEquals(\"archive\", MapUtils.getString(targetLoadSpec, \"bucket\"));\n    Assert.assertTrue(mockS3Client.didMove());\n  }\n","date":"2018-08-31 00:56:26","endLine":96,"groupId":"17485","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c1/319633e94ac1cdf956994943877d52ab4793ae.src","preCode":"  public void testMove() throws Exception\n  {\n    MockAmazonS3Client mockS3Client = new MockAmazonS3Client();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n\n    mockS3Client.putObject(\n        \"main\",\n        \"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"\n    );\n    mockS3Client.putObject(\n        \"main\",\n        \"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"\n    );\n\n    DataSegment movedSegment = mover.move(\n        sourceSegment,\n        ImmutableMap.of(\"baseKey\", \"targetBaseKey\", \"bucket\", \"archive\")\n    );\n\n    Map<String, Object> targetLoadSpec = movedSegment.getLoadSpec();\n    Assert.assertEquals(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\", MapUtils.getString(targetLoadSpec, \"key\"));\n    Assert.assertEquals(\"archive\", MapUtils.getString(targetLoadSpec, \"bucket\"));\n    Assert.assertTrue(mockS3Client.didMove());\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/S3DataSegmentMoverTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testMoveNoop() throws Exception\n  {\n    MockAmazonS3Client mockS3Client = new MockAmazonS3Client();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n\n    mockS3Client.putObject(\n        \"archive\",\n        \"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"\n    );\n    mockS3Client.putObject(\n        \"archive\",\n        \"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"\n    );\n\n    DataSegment movedSegment = mover.move(\n        sourceSegment,\n        ImmutableMap.of(\"baseKey\", \"targetBaseKey\", \"bucket\", \"archive\")\n    );\n\n    Map<String, Object> targetLoadSpec = movedSegment.getLoadSpec();\n\n    Assert.assertEquals(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\", MapUtils.getString(targetLoadSpec, \"key\"));\n    Assert.assertEquals(\"archive\", MapUtils.getString(targetLoadSpec, \"bucket\"));\n    Assert.assertFalse(mockS3Client.didMove());\n  }\n","date":"2018-08-31 00:56:26","endLine":123,"groupId":"10976","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMoveNoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c1/319633e94ac1cdf956994943877d52ab4793ae.src","preCode":"  public void testMoveNoop() throws Exception\n  {\n    MockAmazonS3Client mockS3Client = new MockAmazonS3Client();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n\n    mockS3Client.putObject(\n        \"archive\",\n        \"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"\n    );\n    mockS3Client.putObject(\n        \"archive\",\n        \"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"\n    );\n\n    DataSegment movedSegment = mover.move(\n        sourceSegment,\n        ImmutableMap.of(\"baseKey\", \"targetBaseKey\", \"bucket\", \"archive\")\n    );\n\n    Map<String, Object> targetLoadSpec = movedSegment.getLoadSpec();\n\n    Assert.assertEquals(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\", MapUtils.getString(targetLoadSpec, \"key\"));\n    Assert.assertEquals(\"archive\", MapUtils.getString(targetLoadSpec, \"bucket\"));\n    Assert.assertFalse(mockS3Client.didMove());\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/S3DataSegmentMoverTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2019-02-21 07:10:29","codes":[{"authorDate":"2019-02-21 07:10:29","commitOrder":2,"curCode":"  public void testMove() throws Exception\n  {\n    MockAmazonS3Client mockS3Client = new MockAmazonS3Client();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n\n    mockS3Client.putObject(\n        \"main\",\n        \"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"\n    );\n\n    DataSegment movedSegment = mover.move(\n        sourceSegment,\n        ImmutableMap.of(\"baseKey\", \"targetBaseKey\", \"bucket\", \"archive\")\n    );\n\n    Map<String, Object> targetLoadSpec = movedSegment.getLoadSpec();\n    Assert.assertEquals(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\", MapUtils.getString(targetLoadSpec, \"key\"));\n    Assert.assertEquals(\"archive\", MapUtils.getString(targetLoadSpec, \"bucket\"));\n    Assert.assertTrue(mockS3Client.didMove());\n  }\n","date":"2019-02-21 07:10:29","endLine":91,"groupId":"17485","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ec/30aa93508f846a8453b30d0dd7c2ba0634720a.src","preCode":"  public void testMove() throws Exception\n  {\n    MockAmazonS3Client mockS3Client = new MockAmazonS3Client();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n\n    mockS3Client.putObject(\n        \"main\",\n        \"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"\n    );\n    mockS3Client.putObject(\n        \"main\",\n        \"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"\n    );\n\n    DataSegment movedSegment = mover.move(\n        sourceSegment,\n        ImmutableMap.of(\"baseKey\", \"targetBaseKey\", \"bucket\", \"archive\")\n    );\n\n    Map<String, Object> targetLoadSpec = movedSegment.getLoadSpec();\n    Assert.assertEquals(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\", MapUtils.getString(targetLoadSpec, \"key\"));\n    Assert.assertEquals(\"archive\", MapUtils.getString(targetLoadSpec, \"bucket\"));\n    Assert.assertTrue(mockS3Client.didMove());\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/S3DataSegmentMoverTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2019-02-21 07:10:29","commitOrder":2,"curCode":"  public void testMoveNoop() throws Exception\n  {\n    MockAmazonS3Client mockS3Client = new MockAmazonS3Client();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n\n    mockS3Client.putObject(\n        \"archive\",\n        \"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"\n    );\n\n    DataSegment movedSegment = mover.move(\n        sourceSegment,\n        ImmutableMap.of(\"baseKey\", \"targetBaseKey\", \"bucket\", \"archive\")\n    );\n\n    Map<String, Object> targetLoadSpec = movedSegment.getLoadSpec();\n\n    Assert.assertEquals(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\", MapUtils.getString(targetLoadSpec, \"key\"));\n    Assert.assertEquals(\"archive\", MapUtils.getString(targetLoadSpec, \"bucket\"));\n    Assert.assertFalse(mockS3Client.didMove());\n  }\n","date":"2019-02-21 07:10:29","endLine":114,"groupId":"10976","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMoveNoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ec/30aa93508f846a8453b30d0dd7c2ba0634720a.src","preCode":"  public void testMoveNoop() throws Exception\n  {\n    MockAmazonS3Client mockS3Client = new MockAmazonS3Client();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n\n    mockS3Client.putObject(\n        \"archive\",\n        \"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"\n    );\n    mockS3Client.putObject(\n        \"archive\",\n        \"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/descriptor.json\"\n    );\n\n    DataSegment movedSegment = mover.move(\n        sourceSegment,\n        ImmutableMap.of(\"baseKey\", \"targetBaseKey\", \"bucket\", \"archive\")\n    );\n\n    Map<String, Object> targetLoadSpec = movedSegment.getLoadSpec();\n\n    Assert.assertEquals(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\", MapUtils.getString(targetLoadSpec, \"key\"));\n    Assert.assertEquals(\"archive\", MapUtils.getString(targetLoadSpec, \"bucket\"));\n    Assert.assertFalse(mockS3Client.didMove());\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/S3DataSegmentMoverTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"4e2b0852012ab4aed20189878a202e3fe590710b","commitMessage":"@@@Remove DataSegmentFinder.  InsertSegmentToDb.  and descriptor.json file in deep storage (#6911)\n\n* Remove DataSegmentFinder.  InsertSegmentToDb.  and descriptor.json file\n\n* delete descriptor.file when killing segments\n\n* fix test\n\n* Add doc for ha\n\n* improve warning\n","date":"2019-02-21 07:10:29","modifiedFileCount":"37","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testMove() throws Exception\n  {\n    MockAmazonS3Client mockS3Client = new MockAmazonS3Client();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n\n    mockS3Client.putObject(\n        \"main\",\n        \"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"\n    );\n\n    DataSegment movedSegment = mover.move(\n        SOURCE_SEGMENT,\n        ImmutableMap.of(\"baseKey\", \"targetBaseKey\", \"bucket\", \"archive\")\n    );\n\n    Map<String, Object> targetLoadSpec = movedSegment.getLoadSpec();\n    Assert.assertEquals(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\", MapUtils.getString(targetLoadSpec, \"key\"));\n    Assert.assertEquals(\"archive\", MapUtils.getString(targetLoadSpec, \"bucket\"));\n    Assert.assertTrue(mockS3Client.didMove());\n  }\n","date":"2019-08-23 18:13:54","endLine":91,"groupId":"102940","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMove","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/66/a61db7015853930d36a370c0d177a451cf8eee.src","preCode":"  public void testMove() throws Exception\n  {\n    MockAmazonS3Client mockS3Client = new MockAmazonS3Client();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n\n    mockS3Client.putObject(\n        \"main\",\n        \"baseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"\n    );\n\n    DataSegment movedSegment = mover.move(\n        sourceSegment,\n        ImmutableMap.of(\"baseKey\", \"targetBaseKey\", \"bucket\", \"archive\")\n    );\n\n    Map<String, Object> targetLoadSpec = movedSegment.getLoadSpec();\n    Assert.assertEquals(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\", MapUtils.getString(targetLoadSpec, \"key\"));\n    Assert.assertEquals(\"archive\", MapUtils.getString(targetLoadSpec, \"bucket\"));\n    Assert.assertTrue(mockS3Client.didMove());\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/S3DataSegmentMoverTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testMoveNoop() throws Exception\n  {\n    MockAmazonS3Client mockS3Client = new MockAmazonS3Client();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n\n    mockS3Client.putObject(\n        \"archive\",\n        \"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"\n    );\n\n    DataSegment movedSegment = mover.move(\n        SOURCE_SEGMENT,\n        ImmutableMap.of(\"baseKey\", \"targetBaseKey\", \"bucket\", \"archive\")\n    );\n\n    Map<String, Object> targetLoadSpec = movedSegment.getLoadSpec();\n\n    Assert.assertEquals(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\", MapUtils.getString(targetLoadSpec, \"key\"));\n    Assert.assertEquals(\"archive\", MapUtils.getString(targetLoadSpec, \"bucket\"));\n    Assert.assertFalse(mockS3Client.didMove());\n  }\n","date":"2019-08-23 18:13:54","endLine":114,"groupId":"102940","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMoveNoop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/66/a61db7015853930d36a370c0d177a451cf8eee.src","preCode":"  public void testMoveNoop() throws Exception\n  {\n    MockAmazonS3Client mockS3Client = new MockAmazonS3Client();\n    S3DataSegmentMover mover = new S3DataSegmentMover(mockS3Client, new S3DataSegmentPusherConfig());\n\n    mockS3Client.putObject(\n        \"archive\",\n        \"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\"\n    );\n\n    DataSegment movedSegment = mover.move(\n        sourceSegment,\n        ImmutableMap.of(\"baseKey\", \"targetBaseKey\", \"bucket\", \"archive\")\n    );\n\n    Map<String, Object> targetLoadSpec = movedSegment.getLoadSpec();\n\n    Assert.assertEquals(\"targetBaseKey/test/2013-01-01T00:00:00.000Z_2013-01-02T00:00:00.000Z/1/0/index.zip\", MapUtils.getString(targetLoadSpec, \"key\"));\n    Assert.assertEquals(\"archive\", MapUtils.getString(targetLoadSpec, \"bucket\"));\n    Assert.assertFalse(mockS3Client.didMove());\n  }\n","realPath":"extensions-core/s3-extensions/src/test/java/org/apache/druid/storage/s3/S3DataSegmentMoverTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
