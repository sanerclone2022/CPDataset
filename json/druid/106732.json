[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testStringExtraction()\n  {\n    String regex = \"(.)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = Sets.newLinkedHashSet();\n\n    for (String testString : testStrings) {\n      extracted.add(extractionFn.apply(testString));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"a\", \"b\", \"c\"));\n    Assert.assertEquals(expected, extracted);\n  }\n","date":"2018-08-31 00:56:26","endLine":141,"groupId":"7533","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/96/95a933fa3bc995998d3866240f5e646de5fdd6.src","preCode":"  public void testStringExtraction()\n  {\n    String regex = \"(.)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = Sets.newLinkedHashSet();\n\n    for (String testString : testStrings) {\n      extracted.add(extractionFn.apply(testString));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"a\", \"b\", \"c\"));\n    Assert.assertEquals(expected, extracted);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/RegexDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void testMissingValueReplacement()\n  {\n    String regex = \"(a\\\\w*)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, true, \"foobar\");\n    Set<String> extracted = Sets.newLinkedHashSet();\n\n    for (String testString : testStrings) {\n      extracted.add(extractionFn.apply(testString));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"apple\", \"awesome\", \"asylum\", \"foobar\"));\n    Assert.assertEquals(expected, extracted);\n\n    byte[] cacheKey = extractionFn.getCacheKey();\n    byte[] expectedCacheKey = new byte[]{\n        0x01, 0x28, 0x61, 0x5C, 0x77, 0x2A, 0x29, (byte) 0xFF, \r\n        0x00, 0x00, 0x00, 0x01, \r\n        0x66, 0x6F, 0x6F, 0x62, 0x61, 0x72, (byte) 0xFF, \r\n        0x01 \r\n    };\n    Assert.assertArrayEquals(expectedCacheKey, cacheKey);\n\n    ExtractionFn nullExtractionFn = new RegexDimExtractionFn(regex, true, null);\n    Set<String> extracted2 = Sets.newLinkedHashSet();\n\n    for (String testString : testStrings) {\n      extracted2.add(nullExtractionFn.apply(testString));\n    }\n\n    Set<String> expected2 = Sets.newLinkedHashSet(ImmutableList.of(\"apple\", \"awesome\", \"asylum\"));\n    expected2.add(null);\n    Assert.assertEquals(expected2, extracted2);\n\n    cacheKey = nullExtractionFn.getCacheKey();\n    expectedCacheKey = new byte[]{\n        0x01, 0x28, 0x61, 0x5C, 0x77, 0x2A, 0x29, (byte) 0xFF, \r\n        0x00, 0x00, 0x00, 0x01, \r\n        (byte) 0xFF, \r\n        0x01 \r\n    };\n    Assert.assertArrayEquals(expectedCacheKey, cacheKey);\n  }\n","date":"2018-08-31 00:56:26","endLine":231,"groupId":"20150","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMissingValueReplacement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/96/95a933fa3bc995998d3866240f5e646de5fdd6.src","preCode":"  public void testMissingValueReplacement()\n  {\n    String regex = \"(a\\\\w*)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, true, \"foobar\");\n    Set<String> extracted = Sets.newLinkedHashSet();\n\n    for (String testString : testStrings) {\n      extracted.add(extractionFn.apply(testString));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"apple\", \"awesome\", \"asylum\", \"foobar\"));\n    Assert.assertEquals(expected, extracted);\n\n    byte[] cacheKey = extractionFn.getCacheKey();\n    byte[] expectedCacheKey = new byte[]{\n        0x01, 0x28, 0x61, 0x5C, 0x77, 0x2A, 0x29, (byte) 0xFF, \r\n        0x00, 0x00, 0x00, 0x01, \r\n        0x66, 0x6F, 0x6F, 0x62, 0x61, 0x72, (byte) 0xFF, \r\n        0x01 \r\n    };\n    Assert.assertArrayEquals(expectedCacheKey, cacheKey);\n\n    ExtractionFn nullExtractionFn = new RegexDimExtractionFn(regex, true, null);\n    Set<String> extracted2 = Sets.newLinkedHashSet();\n\n    for (String testString : testStrings) {\n      extracted2.add(nullExtractionFn.apply(testString));\n    }\n\n    Set<String> expected2 = Sets.newLinkedHashSet(ImmutableList.of(\"apple\", \"awesome\", \"asylum\"));\n    expected2.add(null);\n    Assert.assertEquals(expected2, extracted2);\n\n    cacheKey = nullExtractionFn.getCacheKey();\n    expectedCacheKey = new byte[]{\n        0x01, 0x28, 0x61, 0x5C, 0x77, 0x2A, 0x29, (byte) 0xFF, \r\n        0x00, 0x00, 0x00, 0x01, \r\n        (byte) 0xFF, \r\n        0x01 \r\n    };\n    Assert.assertArrayEquals(expectedCacheKey, cacheKey);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/RegexDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-29 20:02:43","codes":[{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testStringExtraction()\n  {\n    String regex = \"(.)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = new LinkedHashSet<>();\n\n    for (String testString : testStrings) {\n      extracted.add(extractionFn.apply(testString));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"a\", \"b\", \"c\"));\n    Assert.assertEquals(expected, extracted);\n  }\n","date":"2018-10-29 20:02:43","endLine":142,"groupId":"18542","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/757983f53cf24e11186f24769302611686d11c.src","preCode":"  public void testStringExtraction()\n  {\n    String regex = \"(.)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = Sets.newLinkedHashSet();\n\n    for (String testString : testStrings) {\n      extracted.add(extractionFn.apply(testString));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"a\", \"b\", \"c\"));\n    Assert.assertEquals(expected, extracted);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/RegexDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2018-10-29 20:02:43","commitOrder":2,"curCode":"  public void testMissingValueReplacement()\n  {\n    String regex = \"(a\\\\w*)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, true, \"foobar\");\n    Set<String> extracted = new LinkedHashSet<>();\n\n    for (String testString : testStrings) {\n      extracted.add(extractionFn.apply(testString));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"apple\", \"awesome\", \"asylum\", \"foobar\"));\n    Assert.assertEquals(expected, extracted);\n\n    byte[] cacheKey = extractionFn.getCacheKey();\n    byte[] expectedCacheKey = new byte[]{\n        0x01, 0x28, 0x61, 0x5C, 0x77, 0x2A, 0x29, (byte) 0xFF, \r\n        0x00, 0x00, 0x00, 0x01, \r\n        0x66, 0x6F, 0x6F, 0x62, 0x61, 0x72, (byte) 0xFF, \r\n        0x01 \r\n    };\n    Assert.assertArrayEquals(expectedCacheKey, cacheKey);\n\n    ExtractionFn nullExtractionFn = new RegexDimExtractionFn(regex, true, null);\n    Set<String> extracted2 = new LinkedHashSet<>();\n\n    for (String testString : testStrings) {\n      extracted2.add(nullExtractionFn.apply(testString));\n    }\n\n    Set<String> expected2 = Sets.newLinkedHashSet(ImmutableList.of(\"apple\", \"awesome\", \"asylum\"));\n    expected2.add(null);\n    Assert.assertEquals(expected2, extracted2);\n\n    cacheKey = nullExtractionFn.getCacheKey();\n    expectedCacheKey = new byte[]{\n        0x01, 0x28, 0x61, 0x5C, 0x77, 0x2A, 0x29, (byte) 0xFF, \r\n        0x00, 0x00, 0x00, 0x01, \r\n        (byte) 0xFF, \r\n        0x01 \r\n    };\n    Assert.assertArrayEquals(expectedCacheKey, cacheKey);\n  }\n","date":"2018-10-29 20:02:43","endLine":232,"groupId":"18546","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMissingValueReplacement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/42/757983f53cf24e11186f24769302611686d11c.src","preCode":"  public void testMissingValueReplacement()\n  {\n    String regex = \"(a\\\\w*)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, true, \"foobar\");\n    Set<String> extracted = Sets.newLinkedHashSet();\n\n    for (String testString : testStrings) {\n      extracted.add(extractionFn.apply(testString));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"apple\", \"awesome\", \"asylum\", \"foobar\"));\n    Assert.assertEquals(expected, extracted);\n\n    byte[] cacheKey = extractionFn.getCacheKey();\n    byte[] expectedCacheKey = new byte[]{\n        0x01, 0x28, 0x61, 0x5C, 0x77, 0x2A, 0x29, (byte) 0xFF, \r\n        0x00, 0x00, 0x00, 0x01, \r\n        0x66, 0x6F, 0x6F, 0x62, 0x61, 0x72, (byte) 0xFF, \r\n        0x01 \r\n    };\n    Assert.assertArrayEquals(expectedCacheKey, cacheKey);\n\n    ExtractionFn nullExtractionFn = new RegexDimExtractionFn(regex, true, null);\n    Set<String> extracted2 = Sets.newLinkedHashSet();\n\n    for (String testString : testStrings) {\n      extracted2.add(nullExtractionFn.apply(testString));\n    }\n\n    Set<String> expected2 = Sets.newLinkedHashSet(ImmutableList.of(\"apple\", \"awesome\", \"asylum\"));\n    expected2.add(null);\n    Assert.assertEquals(expected2, extracted2);\n\n    cacheKey = nullExtractionFn.getCacheKey();\n    expectedCacheKey = new byte[]{\n        0x01, 0x28, 0x61, 0x5C, 0x77, 0x2A, 0x29, (byte) 0xFF, \r\n        0x00, 0x00, 0x00, 0x01, \r\n        (byte) 0xFF, \r\n        0x01 \r\n    };\n    Assert.assertArrayEquals(expectedCacheKey, cacheKey);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/RegexDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"676f5e6d7f184101b8763e4249b18b237bbe0ec7","commitMessage":"@@@Prohibit some guava collection APIs and use JDK collection APIs directly (#6511)\n\n* Prohibit some guava collection APIs and use JDK APIs directly\n\n* reset files that changed by accident\n\n* sort codestyle/druid-forbidden-apis.txt alphabetically\n","date":"2018-10-29 20:02:43","modifiedFileCount":"427","status":"M","submitter":"QiuMM"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testStringExtraction()\n  {\n    String regex = \"(.)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = new LinkedHashSet<>();\n\n    for (String testString : TEST_STRINGS) {\n      extracted.add(extractionFn.apply(testString));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"a\", \"b\", \"c\"));\n    Assert.assertEquals(expected, extracted);\n  }\n","date":"2019-08-23 18:13:54","endLine":142,"groupId":"106732","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testStringExtraction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/2dcc001be426c5c8191d8557c63de368b1eb40.src","preCode":"  public void testStringExtraction()\n  {\n    String regex = \"(.)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, false, null);\n    Set<String> extracted = new LinkedHashSet<>();\n\n    for (String testString : testStrings) {\n      extracted.add(extractionFn.apply(testString));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"a\", \"b\", \"c\"));\n    Assert.assertEquals(expected, extracted);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/RegexDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":3,"curCode":"  public void testMissingValueReplacement()\n  {\n    String regex = \"(a\\\\w*)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, true, \"foobar\");\n    Set<String> extracted = new LinkedHashSet<>();\n\n    for (String testString : TEST_STRINGS) {\n      extracted.add(extractionFn.apply(testString));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"apple\", \"awesome\", \"asylum\", \"foobar\"));\n    Assert.assertEquals(expected, extracted);\n\n    byte[] cacheKey = extractionFn.getCacheKey();\n    byte[] expectedCacheKey = new byte[]{\n        0x01, 0x28, 0x61, 0x5C, 0x77, 0x2A, 0x29, (byte) 0xFF, \r\n        0x00, 0x00, 0x00, 0x01, \r\n        0x66, 0x6F, 0x6F, 0x62, 0x61, 0x72, (byte) 0xFF, \r\n        0x01 \r\n    };\n    Assert.assertArrayEquals(expectedCacheKey, cacheKey);\n\n    ExtractionFn nullExtractionFn = new RegexDimExtractionFn(regex, true, null);\n    Set<String> extracted2 = new LinkedHashSet<>();\n\n    for (String testString : TEST_STRINGS) {\n      extracted2.add(nullExtractionFn.apply(testString));\n    }\n\n    Set<String> expected2 = Sets.newLinkedHashSet(ImmutableList.of(\"apple\", \"awesome\", \"asylum\"));\n    expected2.add(null);\n    Assert.assertEquals(expected2, extracted2);\n\n    cacheKey = nullExtractionFn.getCacheKey();\n    expectedCacheKey = new byte[]{\n        0x01, 0x28, 0x61, 0x5C, 0x77, 0x2A, 0x29, (byte) 0xFF, \r\n        0x00, 0x00, 0x00, 0x01, \r\n        (byte) 0xFF, \r\n        0x01 \r\n    };\n    Assert.assertArrayEquals(expectedCacheKey, cacheKey);\n  }\n","date":"2019-08-23 18:13:54","endLine":232,"groupId":"106732","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testMissingValueReplacement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7b/2dcc001be426c5c8191d8557c63de368b1eb40.src","preCode":"  public void testMissingValueReplacement()\n  {\n    String regex = \"(a\\\\w*)\";\n    ExtractionFn extractionFn = new RegexDimExtractionFn(regex, true, \"foobar\");\n    Set<String> extracted = new LinkedHashSet<>();\n\n    for (String testString : testStrings) {\n      extracted.add(extractionFn.apply(testString));\n    }\n\n    Set<String> expected = Sets.newLinkedHashSet(ImmutableList.of(\"apple\", \"awesome\", \"asylum\", \"foobar\"));\n    Assert.assertEquals(expected, extracted);\n\n    byte[] cacheKey = extractionFn.getCacheKey();\n    byte[] expectedCacheKey = new byte[]{\n        0x01, 0x28, 0x61, 0x5C, 0x77, 0x2A, 0x29, (byte) 0xFF, \r\n        0x00, 0x00, 0x00, 0x01, \r\n        0x66, 0x6F, 0x6F, 0x62, 0x61, 0x72, (byte) 0xFF, \r\n        0x01 \r\n    };\n    Assert.assertArrayEquals(expectedCacheKey, cacheKey);\n\n    ExtractionFn nullExtractionFn = new RegexDimExtractionFn(regex, true, null);\n    Set<String> extracted2 = new LinkedHashSet<>();\n\n    for (String testString : testStrings) {\n      extracted2.add(nullExtractionFn.apply(testString));\n    }\n\n    Set<String> expected2 = Sets.newLinkedHashSet(ImmutableList.of(\"apple\", \"awesome\", \"asylum\"));\n    expected2.add(null);\n    Assert.assertEquals(expected2, extracted2);\n\n    cacheKey = nullExtractionFn.getCacheKey();\n    expectedCacheKey = new byte[]{\n        0x01, 0x28, 0x61, 0x5C, 0x77, 0x2A, 0x29, (byte) 0xFF, \r\n        0x00, 0x00, 0x00, 0x01, \r\n        (byte) 0xFF, \r\n        0x01 \r\n    };\n    Assert.assertArrayEquals(expectedCacheKey, cacheKey);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/extraction/RegexDimExtractionFnTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"}]
