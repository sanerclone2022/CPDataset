[{"authorTime":"2019-07-04 14:03:47","codes":[{"authorDate":"2019-07-04 14:03:47","commitOrder":1,"curCode":"    public BindingDetails withScalarArguments(Set<Expr> scalarArguments)\n    {\n      Set<IdentifierExpr> moreScalars = new HashSet<>();\n      for (Expr expr : scalarArguments) {\n        final IdentifierExpr stringIdentifier = expr.getIdentifierExprIfIdentifierExpr();\n        if (stringIdentifier != null) {\n          moreScalars.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingDetails(\n          ImmutableSet.copyOf(Sets.union(freeVariables, moreScalars)),\n          ImmutableSet.copyOf(Sets.union(scalarVariables, moreScalars)),\n          arrayVariables\n      );\n    }\n","date":"2019-07-04 14:03:47","endLine":289,"groupId":"22809","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"withScalarArguments","params":"(Set<Expr>scalarArguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/07/c20fafd5b5433775623b57a605f602eb5b2346.src","preCode":"    public BindingDetails withScalarArguments(Set<Expr> scalarArguments)\n    {\n      Set<IdentifierExpr> moreScalars = new HashSet<>();\n      for (Expr expr : scalarArguments) {\n        final IdentifierExpr stringIdentifier = expr.getIdentifierExprIfIdentifierExpr();\n        if (stringIdentifier != null) {\n          moreScalars.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingDetails(\n          ImmutableSet.copyOf(Sets.union(freeVariables, moreScalars)),\n          ImmutableSet.copyOf(Sets.union(scalarVariables, moreScalars)),\n          arrayVariables\n      );\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Expr.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"B"},{"authorDate":"2019-07-04 14:03:47","commitOrder":1,"curCode":"    public BindingDetails withArrayArguments(Set<Expr> arrayArguments)\n    {\n      Set<IdentifierExpr> arrayIdentifiers = new HashSet<>();\n      for (Expr expr : arrayArguments) {\n        final IdentifierExpr isIdentifier = expr.getIdentifierExprIfIdentifierExpr();\n        if (isIdentifier != null) {\n          arrayIdentifiers.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingDetails(\n          ImmutableSet.copyOf(Sets.union(freeVariables, arrayIdentifiers)),\n          scalarVariables,\n          ImmutableSet.copyOf(Sets.union(arrayVariables, arrayIdentifiers))\n      );\n    }\n","date":"2019-07-04 14:03:47","endLine":309,"groupId":"22809","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"withArrayArguments","params":"(Set<Expr>arrayArguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/07/c20fafd5b5433775623b57a605f602eb5b2346.src","preCode":"    public BindingDetails withArrayArguments(Set<Expr> arrayArguments)\n    {\n      Set<IdentifierExpr> arrayIdentifiers = new HashSet<>();\n      for (Expr expr : arrayArguments) {\n        final IdentifierExpr isIdentifier = expr.getIdentifierExprIfIdentifierExpr();\n        if (isIdentifier != null) {\n          arrayIdentifiers.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingDetails(\n          ImmutableSet.copyOf(Sets.union(freeVariables, arrayIdentifiers)),\n          scalarVariables,\n          ImmutableSet.copyOf(Sets.union(arrayVariables, arrayIdentifiers))\n      );\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Expr.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"B"}],"commitId":"e6ba258197468bfc8691b939fe00bd378139a095","commitMessage":"@@@multi-value string expression transformation fix (#8019)\n\n* multi-value string expression transformation fix\n\n* fixes\n\n* more docs and test\n\n* revert unintended doc change\n\n* formatting\n\n* change tostring to print binding identifier\n\n* review fixup\n\n* oops\n","date":"2019-07-04 14:03:47","modifiedFileCount":"21","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-08-03 04:21:25","codes":[{"authorDate":"2019-08-03 04:21:25","commitOrder":2,"curCode":"    public BindingDetails withScalarArguments(Set<Expr> scalarArguments)\n    {\n      Set<IdentifierExpr> moreScalars = new HashSet<>();\n      for (Expr expr : scalarArguments) {\n        final IdentifierExpr stringIdentifier = expr.getIdentifierExprIfIdentifierExpr();\n        if (stringIdentifier != null) {\n          moreScalars.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingDetails(\n          ImmutableSet.copyOf(Sets.union(freeVariables, moreScalars)),\n          ImmutableSet.copyOf(Sets.union(scalarVariables, moreScalars)),\n          arrayVariables,\n          hasInputArrays,\n          isOutputArray\n      );\n    }\n","date":"2019-08-03 04:21:25","endLine":353,"groupId":"22809","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"withScalarArguments","params":"(Set<Expr>scalarArguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3c/54149af91905981eb4b92a857245a8c00e8a35.src","preCode":"    public BindingDetails withScalarArguments(Set<Expr> scalarArguments)\n    {\n      Set<IdentifierExpr> moreScalars = new HashSet<>();\n      for (Expr expr : scalarArguments) {\n        final IdentifierExpr stringIdentifier = expr.getIdentifierExprIfIdentifierExpr();\n        if (stringIdentifier != null) {\n          moreScalars.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingDetails(\n          ImmutableSet.copyOf(Sets.union(freeVariables, moreScalars)),\n          ImmutableSet.copyOf(Sets.union(scalarVariables, moreScalars)),\n          arrayVariables\n      );\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Expr.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"M"},{"authorDate":"2019-08-03 04:21:25","commitOrder":2,"curCode":"    public BindingDetails withArrayArguments(Set<Expr> arrayArguments)\n    {\n      Set<IdentifierExpr> arrayIdentifiers = new HashSet<>();\n      for (Expr expr : arrayArguments) {\n        final IdentifierExpr isIdentifier = expr.getIdentifierExprIfIdentifierExpr();\n        if (isIdentifier != null) {\n          arrayIdentifiers.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingDetails(\n          ImmutableSet.copyOf(Sets.union(freeVariables, arrayIdentifiers)),\n          scalarVariables,\n          ImmutableSet.copyOf(Sets.union(arrayVariables, arrayIdentifiers)),\n          hasInputArrays || arrayArguments.size() > 0,\n          isOutputArray\n      );\n    }\n","date":"2019-08-03 04:21:25","endLine":375,"groupId":"22809","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"withArrayArguments","params":"(Set<Expr>arrayArguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3c/54149af91905981eb4b92a857245a8c00e8a35.src","preCode":"    public BindingDetails withArrayArguments(Set<Expr> arrayArguments)\n    {\n      Set<IdentifierExpr> arrayIdentifiers = new HashSet<>();\n      for (Expr expr : arrayArguments) {\n        final IdentifierExpr isIdentifier = expr.getIdentifierExprIfIdentifierExpr();\n        if (isIdentifier != null) {\n          arrayIdentifiers.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingDetails(\n          ImmutableSet.copyOf(Sets.union(freeVariables, arrayIdentifiers)),\n          scalarVariables,\n          ImmutableSet.copyOf(Sets.union(arrayVariables, arrayIdentifiers))\n      );\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Expr.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"M"}],"commitId":"e7c6deac768d66c12b71daecae12ecb5a7db2380","commitMessage":"@@@optimize single input column multi-value expressions (#8047)\n\n* optimize single input column multi-value expressions\n\n* javadocs\n\n* merge fixup\n\n* vectorization fixup\n\n* more fixes\n\n* more docs\n\n* more links\n\n* empty\n\n* javadocs are hard\n\n* suppress javadoc refs issue\n\n* fix it\n","date":"2019-08-03 04:21:25","modifiedFileCount":"24","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-08-27 05:34:16","codes":[{"authorDate":"2019-08-27 05:34:16","commitOrder":3,"curCode":"    public BindingDetails withScalarArguments(Set<Expr> scalarArguments)\n    {\n      Set<IdentifierExpr> moreScalars = new HashSet<>();\n      for (Expr expr : scalarArguments) {\n        final boolean isIdentiferExpr = expr.getIdentifierExprIfIdentifierExpr() != null;\n        if (isIdentiferExpr) {\n          moreScalars.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingDetails(\n          ImmutableSet.copyOf(Sets.union(freeVariables, moreScalars)),\n          ImmutableSet.copyOf(Sets.union(scalarVariables, moreScalars)),\n          arrayVariables,\n          hasInputArrays,\n          isOutputArray\n      );\n    }\n","date":"2019-08-27 05:34:16","endLine":351,"groupId":"12110","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"withScalarArguments","params":"(Set<Expr>scalarArguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d5/0535edc4418da3c0829349206b5d0f6344afe0.src","preCode":"    public BindingDetails withScalarArguments(Set<Expr> scalarArguments)\n    {\n      Set<IdentifierExpr> moreScalars = new HashSet<>();\n      for (Expr expr : scalarArguments) {\n        final IdentifierExpr stringIdentifier = expr.getIdentifierExprIfIdentifierExpr();\n        if (stringIdentifier != null) {\n          moreScalars.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingDetails(\n          ImmutableSet.copyOf(Sets.union(freeVariables, moreScalars)),\n          ImmutableSet.copyOf(Sets.union(scalarVariables, moreScalars)),\n          arrayVariables,\n          hasInputArrays,\n          isOutputArray\n      );\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Expr.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"},{"authorDate":"2019-08-27 05:34:16","commitOrder":3,"curCode":"    BindingDetails withArrayArguments(Set<Expr> arrayArguments)\n    {\n      Set<IdentifierExpr> arrayIdentifiers = new HashSet<>();\n      for (Expr expr : arrayArguments) {\n        final boolean isIdentifierExpr = expr.getIdentifierExprIfIdentifierExpr() != null;\n        if (isIdentifierExpr) {\n          arrayIdentifiers.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingDetails(\n          ImmutableSet.copyOf(Sets.union(freeVariables, arrayIdentifiers)),\n          scalarVariables,\n          ImmutableSet.copyOf(Sets.union(arrayVariables, arrayIdentifiers)),\n          hasInputArrays || !arrayArguments.isEmpty(),\n          isOutputArray\n      );\n    }\n","date":"2019-08-27 05:34:16","endLine":373,"groupId":"12110","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"withArrayArguments","params":"(Set<Expr>arrayArguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/d5/0535edc4418da3c0829349206b5d0f6344afe0.src","preCode":"    public BindingDetails withArrayArguments(Set<Expr> arrayArguments)\n    {\n      Set<IdentifierExpr> arrayIdentifiers = new HashSet<>();\n      for (Expr expr : arrayArguments) {\n        final IdentifierExpr isIdentifier = expr.getIdentifierExprIfIdentifierExpr();\n        if (isIdentifier != null) {\n          arrayIdentifiers.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingDetails(\n          ImmutableSet.copyOf(Sets.union(freeVariables, arrayIdentifiers)),\n          scalarVariables,\n          ImmutableSet.copyOf(Sets.union(arrayVariables, arrayIdentifiers)),\n          hasInputArrays || arrayArguments.size() > 0,\n          isOutputArray\n      );\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Expr.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"}],"commitId":"a4b842ac2eca6bc459a14433c82783ca5d024ea5","commitMessage":"@@@Speed up ExpressionSelectors.makeExprEvalSelector (#8373)\n\n* Speed up ExpressionSelectors.makeExprEvalSelector\n\nAddresses performance bottlenecks observed when running a search query\nwith an expression filter and granularity set to none by caching and\nchanging streams to for-loops. After changes.  the query was observed to\nrun 2-3x faster.\n\nAlso fixes various IntelliJ inspection warnings.\n\n* Fix static analysis errors\n","date":"2019-08-27 05:34:16","modifiedFileCount":"3","status":"M","submitter":"Chi Cao Minh"},{"authorTime":"2020-09-15 09:18:56","codes":[{"authorDate":"2020-09-15 09:18:56","commitOrder":4,"curCode":"    public BindingAnalysis withScalarArguments(Set<Expr> scalarArguments)\n    {\n      Set<IdentifierExpr> moreScalars = new HashSet<>();\n      for (Expr expr : scalarArguments) {\n        final boolean isIdentiferExpr = expr.getIdentifierExprIfIdentifierExpr() != null;\n        if (isIdentiferExpr) {\n          moreScalars.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingAnalysis(\n          ImmutableSet.copyOf(Sets.union(freeVariables, moreScalars)),\n          ImmutableSet.copyOf(Sets.union(scalarVariables, moreScalars)),\n          arrayVariables,\n          hasInputArrays,\n          isOutputArray\n      );\n    }\n","date":"2020-09-15 09:18:56","endLine":377,"groupId":"105502","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"withScalarArguments","params":"(Set<Expr>scalarArguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2a/13be3f84598e9bd529dd69ba4799d936c980d1.src","preCode":"    public BindingDetails withScalarArguments(Set<Expr> scalarArguments)\n    {\n      Set<IdentifierExpr> moreScalars = new HashSet<>();\n      for (Expr expr : scalarArguments) {\n        final boolean isIdentiferExpr = expr.getIdentifierExprIfIdentifierExpr() != null;\n        if (isIdentiferExpr) {\n          moreScalars.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingDetails(\n          ImmutableSet.copyOf(Sets.union(freeVariables, moreScalars)),\n          ImmutableSet.copyOf(Sets.union(scalarVariables, moreScalars)),\n          arrayVariables,\n          hasInputArrays,\n          isOutputArray\n      );\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Expr.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"},{"authorDate":"2020-09-15 09:18:56","commitOrder":4,"curCode":"    BindingAnalysis withArrayArguments(Set<Expr> arrayArguments)\n    {\n      Set<IdentifierExpr> arrayIdentifiers = new HashSet<>();\n      for (Expr expr : arrayArguments) {\n        final boolean isIdentifierExpr = expr.getIdentifierExprIfIdentifierExpr() != null;\n        if (isIdentifierExpr) {\n          arrayIdentifiers.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingAnalysis(\n          ImmutableSet.copyOf(Sets.union(freeVariables, arrayIdentifiers)),\n          scalarVariables,\n          ImmutableSet.copyOf(Sets.union(arrayVariables, arrayIdentifiers)),\n          hasInputArrays || !arrayArguments.isEmpty(),\n          isOutputArray\n      );\n    }\n","date":"2020-09-15 09:18:56","endLine":399,"groupId":"105502","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"withArrayArguments","params":"(Set<Expr>arrayArguments)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2a/13be3f84598e9bd529dd69ba4799d936c980d1.src","preCode":"    BindingDetails withArrayArguments(Set<Expr> arrayArguments)\n    {\n      Set<IdentifierExpr> arrayIdentifiers = new HashSet<>();\n      for (Expr expr : arrayArguments) {\n        final boolean isIdentifierExpr = expr.getIdentifierExprIfIdentifierExpr() != null;\n        if (isIdentifierExpr) {\n          arrayIdentifiers.add((IdentifierExpr) expr);\n        }\n      }\n      return new BindingDetails(\n          ImmutableSet.copyOf(Sets.union(freeVariables, arrayIdentifiers)),\n          scalarVariables,\n          ImmutableSet.copyOf(Sets.union(arrayVariables, arrayIdentifiers)),\n          hasInputArrays || !arrayArguments.isEmpty(),\n          isOutputArray\n      );\n    }\n","realPath":"core/src/main/java/org/apache/druid/math/expr/Expr.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":383,"status":"M"}],"commitId":"184b202411ffe6d04037e6b670985a58c3bf53e5","commitMessage":"@@@add computed Expr output types (#10370)\n\n* push down ValueType to ExprType conversion.  tidy up\n\n* determine expr output type for given input types\n\n* revert unintended name change\n\n* add nullable\n\n* tidy up\n\n* fixup\n\n* more better\n\n* fix signatures\n\n* naming things is hard\n\n* fix inspection\n\n* javadoc\n\n* make default implementation of Expr.getOutputType that returns null\n\n* rename method\n\n* more test\n\n* add output for contains expr macro.  split operation and function auto conversion","date":"2020-09-15 09:18:56","modifiedFileCount":"39","status":"M","submitter":"Clint Wylie"}]
