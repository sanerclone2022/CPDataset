[{"authorTime":"2019-11-16 01:22:09","codes":[{"authorDate":"2019-11-16 01:22:09","commitOrder":1,"curCode":"  public void testParserAndInputSource()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"Cannot use parser and inputSource together.\");\n    final IndexIngestionSpec spec = new IndexIngestionSpec(\n        new DataSchema(\n            \"dataSource\",\n            ImmutableMap.of(\"fake\", \"parser map\"),\n            new AggregatorFactory[0],\n            new ArbitraryGranularitySpec(Granularities.NONE, null),\n            null,\n            null\n        ),\n        new IndexIOConfig(\n            null,\n            new NoopInputSource(),\n            null,\n            null\n        ),\n        null\n    );\n  }\n","date":"2019-11-16 01:22:09","endLine":91,"groupId":"18478","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParserAndInputSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c7/00ad36132195ba795142ed5cf3e7cb5d161771.src","preCode":"  public void testParserAndInputSource()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"Cannot use parser and inputSource together.\");\n    final IndexIngestionSpec spec = new IndexIngestionSpec(\n        new DataSchema(\n            \"dataSource\",\n            ImmutableMap.of(\"fake\", \"parser map\"),\n            new AggregatorFactory[0],\n            new ArbitraryGranularitySpec(Granularities.NONE, null),\n            null,\n            null\n        ),\n        new IndexIOConfig(\n            null,\n            new NoopInputSource(),\n            null,\n            null\n        ),\n        null\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexIngestionSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2019-11-16 01:22:09","commitOrder":1,"curCode":"  public void testFirehoseAndInputFormat()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"Cannot use firehose and inputFormat together.\");\n    final IndexIngestionSpec spec = new IndexIngestionSpec(\n        new DataSchema(\n            \"dataSource\",\n            new TimestampSpec(null, null, null),\n            DimensionsSpec.EMPTY,\n            new AggregatorFactory[0],\n            new ArbitraryGranularitySpec(Granularities.NONE, null),\n            null\n        ),\n        new IndexIOConfig(\n            new NoopFirehoseFactory(),\n            null,\n            new NoopInputFormat(),\n            null\n        ),\n        null\n    );\n  }\n","date":"2019-11-16 01:22:09","endLine":141,"groupId":"22597","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFirehoseAndInputFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c7/00ad36132195ba795142ed5cf3e7cb5d161771.src","preCode":"  public void testFirehoseAndInputFormat()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"Cannot use firehose and inputFormat together.\");\n    final IndexIngestionSpec spec = new IndexIngestionSpec(\n        new DataSchema(\n            \"dataSource\",\n            new TimestampSpec(null, null, null),\n            DimensionsSpec.EMPTY,\n            new AggregatorFactory[0],\n            new ArbitraryGranularitySpec(Granularities.NONE, null),\n            null\n        ),\n        new IndexIOConfig(\n            new NoopFirehoseFactory(),\n            null,\n            new NoopInputFormat(),\n            null\n        ),\n        null\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexIngestionSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"B"}],"commitId":"1611792855ad9def8b6f5b1375862d05d1acca0a","commitMessage":"@@@Add InputSource and InputFormat interfaces (#8823)\n\n* Add InputSource and InputFormat interfaces\n\n* revert orc dependency\n\n* fix dimension exclusions and failing unit tests\n\n* fix tests\n\n* fix test\n\n* fix test\n\n* fix firehose and inputSource for parallel indexing task\n\n* fix tc\n\n* fix tc: remove unused method\n\n* Formattable\n\n* add needsFormat(); renamed to ObjectSource; pass metricsName for reader\n\n* address comments\n\n* fix closing resource\n\n* fix checkstyle\n\n* fix tests\n\n* remove verify from csv\n\n* Revert \"remove verify from csv\"\n\nThis reverts commit 1ea7758489cc8c9d708bd691fd48e62085fd9455.\n\n* address comments\n\n* fix import order and javadoc\n\n* flatMap\n\n* sampleLine\n\n* Add IntermediateRowParsingReader\n\n* Address comments\n\n* move csv reader test\n\n* remove test for verify\n\n* adjust comments\n\n* Fix InputEntityIteratingReader\n\n* rename source -> entity\n\n* address comments\n","date":"2019-11-16 01:22:09","modifiedFileCount":"72","status":"B","submitter":"Jihoon Son"},{"authorTime":"2021-04-02 03:29:36","codes":[{"authorDate":"2021-04-02 03:29:36","commitOrder":2,"curCode":"  public void testParserAndInputSource()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"Cannot use parser and inputSource together.\");\n    final IndexIngestionSpec spec = new IndexIngestionSpec(\n        new DataSchema(\n            \"dataSource\",\n            ImmutableMap.of(\"fake\", \"parser map\"),\n            new AggregatorFactory[0],\n            new ArbitraryGranularitySpec(Granularities.NONE, null),\n            null,\n            null\n        ),\n        new IndexIOConfig(\n            null,\n            new NoopInputSource(),\n            null,\n            null,\n            null\n        ),\n        null\n    );\n  }\n","date":"2021-04-02 03:29:36","endLine":93,"groupId":"104571","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testParserAndInputSource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6a/f2e194c1f33443d498501e9b3e35f99673f10a.src","preCode":"  public void testParserAndInputSource()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"Cannot use parser and inputSource together.\");\n    final IndexIngestionSpec spec = new IndexIngestionSpec(\n        new DataSchema(\n            \"dataSource\",\n            ImmutableMap.of(\"fake\", \"parser map\"),\n            new AggregatorFactory[0],\n            new ArbitraryGranularitySpec(Granularities.NONE, null),\n            null,\n            null\n        ),\n        new IndexIOConfig(\n            null,\n            new NoopInputSource(),\n            null,\n            null\n        ),\n        null\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexIngestionSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2021-04-02 03:29:36","commitOrder":2,"curCode":"  public void testFirehoseAndInputFormat()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"Cannot use firehose and inputFormat together.\");\n    final IndexIngestionSpec spec = new IndexIngestionSpec(\n        new DataSchema(\n            \"dataSource\",\n            new TimestampSpec(null, null, null),\n            DimensionsSpec.EMPTY,\n            new AggregatorFactory[0],\n            new ArbitraryGranularitySpec(Granularities.NONE, null),\n            null\n        ),\n        new IndexIOConfig(\n            new NoopFirehoseFactory(),\n            null,\n            new NoopInputFormat(),\n            null,\n            null\n        ),\n        null\n    );\n  }\n","date":"2021-04-02 03:29:36","endLine":145,"groupId":"104571","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testFirehoseAndInputFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/6a/f2e194c1f33443d498501e9b3e35f99673f10a.src","preCode":"  public void testFirehoseAndInputFormat()\n  {\n    expectedException.expect(IllegalArgumentException.class);\n    expectedException.expectMessage(\"Cannot use firehose and inputFormat together.\");\n    final IndexIngestionSpec spec = new IndexIngestionSpec(\n        new DataSchema(\n            \"dataSource\",\n            new TimestampSpec(null, null, null),\n            DimensionsSpec.EMPTY,\n            new AggregatorFactory[0],\n            new ArbitraryGranularitySpec(Granularities.NONE, null),\n            null\n        ),\n        new IndexIOConfig(\n            new NoopFirehoseFactory(),\n            null,\n            new NoopInputFormat(),\n            null\n        ),\n        null\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexIngestionSpecTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"}],"commitId":"d7f529336463dad273a742808b49d524bdc4ae11","commitMessage":"@@@Add an option for ingestion task to drop (mark unused) all existing segments that are contained by interval in the ingestionSpec (#11025)\n\n* Auto-Compaction can run indefinitely when segmentGranularity is changed from coarser to finer.\n\n* Add option to drop segments after ingestion\n\n* fix checkstyle\n\n* add tests\n\n* add tests\n\n* add tests\n\n* fix test\n\n* add tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add docs\n\n* fix docs\n\n* address comments\n\n* address comments\n\n* fix spelling","date":"2021-04-02 03:29:36","modifiedFileCount":"44","status":"M","submitter":"Maytas Monsereenusorn"}]
