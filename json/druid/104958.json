[{"authorTime":"2020-03-13 06:10:11","codes":[{"authorDate":"2020-03-13 06:10:11","commitOrder":1,"curCode":"  public void testGreatest()\n  {\n    \r\n    assertExpr(\"greatest(y, 0)\", 2L);\n    assertExpr(\"greatest(34.0, z, 5.0, 767.0\", 767.0);\n    assertExpr(\"greatest('B', x, 'A')\", \"foo\");\n\n    \r\n    assertExpr(\"greatest(-1, z, 'A')\", \"A\");\n    assertExpr(\"greatest(-1, z)\", 3.1);\n    assertExpr(\"greatest(1, 'A')\", \"A\");\n\n    \r\n    try {\n      assertExpr(\"greatest(1, ['A'])\", null);\n      Assert.fail(\"Did not throw IllegalArgumentException\");\n    }\n    catch (IllegalArgumentException e) {\n      Assert.assertEquals(\"Function[greatest] does not accept STRING_ARRAY types\", e.getMessage());\n    }\n\n    \r\n    assertExpr(\"greatest()\", null);\n    assertExpr(\"greatest(null, null)\", null);\n    assertExpr(\"greatest(1, null, 'A')\", \"A\");\n  }\n","date":"2020-03-13 06:10:11","endLine":322,"groupId":"13907","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGreatest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/92/39e778390baad88a5feeafd54dea862fa4bbe9.src","preCode":"  public void testGreatest()\n  {\n    \r\n    assertExpr(\"greatest(y, 0)\", 2L);\n    assertExpr(\"greatest(34.0, z, 5.0, 767.0\", 767.0);\n    assertExpr(\"greatest('B', x, 'A')\", \"foo\");\n\n    \r\n    assertExpr(\"greatest(-1, z, 'A')\", \"A\");\n    assertExpr(\"greatest(-1, z)\", 3.1);\n    assertExpr(\"greatest(1, 'A')\", \"A\");\n\n    \r\n    try {\n      assertExpr(\"greatest(1, ['A'])\", null);\n      Assert.fail(\"Did not throw IllegalArgumentException\");\n    }\n    catch (IllegalArgumentException e) {\n      Assert.assertEquals(\"Function[greatest] does not accept STRING_ARRAY types\", e.getMessage());\n    }\n\n    \r\n    assertExpr(\"greatest()\", null);\n    assertExpr(\"greatest(null, null)\", null);\n    assertExpr(\"greatest(1, null, 'A')\", \"A\");\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/FunctionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"B"},{"authorDate":"2020-03-13 06:10:11","commitOrder":1,"curCode":"  public void testLeast()\n  {\n    \r\n    assertExpr(\"least(y, 0)\", 0L);\n    assertExpr(\"least(34.0, z, 5.0, 767.0\", 3.1);\n    assertExpr(\"least('B', x, 'A')\", \"A\");\n\n    \r\n    assertExpr(\"least(-1, z, 'A')\", \"-1\");\n    assertExpr(\"least(-1, z)\", -1.0);\n    assertExpr(\"least(1, 'A')\", \"1\");\n\n    \r\n    try {\n      assertExpr(\"least(1, [2, 3])\", null);\n      Assert.fail(\"Did not throw IllegalArgumentException\");\n    }\n    catch (IllegalArgumentException e) {\n      Assert.assertEquals(\"Function[least] does not accept LONG_ARRAY types\", e.getMessage());\n    }\n\n    \r\n    assertExpr(\"least()\", null);\n    assertExpr(\"least(null, null)\", null);\n    assertExpr(\"least(1, null, 'A')\", \"1\");\n  }\n","date":"2020-03-13 06:10:11","endLine":350,"groupId":"7406","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/92/39e778390baad88a5feeafd54dea862fa4bbe9.src","preCode":"  public void testLeast()\n  {\n    \r\n    assertExpr(\"least(y, 0)\", 0L);\n    assertExpr(\"least(34.0, z, 5.0, 767.0\", 3.1);\n    assertExpr(\"least('B', x, 'A')\", \"A\");\n\n    \r\n    assertExpr(\"least(-1, z, 'A')\", \"-1\");\n    assertExpr(\"least(-1, z)\", -1.0);\n    assertExpr(\"least(1, 'A')\", \"1\");\n\n    \r\n    try {\n      assertExpr(\"least(1, [2, 3])\", null);\n      Assert.fail(\"Did not throw IllegalArgumentException\");\n    }\n    catch (IllegalArgumentException e) {\n      Assert.assertEquals(\"Function[least] does not accept LONG_ARRAY types\", e.getMessage());\n    }\n\n    \r\n    assertExpr(\"least()\", null);\n    assertExpr(\"least(null, null)\", null);\n    assertExpr(\"least(1, null, 'A')\", \"1\");\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/FunctionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"B"}],"commitId":"6b02991464839188ae815242adeef5b43da16341","commitMessage":"@@@Match GREATEST/LEAST function behavior to other DBs (#9488)\n\n* Match GREATEST/LEAST function behavior\n\nChange the behavior of the GREATEST / LEAST functions to be similar to\nhow it is implemented in other databases (as functions instead of\naggregators). The GREATEST/LEAST functions are not in the SQL standard. \nbut users will expect behavior similar to what other databases provide.\n\n* Match postgres behavior & handle more SQL types\n\n* Fix imports","date":"2020-03-13 06:10:11","modifiedFileCount":"5","status":"B","submitter":"Chi Cao Minh"},{"authorTime":"2020-09-24 04:56:38","codes":[{"authorDate":"2020-09-24 04:56:38","commitOrder":2,"curCode":"  public void testGreatest()\n  {\n    \r\n    assertExpr(\"greatest(y, 0)\", 2L);\n    assertExpr(\"greatest(34.0, z, 5.0, 767.0)\", 767.0);\n    assertExpr(\"greatest('B', x, 'A')\", \"foo\");\n\n    \r\n    assertExpr(\"greatest(-1, z, 'A')\", \"A\");\n    assertExpr(\"greatest(-1, z)\", 3.1);\n    assertExpr(\"greatest(1, 'A')\", \"A\");\n\n    \r\n    try {\n      assertExpr(\"greatest(1, ['A'])\", null);\n      Assert.fail(\"Did not throw IllegalArgumentException\");\n    }\n    catch (IllegalArgumentException e) {\n      Assert.assertEquals(\"Function[greatest] does not accept STRING_ARRAY types\", e.getMessage());\n    }\n\n    \r\n    assertExpr(\"greatest()\", null);\n    assertExpr(\"greatest(null, null)\", null);\n    assertExpr(\"greatest(1, null, 'A')\", \"A\");\n  }\n","date":"2020-09-24 04:56:38","endLine":492,"groupId":"104958","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGreatest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3c/5c214de657f02dd48e932ae22e21cdd10824cc.src","preCode":"  public void testGreatest()\n  {\n    \r\n    assertExpr(\"greatest(y, 0)\", 2L);\n    assertExpr(\"greatest(34.0, z, 5.0, 767.0\", 767.0);\n    assertExpr(\"greatest('B', x, 'A')\", \"foo\");\n\n    \r\n    assertExpr(\"greatest(-1, z, 'A')\", \"A\");\n    assertExpr(\"greatest(-1, z)\", 3.1);\n    assertExpr(\"greatest(1, 'A')\", \"A\");\n\n    \r\n    try {\n      assertExpr(\"greatest(1, ['A'])\", null);\n      Assert.fail(\"Did not throw IllegalArgumentException\");\n    }\n    catch (IllegalArgumentException e) {\n      Assert.assertEquals(\"Function[greatest] does not accept STRING_ARRAY types\", e.getMessage());\n    }\n\n    \r\n    assertExpr(\"greatest()\", null);\n    assertExpr(\"greatest(null, null)\", null);\n    assertExpr(\"greatest(1, null, 'A')\", \"A\");\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/FunctionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":467,"status":"M"},{"authorDate":"2020-09-24 04:56:38","commitOrder":2,"curCode":"  public void testLeast()\n  {\n    \r\n    assertExpr(\"least(y, 0)\", 0L);\n    assertExpr(\"least(34.0, z, 5.0, 767.0)\", 3.1);\n    assertExpr(\"least('B', x, 'A')\", \"A\");\n\n    \r\n    assertExpr(\"least(-1, z, 'A')\", \"-1\");\n    assertExpr(\"least(-1, z)\", -1.0);\n    assertExpr(\"least(1, 'A')\", \"1\");\n\n    \r\n    try {\n      assertExpr(\"least(1, [2, 3])\", null);\n      Assert.fail(\"Did not throw IllegalArgumentException\");\n    }\n    catch (IllegalArgumentException e) {\n      Assert.assertEquals(\"Function[least] does not accept LONG_ARRAY types\", e.getMessage());\n    }\n\n    \r\n    assertExpr(\"least()\", null);\n    assertExpr(\"least(null, null)\", null);\n    assertExpr(\"least(1, null, 'A')\", \"1\");\n  }\n","date":"2020-09-24 04:56:38","endLine":520,"groupId":"104958","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeast","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3c/5c214de657f02dd48e932ae22e21cdd10824cc.src","preCode":"  public void testLeast()\n  {\n    \r\n    assertExpr(\"least(y, 0)\", 0L);\n    assertExpr(\"least(34.0, z, 5.0, 767.0\", 3.1);\n    assertExpr(\"least('B', x, 'A')\", \"A\");\n\n    \r\n    assertExpr(\"least(-1, z, 'A')\", \"-1\");\n    assertExpr(\"least(-1, z)\", -1.0);\n    assertExpr(\"least(1, 'A')\", \"1\");\n\n    \r\n    try {\n      assertExpr(\"least(1, [2, 3])\", null);\n      Assert.fail(\"Did not throw IllegalArgumentException\");\n    }\n    catch (IllegalArgumentException e) {\n      Assert.assertEquals(\"Function[least] does not accept LONG_ARRAY types\", e.getMessage());\n    }\n\n    \r\n    assertExpr(\"least()\", null);\n    assertExpr(\"least(null, null)\", null);\n    assertExpr(\"least(1, null, 'A')\", \"1\");\n  }\n","realPath":"core/src/test/java/org/apache/druid/math/expr/FunctionTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":495,"status":"M"}],"commitId":"19c4b1664086539a3bb495eb402616cf8b6f2a77","commitMessage":"@@@vectorized expressions and expression virtual columns (#10401)\n\n* vectorized expression virtual columns\n\n* cleanup\n\n* fixes\n\n* preserve float if explicitly specified\n\n* oops\n\n* null handling fixes.  more tests\n\n* what is an expression planner?\n\n* better names\n\n* remove unused method.  add pi\n\n* move vector processor builders into static methods\n\n* reduce boilerplate\n\n* oops\n\n* more naming adjustments\n\n* changes\n\n* nullable\n\n* missing hex\n\n* more","date":"2020-09-24 04:56:38","modifiedFileCount":"56","status":"M","submitter":"Clint Wylie"}]
