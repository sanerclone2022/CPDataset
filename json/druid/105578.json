[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public static Iterable<Object[]> compressionStrategiesAndByteOrders()\n  {\n    Set<List<Object>> combinations = Sets.cartesianProduct(\n        Sets.newHashSet(CompressionStrategy.noNoneValues()),\n        Sets.newHashSet(ByteOrder.BIG_ENDIAN, ByteOrder.LITTLE_ENDIAN)\n    );\n\n    return Iterables.transform(\n        combinations, new Function<List, Object[]>()\n        {\n          @Override\n          public Object[] apply(List input)\n          {\n            return new Object[]{input.get(0), input.get(1)};\n          }\n        }\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":93,"groupId":"7959","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"compressionStrategiesAndByteOrders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b8/9ae961bb60f7a0df9a1206a445b010f2ced558.src","preCode":"  public static Iterable<Object[]> compressionStrategiesAndByteOrders()\n  {\n    Set<List<Object>> combinations = Sets.cartesianProduct(\n        Sets.newHashSet(CompressionStrategy.noNoneValues()),\n        Sets.newHashSet(ByteOrder.BIG_ENDIAN, ByteOrder.LITTLE_ENDIAN)\n    );\n\n    return Iterables.transform(\n        combinations, new Function<List, Object[]>()\n        {\n          @Override\n          public Object[] apply(List input)\n          {\n            return new Object[]{input.get(0), input.get(1)};\n          }\n        }\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/CompressedVSizeColumnarIntsSerializerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public static Iterable<Object[]> compressionStrategies()\n  {\n    final Iterable<CompressionStrategy> compressionStrategies = Iterables.transform(\n        CompressionStrategyTest.compressionStrategies(),\n        new Function<Object[], CompressionStrategy>()\n        {\n          @Override\n          public CompressionStrategy apply(Object[] input)\n          {\n            return (CompressionStrategy) input[0];\n          }\n        }\n    );\n\n    Set<List<Object>> combinations = Sets.cartesianProduct(\n        Sets.newHashSet(compressionStrategies),\n        Sets.newHashSet(ByteOrder.BIG_ENDIAN, ByteOrder.LITTLE_ENDIAN)\n    );\n\n    return Iterables.transform(\n        combinations, new Function<List, Object[]>()\n        {\n          @Override\n          public Object[] apply(List input)\n          {\n            return new Object[]{input.get(0), input.get(1)};\n          }\n        }\n    );\n  }\n","date":"2018-08-31 00:56:26","endLine":86,"groupId":"7959","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"compressionStrategies","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/38/ae7ff981e13a4125ce6891d3a7686353c34103.src","preCode":"  public static Iterable<Object[]> compressionStrategies()\n  {\n    final Iterable<CompressionStrategy> compressionStrategies = Iterables.transform(\n        CompressionStrategyTest.compressionStrategies(),\n        new Function<Object[], CompressionStrategy>()\n        {\n          @Override\n          public CompressionStrategy apply(Object[] input)\n          {\n            return (CompressionStrategy) input[0];\n          }\n        }\n    );\n\n    Set<List<Object>> combinations = Sets.cartesianProduct(\n        Sets.newHashSet(compressionStrategies),\n        Sets.newHashSet(ByteOrder.BIG_ENDIAN, ByteOrder.LITTLE_ENDIAN)\n    );\n\n    return Iterables.transform(\n        combinations, new Function<List, Object[]>()\n        {\n          @Override\n          public Object[] apply(List input)\n          {\n            return new Object[]{input.get(0), input.get(1)};\n          }\n        }\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/CompressedVSizeColumnarIntsSupplierTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-10-23 18:17:38","codes":[{"authorDate":"2018-10-23 18:17:38","commitOrder":2,"curCode":"  public static Iterable<Object[]> compressionStrategiesAndByteOrders()\n  {\n    Set<List<Object>> combinations = Sets.cartesianProduct(\n        Sets.newHashSet(CompressionStrategy.noNoneValues()),\n        Sets.newHashSet(ByteOrder.BIG_ENDIAN, ByteOrder.LITTLE_ENDIAN)\n    );\n\n    return Iterables.transform(\n        combinations,\n        (Function<List, Object[]>) input -> new Object[]{input.get(0), input.get(1)}\n    );\n  }\n","date":"2018-10-23 18:17:38","endLine":87,"groupId":"2827","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"compressionStrategiesAndByteOrders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0c/5ffa84200f3deaeb5aff0b4d37e88c0f551354.src","preCode":"  public static Iterable<Object[]> compressionStrategiesAndByteOrders()\n  {\n    Set<List<Object>> combinations = Sets.cartesianProduct(\n        Sets.newHashSet(CompressionStrategy.noNoneValues()),\n        Sets.newHashSet(ByteOrder.BIG_ENDIAN, ByteOrder.LITTLE_ENDIAN)\n    );\n\n    return Iterables.transform(\n        combinations, new Function<List, Object[]>()\n        {\n          @Override\n          public Object[] apply(List input)\n          {\n            return new Object[]{input.get(0), input.get(1)};\n          }\n        }\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/CompressedVSizeColumnarIntsSerializerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2018-10-23 18:17:38","commitOrder":2,"curCode":"  public static Iterable<Object[]> compressionStrategies()\n  {\n    final Iterable<CompressionStrategy> compressionStrategies = Iterables.transform(\n        CompressionStrategyTest.compressionStrategies(),\n        (Object[] input) -> (CompressionStrategy) input[0]\n    );\n\n    Set<List<Object>> combinations = Sets.cartesianProduct(\n        Sets.newHashSet(compressionStrategies),\n        Sets.newHashSet(ByteOrder.BIG_ENDIAN, ByteOrder.LITTLE_ENDIAN)\n    );\n\n    return Iterables.transform(\n        combinations,\n        (Function<List, Object[]>) input -> new Object[]{input.get(0), input.get(1)}\n    );\n  }\n","date":"2018-10-23 18:17:38","endLine":73,"groupId":"2827","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"compressionStrategies","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3b/3d427a23aea398378a0a26ac3bb5e7805f08aa.src","preCode":"  public static Iterable<Object[]> compressionStrategies()\n  {\n    final Iterable<CompressionStrategy> compressionStrategies = Iterables.transform(\n        CompressionStrategyTest.compressionStrategies(),\n        new Function<Object[], CompressionStrategy>()\n        {\n          @Override\n          public CompressionStrategy apply(Object[] input)\n          {\n            return (CompressionStrategy) input[0];\n          }\n        }\n    );\n\n    Set<List<Object>> combinations = Sets.cartesianProduct(\n        Sets.newHashSet(compressionStrategies),\n        Sets.newHashSet(ByteOrder.BIG_ENDIAN, ByteOrder.LITTLE_ENDIAN)\n    );\n\n    return Iterables.transform(\n        combinations, new Function<List, Object[]>()\n        {\n          @Override\n          public Object[] apply(List input)\n          {\n            return new Object[]{input.get(0), input.get(1)};\n          }\n        }\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/CompressedVSizeColumnarIntsSupplierTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"84ac18dc1bce14afe88ebcccd46da21baefae73d","commitMessage":"@@@Catch some incorrect method parameter or call argument formatting patterns with checkstyle (#6461)\n\n* Catch some incorrect method parameter or call argument formatting patterns with checkstyle\n\n* Fix DiscoveryModule\n\n* Inline parameters_and_arguments.txt\n\n* Fix a bug in PolyBind\n\n* Fix formatting\n","date":"2018-10-23 18:17:38","modifiedFileCount":"339","status":"M","submitter":"Roman Leventov"},{"authorTime":"2020-06-11 00:32:00","codes":[{"authorDate":"2018-10-23 18:17:38","commitOrder":3,"curCode":"  public static Iterable<Object[]> compressionStrategiesAndByteOrders()\n  {\n    Set<List<Object>> combinations = Sets.cartesianProduct(\n        Sets.newHashSet(CompressionStrategy.noNoneValues()),\n        Sets.newHashSet(ByteOrder.BIG_ENDIAN, ByteOrder.LITTLE_ENDIAN)\n    );\n\n    return Iterables.transform(\n        combinations,\n        (Function<List, Object[]>) input -> new Object[]{input.get(0), input.get(1)}\n    );\n  }\n","date":"2018-10-23 18:17:38","endLine":87,"groupId":"105578","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"compressionStrategiesAndByteOrders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/0c/5ffa84200f3deaeb5aff0b4d37e88c0f551354.src","preCode":"  public static Iterable<Object[]> compressionStrategiesAndByteOrders()\n  {\n    Set<List<Object>> combinations = Sets.cartesianProduct(\n        Sets.newHashSet(CompressionStrategy.noNoneValues()),\n        Sets.newHashSet(ByteOrder.BIG_ENDIAN, ByteOrder.LITTLE_ENDIAN)\n    );\n\n    return Iterables.transform(\n        combinations,\n        (Function<List, Object[]>) input -> new Object[]{input.get(0), input.get(1)}\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/CompressedVSizeColumnarIntsSerializerTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"},{"authorDate":"2020-06-11 00:32:00","commitOrder":3,"curCode":"  public static Iterable<Object[]> compressionStrategies()\n  {\n    Set<List<Object>> combinations = Sets.cartesianProduct(\n        Sets.newHashSet(CompressionStrategy.noNoneValues()),\n        Sets.newHashSet(ByteOrder.BIG_ENDIAN, ByteOrder.LITTLE_ENDIAN)\n    );\n\n    return Iterables.transform(\n        combinations,\n        (Function<List, Object[]>) input -> new Object[]{input.get(0), input.get(1)}\n    );\n  }\n","date":"2020-06-11 00:32:00","endLine":68,"groupId":"105578","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"compressionStrategies","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f1/13dc3510adc877c86d1096a2b5463d0e80ae86.src","preCode":"  public static Iterable<Object[]> compressionStrategies()\n  {\n    final Iterable<CompressionStrategy> compressionStrategies = Iterables.transform(\n        CompressionStrategyTest.compressionStrategies(),\n        (Object[] input) -> (CompressionStrategy) input[0]\n    );\n\n    Set<List<Object>> combinations = Sets.cartesianProduct(\n        Sets.newHashSet(compressionStrategies),\n        Sets.newHashSet(ByteOrder.BIG_ENDIAN, ByteOrder.LITTLE_ENDIAN)\n    );\n\n    return Iterables.transform(\n        combinations,\n        (Function<List, Object[]>) input -> new Object[]{input.get(0), input.get(1)}\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/segment/data/CompressedVSizeColumnarIntsSupplierTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"7282e2f2f9776fc3763f510b1de81706f1740fce","commitMessage":"@@@Simplify CompressedVSizeColumnarIntsSupplierTest (#10003)\n\nThe parameters generator uses CompressionStrategy.noNoneValues() instead\nof CompressionStrategyTest.compressionStrategies() which wrapped each\nstrategy in a single element array. This improves readability of the\ntest.","date":"2020-06-11 00:32:00","modifiedFileCount":"1","status":"M","submitter":"Stefan Birkner"}]
