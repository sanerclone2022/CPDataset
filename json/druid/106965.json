[{"authorTime":"2019-08-28 07:10:59","codes":[{"authorDate":"2019-08-28 07:10:59","commitOrder":1,"curCode":"  public void setup()\n  {\n    selector = new TestLongColumnSelector(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n  }\n","date":"2019-08-28 07:10:59","endLine":55,"groupId":"7641","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e8/40d57767ff5b88ba139c284a67f2a14b98dc90.src","preCode":"  public void setup()\n  {\n    selector = new TestLongColumnSelector(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/LongMinAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2019-08-28 07:10:59","commitOrder":1,"curCode":"  public void setup()\n  {\n    selector = new TestLongColumnSelector(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n  }\n","date":"2019-08-28 07:10:59","endLine":55,"groupId":"7641","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/14/da2ad0d1f4cb8bec421774acc2b853aa0fc770.src","preCode":"  public void setup()\n  {\n    selector = new TestLongColumnSelector(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/LongMaxAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"5c3db41c2b9786dcb0dfa28dabdc1bd49ceeb1eb","commitMessage":"@@@string column handling for long/float min/max/sum aggregators (#8319)\n\n* string column handling for long min/max/sum aggregators\n\n* add apache license to new files\n\n* use 'L' as suffix for long literal instead of 'l'\n\n* return null in ParallelCombiner.SettableColumnSelectorFactory.getColumnCapabilities(String) as is required by contract of ColumnSelectorFactory interface\n\n* fix more tests\n","date":"2019-08-28 07:10:59","modifiedFileCount":"16","status":"B","submitter":"Himanshu"},{"authorTime":"2019-08-28 07:10:59","codes":[{"authorDate":"2020-08-02 06:32:09","commitOrder":2,"curCode":"  public void setup()\n  {\n    NullHandling.initializeForTests();\n    selector = new TestLongColumnSelector(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n\n    VectorValueSelector vectorValueSelector = EasyMock.createMock(VectorValueSelector.class);\n    EasyMock.expect(vectorValueSelector.getLongVector()).andReturn(longValues1).anyTimes();\n    EasyMock.expect(vectorValueSelector.getNullVector()).andReturn(null).anyTimes();\n    EasyMock.replay(vectorValueSelector);\n\n    vectorColumnSelectorFactory = EasyMock.createMock(VectorColumnSelectorFactory.class);\n    EasyMock.expect(vectorColumnSelectorFactory.getColumnCapabilities(\"lngFld\"))\n            .andReturn(new ColumnCapabilitiesImpl().setType(ValueType.LONG).setDictionaryEncoded(true)).anyTimes();\n    EasyMock.expect(vectorColumnSelectorFactory.makeValueSelector(\"lngFld\")).andReturn(vectorValueSelector).anyTimes();\n    EasyMock.replay(vectorColumnSelectorFactory);\n  }\n","date":"2020-08-02 06:32:09","endLine":78,"groupId":"7641","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/00/c9ab4f8c8f7db9f43343a9b17392aa6d1be706.src","preCode":"  public void setup()\n  {\n    selector = new TestLongColumnSelector(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/LongMinAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2019-08-28 07:10:59","commitOrder":2,"curCode":"  public void setup()\n  {\n    selector = new TestLongColumnSelector(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n  }\n","date":"2019-08-28 07:10:59","endLine":55,"groupId":"7641","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/14/da2ad0d1f4cb8bec421774acc2b853aa0fc770.src","preCode":"  public void setup()\n  {\n    selector = new TestLongColumnSelector(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/LongMaxAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"}],"commitId":"34a41137522fca463c6af1df5edb2f41297491f5","commitMessage":"@@@Add vectorization support for the longMin aggregator. (#10211)\n\n* Fix minor formatting in docs.\n\n* Add Nullhandling initialization for test to run from IDE.\n\n* Vectorize longMin aggregator.\n\n- A new vectorized class for the vectorized long min aggregator.\n- Changes to AggregatorFactory to support vectorize functionality.\n- Few changes to schema evolution test to add LongMinAggregatorFactory.\n\n* Add longSum to the supported vectorized aggregator implementations.\n\n* Add MIN() long min to calcite query test that can vectorize.\n\n* Add simple long aggregations test.\n\n* Fixup formatting per checkstyle guide.\n\n* fixup and add more tests for long min aggregator.\n\n* Override test for groupBy since timestamps are handled differently.\n\n* Null compatibility check in test.\n\n* Review comment: Add a test case to LongMinAggregationTest.","date":"2020-08-02 06:32:09","modifiedFileCount":"9","status":"M","submitter":"Abhishek Radhakrishnan"},{"authorTime":"2020-08-11 06:18:55","codes":[{"authorDate":"2020-08-02 06:32:09","commitOrder":3,"curCode":"  public void setup()\n  {\n    NullHandling.initializeForTests();\n    selector = new TestLongColumnSelector(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n\n    VectorValueSelector vectorValueSelector = EasyMock.createMock(VectorValueSelector.class);\n    EasyMock.expect(vectorValueSelector.getLongVector()).andReturn(longValues1).anyTimes();\n    EasyMock.expect(vectorValueSelector.getNullVector()).andReturn(null).anyTimes();\n    EasyMock.replay(vectorValueSelector);\n\n    vectorColumnSelectorFactory = EasyMock.createMock(VectorColumnSelectorFactory.class);\n    EasyMock.expect(vectorColumnSelectorFactory.getColumnCapabilities(\"lngFld\"))\n            .andReturn(new ColumnCapabilitiesImpl().setType(ValueType.LONG).setDictionaryEncoded(true)).anyTimes();\n    EasyMock.expect(vectorColumnSelectorFactory.makeValueSelector(\"lngFld\")).andReturn(vectorValueSelector).anyTimes();\n    EasyMock.replay(vectorColumnSelectorFactory);\n  }\n","date":"2020-08-02 06:32:09","endLine":78,"groupId":"106965","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/00/c9ab4f8c8f7db9f43343a9b17392aa6d1be706.src","preCode":"  public void setup()\n  {\n    NullHandling.initializeForTests();\n    selector = new TestLongColumnSelector(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n\n    VectorValueSelector vectorValueSelector = EasyMock.createMock(VectorValueSelector.class);\n    EasyMock.expect(vectorValueSelector.getLongVector()).andReturn(longValues1).anyTimes();\n    EasyMock.expect(vectorValueSelector.getNullVector()).andReturn(null).anyTimes();\n    EasyMock.replay(vectorValueSelector);\n\n    vectorColumnSelectorFactory = EasyMock.createMock(VectorColumnSelectorFactory.class);\n    EasyMock.expect(vectorColumnSelectorFactory.getColumnCapabilities(\"lngFld\"))\n            .andReturn(new ColumnCapabilitiesImpl().setType(ValueType.LONG).setDictionaryEncoded(true)).anyTimes();\n    EasyMock.expect(vectorColumnSelectorFactory.makeValueSelector(\"lngFld\")).andReturn(vectorValueSelector).anyTimes();\n    EasyMock.replay(vectorColumnSelectorFactory);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/LongMinAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"N"},{"authorDate":"2020-08-11 06:18:55","commitOrder":3,"curCode":"  public void setup()\n  {\n    NullHandling.initializeForTests();\n    selector = new TestLongColumnSelector(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n\n\n    VectorValueSelector vectorValueSelector = EasyMock.createMock(VectorValueSelector.class);\n    EasyMock.expect(vectorValueSelector.getLongVector()).andReturn(longValues1).anyTimes();\n    EasyMock.expect(vectorValueSelector.getNullVector()).andReturn(null).anyTimes();\n    EasyMock.replay(vectorValueSelector);\n\n    vectorColumnSelectorFactory = EasyMock.createMock(VectorColumnSelectorFactory.class);\n    EasyMock.expect(vectorColumnSelectorFactory.getColumnCapabilities(\"lngFld\"))\n            .andReturn(new ColumnCapabilitiesImpl().setType(ValueType.LONG).setDictionaryEncoded(true)).anyTimes();\n    EasyMock.expect(vectorColumnSelectorFactory.makeValueSelector(\"lngFld\")).andReturn(vectorValueSelector).anyTimes();\n    EasyMock.replay(vectorColumnSelectorFactory);\n  }\n","date":"2020-08-11 06:18:55","endLine":79,"groupId":"106965","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/83/8d3969cd68c12fea5117c3425c2bab6ae84c31.src","preCode":"  public void setup()\n  {\n    selector = new TestLongColumnSelector(values);\n    colSelectorFactory = EasyMock.createMock(ColumnSelectorFactory.class);\n    EasyMock.expect(colSelectorFactory.makeColumnValueSelector(\"nilly\")).andReturn(selector);\n    EasyMock.expect(colSelectorFactory.getColumnCapabilities(\"nilly\")).andReturn(null);\n    EasyMock.replay(colSelectorFactory);\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/aggregation/LongMaxAggregationTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"dc16abae34ca9f4159f692ee866a122f70de9cdf","commitMessage":"@@@Vectorization support for long.  double.  float min & max aggregators. (#10260)\n\n* LongMaxVectorAggregator support and test case.\n\n* DoubleMinVectorAggregator and test cases.\n\n* DoubleMaxVectorAggregator and unit test.\n\n* FloatMinVectorAggregator and FloatMaxVectorAggregator.\n\n* Documentation update to include the other vector aggregators.\n\n* Bug fix.\n\n* checkstyle formatting fixes.\n\n* CalciteQueryTest cases update.\n\n* Separate test classes for FloatMaxAggregation and FloatMniAggregation.\n\n* remove the cannotVectorize for float max/min aggregator in test.\n\n* Tests in GroupByQueryRunner.  GroupByTimeseriesQueryRunner and TimeseriesQueryRunner.","date":"2020-08-11 06:18:55","modifiedFileCount":"13","status":"M","submitter":"Abhishek Radhakrishnan"}]
