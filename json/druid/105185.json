[{"authorTime":"2018-10-15 11:37:37","codes":[{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testIsOvershadowedWithNonOverlappingSegmentsInTimeline()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-04-05/2011-04-07\", \"1\", new SingleElementPartitionChunk<Integer>(1));\n    add(\"2011-04-07/2011-04-09\", \"1\", new SingleElementPartitionChunk<Integer>(1));\n\n    add(\"2011-04-15/2011-04-17\", \"1\", new SingleElementPartitionChunk<Integer>(1));\n    add(\"2011-04-17/2011-04-19\", \"1\", new SingleElementPartitionChunk<Integer>(1));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"2\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"2\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"2\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"2\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-30\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-16\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-17\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-18\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-30\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-19/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\"));\n  }\n","date":"2018-10-15 11:37:37","endLine":1625,"groupId":"6738","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsOvershadowedWithNonOverlappingSegmentsInTimeline","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/1f6a605c5c6e9ed6995b5f6015449a98ea7d15.src","preCode":"  public void testIsOvershadowedWithNonOverlappingSegmentsInTimeline()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-04-05/2011-04-07\", \"1\", new SingleElementPartitionChunk<Integer>(1));\n    add(\"2011-04-07/2011-04-09\", \"1\", new SingleElementPartitionChunk<Integer>(1));\n\n    add(\"2011-04-15/2011-04-17\", \"1\", new SingleElementPartitionChunk<Integer>(1));\n    add(\"2011-04-17/2011-04-19\", \"1\", new SingleElementPartitionChunk<Integer>(1));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"2\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"2\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"2\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"2\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-30\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-16\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-17\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-18\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-30\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-19/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\"));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1563,"status":"B"},{"authorDate":"2018-10-15 11:37:37","commitOrder":1,"curCode":"  public void testIsOvershadowedWithOverlappingSegmentsInTimeline()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-04-05/2011-04-09\", \"11\", new SingleElementPartitionChunk<Integer>(1));\n    add(\"2011-04-07/2011-04-11\", \"12\", new SingleElementPartitionChunk<Integer>(1));\n\n    add(\"2011-04-15/2011-04-19\", \"12\", new SingleElementPartitionChunk<Integer>(1));\n    add(\"2011-04-17/2011-04-21\", \"11\", new SingleElementPartitionChunk<Integer>(1));\n\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-11\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"12\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"13\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-12\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-16\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-18\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-22\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-11\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-12\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-16\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-18\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-22\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-16\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-18\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-22\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\"));\n  }\n","date":"2018-10-15 11:37:37","endLine":1710,"groupId":"6739","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsOvershadowedWithOverlappingSegmentsInTimeline","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/68/1f6a605c5c6e9ed6995b5f6015449a98ea7d15.src","preCode":"  public void testIsOvershadowedWithOverlappingSegmentsInTimeline()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-04-05/2011-04-09\", \"11\", new SingleElementPartitionChunk<Integer>(1));\n    add(\"2011-04-07/2011-04-11\", \"12\", new SingleElementPartitionChunk<Integer>(1));\n\n    add(\"2011-04-15/2011-04-19\", \"12\", new SingleElementPartitionChunk<Integer>(1));\n    add(\"2011-04-17/2011-04-21\", \"11\", new SingleElementPartitionChunk<Integer>(1));\n\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-11\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"12\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"13\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-12\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-16\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-18\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-22\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-11\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-12\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-16\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-18\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-22\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-16\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-18\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-22\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\"));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1628,"status":"B"}],"commitId":"84598fba3b283cbfd6a5addd2602c7b12ba8c00c","commitMessage":"@@@combine druid-api.  druid-common.  java-util into druid-core (#6443)\n\n* combine druid-api.  druid-common.  java-util\n\n* spacing\n","date":"2018-10-15 11:37:37","modifiedFileCount":"0","status":"B","submitter":"Clint Wylie"},{"authorTime":"2019-07-17 22:18:48","codes":[{"authorDate":"2019-07-17 22:18:48","commitOrder":2,"curCode":"  public void testIsOvershadowedWithNonOverlappingSegmentsInTimeline()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-04-05/2011-04-07\", \"1\", new SingleElementPartitionChunk<>(1));\n    add(\"2011-04-07/2011-04-09\", \"1\", new SingleElementPartitionChunk<>(1));\n\n    add(\"2011-04-15/2011-04-17\", \"1\", new SingleElementPartitionChunk<>(1));\n    add(\"2011-04-17/2011-04-19\", \"1\", new SingleElementPartitionChunk<>(1));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"2\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"2\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"2\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"2\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-30\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-16\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-17\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-18\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-30\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-19/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\"));\n  }\n","date":"2019-07-17 22:18:48","endLine":1625,"groupId":"6738","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsOvershadowedWithNonOverlappingSegmentsInTimeline","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3e/66bf53de79d142e3e530f93c2d88478c3b75bb.src","preCode":"  public void testIsOvershadowedWithNonOverlappingSegmentsInTimeline()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-04-05/2011-04-07\", \"1\", new SingleElementPartitionChunk<Integer>(1));\n    add(\"2011-04-07/2011-04-09\", \"1\", new SingleElementPartitionChunk<Integer>(1));\n\n    add(\"2011-04-15/2011-04-17\", \"1\", new SingleElementPartitionChunk<Integer>(1));\n    add(\"2011-04-17/2011-04-19\", \"1\", new SingleElementPartitionChunk<Integer>(1));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"2\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"2\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"2\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"2\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-30\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-16\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-17\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-18\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-30\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-19/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\"));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1563,"status":"M"},{"authorDate":"2019-07-17 22:18:48","commitOrder":2,"curCode":"  public void testIsOvershadowedWithOverlappingSegmentsInTimeline()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-04-05/2011-04-09\", \"11\", new SingleElementPartitionChunk<>(1));\n    add(\"2011-04-07/2011-04-11\", \"12\", new SingleElementPartitionChunk<>(1));\n\n    add(\"2011-04-15/2011-04-19\", \"12\", new SingleElementPartitionChunk<>(1));\n    add(\"2011-04-17/2011-04-21\", \"11\", new SingleElementPartitionChunk<>(1));\n\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-11\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"12\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"13\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-12\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-16\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-18\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-22\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-11\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-12\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-16\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-18\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-22\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-16\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-18\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-22\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\"));\n  }\n","date":"2019-07-17 22:18:48","endLine":1710,"groupId":"6739","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsOvershadowedWithOverlappingSegmentsInTimeline","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/3e/66bf53de79d142e3e530f93c2d88478c3b75bb.src","preCode":"  public void testIsOvershadowedWithOverlappingSegmentsInTimeline()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-04-05/2011-04-09\", \"11\", new SingleElementPartitionChunk<Integer>(1));\n    add(\"2011-04-07/2011-04-11\", \"12\", new SingleElementPartitionChunk<Integer>(1));\n\n    add(\"2011-04-15/2011-04-19\", \"12\", new SingleElementPartitionChunk<Integer>(1));\n    add(\"2011-04-17/2011-04-21\", \"11\", new SingleElementPartitionChunk<Integer>(1));\n\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-11\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"12\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"13\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-12\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-16\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-18\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-22\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-11\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-12\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-16\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-18\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-22\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-16\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-18\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-22\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\"));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1628,"status":"M"}],"commitId":"ceb969903f06a72d669bb55ab83223bddb5355ee","commitMessage":"@@@Refactor SQLMetadataSegmentManager; Change contract of REST met? (#7653)\n\n* Refactor SQLMetadataSegmentManager; Change contract of REST methods in DataSourcesResource\n\n* Style fixes\n\n* Unused imports\n\n* Fix tests\n\n* Fix style\n\n* Comments\n\n* Comment fix\n\n* Remove unresolvable Javadoc references; address comments\n\n* Add comments to ImmutableDruidDataSource\n\n* Merge with master\n\n* Fix bad web-console merge\n\n* Fixes in api-reference.md\n\n* Rename in DruidCoordinatorRuntimeParams\n\n* Fix compilation\n\n* Residual changes\n","date":"2019-07-17 22:18:48","modifiedFileCount":"77","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-07-25 08:35:46","codes":[{"authorDate":"2019-07-25 08:35:46","commitOrder":3,"curCode":"  public void testIsOvershadowedWithNonOverlappingSegmentsInTimeline()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-04-05/2011-04-07\", \"1\", makeSingle(\"1\", 1));\n    add(\"2011-04-07/2011-04-09\", \"1\", makeSingle(\"1\", 1));\n\n    add(\"2011-04-15/2011-04-17\", \"1\", makeSingle(\"1\", 1));\n    add(\"2011-04-17/2011-04-19\", \"1\", makeSingle(\"1\", 1));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"1\", new OvershadowableInteger(\"1\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"1\", new OvershadowableInteger(\"1\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"1\", new OvershadowableInteger(\"1\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"1\", new OvershadowableInteger(\"1\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"2\", new OvershadowableInteger(\"2\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"2\", new OvershadowableInteger(\"2\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"2\", new OvershadowableInteger(\"2\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"2\", new OvershadowableInteger(\"2\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-15\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-17\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-19\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-16\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-17\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-18\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-19\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-20\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-19/2011-04-20\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n  }\n","date":"2019-07-25 08:35:46","endLine":1636,"groupId":"1147","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsOvershadowedWithNonOverlappingSegmentsInTimeline","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/69/71833678f9078ca6e9c474ef4010ba5252a836.src","preCode":"  public void testIsOvershadowedWithNonOverlappingSegmentsInTimeline()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-04-05/2011-04-07\", \"1\", new SingleElementPartitionChunk<>(1));\n    add(\"2011-04-07/2011-04-09\", \"1\", new SingleElementPartitionChunk<>(1));\n\n    add(\"2011-04-15/2011-04-17\", \"1\", new SingleElementPartitionChunk<>(1));\n    add(\"2011-04-17/2011-04-19\", \"1\", new SingleElementPartitionChunk<>(1));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"1\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"2\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"2\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"2\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"2\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-30\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-16\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-17\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-18\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-30\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-19/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\"));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1574,"status":"M"},{"authorDate":"2019-07-25 08:35:46","commitOrder":3,"curCode":"  public void testIsOvershadowedWithOverlappingSegmentsInTimeline()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-04-05/2011-04-09\", \"11\", makeSingle(\"11\", 1));\n    add(\"2011-04-07/2011-04-11\", \"12\", makeSingle(\"12\", 1));\n\n    add(\"2011-04-15/2011-04-19\", \"12\", makeSingle(\"12\", 1));\n    add(\"2011-04-17/2011-04-21\", \"11\", makeSingle(\"11\", 1));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-11\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-12\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-15\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-16\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-17\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-18\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-19\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-20\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-21\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-22\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-11\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-12\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-15\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-16\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-17\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-18\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-19\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-20\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-21\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-22\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-15\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-16\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-17\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-18\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-19\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-20\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-21\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-22\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-21\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n  }\n","date":"2019-07-25 08:35:46","endLine":1720,"groupId":"18991","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsOvershadowedWithOverlappingSegmentsInTimeline","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/69/71833678f9078ca6e9c474ef4010ba5252a836.src","preCode":"  public void testIsOvershadowedWithOverlappingSegmentsInTimeline()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-04-05/2011-04-09\", \"11\", new SingleElementPartitionChunk<>(1));\n    add(\"2011-04-07/2011-04-11\", \"12\", new SingleElementPartitionChunk<>(1));\n\n    add(\"2011-04-15/2011-04-19\", \"12\", new SingleElementPartitionChunk<>(1));\n    add(\"2011-04-17/2011-04-21\", \"11\", new SingleElementPartitionChunk<>(1));\n\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-11\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"12\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"12\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"13\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"13\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-12\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-16\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-18\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-22\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\"));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-11\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-12\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-16\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-18\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-22\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-15\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-16\"), \"0\"));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-17\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-18\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-19\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-20\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-22\"), \"0\"));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-21\"), \"0\"));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\"));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1639,"status":"M"}],"commitId":"db149462073d59e7563f0d3834e69d44a2bb4011","commitMessage":"@@@Add support minor compaction with segment locking (#7547)\n\n* Segment locking\n\n* Allow both timeChunk and segment lock in the same gruop\n\n* fix it test\n\n* Fix adding same chunk to atomicUpdateGroup\n\n* resolving todos\n\n* Fix segments to lock\n\n* fix segments to lock\n\n* fix kill task\n\n* resolving todos\n\n* resolving todos\n\n* fix teamcity\n\n* remove unused class\n\n* fix single map\n\n* resolving todos\n\n* fix build\n\n* fix SQLMetadataSegmentManager\n\n* fix findInputSegments\n\n* adding more tests\n\n* fixing task lock checks\n\n* add SegmentTransactionalOverwriteAction\n\n* changing publisher\n\n* fixing something\n\n* fix for perfect rollup\n\n* fix test\n\n* adjust package-lock.json\n\n* fix test\n\n* fix style\n\n* adding javadocs\n\n* remove unused classes\n\n* add more javadocs\n\n* unused import\n\n* fix test\n\n* fix test\n\n* Support forceTimeChunk context and force timeChunk lock for parallel index task if intervals are missing\n\n* fix travis\n\n* fix travis\n\n* unused import\n\n* spotbug\n\n* revert getMaxVersion\n\n* address comments\n\n* fix tc\n\n* add missing error handling\n\n* fix backward compatibility\n\n* unused import\n\n* Fix perf of versionedIntervalTimeline\n\n* fix timeline\n\n* fix tc\n\n* remove remaining todos\n\n* add comment for parallel index\n\n* fix javadoc and typos\n\n* typo\n\n* address comments\n","date":"2019-07-25 08:35:46","modifiedFileCount":"130","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-11-07 03:07:04","codes":[{"authorDate":"2019-11-07 03:07:04","commitOrder":4,"curCode":"  public void testIsOvershadowedWithNonOverlappingSegmentsInTimeline()\n  {\n    add(\"2011-04-05/2011-04-07\", \"1\", makeSingle(\"1\", 1));\n    add(\"2011-04-07/2011-04-09\", \"1\", makeSingle(\"1\", 1));\n\n    add(\"2011-04-15/2011-04-17\", \"1\", makeSingle(\"1\", 1));\n    add(\"2011-04-17/2011-04-19\", \"1\", makeSingle(\"1\", 1));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"1\", new OvershadowableInteger(\"1\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"1\", new OvershadowableInteger(\"1\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"1\", new OvershadowableInteger(\"1\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"1\", new OvershadowableInteger(\"1\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"2\", new OvershadowableInteger(\"2\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"2\", new OvershadowableInteger(\"2\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"2\", new OvershadowableInteger(\"2\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"2\", new OvershadowableInteger(\"2\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-15\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-17\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-19\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-16\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-17\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-18\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-19\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-20\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-19/2011-04-20\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n  }\n","date":"2019-11-07 03:07:04","endLine":1149,"groupId":"105185","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testIsOvershadowedWithNonOverlappingSegmentsInTimeline","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/ab76c506b668abe29f0cfc4c03fbee37bdc94a.src","preCode":"  public void testIsOvershadowedWithNonOverlappingSegmentsInTimeline()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-04-05/2011-04-07\", \"1\", makeSingle(\"1\", 1));\n    add(\"2011-04-07/2011-04-09\", \"1\", makeSingle(\"1\", 1));\n\n    add(\"2011-04-15/2011-04-17\", \"1\", makeSingle(\"1\", 1));\n    add(\"2011-04-17/2011-04-19\", \"1\", makeSingle(\"1\", 1));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"1\", new OvershadowableInteger(\"1\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"1\", new OvershadowableInteger(\"1\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"1\", new OvershadowableInteger(\"1\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"1\", new OvershadowableInteger(\"1\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"2\", new OvershadowableInteger(\"2\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"2\", new OvershadowableInteger(\"2\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"2\", new OvershadowableInteger(\"2\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"2\", new OvershadowableInteger(\"2\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-07/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-08/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-15\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-17\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-19\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-09/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-16\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-17\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-18\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-19\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-20\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-19/2011-04-20\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1089,"status":"M"},{"authorDate":"2019-11-07 03:07:04","commitOrder":4,"curCode":"  public void testIsOvershadowedWithOverlappingSegmentsInTimeline()\n  {\n    add(\"2011-04-05/2011-04-09\", \"11\", makeSingle(\"11\", 1));\n    add(\"2011-04-07/2011-04-11\", \"12\", makeSingle(\"12\", 1));\n\n    add(\"2011-04-15/2011-04-19\", \"12\", makeSingle(\"12\", 1));\n    add(\"2011-04-17/2011-04-21\", \"11\", makeSingle(\"11\", 1));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-11\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-12\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-15\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-16\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-17\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-18\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-19\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-20\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-21\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-22\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-11\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-12\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-15\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-16\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-17\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-18\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-19\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-20\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-21\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-22\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-15\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-16\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-17\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-18\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-19\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-20\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-21\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-22\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-21\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n  }\n","date":"2019-11-07 03:07:04","endLine":1231,"groupId":"105185","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testIsOvershadowedWithOverlappingSegmentsInTimeline","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/e1/ab76c506b668abe29f0cfc4c03fbee37bdc94a.src","preCode":"  public void testIsOvershadowedWithOverlappingSegmentsInTimeline()\n  {\n    timeline = makeStringIntegerTimeline();\n\n    add(\"2011-04-05/2011-04-09\", \"11\", makeSingle(\"11\", 1));\n    add(\"2011-04-07/2011-04-11\", \"12\", makeSingle(\"12\", 1));\n\n    add(\"2011-04-15/2011-04-19\", \"12\", makeSingle(\"12\", 1));\n    add(\"2011-04-17/2011-04-21\", \"11\", makeSingle(\"11\", 1));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-03\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-05\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-06\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-11\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-01/2011-04-30\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"12\", new OvershadowableInteger(\"12\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-06\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-07\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-08\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-09\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-10\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-11\"), \"13\", new OvershadowableInteger(\"13\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-12\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-15\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-16\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-17\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-18\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-19\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-20\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-21\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-05/2011-04-22\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-07\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-08\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-09\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-10\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-11\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-12\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-15\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-16\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-17\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-18\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-19\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-20\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-21\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-06/2011-04-22\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-15\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-16\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-17\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-18\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-19\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-20\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-21\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-12/2011-04-22\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n\n    Assert.assertTrue(timeline.isOvershadowed(Intervals.of(\"2011-04-15/2011-04-21\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n    Assert.assertFalse(timeline.isOvershadowed(Intervals.of(\"2011-04-21/2011-04-22\"), \"0\", new OvershadowableInteger(\"0\", 0, 1)));\n  }\n","realPath":"core/src/test/java/org/apache/druid/timeline/VersionedIntervalTimelineTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1152,"status":"M"}],"commitId":"5c0fc0a13ab4d259b430bf50b322f631504c4529","commitMessage":"@@@Fix ambiguity about IndexerSQLMetadataStorageCoordinator.getUsedSegmentsForInterval() returning only non-overshadowed or all used segments (#8564)\n\n* IndexerSQLMetadataStorageCoordinator.getTimelineForIntervalsWithHandle() don't fetch abutting intervals; simplify getUsedSegmentsForIntervals()\n\n* Add VersionedIntervalTimeline.findNonOvershadowedObjectsInInterval() method; Propagate the decision about whether only visible segmetns or visible and overshadowed segments should be returned from IndexerMetadataStorageCoordinator's methods to the user logic; Rename SegmentListUsedAction to RetrieveUsedSegmentsAction.  SegmetnListUnusedAction to RetrieveUnusedSegmentsAction.  and UsedSegmentLister to UsedSegmentsRetriever\n\n* Fix tests\n\n* More fixes\n\n* Add javadoc notes about returning Collection instead of Set. Add JacksonUtils.readValue() to reduce boilerplate code\n\n* Fix KinesisIndexTaskTest.  factor out common parts from KinesisIndexTaskTest and KafkaIndexTaskTest into SeekableStreamIndexTaskTestBase\n\n* More test fixes\n\n* More test fixes\n\n* Add a comment to VersionedIntervalTimelineTestBase\n\n* Fix tests\n\n* Set DataSegment.size(0) in more tests\n\n* Specify DataSegment.size(0) in more places in tests\n\n* Fix more tests\n\n* Fix DruidSchemaTest\n\n* Set DataSegment's size in more tests and benchmarks\n\n* Fix HdfsDataSegmentPusherTest\n\n* Doc changes addressing comments\n\n* Extended doc for visibility\n\n* Typo\n\n* Typo 2\n\n* Address comment\n","date":"2019-11-07 03:07:04","modifiedFileCount":"88","status":"M","submitter":"Roman Leventov"}]
