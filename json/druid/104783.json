[{"authorTime":"2020-01-22 05:56:54","codes":[{"authorDate":"2019-08-16 08:43:35","commitOrder":8,"curCode":"  private static IndexTuningConfig convertToIndexTuningConfig(ParallelIndexTuningConfig tuningConfig)\n  {\n    return new IndexTuningConfig(\n        null,\n        null,\n        tuningConfig.getMaxRowsInMemory(),\n        tuningConfig.getMaxBytesInMemory(),\n        null,\n        null,\n        null,\n        null,\n        tuningConfig.getPartitionsSpec(),\n        tuningConfig.getIndexSpec(),\n        tuningConfig.getIndexSpecForIntermediatePersists(),\n        tuningConfig.getMaxPendingPersists(),\n        tuningConfig.isForceGuaranteedRollup(),\n        tuningConfig.isReportParseExceptions(),\n        null,\n        tuningConfig.getPushTimeout(),\n        tuningConfig.getSegmentWriteOutMediumFactory(),\n        tuningConfig.isLogParseExceptions(),\n        tuningConfig.getMaxParseExceptions(),\n        tuningConfig.getMaxSavedParseExceptions()\n    );\n  }\n","date":"2019-08-16 08:43:35","endLine":664,"groupId":"9685","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"convertToIndexTuningConfig","params":"(ParallelIndexTuningConfigtuningConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/a30e34270cbf73e77f8b0d52fcc889b0794b21.src","preCode":"  private static IndexTuningConfig convertToIndexTuningConfig(ParallelIndexTuningConfig tuningConfig)\n  {\n    return new IndexTuningConfig(\n        null,\n        null,\n        tuningConfig.getMaxRowsInMemory(),\n        tuningConfig.getMaxBytesInMemory(),\n        null,\n        null,\n        null,\n        null,\n        tuningConfig.getPartitionsSpec(),\n        tuningConfig.getIndexSpec(),\n        tuningConfig.getIndexSpecForIntermediatePersists(),\n        tuningConfig.getMaxPendingPersists(),\n        tuningConfig.isForceGuaranteedRollup(),\n        tuningConfig.isReportParseExceptions(),\n        null,\n        tuningConfig.getPushTimeout(),\n        tuningConfig.getSegmentWriteOutMediumFactory(),\n        tuningConfig.isLogParseExceptions(),\n        tuningConfig.getMaxParseExceptions(),\n        tuningConfig.getMaxSavedParseExceptions()\n    );\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":640,"status":"NB"},{"authorDate":"2020-01-22 05:56:54","commitOrder":8,"curCode":"  static ParallelIndexTuningConfig getTuningConfig(TuningConfig tuningConfig)\n  {\n    if (tuningConfig instanceof ParallelIndexTuningConfig) {\n      return (ParallelIndexTuningConfig) tuningConfig;\n    } else if (tuningConfig instanceof IndexTuningConfig) {\n      final IndexTuningConfig indexTuningConfig = (IndexTuningConfig) tuningConfig;\n      return new ParallelIndexTuningConfig(\n          null,\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getMaxBytesInMemory(),\n          indexTuningConfig.getMaxTotalRows(),\n          indexTuningConfig.getNumShards(),\n          null,\n          indexTuningConfig.getPartitionsSpec(),\n          indexTuningConfig.getIndexSpec(),\n          indexTuningConfig.getIndexSpecForIntermediatePersists(),\n          indexTuningConfig.getMaxPendingPersists(),\n          indexTuningConfig.isForceGuaranteedRollup(),\n          indexTuningConfig.isReportParseExceptions(),\n          indexTuningConfig.getPushTimeout(),\n          indexTuningConfig.getSegmentWriteOutMediumFactory(),\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          indexTuningConfig.isLogParseExceptions(),\n          indexTuningConfig.getMaxParseExceptions(),\n          indexTuningConfig.getMaxSavedParseExceptions()\n      );\n    } else {\n      throw new ISE(\n          \"Unknown tuningConfig type: [%s], Must be either [%s] or [%s]\",\n          tuningConfig.getClass().getName(),\n          ParallelIndexTuningConfig.class.getName(),\n          IndexTuningConfig.class.getName()\n      );\n    }\n  }\n","date":"2020-01-22 05:56:54","endLine":275,"groupId":"9814","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getTuningConfig","params":"(TuningConfigtuningConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/67/9e6c53d85c12f5ad5c13e6c28437673a4a6aa2.src","preCode":"  static ParallelIndexTuningConfig getTuningConfig(TuningConfig tuningConfig)\n  {\n    if (tuningConfig instanceof ParallelIndexTuningConfig) {\n      return (ParallelIndexTuningConfig) tuningConfig;\n    } else if (tuningConfig instanceof IndexTuningConfig) {\n      final IndexTuningConfig indexTuningConfig = (IndexTuningConfig) tuningConfig;\n      return new ParallelIndexTuningConfig(\n          null,\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getMaxBytesInMemory(),\n          indexTuningConfig.getMaxTotalRows(),\n          indexTuningConfig.getNumShards(),\n          null,\n          indexTuningConfig.getPartitionsSpec(),\n          indexTuningConfig.getIndexSpec(),\n          indexTuningConfig.getIndexSpecForIntermediatePersists(),\n          indexTuningConfig.getMaxPendingPersists(),\n          indexTuningConfig.isForceGuaranteedRollup(),\n          indexTuningConfig.isReportParseExceptions(),\n          indexTuningConfig.getPushTimeout(),\n          indexTuningConfig.getSegmentWriteOutMediumFactory(),\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          indexTuningConfig.isLogParseExceptions(),\n          indexTuningConfig.getMaxParseExceptions(),\n          indexTuningConfig.getMaxSavedParseExceptions()\n      );\n    } else {\n      throw new ISE(\n          \"Unknown tuningConfig type: [%s], Must be either [%s] or [%s]\",\n          tuningConfig.getClass().getName(),\n          ParallelIndexTuningConfig.class.getName(),\n          IndexTuningConfig.class.getName()\n      );\n    }\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/CompactionTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"B"}],"commitId":"d541cbe436bf97779a03eca0ec848fe911768884","commitMessage":"@@@Support both IndexTuningConfig and ParallelIndexTuningConfig for compaction task (#9222)\n\n* Support both IndexTuningConfig and ParallelIndexTuningConfig for compaction task\n\n* tuningConfig module\n\n* fix tests\n","date":"2020-01-22 05:56:54","modifiedFileCount":"10","status":"M","submitter":"Jihoon Son"},{"authorTime":"2020-10-24 09:34:26","codes":[{"authorDate":"2020-10-24 09:34:26","commitOrder":9,"curCode":"  private static IndexTuningConfig convertToIndexTuningConfig(ParallelIndexTuningConfig tuningConfig)\n  {\n    return new IndexTuningConfig(\n        null,\n        null,\n        tuningConfig.getAppendableIndexSpec(),\n        tuningConfig.getMaxRowsInMemory(),\n        tuningConfig.getMaxBytesInMemory(),\n        null,\n        null,\n        null,\n        null,\n        tuningConfig.getPartitionsSpec(),\n        tuningConfig.getIndexSpec(),\n        tuningConfig.getIndexSpecForIntermediatePersists(),\n        tuningConfig.getMaxPendingPersists(),\n        tuningConfig.isForceGuaranteedRollup(),\n        tuningConfig.isReportParseExceptions(),\n        null,\n        tuningConfig.getPushTimeout(),\n        tuningConfig.getSegmentWriteOutMediumFactory(),\n        tuningConfig.isLogParseExceptions(),\n        tuningConfig.getMaxParseExceptions(),\n        tuningConfig.getMaxSavedParseExceptions()\n    );\n  }\n","date":"2020-10-24 09:34:26","endLine":952,"groupId":"9685","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"convertToIndexTuningConfig","params":"(ParallelIndexTuningConfigtuningConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5c/bfc01635d9efbf5827d8db6d65f4c2344a5db4.src","preCode":"  private static IndexTuningConfig convertToIndexTuningConfig(ParallelIndexTuningConfig tuningConfig)\n  {\n    return new IndexTuningConfig(\n        null,\n        null,\n        tuningConfig.getMaxRowsInMemory(),\n        tuningConfig.getMaxBytesInMemory(),\n        null,\n        null,\n        null,\n        null,\n        tuningConfig.getPartitionsSpec(),\n        tuningConfig.getIndexSpec(),\n        tuningConfig.getIndexSpecForIntermediatePersists(),\n        tuningConfig.getMaxPendingPersists(),\n        tuningConfig.isForceGuaranteedRollup(),\n        tuningConfig.isReportParseExceptions(),\n        null,\n        tuningConfig.getPushTimeout(),\n        tuningConfig.getSegmentWriteOutMediumFactory(),\n        tuningConfig.isLogParseExceptions(),\n        tuningConfig.getMaxParseExceptions(),\n        tuningConfig.getMaxSavedParseExceptions()\n    );\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":927,"status":"M"},{"authorDate":"2020-10-24 09:34:26","commitOrder":9,"curCode":"  static ParallelIndexTuningConfig getTuningConfig(TuningConfig tuningConfig)\n  {\n    if (tuningConfig instanceof ParallelIndexTuningConfig) {\n      return (ParallelIndexTuningConfig) tuningConfig;\n    } else if (tuningConfig instanceof IndexTuningConfig) {\n      final IndexTuningConfig indexTuningConfig = (IndexTuningConfig) tuningConfig;\n      return new ParallelIndexTuningConfig(\n          null,\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getAppendableIndexSpec(),\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getMaxBytesInMemory(),\n          indexTuningConfig.getMaxTotalRows(),\n          indexTuningConfig.getNumShards(),\n          null,\n          indexTuningConfig.getPartitionsSpec(),\n          indexTuningConfig.getIndexSpec(),\n          indexTuningConfig.getIndexSpecForIntermediatePersists(),\n          indexTuningConfig.getMaxPendingPersists(),\n          indexTuningConfig.isForceGuaranteedRollup(),\n          indexTuningConfig.isReportParseExceptions(),\n          indexTuningConfig.getPushTimeout(),\n          indexTuningConfig.getSegmentWriteOutMediumFactory(),\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          indexTuningConfig.isLogParseExceptions(),\n          indexTuningConfig.getMaxParseExceptions(),\n          indexTuningConfig.getMaxSavedParseExceptions()\n      );\n    } else {\n      throw new ISE(\n          \"Unknown tuningConfig type: [%s], Must be either [%s] or [%s]\",\n          tuningConfig.getClass().getName(),\n          ParallelIndexTuningConfig.class.getName(),\n          IndexTuningConfig.class.getName()\n      );\n    }\n  }\n","date":"2020-10-24 09:34:26","endLine":256,"groupId":"9814","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getTuningConfig","params":"(TuningConfigtuningConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/af0cfb01e9f0efc749d7b516ec6b4d1be2ec9e.src","preCode":"  static ParallelIndexTuningConfig getTuningConfig(TuningConfig tuningConfig)\n  {\n    if (tuningConfig instanceof ParallelIndexTuningConfig) {\n      return (ParallelIndexTuningConfig) tuningConfig;\n    } else if (tuningConfig instanceof IndexTuningConfig) {\n      final IndexTuningConfig indexTuningConfig = (IndexTuningConfig) tuningConfig;\n      return new ParallelIndexTuningConfig(\n          null,\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getMaxBytesInMemory(),\n          indexTuningConfig.getMaxTotalRows(),\n          indexTuningConfig.getNumShards(),\n          null,\n          indexTuningConfig.getPartitionsSpec(),\n          indexTuningConfig.getIndexSpec(),\n          indexTuningConfig.getIndexSpecForIntermediatePersists(),\n          indexTuningConfig.getMaxPendingPersists(),\n          indexTuningConfig.isForceGuaranteedRollup(),\n          indexTuningConfig.isReportParseExceptions(),\n          indexTuningConfig.getPushTimeout(),\n          indexTuningConfig.getSegmentWriteOutMediumFactory(),\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          indexTuningConfig.isLogParseExceptions(),\n          indexTuningConfig.getMaxParseExceptions(),\n          indexTuningConfig.getMaxSavedParseExceptions()\n      );\n    } else {\n      throw new ISE(\n          \"Unknown tuningConfig type: [%s], Must be either [%s] or [%s]\",\n          tuningConfig.getClass().getName(),\n          ParallelIndexTuningConfig.class.getName(),\n          IndexTuningConfig.class.getName()\n      );\n    }\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/CompactionTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"f3a2903218573f5d336b082b1c9b8a60a19e8c54","commitMessage":"@@@Configurable Index Type (#10335)\n\n* Introduce a Configurable Index Type\n\n* Change to @UnstableApi\n\n* Add AppendableIndexSpecTest\n\n* Update doc\n\n* Add spelling exception\n\n* Add tests coverage\n\n* Revert some of the changes to reduce diff\n\n* Minor fixes\n\n* Update getMaxBytesInMemoryOrDefault() comment\n\n* Fix typo.  remove redundant interface\n\n* Remove off-heap spec (postponed to a later PR)\n\n* Add javadocs to AppendableIndexSpec\n\n* Describe testCreateTask()\n\n* Add tests for AppendableIndexSpec within TuningConfig\n\n* Modify hashCode() to conform with equals()\n\n* Add comment where building incremental-index\n\n* Add \"EqualsVerifier\" tests\n\n* Revert some of the API back to AppenderatorConfig\n\n* Don't use multi-line comments\n\n* Remove knob documentation (deferred)","date":"2020-10-24 09:34:26","modifiedFileCount":"72","status":"M","submitter":"Liran Funaro"},{"authorTime":"2021-01-06 14:19:09","codes":[{"authorDate":"2021-01-06 14:19:09","commitOrder":10,"curCode":"  private static IndexTuningConfig convertToIndexTuningConfig(ParallelIndexTuningConfig tuningConfig)\n  {\n    return new IndexTuningConfig(\n        null,\n        null,\n        tuningConfig.getAppendableIndexSpec(),\n        tuningConfig.getMaxRowsInMemory(),\n        tuningConfig.getMaxBytesInMemory(),\n        null,\n        null,\n        null,\n        null,\n        tuningConfig.getPartitionsSpec(),\n        tuningConfig.getIndexSpec(),\n        tuningConfig.getIndexSpecForIntermediatePersists(),\n        tuningConfig.getMaxPendingPersists(),\n        tuningConfig.isForceGuaranteedRollup(),\n        tuningConfig.isReportParseExceptions(),\n        null,\n        tuningConfig.getPushTimeout(),\n        tuningConfig.getSegmentWriteOutMediumFactory(),\n        tuningConfig.isLogParseExceptions(),\n        tuningConfig.getMaxParseExceptions(),\n        tuningConfig.getMaxSavedParseExceptions(),\n        tuningConfig.getMaxColumnsToMerge()\n    );\n  }\n","date":"2021-01-06 14:19:09","endLine":997,"groupId":"9685","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"convertToIndexTuningConfig","params":"(ParallelIndexTuningConfigtuningConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c9/989e96d40fbe867f1ea2c86d443e4722bd36f6.src","preCode":"  private static IndexTuningConfig convertToIndexTuningConfig(ParallelIndexTuningConfig tuningConfig)\n  {\n    return new IndexTuningConfig(\n        null,\n        null,\n        tuningConfig.getAppendableIndexSpec(),\n        tuningConfig.getMaxRowsInMemory(),\n        tuningConfig.getMaxBytesInMemory(),\n        null,\n        null,\n        null,\n        null,\n        tuningConfig.getPartitionsSpec(),\n        tuningConfig.getIndexSpec(),\n        tuningConfig.getIndexSpecForIntermediatePersists(),\n        tuningConfig.getMaxPendingPersists(),\n        tuningConfig.isForceGuaranteedRollup(),\n        tuningConfig.isReportParseExceptions(),\n        null,\n        tuningConfig.getPushTimeout(),\n        tuningConfig.getSegmentWriteOutMediumFactory(),\n        tuningConfig.isLogParseExceptions(),\n        tuningConfig.getMaxParseExceptions(),\n        tuningConfig.getMaxSavedParseExceptions()\n    );\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":971,"status":"M"},{"authorDate":"2021-01-06 14:19:09","commitOrder":10,"curCode":"  static ParallelIndexTuningConfig getTuningConfig(TuningConfig tuningConfig)\n  {\n    if (tuningConfig instanceof ParallelIndexTuningConfig) {\n      return (ParallelIndexTuningConfig) tuningConfig;\n    } else if (tuningConfig instanceof IndexTuningConfig) {\n      final IndexTuningConfig indexTuningConfig = (IndexTuningConfig) tuningConfig;\n      return new ParallelIndexTuningConfig(\n          null,\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getAppendableIndexSpec(),\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getMaxBytesInMemory(),\n          indexTuningConfig.getMaxTotalRows(),\n          indexTuningConfig.getNumShards(),\n          null,\n          indexTuningConfig.getPartitionsSpec(),\n          indexTuningConfig.getIndexSpec(),\n          indexTuningConfig.getIndexSpecForIntermediatePersists(),\n          indexTuningConfig.getMaxPendingPersists(),\n          indexTuningConfig.isForceGuaranteedRollup(),\n          indexTuningConfig.isReportParseExceptions(),\n          indexTuningConfig.getPushTimeout(),\n          indexTuningConfig.getSegmentWriteOutMediumFactory(),\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          indexTuningConfig.isLogParseExceptions(),\n          indexTuningConfig.getMaxParseExceptions(),\n          indexTuningConfig.getMaxSavedParseExceptions(),\n          indexTuningConfig.getMaxColumnsToMerge()\n      );\n    } else {\n      throw new ISE(\n          \"Unknown tuningConfig type: [%s], Must be either [%s] or [%s]\",\n          tuningConfig.getClass().getName(),\n          ParallelIndexTuningConfig.class.getName(),\n          IndexTuningConfig.class.getName()\n      );\n    }\n  }\n","date":"2021-01-06 14:19:09","endLine":257,"groupId":"9814","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getTuningConfig","params":"(TuningConfigtuningConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5c/baa3529c4ab8341f180c63983c00941bdee996.src","preCode":"  static ParallelIndexTuningConfig getTuningConfig(TuningConfig tuningConfig)\n  {\n    if (tuningConfig instanceof ParallelIndexTuningConfig) {\n      return (ParallelIndexTuningConfig) tuningConfig;\n    } else if (tuningConfig instanceof IndexTuningConfig) {\n      final IndexTuningConfig indexTuningConfig = (IndexTuningConfig) tuningConfig;\n      return new ParallelIndexTuningConfig(\n          null,\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getAppendableIndexSpec(),\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getMaxBytesInMemory(),\n          indexTuningConfig.getMaxTotalRows(),\n          indexTuningConfig.getNumShards(),\n          null,\n          indexTuningConfig.getPartitionsSpec(),\n          indexTuningConfig.getIndexSpec(),\n          indexTuningConfig.getIndexSpecForIntermediatePersists(),\n          indexTuningConfig.getMaxPendingPersists(),\n          indexTuningConfig.isForceGuaranteedRollup(),\n          indexTuningConfig.isReportParseExceptions(),\n          indexTuningConfig.getPushTimeout(),\n          indexTuningConfig.getSegmentWriteOutMediumFactory(),\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          indexTuningConfig.isLogParseExceptions(),\n          indexTuningConfig.getMaxParseExceptions(),\n          indexTuningConfig.getMaxSavedParseExceptions()\n      );\n    } else {\n      throw new ISE(\n          \"Unknown tuningConfig type: [%s], Must be either [%s] or [%s]\",\n          tuningConfig.getClass().getName(),\n          ParallelIndexTuningConfig.class.getName(),\n          IndexTuningConfig.class.getName()\n      );\n    }\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/CompactionTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"68bb038b314c26bcc57aa96e1078c22d2f24fd35","commitMessage":"@@@Multiphase segment merge for IndexMergerV9 (#10689)\n\n* Multiphase merge for IndexMergerV9\n\n* JSON fix\n\n* Cleanup temp files\n\n* Docs\n\n* Address logging and add IT\n\n* Fix spelling and test unloader datasource name","date":"2021-01-06 14:19:09","modifiedFileCount":"40","status":"M","submitter":"Jonathan Wei"},{"authorTime":"2021-01-27 16:34:56","codes":[{"authorDate":"2021-01-27 16:34:56","commitOrder":11,"curCode":"  private static IndexTuningConfig convertToIndexTuningConfig(ParallelIndexTuningConfig tuningConfig)\n  {\n    return new IndexTuningConfig(\n        null,\n        null,\n        tuningConfig.getAppendableIndexSpec(),\n        tuningConfig.getMaxRowsInMemory(),\n        tuningConfig.getMaxBytesInMemory(),\n        tuningConfig.isSkipBytesInMemoryOverheadCheck(),\n        null,\n        null,\n        null,\n        null,\n        tuningConfig.getPartitionsSpec(),\n        tuningConfig.getIndexSpec(),\n        tuningConfig.getIndexSpecForIntermediatePersists(),\n        tuningConfig.getMaxPendingPersists(),\n        tuningConfig.isForceGuaranteedRollup(),\n        tuningConfig.isReportParseExceptions(),\n        null,\n        tuningConfig.getPushTimeout(),\n        tuningConfig.getSegmentWriteOutMediumFactory(),\n        tuningConfig.isLogParseExceptions(),\n        tuningConfig.getMaxParseExceptions(),\n        tuningConfig.getMaxSavedParseExceptions(),\n        tuningConfig.getMaxColumnsToMerge()\n    );\n  }\n","date":"2021-01-27 16:34:56","endLine":998,"groupId":"9685","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"convertToIndexTuningConfig","params":"(ParallelIndexTuningConfigtuningConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/03/8e7884377e6d7e6f4a6c7404ee360b5639b2ee.src","preCode":"  private static IndexTuningConfig convertToIndexTuningConfig(ParallelIndexTuningConfig tuningConfig)\n  {\n    return new IndexTuningConfig(\n        null,\n        null,\n        tuningConfig.getAppendableIndexSpec(),\n        tuningConfig.getMaxRowsInMemory(),\n        tuningConfig.getMaxBytesInMemory(),\n        null,\n        null,\n        null,\n        null,\n        tuningConfig.getPartitionsSpec(),\n        tuningConfig.getIndexSpec(),\n        tuningConfig.getIndexSpecForIntermediatePersists(),\n        tuningConfig.getMaxPendingPersists(),\n        tuningConfig.isForceGuaranteedRollup(),\n        tuningConfig.isReportParseExceptions(),\n        null,\n        tuningConfig.getPushTimeout(),\n        tuningConfig.getSegmentWriteOutMediumFactory(),\n        tuningConfig.isLogParseExceptions(),\n        tuningConfig.getMaxParseExceptions(),\n        tuningConfig.getMaxSavedParseExceptions(),\n        tuningConfig.getMaxColumnsToMerge()\n    );\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":971,"status":"M"},{"authorDate":"2021-01-27 16:34:56","commitOrder":11,"curCode":"  static ParallelIndexTuningConfig getTuningConfig(TuningConfig tuningConfig)\n  {\n    if (tuningConfig instanceof ParallelIndexTuningConfig) {\n      return (ParallelIndexTuningConfig) tuningConfig;\n    } else if (tuningConfig instanceof IndexTuningConfig) {\n      final IndexTuningConfig indexTuningConfig = (IndexTuningConfig) tuningConfig;\n      return new ParallelIndexTuningConfig(\n          null,\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getAppendableIndexSpec(),\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getMaxBytesInMemory(),\n          indexTuningConfig.isSkipBytesInMemoryOverheadCheck(),\n          indexTuningConfig.getMaxTotalRows(),\n          indexTuningConfig.getNumShards(),\n          null,\n          indexTuningConfig.getPartitionsSpec(),\n          indexTuningConfig.getIndexSpec(),\n          indexTuningConfig.getIndexSpecForIntermediatePersists(),\n          indexTuningConfig.getMaxPendingPersists(),\n          indexTuningConfig.isForceGuaranteedRollup(),\n          indexTuningConfig.isReportParseExceptions(),\n          indexTuningConfig.getPushTimeout(),\n          indexTuningConfig.getSegmentWriteOutMediumFactory(),\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          indexTuningConfig.isLogParseExceptions(),\n          indexTuningConfig.getMaxParseExceptions(),\n          indexTuningConfig.getMaxSavedParseExceptions(),\n          indexTuningConfig.getMaxColumnsToMerge()\n      );\n    } else {\n      throw new ISE(\n          \"Unknown tuningConfig type: [%s], Must be either [%s] or [%s]\",\n          tuningConfig.getClass().getName(),\n          ParallelIndexTuningConfig.class.getName(),\n          IndexTuningConfig.class.getName()\n      );\n    }\n  }\n","date":"2021-01-27 16:34:56","endLine":258,"groupId":"9814","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getTuningConfig","params":"(TuningConfigtuningConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/53/0a40033155f722f3fa6fc6272a0a81e8940861.src","preCode":"  static ParallelIndexTuningConfig getTuningConfig(TuningConfig tuningConfig)\n  {\n    if (tuningConfig instanceof ParallelIndexTuningConfig) {\n      return (ParallelIndexTuningConfig) tuningConfig;\n    } else if (tuningConfig instanceof IndexTuningConfig) {\n      final IndexTuningConfig indexTuningConfig = (IndexTuningConfig) tuningConfig;\n      return new ParallelIndexTuningConfig(\n          null,\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getAppendableIndexSpec(),\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getMaxBytesInMemory(),\n          indexTuningConfig.getMaxTotalRows(),\n          indexTuningConfig.getNumShards(),\n          null,\n          indexTuningConfig.getPartitionsSpec(),\n          indexTuningConfig.getIndexSpec(),\n          indexTuningConfig.getIndexSpecForIntermediatePersists(),\n          indexTuningConfig.getMaxPendingPersists(),\n          indexTuningConfig.isForceGuaranteedRollup(),\n          indexTuningConfig.isReportParseExceptions(),\n          indexTuningConfig.getPushTimeout(),\n          indexTuningConfig.getSegmentWriteOutMediumFactory(),\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          indexTuningConfig.isLogParseExceptions(),\n          indexTuningConfig.getMaxParseExceptions(),\n          indexTuningConfig.getMaxSavedParseExceptions(),\n          indexTuningConfig.getMaxColumnsToMerge()\n      );\n    } else {\n      throw new ISE(\n          \"Unknown tuningConfig type: [%s], Must be either [%s] or [%s]\",\n          tuningConfig.getClass().getName(),\n          ParallelIndexTuningConfig.class.getName(),\n          IndexTuningConfig.class.getName()\n      );\n    }\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/CompactionTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"a46d561bd7e2b045a08a2e475847d4a7505a1c93","commitMessage":"@@@Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead (#10740)\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* fix checkstyle\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* fix test\n\n* fix test\n\n* add log\n\n* Fix byte calculation for maxBytesInMemory to take into account of Sink/Hydrant Object overhead\n\n* address comments\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add config to skip overhead memory calculation\n\n* add test for the skipBytesInMemoryOverheadCheck config\n\n* add docs\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix spelling\n\n* address comments\n\n* fix travis\n\n* address comments","date":"2021-01-27 16:34:56","modifiedFileCount":"50","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-04-09 12:03:00","codes":[{"authorDate":"2021-04-09 12:03:00","commitOrder":12,"curCode":"  private static IndexTuningConfig convertToIndexTuningConfig(ParallelIndexTuningConfig tuningConfig)\n  {\n    return new IndexTuningConfig(\n        null,\n        null,\n        tuningConfig.getAppendableIndexSpec(),\n        tuningConfig.getMaxRowsInMemory(),\n        tuningConfig.getMaxBytesInMemory(),\n        tuningConfig.isSkipBytesInMemoryOverheadCheck(),\n        null,\n        null,\n        null,\n        null,\n        tuningConfig.getPartitionsSpec(),\n        tuningConfig.getIndexSpec(),\n        tuningConfig.getIndexSpecForIntermediatePersists(),\n        tuningConfig.getMaxPendingPersists(),\n        tuningConfig.isForceGuaranteedRollup(),\n        tuningConfig.isReportParseExceptions(),\n        null,\n        tuningConfig.getPushTimeout(),\n        tuningConfig.getSegmentWriteOutMediumFactory(),\n        tuningConfig.isLogParseExceptions(),\n        tuningConfig.getMaxParseExceptions(),\n        tuningConfig.getMaxSavedParseExceptions(),\n        tuningConfig.getMaxColumnsToMerge(),\n        tuningConfig.getAwaitSegmentAvailabilityTimeoutMillis()\n    );\n  }\n","date":"2021-04-09 12:03:00","endLine":1081,"groupId":"104783","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"convertToIndexTuningConfig","params":"(ParallelIndexTuningConfigtuningConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/60/984e8a9dbb447af7d2cec5781c4c746fcb2eff.src","preCode":"  private static IndexTuningConfig convertToIndexTuningConfig(ParallelIndexTuningConfig tuningConfig)\n  {\n    return new IndexTuningConfig(\n        null,\n        null,\n        tuningConfig.getAppendableIndexSpec(),\n        tuningConfig.getMaxRowsInMemory(),\n        tuningConfig.getMaxBytesInMemory(),\n        tuningConfig.isSkipBytesInMemoryOverheadCheck(),\n        null,\n        null,\n        null,\n        null,\n        tuningConfig.getPartitionsSpec(),\n        tuningConfig.getIndexSpec(),\n        tuningConfig.getIndexSpecForIntermediatePersists(),\n        tuningConfig.getMaxPendingPersists(),\n        tuningConfig.isForceGuaranteedRollup(),\n        tuningConfig.isReportParseExceptions(),\n        null,\n        tuningConfig.getPushTimeout(),\n        tuningConfig.getSegmentWriteOutMediumFactory(),\n        tuningConfig.isLogParseExceptions(),\n        tuningConfig.getMaxParseExceptions(),\n        tuningConfig.getMaxSavedParseExceptions(),\n        tuningConfig.getMaxColumnsToMerge()\n    );\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":1053,"status":"M"},{"authorDate":"2021-04-09 12:03:00","commitOrder":12,"curCode":"  static CompactionTuningConfig getTuningConfig(TuningConfig tuningConfig)\n  {\n    if (tuningConfig instanceof CompactionTuningConfig) {\n      return (CompactionTuningConfig) tuningConfig;\n    } else if (tuningConfig instanceof ParallelIndexTuningConfig) {\n      final ParallelIndexTuningConfig parallelIndexTuningConfig = (ParallelIndexTuningConfig) tuningConfig;\n      return new CompactionTuningConfig(\n          null,\n          parallelIndexTuningConfig.getMaxRowsPerSegment(),\n          parallelIndexTuningConfig.getAppendableIndexSpec(),\n          parallelIndexTuningConfig.getMaxRowsInMemory(),\n          parallelIndexTuningConfig.getMaxBytesInMemory(),\n          parallelIndexTuningConfig.isSkipBytesInMemoryOverheadCheck(),\n          parallelIndexTuningConfig.getMaxTotalRows(),\n          parallelIndexTuningConfig.getNumShards(),\n          parallelIndexTuningConfig.getSplitHintSpec(),\n          parallelIndexTuningConfig.getPartitionsSpec(),\n          parallelIndexTuningConfig.getIndexSpec(),\n          parallelIndexTuningConfig.getIndexSpecForIntermediatePersists(),\n          parallelIndexTuningConfig.getMaxPendingPersists(),\n          parallelIndexTuningConfig.isForceGuaranteedRollup(),\n          parallelIndexTuningConfig.isReportParseExceptions(),\n          parallelIndexTuningConfig.getPushTimeout(),\n          parallelIndexTuningConfig.getSegmentWriteOutMediumFactory(),\n          null,\n          parallelIndexTuningConfig.getMaxNumConcurrentSubTasks(),\n          parallelIndexTuningConfig.getMaxRetry(),\n          parallelIndexTuningConfig.getTaskStatusCheckPeriodMs(),\n          parallelIndexTuningConfig.getChatHandlerTimeout(),\n          parallelIndexTuningConfig.getChatHandlerNumRetries(),\n          parallelIndexTuningConfig.getMaxNumSegmentsToMerge(),\n          parallelIndexTuningConfig.getTotalNumMergeTasks(),\n          parallelIndexTuningConfig.isLogParseExceptions(),\n          parallelIndexTuningConfig.getMaxParseExceptions(),\n          parallelIndexTuningConfig.getMaxSavedParseExceptions(),\n          parallelIndexTuningConfig.getMaxColumnsToMerge(),\n          parallelIndexTuningConfig.getAwaitSegmentAvailabilityTimeoutMillis()\n      );\n    } else if (tuningConfig instanceof IndexTuningConfig) {\n      final IndexTuningConfig indexTuningConfig = (IndexTuningConfig) tuningConfig;\n      return new CompactionTuningConfig(\n          null,\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getAppendableIndexSpec(),\n          indexTuningConfig.getMaxRowsInMemory(),\n          indexTuningConfig.getMaxBytesInMemory(),\n          indexTuningConfig.isSkipBytesInMemoryOverheadCheck(),\n          indexTuningConfig.getMaxTotalRows(),\n          indexTuningConfig.getNumShards(),\n          null,\n          indexTuningConfig.getPartitionsSpec(),\n          indexTuningConfig.getIndexSpec(),\n          indexTuningConfig.getIndexSpecForIntermediatePersists(),\n          indexTuningConfig.getMaxPendingPersists(),\n          indexTuningConfig.isForceGuaranteedRollup(),\n          indexTuningConfig.isReportParseExceptions(),\n          indexTuningConfig.getPushTimeout(),\n          indexTuningConfig.getSegmentWriteOutMediumFactory(),\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          indexTuningConfig.isLogParseExceptions(),\n          indexTuningConfig.getMaxParseExceptions(),\n          indexTuningConfig.getMaxSavedParseExceptions(),\n          indexTuningConfig.getMaxColumnsToMerge(),\n          indexTuningConfig.getAwaitSegmentAvailabilityTimeoutMillis()\n      );\n    } else {\n      throw new ISE(\n          \"Unknown tuningConfig type: [%s], Must be in [%s, %s, %s]\",\n          tuningConfig.getClass().getName(),\n          CompactionTuningConfig.class.getName(),\n          ParallelIndexTuningConfig.class.getName(),\n          IndexTuningConfig.class.getName()\n      );\n    }\n  }\n","date":"2021-04-09 12:03:00","endLine":323,"groupId":"104783","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getTuningConfig","params":"(TuningConfigtuningConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/18/f5f71d54b1eaeb9218e5e95f2189c03bc499b2.src","preCode":"  static ParallelIndexTuningConfig getTuningConfig(TuningConfig tuningConfig)\n  {\n    if (tuningConfig instanceof ParallelIndexTuningConfig) {\n      return (ParallelIndexTuningConfig) tuningConfig;\n    } else if (tuningConfig instanceof IndexTuningConfig) {\n      final IndexTuningConfig indexTuningConfig = (IndexTuningConfig) tuningConfig;\n      return new ParallelIndexTuningConfig(\n          null,\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getAppendableIndexSpec(),\n          indexTuningConfig.getMaxRowsPerSegment(),\n          indexTuningConfig.getMaxBytesInMemory(),\n          indexTuningConfig.isSkipBytesInMemoryOverheadCheck(),\n          indexTuningConfig.getMaxTotalRows(),\n          indexTuningConfig.getNumShards(),\n          null,\n          indexTuningConfig.getPartitionsSpec(),\n          indexTuningConfig.getIndexSpec(),\n          indexTuningConfig.getIndexSpecForIntermediatePersists(),\n          indexTuningConfig.getMaxPendingPersists(),\n          indexTuningConfig.isForceGuaranteedRollup(),\n          indexTuningConfig.isReportParseExceptions(),\n          indexTuningConfig.getPushTimeout(),\n          indexTuningConfig.getSegmentWriteOutMediumFactory(),\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          indexTuningConfig.isLogParseExceptions(),\n          indexTuningConfig.getMaxParseExceptions(),\n          indexTuningConfig.getMaxSavedParseExceptions(),\n          indexTuningConfig.getMaxColumnsToMerge()\n      );\n    } else {\n      throw new ISE(\n          \"Unknown tuningConfig type: [%s], Must be either [%s] or [%s]\",\n          tuningConfig.getClass().getName(),\n          ParallelIndexTuningConfig.class.getName(),\n          IndexTuningConfig.class.getName()\n      );\n    }\n  }\n","realPath":"indexing-service/src/main/java/org/apache/druid/indexing/common/task/CompactionTask.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"8264203cee688607091232897749e959e7706010","commitMessage":"@@@Allow client to configure batch ingestion task to wait to complete until segments are confirmed to be available by other (#10676)\n\n* Add ability to wait for segment availability for batch jobs\n\n* IT updates\n\n* fix queries in legacy hadoop IT\n\n* Fix broken indexing integration tests\n\n* address an lgtm flag\n\n* spell checker still flagging for hadoop doc. adding under that file header too\n\n* fix compaction IT\n\n* Updates to wait for availability method\n\n* improve unit testing for patch\n\n* fix bad indentation\n\n* refactor waitForSegmentAvailability\n\n* Fixes based off of review comments\n\n* cleanup to get compile after merging with master\n\n* fix failing test after previous logic update\n\n* add back code that must have gotten deleted during conflict resolution\n\n* update some logging code\n\n* fixes to get compilation working after merge with master\n\n* reset interrupt flag in catch block after code review pointed it out\n\n* small changes following self-review\n\n* fixup some issues brought on by merge with master\n\n* small changes after review\n\n* cleanup a little bit after merge with master\n\n* Fix potential resource leak in AbstractBatchIndexTask\n\n* syntax fix\n\n* Add a Compcation TuningConfig type\n\n* add docs stipulating the lack of support by Compaction tasks for the new config\n\n* Fixup compilation errors after merge with master\n\n* Remove erreneous newline","date":"2021-04-09 12:03:00","modifiedFileCount":"106","status":"M","submitter":"Lucas Capistrant"}]
