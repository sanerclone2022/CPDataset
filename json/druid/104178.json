[{"authorTime":"2019-06-08 07:26:33","codes":[{"authorDate":"2019-06-08 07:26:33","commitOrder":2,"curCode":"  public void testSpecGetAllFull()\n  {\n    Set<String> supervisorIds = ImmutableSet.of(\"id1\", \"id2\");\n\n    SupervisorSpec spec1 = new TestSupervisorSpec(\"id1\", null, null)\n    {\n\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n    SupervisorSpec spec2 = new TestSupervisorSpec(\"id2\", null, null)\n    {\n\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource2\");\n      }\n    };\n    SupervisorStateManager.State state1 = SupervisorStateManager.BasicState.RUNNING;\n    SupervisorStateManager.State state2 = SupervisorStateManager.BasicState.SUSPENDED;\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorIds()).andReturn(supervisorIds).atLeastOnce();\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id1\")).andReturn(Optional.of(spec1)).times(2);\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id2\")).andReturn(Optional.of(spec2)).times(2);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id1\")).andReturn(Optional.of(state1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id2\")).andReturn(Optional.of(state2)).times(1);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetAll(\"\", null, request);\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    List<Map<String, Object>> specs = (List<Map<String, Object>>) response.getEntity();\n    Assert.assertTrue(\n        specs.stream()\n             .allMatch(spec ->\n                           (\"id1\".equals(spec.get(\"id\")) && spec1.equals(spec.get(\"spec\"))) ||\n                           (\"id2\".equals(spec.get(\"id\")) && spec2.equals(spec.get(\"spec\")))\n             )\n    );\n  }\n","date":"2019-06-08 07:26:33","endLine":238,"groupId":"21457","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpecGetAllFull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f6/cb0080a96687a2b115365ff78553345f8b3096.src","preCode":"  public void testSpecGetAllFull()\n  {\n    Set<String> supervisorIds = ImmutableSet.of(\"id1\", \"id2\");\n\n    SupervisorSpec spec1 = new TestSupervisorSpec(\"id1\", null, null)\n    {\n\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n    SupervisorSpec spec2 = new TestSupervisorSpec(\"id2\", null, null)\n    {\n\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource2\");\n      }\n    };\n    SupervisorStateManager.State state1 = SupervisorStateManager.BasicState.RUNNING;\n    SupervisorStateManager.State state2 = SupervisorStateManager.BasicState.SUSPENDED;\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorIds()).andReturn(supervisorIds).atLeastOnce();\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id1\")).andReturn(Optional.of(spec1)).times(2);\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id2\")).andReturn(Optional.of(spec2)).times(2);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id1\")).andReturn(Optional.of(state1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id2\")).andReturn(Optional.of(state2)).times(1);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetAll(\"\", null, request);\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    List<Map<String, Object>> specs = (List<Map<String, Object>>) response.getEntity();\n    Assert.assertTrue(\n        specs.stream()\n             .allMatch(spec ->\n                           (\"id1\".equals(spec.get(\"id\")) && spec1.equals(spec.get(\"spec\"))) ||\n                           (\"id2\".equals(spec.get(\"id\")) && spec2.equals(spec.get(\"spec\")))\n             )\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"MB"},{"authorDate":"2019-06-08 07:26:33","commitOrder":2,"curCode":"  public void testSpecGetState()\n  {\n    Set<String> supervisorIds = ImmutableSet.of(\"id1\", \"id2\");\n    SupervisorSpec spec1 = new TestSupervisorSpec(\"id1\", null, null)\n    {\n\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n    SupervisorSpec spec2 = new TestSupervisorSpec(\"id2\", null, null)\n    {\n\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource2\");\n      }\n    };\n\n    SupervisorStateManager.State state1 = SupervisorStateManager.BasicState.RUNNING;\n    SupervisorStateManager.State state2 = SupervisorStateManager.BasicState.SUSPENDED;\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorIds()).andReturn(supervisorIds).atLeastOnce();\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id1\")).andReturn(Optional.of(spec1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id2\")).andReturn(Optional.of(spec2)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id1\")).andReturn(Optional.of(state1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id2\")).andReturn(Optional.of(state2)).times(1);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetAll(null, true, request);\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    List<Map<String, Object>> states = (List<Map<String, Object>>) response.getEntity();\n    Assert.assertTrue(\n        states.stream()\n             .allMatch(state -> {\n               final String id = (String) state.get(\"id\");\n               if (\"id1\".equals(id)) {\n                 return state1.equals(state.get(\"state\"))\n                        && state1.equals(state.get(\"detailedState\"))\n                        && (Boolean) state.get(\"healthy\") == state1.isHealthy();\n               } else if (\"id2\".equals(id)) {\n                 return state2.equals(state.get(\"state\"))\n                        && state2.equals(state.get(\"detailedState\"))\n                        && (Boolean) state.get(\"healthy\") == state2.isHealthy();\n               }\n               return false;\n             })\n    );\n  }\n","date":"2019-06-08 07:26:33","endLine":302,"groupId":"21457","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpecGetState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/f6/cb0080a96687a2b115365ff78553345f8b3096.src","preCode":"  public void testSpecGetState()\n  {\n    Set<String> supervisorIds = ImmutableSet.of(\"id1\", \"id2\");\n    SupervisorSpec spec1 = new TestSupervisorSpec(\"id1\", null, null)\n    {\n\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n    SupervisorSpec spec2 = new TestSupervisorSpec(\"id2\", null, null)\n    {\n\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource2\");\n      }\n    };\n\n    SupervisorStateManager.State state1 = SupervisorStateManager.BasicState.RUNNING;\n    SupervisorStateManager.State state2 = SupervisorStateManager.BasicState.SUSPENDED;\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorIds()).andReturn(supervisorIds).atLeastOnce();\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id1\")).andReturn(Optional.of(spec1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id2\")).andReturn(Optional.of(spec2)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id1\")).andReturn(Optional.of(state1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id2\")).andReturn(Optional.of(state2)).times(1);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetAll(null, true, request);\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    List<Map<String, Object>> states = (List<Map<String, Object>>) response.getEntity();\n    Assert.assertTrue(\n        states.stream()\n             .allMatch(state -> {\n               final String id = (String) state.get(\"id\");\n               if (\"id1\".equals(id)) {\n                 return state1.equals(state.get(\"state\"))\n                        && state1.equals(state.get(\"detailedState\"))\n                        && (Boolean) state.get(\"healthy\") == state1.isHealthy();\n               } else if (\"id2\".equals(id)) {\n                 return state2.equals(state.get(\"state\"))\n                        && state2.equals(state.get(\"detailedState\"))\n                        && (Boolean) state.get(\"healthy\") == state2.isHealthy();\n               }\n               return false;\n             })\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"B"}],"commitId":"3fbb0a5e00c7c546331cbe56d989a50f36710bf5","commitMessage":"@@@Supervisor list api with states and health (#7839)\n\n* allow optionally listing all supervisors with their state and health\n\n* docs\n\n* add state to full\n\n* clean\n\n* casing\n\n* format\n\n* spelling\n","date":"2019-06-08 07:26:33","modifiedFileCount":"9","status":"M","submitter":"Clint Wylie"},{"authorTime":"2019-07-10 04:16:54","codes":[{"authorDate":"2019-07-10 04:16:54","commitOrder":3,"curCode":"  public void testSpecGetAllFull()\n  {\n    SupervisorStateManager.State state1 = SupervisorStateManager.BasicState.RUNNING;\n    SupervisorStateManager.State state2 = SupervisorStateManager.BasicState.SUSPENDED;\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorIds()).andReturn(SUPERVISOR_IDS).atLeastOnce();\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id1\")).andReturn(Optional.of(SPEC1)).times(2);\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id2\")).andReturn(Optional.of(SPEC2)).times(2);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id1\")).andReturn(Optional.of(state1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id2\")).andReturn(Optional.of(state2)).times(1);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetAll(\"\", null, request);\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    List<Map<String, Object>> specs = (List<Map<String, Object>>) response.getEntity();\n    Assert.assertTrue(\n        specs.stream()\n             .allMatch(spec ->\n                           (\"id1\".equals(spec.get(\"id\")) && SPEC1.equals(spec.get(\"spec\"))) ||\n                           (\"id2\".equals(spec.get(\"id\")) && SPEC2.equals(spec.get(\"spec\")))\n             )\n    );\n  }\n","date":"2019-07-10 04:16:54","endLine":212,"groupId":"21457","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpecGetAllFull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ef/477fe209a54f297322efc1eae2ae060c5c5116.src","preCode":"  public void testSpecGetAllFull()\n  {\n    Set<String> supervisorIds = ImmutableSet.of(\"id1\", \"id2\");\n\n    SupervisorSpec spec1 = new TestSupervisorSpec(\"id1\", null, null)\n    {\n\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n    SupervisorSpec spec2 = new TestSupervisorSpec(\"id2\", null, null)\n    {\n\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource2\");\n      }\n    };\n    SupervisorStateManager.State state1 = SupervisorStateManager.BasicState.RUNNING;\n    SupervisorStateManager.State state2 = SupervisorStateManager.BasicState.SUSPENDED;\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorIds()).andReturn(supervisorIds).atLeastOnce();\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id1\")).andReturn(Optional.of(spec1)).times(2);\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id2\")).andReturn(Optional.of(spec2)).times(2);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id1\")).andReturn(Optional.of(state1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id2\")).andReturn(Optional.of(state2)).times(1);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetAll(\"\", null, request);\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    List<Map<String, Object>> specs = (List<Map<String, Object>>) response.getEntity();\n    Assert.assertTrue(\n        specs.stream()\n             .allMatch(spec ->\n                           (\"id1\".equals(spec.get(\"id\")) && spec1.equals(spec.get(\"spec\"))) ||\n                           (\"id2\".equals(spec.get(\"id\")) && spec2.equals(spec.get(\"spec\")))\n             )\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"},{"authorDate":"2019-07-10 04:16:54","commitOrder":3,"curCode":"  public void testSpecGetState()\n  {\n    SupervisorStateManager.State state1 = SupervisorStateManager.BasicState.RUNNING;\n    SupervisorStateManager.State state2 = SupervisorStateManager.BasicState.SUSPENDED;\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorIds()).andReturn(SUPERVISOR_IDS).atLeastOnce();\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id1\")).andReturn(Optional.of(SPEC1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id2\")).andReturn(Optional.of(SPEC2)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id1\")).andReturn(Optional.of(state1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id2\")).andReturn(Optional.of(state2)).times(1);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetAll(null, true, request);\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    List<Map<String, Object>> states = (List<Map<String, Object>>) response.getEntity();\n    Assert.assertTrue(\n        states.stream()\n              .allMatch(state -> {\n                final String id = (String) state.get(\"id\");\n                if (\"id1\".equals(id)) {\n                  return state1.equals(state.get(\"state\"))\n                         && state1.equals(state.get(\"detailedState\"))\n                         && (Boolean) state.get(\"healthy\") == state1.isHealthy();\n                } else if (\"id2\".equals(id)) {\n                  return state2.equals(state.get(\"state\"))\n                         && state2.equals(state.get(\"detailedState\"))\n                         && (Boolean) state.get(\"healthy\") == state2.isHealthy();\n                }\n                return false;\n              })\n    );\n  }\n","date":"2019-07-10 04:16:54","endLine":256,"groupId":"21457","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpecGetState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/ef/477fe209a54f297322efc1eae2ae060c5c5116.src","preCode":"  public void testSpecGetState()\n  {\n    Set<String> supervisorIds = ImmutableSet.of(\"id1\", \"id2\");\n    SupervisorSpec spec1 = new TestSupervisorSpec(\"id1\", null, null)\n    {\n\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource1\");\n      }\n    };\n    SupervisorSpec spec2 = new TestSupervisorSpec(\"id2\", null, null)\n    {\n\n      @Override\n      public List<String> getDataSources()\n      {\n        return Collections.singletonList(\"datasource2\");\n      }\n    };\n\n    SupervisorStateManager.State state1 = SupervisorStateManager.BasicState.RUNNING;\n    SupervisorStateManager.State state2 = SupervisorStateManager.BasicState.SUSPENDED;\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorIds()).andReturn(supervisorIds).atLeastOnce();\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id1\")).andReturn(Optional.of(spec1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id2\")).andReturn(Optional.of(spec2)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id1\")).andReturn(Optional.of(state1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id2\")).andReturn(Optional.of(state2)).times(1);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetAll(null, true, request);\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    List<Map<String, Object>> states = (List<Map<String, Object>>) response.getEntity();\n    Assert.assertTrue(\n        states.stream()\n             .allMatch(state -> {\n               final String id = (String) state.get(\"id\");\n               if (\"id1\".equals(id)) {\n                 return state1.equals(state.get(\"state\"))\n                        && state1.equals(state.get(\"detailedState\"))\n                        && (Boolean) state.get(\"healthy\") == state1.isHealthy();\n               } else if (\"id2\".equals(id)) {\n                 return state2.equals(state.get(\"state\"))\n                        && state2.equals(state.get(\"detailedState\"))\n                        && (Boolean) state.get(\"healthy\") == state2.isHealthy();\n               }\n               return false;\n             })\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"338b8b3fefb836d4adcb9c6dfcb8c1995293f86b","commitMessage":"@@@SupervisorManager: Add authorization checks to bulk endpoints. (#8044)\n\nThe endpoints added in #6272 were missing authorization checks. This patch removes the bulk\nmethods from SupervisorManager.  and instead has SupervisorResource run the full list through\nfilterAuthorizedSupervisorIds before calling resume/suspend/terminate one by one.","date":"2019-07-10 04:16:54","modifiedFileCount":"4","status":"M","submitter":"Gian Merlino"},{"authorTime":"2019-10-19 06:16:42","codes":[{"authorDate":"2019-10-19 06:16:42","commitOrder":4,"curCode":"  public void testSpecGetAllFull()\n  {\n    SupervisorStateManager.State state1 = SupervisorStateManager.BasicState.RUNNING;\n    SupervisorStateManager.State state2 = SupervisorStateManager.BasicState.SUSPENDED;\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorIds()).andReturn(SUPERVISOR_IDS).atLeastOnce();\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id1\")).andReturn(Optional.of(SPEC1)).anyTimes();\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id2\")).andReturn(Optional.of(SPEC2)).anyTimes();\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id1\")).andReturn(Optional.of(state1)).anyTimes();\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id2\")).andReturn(Optional.of(state2)).anyTimes();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetAll(\"\", null, null, request);\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    List<SupervisorStatus> specs = (List<SupervisorStatus>) response.getEntity();\n    Assert.assertTrue(\n        specs.stream()\n             .allMatch(spec ->\n                           (\"id1\".equals(spec.getId()) && SPEC1.equals(spec.getSpec())) ||\n                           (\"id2\".equals(spec.getId()) && SPEC2.equals(spec.getSpec()))\n             )\n    );\n  }\n","date":"2019-10-19 06:16:42","endLine":216,"groupId":"104178","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSpecGetAllFull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/13/90e7acc98c6d7f70a81990fff0e4d4a7161a4e.src","preCode":"  public void testSpecGetAllFull()\n  {\n    SupervisorStateManager.State state1 = SupervisorStateManager.BasicState.RUNNING;\n    SupervisorStateManager.State state2 = SupervisorStateManager.BasicState.SUSPENDED;\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorIds()).andReturn(SUPERVISOR_IDS).atLeastOnce();\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id1\")).andReturn(Optional.of(SPEC1)).times(2);\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id2\")).andReturn(Optional.of(SPEC2)).times(2);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id1\")).andReturn(Optional.of(state1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id2\")).andReturn(Optional.of(state2)).times(1);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetAll(\"\", null, request);\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    List<Map<String, Object>> specs = (List<Map<String, Object>>) response.getEntity();\n    Assert.assertTrue(\n        specs.stream()\n             .allMatch(spec ->\n                           (\"id1\".equals(spec.get(\"id\")) && SPEC1.equals(spec.get(\"spec\"))) ||\n                           (\"id2\".equals(spec.get(\"id\")) && SPEC2.equals(spec.get(\"spec\")))\n             )\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2019-10-19 06:16:42","commitOrder":4,"curCode":"  public void testSpecGetState()\n  {\n    SupervisorStateManager.State state1 = SupervisorStateManager.BasicState.RUNNING;\n    SupervisorStateManager.State state2 = SupervisorStateManager.BasicState.SUSPENDED;\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorIds()).andReturn(SUPERVISOR_IDS).atLeastOnce();\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id1\")).andReturn(Optional.of(SPEC1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id2\")).andReturn(Optional.of(SPEC2)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id1\")).andReturn(Optional.of(state1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id2\")).andReturn(Optional.of(state2)).times(1);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetAll(null, true, null, request);\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    List<SupervisorStatus> states = (List<SupervisorStatus>) response.getEntity();\n    Assert.assertTrue(\n        states.stream()\n              .allMatch(state -> {\n                final String id = (String) state.getId();\n                if (\"id1\".equals(id)) {\n                  return state1.toString().equals(state.getState())\n                         && state1.toString().equals(state.getDetailedState())\n                         && (Boolean) state.isHealthy() == state1.isHealthy();\n                } else if (\"id2\".equals(id)) {\n                  return state2.toString().equals(state.getState())\n                         && state2.toString().equals(state.getDetailedState())\n                         && (Boolean) state.isHealthy() == state2.isHealthy();\n                }\n                return false;\n              })\n    );\n  }\n","date":"2019-10-19 06:16:42","endLine":299,"groupId":"104178","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSpecGetState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/13/90e7acc98c6d7f70a81990fff0e4d4a7161a4e.src","preCode":"  public void testSpecGetState()\n  {\n    SupervisorStateManager.State state1 = SupervisorStateManager.BasicState.RUNNING;\n    SupervisorStateManager.State state2 = SupervisorStateManager.BasicState.SUSPENDED;\n\n    EasyMock.expect(taskMaster.getSupervisorManager()).andReturn(Optional.of(supervisorManager));\n    EasyMock.expect(supervisorManager.getSupervisorIds()).andReturn(SUPERVISOR_IDS).atLeastOnce();\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id1\")).andReturn(Optional.of(SPEC1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorSpec(\"id2\")).andReturn(Optional.of(SPEC2)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id1\")).andReturn(Optional.of(state1)).times(1);\n    EasyMock.expect(supervisorManager.getSupervisorState(\"id2\")).andReturn(Optional.of(state2)).times(1);\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_ALLOW_UNSECURED_PATH)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED)).andReturn(null).atLeastOnce();\n    EasyMock.expect(request.getAttribute(AuthConfig.DRUID_AUTHENTICATION_RESULT)).andReturn(\n        new AuthenticationResult(\"druid\", \"druid\", null, null)\n    ).atLeastOnce();\n    request.setAttribute(AuthConfig.DRUID_AUTHORIZATION_CHECKED, true);\n    EasyMock.expectLastCall().anyTimes();\n    replayAll();\n\n    Response response = supervisorResource.specGetAll(null, true, request);\n    verifyAll();\n\n    Assert.assertEquals(200, response.getStatus());\n    List<Map<String, Object>> states = (List<Map<String, Object>>) response.getEntity();\n    Assert.assertTrue(\n        states.stream()\n              .allMatch(state -> {\n                final String id = (String) state.get(\"id\");\n                if (\"id1\".equals(id)) {\n                  return state1.equals(state.get(\"state\"))\n                         && state1.equals(state.get(\"detailedState\"))\n                         && (Boolean) state.get(\"healthy\") == state1.isHealthy();\n                } else if (\"id2\".equals(id)) {\n                  return state2.equals(state.get(\"state\"))\n                         && state2.equals(state.get(\"detailedState\"))\n                         && (Boolean) state.get(\"healthy\") == state2.isHealthy();\n                }\n                return false;\n              })\n    );\n  }\n","realPath":"indexing-service/src/test/java/org/apache/druid/indexing/overlord/supervisor/SupervisorResourceTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"98f59ddd7e0dd44960f499f2384392be1e60eef0","commitMessage":"@@@Add `sys.supervisors` table to system tables (#8547)\n\n* Add supervisors table to SystemSchema\n\n* Add docs\n\n* fix checkstyle\n\n* fix test\n\n* fix CI\n\n* Add comments\n\n* Fix javadoc teamcity error\n\n* comments\n\n* fix links in docs\n\n* fix links\n\n* rename fullStatus query param to system and remove it from docs\n","date":"2019-10-19 06:16:42","modifiedFileCount":"14","status":"M","submitter":"Surekha"}]
