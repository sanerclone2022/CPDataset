[{"authorTime":"2018-08-31 00:56:26","codes":[{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr = null;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;                      \r\n      dtLast = dt;                       \r\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = line.replace(TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(\n            this.jsonMapper.readValue(\n                event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n            )\n        );\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt;\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":143,"groupId":"11917","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"postEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c6/dd0221c2d2ff50f0fb437ba85af92aebf57098.src","preCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr = null;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;                      \r\n      dtLast = dt;                       \r\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = line.replace(TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(\n            this.jsonMapper.readValue(\n                event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n            )\n        );\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt;\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITRealtimeIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"},{"authorDate":"2018-08-31 00:56:26","commitOrder":1,"curCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr = null;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;\n      dtLast = dt;\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n          dtFirst = dt; \r\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = line.replace(TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(\n            this.jsonMapper.readValue(\n                event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n            )\n        );\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt; \r\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","date":"2018-08-31 00:56:26","endLine":131,"groupId":"20475","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"postEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/4e/c554da7e881a4c6f2f182685d044822df91142.src","preCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr = null;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;\n      dtLast = dt;\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n          dtFirst = dt; \r\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = line.replace(TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(\n            this.jsonMapper.readValue(\n                event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT\n            )\n        );\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt; \r\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITAppenderatorDriverRealtimeIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"431d3d8497f9079857c3baa7ae7ab4cb44a22355","commitMessage":"@@@Rename io.druid to org.apache.druid. (#6266)\n\n* Rename io.druid to org.apache.druid.\n\n* Fix META-INF files and remove some benchmark results.\n\n* MonitorsConfig update for metrics package migration.\n\n* Reorder some dimensions in inner queries for some reason.\n\n* Fix protobuf tests.\n","date":"2018-08-31 00:56:26","modifiedFileCount":"5","status":"B","submitter":"Gian Merlino"},{"authorTime":"2018-11-07 06:38:08","codes":[{"authorDate":"2018-11-07 06:38:08","commitOrder":2,"curCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;                      \r\n      dtLast = dt;                       \r\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = line.replace(TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt;\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","date":"2018-11-07 06:38:08","endLine":139,"groupId":"11917","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"postEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/af/30db3347488befd481b644a3aab166a8e16872.src","preCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr = null;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;                      \r\n      dtLast = dt;                       \r\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = line.replace(TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt;\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITRealtimeIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2018-11-07 06:38:08","commitOrder":2,"curCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;\n      dtLast = dt;\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n          dtFirst = dt; \r\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = line.replace(TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt; \r\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","date":"2018-11-07 06:38:08","endLine":127,"groupId":"20475","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"postEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/bd/d0df78ee3ec6e553529bbb7bc46085f14c5364.src","preCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr = null;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;\n      dtLast = dt;\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n          dtFirst = dt; \r\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = line.replace(TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt; \r\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITAppenderatorDriverRealtimeIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"54351a5c75d8902d1d4c2eb2f6590bcf126348d4","commitMessage":"@@@Fix various bugs; Enable more IntelliJ inspections and update error-prone (#6490)\n\n* Fix various bugs; Enable more IntelliJ inspections and update error-prone\n\n* Fix NPE\n\n* Fix inspections\n\n* Remove unused imports\n","date":"2018-11-07 06:38:08","modifiedFileCount":"93","status":"M","submitter":"Roman Leventov"},{"authorTime":"2018-11-16 05:21:34","codes":[{"authorDate":"2018-11-16 05:21:34","commitOrder":3,"curCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;                      \r\n      dtLast = dt;                       \r\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = StringUtils.replace(line, TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt;\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","date":"2018-11-16 05:21:34","endLine":140,"groupId":"2190","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"postEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/7d/feee13d6cf01278825b63a527f1e45b89c9933.src","preCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;                      \r\n      dtLast = dt;                       \r\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = line.replace(TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt;\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITRealtimeIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2018-11-16 05:21:34","commitOrder":3,"curCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;\n      dtLast = dt;\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n          dtFirst = dt; \r\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = StringUtils.replace(line, TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt; \r\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","date":"2018-11-16 05:21:34","endLine":128,"groupId":"1677","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"postEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/54/d28d9d91fe4aefc7058fbfe4b990828995bf6f.src","preCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;\n      dtLast = dt;\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n          dtFirst = dt; \r\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = line.replace(TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt; \r\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITAppenderatorDriverRealtimeIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"8f3fe9cd028592b4b1449c2a5e6dba482bed0549","commitMessage":"@@@Prohibit String.replace() and String.replaceAll().  fix and prohibit some toString()-related redundancies (#6607)\n\n* Prohibit String.replace() and String.replaceAll().  fix and prohibit some toString()-related redundancies\n\n* Fix bug\n\n* Replace checkstyle regexp with IntelliJ inspection\n","date":"2018-11-16 05:21:34","modifiedFileCount":"97","status":"M","submitter":"Roman Leventov"},{"authorTime":"2019-03-15 05:28:33","codes":[{"authorDate":"2019-03-15 05:28:33","commitOrder":4,"curCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;                      \r\n      dtLast = dt;                       \r\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = StringUtils.replace(line, TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt;\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","date":"2019-03-15 05:28:33","endLine":139,"groupId":"2190","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"postEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/79/70a81831d7ffa1aa1dcdd7c090de245142f280.src","preCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;                      \r\n      dtLast = dt;                       \r\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = StringUtils.replace(line, TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt;\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITRealtimeIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2019-03-15 05:28:33","commitOrder":4,"curCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;\n      dtLast = dt;\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n          dtFirst = dt; \r\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = StringUtils.replace(line, TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt; \r\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","date":"2019-03-15 05:28:33","endLine":128,"groupId":"1677","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"postEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/1b/52fc4207fba4baac6f17d36827925ab333e38c.src","preCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;\n      dtLast = dt;\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n          dtFirst = dt; \r\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = StringUtils.replace(line, TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {  }\n        dtLast = dt; \r\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITAppenderatorDriverRealtimeIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"7ada1c49f9735a37808f3ed7656d93ae88b8b925","commitMessage":"@@@Prohibit Throwables.propagate() (#7121)\n\n* Throw caught exception.\n\n* Throw caught exceptions.\n\n* Related checkstyle rule is added to prevent further bugs.\n\n* RuntimeException() is used instead of Throwables.propagate().\n\n* Missing import is added.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* Throwables are propogated if possible.\n\n* * Checkstyle definition is improved.\n* Throwables.propagate() usages are removed.\n\n* Checkstyle pattern is changed for only scanning \"Throwables.propagate(\" instead of checking lookbehind.\n\n* Throwable is kept before firing a Runtime Exception.\n\n* Fix unused assignments.\n","date":"2019-03-15 05:28:33","modifiedFileCount":"228","status":"M","submitter":"Furkan KAMACI"},{"authorTime":"2019-08-08 00:52:42","codes":[{"authorDate":"2019-08-08 00:52:42","commitOrder":5,"curCode":"  void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    InputStreamReader isr;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    try (BufferedReader reader = new BufferedReader(isr)) {\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;                      \r\n      dtLast = dt;                       \r\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = StringUtils.replace(line, TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ignored) {\n          \n        }\n        dtLast = dt;\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    finally {\n      eventReceiverSelector.stop();\n    }\n  }\n","date":"2019-08-08 00:52:42","endLine":140,"groupId":"103687","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"postEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/00/a6618abf3af8f90953220fc42ee3c096713431.src","preCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;                      \r\n      dtLast = dt;                       \r\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = StringUtils.replace(line, TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {\n          \n        }\n        dtLast = dt;\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITRealtimeIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2019-08-08 00:52:42","commitOrder":5,"curCode":"  void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    InputStreamReader isr;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    try (BufferedReader reader = new BufferedReader(isr)) {\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;\n      dtLast = dt;\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n          dtFirst = dt; \r\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = StringUtils.replace(line, TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ignored) {\n          \n        }\n        dtLast = dt; \r\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    finally {\n      eventReceiverSelector.stop();\n    }\n  }\n","date":"2019-08-08 00:52:42","endLine":129,"groupId":"103687","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"postEvents","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/dd/fead79c198452a49bc7fb06f6cecff8e3563f6.src","preCode":"  public void postEvents() throws Exception\n  {\n    final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_NAME);\n    eventReceiverSelector.start();\n    BufferedReader reader = null;\n    InputStreamReader isr;\n    try {\n      isr = new InputStreamReader(\n          ITRealtimeIndexTaskTest.class.getResourceAsStream(EVENT_DATA_FILE),\n          StandardCharsets.UTF_8\n      );\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    try {\n      reader = new BufferedReader(isr);\n      ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, \"Event Receiver\");\n      \r\n      String host = config.getMiddleManagerHost() + \":\" + eventReceiverSelector.pick().getPort();\n      LOG.info(\"Event Receiver Found at host [%s]\", host);\n      EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient(\n          host,\n          EVENT_RECEIVER_SERVICE_NAME,\n          jsonMapper,\n          httpClient,\n          smileMapper\n      );\n      \r\n      int i = 1;\n      DateTime dt = DateTimes.nowUtc();  \r\n      dtFirst = dt;\n      dtLast = dt;\n      String line;\n      while ((line = reader.readLine()) != null) {\n        if (i == 15) { \r\n          dt = dt.minusMinutes(10);\n          dtFirst = dt; \r\n        } else if (i == 16) { \r\n          dtGroupBy = dt;\n        } else if (i == 18) { \r\n          dt = dt.minusSeconds(6);\n        }\n        String event = StringUtils.replace(line, TIME_PLACEHOLDER, EVENT_FMT.print(dt));\n        LOG.info(\"sending event: [%s]\\n\", event);\n        Collection<Map<String, Object>> events = new ArrayList<Map<String, Object>>();\n        events.add(this.jsonMapper.readValue(event, JacksonUtils.TYPE_REFERENCE_MAP_STRING_OBJECT));\n        int eventsPosted = client.postEvents(events, this.jsonMapper, MediaType.APPLICATION_JSON);\n        if (eventsPosted != events.size()) {\n          throw new ISE(\"Event not posted\");\n        }\n\n        try {\n          Thread.sleep(DELAY_BETWEEN_EVENTS_SECS * 1000);\n        }\n        catch (InterruptedException ex) {\n          \n        }\n        dtLast = dt; \r\n        dt = DateTimes.nowUtc();\n        i++;\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    finally {\n      reader.close();\n      eventReceiverSelector.stop();\n    }\n  }\n","realPath":"integration-tests/src/test/java/org/apache/druid/tests/indexer/ITAppenderatorDriverRealtimeIndexTaskTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"05b44e3467b423be0cb2fd449d799241898fa5b0","commitMessage":"@@@Speedup Travis CI jobs (#8240)\n\nReorganize Travis CI jobs into smaller faster (and more) jobs. Add\nvarious maven options to skip unnecessary work and refactored Travis CI\njob definitions to follow DRY.\n\nDetailed changes:\n\n.travis.yml\n- Refactor build logic to get rid of copy-and-paste logic\n- Skip static checks and enable parallelism for maven install\n- Split static analysis into different jobs to ease triage\n- Use \"name\" attribute instead of NAME environment variable\n- Split \"indexing\" and \"web console\" out of \"other modules test\"\n- Split 2 integration test jobs into multiple smaller jobs\n\nbuild.sh\n- Enable parallelism\n- Disable more static checks\n\ntravis_script_integration.sh\ntravis_script_integration_part2.sh\nintegration-tests/README.md\n- Use TestNG groups instead of shell scripts and move definition of jobs\n  into Travis CI yaml\n\nintegration-tests/pom.xml\n- Show elapsed time of individual tests to aid in future rebalancing of\n  Travis CI integration test jobs run time\n\nTestNGGroup.java\n- Use TestNG groups to make it easy to have multiple Travis CI\n  integration test jobs. TestNG groups also make it easier to have an\n  \"other\" integration test group and make it less likely a test will\n  accidentally not be included in a CI job.\n\nIT*Test.java\nAbstractITBatchIndexTest.java\nAbstractKafkaIndexerTest.java\n- Add TestNG group\n- Fix various IntelliJ inspection warnings\n- Reduce scope of helper methods since the TestNG group annotation on\n  the class makes TestNG consider all public methods as test methods\n\npom.xml\n- Allow enforce plugin to be run from command-line\n- Bump resources plugin version so that \"[debug] execute contextualize\"\n  output is correctly suppressed by \"mvn -q\"\n- Bump exec plugin version so that skip property is renamed from \"skip\"\n  to \"exec.skip\"\n\nweb-console/pom.xml\n- Add property to allow disabling javascript-related work. This property\n  is overridden in Travis CI to speed up the jobs.","date":"2019-08-08 00:52:42","modifiedFileCount":"20","status":"M","submitter":"Chi Cao Minh"}]
