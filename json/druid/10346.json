[{"authorTime":"2019-03-29 11:25:10","codes":[{"authorDate":"2019-03-29 11:25:10","commitOrder":2,"curCode":"  public void testSerdeBasic() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        null,\n        500L,\n        100L,\n        null,\n        20,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = objectMapper.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = objectMapper.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertTrue(fromJson.isKeepSegmentGranularity());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getTargetCompactionSizeBytes(), fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getMaxNumSegmentsToCompact(), fromJson.getMaxNumSegmentsToCompact());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","date":"2019-03-29 11:25:10","endLine":69,"groupId":"22873","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/84/a3d0d48ea84384e7e763a56c7f84f622dc22d1.src","preCode":"  public void testSerdeBasic() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        null,\n        500L,\n        100L,\n        null,\n        20,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = objectMapper.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = objectMapper.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertTrue(fromJson.isKeepSegmentGranularity());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getTargetCompactionSizeBytes(), fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getMaxNumSegmentsToCompact(), fromJson.getMaxNumSegmentsToCompact());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"MB"},{"authorDate":"2019-03-29 11:25:10","commitOrder":2,"curCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        null,\n        500L,\n        null,\n        30,\n        20,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = objectMapper.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = objectMapper.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertTrue(fromJson.isKeepSegmentGranularity());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertNull(fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getMaxNumSegmentsToCompact(), fromJson.getMaxNumSegmentsToCompact());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","date":"2019-03-29 11:25:10","endLine":99,"groupId":"18284","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithMaxRowsPerSegment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/84/a3d0d48ea84384e7e763a56c7f84f622dc22d1.src","preCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        null,\n        500L,\n        null,\n        30,\n        20,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = objectMapper.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = objectMapper.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertTrue(fromJson.isKeepSegmentGranularity());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertNull(fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getMaxNumSegmentsToCompact(), fromJson.getMaxNumSegmentsToCompact());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"MB"}],"commitId":"62c3e89266037da2814fb3504f1c22b34064ade1","commitMessage":"@@@maxTotalRows should be checked in DataSourceCompactionConfig before setting targetCompactionSizeBytes (#7368)\n\n* maxTotalRows should be checked in DataSourceCompactionConfig before setting targetCompactionSizeBytes\n\n* remove unnecessary default values\n\n* remove flacky test\n\n* fix build\n\n* Add comments\n","date":"2019-03-29 11:25:10","modifiedFileCount":"14","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-06-04 03:59:15","codes":[{"authorDate":"2019-06-04 03:59:15","commitOrder":3,"curCode":"  public void testSerdeBasic() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        100L,\n        null,\n        20,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = objectMapper.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = objectMapper.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getTargetCompactionSizeBytes(), fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getMaxNumSegmentsToCompact(), fromJson.getMaxNumSegmentsToCompact());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","date":"2019-06-04 03:59:15","endLine":67,"groupId":"23050","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9b/8dbbda7e6428ac853553bd9f0a5187ab19d6d2.src","preCode":"  public void testSerdeBasic() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        null,\n        500L,\n        100L,\n        null,\n        20,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = objectMapper.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = objectMapper.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertTrue(fromJson.isKeepSegmentGranularity());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getTargetCompactionSizeBytes(), fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getMaxNumSegmentsToCompact(), fromJson.getMaxNumSegmentsToCompact());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2019-06-04 03:59:15","commitOrder":3,"curCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        30,\n        20,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = objectMapper.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = objectMapper.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertNull(fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getMaxNumSegmentsToCompact(), fromJson.getMaxNumSegmentsToCompact());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","date":"2019-06-04 03:59:15","endLine":95,"groupId":"18284","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithMaxRowsPerSegment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/9b/8dbbda7e6428ac853553bd9f0a5187ab19d6d2.src","preCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        null,\n        500L,\n        null,\n        30,\n        20,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = objectMapper.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = objectMapper.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertTrue(fromJson.isKeepSegmentGranularity());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertNull(fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getMaxNumSegmentsToCompact(), fromJson.getMaxNumSegmentsToCompact());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"61ec521135fd8ae40110524e8857610d0830e279","commitMessage":"@@@Remove keepSegmentGranularity option for compaction  (#7747)\n\n* Remove keepSegmentGranularity option from compaction\n\n* fix it test\n\n* clean up\n\n* remove from web console\n\n* fix test\n","date":"2019-06-04 03:59:15","modifiedFileCount":"15","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-08-23 18:13:54","codes":[{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testSerdeBasic() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        100L,\n        null,\n        20,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getTargetCompactionSizeBytes(), fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getMaxNumSegmentsToCompact(), fromJson.getMaxNumSegmentsToCompact());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","date":"2019-08-23 18:13:54","endLine":71,"groupId":"23050","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/45/b3b5a826529ed1073a665886080847db8bcd8b.src","preCode":"  public void testSerdeBasic() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        100L,\n        null,\n        20,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = objectMapper.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = objectMapper.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getTargetCompactionSizeBytes(), fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getMaxNumSegmentsToCompact(), fromJson.getMaxNumSegmentsToCompact());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2019-08-23 18:13:54","commitOrder":4,"curCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        30,\n        20,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertNull(fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getMaxNumSegmentsToCompact(), fromJson.getMaxNumSegmentsToCompact());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","date":"2019-08-23 18:13:54","endLine":99,"groupId":"18284","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithMaxRowsPerSegment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/45/b3b5a826529ed1073a665886080847db8bcd8b.src","preCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        30,\n        20,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = objectMapper.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = objectMapper.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertNull(fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getMaxNumSegmentsToCompact(), fromJson.getMaxNumSegmentsToCompact());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"33f0753a70361e7d345a488034f76a889f7c3682","commitMessage":"@@@Add Checkstyle for constant name static final (#8060)\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* check ctyle for constant field name\n\n* merging with upstream\n\n* review-1\n\n* unknow changes\n\n* unknow changes\n\n* review-2\n\n* merging with master\n\n* review-2 1 changes\n\n* review changes-2 2\n\n* bug fix\n","date":"2019-08-23 18:13:54","modifiedFileCount":"298","status":"M","submitter":"SandishKumarHN"},{"authorTime":"2019-10-10 02:12:00","codes":[{"authorDate":"2019-10-10 02:12:00","commitOrder":5,"curCode":"  public void testSerdeBasic() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        100L,\n        null,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getTargetCompactionSizeBytes(), fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","date":"2019-10-10 02:12:00","endLine":69,"groupId":"18284","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/30/81a0bffd0ed9e0b390177b933f8e27b5aeda60.src","preCode":"  public void testSerdeBasic() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        100L,\n        null,\n        20,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getTargetCompactionSizeBytes(), fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getMaxNumSegmentsToCompact(), fromJson.getMaxNumSegmentsToCompact());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2019-10-10 02:12:00","commitOrder":5,"curCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        30,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertNull(fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","date":"2019-10-10 02:12:00","endLine":95,"groupId":"18284","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithMaxRowsPerSegment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/30/81a0bffd0ed9e0b390177b933f8e27b5aeda60.src","preCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        30,\n        20,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertNull(fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getMaxNumSegmentsToCompact(), fromJson.getMaxNumSegmentsToCompact());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"96d8523ecbc0108e622084671172fded81065aa0","commitMessage":"@@@Use hash of Segment IDs instead of a list of explicit segments in auto compaction (#8571)\n\n* IOConfig for compaction task\n\n* add javadoc.  doc.  unit test\n\n* fix webconsole test\n\n* add spelling\n\n* address comments\n\n* fix build and test\n\n* address comments\n","date":"2019-10-10 02:12:00","modifiedFileCount":"16","status":"M","submitter":"Jihoon Son"},{"authorTime":"2019-10-16 13:57:42","codes":[{"authorDate":"2019-10-16 13:57:42","commitOrder":6,"curCode":"  public void testSerdeBasic() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","date":"2019-10-16 13:57:42","endLine":67,"groupId":"18284","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5d/5b9df3a09842b93de068899d4c2f48b8c4322d.src","preCode":"  public void testSerdeBasic() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        100L,\n        null,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getTargetCompactionSizeBytes(), fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2019-10-16 13:57:42","commitOrder":6,"curCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        30,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","date":"2019-10-16 13:57:42","endLine":91,"groupId":"18284","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithMaxRowsPerSegment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/5d/5b9df3a09842b93de068899d4c2f48b8c4322d.src","preCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        30,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertNull(fromJson.getTargetCompactionSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"4046c86d62192c812cea87188dd17e745fb83b04","commitMessage":"@@@Stateful auto compaction (#8573)\n\n* Stateful auto compaction\n\n* javaodc\n\n* add removed test back\n\n* fix test\n\n* adding indexSpec to compactionState\n\n* fix build\n\n* add lastCompactionState\n\n* address comments\n\n* extract CompactionState\n\n* fix doc\n\n* fix build and test\n\n* Add a task context to store compaction state; add javadoc\n\n* fix it test\n","date":"2019-10-16 13:57:42","modifiedFileCount":"69","status":"M","submitter":"Jihoon Son"},{"authorTime":"2021-02-12 19:03:20","codes":[{"authorDate":"2021-02-12 19:03:20","commitOrder":7,"curCode":"  public void testSerdeBasic() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        new Period(3600),\n        null,\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n    Assert.assertEquals(config.getGranularitySpec(), fromJson.getGranularitySpec());\n  }\n","date":"2021-02-12 19:03:20","endLine":78,"groupId":"18284","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testSerdeBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/01/cfabb2c40b11e08a1e1125dc3ce8d242fdd829.src","preCode":"  public void testSerdeBasic() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2021-02-12 19:03:20","commitOrder":7,"curCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        30,\n        new Period(3600),\n        null,\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","date":"2021-02-12 19:03:20","endLine":103,"groupId":"18284","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testSerdeWithMaxRowsPerSegment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/01/cfabb2c40b11e08a1e1125dc3ce8d242fdd829.src","preCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        30,\n        new Period(3600),\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"6541178c21839530a42af4b4675a9bc680bffca6","commitMessage":"@@@Support segmentGranularity for auto-compaction (#10843)\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* resolve conflict\n\n* Support segmentGranularity for auto-compaction\n\n* Support segmentGranularity for auto-compaction\n\n* fix tests\n\n* fix more tests\n\n* fix checkstyle\n\n* add unit tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix checkstyle\n\n* add unit tests\n\n* add integration tests\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix failing tests\n\n* address comments\n\n* address comments\n\n* fix tests\n\n* fix tests\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test\n\n* fix test","date":"2021-02-12 19:03:20","modifiedFileCount":"32","status":"M","submitter":"Maytas Monsereenusorn"},{"authorTime":"2021-04-09 15:12:28","codes":[{"authorDate":"2021-04-09 15:12:28","commitOrder":8,"curCode":"  public void testSerdeBasic() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        new Period(3600),\n        null,\n        null,\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n    Assert.assertEquals(config.getGranularitySpec(), fromJson.getGranularitySpec());\n  }\n","date":"2021-04-09 15:12:28","endLine":75,"groupId":"10346","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"testSerdeBasic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c7/98d29e1ea9141f79391f5bbdb1f13b179a0d19.src","preCode":"  public void testSerdeBasic() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        null,\n        new Period(3600),\n        null,\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n    Assert.assertEquals(config.getGranularitySpec(), fromJson.getGranularitySpec());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2021-04-09 15:12:28","commitOrder":8,"curCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        30,\n        new Period(3600),\n        null,\n        null,\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","date":"2021-04-09 15:12:28","endLine":101,"groupId":"10346","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"testSerdeWithMaxRowsPerSegment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/c7/98d29e1ea9141f79391f5bbdb1f13b179a0d19.src","preCode":"  public void testSerdeWithMaxRowsPerSegment() throws IOException\n  {\n    final DataSourceCompactionConfig config = new DataSourceCompactionConfig(\n        \"dataSource\",\n        null,\n        500L,\n        30,\n        new Period(3600),\n        null,\n        null,\n        ImmutableMap.of(\"key\", \"val\")\n    );\n    final String json = OBJECT_MAPPER.writeValueAsString(config);\n    final DataSourceCompactionConfig fromJson = OBJECT_MAPPER.readValue(json, DataSourceCompactionConfig.class);\n\n    Assert.assertEquals(config.getDataSource(), fromJson.getDataSource());\n    Assert.assertEquals(25, fromJson.getTaskPriority());\n    Assert.assertEquals(config.getInputSegmentSizeBytes(), fromJson.getInputSegmentSizeBytes());\n    Assert.assertEquals(config.getMaxRowsPerSegment(), fromJson.getMaxRowsPerSegment());\n    Assert.assertEquals(config.getSkipOffsetFromLatest(), fromJson.getSkipOffsetFromLatest());\n    Assert.assertEquals(config.getTuningConfig(), fromJson.getTuningConfig());\n    Assert.assertEquals(config.getTaskContext(), fromJson.getTaskContext());\n  }\n","realPath":"server/src/test/java/org/apache/druid/server/coordinator/DataSourceCompactionConfigTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"4576152e4a0213d17048a330e7089aa9d89f3972","commitMessage":"@@@Make dropExisting flag for Compaction configurable and add warning documentations (#11070)\n\n* Make dropExisting flag for Compaction configurable\n\n* fix checkstyle\n\n* fix checkstyle\n\n* fix test\n\n* add tests\n\n* fix spelling\n\n* fix docs\n\n* add IT\n\n* fix test\n\n* fix doc\n\n* fix doc","date":"2021-04-09 15:12:28","modifiedFileCount":"20","status":"M","submitter":"Maytas Monsereenusorn"}]
