[{"authorTime":"2020-06-04 05:31:37","codes":[{"authorDate":"2020-06-04 05:31:37","commitOrder":1,"curCode":"  public void testNullPattern()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_like] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_like(a, null)\", Parser.withMap(ImmutableMap.of(\"a\", \"foo\")));\n    Assert.assertEquals(\n        ExprEval.of(true, ExprType.LONG).value(),\n        result.value()\n    );\n  }\n","date":"2020-06-04 05:31:37","endLine":83,"groupId":"13470","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullPattern","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/a6/bdfb36a03a04cb7e5381e60382453a2caa9380.src","preCode":"  public void testNullPattern()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_like] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_like(a, null)\", Parser.withMap(ImmutableMap.of(\"a\", \"foo\")));\n    Assert.assertEquals(\n        ExprEval.of(true, ExprType.LONG).value(),\n        result.value()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/expression/RegexpLikeExprMacroTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"},{"authorDate":"2020-06-04 05:31:37","commitOrder":1,"curCode":"  public void testNullPattern()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_extract] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_extract(a, null)\", Parser.withMap(ImmutableMap.of(\"a\", \"foo\")));\n    Assert.assertNull(result.value());\n  }\n","date":"2020-06-04 05:31:37","endLine":101,"groupId":"16156","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNullPattern","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/811d788b4ff9217e2af2b6e72d9ff821a49ba6.src","preCode":"  public void testNullPattern()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_extract] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_extract(a, null)\", Parser.withMap(ImmutableMap.of(\"a\", \"foo\")));\n    Assert.assertNull(result.value());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/expression/RegexpExtractExprMacroTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"3dfd7c30c00238d35dc9e3d25bfd136e0b5f7240","commitMessage":"@@@Add REGEXP_LIKE.  fix bugs in REGEXP_EXTRACT. (#9893)\n\n* Add REGEXP_LIKE.  fix empty-pattern bug in REGEXP_EXTRACT.\n\n- Add REGEXP_LIKE function that returns a boolean.  and is useful in\n  WHERE clauses.\n- Fix REGEXP_EXTRACT return type (should be nullable; causes incorrect\n  filter elision).\n- Fix REGEXP_EXTRACT behavior for empty patterns: should always match\n  (previously.  they threw errors).\n- Improve error behavior when REGEXP_EXTRACT and REGEXP_LIKE are passed\n  non-literal patterns.\n- Improve documentation of REGEXP_EXTRACT.\n\n* Changes based on PR review.\n\n* Fix arg check.\n\n* Important fixes!\n\n* Add speller.\n\n* wip\n\n* Additional tests.\n\n* Fix up tests.\n\n* Add validation error tests.\n\n* Additional tests.\n\n* Remove useless call.","date":"2020-06-04 05:31:37","modifiedFileCount":"54","status":"B","submitter":"Gian Merlino"},{"authorTime":"2020-06-04 05:31:37","codes":[{"authorDate":"2020-09-15 09:18:56","commitOrder":2,"curCode":"  public void testNullPattern()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_like] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_like(a, null)\", Parser.withMap(ImmutableMap.of(\"a\", \"foo\")));\n    Assert.assertEquals(\n        ExprEval.ofLongBoolean(true).value(),\n        result.value()\n    );\n  }\n","date":"2020-09-15 09:18:56","endLine":82,"groupId":"16156","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNullPattern","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/b5/7db64b2327635bf3d464b1ebafb6f173ba64f6.src","preCode":"  public void testNullPattern()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_like] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_like(a, null)\", Parser.withMap(ImmutableMap.of(\"a\", \"foo\")));\n    Assert.assertEquals(\n        ExprEval.of(true, ExprType.LONG).value(),\n        result.value()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/expression/RegexpLikeExprMacroTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-06-04 05:31:37","commitOrder":2,"curCode":"  public void testNullPattern()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_extract] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_extract(a, null)\", Parser.withMap(ImmutableMap.of(\"a\", \"foo\")));\n    Assert.assertNull(result.value());\n  }\n","date":"2020-06-04 05:31:37","endLine":101,"groupId":"16156","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNullPattern","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/2f/811d788b4ff9217e2af2b6e72d9ff821a49ba6.src","preCode":"  public void testNullPattern()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_extract] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_extract(a, null)\", Parser.withMap(ImmutableMap.of(\"a\", \"foo\")));\n    Assert.assertNull(result.value());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/expression/RegexpExtractExprMacroTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"184b202411ffe6d04037e6b670985a58c3bf53e5","commitMessage":"@@@add computed Expr output types (#10370)\n\n* push down ValueType to ExprType conversion.  tidy up\n\n* determine expr output type for given input types\n\n* revert unintended name change\n\n* add nullable\n\n* tidy up\n\n* fixup\n\n* more better\n\n* fix signatures\n\n* naming things is hard\n\n* fix inspection\n\n* javadoc\n\n* make default implementation of Expr.getOutputType that returns null\n\n* rename method\n\n* more test\n\n* add output for contains expr macro.  split operation and function auto conversion","date":"2020-09-15 09:18:56","modifiedFileCount":"39","status":"M","submitter":"Clint Wylie"},{"authorTime":"2021-05-04 13:17:10","codes":[{"authorDate":"2021-05-04 13:17:10","commitOrder":3,"curCode":"  public void testNullPattern()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_like] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_like(a, null)\", InputBindings.withMap(ImmutableMap.of(\"a\", \"foo\")));\n    Assert.assertEquals(\n        ExprEval.ofLongBoolean(true).value(),\n        result.value()\n    );\n  }\n","date":"2021-05-04 13:17:10","endLine":82,"groupId":"106197","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testNullPattern","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/fb/6d99f7c72bb7eb37eecfc44dfedf32a64815e9.src","preCode":"  public void testNullPattern()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_like] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_like(a, null)\", Parser.withMap(ImmutableMap.of(\"a\", \"foo\")));\n    Assert.assertEquals(\n        ExprEval.ofLongBoolean(true).value(),\n        result.value()\n    );\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/expression/RegexpLikeExprMacroTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2021-05-04 13:17:10","commitOrder":3,"curCode":"  public void testNullPattern()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_extract] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_extract(a, null)\", InputBindings.withMap(ImmutableMap.of(\"a\", \"foo\")));\n    Assert.assertNull(result.value());\n  }\n","date":"2021-05-04 13:17:10","endLine":101,"groupId":"106197","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testNullPattern","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-druid-10-0.7/blobInfo/CC_OUT/blobs/8d/7a322efc05b06fb5c0c2c1e33a5cde785eb7fe.src","preCode":"  public void testNullPattern()\n  {\n    if (NullHandling.sqlCompatible()) {\n      expectException(IllegalArgumentException.class, \"Function[regexp_extract] pattern must be a string literal\");\n    }\n\n    final ExprEval<?> result = eval(\"regexp_extract(a, null)\", Parser.withMap(ImmutableMap.of(\"a\", \"foo\")));\n    Assert.assertNull(result.value());\n  }\n","realPath":"processing/src/test/java/org/apache/druid/query/expression/RegexpExtractExprMacroTest.java","repoName":"druid","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"554f1ffeee94fab1ca0fa641a51f584766e504f2","commitMessage":"@@@ARRAY_AGG sql aggregator function (#11157)\n\n* ARRAY_AGG sql aggregator function\n\n* add javadoc\n\n* spelling\n\n* review stuff.  return null instead of empty when nil input\n\n* review stuff\n\n* Update sql.md\n\n* use type inference for finalize.  refactor some things","date":"2021-05-04 13:17:10","modifiedFileCount":"24","status":"M","submitter":"Clint Wylie"}]
